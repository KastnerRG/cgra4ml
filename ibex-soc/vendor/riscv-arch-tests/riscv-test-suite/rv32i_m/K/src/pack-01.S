
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 18:29:26 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bcrypto/32/dataset.yaml \
//                  --cgf /home/anku/work2/bcrypto/32/rv32ik.yaml \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pack instruction of the RISC-V RV32Zk,RV32Zbkb,RV32Zkn,RV32Zks extension for the pack covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZk,RV32IZbkb,RV32IZkn,RV32IZks")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zk.*);def TEST_CASE_1=True;",pack)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zkn.*);def TEST_CASE_1=True;",pack)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",pack)

RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbkb.*);def TEST_CASE_1=True;",pack)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31, 
// opcode: pack ; op1:x31; op2:x30; dest:x31; op1val:0xffffffff;  op2val:0x8577eb1
TEST_RR_OP(pack, x31, x31, x30, 0x00000000, 0xffffffff, 0x8577eb1, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x31, rd==x30, 
// opcode: pack ; op1:x29; op2:x31; dest:x30; op1val:0x4ffe831a;  op2val:0x0
TEST_RR_OP(pack, x30, x29, x31, 0x00000000, 0x4ffe831a, 0x0, x1, 4, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, 
// opcode: pack ; op1:x28; op2:x28; dest:x28; op1val:0xafc08ace;  op2val:0xafc08ace
TEST_RR_OP(pack, x28, x28, x28, 0x00000000, 0xafc08ace, 0xafc08ace, x1, 8, x2)

inst_3:
// rs2 == rd != rs1, rs1==x30, rs2==x29, rd==x29, 
// opcode: pack ; op1:x30; op2:x29; dest:x29; op1val:0xaf6e9055;  op2val:0x40000000
TEST_RR_OP(pack, x29, x30, x29, 0x00000000, 0xaf6e9055, 0x40000000, x1, 12, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, 
// opcode: pack ; op1:x26; op2:x26; dest:x27; op1val:0x5b130474;  op2val:0x5b130474
TEST_RR_OP(pack, x27, x26, x26, 0x00000000, 0x5b130474, 0x5b130474, x1, 16, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, 
// opcode: pack ; op1:x27; op2:x25; dest:x26; op1val:0x3eea126e;  op2val:0x90000000
TEST_RR_OP(pack, x26, x27, x25, 0x00000000, 0x3eea126e, 0x90000000, x1, 20, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, 
// opcode: pack ; op1:x24; op2:x27; dest:x25; op1val:0x9c734d77;  op2val:0xb8000000
TEST_RR_OP(pack, x25, x24, x27, 0x00000000, 0x9c734d77, 0xb8000000, x1, 24, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, 
// opcode: pack ; op1:x25; op2:x23; dest:x24; op1val:0x5a694bca;  op2val:0xb4000000
TEST_RR_OP(pack, x24, x25, x23, 0x00000000, 0x5a694bca, 0xb4000000, x1, 28, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: pack ; op1:x22; op2:x24; dest:x23; op1val:0xed52e4ca;  op2val:0x3e000000
TEST_RR_OP(pack, x23, x22, x24, 0x00000000, 0xed52e4ca, 0x3e000000, x1, 32, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: pack ; op1:x23; op2:x21; dest:x22; op1val:0xb5cb2a93;  op2val:0xfb000000
TEST_RR_OP(pack, x22, x23, x21, 0x00000000, 0xb5cb2a93, 0xfb000000, x1, 36, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: pack ; op1:x20; op2:x22; dest:x21; op1val:0x29324e16;  op2val:0x68800000
TEST_RR_OP(pack, x21, x20, x22, 0x00000000, 0x29324e16, 0x68800000, x1, 40, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: pack ; op1:x21; op2:x19; dest:x20; op1val:0xbc5fb419;  op2val:0xb7400000
TEST_RR_OP(pack, x20, x21, x19, 0x00000000, 0xbc5fb419, 0xb7400000, x1, 44, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: pack ; op1:x18; op2:x20; dest:x19; op1val:0x8e92e1b8;  op2val:0x5ce00000
TEST_RR_OP(pack, x19, x18, x20, 0x00000000, 0x8e92e1b8, 0x5ce00000, x1, 48, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: pack ; op1:x19; op2:x17; dest:x18; op1val:0x96a3b48b;  op2val:0x49f00000
TEST_RR_OP(pack, x18, x19, x17, 0x00000000, 0x96a3b48b, 0x49f00000, x1, 52, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: pack ; op1:x16; op2:x18; dest:x17; op1val:0xa095049;  op2val:0x53d80000
TEST_RR_OP(pack, x17, x16, x18, 0x00000000, 0xa095049, 0x53d80000, x1, 56, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: pack ; op1:x17; op2:x15; dest:x16; op1val:0x6f6e71b7;  op2val:0x2ec40000
TEST_RR_OP(pack, x16, x17, x15, 0x00000000, 0x6f6e71b7, 0x2ec40000, x1, 60, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: pack ; op1:x14; op2:x16; dest:x15; op1val:0x236cc43d;  op2val:0x8e860000
TEST_RR_OP(pack, x15, x14, x16, 0x00000000, 0x236cc43d, 0x8e860000, x1, 64, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: pack ; op1:x15; op2:x13; dest:x14; op1val:0xe2ed8971;  op2val:0x6fbf0000
TEST_RR_OP(pack, x14, x15, x13, 0x00000000, 0xe2ed8971, 0x6fbf0000, x1, 68, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: pack ; op1:x12; op2:x14; dest:x13; op1val:0x6fa7b3e;  op2val:0x354e8000
TEST_RR_OP(pack, x13, x12, x14, 0x00000000, 0x6fa7b3e, 0x354e8000, x1, 72, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: pack ; op1:x13; op2:x11; dest:x12; op1val:0x4143da51;  op2val:0xfb07c000
TEST_RR_OP(pack, x12, x13, x11, 0x00000000, 0x4143da51, 0xfb07c000, x1, 76, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: pack ; op1:x10; op2:x12; dest:x11; op1val:0xcac78511;  op2val:0xdffa2000
TEST_RR_OP(pack, x11, x10, x12, 0x00000000, 0xcac78511, 0xdffa2000, x1, 80, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: pack ; op1:x11; op2:x9; dest:x10; op1val:0xdf880b11;  op2val:0x45d1f000
TEST_RR_OP(pack, x10, x11, x9, 0x00000000, 0xdf880b11, 0x45d1f000, x1, 84, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: pack ; op1:x8; op2:x10; dest:x9; op1val:0xbd230058;  op2val:0x9069a800
TEST_RR_OP(pack, x9, x8, x10, 0x00000000, 0xbd230058, 0x9069a800, x1, 88, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: pack ; op1:x9; op2:x7; dest:x8; op1val:0xf2597377;  op2val:0xf5b1b400
TEST_RR_OP(pack, x8, x9, x7, 0x00000000, 0xf2597377, 0xf5b1b400, x1, 92, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: pack ; op1:x6; op2:x8; dest:x7; op1val:0x5a8e7f31;  op2val:0x6b6da00
TEST_RR_OP(pack, x7, x6, x8, 0x00000000, 0x5a8e7f31, 0x6b6da00, x1, 96, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: pack ; op1:x7; op2:x5; dest:x6; op1val:0x7a3621f5;  op2val:0xbfb0f100
TEST_RR_OP(pack, x6, x7, x5, 0x00000000, 0x7a3621f5, 0xbfb0f100, x1, 100, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: pack ; op1:x4; op2:x6; dest:x5; op1val:0x1e3c492c;  op2val:0xd838c880
TEST_RR_OP(pack, x5, x4, x6, 0x00000000, 0x1e3c492c, 0xd838c880, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: pack ; op1:x5; op2:x3; dest:x4; op1val:0xd4faf4b1;  op2val:0x5c46aec0
TEST_RR_OP(pack, x4, x5, x3, 0x00000000, 0xd4faf4b1, 0x5c46aec0, x7, 4, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: pack ; op1:x2; op2:x4; dest:x3; op1val:0x27a16894;  op2val:0xcf7ac620
TEST_RR_OP(pack, x3, x2, x4, 0x00000000, 0x27a16894, 0xcf7ac620, x7, 8, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: pack ; op1:x3; op2:x1; dest:x2; op1val:0xa3ef19e;  op2val:0x5c2f650
TEST_RR_OP(pack, x2, x3, x1, 0x00000000, 0xa3ef19e, 0x5c2f650, x7, 12, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: pack ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0xeec50588
TEST_RR_OP(pack, x1, x0, x2, 0x00000000, 0x0, 0xeec50588, x7, 16, x8)

inst_31:
// rs1==x1, 
// opcode: pack ; op1:x1; op2:x30; dest:x31; op1val:0x577f8847;  op2val:0xca7160cc
TEST_RR_OP(pack, x31, x1, x30, 0x00000000, 0x577f8847, 0xca7160cc, x7, 20, x8)

inst_32:
// rs2==x0, 
// opcode: pack ; op1:x30; op2:x0; dest:x31; op1val:0x9b5eaf0a;  op2val:0x0
TEST_RR_OP(pack, x31, x30, x0, 0x00000000, 0x9b5eaf0a, 0x0, x7, 24, x8)

inst_33:
// rd==x0, 
// opcode: pack ; op1:x31; op2:x30; dest:x0; op1val:0x5d3bbce0;  op2val:0x76f86039
TEST_RR_OP(pack, x0, x31, x30, 0x00000000, 0x5d3bbce0, 0x76f86039, x7, 28, x8)

inst_34:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xfd1032e8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x0, 0xfd1032e8, x7, 32, x8)

inst_35:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x7b246c17
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x80000000, 0x7b246c17, x7, 36, x8)

inst_36:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x56f3eef1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x40000000, 0x56f3eef1, x7, 40, x8)

inst_37:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa0000000;  op2val:0x75923260
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa0000000, 0x75923260, x7, 44, x8)

inst_38:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xb9d3087c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x10000000, 0xb9d3087c, x7, 48, x8)

inst_39:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa8000000;  op2val:0x46cbd355
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa8000000, 0x46cbd355, x7, 52, x8)

inst_40:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe4000000;  op2val:0x4616e73d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe4000000, 0x4616e73d, x7, 56, x8)

inst_41:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x8e000000;  op2val:0x8ccaec71
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x8e000000, 0x8ccaec71, x7, 60, x8)

inst_42:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x13000000;  op2val:0x9b774054
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x13000000, 0x9b774054, x7, 64, x8)

inst_43:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x8b800000;  op2val:0x6d5fcd18
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x8b800000, 0x6d5fcd18, x7, 68, x8)

inst_44:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7ec00000;  op2val:0x696f561
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7ec00000, 0x696f561, x7, 72, x8)

inst_45:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3da00000;  op2val:0x6e1e98e2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3da00000, 0x6e1e98e2, x7, 76, x8)

inst_46:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x20100000;  op2val:0x2dedb6a7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x20100000, 0x2dedb6a7, x7, 80, x8)

inst_47:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x98380000;  op2val:0x3c272728
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x98380000, 0x3c272728, x7, 84, x8)

inst_48:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x80f40000;  op2val:0x4f55c73d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x80f40000, 0x4f55c73d, x7, 88, x8)

inst_49:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x43560000;  op2val:0xb0ab577a
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x43560000, 0xb0ab577a, x7, 92, x8)

inst_50:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x62a90000;  op2val:0x42f5d75e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x62a90000, 0x42f5d75e, x7, 96, x8)

inst_51:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x60348000;  op2val:0xb9f09825
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x60348000, 0xb9f09825, x7, 100, x8)

inst_52:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5ef6c000;  op2val:0x9bfad94f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5ef6c000, 0x9bfad94f, x7, 104, x8)

inst_53:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x79df6000;  op2val:0x98918dd8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x79df6000, 0x98918dd8, x7, 108, x8)

inst_54:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x864c1000;  op2val:0x9b811f47
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x864c1000, 0x9b811f47, x7, 112, x8)

inst_55:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x735cb800;  op2val:0xd0d18fb0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x735cb800, 0xd0d18fb0, x7, 116, x8)

inst_56:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x29554400;  op2val:0x71992790
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x29554400, 0x71992790, x7, 120, x8)

inst_57:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa9a56a00;  op2val:0x8248f803
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa9a56a00, 0x8248f803, x7, 124, x8)

inst_58:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc3405d00;  op2val:0xeb3d7873
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc3405d00, 0xeb3d7873, x7, 128, x8)

inst_59:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x394d8080;  op2val:0xd7a7bf5e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x394d8080, 0xd7a7bf5e, x7, 132, x8)

inst_60:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc6677840;  op2val:0xd1ba5c0f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc6677840, 0xd1ba5c0f, x7, 136, x8)

inst_61:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x70598e60;  op2val:0xd19e3224
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x70598e60, 0xd19e3224, x7, 140, x8)

inst_62:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x98a59f90;  op2val:0x35d30d74
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x98a59f90, 0x35d30d74, x7, 144, x8)

inst_63:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd306deb8;  op2val:0x70a76e49
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd306deb8, 0x70a76e49, x7, 148, x8)

inst_64:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x18a01374;  op2val:0x9fcdb9e1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x18a01374, 0x9fcdb9e1, x7, 152, x8)

inst_65:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc3667402;  op2val:0x5fefe911
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc3667402, 0x5fefe911, x7, 156, x8)

inst_66:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x797d76df;  op2val:0x598b88db
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x797d76df, 0x598b88db, x7, 160, x8)

inst_67:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb7e7669e;  op2val:0xc04f662
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb7e7669e, 0xc04f662, x7, 164, x8)

inst_68:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd24f0724;  op2val:0xcd41cad1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd24f0724, 0xcd41cad1, x7, 168, x8)

inst_69:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x585022a3;  op2val:0x1203965b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x585022a3, 0x1203965b, x7, 172, x8)

inst_70:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xee8f948a;  op2val:0x7a9ac0a7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xee8f948a, 0x7a9ac0a7, x7, 176, x8)

inst_71:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2655fa99;  op2val:0x2aa8e42f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2655fa99, 0x2aa8e42f, x7, 180, x8)

inst_72:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc96a183;  op2val:0x211d785f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc96a183, 0x211d785f, x7, 184, x8)

inst_73:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x88f931f4;  op2val:0x59dde33f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x88f931f4, 0x59dde33f, x7, 188, x8)

inst_74:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x6f2bf862;  op2val:0x711e627f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x6f2bf862, 0x711e627f, x7, 192, x8)

inst_75:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5c6c32a5;  op2val:0x19835aff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5c6c32a5, 0x19835aff, x7, 196, x8)

inst_76:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x58fc0342;  op2val:0x88b3dff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x58fc0342, 0x88b3dff, x7, 200, x8)

inst_77:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x636a75e3;  op2val:0x9a6da3ff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x636a75e3, 0x9a6da3ff, x7, 204, x8)

inst_78:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x4ed62428;  op2val:0x37e0d7ff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x4ed62428, 0x37e0d7ff, x7, 208, x8)

inst_79:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd2d12745;  op2val:0x5e59cfff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd2d12745, 0x5e59cfff, x7, 212, x8)

inst_80:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd770f3c;  op2val:0xdd129fff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd770f3c, 0xdd129fff, x7, 216, x8)

inst_81:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2311acfb;  op2val:0x872ebfff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2311acfb, 0x872ebfff, x7, 220, x8)

inst_82:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfb13bbc;  op2val:0x55367fff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfb13bbc, 0x55367fff, x7, 224, x8)

inst_83:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x8dfc2307;  op2val:0xfdd2ffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x8dfc2307, 0xfdd2ffff, x7, 228, x8)

inst_84:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7312be6d;  op2val:0x30bdffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7312be6d, 0x30bdffff, x7, 232, x8)

inst_85:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc61b1fbf;  op2val:0xa743ffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc61b1fbf, 0xa743ffff, x7, 236, x8)

inst_86:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xebda5a4f;  op2val:0x9987ffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xebda5a4f, 0x9987ffff, x7, 240, x8)

inst_87:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc215e193;  op2val:0x118fffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc215e193, 0x118fffff, x7, 244, x8)

inst_88:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x75ee935f;  op2val:0x65dfffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x75ee935f, 0x65dfffff, x7, 248, x8)

inst_89:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9c16162;  op2val:0x6cbfffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9c16162, 0x6cbfffff, x7, 252, x8)

inst_90:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa4053175;  op2val:0x347fffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa4053175, 0x347fffff, x7, 256, x8)

inst_91:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x499006c8;  op2val:0xc4ffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x499006c8, 0xc4ffffff, x7, 260, x8)

inst_92:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3c5b3eee;  op2val:0x41ffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3c5b3eee, 0x41ffffff, x7, 264, x8)

inst_93:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd95fd86a;  op2val:0x6bffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd95fd86a, 0x6bffffff, x7, 268, x8)

inst_94:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x25784f4f;  op2val:0x87ffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x25784f4f, 0x87ffffff, x7, 272, x8)

inst_95:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x82018fa;  op2val:0xcfffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x82018fa, 0xcfffffff, x7, 276, x8)

inst_96:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x350cc530;  op2val:0x9fffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x350cc530, 0x9fffffff, x7, 280, x8)

inst_97:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7966a24e;  op2val:0x3fffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7966a24e, 0x3fffffff, x7, 284, x8)

inst_98:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x51d6d6da;  op2val:0x7fffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x51d6d6da, 0x7fffffff, x7, 288, x8)

inst_99:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd5a2038f;  op2val:0xffffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd5a2038f, 0xffffffff, x7, 292, x8)

inst_100:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xff7746e6;  op2val:0x4f829b65
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xff7746e6, 0x4f829b65, x7, 296, x8)

inst_101:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf89a7241;  op2val:0xc2f091
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf89a7241, 0xc2f091, x7, 300, x8)

inst_102:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x11b36a93;  op2val:0xb1f5d853
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x11b36a93, 0xb1f5d853, x7, 304, x8)

inst_103:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc9932457;  op2val:0x39be2172
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc9932457, 0x39be2172, x7, 308, x8)

inst_104:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x4b9a6c8f;  op2val:0x316039ee
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x4b9a6c8f, 0x316039ee, x7, 312, x8)

inst_105:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9541241f;  op2val:0x5761a866
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9541241f, 0x5761a866, x7, 316, x8)

inst_106:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x94b431bf;  op2val:0x9e4d1f4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x94b431bf, 0x9e4d1f4, x7, 320, x8)

inst_107:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xdc8fe97f;  op2val:0x9e03793f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xdc8fe97f, 0x9e03793f, x7, 324, x8)

inst_108:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb903ceff;  op2val:0x7f1071ec
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb903ceff, 0x7f1071ec, x7, 328, x8)

inst_109:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb494a5ff;  op2val:0x9a7ef9e4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb494a5ff, 0x9a7ef9e4, x7, 332, x8)

inst_110:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe2dd83ff;  op2val:0x59c05bb9
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe2dd83ff, 0x59c05bb9, x7, 336, x8)

inst_111:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xbbafd7ff;  op2val:0xde451397
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xbbafd7ff, 0xde451397, x7, 340, x8)

inst_112:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xce5c4fff;  op2val:0x40f27005
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xce5c4fff, 0x40f27005, x7, 344, x8)

inst_113:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x39935fff;  op2val:0x24496fe3
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x39935fff, 0x24496fe3, x7, 348, x8)

inst_114:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xeed7bfff;  op2val:0xde14bff2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xeed7bfff, 0xde14bff2, x7, 352, x8)

inst_115:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x8e7fff;  op2val:0xb808a677
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x8e7fff, 0xb808a677, x7, 356, x8)

inst_116:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x12c2ffff;  op2val:0x76b1fd3d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x12c2ffff, 0x76b1fd3d, x7, 360, x8)

inst_117:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe3a5ffff;  op2val:0x5dcf019d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe3a5ffff, 0x5dcf019d, x7, 364, x8)

inst_118:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9b03ffff;  op2val:0x47b7097b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9b03ffff, 0x47b7097b, x7, 368, x8)

inst_119:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5f07ffff;  op2val:0x759f1b43
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5f07ffff, 0x759f1b43, x7, 372, x8)

inst_120:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x33cfffff;  op2val:0x5b331999
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x33cfffff, 0x5b331999, x7, 376, x8)

inst_121:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x709fffff;  op2val:0x2d37de81
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x709fffff, 0x2d37de81, x7, 380, x8)

inst_122:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd1bfffff;  op2val:0xfcb627af
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd1bfffff, 0xfcb627af, x7, 384, x8)

inst_123:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xab7fffff;  op2val:0x1e0b4ee5
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xab7fffff, 0x1e0b4ee5, x7, 388, x8)

inst_124:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7cffffff;  op2val:0xfb3e7196
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7cffffff, 0xfb3e7196, x7, 392, x8)

inst_125:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x59ffffff;  op2val:0xd9959a62
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x59ffffff, 0xd9959a62, x7, 396, x8)

inst_126:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xdbffffff;  op2val:0xe08409f0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xdbffffff, 0xe08409f0, x7, 400, x8)

inst_127:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0x258ececb
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf7ffffff, 0x258ececb, x7, 404, x8)

inst_128:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x6fffffff;  op2val:0xff7d5ec0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x6fffffff, 0xff7d5ec0, x7, 408, x8)

inst_129:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9fffffff;  op2val:0x4b6ea010
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9fffffff, 0x4b6ea010, x7, 412, x8)

inst_130:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff;  op2val:0xd885bbac
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3fffffff, 0xd885bbac, x7, 416, x8)

inst_131:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xbbe8f88d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7fffffff, 0xbbe8f88d, x7, 420, x8)

inst_132:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xe3d6e4b9
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffffff, 0xe3d6e4b9, x7, 424, x8)

inst_133:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x494b6d2;  op2val:0x970216fd
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x494b6d2, 0x970216fd, x7, 428, x8)

inst_134:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf2650b71;  op2val:0x5cb58b8f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf2650b71, 0x5cb58b8f, x7, 432, x8)

inst_135:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x21af214a;  op2val:0x27efda6c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x21af214a, 0x27efda6c, x7, 436, x8)

inst_136:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x482ea760;  op2val:0x1d1ef7c0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x482ea760, 0x1d1ef7c0, x7, 440, x8)

inst_137:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf7a0443;  op2val:0xfc2a909
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf7a0443, 0xfc2a909, x7, 444, x8)

inst_138:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x69534048;  op2val:0x4e9e4a6
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x69534048, 0x4e9e4a6, x7, 448, x8)

inst_139:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x43e3ef5;  op2val:0x25fdcd7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x43e3ef5, 0x25fdcd7, x7, 452, x8)

inst_140:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x12fad802;  op2val:0x1782ebc
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x12fad802, 0x1782ebc, x7, 456, x8)

inst_141:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x119b4fe5;  op2val:0xa39575
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x119b4fe5, 0xa39575, x7, 460, x8)

inst_142:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7db224cb;  op2val:0x49886f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7db224cb, 0x49886f, x7, 464, x8)

inst_143:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb45f51c3;  op2val:0x25693c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb45f51c3, 0x25693c, x7, 468, x8)

inst_144:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x41536363;  op2val:0x18031a
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x41536363, 0x18031a, x7, 472, x8)

inst_145:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1a953cca;  op2val:0xa8267
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1a953cca, 0xa8267, x7, 476, x8)

inst_146:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x14186ebf;  op2val:0x73010
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x14186ebf, 0x73010, x7, 480, x8)

inst_147:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf33c1a7f;  op2val:0x38734
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf33c1a7f, 0x38734, x7, 484, x8)

inst_148:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x8dce6f52;  op2val:0x1eab1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x8dce6f52, 0x1eab1, x7, 488, x8)

inst_149:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3096c6c8;  op2val:0xb8ec
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3096c6c8, 0xb8ec, x7, 492, x8)

inst_150:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9c461cb5;  op2val:0x7530
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9c461cb5, 0x7530, x7, 496, x8)

inst_151:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x27756991;  op2val:0x3ed5
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x27756991, 0x3ed5, x7, 500, x8)

inst_152:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x62d74145;  op2val:0x1055
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x62d74145, 0x1055, x7, 504, x8)

inst_153:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x931719fd;  op2val:0xe9e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x931719fd, 0xe9e, x7, 508, x8)

inst_154:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x965768e0;  op2val:0x59b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x965768e0, 0x59b, x7, 512, x8)

inst_155:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x74057241;  op2val:0x208
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x74057241, 0x208, x7, 516, x8)

inst_156:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5e617f8e;  op2val:0x1e8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5e617f8e, 0x1e8, x7, 520, x8)

inst_157:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3e361858;  op2val:0xd2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3e361858, 0xd2, x7, 524, x8)

inst_158:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x13041452;  op2val:0x71
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x13041452, 0x71, x7, 528, x8)

inst_159:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x4bdbf090;  op2val:0x34
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x4bdbf090, 0x34, x7, 532, x8)

inst_160:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9c3ecb54;  op2val:0x19
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9c3ecb54, 0x19, x7, 536, x8)

inst_161:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x421e7a60;  op2val:0xb
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x421e7a60, 0xb, x7, 540, x8)

inst_162:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2577c1ec;  op2val:0x5
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2577c1ec, 0x5, x7, 544, x8)

inst_163:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x19af685d;  op2val:0x2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x19af685d, 0x2, x7, 548, x8)

inst_164:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2ff36007;  op2val:0x1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2ff36007, 0x1, x7, 552, x8)

inst_165:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe286852c;  op2val:0x0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe286852c, 0x0, x7, 556, x8)

inst_166:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc511488a;  op2val:0x97bdd982
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc511488a, 0x97bdd982, x7, 560, x8)

inst_167:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x65151c41;  op2val:0x367e5d6d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x65151c41, 0x367e5d6d, x7, 564, x8)

inst_168:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x24ca83b3;  op2val:0x623d8eb7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x24ca83b3, 0x623d8eb7, x7, 568, x8)

inst_169:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1c3b66fb;  op2val:0x21870f0b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1c3b66fb, 0x21870f0b, x7, 572, x8)

inst_170:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa8a6fd0;  op2val:0x82450164
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa8a6fd0, 0x82450164, x7, 576, x8)

inst_171:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x69ca08c;  op2val:0x8f2df760
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x69ca08c, 0x8f2df760, x7, 580, x8)

inst_172:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3552c95;  op2val:0x7ca07386
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3552c95, 0x7ca07386, x7, 584, x8)

inst_173:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x174ea19;  op2val:0x19de2bc1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x174ea19, 0x19de2bc1, x7, 588, x8)

inst_174:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa454f2;  op2val:0xec3fbf4d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa454f2, 0xec3fbf4d, x7, 592, x8)

inst_175:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7e9bee;  op2val:0x164f1513
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7e9bee, 0x164f1513, x7, 596, x8)

inst_176:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2c7cd0;  op2val:0xacc6d8f2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2c7cd0, 0xacc6d8f2, x7, 600, x8)

inst_177:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x177310;  op2val:0xa123f501
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x177310, 0xa123f501, x7, 604, x8)

inst_178:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x91609;  op2val:0xb57a6a1d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x91609, 0xb57a6a1d, x7, 608, x8)

inst_179:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x40be0;  op2val:0xe90794df
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x40be0, 0xe90794df, x7, 612, x8)

inst_180:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x28d1b;  op2val:0xaf5570ee
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x28d1b, 0xaf5570ee, x7, 616, x8)

inst_181:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1fbe5;  op2val:0xd8b9b45c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1fbe5, 0xd8b9b45c, x7, 620, x8)

inst_182:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xaac1;  op2val:0x1ba1192e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xaac1, 0x1ba1192e, x7, 624, x8)

inst_183:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x62c3;  op2val:0x49fe85b0
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x62c3, 0x49fe85b0, x7, 628, x8)

inst_184:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x22fd;  op2val:0x4105cca7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x22fd, 0x4105cca7, x7, 632, x8)

inst_185:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x16b3;  op2val:0xd7185dda
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x16b3, 0xd7185dda, x7, 636, x8)

inst_186:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa38;  op2val:0xa7a11490
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa38, 0xa7a11490, x7, 640, x8)

inst_187:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x6a7;  op2val:0xa9964aef
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x6a7, 0xa9964aef, x7, 644, x8)

inst_188:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3b9;  op2val:0x4b4d8474
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3b9, 0x4b4d8474, x7, 648, x8)

inst_189:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x190;  op2val:0x76c468ae
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x190, 0x76c468ae, x7, 652, x8)

inst_190:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd4;  op2val:0x9208a65
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd4, 0x9208a65, x7, 656, x8)

inst_191:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x67;  op2val:0x8743feb6
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x67, 0x8743feb6, x7, 660, x8)

inst_192:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x39;  op2val:0xa66b0d38
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x39, 0xa66b0d38, x7, 664, x8)

inst_193:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1c;  op2val:0xfb710734
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1c, 0xfb710734, x7, 668, x8)

inst_194:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe;  op2val:0xa26b7f62
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe, 0xa26b7f62, x7, 672, x8)

inst_195:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0x4dabb481
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7, 0x4dabb481, x7, 676, x8)

inst_196:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x2fa91425
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3, 0x2fa91425, x7, 680, x8)

inst_197:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x965eda32
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1, 0x965eda32, x7, 684, x8)

inst_198:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xc7fde805
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x0, 0xc7fde805, x7, 688, x8)

inst_199:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffec35fe;  op2val:0x6d3f408c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffec35fe, 0x6d3f408c, x7, 692, x8)

inst_200:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x976ad220;  op2val:0x946a3674
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x976ad220, 0x946a3674, x7, 696, x8)

inst_201:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5990fe96;  op2val:0xdc6113a4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5990fe96, 0xdc6113a4, x7, 700, x8)

inst_202:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc96efdc4;  op2val:0xe42a809c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc96efdc4, 0xe42a809c, x7, 704, x8)

inst_203:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xab8534c1;  op2val:0xf1a25760
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xab8534c1, 0xf1a25760, x7, 708, x8)

inst_204:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xd1142724;  op2val:0xfb37bec9
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xd1142724, 0xfb37bec9, x7, 712, x8)

inst_205:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf65e7737;  op2val:0xfce51a66
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf65e7737, 0xfce51a66, x7, 716, x8)

inst_206:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x16cbc21c;  op2val:0xfedebb9c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x16cbc21c, 0xfedebb9c, x7, 720, x8)

inst_207:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xdbdd4dd9;  op2val:0xff69340a
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xdbdd4dd9, 0xff69340a, x7, 724, x8)

inst_208:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x4bd90a77;  op2val:0xff9cf3f4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x4bd90a77, 0xff9cf3f4, x7, 728, x8)

inst_209:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xcebe24d9;  op2val:0xffc00793
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xcebe24d9, 0xffc00793, x7, 732, x8)

inst_210:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xa0e0bd86;  op2val:0xffee1fc4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xa0e0bd86, 0xffee1fc4, x7, 736, x8)

inst_211:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x3cc279b3;  op2val:0xfff06038
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x3cc279b3, 0xfff06038, x7, 740, x8)

inst_212:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x754f9b96;  op2val:0xfff93d53
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x754f9b96, 0xfff93d53, x7, 744, x8)

inst_213:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x72745307;  op2val:0xfffc47e8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x72745307, 0xfffc47e8, x7, 748, x8)

inst_214:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xdcae6d62;  op2val:0xfffe7302
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xdcae6d62, 0xfffe7302, x7, 752, x8)

inst_215:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7c2c966d;  op2val:0xffff1ce8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7c2c966d, 0xffff1ce8, x7, 756, x8)

inst_216:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9bb4752d;  op2val:0xffffb5c6
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9bb4752d, 0xffffb5c6, x7, 760, x8)

inst_217:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x17be082f;  op2val:0xffffdfa4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x17be082f, 0xffffdfa4, x7, 764, x8)

inst_218:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x109ff475;  op2val:0xffffef0b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x109ff475, 0xffffef0b, x7, 768, x8)

inst_219:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb97ea6;  op2val:0xfffff43f
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb97ea6, 0xfffff43f, x7, 772, x8)

inst_220:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf956ec0b;  op2val:0xfffffb4a
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf956ec0b, 0xfffffb4a, x7, 776, x8)

inst_221:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x70fc1afc;  op2val:0xfffffda4
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x70fc1afc, 0xfffffda4, x7, 780, x8)

inst_222:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x6348306e;  op2val:0xfffffecb
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x6348306e, 0xfffffecb, x7, 784, x8)

inst_223:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x66b072b9;  op2val:0xffffff54
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x66b072b9, 0xffffff54, x7, 788, x8)

inst_224:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x7ff822ed;  op2val:0xffffffa9
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x7ff822ed, 0xffffffa9, x7, 792, x8)

inst_225:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe918be9f;  op2val:0xffffffc3
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe918be9f, 0xffffffc3, x7, 796, x8)

inst_226:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe4bae7f6;  op2val:0xffffffe7
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe4bae7f6, 0xffffffe7, x7, 800, x8)

inst_227:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xde9a896f;  op2val:0xfffffff1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xde9a896f, 0xfffffff1, x7, 804, x8)

inst_228:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x2881e531;  op2val:0xfffffff8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x2881e531, 0xfffffff8, x7, 808, x8)

inst_229:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x1475f78d;  op2val:0xfffffffc
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x1475f78d, 0xfffffffc, x7, 812, x8)

inst_230:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe59cf78f;  op2val:0xfffffffe
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe59cf78f, 0xfffffffe, x7, 816, x8)

inst_231:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xb66b3284;  op2val:0xffffffff
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xb66b3284, 0xffffffff, x7, 820, x8)

inst_232:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x6f4930c9;  op2val:0x39422745
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x6f4930c9, 0x39422745, x7, 824, x8)

inst_233:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x85d97467;  op2val:0x58fa6e1c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x85d97467, 0x58fa6e1c, x7, 828, x8)

inst_234:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xc70afc93;  op2val:0x2d143295
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xc70afc93, 0x2d143295, x7, 832, x8)

inst_235:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xe911655f;  op2val:0xd230b46c
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xe911655f, 0xd230b46c, x7, 836, x8)

inst_236:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf4ab0a39;  op2val:0x4d753ac1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf4ab0a39, 0x4d753ac1, x7, 840, x8)

inst_237:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xf8bd4821;  op2val:0x1e9667c2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xf8bd4821, 0x1e9667c2, x7, 844, x8)

inst_238:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfcd7e667;  op2val:0xae4839a1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfcd7e667, 0xae4839a1, x7, 848, x8)

inst_239:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfe71cfdf;  op2val:0x6a013380
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfe71cfdf, 0x6a013380, x7, 852, x8)

inst_240:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xff1c11ae;  op2val:0x59432a19
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xff1c11ae, 0x59432a19, x7, 856, x8)

inst_241:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xff89799a;  op2val:0xceb506f6
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xff89799a, 0xceb506f6, x7, 860, x8)

inst_242:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffc80b13;  op2val:0xc5ec6148
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffc80b13, 0xc5ec6148, x7, 864, x8)

inst_243:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffe94647;  op2val:0x99ef1857
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffe94647, 0x99ef1857, x7, 868, x8)

inst_244:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfff263cf;  op2val:0x14b91c79
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfff263cf, 0x14b91c79, x7, 872, x8)

inst_245:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfff919a1;  op2val:0xa86b8a6e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfff919a1, 0xa86b8a6e, x7, 876, x8)

inst_246:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffde89d;  op2val:0x8208d09
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffde89d, 0x8208d09, x7, 880, x8)

inst_247:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffec9d0;  op2val:0x69b1dcbf
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffec9d0, 0x69b1dcbf, x7, 884, x8)

inst_248:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffff5576;  op2val:0x807da245
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffff5576, 0x807da245, x7, 888, x8)

inst_249:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffb6df;  op2val:0x95a4d257
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffb6df, 0x95a4d257, x7, 892, x8)

inst_250:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffc561;  op2val:0x735c076b
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffc561, 0x735c076b, x7, 896, x8)

inst_251:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffeab5;  op2val:0xe5f0307e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffeab5, 0xe5f0307e, x7, 900, x8)

inst_252:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffff602;  op2val:0xe8dac663
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffff602, 0xe8dac663, x7, 904, x8)

inst_253:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffff8b1;  op2val:0x109c207
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffff8b1, 0x109c207, x7, 908, x8)

inst_254:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffca0;  op2val:0x600fecc1
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffca0, 0x600fecc1, x7, 912, x8)

inst_255:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffecc;  op2val:0xfb7f6f5d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffecc, 0xfb7f6f5d, x7, 916, x8)

inst_256:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffff6e;  op2val:0x5cd2875e
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffff6e, 0x5cd2875e, x7, 920, x8)

inst_257:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffff84;  op2val:0xacca7f0d
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffff84, 0xacca7f0d, x7, 924, x8)

inst_258:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdd;  op2val:0x5ae6a228
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffffdd, 0x5ae6a228, x7, 928, x8)

inst_259:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xffffffe7;  op2val:0xff1e5bef
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xffffffe7, 0xff1e5bef, x7, 932, x8)

inst_260:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff4;  op2val:0x137a9777
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffff4, 0x137a9777, x7, 936, x8)

inst_261:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa;  op2val:0x854a9657
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffffa, 0x854a9657, x7, 940, x8)

inst_262:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0xcf84b683
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffffd, 0xcf84b683, x7, 944, x8)

inst_263:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x93fdcab8
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xfffffffe, 0x93fdcab8, x7, 948, x8)

inst_264:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xafc08ace;  op2val:0x80000000
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xafc08ace, 0x80000000, x7, 952, x8)

inst_265:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5b130474;  op2val:0xe0000000
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5b130474, 0xe0000000, x7, 956, x8)

inst_266:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0xcb8193ef;  op2val:0xeec50588
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0xcb8193ef, 0xeec50588, x7, 960, x8)

inst_267:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x9b5eaf0a;  op2val:0x60e30da2
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x9b5eaf0a, 0x60e30da2, x7, 964, x8)

inst_268:
// 
// opcode: pack ; op1:x30; op2:x29; dest:x31; op1val:0x5d3bbce0;  op2val:0x76f86039
TEST_RR_OP(pack, x31, x30, x29, 0x00000000, 0x5d3bbce0, 0x76f86039, x7, 968, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 243*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
