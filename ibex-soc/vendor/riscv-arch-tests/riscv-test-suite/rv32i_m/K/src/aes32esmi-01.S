
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 18:29:26 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bcrypto/32/dataset.yaml \
//                  --cgf /home/anku/work2/bcrypto/32/rv32ik.yaml \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the aes32esmi instruction of the RISC-V RV32Zk,RV32Zkn,RV32Zkne extension for the aes32esmi covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IZk,RV32IZkn,RV32IZkne")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*Zk.*);def TEST_CASE_1=True;",aes32esmi)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*Zkn.*);def TEST_CASE_1=True;",aes32esmi)

RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*RV32.*I.*Zkne.*);def TEST_CASE_1=True;",aes32esmi)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x30, rd==x31, 
// opcode: aes32esmi; rd:x31; op1:x31; op2:x30; op1val:0x0; op2val:0x3020100; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x31, x30, 0x0, 0x00000000, 0x0, 0x3020100, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x31, rd==x30, 
// opcode: aes32esmi; rd:x30; op1:x29; op2:x31; op1val:0x3fb0fe60; op2val:0x1826a804; immval:0x1
TEST_RRI_OP(aes32esmi, x30, x29, x31, 0x1, 0x00000000, 0x3fb0fe60, 0x1826a804, x1, 4, x2)

inst_2:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, 
// opcode: aes32esmi; rd:x28; op1:x28; op2:x28; op1val:0xb369e102; op2val:0xb369e102; immval:0x3
TEST_RRI_OP(aes32esmi, x28, x28, x28, 0x3, 0x00000000, 0xb369e102, 0xb369e102, x1, 8, x2)

inst_3:
// rs2 == rd != rs1, rs1==x30, rs2==x29, rd==x29, 
// opcode: aes32esmi; rd:x29; op1:x30; op2:x29; op1val:0x1aa1beeb; op2val:0xa4b7f979; immval:0x0
TEST_RRI_OP(aes32esmi, x29, x30, x29, 0x0, 0x00000000, 0x1aa1beeb, 0xa4b7f979, x1, 12, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, 
// opcode: aes32esmi; rd:x27; op1:x26; op2:x26; op1val:0x8678f5e3; op2val:0x8678f5e3; immval:0x3
TEST_RRI_OP(aes32esmi, x27, x26, x26, 0x3, 0x00000000, 0x8678f5e3, 0x8678f5e3, x1, 16, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, 
// opcode: aes32esmi; rd:x26; op1:x27; op2:x25; op1val:0x74a813d2; op2val:0xb0873a0f; immval:0x3
TEST_RRI_OP(aes32esmi, x26, x27, x25, 0x3, 0x00000000, 0x74a813d2, 0xb0873a0f, x1, 20, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, 
// opcode: aes32esmi; rd:x25; op1:x24; op2:x27; op1val:0x9f053821; op2val:0x91766f62; immval:0x2
TEST_RRI_OP(aes32esmi, x25, x24, x27, 0x2, 0x00000000, 0x9f053821, 0x91766f62, x1, 24, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, 
// opcode: aes32esmi; rd:x24; op1:x25; op2:x23; op1val:0xdc80d916; op2val:0x2a2a146d; immval:0x2
TEST_RRI_OP(aes32esmi, x24, x25, x23, 0x2, 0x00000000, 0xdc80d916, 0x2a2a146d, x1, 28, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: aes32esmi; rd:x23; op1:x22; op2:x24; op1val:0xcd157633; op2val:0x4113ee60; immval:0x0
TEST_RRI_OP(aes32esmi, x23, x22, x24, 0x0, 0x00000000, 0xcd157633, 0x4113ee60, x1, 32, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: aes32esmi; rd:x22; op1:x23; op2:x21; op1val:0xe3f4fca3; op2val:0xa6c9253a; immval:0x2
TEST_RRI_OP(aes32esmi, x22, x23, x21, 0x2, 0x00000000, 0xe3f4fca3, 0xa6c9253a, x1, 36, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: aes32esmi; rd:x21; op1:x20; op2:x22; op1val:0x7bcad7c4; op2val:0xc2f1c53e; immval:0x0
TEST_RRI_OP(aes32esmi, x21, x20, x22, 0x0, 0x00000000, 0x7bcad7c4, 0xc2f1c53e, x1, 40, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: aes32esmi; rd:x20; op1:x21; op2:x19; op1val:0x633dbabc; op2val:0xb6c4fd42; immval:0x2
TEST_RRI_OP(aes32esmi, x20, x21, x19, 0x2, 0x00000000, 0x633dbabc, 0xb6c4fd42, x1, 44, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: aes32esmi; rd:x19; op1:x18; op2:x20; op1val:0x299c3bcf; op2val:0xaa6bb2bd; immval:0x3
TEST_RRI_OP(aes32esmi, x19, x18, x20, 0x3, 0x00000000, 0x299c3bcf, 0xaa6bb2bd, x1, 48, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: aes32esmi; rd:x18; op1:x19; op2:x17; op1val:0xa371db42; op2val:0x2e3ee8c4; immval:0x3
TEST_RRI_OP(aes32esmi, x18, x19, x17, 0x3, 0x00000000, 0xa371db42, 0x2e3ee8c4, x1, 52, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: aes32esmi; rd:x17; op1:x16; op2:x18; op1val:0x8e2eac2a; op2val:0xd169a3f8; immval:0x1
TEST_RRI_OP(aes32esmi, x17, x16, x18, 0x1, 0x00000000, 0x8e2eac2a, 0xd169a3f8, x1, 56, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: aes32esmi; rd:x16; op1:x17; op2:x15; op1val:0xa0569d76; op2val:0x35f9377f; immval:0x3
TEST_RRI_OP(aes32esmi, x16, x17, x15, 0x3, 0x00000000, 0xa0569d76, 0x35f9377f, x1, 60, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: aes32esmi; rd:x15; op1:x14; op2:x16; op1val:0x240d84d6; op2val:0xe4921bf7; immval:0x2
TEST_RRI_OP(aes32esmi, x15, x14, x16, 0x2, 0x00000000, 0x240d84d6, 0xe4921bf7, x1, 64, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: aes32esmi; rd:x14; op1:x15; op2:x13; op1val:0x3acdf616; op2val:0xfcc1b543; immval:0x1
TEST_RRI_OP(aes32esmi, x14, x15, x13, 0x1, 0x00000000, 0x3acdf616, 0xfcc1b543, x1, 68, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: aes32esmi; rd:x13; op1:x12; op2:x14; op1val:0x74b8de87; op2val:0xf273b44c; immval:0x2
TEST_RRI_OP(aes32esmi, x13, x12, x14, 0x2, 0x00000000, 0x74b8de87, 0xf273b44c, x1, 72, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: aes32esmi; rd:x12; op1:x13; op2:x11; op1val:0xbb61a9cd; op2val:0xccce240c; immval:0x0
TEST_RRI_OP(aes32esmi, x12, x13, x11, 0x0, 0x00000000, 0xbb61a9cd, 0xccce240c, x1, 76, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: aes32esmi; rd:x11; op1:x10; op2:x12; op1val:0x254a9493; op2val:0xc5521660; immval:0x3
TEST_RRI_OP(aes32esmi, x11, x10, x12, 0x3, 0x00000000, 0x254a9493, 0xc5521660, x1, 80, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: aes32esmi; rd:x10; op1:x11; op2:x9; op1val:0x0; op2val:0xfffefdfc; immval:0x3
TEST_RRI_OP(aes32esmi, x10, x11, x9, 0x3, 0x00000000, 0x0, 0xfffefdfc, x1, 84, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: aes32esmi; rd:x9; op1:x8; op2:x10; op1val:0x0; op2val:0xfffefdfc; immval:0x2
TEST_RRI_OP(aes32esmi, x9, x8, x10, 0x2, 0x00000000, 0x0, 0xfffefdfc, x1, 88, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: aes32esmi; rd:x8; op1:x9; op2:x7; op1val:0x0; op2val:0xfffefdfc; immval:0x1
TEST_RRI_OP(aes32esmi, x8, x9, x7, 0x1, 0x00000000, 0x0, 0xfffefdfc, x1, 92, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: aes32esmi; rd:x7; op1:x6; op2:x8; op1val:0x0; op2val:0xfffefdfc; immval:0x0
TEST_RRI_OP(aes32esmi, x7, x6, x8, 0x0, 0x00000000, 0x0, 0xfffefdfc, x1, 96, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: aes32esmi; rd:x6; op1:x7; op2:x5; op1val:0x0; op2val:0xfbfaf9f8; immval:0x3
TEST_RRI_OP(aes32esmi, x6, x7, x5, 0x3, 0x00000000, 0x0, 0xfbfaf9f8, x1, 100, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: aes32esmi; rd:x5; op1:x4; op2:x6; op1val:0x0; op2val:0xfbfaf9f8; immval:0x2
TEST_RRI_OP(aes32esmi, x5, x4, x6, 0x2, 0x00000000, 0x0, 0xfbfaf9f8, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: aes32esmi; rd:x4; op1:x5; op2:x3; op1val:0x0; op2val:0xfbfaf9f8; immval:0x1
TEST_RRI_OP(aes32esmi, x4, x5, x3, 0x1, 0x00000000, 0x0, 0xfbfaf9f8, x7, 4, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: aes32esmi; rd:x3; op1:x2; op2:x4; op1val:0x0; op2val:0xfbfaf9f8; immval:0x0
TEST_RRI_OP(aes32esmi, x3, x2, x4, 0x0, 0x00000000, 0x0, 0xfbfaf9f8, x7, 8, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: aes32esmi; rd:x2; op1:x3; op2:x1; op1val:0x0; op2val:0xf7f6f5f4; immval:0x3
TEST_RRI_OP(aes32esmi, x2, x3, x1, 0x3, 0x00000000, 0x0, 0xf7f6f5f4, x7, 12, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: aes32esmi; rd:x1; op1:x0; op2:x2; op1val:0x0; op2val:0xf7f6f5f4; immval:0x2
TEST_RRI_OP(aes32esmi, x1, x0, x2, 0x2, 0x00000000, 0x0, 0xf7f6f5f4, x7, 16, x8)

inst_31:
// rs1==x1, 
// opcode: aes32esmi; rd:x31; op1:x1; op2:x30; op1val:0x0; op2val:0xf7f6f5f4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x1, x30, 0x1, 0x00000000, 0x0, 0xf7f6f5f4, x7, 20, x8)

inst_32:
// rs2==x0, 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x0; op1val:0x0; op2val:0x0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x0, 0x0, 0x00000000, 0x0, 0x0, x7, 24, x8)

inst_33:
// rd==x0, 
// opcode: aes32esmi; rd:x0; op1:x31; op2:x30; op1val:0x0; op2val:0xf3f2f1f0; immval:0x3
TEST_RRI_OP(aes32esmi, x0, x31, x30, 0x3, 0x00000000, 0x0, 0xf3f2f1f0, x7, 28, x8)

inst_34:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf3f2f1f0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xf3f2f1f0, x7, 32, x8)

inst_35:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf3f2f1f0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xf3f2f1f0, x7, 36, x8)

inst_36:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf3f2f1f0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xf3f2f1f0, x7, 40, x8)

inst_37:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xefeeedec; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xefeeedec, x7, 44, x8)

inst_38:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xefeeedec; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xefeeedec, x7, 48, x8)

inst_39:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xefeeedec; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xefeeedec, x7, 52, x8)

inst_40:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xefeeedec; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xefeeedec, x7, 56, x8)

inst_41:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xebeae9e8; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xebeae9e8, x7, 60, x8)

inst_42:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xebeae9e8; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xebeae9e8, x7, 64, x8)

inst_43:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xebeae9e8; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xebeae9e8, x7, 68, x8)

inst_44:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xebeae9e8; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xebeae9e8, x7, 72, x8)

inst_45:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe7e6e5e4; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xe7e6e5e4, x7, 76, x8)

inst_46:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe7e6e5e4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xe7e6e5e4, x7, 80, x8)

inst_47:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe7e6e5e4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xe7e6e5e4, x7, 84, x8)

inst_48:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe7e6e5e4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xe7e6e5e4, x7, 88, x8)

inst_49:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe3e2e1e0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xe3e2e1e0, x7, 92, x8)

inst_50:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe3e2e1e0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xe3e2e1e0, x7, 96, x8)

inst_51:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe3e2e1e0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xe3e2e1e0, x7, 100, x8)

inst_52:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xe3e2e1e0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xe3e2e1e0, x7, 104, x8)

inst_53:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdfdedddc; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xdfdedddc, x7, 108, x8)

inst_54:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdfdedddc; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xdfdedddc, x7, 112, x8)

inst_55:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdfdedddc; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xdfdedddc, x7, 116, x8)

inst_56:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdfdedddc; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xdfdedddc, x7, 120, x8)

inst_57:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdbdad9d8; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xdbdad9d8, x7, 124, x8)

inst_58:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdbdad9d8; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xdbdad9d8, x7, 128, x8)

inst_59:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdbdad9d8; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xdbdad9d8, x7, 132, x8)

inst_60:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xdbdad9d8; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xdbdad9d8, x7, 136, x8)

inst_61:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd7d6d5d4; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xd7d6d5d4, x7, 140, x8)

inst_62:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd7d6d5d4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xd7d6d5d4, x7, 144, x8)

inst_63:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd7d6d5d4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xd7d6d5d4, x7, 148, x8)

inst_64:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd7d6d5d4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xd7d6d5d4, x7, 152, x8)

inst_65:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd3d2d1d0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xd3d2d1d0, x7, 156, x8)

inst_66:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd3d2d1d0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xd3d2d1d0, x7, 160, x8)

inst_67:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd3d2d1d0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xd3d2d1d0, x7, 164, x8)

inst_68:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xd3d2d1d0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xd3d2d1d0, x7, 168, x8)

inst_69:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcfcecdcc; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xcfcecdcc, x7, 172, x8)

inst_70:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcfcecdcc; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xcfcecdcc, x7, 176, x8)

inst_71:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcfcecdcc; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xcfcecdcc, x7, 180, x8)

inst_72:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcfcecdcc; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xcfcecdcc, x7, 184, x8)

inst_73:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcbcac9c8; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xcbcac9c8, x7, 188, x8)

inst_74:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcbcac9c8; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xcbcac9c8, x7, 192, x8)

inst_75:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcbcac9c8; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xcbcac9c8, x7, 196, x8)

inst_76:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xcbcac9c8; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xcbcac9c8, x7, 200, x8)

inst_77:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc7c6c5c4; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xc7c6c5c4, x7, 204, x8)

inst_78:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc7c6c5c4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xc7c6c5c4, x7, 208, x8)

inst_79:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc7c6c5c4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xc7c6c5c4, x7, 212, x8)

inst_80:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc7c6c5c4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xc7c6c5c4, x7, 216, x8)

inst_81:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc3c2c1c0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xc3c2c1c0, x7, 220, x8)

inst_82:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc3c2c1c0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xc3c2c1c0, x7, 224, x8)

inst_83:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc3c2c1c0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xc3c2c1c0, x7, 228, x8)

inst_84:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xc3c2c1c0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xc3c2c1c0, x7, 232, x8)

inst_85:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbfbebdbc; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xbfbebdbc, x7, 236, x8)

inst_86:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbfbebdbc; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xbfbebdbc, x7, 240, x8)

inst_87:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbfbebdbc; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xbfbebdbc, x7, 244, x8)

inst_88:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbfbebdbc; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xbfbebdbc, x7, 248, x8)

inst_89:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbbbab9b8; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xbbbab9b8, x7, 252, x8)

inst_90:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbbbab9b8; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xbbbab9b8, x7, 256, x8)

inst_91:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbbbab9b8; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xbbbab9b8, x7, 260, x8)

inst_92:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xbbbab9b8; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xbbbab9b8, x7, 264, x8)

inst_93:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb7b6b5b4; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xb7b6b5b4, x7, 268, x8)

inst_94:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb7b6b5b4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xb7b6b5b4, x7, 272, x8)

inst_95:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb7b6b5b4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xb7b6b5b4, x7, 276, x8)

inst_96:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb7b6b5b4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xb7b6b5b4, x7, 280, x8)

inst_97:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb3b2b1b0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xb3b2b1b0, x7, 284, x8)

inst_98:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb3b2b1b0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xb3b2b1b0, x7, 288, x8)

inst_99:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb3b2b1b0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xb3b2b1b0, x7, 292, x8)

inst_100:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb3b2b1b0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xb3b2b1b0, x7, 296, x8)

inst_101:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xafaeadac; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xafaeadac, x7, 300, x8)

inst_102:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xafaeadac; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xafaeadac, x7, 304, x8)

inst_103:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xafaeadac; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xafaeadac, x7, 308, x8)

inst_104:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xafaeadac; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xafaeadac, x7, 312, x8)

inst_105:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xabaaa9a8; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xabaaa9a8, x7, 316, x8)

inst_106:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xabaaa9a8; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xabaaa9a8, x7, 320, x8)

inst_107:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xabaaa9a8; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xabaaa9a8, x7, 324, x8)

inst_108:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xabaaa9a8; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xabaaa9a8, x7, 328, x8)

inst_109:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa7a6a5a4; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xa7a6a5a4, x7, 332, x8)

inst_110:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa7a6a5a4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xa7a6a5a4, x7, 336, x8)

inst_111:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa7a6a5a4; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xa7a6a5a4, x7, 340, x8)

inst_112:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa7a6a5a4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xa7a6a5a4, x7, 344, x8)

inst_113:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa3a2a1a0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xa3a2a1a0, x7, 348, x8)

inst_114:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa3a2a1a0; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xa3a2a1a0, x7, 352, x8)

inst_115:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa3a2a1a0; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xa3a2a1a0, x7, 356, x8)

inst_116:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xa3a2a1a0; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xa3a2a1a0, x7, 360, x8)

inst_117:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9f9e9d9c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x9f9e9d9c, x7, 364, x8)

inst_118:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9f9e9d9c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x9f9e9d9c, x7, 368, x8)

inst_119:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9f9e9d9c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x9f9e9d9c, x7, 372, x8)

inst_120:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9f9e9d9c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x9f9e9d9c, x7, 376, x8)

inst_121:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9b9a9998; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x9b9a9998, x7, 380, x8)

inst_122:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9b9a9998; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x9b9a9998, x7, 384, x8)

inst_123:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9b9a9998; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x9b9a9998, x7, 388, x8)

inst_124:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x9b9a9998; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x9b9a9998, x7, 392, x8)

inst_125:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x97969594; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x97969594, x7, 396, x8)

inst_126:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x97969594; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x97969594, x7, 400, x8)

inst_127:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x97969594; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x97969594, x7, 404, x8)

inst_128:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x97969594; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x97969594, x7, 408, x8)

inst_129:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x93929190; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x93929190, x7, 412, x8)

inst_130:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x93929190; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x93929190, x7, 416, x8)

inst_131:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x93929190; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x93929190, x7, 420, x8)

inst_132:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x93929190; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x93929190, x7, 424, x8)

inst_133:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8f8e8d8c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x8f8e8d8c, x7, 428, x8)

inst_134:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8f8e8d8c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x8f8e8d8c, x7, 432, x8)

inst_135:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8f8e8d8c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x8f8e8d8c, x7, 436, x8)

inst_136:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8f8e8d8c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x8f8e8d8c, x7, 440, x8)

inst_137:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8b8a8988; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x8b8a8988, x7, 444, x8)

inst_138:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8b8a8988; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x8b8a8988, x7, 448, x8)

inst_139:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8b8a8988; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x8b8a8988, x7, 452, x8)

inst_140:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x8b8a8988; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x8b8a8988, x7, 456, x8)

inst_141:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x87868584; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x87868584, x7, 460, x8)

inst_142:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x87868584; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x87868584, x7, 464, x8)

inst_143:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x87868584; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x87868584, x7, 468, x8)

inst_144:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x87868584; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x87868584, x7, 472, x8)

inst_145:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x83828180; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x83828180, x7, 476, x8)

inst_146:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x83828180; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x83828180, x7, 480, x8)

inst_147:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x83828180; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x83828180, x7, 484, x8)

inst_148:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x83828180; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x83828180, x7, 488, x8)

inst_149:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7f7e7d7c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x7f7e7d7c, x7, 492, x8)

inst_150:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7f7e7d7c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x7f7e7d7c, x7, 496, x8)

inst_151:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7f7e7d7c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x7f7e7d7c, x7, 500, x8)

inst_152:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7f7e7d7c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x7f7e7d7c, x7, 504, x8)

inst_153:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7b7a7978; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x7b7a7978, x7, 508, x8)

inst_154:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7b7a7978; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x7b7a7978, x7, 512, x8)

inst_155:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7b7a7978; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x7b7a7978, x7, 516, x8)

inst_156:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7b7a7978; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x7b7a7978, x7, 520, x8)

inst_157:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x77767574; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x77767574, x7, 524, x8)

inst_158:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x77767574; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x77767574, x7, 528, x8)

inst_159:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x77767574; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x77767574, x7, 532, x8)

inst_160:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x77767574; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x77767574, x7, 536, x8)

inst_161:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x73727170; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x73727170, x7, 540, x8)

inst_162:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x73727170; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x73727170, x7, 544, x8)

inst_163:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x73727170; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x73727170, x7, 548, x8)

inst_164:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x73727170; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x73727170, x7, 552, x8)

inst_165:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6f6e6d6c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x6f6e6d6c, x7, 556, x8)

inst_166:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6f6e6d6c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x6f6e6d6c, x7, 560, x8)

inst_167:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6f6e6d6c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x6f6e6d6c, x7, 564, x8)

inst_168:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6f6e6d6c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x6f6e6d6c, x7, 568, x8)

inst_169:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6b6a6968; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x6b6a6968, x7, 572, x8)

inst_170:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6b6a6968; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x6b6a6968, x7, 576, x8)

inst_171:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6b6a6968; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x6b6a6968, x7, 580, x8)

inst_172:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x6b6a6968; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x6b6a6968, x7, 584, x8)

inst_173:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x67666564; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x67666564, x7, 588, x8)

inst_174:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x67666564; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x67666564, x7, 592, x8)

inst_175:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x67666564; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x67666564, x7, 596, x8)

inst_176:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x67666564; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x67666564, x7, 600, x8)

inst_177:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x63626160; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x63626160, x7, 604, x8)

inst_178:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x63626160; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x63626160, x7, 608, x8)

inst_179:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x63626160; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x63626160, x7, 612, x8)

inst_180:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x63626160; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x63626160, x7, 616, x8)

inst_181:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5f5e5d5c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x5f5e5d5c, x7, 620, x8)

inst_182:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5f5e5d5c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x5f5e5d5c, x7, 624, x8)

inst_183:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5f5e5d5c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x5f5e5d5c, x7, 628, x8)

inst_184:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5f5e5d5c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x5f5e5d5c, x7, 632, x8)

inst_185:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5b5a5958; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x5b5a5958, x7, 636, x8)

inst_186:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5b5a5958; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x5b5a5958, x7, 640, x8)

inst_187:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5b5a5958; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x5b5a5958, x7, 644, x8)

inst_188:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x5b5a5958; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x5b5a5958, x7, 648, x8)

inst_189:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x57565554; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x57565554, x7, 652, x8)

inst_190:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x57565554; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x57565554, x7, 656, x8)

inst_191:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x57565554; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x57565554, x7, 660, x8)

inst_192:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x57565554; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x57565554, x7, 664, x8)

inst_193:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x53525150; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x53525150, x7, 668, x8)

inst_194:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x53525150; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x53525150, x7, 672, x8)

inst_195:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x53525150; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x53525150, x7, 676, x8)

inst_196:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x53525150; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x53525150, x7, 680, x8)

inst_197:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4f4e4d4c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x4f4e4d4c, x7, 684, x8)

inst_198:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4f4e4d4c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x4f4e4d4c, x7, 688, x8)

inst_199:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4f4e4d4c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x4f4e4d4c, x7, 692, x8)

inst_200:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4f4e4d4c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x4f4e4d4c, x7, 696, x8)

inst_201:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4b4a4948; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x4b4a4948, x7, 700, x8)

inst_202:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4b4a4948; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x4b4a4948, x7, 704, x8)

inst_203:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4b4a4948; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x4b4a4948, x7, 708, x8)

inst_204:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x4b4a4948; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x4b4a4948, x7, 712, x8)

inst_205:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x47464544; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x47464544, x7, 716, x8)

inst_206:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x47464544; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x47464544, x7, 720, x8)

inst_207:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x47464544; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x47464544, x7, 724, x8)

inst_208:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x47464544; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x47464544, x7, 728, x8)

inst_209:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x43424140; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x43424140, x7, 732, x8)

inst_210:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x43424140; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x43424140, x7, 736, x8)

inst_211:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x43424140; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x43424140, x7, 740, x8)

inst_212:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x43424140; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x43424140, x7, 744, x8)

inst_213:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3f3e3d3c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x3f3e3d3c, x7, 748, x8)

inst_214:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3f3e3d3c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x3f3e3d3c, x7, 752, x8)

inst_215:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3f3e3d3c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x3f3e3d3c, x7, 756, x8)

inst_216:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3f3e3d3c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x3f3e3d3c, x7, 760, x8)

inst_217:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3b3a3938; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x3b3a3938, x7, 764, x8)

inst_218:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3b3a3938; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x3b3a3938, x7, 768, x8)

inst_219:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3b3a3938; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x3b3a3938, x7, 772, x8)

inst_220:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3b3a3938; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x3b3a3938, x7, 776, x8)

inst_221:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x37363534; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x37363534, x7, 780, x8)

inst_222:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x37363534; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x37363534, x7, 784, x8)

inst_223:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x37363534; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x37363534, x7, 788, x8)

inst_224:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x37363534; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x37363534, x7, 792, x8)

inst_225:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x33323130; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x33323130, x7, 796, x8)

inst_226:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x33323130; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x33323130, x7, 800, x8)

inst_227:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x33323130; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x33323130, x7, 804, x8)

inst_228:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x33323130; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x33323130, x7, 808, x8)

inst_229:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2f2e2d2c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x2f2e2d2c, x7, 812, x8)

inst_230:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2f2e2d2c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x2f2e2d2c, x7, 816, x8)

inst_231:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2f2e2d2c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x2f2e2d2c, x7, 820, x8)

inst_232:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2f2e2d2c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x2f2e2d2c, x7, 824, x8)

inst_233:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2b2a2928; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x2b2a2928, x7, 828, x8)

inst_234:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2b2a2928; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x2b2a2928, x7, 832, x8)

inst_235:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2b2a2928; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x2b2a2928, x7, 836, x8)

inst_236:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x2b2a2928; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x2b2a2928, x7, 840, x8)

inst_237:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x27262524; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x27262524, x7, 844, x8)

inst_238:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x27262524; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x27262524, x7, 848, x8)

inst_239:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x27262524; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x27262524, x7, 852, x8)

inst_240:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x27262524; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x27262524, x7, 856, x8)

inst_241:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x23222120; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x23222120, x7, 860, x8)

inst_242:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x23222120; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x23222120, x7, 864, x8)

inst_243:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x23222120; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x23222120, x7, 868, x8)

inst_244:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x23222120; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x23222120, x7, 872, x8)

inst_245:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1f1e1d1c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x1f1e1d1c, x7, 876, x8)

inst_246:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1f1e1d1c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x1f1e1d1c, x7, 880, x8)

inst_247:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1f1e1d1c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x1f1e1d1c, x7, 884, x8)

inst_248:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1f1e1d1c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x1f1e1d1c, x7, 888, x8)

inst_249:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1b1a1918; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x1b1a1918, x7, 892, x8)

inst_250:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1b1a1918; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x1b1a1918, x7, 896, x8)

inst_251:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1b1a1918; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x1b1a1918, x7, 900, x8)

inst_252:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x1b1a1918; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x1b1a1918, x7, 904, x8)

inst_253:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x17161514; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x17161514, x7, 908, x8)

inst_254:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x17161514; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x17161514, x7, 912, x8)

inst_255:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x17161514; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x17161514, x7, 916, x8)

inst_256:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x17161514; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x17161514, x7, 920, x8)

inst_257:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x13121110; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x13121110, x7, 924, x8)

inst_258:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x13121110; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x13121110, x7, 928, x8)

inst_259:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x13121110; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x13121110, x7, 932, x8)

inst_260:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x13121110; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x13121110, x7, 936, x8)

inst_261:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf0e0d0c; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xf0e0d0c, x7, 940, x8)

inst_262:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf0e0d0c; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xf0e0d0c, x7, 944, x8)

inst_263:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf0e0d0c; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xf0e0d0c, x7, 948, x8)

inst_264:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf0e0d0c; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xf0e0d0c, x7, 952, x8)

inst_265:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb0a0908; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xb0a0908, x7, 956, x8)

inst_266:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb0a0908; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xb0a0908, x7, 960, x8)

inst_267:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb0a0908; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0xb0a0908, x7, 964, x8)

inst_268:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xb0a0908; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xb0a0908, x7, 968, x8)

inst_269:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7060504; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x7060504, x7, 972, x8)

inst_270:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7060504; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x7060504, x7, 976, x8)

inst_271:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7060504; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x7060504, x7, 980, x8)

inst_272:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x7060504; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0x7060504, x7, 984, x8)

inst_273:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3020100; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0x3020100, x7, 988, x8)

inst_274:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3020100; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0x3020100, x7, 992, x8)

inst_275:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0x3020100; immval:0x1
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x1, 0x00000000, 0x0, 0x3020100, x7, 996, x8)

inst_276:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0xb369e102; op2val:0x293f9f60; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0xb369e102, 0x293f9f60, x7, 1000, x8)

inst_277:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x8678f5e3; op2val:0x358a9235; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x8678f5e3, 0x358a9235, x7, 1004, x8)

inst_278:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf7f6f5f4; immval:0x2
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x2, 0x00000000, 0x0, 0xf7f6f5f4, x7, 1008, x8)

inst_279:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf7f6f5f4; immval:0x0
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x0, 0x00000000, 0x0, 0xf7f6f5f4, x7, 1012, x8)

inst_280:
// 
// opcode: aes32esmi; rd:x31; op1:x30; op2:x29; op1val:0x0; op2val:0xf3f2f1f0; immval:0x3
TEST_RRI_OP(aes32esmi, x31, x30, x29, 0x3, 0x00000000, 0x0, 0xf3f2f1f0, x7, 1016, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 255*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
