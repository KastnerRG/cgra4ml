
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcrsa16 instruction of the RISC-V RV32PZicsr extension for the kcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x29, rd==x24, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2049, rs1_h1_val == -8193
// opcode: kcrsa16 ; op1:x16; op2:x29; dest:x24; op1val:0xdfff8000;  op2val:0x07f7ff
TEST_RR_OP(kcrsa16, x24, x16, x29, 0x00000000, 0xdfff8000, 0x07f7ff, x7, 0, x2)

inst_1:// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x16, rs1_h1_val == rs2_h1_val, rs1_h0_val == -129, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -129, rs1_h1_val == -129, rs2_h0_val == -9
// opcode: kcrsa16 ; op1:x24; op2:x24; dest:x16; op1val:0xff7fff7f;  op2val:0xff7ffff7
TEST_RR_OP(kcrsa16, x16, x24, x24, 0x00000000, 0xff7fff7f, 0xff7ffff7, x7, 8, x2)

inst_2:// rs1 == rd != rs2, rs1==x31, rs2==x14, rd==x31, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 1024, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 256, rs2_h1_val == -33, rs1_h0_val == 21845
// opcode: kcrsa16 ; op1:x31; op2:x14; dest:x31; op1val:0x1005555;  op2val:0xffdf0400
TEST_RR_OP(kcrsa16, x31, x31, x14, 0x00000000, 0x1005555, 0xffdf0400, x7, 16, x2)

inst_3:// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 16384, rs1_h0_val == -17, rs2_h1_val == 128, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 128
// opcode: kcrsa16 ; op1:x13; op2:x13; dest:x13; op1val:0x80ffef;  op2val:0x804000
TEST_RR_OP(kcrsa16, x13, x13, x13, 0x00000000, 0x80ffef, 0x804000, x7, 24, x2)

inst_4:// rs2 == rd != rs1, rs1==x22, rs2==x1, rd==x1, rs1_h0_val == rs2_h0_val, rs1_h1_val == -1, rs2_h0_val == -513, rs1_h0_val == -513, rs2_h1_val == -9
// opcode: kcrsa16 ; op1:x22; op2:x1; dest:x1; op1val:0xfffffdff;  op2val:0xfff7fdff
TEST_RR_OP(kcrsa16, x1, x22, x1, 0x00000000, 0xfffffdff, 0xfff7fdff, x7, 32, x2)

inst_5:// rs1==x29, rs2==x16, rd==x19, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 64, rs2_h1_val == -513, rs1_h1_val == -2
// opcode: kcrsa16 ; op1:x29; op2:x16; dest:x19; op1val:0xfffe0040;  op2val:0xfdffc000
TEST_RR_OP(kcrsa16, x19, x29, x16, 0x00000000, 0xfffe0040, 0xfdffc000, x7, 40, x2)

inst_6:// rs1==x28, rs2==x31, rd==x3, rs2_h1_val == -21846, rs1_h0_val == 128, rs2_h0_val == 32767
// opcode: kcrsa16 ; op1:x28; op2:x31; dest:x3; op1val:0xfffa0080;  op2val:0xaaaa7fff
TEST_RR_OP(kcrsa16, x3, x28, x31, 0x00000000, 0xfffa0080, 0xaaaa7fff, x7, 48, x2)

inst_7:// rs1==x15, rs2==x19, rd==x23, rs2_h1_val == 21845, rs1_h1_val == -33
// opcode: kcrsa16 ; op1:x15; op2:x19; dest:x23; op1val:0xffdf0009;  op2val:0x55554000
TEST_RR_OP(kcrsa16, x23, x15, x19, 0x00000000, 0xffdf0009, 0x55554000, x7, 56, x2)

inst_8:// rs1==x30, rs2==x20, rd==x9, rs2_h1_val == 32767, rs1_h1_val == -65, rs1_h0_val == 16384, rs2_h0_val == -8193
// opcode: kcrsa16 ; op1:x30; op2:x20; dest:x9; op1val:0xffbf4000;  op2val:0x7fffdfff
TEST_RR_OP(kcrsa16, x9, x30, x20, 0x00000000, 0xffbf4000, 0x7fffdfff, x7, 64, x2)

inst_9:// rs1==x18, rs2==x21, rd==x14, rs2_h1_val == -16385, rs2_h0_val == -1025, rs1_h1_val == 512, rs1_h0_val == 1024
// opcode: kcrsa16 ; op1:x18; op2:x21; dest:x14; op1val:0x2000400;  op2val:0xbffffbff
TEST_RR_OP(kcrsa16, x14, x18, x21, 0x00000000, 0x2000400, 0xbffffbff, x7, 72, x2)

inst_10:// rs1==x1, rs2==x12, rd==x29, rs2_h1_val == -8193, rs2_h0_val == 512
// opcode: kcrsa16 ; op1:x1; op2:x12; dest:x29; op1val:0x1000006;  op2val:0xdfff0200
TEST_RR_OP(kcrsa16, x29, x1, x12, 0x00000000, 0x1000006, 0xdfff0200, x7, 80, x2)

inst_11:// rs1==x0, rs2==x22, rd==x17, rs2_h1_val == -4097, rs1_h0_val == 8
// opcode: kcrsa16 ; op1:x0; op2:x22; dest:x17; op1val:0x2000008;  op2val:0xefff0009
TEST_RR_OP(kcrsa16, x17, x0, x22, 0x00000000, 0x2000008, 0xefff0009, x7, 88, x2)

inst_12:// rs1==x23, rs2==x0, rd==x11, rs2_h1_val == -2049, rs1_h0_val == 16
// opcode: kcrsa16 ; op1:x23; op2:x0; dest:x11; op1val:0xfffe0010;  op2val:0xf7fff7ff
TEST_RR_OP(kcrsa16, x11, x23, x0, 0x00000000, 0xfffe0010, 0xf7fff7ff, x7, 96, x2)

inst_13:// rs1==x6, rs2==x17, rd==x5, rs2_h1_val == -1025, 
// opcode: kcrsa16 ; op1:x6; op2:x17; dest:x5; op1val:0xffff0400;  op2val:0xfbfffdff
TEST_RR_OP(kcrsa16, x5, x6, x17, 0x00000000, 0xffff0400, 0xfbfffdff, x7, 104, x2)

inst_14:// rs1==x4, rs2==x27, rd==x26, rs2_h1_val == -257, rs1_h0_val == 2048
// opcode: kcrsa16 ; op1:x4; op2:x27; dest:x26; op1val:0x800800;  op2val:0xfeffc000
TEST_RR_OP(kcrsa16, x26, x4, x27, 0x00000000, 0x800800, 0xfeffc000, x7, 112, x2)

inst_15:// rs1==x10, rs2==x18, rd==x2, rs2_h1_val == -65, rs1_h0_val == -65
// opcode: kcrsa16 ; op1:x10; op2:x18; dest:x2; op1val:0xfff8ffbf;  op2val:0xffbffdff
TEST_RR_OP(kcrsa16, x2, x10, x18, 0x00000000, 0xfff8ffbf, 0xffbffdff, x7, 120, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:// rs1==x26, rs2==x25, rd==x0, rs2_h1_val == -17, rs2_h0_val == -5, rs1_h1_val == 8192, rs1_h0_val == -2
// opcode: kcrsa16 ; op1:x26; op2:x25; dest:x0; op1val:0x2000fffe;  op2val:0xffeffffb
TEST_RR_OP(kcrsa16, x0, x26, x25, 0x00000000, 0x2000fffe, 0xffeffffb, x1, 0, x13)

inst_17:// rs1==x25, rs2==x23, rd==x30, rs2_h1_val == -5, rs2_h0_val == -257, rs1_h1_val == -3
// opcode: kcrsa16 ; op1:x25; op2:x23; dest:x30; op1val:0xfffd0400;  op2val:0xfffbfeff
TEST_RR_OP(kcrsa16, x30, x25, x23, 0x00000000, 0xfffd0400, 0xfffbfeff, x1, 8, x13)

inst_18:// rs1==x21, rs2==x30, rd==x10, rs2_h1_val == -3, rs1_h1_val == 64, rs1_h0_val == -3, rs2_h0_val == -33
// opcode: kcrsa16 ; op1:x21; op2:x30; dest:x10; op1val:0x40fffd;  op2val:0xfffdffdf
TEST_RR_OP(kcrsa16, x10, x21, x30, 0x00000000, 0x40fffd, 0xfffdffdf, x1, 16, x13)

inst_19:// rs1==x3, rs2==x4, rd==x21, rs2_h1_val == -2, rs1_h1_val == -257
// opcode: kcrsa16 ; op1:x3; op2:x4; dest:x21; op1val:0xfefffff6;  op2val:0xfffefff6
TEST_RR_OP(kcrsa16, x21, x3, x4, 0x00000000, 0xfefffff6, 0xfffefff6, x1, 24, x13)

inst_20:// rs1==x7, rs2==x3, rd==x8, rs2_h1_val == -32768, rs2_h0_val == 21845, rs1_h1_val == 2048
// opcode: kcrsa16 ; op1:x7; op2:x3; dest:x8; op1val:0x8000010;  op2val:0x80005555
TEST_RR_OP(kcrsa16, x8, x7, x3, 0x00000000, 0x8000010, 0x80005555, x1, 32, x13)

inst_21:// rs1==x2, rs2==x11, rd==x20, rs2_h1_val == 16384, rs2_h0_val == 1, rs1_h0_val == -1
// opcode: kcrsa16 ; op1:x2; op2:x11; dest:x20; op1val:0x07ffff;  op2val:0x40000001
TEST_RR_OP(kcrsa16, x20, x2, x11, 0x00000000, 0x07ffff, 0x40000001, x1, 40, x13)

inst_22:// rs1==x12, rs2==x10, rd==x6, rs2_h1_val == 8192, rs2_h0_val == -16385
// opcode: kcrsa16 ; op1:x12; op2:x10; dest:x6; op1val:0xfffafffe;  op2val:0x2000bfff
TEST_RR_OP(kcrsa16, x6, x12, x10, 0x00000000, 0xfffafffe, 0x2000bfff, x1, 48, x13)

inst_23:// rs1==x19, rs2==x28, rd==x22, rs2_h1_val == 4096, rs1_h1_val == 32767
// opcode: kcrsa16 ; op1:x19; op2:x28; dest:x22; op1val:0x7ffffffd;  op2val:0x1000feff
TEST_RR_OP(kcrsa16, x22, x19, x28, 0x00000000, 0x7ffffffd, 0x1000feff, x1, 56, x13)

inst_24:// rs1==x17, rs2==x2, rd==x27, rs2_h1_val == 2048, rs2_h0_val == -21846, rs1_h0_val == 4
// opcode: kcrsa16 ; op1:x17; op2:x2; dest:x27; op1val:0x8000004;  op2val:0x800aaaa
TEST_RR_OP(kcrsa16, x27, x17, x2, 0x00000000, 0x8000004, 0x800aaaa, x1, 64, x13)

inst_25:// rs1==x11, rs2==x5, rd==x15, rs2_h1_val == 1024, rs1_h1_val == -1025
// opcode: kcrsa16 ; op1:x11; op2:x5; dest:x15; op1val:0xfbffffef;  op2val:0x400fff8
TEST_RR_OP(kcrsa16, x15, x11, x5, 0x00000000, 0xfbffffef, 0x400fff8, x1, 72, x13)

inst_26:// rs1==x20, rs2==x7, rd==x4, rs2_h1_val == 512, rs1_h0_val == 256, rs2_h0_val == 0
// opcode: kcrsa16 ; op1:x20; op2:x7; dest:x4; op1val:0xfbff0100;  op2val:0x2000000
TEST_RR_OP(kcrsa16, x4, x20, x7, 0x00000000, 0xfbff0100, 0x2000000, x1, 80, x13)

inst_27:// rs1==x5, rs2==x26, rd==x7, rs2_h1_val == 256, 
// opcode: kcrsa16 ; op1:x5; op2:x26; dest:x7; op1val:0xdfffffbf;  op2val:0x1005555
TEST_RR_OP(kcrsa16, x7, x5, x26, 0x00000000, 0xdfffffbf, 0x1005555, x1, 88, x13)

inst_28:// rs1==x27, rs2==x15, rd==x28, rs2_h1_val == 64, rs1_h1_val == -32768
// opcode: kcrsa16 ; op1:x27; op2:x15; dest:x28; op1val:0x8000fff6;  op2val:0x400001
TEST_RR_OP(kcrsa16, x28, x27, x15, 0x00000000, 0x8000fff6, 0x400001, x1, 96, x13)

inst_29:// rs1==x9, rs2==x8, rd==x12, rs2_h1_val == 32, rs1_h1_val == -4097, rs1_h0_val == 0
// opcode: kcrsa16 ; op1:x9; op2:x8; dest:x12; op1val:0xefff0000;  op2val:0x204000
TEST_RR_OP(kcrsa16, x12, x9, x8, 0x00000000, 0xefff0000, 0x204000, x1, 104, x13)

inst_30:// rs1==x8, rs2==x9, rd==x18, rs1_h0_val == -1025, 
// opcode: kcrsa16 ; op1:x8; op2:x9; dest:x18; op1val:0xffdffbff;  op2val:0xeffffff6
TEST_RR_OP(kcrsa16, x18, x8, x9, 0x00000000, 0xffdffbff, 0xeffffff6, x1, 112, x13)

inst_31:// rs1==x14, rs2==x6, rd==x25, rs1_h0_val == -257, 
// opcode: kcrsa16 ; op1:x14; op2:x6; dest:x25; op1val:0xfff8feff;  op2val:0xfffd0001
TEST_RR_OP(kcrsa16, x25, x14, x6, 0x00000000, 0xfff8feff, 0xfffd0001, x1, 120, x13)

inst_32:// rs1_h0_val == -33, rs1_h1_val == 1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf;  op2val:0x3fffbfff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x01ffdf, 0x3fffbfff, x1, 128, x13)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:// rs1_h0_val == -9, rs1_h1_val == 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff7;  op2val:0x07ffdf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x00fff7, 0x07ffdf, x1, 0, x2)

inst_34:// rs1_h0_val == -5, rs1_h1_val == 21845
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb;  op2val:0x5555fff8
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x5555fffb, 0x5555fff8, x1, 8, x2)

inst_35:// rs1_h0_val == 8192, rs1_h1_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x102000;  op2val:0xdffff7ff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x102000, 0xdffff7ff, x1, 16, x2)

inst_36:// rs1_h0_val == 4096, rs2_h0_val == 8
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff61000;  op2val:0x200008
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfff61000, 0x200008, x1, 24, x2)

inst_37:// rs1_h0_val == 512, rs2_h1_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400200;  op2val:0x10fff9
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x400200, 0x10fff9, x1, 32, x2)

inst_38:// rs1_h0_val == 32, rs2_h1_val == 1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000020;  op2val:0x01ffdf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x8000020, 0x01ffdf, x1, 40, x2)

inst_39:// rs1_h0_val == 2, rs2_h0_val == 32
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0002;  op2val:0xc0000020
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xefff0002, 0xc0000020, x1, 48, x2)

inst_40:// rs1_h0_val == 1, rs2_h0_val == 64
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0001;  op2val:0x55550040
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xffff0001, 0x55550040, x1, 56, x2)

inst_41:// rs2_h1_val == 8, rs1_h1_val == -2049, rs2_h0_val == 128
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff5555;  op2val:0x080080
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xf7ff5555, 0x080080, x1, 64, x2)

inst_42:// rs2_h1_val == 4, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800006;  op2val:0x04fff8
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x800006, 0x04fff8, x1, 72, x2)

inst_43:// rs2_h1_val == 2, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0005;  op2val:0x02ffdf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xefff0005, 0x02ffdf, x1, 80, x2)

inst_44:// rs2_h1_val == 0, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0020;  op2val:0x000005
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfbff0020, 0x000005, x1, 88, x2)

inst_45:// rs2_h1_val == -1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf;  op2val:0xfffffff8
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x07ffdf, 0xfffffff8, x1, 96, x2)

inst_46:// rs2_h0_val == -4097, rs1_h1_val == 32
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200007;  op2val:0x08efff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x200007, 0x08efff, x1, 104, x2)

inst_47:// rs2_h0_val == -129, rs1_h0_val == -2049
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffff7ff;  op2val:0x80ff7f
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x3ffff7ff, 0x80ff7f, x1, 112, x2)

inst_48:// rs2_h0_val == -3, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100;  op2val:0xfffffffd
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xdfff0100, 0xfffffffd, x1, 120, x2)

inst_49:// rs2_h0_val == -2, rs1_h1_val == -21846
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0008;  op2val:0xffeffffe
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xaaaa0008, 0xffeffffe, x1, 128, x2)

inst_50:// rs2_h0_val == -32768, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550001;  op2val:0x018000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x55550001, 0x018000, x1, 136, x2)

inst_51:// rs2_h0_val == 8192, rs1_h1_val == -5
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffa;  op2val:0xbfff2000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfffbfffa, 0xbfff2000, x1, 144, x2)

inst_52:// rs2_h0_val == 4096, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff2000;  op2val:0xc0001000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfeff2000, 0xc0001000, x1, 152, x2)

inst_53:// rs2_h0_val == 2048, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x060800
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xffffffdf, 0x060800, x1, 160, x2)

inst_54:// rs2_h0_val == 256, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400080;  op2val:0x090100
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x400080, 0x090100, x1, 168, x2)

inst_55:// rs2_h0_val == 16, rs1_h1_val == -17
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef5555;  op2val:0xdfff0010
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xffef5555, 0xdfff0010, x1, 176, x2)

inst_56:// rs2_h0_val == 4, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000;  op2val:0xdfff0004
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfbff2000, 0xdfff0004, x1, 184, x2)

inst_57:// rs2_h0_val == 2, rs1_h0_val == -16385
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbfff;  op2val:0x800002
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x7fffbfff, 0x800002, x1, 192, x2)

inst_58:// rs2_h0_val == -1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff8;  op2val:0xfff8ffff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xc000fff8, 0xfff8ffff, x1, 200, x2)

inst_59:// rs1_h1_val == -9, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feff;  op2val:0xbfff0400
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfff7feff, 0xbfff0400, x1, 208, x2)

inst_60:// rs1_h1_val == 16384, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb;  op2val:0xfffdfff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x4000fffb, 0xfffdfff6, x1, 216, x2)

inst_61:// rs1_h1_val == 4096, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff6;  op2val:0xdfff0000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x1000fff6, 0xdfff0000, x1, 224, x2)

inst_62:// rs1_h1_val == 1024, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000004;  op2val:0xffff0200
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x4000004, 0xffff0200, x1, 232, x2)

inst_63:// rs1_h1_val == 8, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffe;  op2val:0x05fff9
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x08fffe, 0x05fff9, x1, 240, x2)

inst_64:// rs1_h1_val == 4, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbff;  op2val:0x05fdff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x04fbff, 0x05fdff, x1, 248, x2)

inst_65:// rs1_h1_val == 2, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff;  op2val:0xfffd0080
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x02fdff, 0xfffd0080, x1, 256, x2)

inst_66:// rs1_h1_val == -513, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0005;  op2val:0xffdf8000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfdff0005, 0xffdf8000, x1, 264, x2)

inst_67:// rs2_h0_val == -17, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffa;  op2val:0x00ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x4000fffa, 0x00ffef, x1, 272, x2)

inst_68:// rs1_h1_val == -16385, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff8000;  op2val:0x07ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xbfff8000, 0x07ffef, x1, 280, x2)

inst_69:// rs1_h0_val == -21846, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaaaaa;  op2val:0x060100
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfffaaaaa, 0x060100, x1, 288, x2)

inst_70:// rs1_h0_val == 32767, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4007fff;  op2val:0x1000efff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x4007fff, 0x1000efff, x1, 296, x2)

inst_71:// rs2_h0_val == -65, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0003;  op2val:0x80ffbf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfdff0003, 0x80ffbf, x1, 304, x2)

inst_72:// rs1_h0_val == -8193, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffdfff;  op2val:0x20000007
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfdffdfff, 0x20000007, x1, 312, x2)

inst_73:// rs1_h0_val == -4097, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01efff;  op2val:0x5555ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x01efff, 0x5555ffef, x1, 320, x2)

inst_74:// rs1_h1_val == rs2_h1_val, rs1_h0_val == -129, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -129, rs1_h1_val == -129, rs2_h0_val == -9
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f;  op2val:0xff7ffff7
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xff7fff7f, 0xff7ffff7, x1, 328, x2)

inst_75:// rs2_h1_val == -2049, rs1_h0_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010;  op2val:0xf7fff7ff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0xfffe0010, 0xf7fff7ff, x1, 336, x2)

inst_76:// rs2_h1_val == -17, rs2_h0_val == -5, rs1_h1_val == 8192, rs1_h0_val == -2
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffe;  op2val:0xffeffffb
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x00000000, 0x2000fffe, 0xffeffffb, x1, 344, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 88*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
