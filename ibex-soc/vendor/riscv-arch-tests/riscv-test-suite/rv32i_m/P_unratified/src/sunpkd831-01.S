
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd831 instruction of the RISC-V RV32PZicsr extension for the sunpkd831 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd831)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1==x13, rd==x11, rs1_b0_val == -128, rs1_b2_val == 16, rs1_b1_val == 32
// opcode: sunpkd831 ; op1:x13; dest:x11; op1val:0xc0102080;
TEST_RD_OP( sunpkd831, x11, x13, 0x00000000, 0xc0102080, x5, 0, x16)

inst_1:
// rs1==x23, rd==x28, rs1_b3_val == -86, rs1_b2_val == -128
// opcode: sunpkd831 ; op1:x23; dest:x28; op1val:0xaa80fafc;
TEST_RD_OP( sunpkd831, x28, x23, 0x00000000, 0xaa80fafc, x5, 4, x16)

inst_2:
// rs1==x18, rd==x8, rs1_b3_val == 85, rs1_b1_val == -5
// opcode: sunpkd831 ; op1:x18; dest:x8; op1val:0x55c0fb80;
TEST_RD_OP( sunpkd831, x8, x18, 0x00000000, 0x55c0fb80, x5, 8, x16)

inst_3:
// rs1==x24, rd==x14, rs1_b3_val == 127, rs1_b0_val == 16, rs1_b2_val == 2
// opcode: sunpkd831 ; op1:x24; dest:x14; op1val:0x7f020910;
TEST_RD_OP( sunpkd831, x14, x24, 0x00000000, 0x7f020910, x5, 12, x16)

inst_4:
// rs1==x0, rd==x10, rs1_b3_val == -65, rs1_b1_val == -2, rs1_b2_val == 4
// opcode: sunpkd831 ; op1:x0; dest:x10; op1val:0xbf04fe80;
TEST_RD_OP( sunpkd831, x10, x0, 0x00000000, 0xbf04fe80, x5, 16, x16)

inst_5:
// rs1==x9, rd==x13, rs1_b3_val == -33, rs1_b1_val == -1
// opcode: sunpkd831 ; op1:x9; dest:x13; op1val:0xdf02fff9;
TEST_RD_OP( sunpkd831, x13, x9, 0x00000000, 0xdf02fff9, x5, 20, x16)

inst_6:
// rs1==x8, rd==x15, rs1_b3_val == -17, 
// opcode: sunpkd831 ; op1:x8; dest:x15; op1val:0xef03fc03;
TEST_RD_OP( sunpkd831, x15, x8, 0x00000000, 0xef03fc03, x5, 24, x16)

inst_7:
// rs1==x30, rd==x12, rs1_b3_val == -9, rs1_b1_val == -65
// opcode: sunpkd831 ; op1:x30; dest:x12; op1val:0xf703bf06;
TEST_RD_OP( sunpkd831, x12, x30, 0x00000000, 0xf703bf06, x5, 28, x16)

inst_8:
// rs1==x15, rd==x20, rs1_b3_val == -5, rs1_b2_val == 0
// opcode: sunpkd831 ; op1:x15; dest:x20; op1val:0xfb00f809;
TEST_RD_OP( sunpkd831, x20, x15, 0x00000000, 0xfb00f809, x5, 32, x16)

inst_9:
// rs1==x7, rd==x30, rs1_b3_val == -3, rs1_b2_val == -17
// opcode: sunpkd831 ; op1:x7; dest:x30; op1val:0xfdeffff6;
TEST_RD_OP( sunpkd831, x30, x7, 0x00000000, 0xfdeffff6, x5, 36, x16)

inst_10:
// rs1==x1, rd==x17, rs1_b3_val == -2, 
// opcode: sunpkd831 ; op1:x1; dest:x17; op1val:0xfe05ff05;
TEST_RD_OP( sunpkd831, x17, x1, 0x00000000, 0xfe05ff05, x5, 40, x16)

inst_11:
// rs1==x31, rd==x6, rs1_b3_val == -128, rs1_b1_val == -86, rs1_b2_val == -5
// opcode: sunpkd831 ; op1:x31; dest:x6; op1val:0x80fbaafc;
TEST_RD_OP( sunpkd831, x6, x31, 0x00000000, 0x80fbaafc, x5, 44, x16)

inst_12:
// rs1==x26, rd==x19, rs1_b3_val == 64, rs1_b2_val == -3
// opcode: sunpkd831 ; op1:x26; dest:x19; op1val:0x40fdfcf6;
TEST_RD_OP( sunpkd831, x19, x26, 0x00000000, 0x40fdfcf6, x5, 48, x16)

inst_13:
// rs1==x29, rd==x24, rs1_b3_val == 32, rs1_b0_val == -2
// opcode: sunpkd831 ; op1:x29; dest:x24; op1val:0x2010fefe;
TEST_RD_OP( sunpkd831, x24, x29, 0x00000000, 0x2010fefe, x5, 52, x16)

inst_14:
// rs1==x22, rd==x29, rs1_b3_val == 16, rs1_b1_val == 85, rs1_b2_val == -2
// opcode: sunpkd831 ; op1:x22; dest:x29; op1val:0x10fe5505;
TEST_RD_OP( sunpkd831, x29, x22, 0x00000000, 0x10fe5505, x5, 56, x16)

inst_15:
// rs1==x20, rd==x1, rs1_b3_val == 8, 
// opcode: sunpkd831 ; op1:x20; dest:x1; op1val:0x8003f03;
TEST_RD_OP( sunpkd831, x1, x20, 0x00000000, 0x8003f03, x5, 60, x16)

inst_16:
// rs1==x10, rd==x18, rs1_b3_val == 4, rs1_b0_val == -17, rs1_b2_val == 1
// opcode: sunpkd831 ; op1:x10; dest:x18; op1val:0x40155ef;
TEST_RD_OP( sunpkd831, x18, x10, 0x00000000, 0x40155ef, x5, 64, x16)

inst_17:
// rs1==x4, rd==x25, rs1_b3_val == 2, 
// opcode: sunpkd831 ; op1:x4; dest:x25; op1val:0x2fd03fa;
TEST_RD_OP( sunpkd831, x25, x4, 0x00000000, 0x2fd03fa, x5, 68, x16)

inst_18:
// rs1==x11, rd==x2, rs1_b3_val == 1, rs1_b0_val == 32, rs1_b1_val == -3
// opcode: sunpkd831 ; op1:x11; dest:x2; op1val:0x106fd20;
TEST_RD_OP( sunpkd831, x2, x11, 0x00000000, 0x106fd20, x5, 72, x16)

inst_19:
// rs1==x12, rd==x3, rs1_b3_val == 0, rs1_b2_val == 64, rs1_b0_val == 2, rs1_b1_val == -17
// opcode: sunpkd831 ; op1:x12; dest:x3; op1val:0x40ef02;
TEST_RD_OP( sunpkd831, x3, x12, 0x00000000, 0x40ef02, x5, 76, x16)

inst_20:
// rs1==x19, rd==x27, rs1_b3_val == -1, 
// opcode: sunpkd831 ; op1:x19; dest:x27; op1val:0xfff80505;
TEST_RD_OP( sunpkd831, x27, x19, 0x00000000, 0xfff80505, x5, 80, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:
// rs1==x21, rd==x7, rs1_b2_val == -86, rs1_b0_val == 127, rs1_b1_val == -9
// opcode: sunpkd831 ; op1:x21; dest:x7; op1val:0xbfaaf77f;
TEST_RD_OP( sunpkd831, x7, x21, 0x00000000, 0xbfaaf77f, x1, 0, x8)

inst_22:
// rs1==x28, rd==x5, rs1_b2_val == 85, 
// opcode: sunpkd831 ; op1:x28; dest:x5; op1val:0xff55ff20;
TEST_RD_OP( sunpkd831, x5, x28, 0x00000000, 0xff55ff20, x1, 4, x8)

inst_23:
// rs1==x5, rd==x9, rs1_b0_val == -65, rs1_b2_val == -1, rs1_b1_val == 127
// opcode: sunpkd831 ; op1:x5; dest:x9; op1val:0x3fff7fbf;
TEST_RD_OP( sunpkd831, x9, x5, 0x00000000, 0x3fff7fbf, x1, 8, x8)

inst_24:
// rs1==x25, rd==x23, rs1_b0_val == -33, 
// opcode: sunpkd831 ; op1:x25; dest:x23; op1val:0x509c0df;
TEST_RD_OP( sunpkd831, x23, x25, 0x00000000, 0x509c0df, x1, 12, x8)

inst_25:
// rs1==x16, rd==x4, rs1_b0_val == -9, 
// opcode: sunpkd831 ; op1:x16; dest:x4; op1val:0xfdc0eff7;
TEST_RD_OP( sunpkd831, x4, x16, 0x00000000, 0xfdc0eff7, x1, 16, x8)

inst_26:
// rs1==x2, rd==x22, rs1_b0_val == -5, 
// opcode: sunpkd831 ; op1:x2; dest:x22; op1val:0xfffc55fb;
TEST_RD_OP( sunpkd831, x22, x2, 0x00000000, 0xfffc55fb, x1, 20, x8)

inst_27:
// rs1==x17, rd==x26, rs1_b0_val == -3, 
// opcode: sunpkd831 ; op1:x17; dest:x26; op1val:0xbffef7fd;
TEST_RD_OP( sunpkd831, x26, x17, 0x00000000, 0xbffef7fd, x1, 24, x8)

inst_28:
// rs1==x3, rd==x16, rs1_b0_val == 64, 
// opcode: sunpkd831 ; op1:x3; dest:x16; op1val:0xdf100340;
TEST_RD_OP( sunpkd831, x16, x3, 0x00000000, 0xdf100340, x1, 28, x8)

inst_29:
// rs1==x27, rd==x0, rs1_b0_val == 8, 
// opcode: sunpkd831 ; op1:x27; dest:x0; op1val:0x3ffa2008;
TEST_RD_OP( sunpkd831, x0, x27, 0x00000000, 0x3ffa2008, x1, 32, x8)

inst_30:
// rs1==x14, rd==x21, rs1_b0_val == 4, 
// opcode: sunpkd831 ; op1:x14; dest:x21; op1val:0x3ffaf804;
TEST_RD_OP( sunpkd831, x21, x14, 0x00000000, 0x3ffaf804, x1, 36, x8)

inst_31:
// rs1==x6, rd==x31, rs1_b0_val == 1, 
// opcode: sunpkd831 ; op1:x6; dest:x31; op1val:0xffeff701;
TEST_RD_OP( sunpkd831, x31, x6, 0x00000000, 0xffeff701, x1, 40, x8)

inst_32:
// rs1_b0_val == 0, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x40f8fb00;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x40f8fb00, x1, 44, x8)

inst_33:
// rs1_b0_val == -1, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xff0007ff;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xff0007ff, x1, 48, x8)

inst_34:
// rs1_b2_val == 127, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xf77f09fa;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xf77f09fa, x1, 52, x8)

inst_35:
// rs1_b2_val == -65, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x80bffd08;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x80bffd08, x1, 56, x8)

inst_36:
// rs1_b2_val == 32, rs1_b1_val == 0
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x2200003;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x2200003, x1, 60, x8)

inst_37:
// rs1_b2_val == 8, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x108ff03;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x108ff03, x1, 64, x8)

inst_38:
// rs1_b1_val == -33, rs1_b2_val == -33
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x8dfdf04;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x8dfdf04, x1, 68, x8)

inst_39:
// rs1_b1_val == -128, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xc0f68005;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xc0f68005, x1, 72, x8)

inst_40:
// rs1_b1_val == 64, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xc0f840ff;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xc0f840ff, x1, 76, x8)

inst_41:
// rs1_b1_val == 16, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x5fb1001;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x5fb1001, x1, 80, x8)

inst_42:
// rs1_b1_val == 8, rs1_b0_val == -86
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xaa0708aa;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xaa0708aa, x1, 84, x8)

inst_43:
// rs1_b1_val == 4, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xfafa0406;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xfafa0406, x1, 88, x8)

inst_44:
// rs1_b1_val == 2, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xf9df0202;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xf9df0202, x1, 92, x8)

inst_45:
// rs1_b1_val == 1, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x7fe0140;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x7fe0140, x1, 96, x8)

inst_46:
// rs1_b2_val == -9, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x5f72000;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x5f72000, x1, 100, x8)

inst_47:
// rs1_b0_val == 85, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x97f3f55;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0x97f3f55, x1, 104, x8)

inst_48:
// rs1_b3_val == -65, rs1_b1_val == -2, rs1_b2_val == 4
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xbf04fe80;
TEST_RD_OP( sunpkd831, x31, x30, 0x00000000, 0xbf04fe80, x1, 108, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
