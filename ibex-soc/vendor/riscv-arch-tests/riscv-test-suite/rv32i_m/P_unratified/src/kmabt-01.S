
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabt instruction of the RISC-V RV32PZicsr extension for the kmabt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x15, rd==x5, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 4096, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 1024, rs2_h1_val == -2
// opcode: kmabt ; op1:x20; op2:x15; dest:x5; op1val:0x4008000;  op2val:0xfffe1000
TEST_PKRR_OP(kmabt, x5, x20, x15, 0x00000000, 0x4008000, 0xfffe1000, x20, x3, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x12, rs1_h1_val == rs2_h1_val, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 64, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kmabt ; op1:x13; op2:x13; dest:x12; op1val:0x400007;  op2val:0x40fff8
TEST_PKRR_OP(kmabt, x12, x13, x13, 0x00000000, 0x400007, 0x40fff8, x13, x3, 8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x28, rd==x23, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -1025, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 4096, rs1_h0_val == -33
// opcode: kmabt ; op1:x23; op2:x28; dest:x23; op1val:0xc000ffdf;  op2val:0x1000fbff
TEST_PKRR_OP(kmabt, x23, x23, x28, 0x00000000, 0xc000ffdf, 0x1000fbff, x23, x3, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs1_h0_val == -8193, rs2_h1_val == -3, rs2_h0_val == -2049
// opcode: kmabt ; op1:x2; op2:x2; dest:x2; op1val:0xbfffdfff;  op2val:0xfffdf7ff
TEST_PKRR_OP(kmabt, x2, x2, x2, 0x00000000, 0xbfffdfff, 0xfffdf7ff, x2, x3, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x26, rd==x26, rs1_h0_val == rs2_h0_val, rs1_h0_val == -2049
// opcode: kmabt ; op1:x0; op2:x26; dest:x26; op1val:0xbffff7ff;  op2val:0x07f7ff
TEST_PKRR_OP(kmabt, x26, x0, x26, 0x00000000, 0xbffff7ff, 0x07f7ff, x0, x3, 32, x8)

inst_5:
// rs1==x22, rs2==x24, rd==x11, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2, rs2_h1_val == -513, rs1_h1_val == -2
// opcode: kmabt ; op1:x22; op2:x24; dest:x11; op1val:0xfffe0002;  op2val:0xfdff0003
TEST_PKRR_OP(kmabt, x11, x22, x24, 0x00000000, 0xfffe0002, 0xfdff0003, x22, x3, 40, x8)

inst_6:
// rs1==x27, rs2==x19, rd==x29, rs2_h1_val == -21846, rs2_h0_val == -21846, rs1_h0_val == -3
// opcode: kmabt ; op1:x27; op2:x19; dest:x29; op1val:0xc000fffd;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kmabt, x29, x27, x19, 0x00000000, 0xc000fffd, 0xaaaaaaaa, x27, x3, 48, x8)

inst_7:
// rs1==x6, rs2==x31, rd==x10, rs2_h1_val == 21845, rs1_h0_val == 21845
// opcode: kmabt ; op1:x6; op2:x31; dest:x10; op1val:0xfffe5555;  op2val:0x5555aaaa
TEST_PKRR_OP(kmabt, x10, x6, x31, 0x00000000, 0xfffe5555, 0x5555aaaa, x6, x3, 56, x8)

inst_8:
// rs1==x21, rs2==x7, rd==x14, rs2_h1_val == 32767, rs1_h0_val == -2, rs1_h1_val == 8, rs2_h0_val == -16385
// opcode: kmabt ; op1:x21; op2:x7; dest:x14; op1val:0x08fffe;  op2val:0x7fffbfff
TEST_PKRR_OP(kmabt, x14, x21, x7, 0x00000000, 0x08fffe, 0x7fffbfff, x21, x3, 64, x8)

inst_9:
// rs1==x28, rs2==x4, rd==x13, rs2_h1_val == -16385, rs1_h0_val == -17
// opcode: kmabt ; op1:x28; op2:x4; dest:x13; op1val:0xfff9ffef;  op2val:0xbfff3fff
TEST_PKRR_OP(kmabt, x13, x28, x4, 0x00000000, 0xfff9ffef, 0xbfff3fff, x28, x3, 72, x8)

inst_10:
// rs1==x24, rs2==x10, rd==x1, rs2_h1_val == -8193, rs2_h0_val == 2, rs1_h0_val == -16385
// opcode: kmabt ; op1:x24; op2:x10; dest:x1; op1val:0x40bfff;  op2val:0xdfff0002
TEST_PKRR_OP(kmabt, x1, x24, x10, 0x00000000, 0x40bfff, 0xdfff0002, x24, x3, 80, x8)

inst_11:
// rs1==x25, rs2==x17, rd==x30, rs2_h1_val == -4097, rs1_h0_val == 1024
// opcode: kmabt ; op1:x25; op2:x17; dest:x30; op1val:0xfffa0400;  op2val:0xeffffffa
TEST_PKRR_OP(kmabt, x30, x25, x17, 0x00000000, 0xfffa0400, 0xeffffffa, x25, x3, 88, x8)

inst_12:
// rs1==x7, rs2==x11, rd==x8, rs2_h1_val == -2049, rs1_h1_val == -21846
// opcode: kmabt ; op1:x7; op2:x11; dest:x8; op1val:0xaaaa0009;  op2val:0xf7ffbfff
TEST_PKRR_OP(kmabt, x8, x7, x11, 0x00000000, 0xaaaa0009, 0xf7ffbfff, x7, x3, 96, x10)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_13:
// rs1==x18, rs2==x21, rd==x22, rs2_h1_val == -1025, rs2_h0_val == 32767, rs1_h1_val == 4
// opcode: kmabt ; op1:x18; op2:x21; dest:x22; op1val:0x045555;  op2val:0xfbff7fff
TEST_PKRR_OP(kmabt, x22, x18, x21, 0x00000000, 0x045555, 0xfbff7fff, x18, x2, 0, x10)

inst_14:
// rs1==x31, rs2==x3, rd==x21, rs2_h1_val == -257, rs1_h1_val == -1, rs2_h0_val == 64
// opcode: kmabt ; op1:x31; op2:x3; dest:x21; op1val:0xffff0003;  op2val:0xfeff0040
TEST_PKRR_OP(kmabt, x21, x31, x3, 0x00000000, 0xffff0003, 0xfeff0040, x31, x2, 8, x10)

inst_15:
// rs1==x14, rs2==x9, rd==x28, rs2_h1_val == -129, rs2_h0_val == 512, rs1_h1_val == 21845, rs1_h0_val == -9
// opcode: kmabt ; op1:x14; op2:x9; dest:x28; op1val:0x5555fff7;  op2val:0xff7f0200
TEST_PKRR_OP(kmabt, x28, x14, x9, 0x00000000, 0x5555fff7, 0xff7f0200, x14, x2, 16, x10)

inst_16:
// rs1==x30, rs2==x29, rd==x4, rs2_h1_val == -65, rs2_h0_val == 256, rs1_h0_val == 2048
// opcode: kmabt ; op1:x30; op2:x29; dest:x4; op1val:0xfffe0800;  op2val:0xffbf0100
TEST_PKRR_OP(kmabt, x4, x30, x29, 0x00000000, 0xfffe0800, 0xffbf0100, x30, x2, 24, x10)

inst_17:
// rs1==x8, rs2==x16, rd==x6, rs2_h1_val == -33, 
// opcode: kmabt ; op1:x8; op2:x16; dest:x6; op1val:0xfffedfff;  op2val:0xffdf0007
TEST_PKRR_OP(kmabt, x6, x8, x16, 0x00000000, 0xfffedfff, 0xffdf0007, x8, x2, 32, x10)

inst_18:
// rs1==x17, rs2==x23, rd==x27, rs2_h1_val == -17, rs1_h0_val == -65, rs2_h0_val == 8192, rs1_h1_val == -257
// opcode: kmabt ; op1:x17; op2:x23; dest:x27; op1val:0xfeffffbf;  op2val:0xffef2000
TEST_PKRR_OP(kmabt, x27, x17, x23, 0x00000000, 0xfeffffbf, 0xffef2000, x17, x2, 40, x10)

inst_19:
// rs1==x19, rs2==x1, rd==x3, rs2_h1_val == -9, rs1_h0_val == -5, rs2_h0_val == -9
// opcode: kmabt ; op1:x19; op2:x1; dest:x3; op1val:0xc000fffb;  op2val:0xfff7fff7
TEST_PKRR_OP(kmabt, x3, x19, x1, 0x00000000, 0xc000fffb, 0xfff7fff7, x19, x2, 48, x10)

inst_20:
// rs1==x12, rs2==x20, rd==x0, rs2_h1_val == -5, rs1_h0_val == -21846
// opcode: kmabt ; op1:x12; op2:x20; dest:x0; op1val:0xfff9aaaa;  op2val:0xfffbfbff
TEST_PKRR_OP(kmabt, x0, x12, x20, 0x00000000, 0xfff9aaaa, 0xfffbfbff, x12, x2, 56, x10)

inst_21:
// rs1==x9, rs2==x12, rd==x31, rs2_h1_val == -32768, rs1_h1_val == -33, rs1_h0_val == 32767, rs2_h0_val == -4097
// opcode: kmabt ; op1:x9; op2:x12; dest:x31; op1val:0xffdf7fff;  op2val:0x8000efff
TEST_PKRR_OP(kmabt, x31, x9, x12, 0x00000000, 0xffdf7fff, 0x8000efff, x9, x2, 64, x10)

inst_22:
// rs1==x5, rs2==x8, rd==x18, rs2_h1_val == 16384, rs1_h0_val == 16384
// opcode: kmabt ; op1:x5; op2:x8; dest:x18; op1val:0xfffa4000;  op2val:0x40000005
TEST_PKRR_OP(kmabt, x18, x5, x8, 0x00000000, 0xfffa4000, 0x40000005, x5, x2, 72, x10)

inst_23:
// rs1==x26, rs2==x14, rd==x7, rs2_h1_val == 8192, rs2_h0_val == -8193
// opcode: kmabt ; op1:x26; op2:x14; dest:x7; op1val:0x3fff0005;  op2val:0x2000dfff
TEST_PKRR_OP(kmabt, x7, x26, x14, 0x00000000, 0x3fff0005, 0x2000dfff, x26, x2, 80, x10)

inst_24:
// rs1==x1, rs2==x30, rd==x17, rs2_h1_val == 2048, rs2_h0_val == -17
// opcode: kmabt ; op1:x1; op2:x30; dest:x17; op1val:0x3fffaaaa;  op2val:0x800ffef
TEST_PKRR_OP(kmabt, x17, x1, x30, 0x00000000, 0x3fffaaaa, 0x800ffef, x1, x2, 88, x10)

inst_25:
// rs1==x15, rs2==x25, rd==x19, rs2_h1_val == 1024, rs2_h0_val == 1024, rs1_h0_val == 8192
// opcode: kmabt ; op1:x15; op2:x25; dest:x19; op1val:0x092000;  op2val:0x4000400
TEST_PKRR_OP(kmabt, x19, x15, x25, 0x00000000, 0x092000, 0x4000400, x15, x2, 96, x10)

inst_26:
// rs1==x29, rs2==x0, rd==x20, rs2_h1_val == 512, rs1_h1_val == -17
// opcode: kmabt ; op1:x29; op2:x0; dest:x20; op1val:0xffeffff7;  op2val:0x2003fff
TEST_PKRR_OP(kmabt, x20, x29, x0, 0x00000000, 0xffeffff7, 0x2003fff, x29, x2, 104, x7)

inst_27:
// rs1==x11, rs2==x5, rd==x15, rs2_h1_val == 256, rs2_h0_val == 4, rs1_h1_val == -513
// opcode: kmabt ; op1:x11; op2:x5; dest:x15; op1val:0xfdfffffe;  op2val:0x1000004
TEST_PKRR_OP(kmabt, x15, x11, x5, 0x00000000, 0xfdfffffe, 0x1000004, x11, x2, 112, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x3, rs2==x27, rd==x24, rs2_h1_val == 128, 
// opcode: kmabt ; op1:x3; op2:x27; dest:x24; op1val:0x088000;  op2val:0x80fffc
TEST_PKRR_OP(kmabt, x24, x3, x27, 0x00000000, 0x088000, 0x80fffc, x3, x1, 0, x7)

inst_29:
// rs1==x10, rs2==x18, rd==x16, rs2_h1_val == 32, rs1_h0_val == 8, rs2_h0_val == 2048
// opcode: kmabt ; op1:x10; op2:x18; dest:x16; op1val:0xffdf0008;  op2val:0x200800
TEST_PKRR_OP(kmabt, x16, x10, x18, 0x00000000, 0xffdf0008, 0x200800, x10, x1, 8, x7)

inst_30:
// rs1==x4, rs2==x6, rd==x9, rs2_h1_val == 16, rs1_h0_val == -513
// opcode: kmabt ; op1:x4; op2:x6; dest:x9; op1val:0x08fdff;  op2val:0x10efff
TEST_PKRR_OP(kmabt, x9, x4, x6, 0x00000000, 0x08fdff, 0x10efff, x4, x1, 16, x7)

inst_31:
// rs1==x16, rs2==x22, rd==x25, rs1_h0_val == -1025, 
// opcode: kmabt ; op1:x16; op2:x22; dest:x25; op1val:0x5555fbff;  op2val:0x4001000
TEST_PKRR_OP(kmabt, x25, x16, x22, 0x00000000, 0x5555fbff, 0x4001000, x16, x1, 24, x7)

inst_32:
// rs1_h0_val == -257, rs1_h1_val == 1
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x01feff;  op2val:0xfffcefff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x01feff, 0xfffcefff, x30, x1, 32, x7)

inst_33:
// rs1_h0_val == -129, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x3fffff7f;  op2val:0x2000dfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x3fffff7f, 0x2000dfff, x30, x1, 40, x7)

inst_34:
// rs1_h0_val == 4096, rs2_h0_val == 128, rs1_h1_val == -3
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000;  op2val:0xfffc0080
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffd1000, 0xfffc0080, x30, x1, 48, x7)

inst_35:
// rs1_h0_val == 512, rs1_h1_val == 0
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0xffdfffef
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x000200, 0xffdfffef, x30, x1, 56, x7)

inst_36:
// rs1_h0_val == 256, rs2_h1_val == -1, rs2_h0_val == 0
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x080100;  op2val:0xffff0000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x080100, 0xffff0000, x30, x1, 64, x7)

inst_37:
// rs1_h0_val == 128, rs1_h1_val == 128
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800080;  op2val:0xfbffaaaa
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x800080, 0xfbffaaaa, x30, x1, 72, x7)

inst_38:
// rs1_h0_val == 64, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x030040;  op2val:0x8007fff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x030040, 0x8007fff, x30, x1, 80, x7)

inst_39:
// rs1_h0_val == 32, rs2_h0_val == -2
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0020;  op2val:0x400fffe
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffc0020, 0x400fffe, x30, x1, 88, x7)

inst_40:
// rs1_h0_val == 16, rs2_h1_val == 1
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0010;  op2val:0x010200
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffd0010, 0x010200, x30, x1, 96, x7)

inst_41:
// rs1_h0_val == 4, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0004;  op2val:0x3fff0006
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffd0004, 0x3fff0006, x30, x1, 104, x7)

inst_42:
// rs1_h0_val == 1, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff90001;  op2val:0xfffffff7
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfff90001, 0xfffffff7, x30, x1, 112, x7)

inst_43:
// rs1_h0_val == 0, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0000;  op2val:0xfbff0040
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffa0000, 0xfbff0040, x30, x1, 120, x7)

inst_44:
// rs1_h0_val == -1, rs1_h1_val == -32768
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffff;  op2val:0xefff0007
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x8000ffff, 0xefff0007, x30, x1, 128, x7)

inst_45:
// rs2_h1_val == 8, rs1_h1_val == 512
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x200bfff;  op2val:0x080040
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x200bfff, 0x080040, x30, x1, 136, x7)

inst_46:
// rs2_h1_val == 4, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0001;  op2val:0x04fffe
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffc0001, 0x04fffe, x30, x1, 144, x7)

inst_47:
// rs2_h1_val == 2, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0004;  op2val:0x02fff8
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffe0004, 0x02fff8, x30, x1, 152, x7)

inst_48:
// rs2_h1_val == 0, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x2000006;  op2val:0x00fff8
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x2000006, 0x00fff8, x30, x1, 160, x7)

inst_49:
// rs2_h0_val == 21845, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x05f7ff;  op2val:0xff7f5555
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x05f7ff, 0xff7f5555, x30, x1, 168, x7)

inst_50:
// rs2_h0_val == -513, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9bfff;  op2val:0x03fdff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfff9bfff, 0x03fdff, x30, x1, 176, x7)

inst_51:
// rs2_h0_val == -5, rs1_h1_val == 8192
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x20000800;  op2val:0xffdffffb
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x20000800, 0xffdffffb, x30, x1, 184, x7)

inst_52:
// rs2_h0_val == -3, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c000;  op2val:0x05fffd
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfff9c000, 0x05fffd, x30, x1, 192, x7)

inst_53:
// rs2_h0_val == -32768, rs1_h1_val == -5
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004;  op2val:0xfffa8000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffb0004, 0xfffa8000, x30, x1, 200, x7)

inst_54:
// rs2_h0_val == 16384, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0080;  op2val:0xfffa4000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xaaaa0080, 0xfffa4000, x30, x1, 208, x7)

inst_55:
// rs2_h0_val == 32, rs1_h1_val == 16384
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7;  op2val:0xfff80020
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x4000fff7, 0xfff80020, x30, x1, 216, x7)

inst_56:
// rs2_h0_val == 16, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffff;  op2val:0xffef0010
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfffcffff, 0xffef0010, x30, x1, 224, x7)

inst_57:
// rs2_h0_val == 8, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x068000;  op2val:0xfffa0008
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x068000, 0xfffa0008, x30, x1, 232, x7)

inst_58:
// rs2_h0_val == 1, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0xc0000001
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x002000, 0xc0000001, x30, x1, 240, x7)

inst_59:
// rs2_h0_val == -1, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800004;  op2val:0xaaaaffff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x800004, 0xaaaaffff, x30, x1, 248, x7)

inst_60:
// rs1_h1_val == 32767, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff9;  op2val:0xfffbfff9
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x7ffffff9, 0xfffbfff9, x30, x1, 256, x7)

inst_61:
// rs1_h1_val == -8193, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0200;  op2val:0x080100
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xdfff0200, 0x080100, x30, x1, 264, x7)

inst_62:
// rs1_h1_val == -4097, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xefff0004;  op2val:0x03fbff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xefff0004, 0x03fbff, x30, x1, 272, x7)

inst_63:
// rs1_h1_val == -2049, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7;  op2val:0xff7f0080
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xf7fffff7, 0xff7f0080, x30, x1, 280, x7)

inst_64:
// rs1_h1_val == -65, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0005;  op2val:0x200dfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xffbf0005, 0x200dfff, x30, x1, 288, x7)

inst_65:
// rs1_h1_val == -9, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffbf;  op2val:0xfbff0003
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfff7ffbf, 0xfbff0003, x30, x1, 296, x7)

inst_66:
// rs1_h1_val == 4096, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x10001000;  op2val:0xffff0010
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x10001000, 0xffff0010, x30, x1, 304, x7)

inst_67:
// rs1_h1_val == 2048, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800fffd;  op2val:0x5555fff8
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x800fffd, 0x5555fff8, x30, x1, 312, x7)

inst_68:
// rs1_h1_val == 256, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x1000008;  op2val:0x200fffb
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x1000008, 0x200fffb, x30, x1, 320, x7)

inst_69:
// rs1_h1_val == -1025, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f;  op2val:0xffdffffa
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xfbffff7f, 0xffdffffa, x30, x1, 328, x7)

inst_70:
// rs1_h1_val == 32, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x204000;  op2val:0x074000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x204000, 0x074000, x30, x1, 336, x7)

inst_71:
// rs1_h1_val == 16, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x10fff6;  op2val:0xffdffff9
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x10fff6, 0xffdffff9, x30, x1, 344, x7)

inst_72:
// rs1_h1_val == 2, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x020007;  op2val:0x3ffffff6
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x020007, 0x3ffffff6, x30, x1, 352, x7)

inst_73:
// rs2_h0_val == -257, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x000020;  op2val:0xfff7feff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x000020, 0xfff7feff, x30, x1, 360, x7)

inst_74:
// rs2_h0_val == -129, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x070009;  op2val:0xfff6ff7f
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x070009, 0xfff6ff7f, x30, x1, 368, x7)

inst_75:
// rs2_h0_val == -65, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x207fff;  op2val:0xffbfffbf
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x207fff, 0xffbfffbf, x30, x1, 376, x7)

inst_76:
// rs2_h0_val == -33, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80000010;  op2val:0x3fffffdf
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x80000010, 0x3fffffdf, x30, x1, 384, x7)

inst_77:
// rs1_h0_val == -4097, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x02efff;  op2val:0xfff8dfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x02efff, 0xfff8dfff, x30, x1, 392, x7)

inst_78:
// rs1_h1_val == -129, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0002;  op2val:0xffff5555
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xff7f0002, 0xffff5555, x30, x1, 400, x7)

inst_79:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 64, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x400007;  op2val:0x40fff8
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0x400007, 0x40fff8, x30, x1, 408, x7)

inst_80:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs1_h0_val == -8193, rs2_h1_val == -3, rs2_h0_val == -2049
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfff;  op2val:0xfffdf7ff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xbfffdfff, 0xfffdf7ff, x30, x1, 416, x7)

inst_81:
// rs2_h1_val == 512, rs1_h1_val == -17
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff7;  op2val:0x2003fff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x00000000, 0xffeffff7, 0x2003fff, x30, x1, 424, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 108*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
