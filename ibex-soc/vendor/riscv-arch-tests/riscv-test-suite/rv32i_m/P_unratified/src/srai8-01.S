
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai8 instruction of the RISC-V RV32PZicsr extension for the srai8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rd, rs1==x19, rd==x25, rs1_b0_val == -128, imm_val == 7
// opcode: srai8 ; op1:x19; dest:x25; op1val:0xfcfa0980;  immval:0x7
TEST_IMM_OP( srai8, x25, x19, 0x00000000, 0xfcfa0980, 0x7, x7, 0, x2)

inst_1:
// rs1 == rd, rs1==x17, rd==x17, imm_val == 6, rs1_b1_val == -33
// opcode: srai8 ; op1:x17; dest:x17; op1val:0x307df06;  immval:0x6
TEST_IMM_OP( srai8, x17, x17, 0x00000000, 0x307df06, 0x6, x7, 4, x2)

inst_2:
// rs1==x12, rd==x30, imm_val == 5, rs1_b2_val == -1, rs1_b1_val == 2, rs1_b3_val == 85
// opcode: srai8 ; op1:x12; dest:x30; op1val:0x55ff02fa;  immval:0x5
TEST_IMM_OP( srai8, x30, x12, 0x00000000, 0x55ff02fa, 0x5, x7, 8, x2)

inst_3:
// rs1==x8, rd==x6, imm_val == 4, rs1_b3_val == -86, rs1_b1_val == 85, rs1_b0_val == 8, rs1_b2_val == -2
// opcode: srai8 ; op1:x8; dest:x6; op1val:0xaafe5508;  immval:0x4
TEST_IMM_OP( srai8, x6, x8, 0x00000000, 0xaafe5508, 0x4, x7, 12, x2)

inst_4:
// rs1==x27, rd==x5, imm_val == 3, rs1_b3_val == 32
// opcode: srai8 ; op1:x27; dest:x5; op1val:0x20f955c0;  immval:0x3
TEST_IMM_OP( srai8, x5, x27, 0x00000000, 0x20f955c0, 0x3, x7, 16, x2)

inst_5:
// rs1==x21, rd==x0, imm_val == 2, rs1_b1_val == 64, rs1_b2_val == -3
// opcode: srai8 ; op1:x21; dest:x0; op1val:0xf8fd4006;  immval:0x2
TEST_IMM_OP( srai8, x0, x21, 0x00000000, 0xf8fd4006, 0x2, x7, 20, x2)

inst_6:
// rs1==x16, rd==x18, imm_val == 1, rs1_b3_val == 4, rs1_b2_val == -33, rs1_b1_val == 4, rs1_b0_val == 0
// opcode: srai8 ; op1:x16; dest:x18; op1val:0x4df0400;  immval:0x1
TEST_IMM_OP( srai8, x18, x16, 0x00000000, 0x4df0400, 0x1, x7, 24, x2)

inst_7:
// rs1==x20, rd==x21, imm_val == 0, rs1_b3_val == 2, rs1_b2_val == 0
// opcode: srai8 ; op1:x20; dest:x21; op1val:0x200c0f8;  immval:0x0
TEST_IMM_OP( srai8, x21, x20, 0x00000000, 0x200c0f8, 0x0, x7, 28, x2)

inst_8:
// rs1==x10, rd==x24, rs1_b3_val == 127, 
// opcode: srai8 ; op1:x10; dest:x24; op1val:0x7ff6fc08;  immval:0x6
TEST_IMM_OP( srai8, x24, x10, 0x00000000, 0x7ff6fc08, 0x6, x7, 32, x2)

inst_9:
// rs1==x22, rd==x12, rs1_b3_val == -65, rs1_b1_val == 0, rs1_b0_val == 85
// opcode: srai8 ; op1:x22; dest:x12; op1val:0xbf050055;  immval:0x7
TEST_IMM_OP( srai8, x12, x22, 0x00000000, 0xbf050055, 0x7, x7, 36, x2)

inst_10:
// rs1==x15, rd==x27, rs1_b3_val == -33, rs1_b1_val == -5
// opcode: srai8 ; op1:x15; dest:x27; op1val:0xdffafb3f;  immval:0x7
TEST_IMM_OP( srai8, x27, x15, 0x00000000, 0xdffafb3f, 0x7, x7, 40, x2)

inst_11:
// rs1==x3, rd==x16, rs1_b3_val == -17, rs1_b0_val == 32
// opcode: srai8 ; op1:x3; dest:x16; op1val:0xeffd0620;  immval:0x0
TEST_IMM_OP( srai8, x16, x3, 0x00000000, 0xeffd0620, 0x0, x7, 44, x2)

inst_12:
// rs1==x24, rd==x26, rs1_b3_val == -9, rs1_b0_val == -17, rs1_b1_val == 127
// opcode: srai8 ; op1:x24; dest:x26; op1val:0xf7f87fef;  immval:0x5
TEST_IMM_OP( srai8, x26, x24, 0x00000000, 0xf7f87fef, 0x5, x7, 48, x2)

inst_13:
// rs1==x18, rd==x15, rs1_b3_val == -5, rs1_b2_val == -65
// opcode: srai8 ; op1:x18; dest:x15; op1val:0xfbbf00fc;  immval:0x1
TEST_IMM_OP( srai8, x15, x18, 0x00000000, 0xfbbf00fc, 0x1, x7, 52, x2)

inst_14:
// rs1==x31, rd==x19, rs1_b3_val == -3, rs1_b0_val == -1
// opcode: srai8 ; op1:x31; dest:x19; op1val:0xfd0505ff;  immval:0x5
TEST_IMM_OP( srai8, x19, x31, 0x00000000, 0xfd0505ff, 0x5, x7, 56, x2)

inst_15:
// rs1==x1, rd==x29, rs1_b3_val == -2, rs1_b0_val == 2
// opcode: srai8 ; op1:x1; dest:x29; op1val:0xfec0fa02;  immval:0x3
TEST_IMM_OP( srai8, x29, x1, 0x00000000, 0xfec0fa02, 0x3, x7, 60, x2)

inst_16:
// rs1==x26, rd==x23, rs1_b3_val == -128, rs1_b1_val == -1
// opcode: srai8 ; op1:x26; dest:x23; op1val:0x8009ff3f;  immval:0x6
TEST_IMM_OP( srai8, x23, x26, 0x00000000, 0x8009ff3f, 0x6, x7, 64, x2)

inst_17:
// rs1==x6, rd==x3, rs1_b3_val == 64, 
// opcode: srai8 ; op1:x6; dest:x3; op1val:0x4009f8fc;  immval:0x6
TEST_IMM_OP( srai8, x3, x6, 0x00000000, 0x4009f8fc, 0x6, x7, 68, x2)

inst_18:
// rs1==x0, rd==x1, rs1_b3_val == 16, 
// opcode: srai8 ; op1:x0; dest:x1; op1val:0x10fdfcfa;  immval:0x3
TEST_IMM_OP( srai8, x1, x0, 0x00000000, 0x10fdfcfa, 0x3, x7, 72, x2)

inst_19:
// rs1==x23, rd==x31, rs1_b3_val == 8, 
// opcode: srai8 ; op1:x23; dest:x31; op1val:0x809f8ff;  immval:0x6
TEST_IMM_OP( srai8, x31, x23, 0x00000000, 0x809f8ff, 0x6, x7, 76, x2)

inst_20:
// rs1==x4, rd==x11, rs1_b3_val == 1, 
// opcode: srai8 ; op1:x4; dest:x11; op1val:0x1fd3f80;  immval:0x6
TEST_IMM_OP( srai8, x11, x4, 0x00000000, 0x1fd3f80, 0x6, x7, 80, x2)

inst_21:
// rs1==x13, rd==x28, rs1_b3_val == 0, 
// opcode: srai8 ; op1:x13; dest:x28; op1val:0xdf7f55;  immval:0x2
TEST_IMM_OP( srai8, x28, x13, 0x00000000, 0xdf7f55, 0x2, x7, 84, x2)

inst_22:
// rs1==x30, rd==x13, rs1_b3_val == -1, rs1_b2_val == 16, rs1_b1_val == 16
// opcode: srai8 ; op1:x30; dest:x13; op1val:0xff101055;  immval:0x1
TEST_IMM_OP( srai8, x13, x30, 0x00000000, 0xff101055, 0x1, x7, 88, x3)

inst_23:
// rs1==x2, rd==x20, rs1_b2_val == -86, rs1_b1_val == 8
// opcode: srai8 ; op1:x2; dest:x20; op1val:0xf8aa08f8;  immval:0x7
TEST_IMM_OP( srai8, x20, x2, 0x00000000, 0xf8aa08f8, 0x7, x7, 92, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_24:
// rs1==x9, rd==x7, rs1_b2_val == 85, rs1_b0_val == -9
// opcode: srai8 ; op1:x9; dest:x7; op1val:0x3f5509f7;  immval:0x4
TEST_IMM_OP( srai8, x7, x9, 0x00000000, 0x3f5509f7, 0x4, x1, 0, x3)

inst_25:
// rs1==x29, rd==x10, rs1_b2_val == 127, rs1_b1_val == 32
// opcode: srai8 ; op1:x29; dest:x10; op1val:0x97f20f8;  immval:0x4
TEST_IMM_OP( srai8, x10, x29, 0x00000000, 0x97f20f8, 0x4, x1, 4, x3)

inst_26:
// rs1==x11, rd==x14, rs1_b1_val == 1, rs1_b0_val == -2
// opcode: srai8 ; op1:x11; dest:x14; op1val:0x80df01fe;  immval:0x7
TEST_IMM_OP( srai8, x14, x11, 0x00000000, 0x80df01fe, 0x7, x1, 8, x3)

inst_27:
// rs1==x7, rd==x2, rs1_b0_val == -86, 
// opcode: srai8 ; op1:x7; dest:x2; op1val:0xf9bf3faa;  immval:0x7
TEST_IMM_OP( srai8, x2, x7, 0x00000000, 0xf9bf3faa, 0x7, x1, 12, x3)

inst_28:
// rs1==x25, rd==x4, rs1_b0_val == 127, 
// opcode: srai8 ; op1:x25; dest:x4; op1val:0xf955037f;  immval:0x1
TEST_IMM_OP( srai8, x4, x25, 0x00000000, 0xf955037f, 0x1, x1, 16, x3)

inst_29:
// rs1==x28, rd==x22, rs1_b0_val == -65, 
// opcode: srai8 ; op1:x28; dest:x22; op1val:0xbffe3fbf;  immval:0x6
TEST_IMM_OP( srai8, x22, x28, 0x00000000, 0xbffe3fbf, 0x6, x1, 20, x3)

inst_30:
// rs1==x14, rd==x8, rs1_b0_val == -33, 
// opcode: srai8 ; op1:x14; dest:x8; op1val:0xfe1009df;  immval:0x4
TEST_IMM_OP( srai8, x8, x14, 0x00000000, 0xfe1009df, 0x4, x1, 24, x3)

inst_31:
// rs1==x5, rd==x9, rs1_b0_val == -5, 
// opcode: srai8 ; op1:x5; dest:x9; op1val:0x910f6fb;  immval:0x0
TEST_IMM_OP( srai8, x9, x5, 0x00000000, 0x910f6fb, 0x0, x1, 28, x3)

inst_32:
// rs1_b0_val == -3, rs1_b2_val == -5
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xeffbfcfd;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xeffbfcfd, 0x7, x1, 32, x3)

inst_33:
// rs1_b0_val == 64, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x2c04040;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x2c04040, 0x3, x1, 36, x3)

inst_34:
// rs1_b0_val == 16, rs1_b2_val == -9
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xbff7f910;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xbff7f910, 0x7, x1, 40, x3)

inst_35:
// rs1_b0_val == 4, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfcc02004;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xfcc02004, 0x6, x1, 44, x3)

inst_36:
// rs1_b0_val == 1, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xf7dfff01;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xf7dfff01, 0x0, x1, 48, x3)

inst_37:
// rs1_b2_val == -17, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xefef09f6;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xefef09f6, 0x0, x1, 52, x3)

inst_38:
// rs1_b2_val == -128, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x280fa09;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x280fa09, 0x7, x1, 56, x3)

inst_39:
// rs1_b2_val == 64, rs1_b1_val == -86
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xf940aabf;  immval:0x4
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xf940aabf, 0x4, x1, 60, x3)

inst_40:
// rs1_b2_val == 32, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xf62008fd;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0xf62008fd, 0x3, x1, 64, x3)

inst_41:
// rs1_b2_val == 8, rs1_b1_val == -128
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x808803f;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x808803f, 0x7, x1, 68, x3)

inst_42:
// rs1_b2_val == 4, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x90405f9;  immval:0x1
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x90405f9, 0x1, x1, 72, x3)

inst_43:
// rs1_b1_val == -65, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x5510bfbf;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x5510bfbf, 0x2, x1, 76, x3)

inst_44:
// rs1_b1_val == -17, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x309ef06;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x309ef06, 0x6, x1, 80, x3)

inst_45:
// rs1_b1_val == -9, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x5510f703;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x5510f703, 0x2, x1, 84, x3)

inst_46:
// rs1_b1_val == -3, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x55fafddf;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x55fafddf, 0x0, x1, 88, x3)

inst_47:
// rs1_b1_val == -2, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x7ffbfe07;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x7ffbfe07, 0x7, x1, 92, x3)

inst_48:
// rs1_b2_val == 2, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x6020209;  immval:0x1
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x6020209, 0x1, x1, 96, x3)

inst_49:
// rs1_b2_val == 1, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x3f01fbf6;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x3f01fbf6, 0x7, x1, 100, x3)

inst_50:
// rs1_b3_val == 16, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x10fdfcfa;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x00000000, 0x10fdfcfa, 0x3, x1, 104, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 27*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
