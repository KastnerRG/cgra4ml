
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kadd8 instruction of the RISC-V RV32PZicsr extension for the kadd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kadd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x22, rd==x19, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 8, rs2_b3_val == 16, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val == -65, rs1_b1_val != rs2_b1_val, rs1_b2_val == 8, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == 32
// opcode: kadd8 ; op1:x7; op2:x22; dest:x19; op1val:0xbf082080;  op2val:0x10f8c008
TEST_PKRR_OP(kadd8, x19, x7, x22, 0x00000000, 0xbf082080, 0x10f8c008, x7, x8, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x0, rs1_b3_val == rs2_b3_val, rs1_b1_val == 2, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val == 64, rs2_b2_val == -17, rs2_b1_val == 0, rs1_b0_val == -1
// opcode: kadd8 ; op1:x18; op2:x18; dest:x0; op1val:0xf64002ff;  op2val:0xf6ef0009
TEST_PKRR_OP(kadd8, x0, x18, x18, 0x00000000, 0xf64002ff, 0xf6ef0009, x18, x8, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x21, rd==x30, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == -17, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b0_val == -86, rs1_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b1_val == -2, rs2_b3_val == -9
// opcode: kadd8 ; op1:x30; op2:x21; dest:x30; op1val:0x5effe01;  op2val:0xf706fcaa
TEST_PKRR_OP(kadd8, x30, x30, x21, 0x00000000, 0x5effe01, 0xf706fcaa, x30, x8, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -65, rs2_b3_val == 4, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs2_b1_val == 64, rs1_b0_val == 16, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == -2
// opcode: kadd8 ; op1:x11; op2:x11; dest:x11; op1val:0x55bf0710;  op2val:0x4f940fe
TEST_PKRR_OP(kadd8, x11, x11, x11, 0x00000000, 0x55bf0710, 0x4f940fe, x11, x8, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x27, rd==x27, rs1_b2_val == rs2_b2_val, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == -86, rs2_b2_val == -3, rs1_b2_val == -3
// opcode: kadd8 ; op1:x6; op2:x27; dest:x27; op1val:0x9fd023f;  op2val:0xf9fdaa07
TEST_PKRR_OP(kadd8, x27, x6, x27, 0x00000000, 0x9fd023f, 0xf9fdaa07, x6, x8, 32, x13)

inst_5:
// rs1==x2, rs2==x3, rd==x15, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b1_val == 85, rs1_b2_val == 2, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b3_val == -5, rs1_b0_val == 8, rs2_b2_val == 64, rs2_b3_val == 127, rs1_b1_val == -5
// opcode: kadd8 ; op1:x2; op2:x3; dest:x15; op1val:0xfb02fb08;  op2val:0x7f4055fc
TEST_PKRR_OP(kadd8, x15, x2, x3, 0x00000000, 0xfb02fb08, 0x7f4055fc, x2, x8, 40, x13)

inst_6:
// rs1==x5, rs2==x19, rd==x4, rs1_b1_val == rs2_b1_val, rs1_b1_val == 0, rs2_b3_val == -128, rs2_b0_val == 2, rs1_b0_val == -86, rs1_b2_val == 1, rs2_b2_val == 32
// opcode: kadd8 ; op1:x5; op2:x19; dest:x4; op1val:0xf60100aa;  op2val:0x80200002
TEST_PKRR_OP(kadd8, x4, x5, x19, 0x00000000, 0xf60100aa, 0x80200002, x5, x8, 48, x13)

inst_7:
// rs1==x3, rs2==x26, rd==x20, rs1_b0_val == rs2_b0_val, rs1_b1_val == 4, rs1_b3_val == 127, rs1_b0_val == -5, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b0_val == -5, rs2_b2_val == 0
// opcode: kadd8 ; op1:x3; op2:x26; dest:x20; op1val:0x7ffd04fb;  op2val:0x400fafb
TEST_PKRR_OP(kadd8, x20, x3, x26, 0x00000000, 0x7ffd04fb, 0x400fafb, x3, x8, 56, x13)

inst_8:
// rs1==x15, rs2==x29, rd==x7, rs2_b3_val == -86, rs1_b1_val == -1, rs1_b0_val == 85, rs1_b3_val == -33, rs2_b2_val == 4, rs1_b2_val == -86
// opcode: kadd8 ; op1:x15; op2:x29; dest:x7; op1val:0xdfaaff55;  op2val:0xaa04f9fc
TEST_PKRR_OP(kadd8, x7, x15, x29, 0x00000000, 0xdfaaff55, 0xaa04f9fc, x15, x8, 64, x13)

inst_9:
// rs1==x20, rs2==x2, rd==x3, rs2_b3_val == 85, rs2_b0_val == 16, rs1_b0_val == -2
// opcode: kadd8 ; op1:x20; op2:x2; dest:x3; op1val:0x90800fe;  op2val:0x55f80510
TEST_PKRR_OP(kadd8, x3, x20, x2, 0x00000000, 0x90800fe, 0x55f80510, x20, x8, 72, x13)

inst_10:
// rs1==x22, rs2==x28, rd==x24, rs2_b3_val == -65, rs2_b2_val == -65, rs2_b0_val == 127
// opcode: kadd8 ; op1:x22; op2:x28; dest:x24; op1val:0xc0c0f880;  op2val:0xbfbff87f
TEST_PKRR_OP(kadd8, x24, x22, x28, 0x00000000, 0xc0c0f880, 0xbfbff87f, x22, x8, 80, x13)

inst_11:
// rs1==x25, rs2==x9, rd==x26, rs2_b3_val == -33, rs1_b0_val == 4, rs2_b2_val == -128
// opcode: kadd8 ; op1:x25; op2:x9; dest:x26; op1val:0xfafd0504;  op2val:0xdf8006aa
TEST_PKRR_OP(kadd8, x26, x25, x9, 0x00000000, 0xfafd0504, 0xdf8006aa, x25, x8, 88, x13)

inst_12:
// rs1==x27, rs2==x10, rd==x14, rs2_b3_val == -17, rs1_b1_val == 64, rs1_b2_val == 127, rs2_b2_val == 127
// opcode: kadd8 ; op1:x27; op2:x10; dest:x14; op1val:0xdf7f4055;  op2val:0xef7f4008
TEST_PKRR_OP(kadd8, x14, x27, x10, 0x00000000, 0xdf7f4055, 0xef7f4008, x27, x8, 96, x13)

inst_13:
// rs1==x0, rs2==x1, rd==x16, rs2_b3_val == -5, rs1_b1_val == -33, rs2_b1_val == 16
// opcode: kadd8 ; op1:x0; op2:x1; dest:x16; op1val:0xf93fdf80;  op2val:0xfb3f1006
TEST_PKRR_OP(kadd8, x16, x0, x1, 0x00000000, 0xf93fdf80, 0xfb3f1006, x0, x8, 104, x13)

inst_14:
// rs1==x12, rs2==x16, rd==x5, rs2_b3_val == -3, rs2_b0_val == 0
// opcode: kadd8 ; op1:x12; op2:x16; dest:x5; op1val:0xfa0620fc;  op2val:0xfdc00300
TEST_PKRR_OP(kadd8, x5, x12, x16, 0x00000000, 0xfa0620fc, 0xfdc00300, x12, x8, 112, x13)

inst_15:
// rs1==x1, rs2==x7, rd==x25, rs2_b3_val == -2, rs1_b3_val == -2, rs1_b1_val == -17, rs2_b1_val == -9
// opcode: kadd8 ; op1:x1; op2:x7; dest:x25; op1val:0xfe40ef04;  op2val:0xfec0f7f9
TEST_PKRR_OP(kadd8, x25, x1, x7, 0x00000000, 0xfe40ef04, 0xfec0f7f9, x1, x8, 120, x11)

inst_16:
// rs1==x19, rs2==x4, rd==x10, rs2_b3_val == 64, rs1_b3_val == 4, rs2_b1_val == -65, rs1_b0_val == 32
// opcode: kadd8 ; op1:x19; op2:x4; dest:x10; op1val:0x4fd0320;  op2val:0x40fdbf00
TEST_PKRR_OP(kadd8, x10, x19, x4, 0x00000000, 0x4fd0320, 0x40fdbf00, x19, x8, 128, x11)

inst_17:
// rs1==x23, rs2==x12, rd==x21, rs2_b3_val == 32, rs2_b0_val == 4, rs1_b3_val == -86, rs1_b0_val == 2, rs1_b1_val == -65, rs2_b2_val == -2
// opcode: kadd8 ; op1:x23; op2:x12; dest:x21; op1val:0xaa02bf02;  op2val:0x20fe0904
TEST_PKRR_OP(kadd8, x21, x23, x12, 0x00000000, 0xaa02bf02, 0x20fe0904, x23, x8, 136, x11)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:
// rs1==x21, rs2==x25, rd==x1, rs2_b3_val == 8, rs1_b1_val == -128
// opcode: kadd8 ; op1:x21; op2:x25; dest:x1; op1val:0x7f0880fa;  op2val:0x8c0f909
TEST_PKRR_OP(kadd8, x1, x21, x25, 0x00000000, 0x7f0880fa, 0x8c0f909, x21, x3, 0, x11)

inst_19:
// rs1==x14, rs2==x17, rd==x2, rs2_b3_val == 2, rs1_b2_val == 4
// opcode: kadd8 ; op1:x14; op2:x17; dest:x2; op1val:0x3042008;  op2val:0x2faaafa
TEST_PKRR_OP(kadd8, x2, x14, x17, 0x00000000, 0x3042008, 0x2faaafa, x14, x3, 8, x11)

inst_20:
// rs1==x8, rs2==x23, rd==x13, rs2_b3_val == 1, rs2_b1_val == -3, rs1_b2_val == 16, rs2_b2_val == 8
// opcode: kadd8 ; op1:x8; op2:x23; dest:x13; op1val:0xf6100303;  op2val:0x108fd3f
TEST_PKRR_OP(kadd8, x13, x8, x23, 0x00000000, 0xf6100303, 0x108fd3f, x8, x3, 16, x11)

inst_21:
// rs1==x24, rs2==x31, rd==x18, rs2_b3_val == 0, rs2_b1_val == 4, rs1_b1_val == -3, rs1_b3_val == 0
// opcode: kadd8 ; op1:x24; op2:x31; dest:x18; op1val:0x01fd09;  op2val:0x3f0406
TEST_PKRR_OP(kadd8, x18, x24, x31, 0x00000000, 0x01fd09, 0x3f0406, x24, x3, 24, x11)

inst_22:
// rs1==x13, rs2==x30, rd==x23, rs2_b3_val == -1, rs2_b0_val == 64, rs1_b3_val == 1, rs1_b1_val == 16, rs2_b2_val == 1
// opcode: kadd8 ; op1:x13; op2:x30; dest:x23; op1val:0x140103f;  op2val:0xff010040
TEST_PKRR_OP(kadd8, x23, x13, x30, 0x00000000, 0x140103f, 0xff010040, x13, x3, 32, x11)

inst_23:
// rs1==x17, rs2==x0, rd==x6, rs2_b2_val == -86, rs1_b2_val == -5, rs1_b0_val == -17, rs2_b1_val == -1, rs2_b0_val == 85
// opcode: kadd8 ; op1:x17; op2:x0; dest:x6; op1val:0x55fbf9ef;  op2val:0xc0aaff55
TEST_PKRR_OP(kadd8, x6, x17, x0, 0x00000000, 0x55fbf9ef, 0xc0aaff55, x17, x3, 40, x11)

inst_24:
// rs1==x16, rs2==x8, rd==x29, rs1_b2_val == -33, rs2_b1_val == -33, rs2_b0_val == 1
// opcode: kadd8 ; op1:x16; op2:x8; dest:x29; op1val:0x4dff808;  op2val:0xaaf9df01
TEST_PKRR_OP(kadd8, x29, x16, x8, 0x00000000, 0x4dff808, 0xaaf9df01, x16, x3, 48, x11)

inst_25:
// rs1==x28, rs2==x6, rd==x17, rs1_b2_val == -9, rs2_b1_val == -5, rs1_b1_val == 85, rs1_b3_val == -17
// opcode: kadd8 ; op1:x28; op2:x6; dest:x17; op1val:0xeff755fb;  op2val:0xef20fb05
TEST_PKRR_OP(kadd8, x17, x28, x6, 0x00000000, 0xeff755fb, 0xef20fb05, x28, x3, 56, x11)

inst_26:
// rs1==x10, rs2==x5, rd==x22, rs1_b2_val == -2, rs1_b0_val == 0
// opcode: kadd8 ; op1:x10; op2:x5; dest:x22; op1val:0xc0fef800;  op2val:0x10fe067f
TEST_PKRR_OP(kadd8, x22, x10, x5, 0x00000000, 0xc0fef800, 0x10fe067f, x10, x3, 64, x11)

inst_27:
// rs1==x29, rs2==x20, rd==x9, rs1_b2_val == -128, rs2_b2_val == 2
// opcode: kadd8 ; op1:x29; op2:x20; dest:x9; op1val:0xdf80effb;  op2val:0x7f020940
TEST_PKRR_OP(kadd8, x9, x29, x20, 0x00000000, 0xdf80effb, 0x7f020940, x29, x3, 72, x11)

inst_28:
// rs1==x31, rs2==x13, rd==x12, rs1_b2_val == 32, rs2_b0_val == -33, rs2_b1_val == 8
// opcode: kadd8 ; op1:x31; op2:x13; dest:x12; op1val:0xf92055f9;  op2val:0x107f08df
TEST_PKRR_OP(kadd8, x12, x31, x13, 0x00000000, 0xf92055f9, 0x107f08df, x31, x3, 80, x1)

inst_29:
// rs1==x26, rs2==x15, rd==x31, rs1_b2_val == 0, rs1_b0_val == -65, rs2_b0_val == 32, rs2_b1_val == 1, rs1_b3_val == 8
// opcode: kadd8 ; op1:x26; op2:x15; dest:x31; op1val:0x80004bf;  op2val:0xfe3f0120
TEST_PKRR_OP(kadd8, x31, x26, x15, 0x00000000, 0x80004bf, 0xfe3f0120, x26, x3, 88, x1)

inst_30:
// rs1==x9, rs2==x14, rd==x28, rs1_b2_val == -1, 
// opcode: kadd8 ; op1:x9; op2:x14; dest:x28; op1val:0xfbfff83f;  op2val:0xf7fd10c0
TEST_PKRR_OP(kadd8, x28, x9, x14, 0x00000000, 0xfbfff83f, 0xf7fd10c0, x9, x3, 96, x1)

inst_31:
// rs1==x4, rs2==x24, rd==x8, rs1_b1_val == -86, 
// opcode: kadd8 ; op1:x4; op2:x24; dest:x8; op1val:0xf6f8aa04;  op2val:0xf803fb06
TEST_PKRR_OP(kadd8, x8, x4, x24, 0x00000000, 0xf6f8aa04, 0xf803fb06, x4, x3, 104, x1)

inst_32:
// rs1_b1_val == 127, rs2_b1_val == 32
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fd7f06;  op2val:0x3ff92040
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x55fd7f06, 0x3ff92040, x30, x3, 112, x1)

inst_33:
// rs1_b1_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x906f7f9;  op2val:0xfd405502
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x906f7f9, 0xfd405502, x30, x3, 120, x1)

inst_34:
// rs1_b1_val == 8, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f7f08fa;  op2val:0x3060402
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x3f7f08fa, 0x3060402, x30, x3, 128, x1)

inst_35:
// rs1_b1_val == 1, rs1_b3_val == 64
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f901ef;  op2val:0xfd05aa00
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x40f901ef, 0xfd05aa00, x30, x3, 136, x1)

inst_36:
// rs2_b2_val == -1, rs2_b0_val == -17, rs1_b3_val == -1
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff03f804;  op2val:0xfdff55ef
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xff03f804, 0xfdff55ef, x30, x3, 144, x1)

inst_37:
// rs2_b1_val == 127, rs2_b0_val == -128
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0680ef;  op2val:0x7bf7f80
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfe0680ef, 0x7bf7f80, x30, x3, 152, x1)

inst_38:
// rs2_b1_val == -17, rs2_b0_val == -9
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ff709fe;  op2val:0x607eff7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x3ff709fe, 0x607eff7, x30, x3, 160, x1)

inst_39:
// rs2_b1_val == -2, rs2_b2_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe071001;  op2val:0x3f55fe04
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfe071001, 0x3f55fe04, x30, x3, 168, x1)

inst_40:
// rs2_b1_val == -128, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5aaf8f9;  op2val:0x4058006
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x5aaf8f9, 0x4058006, x30, x3, 176, x1)

inst_41:
// rs2_b1_val == 2, rs2_b0_val == -1, rs1_b3_val == 32, rs1_b0_val == 64
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f7f640;  op2val:0x7f3f02ff
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x20f7f640, 0x7f3f02ff, x30, x3, 184, x1)

inst_42:
// rs2_b0_val == -65, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe10df03;  op2val:0xbfef10bf
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfe10df03, 0xbfef10bf, x30, x3, 192, x1)

inst_43:
// rs1_b0_val == 127, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfcf67f;  op2val:0xbff9ef08
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfcfcf67f, 0xbff9ef08, x30, x3, 200, x1)

inst_44:
// rs1_b0_val == -33, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x50503df;  op2val:0x04aa00
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x50503df, 0x04aa00, x30, x3, 208, x1)

inst_45:
// rs1_b0_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9f9f9f7;  op2val:0xfd55fd00
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xf9f9f9f7, 0xfd55fd00, x30, x3, 216, x1)

inst_46:
// rs1_b0_val == -3, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaef08fd;  op2val:0x3efefc0
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfaef08fd, 0x3efefc0, x30, x3, 224, x1)

inst_47:
// rs1_b3_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7aafb80;  op2val:0xfe7ff73f
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xf7aafb80, 0xfe7ff73f, x30, x3, 232, x1)

inst_48:
// rs2_b2_val == -33, rs1_b3_val == -128
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80c04020;  op2val:0xf8dfef00
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x80c04020, 0xf8dfef00, x30, x3, 240, x1)

inst_49:
// rs1_b3_val == -3, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfc55ff;  op2val:0xfb012010
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0xfdfc55ff, 0xfb012010, x30, x3, 248, x1)

inst_50:
// rs2_b2_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5f90609;  op2val:0xfaf7027f
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x5f90609, 0xfaf7027f, x30, x3, 256, x1)

inst_51:
// rs2_b2_val == -5, rs1_b2_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x455df03;  op2val:0x5fb5507
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x455df03, 0x5fb5507, x30, x3, 264, x1)

inst_52:
// rs1_b3_val == 2, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2efaa03;  op2val:0xc080053f
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x2efaa03, 0xc080053f, x30, x3, 272, x1)

inst_53:
// rs2_b2_val == 16, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4010fc3f;  op2val:0xbf10fd40
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x4010fc3f, 0xbf10fd40, x30, x3, 280, x1)

inst_54:
// rs2_b0_val == -3, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbef07;  op2val:0x067ffd
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x20fbef07, 0x067ffd, x30, x3, 288, x1)

inst_55:
// rs1_b3_val == 16, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x10403ffe;  op2val:0x309fbaa
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x10403ffe, 0x309fbaa, x30, x3, 296, x1)

inst_56:
// rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -65, rs2_b3_val == 4, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs2_b1_val == 64, rs1_b0_val == 16, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == -2
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55bf0710;  op2val:0x4f940fe
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x55bf0710, 0x4f940fe, x30, x3, 304, x1)

inst_57:
// rs2_b2_val == -86, rs1_b2_val == -5, rs1_b0_val == -17, rs2_b1_val == -1, rs2_b0_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fbf9ef;  op2val:0xc0aaff55
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x00000000, 0x55fbf9ef, 0xc0aaff55, x30, x3, 312, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 80*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
