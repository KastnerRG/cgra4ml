
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra8 instruction of the RISC-V RV32PZicsr extension for the sra8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x11, rd==x2, rs2_val == 5, rs1_b3_val == -128, rs1_b2_val == -86, rs1_b0_val == -17
// opcode: sra8 ; op1:x14; op2:x11; dest:x2; op1val:0x80aac0ef;  op2val:0x5
TEST_RR_OP(sra8, x2, x14, x11, 0x00000000, 0x80aac0ef, 0x5, x8, 0, x15)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x9, rs2_val == 3, rs1_b2_val == 8
// opcode: sra8 ; op1:x13; op2:x13; dest:x9; op1val:0xfa08c0f9;  op2val:0x3
TEST_RR_OP(sra8, x9, x13, x13, 0x00000000, 0xfa08c0f9, 0x3, x8, 4, x15)

inst_2:
// rs1 == rd != rs2, rs1==x12, rs2==x5, rd==x12, rs2_val == 6, rs1_b1_val == -9, rs1_b2_val == -65
// opcode: sra8 ; op1:x12; op2:x5; dest:x12; op1val:0x7bff705;  op2val:0x6
TEST_RR_OP(sra8, x12, x12, x5, 0x00000000, 0x7bff705, 0x6, x8, 8, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs2_val == 4, rs1_b1_val == -17, rs1_b2_val == 0, rs1_b0_val == 0, rs1_b3_val == 85
// opcode: sra8 ; op1:x1; op2:x1; dest:x1; op1val:0x5500ef00;  op2val:0x4
TEST_RR_OP(sra8, x1, x1, x1, 0x00000000, 0x5500ef00, 0x4, x8, 12, x15)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x24, rd==x24, rs2_val == 2, rs1_b3_val == 32, rs1_b2_val == -128, rs1_b0_val == -3, rs1_b1_val == 85
// opcode: sra8 ; op1:x4; op2:x24; dest:x24; op1val:0x208055fd;  op2val:0x2
TEST_RR_OP(sra8, x24, x4, x24, 0x00000000, 0x208055fd, 0x2, x8, 16, x15)

inst_5:
// rs1==x17, rs2==x12, rd==x30, rs2_val == 1, rs1_b1_val == -33, rs1_b0_val == -86, rs1_b3_val == -86
// opcode: sra8 ; op1:x17; op2:x12; dest:x30; op1val:0xaa00dfaa;  op2val:0x1
TEST_RR_OP(sra8, x30, x17, x12, 0x00000000, 0xaa00dfaa, 0x1, x8, 20, x15)

inst_6:
// rs1==x26, rs2==x23, rd==x0, rs1_b3_val == 127, rs1_b0_val == 1, rs1_b1_val == 1
// opcode: sra8 ; op1:x26; op2:x23; dest:x0; op1val:0x7f070101;  op2val:0xb
TEST_RR_OP(sra8, x0, x26, x23, 0x00000000, 0x7f070101, 0xb, x8, 24, x15)

inst_7:
// rs1==x11, rs2==x30, rd==x21, rs1_b3_val == -65, rs1_b2_val == -9
// opcode: sra8 ; op1:x11; op2:x30; dest:x21; op1val:0xbff7dffc;  op2val:0x3
TEST_RR_OP(sra8, x21, x11, x30, 0x00000000, 0xbff7dffc, 0x3, x8, 28, x15)

inst_8:
// rs1==x19, rs2==x31, rd==x16, rs1_b3_val == -33, rs1_b0_val == 2, rs1_b2_val == 16
// opcode: sra8 ; op1:x19; op2:x31; dest:x16; op1val:0xdf10df02;  op2val:0x11
TEST_RR_OP(sra8, x16, x19, x31, 0x00000000, 0xdf10df02, 0x11, x8, 32, x15)

inst_9:
// rs1==x22, rs2==x4, rd==x13, rs1_b3_val == -17, rs1_b0_val == 64, rs1_b1_val == -3
// opcode: sra8 ; op1:x22; op2:x4; dest:x13; op1val:0xef08fd40;  op2val:0x8
TEST_RR_OP(sra8, x13, x22, x4, 0x00000000, 0xef08fd40, 0x8, x8, 36, x15)

inst_10:
// rs1==x24, rs2==x20, rd==x5, rs1_b3_val == -9, rs1_b0_val == -2, rs1_b1_val == -5, rs1_b2_val == -17
// opcode: sra8 ; op1:x24; op2:x20; dest:x5; op1val:0xf7effbfe;  op2val:0x5
TEST_RR_OP(sra8, x5, x24, x20, 0x00000000, 0xf7effbfe, 0x5, x8, 40, x15)

inst_11:
// rs1==x18, rs2==x17, rd==x10, rs1_b3_val == -5, rs1_b0_val == 16
// opcode: sra8 ; op1:x18; op2:x17; dest:x10; op1val:0xfb08f610;  op2val:0x5
TEST_RR_OP(sra8, x10, x18, x17, 0x00000000, 0xfb08f610, 0x5, x8, 44, x15)

inst_12:
// rs1==x7, rs2==x6, rd==x23, rs1_b3_val == -3, rs1_b1_val == -65, rs1_b2_val == -33
// opcode: sra8 ; op1:x7; op2:x6; dest:x23; op1val:0xfddfbffe;  op2val:0x8
TEST_RR_OP(sra8, x23, x7, x6, 0x00000000, 0xfddfbffe, 0x8, x8, 48, x15)

inst_13:
// rs1==x16, rs2==x9, rd==x4, rs1_b3_val == -2, rs1_b1_val == 0, rs1_b2_val == 32
// opcode: sra8 ; op1:x16; op2:x9; dest:x4; op1val:0xfe200009;  op2val:0x6
TEST_RR_OP(sra8, x4, x16, x9, 0x00000000, 0xfe200009, 0x6, x8, 52, x15)

inst_14:
// rs1==x23, rs2==x0, rd==x22, rs1_b3_val == 64, 
// opcode: sra8 ; op1:x23; op2:x0; dest:x22; op1val:0x40effd10;  op2val:0x0
TEST_RR_OP(sra8, x22, x23, x0, 0x00000000, 0x40effd10, 0x0, x8, 56, x15)

inst_15:
// rs1==x3, rs2==x29, rd==x7, rs1_b3_val == 16, 
// opcode: sra8 ; op1:x3; op2:x29; dest:x7; op1val:0x10f8bf01;  op2val:0x8
TEST_RR_OP(sra8, x7, x3, x29, 0x00000000, 0x10f8bf01, 0x8, x8, 60, x15)

inst_16:
// rs1==x28, rs2==x26, rd==x27, rs1_b3_val == 8, rs1_b0_val == 32
// opcode: sra8 ; op1:x28; op2:x26; dest:x27; op1val:0x8f7fd20;  op2val:0x10
TEST_RR_OP(sra8, x27, x28, x26, 0x00000000, 0x8f7fd20, 0x10, x8, 64, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x27, rs2==x21, rd==x6, rs1_b3_val == 4, rs1_b0_val == -9
// opcode: sra8 ; op1:x27; op2:x21; dest:x6; op1val:0x40655f7;  op2val:0x0
TEST_RR_OP(sra8, x6, x27, x21, 0x00000000, 0x40655f7, 0x0, x1, 0, x4)

inst_18:
// rs1==x8, rs2==x16, rd==x20, rs1_b3_val == 2, rs1_b2_val == 4, rs1_b1_val == 4
// opcode: sra8 ; op1:x8; op2:x16; dest:x20; op1val:0x2040409;  op2val:0xf
TEST_RR_OP(sra8, x20, x8, x16, 0x00000000, 0x2040409, 0xf, x1, 4, x4)

inst_19:
// rs1==x10, rs2==x14, rd==x11, rs1_b3_val == 1, 
// opcode: sra8 ; op1:x10; op2:x14; dest:x11; op1val:0x1100400;  op2val:0xb
TEST_RR_OP(sra8, x11, x10, x14, 0x00000000, 0x1100400, 0xb, x1, 8, x4)

inst_20:
// rs1==x25, rs2==x27, rd==x3, rs1_b1_val == -1, rs1_b3_val == 0, rs1_b0_val == 127
// opcode: sra8 ; op1:x25; op2:x27; dest:x3; op1val:0x00ff7f;  op2val:0x6
TEST_RR_OP(sra8, x3, x25, x27, 0x00000000, 0x00ff7f, 0x6, x1, 12, x4)

inst_21:
// rs1==x30, rs2==x28, rd==x31, rs1_b0_val == 85, 
// opcode: sra8 ; op1:x30; op2:x28; dest:x31; op1val:0x08bf55;  op2val:0xa
TEST_RR_OP(sra8, x31, x30, x28, 0x00000000, 0x08bf55, 0xa, x1, 16, x4)

inst_22:
// rs1==x31, rs2==x3, rd==x29, rs1_b0_val == -65, 
// opcode: sra8 ; op1:x31; op2:x3; dest:x29; op1val:0xaa06fbbf;  op2val:0x6
TEST_RR_OP(sra8, x29, x31, x3, 0x00000000, 0xaa06fbbf, 0x6, x1, 20, x4)

inst_23:
// rs1==x2, rs2==x18, rd==x25, rs1_b0_val == -33, rs1_b2_val == 127
// opcode: sra8 ; op1:x2; op2:x18; dest:x25; op1val:0xf97ffadf;  op2val:0x8
TEST_RR_OP(sra8, x25, x2, x18, 0x00000000, 0xf97ffadf, 0x8, x1, 24, x4)

inst_24:
// rs1==x21, rs2==x15, rd==x19, rs1_b0_val == -5, rs1_b1_val == 64
// opcode: sra8 ; op1:x21; op2:x15; dest:x19; op1val:0xf63f40fb;  op2val:0xd
TEST_RR_OP(sra8, x19, x21, x15, 0x00000000, 0xf63f40fb, 0xd, x1, 28, x4)

inst_25:
// rs1==x5, rs2==x7, rd==x17, rs1_b0_val == -128, rs1_b2_val == 2
// opcode: sra8 ; op1:x5; op2:x7; dest:x17; op1val:0xfa020580;  op2val:0xa
TEST_RR_OP(sra8, x17, x5, x7, 0x00000000, 0xfa020580, 0xa, x1, 32, x4)

inst_26:
// rs1==x20, rs2==x22, rd==x15, rs1_b0_val == 8, rs1_b3_val == -1, rs1_b2_val == 64
// opcode: sra8 ; op1:x20; op2:x22; dest:x15; op1val:0xff400308;  op2val:0x8
TEST_RR_OP(sra8, x15, x20, x22, 0x00000000, 0xff400308, 0x8, x1, 36, x4)

inst_27:
// rs1==x15, rs2==x25, rd==x8, rs1_b0_val == 4, rs1_b2_val == 1
// opcode: sra8 ; op1:x15; op2:x25; dest:x8; op1val:0x010104;  op2val:0x10
TEST_RR_OP(sra8, x8, x15, x25, 0x00000000, 0x010104, 0x10, x1, 40, x4)

inst_28:
// rs1==x9, rs2==x19, rd==x28, rs1_b2_val == -5, 
// opcode: sra8 ; op1:x9; op2:x19; dest:x28; op1val:0x9fb3f00;  op2val:0x3
TEST_RR_OP(sra8, x28, x9, x19, 0x00000000, 0x9fb3f00, 0x3, x1, 44, x4)

inst_29:
// rs1==x0, rs2==x10, rd==x14, rs1_b2_val == -3, 
// opcode: sra8 ; op1:x0; op2:x10; dest:x14; op1val:0x9fd0100;  op2val:0x11
TEST_RR_OP(sra8, x14, x0, x10, 0x00000000, 0x9fd0100, 0x11, x1, 48, x4)

inst_30:
// rs1==x29, rs2==x8, rd==x26, rs1_b2_val == -2, 
// opcode: sra8 ; op1:x29; op2:x8; dest:x26; op1val:0xf6fefa10;  op2val:0x13
TEST_RR_OP(sra8, x26, x29, x8, 0x00000000, 0xf6fefa10, 0x13, x1, 52, x4)

inst_31:
// rs1==x6, rs2==x2, rd==x18, rs1_b2_val == 85, 
// opcode: sra8 ; op1:x6; op2:x2; dest:x18; op1val:0x355bfdf;  op2val:0x6
TEST_RR_OP(sra8, x18, x6, x2, 0x00000000, 0x355bfdf, 0x6, x1, 56, x4)

inst_32:
// rs1_b2_val == -1, rs1_b0_val == -1, rs1_b1_val == -86
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaff;  op2val:0xf
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0xbfffaaff, 0xf, x1, 60, x4)

inst_33:
// rs1_b1_val == 127, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x80067f01;  op2val:0x13
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x80067f01, 0x13, x1, 64, x4)

inst_34:
// rs1_b1_val == -2, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x301fef6;  op2val:0x2
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x301fef6, 0x2, x1, 68, x4)

inst_35:
// rs1_b1_val == -128, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6c080ef;  op2val:0x11
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0xf6c080ef, 0x11, x1, 72, x4)

inst_36:
// rs1_b1_val == 32, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9c020fa;  op2val:0x5
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0xf9c020fa, 0x5, x1, 76, x4)

inst_37:
// rs1_b1_val == 16, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fd1005;  op2val:0x6
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x10fd1005, 0x6, x1, 80, x4)

inst_38:
// rs1_b1_val == 8, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0608fe;  op2val:0x10
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0xfb0608fe, 0x10, x1, 84, x4)

inst_39:
// rs1_b1_val == 2, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb4002ef;  op2val:0x1
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0xfb4002ef, 0x1, x1, 88, x4)

inst_40:
// rs2_val == 4, rs1_b1_val == -17, rs1_b2_val == 0, rs1_b0_val == 0, rs1_b3_val == 85
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x5500ef00;  op2val:0x4
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x5500ef00, 0x4, x1, 92, x4)

inst_41:
// rs1_b3_val == 127, rs1_b0_val == 1, rs1_b1_val == 1
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f070101;  op2val:0xb
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x7f070101, 0xb, x1, 96, x4)

inst_42:
// rs1_b3_val == 64, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40effd10;  op2val:0x3
TEST_RR_OP(sra8, x31, x30, x29, 0x00000000, 0x40effd10, 0x3, x1, 100, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
