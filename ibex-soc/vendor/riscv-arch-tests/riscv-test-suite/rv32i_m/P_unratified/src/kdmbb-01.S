
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmbb instruction of the RISC-V RV32PZicsr extension for the kdmbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x2, rd==x19, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -8193, rs2_h1_val == -3
// opcode: kdmbb ; op1:x8; op2:x2; dest:x19; op1val:0xfff88000;  op2val:0xfffddfff
TEST_PKRR_OP(kdmbb, x19, x8, x2, 0x00000000, 0xfff88000, 0xfffddfff, x8, x1, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x26, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4096, rs1_h1_val == 8
// opcode: kdmbb ; op1:x24; op2:x24; dest:x26; op1val:0x081000;  op2val:0x080007
TEST_PKRR_OP(kdmbb, x26, x24, x24, 0x00000000, 0x081000, 0x080007, x24, x1, 8, x6)

inst_2:
// rs1 == rd != rs2, rs1==x27, rs2==x20, rd==x27, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -257, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 2048
// opcode: kdmbb ; op1:x27; op2:x20; dest:x27; op1val:0xfffa0800;  op2val:0x05feff
TEST_PKRR_OP(kdmbb, x27, x27, x20, 0x00000000, 0xfffa0800, 0x05feff, x27, x1, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h0_val == 16
// opcode: kdmbb ; op1:x3; op2:x3; dest:x3; op1val:0x203fff;  op2val:0xfff60010
TEST_PKRR_OP(kdmbb, x3, x3, x3, 0x00000000, 0x203fff, 0xfff60010, x3, x1, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x28, rd==x28, rs1_h0_val == rs2_h0_val, rs2_h1_val == -16385, rs1_h0_val == -4097, rs2_h0_val == -4097, rs1_h1_val == 128
// opcode: kdmbb ; op1:x13; op2:x28; dest:x28; op1val:0x80efff;  op2val:0xbfffefff
TEST_PKRR_OP(kdmbb, x28, x13, x28, 0x00000000, 0x80efff, 0xbfffefff, x13, x1, 32, x6)

inst_5:
// rs1==x19, rs2==x13, rd==x21, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192
// opcode: kdmbb ; op1:x19; op2:x13; dest:x21; op1val:0x03fffa;  op2val:0xfffc2000
TEST_PKRR_OP(kdmbb, x21, x19, x13, 0x00000000, 0x03fffa, 0xfffc2000, x19, x1, 40, x6)

inst_6:
// rs1==x7, rs2==x16, rd==x12, rs2_h1_val == -21846, rs1_h0_val == -513, rs2_h0_val == 21845, rs1_h1_val == 2
// opcode: kdmbb ; op1:x7; op2:x16; dest:x12; op1val:0x02fdff;  op2val:0xaaaa5555
TEST_PKRR_OP(kdmbb, x12, x7, x16, 0x00000000, 0x02fdff, 0xaaaa5555, x7, x1, 48, x6)

inst_7:
// rs1==x5, rs2==x7, rd==x16, rs2_h1_val == 21845, rs1_h0_val == 32, rs1_h1_val == -17, rs2_h0_val == 16384
// opcode: kdmbb ; op1:x5; op2:x7; dest:x16; op1val:0xffef0020;  op2val:0x55554000
TEST_PKRR_OP(kdmbb, x16, x5, x7, 0x00000000, 0xffef0020, 0x55554000, x5, x1, 56, x6)

inst_8:
// rs1==x21, rs2==x10, rd==x24, rs2_h1_val == 32767, rs1_h1_val == -9
// opcode: kdmbb ; op1:x21; op2:x10; dest:x24; op1val:0xfff70009;  op2val:0x7fff3fff
TEST_PKRR_OP(kdmbb, x24, x21, x10, 0x00000000, 0xfff70009, 0x7fff3fff, x21, x1, 64, x6)

inst_9:
// rs1==x30, rs2==x4, rd==x0, rs2_h1_val == -8193, rs1_h0_val == -2049
// opcode: kdmbb ; op1:x30; op2:x4; dest:x0; op1val:0xfff9f7ff;  op2val:0xdfffdfff
TEST_PKRR_OP(kdmbb, x0, x30, x4, 0x00000000, 0xfff9f7ff, 0xdfffdfff, x30, x1, 72, x6)

inst_10:
// rs1==x23, rs2==x8, rd==x29, rs2_h1_val == -4097, 
// opcode: kdmbb ; op1:x23; op2:x8; dest:x29; op1val:0xfff73fff;  op2val:0xefff3fff
TEST_PKRR_OP(kdmbb, x29, x23, x8, 0x00000000, 0xfff73fff, 0xefff3fff, x23, x1, 80, x6)

inst_11:
// rs1==x31, rs2==x30, rd==x4, rs2_h1_val == -2049, rs1_h0_val == -129, rs1_h1_val == -513
// opcode: kdmbb ; op1:x31; op2:x30; dest:x4; op1val:0xfdffff7f;  op2val:0xf7ff5555
TEST_PKRR_OP(kdmbb, x4, x31, x30, 0x00000000, 0xfdffff7f, 0xf7ff5555, x31, x1, 88, x6)

inst_12:
// rs1==x10, rs2==x14, rd==x15, rs2_h1_val == -1025, rs1_h0_val == -33
// opcode: kdmbb ; op1:x10; op2:x14; dest:x15; op1val:0x3fffffdf;  op2val:0xfbfffff9
TEST_PKRR_OP(kdmbb, x15, x10, x14, 0x00000000, 0x3fffffdf, 0xfbfffff9, x10, x1, 96, x6)

inst_13:
// rs1==x20, rs2==x9, rd==x2, rs2_h1_val == -513, rs1_h0_val == -21846
// opcode: kdmbb ; op1:x20; op2:x9; dest:x2; op1val:0x09aaaa;  op2val:0xfdff0005
TEST_PKRR_OP(kdmbb, x2, x20, x9, 0x00000000, 0x09aaaa, 0xfdff0005, x20, x1, 104, x6)

inst_14:
// rs1==x9, rs2==x12, rd==x5, rs2_h1_val == -257, rs2_h0_val == 1024, rs1_h0_val == 32767
// opcode: kdmbb ; op1:x9; op2:x12; dest:x5; op1val:0xc0007fff;  op2val:0xfeff0400
TEST_PKRR_OP(kdmbb, x5, x9, x12, 0x00000000, 0xc0007fff, 0xfeff0400, x9, x1, 112, x6)

inst_15:
// rs1==x25, rs2==x29, rd==x7, rs2_h1_val == -129, rs1_h1_val == -65, rs2_h0_val == 32767
// opcode: kdmbb ; op1:x25; op2:x29; dest:x7; op1val:0xffbf3fff;  op2val:0xff7f7fff
TEST_PKRR_OP(kdmbb, x7, x25, x29, 0x00000000, 0xffbf3fff, 0xff7f7fff, x25, x1, 120, x6)

inst_16:
// rs1==x12, rs2==x22, rd==x11, rs2_h1_val == -65, rs2_h0_val == -3
// opcode: kdmbb ; op1:x12; op2:x22; dest:x11; op1val:0xfff88000;  op2val:0xffbffffd
TEST_PKRR_OP(kdmbb, x11, x12, x22, 0x00000000, 0xfff88000, 0xffbffffd, x12, x1, 128, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x17, rs2==x6, rd==x13, rs2_h1_val == -33, rs1_h0_val == 64, rs2_h0_val == -9
// opcode: kdmbb ; op1:x17; op2:x6; dest:x13; op1val:0x050040;  op2val:0xffdffff7
TEST_PKRR_OP(kdmbb, x13, x17, x6, 0x00000000, 0x050040, 0xffdffff7, x17, x3, 0, x2)

inst_18:
// rs1==x11, rs2==x0, rd==x18, rs2_h1_val == -17, 
// opcode: kdmbb ; op1:x11; op2:x0; dest:x18; op1val:0x80ff7f;  op2val:0xffef0400
TEST_PKRR_OP(kdmbb, x18, x11, x0, 0x00000000, 0x80ff7f, 0xffef0400, x11, x3, 8, x2)

inst_19:
// rs1==x1, rs2==x11, rd==x30, rs2_h1_val == -9, rs2_h0_val == 1, rs1_h1_val == -257
// opcode: kdmbb ; op1:x1; op2:x11; dest:x30; op1val:0xfefffff9;  op2val:0xfff70001
TEST_PKRR_OP(kdmbb, x30, x1, x11, 0x00000000, 0xfefffff9, 0xfff70001, x1, x3, 16, x2)

inst_20:
// rs1==x29, rs2==x5, rd==x14, rs2_h1_val == -5, rs1_h1_val == 4
// opcode: kdmbb ; op1:x29; op2:x5; dest:x14; op1val:0x040003;  op2val:0xfffbefff
TEST_PKRR_OP(kdmbb, x14, x29, x5, 0x00000000, 0x040003, 0xfffbefff, x29, x3, 24, x2)

inst_21:
// rs1==x6, rs2==x17, rd==x9, rs2_h1_val == -2, rs1_h0_val == -65
// opcode: kdmbb ; op1:x6; op2:x17; dest:x9; op1val:0xfff6ffbf;  op2val:0xfffe0005
TEST_PKRR_OP(kdmbb, x9, x6, x17, 0x00000000, 0xfff6ffbf, 0xfffe0005, x6, x3, 32, x2)

inst_22:
// rs1==x16, rs2==x23, rd==x20, rs2_h1_val == -32768, rs1_h0_val == 128, rs1_h1_val == -32768
// opcode: kdmbb ; op1:x16; op2:x23; dest:x20; op1val:0x80000080;  op2val:0x80000009
TEST_PKRR_OP(kdmbb, x20, x16, x23, 0x00000000, 0x80000080, 0x80000009, x16, x3, 40, x2)

inst_23:
// rs1==x4, rs2==x15, rd==x8, rs2_h1_val == 16384, rs2_h0_val == 512, rs1_h0_val == 21845, rs1_h1_val == 32767
// opcode: kdmbb ; op1:x4; op2:x15; dest:x8; op1val:0x7fff5555;  op2val:0x40000200
TEST_PKRR_OP(kdmbb, x8, x4, x15, 0x00000000, 0x7fff5555, 0x40000200, x4, x3, 48, x2)

inst_24:
// rs1==x22, rs2==x27, rd==x25, rs2_h1_val == 8192, rs1_h1_val == -4097
// opcode: kdmbb ; op1:x22; op2:x27; dest:x25; op1val:0xefffefff;  op2val:0x2000fffd
TEST_PKRR_OP(kdmbb, x25, x22, x27, 0x00000000, 0xefffefff, 0x2000fffd, x22, x3, 56, x2)

inst_25:
// rs1==x15, rs2==x26, rd==x6, rs2_h1_val == 4096, 
// opcode: kdmbb ; op1:x15; op2:x26; dest:x6; op1val:0x3fff3fff;  op2val:0x1000fff8
TEST_PKRR_OP(kdmbb, x6, x15, x26, 0x00000000, 0x3fff3fff, 0x1000fff8, x15, x3, 64, x2)

inst_26:
// rs1==x26, rs2==x25, rd==x31, rs2_h1_val == 2048, rs1_h0_val == 256, rs2_h0_val == -32768, rs1_h1_val == 1
// opcode: kdmbb ; op1:x26; op2:x25; dest:x31; op1val:0x010100;  op2val:0x8008000
TEST_PKRR_OP(kdmbb, x31, x26, x25, 0x00000000, 0x010100, 0x8008000, x26, x3, 72, x2)

inst_27:
// rs1==x28, rs2==x31, rd==x10, rs2_h1_val == 1024, rs2_h0_val == -2
// opcode: kdmbb ; op1:x28; op2:x31; dest:x10; op1val:0x3fff3fff;  op2val:0x400fffe
TEST_PKRR_OP(kdmbb, x10, x28, x31, 0x00000000, 0x3fff3fff, 0x400fffe, x28, x3, 80, x2)

inst_28:
// rs1==x14, rs2==x19, rd==x23, rs2_h1_val == 512, rs1_h1_val == 16384
// opcode: kdmbb ; op1:x14; op2:x19; dest:x23; op1val:0x40000009;  op2val:0x2004000
TEST_PKRR_OP(kdmbb, x23, x14, x19, 0x00000000, 0x40000009, 0x2004000, x14, x3, 88, x2)

inst_29:
// rs1==x0, rs2==x18, rd==x1, rs2_h1_val == 256, rs1_h0_val == 0
// opcode: kdmbb ; op1:x0; op2:x18; dest:x1; op1val:0xfff60000;  op2val:0x1000200
TEST_PKRR_OP(kdmbb, x1, x0, x18, 0x00000000, 0xfff60000, 0x1000200, x0, x3, 96, x2)

inst_30:
// rs1==x18, rs2==x21, rd==x17, rs2_h1_val == 128, rs1_h0_val == 4
// opcode: kdmbb ; op1:x18; op2:x21; dest:x17; op1val:0x200004;  op2val:0x80fff6
TEST_PKRR_OP(kdmbb, x17, x18, x21, 0x00000000, 0x200004, 0x80fff6, x18, x3, 104, x2)

inst_31:
// rs1==x2, rs2==x1, rd==x22, rs2_h1_val == 64, 
// opcode: kdmbb ; op1:x2; op2:x1; dest:x22; op1val:0x808000;  op2val:0x40efff
TEST_PKRR_OP(kdmbb, x22, x2, x1, 0x00000000, 0x808000, 0x40efff, x2, x3, 112, x4)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:
// rs2_h1_val == 32, rs1_h1_val == 21845
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffdf;  op2val:0x200006
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x5555ffdf, 0x200006, x30, x1, 0, x4)

inst_33:
// rs2_h1_val == 16, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffbf;  op2val:0x103fff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffaffbf, 0x103fff, x30, x1, 8, x4)

inst_34:
// rs2_h1_val == 4, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0005;  op2val:0x040009
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfdff0005, 0x040009, x30, x1, 16, x4)

inst_35:
// rs1_h0_val == -1025, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbff;  op2val:0x8000009
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xffbffbff, 0x8000009, x30, x1, 24, x4)

inst_36:
// rs1_h0_val == -257, rs2_h0_val == 2
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x01feff;  op2val:0x20000002
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x01feff, 0x20000002, x30, x1, 32, x4)

inst_37:
// rs1_h0_val == -17, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef;  op2val:0xffefdfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x08ffef, 0xffefdfff, x30, x1, 40, x4)

inst_38:
// rs1_h0_val == -9, rs2_h0_val == -1025
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7;  op2val:0xffbffbff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x5555fff7, 0xffbffbff, x30, x1, 48, x4)

inst_39:
// rs1_h0_val == -5, rs2_h1_val == -1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb;  op2val:0xfffffffe
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x5555fffb, 0xfffffffe, x30, x1, 56, x4)

inst_40:
// rs1_h0_val == -3, rs2_h0_val == 64
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffd;  op2val:0xfff80040
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffcfffd, 0xfff80040, x30, x1, 64, x4)

inst_41:
// rs1_h0_val == -2, rs2_h0_val == -513, rs1_h1_val == 1024
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x400fffe;  op2val:0xfffcfdff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x400fffe, 0xfffcfdff, x30, x1, 72, x4)

inst_42:
// rs1_h0_val == 16384, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x034000;  op2val:0x2000040
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x034000, 0x2000040, x30, x1, 80, x4)

inst_43:
// rs1_h0_val == 8192, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xc0002000;  op2val:0xff7f0003
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xc0002000, 0xff7f0003, x30, x1, 88, x4)

inst_44:
// rs1_h0_val == 1024, rs1_h1_val == -33
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0400;  op2val:0xbfff7fff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xffdf0400, 0xbfff7fff, x30, x1, 96, x4)

inst_45:
// rs1_h0_val == 512, rs1_h1_val == -21846
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0200;  op2val:0x040010
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xaaaa0200, 0x040010, x30, x1, 104, x4)

inst_46:
// rs1_h0_val == 16, rs2_h0_val == -33
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0010;  op2val:0xfdffffdf
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffa0010, 0xfdffffdf, x30, x1, 112, x4)

inst_47:
// rs1_h0_val == 8, rs2_h0_val == 8
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x090008;  op2val:0x060008
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x090008, 0x060008, x30, x1, 120, x4)

inst_48:
// rs1_h0_val == 2, rs2_h0_val == -5, rs1_h1_val == 8192
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20000002;  op2val:0xfffefffb
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x20000002, 0xfffefffb, x30, x1, 128, x4)

inst_49:
// rs1_h0_val == 1, rs2_h0_val == -129, rs1_h1_val == 256
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x1000001;  op2val:0x20ff7f
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x1000001, 0x20ff7f, x30, x1, 136, x4)

inst_50:
// rs1_h0_val == -1, rs2_h1_val == 0
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff;  op2val:0x00fff9
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x5555ffff, 0x00fff9, x30, x1, 144, x4)

inst_51:
// rs2_h1_val == 2, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x088000;  op2val:0x020005
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x088000, 0x020005, x30, x1, 152, x4)

inst_52:
// rs2_h0_val == 4096, rs1_h1_val == -5
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffb;  op2val:0x081000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffbfffb, 0x081000, x30, x1, 160, x4)

inst_53:
// rs2_h0_val == 2048, rs1_h1_val == 16
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x100200;  op2val:0x8000800
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x100200, 0x8000800, x30, x1, 168, x4)

inst_54:
// rs2_h0_val == 256, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0xaaaa0100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xffbfffff, 0xaaaa0100, x30, x1, 176, x4)

inst_55:
// rs2_h0_val == 128, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200020;  op2val:0xbfff0080
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x200020, 0xbfff0080, x30, x1, 184, x4)

inst_56:
// rs2_h0_val == 32, rs1_h1_val == -1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8;  op2val:0xfff60020
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffffff8, 0xfff60020, x30, x1, 192, x4)

inst_57:
// rs2_h0_val == 4, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20007fff;  op2val:0xffbf0004
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x20007fff, 0xffbf0004, x30, x1, 200, x4)

inst_58:
// rs2_h0_val == 0, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x03fffc;  op2val:0x030000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x03fffc, 0x030000, x30, x1, 208, x4)

inst_59:
// rs2_h0_val == -1, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x09fff6;  op2val:0x5555ffff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x09fff6, 0x5555ffff, x30, x1, 216, x4)

inst_60:
// rs1_h1_val == 0, rs1_h0_val == -8193
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff;  op2val:0xfbff5555
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x00dfff, 0xfbff5555, x30, x1, 224, x4)

inst_61:
// rs1_h1_val == -16385, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006;  op2val:0x1000fff6
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xbfff0006, 0x1000fff6, x30, x1, 232, x4)

inst_62:
// rs1_h1_val == -8193, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0040;  op2val:0x090007
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xdfff0040, 0x090007, x30, x1, 240, x4)

inst_63:
// rs1_h1_val == -2049, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0040;  op2val:0x7fff0200
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xf7ff0040, 0x7fff0200, x30, x1, 248, x4)

inst_64:
// rs1_h1_val == -3, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0x100040
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffdffff, 0x100040, x30, x1, 256, x4)

inst_65:
// rs1_h1_val == -2, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffe4000;  op2val:0x200fffe
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffe4000, 0x200fffe, x30, x1, 264, x4)

inst_66:
// rs1_h1_val == 4096, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x10001000;  op2val:0x80000004
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x10001000, 0x80000004, x30, x1, 272, x4)

inst_67:
// rs1_h1_val == 2048, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff;  op2val:0x805555
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x8007fff, 0x805555, x30, x1, 280, x4)

inst_68:
// rs1_h1_val == 512, rs2_h0_val == -17
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000010;  op2val:0x80ffef
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x2000010, 0x80ffef, x30, x1, 288, x4)

inst_69:
// rs2_h1_val == 1, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff;  op2val:0x01fff7
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x20dfff, 0x01fff7, x30, x1, 296, x4)

inst_70:
// rs2_h0_val == -65, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200003;  op2val:0x3fffffbf
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x200003, 0x3fffffbf, x30, x1, 304, x4)

inst_71:
// rs1_h1_val == 64, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x40fff9;  op2val:0xc0000100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x40fff9, 0xc0000100, x30, x1, 312, x4)

inst_72:
// rs2_h0_val == -21846, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x040004;  op2val:0xfffeaaaa
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0x040004, 0xfffeaaaa, x30, x1, 320, x4)

inst_73:
// rs2_h0_val == -16385, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200;  op2val:0xefffbfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xefff0200, 0xefffbfff, x30, x1, 328, x4)

inst_74:
// rs1_h0_val == -16385, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff;  op2val:0x400fffb
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfffebfff, 0x400fffb, x30, x1, 336, x4)

inst_75:
// rs1_h1_val == -1025, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000;  op2val:0x400ffdf
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfbff0000, 0x400ffdf, x30, x1, 344, x4)

inst_76:
// rs1_h1_val == -129, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc;  op2val:0xfff60003
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xff7ffffc, 0xfff60003, x30, x1, 352, x4)

inst_77:
// rs2_h0_val == -2049, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010;  op2val:0x7ffff7ff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfdff0010, 0x7ffff7ff, x30, x1, 360, x4)

inst_78:
// rs2_h1_val == -8193, rs1_h0_val == -2049
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7ff;  op2val:0xdfffdfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfff9f7ff, 0xdfffdfff, x30, x1, 368, x4)

inst_79:
// rs2_h1_val == 256, rs1_h0_val == 0
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff60000;  op2val:0x1000200
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x00000000, 0xfff60000, 0x1000200, x30, x1, 376, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
