
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umax16 instruction of the RISC-V RV32PZicsr extension for the umax16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umax16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x16, rd==x4, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 2, rs2_h1_val == 65527, rs2_h0_val == 8192
// opcode: umax16 ; op1:x9; op2:x16; dest:x4; op1val:0x020000;  op2val:0xfff72000
TEST_RR_OP(umax16, x4, x9, x16, 0x00000000, 0x020000, 0xfff72000, x1, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x17, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 512, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65503
// opcode: umax16 ; op1:x7; op2:x7; dest:x17; op1val:0x03ffdf;  op2val:0x030200
TEST_RR_OP(umax16, x17, x7, x7, 0x00000000, 0x03ffdf, 0x030200, x1, 4, x8)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x19, rd==x26, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 32
// opcode: umax16 ; op1:x26; op2:x19; dest:x26; op1val:0x0c000c;  op2val:0x20000c
TEST_RR_OP(umax16, x26, x26, x19, 0x00000000, 0x0c000c, 0x20000c, x1, 8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_h1_val == 43690, rs1_h1_val == 32
// opcode: umax16 ; op1:x29; op2:x29; dest:x29; op1val:0x200009;  op2val:0xaaaa0005
TEST_RR_OP(umax16, x29, x29, x29, 0x00000000, 0x200009, 0xaaaa0005, x1, 12, x8)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x30, rd==x30, rs2_h1_val == 21845, rs2_h0_val == 21845
// opcode: umax16 ; op1:x24; op2:x30; dest:x30; op1val:0x0d000a;  op2val:0x55555555
TEST_RR_OP(umax16, x30, x24, x30, 0x00000000, 0x0d000a, 0x55555555, x1, 16, x8)

inst_5:
// rs1==x10, rs2==x5, rd==x6, rs2_h1_val == 32767, rs1_h0_val == 65531, rs1_h1_val == 63487, rs2_h0_val == 65471
// opcode: umax16 ; op1:x10; op2:x5; dest:x6; op1val:0xf7fffffb;  op2val:0x7fffffbf
TEST_RR_OP(umax16, x6, x10, x5, 0x00000000, 0xf7fffffb, 0x7fffffbf, x1, 20, x8)

inst_6:
// rs1==x2, rs2==x12, rd==x9, rs2_h1_val == 49151, rs2_h0_val == 32768, rs1_h0_val == 8
// opcode: umax16 ; op1:x2; op2:x12; dest:x9; op1val:0xf7ff0008;  op2val:0xbfff8000
TEST_RR_OP(umax16, x9, x2, x12, 0x00000000, 0xf7ff0008, 0xbfff8000, x1, 24, x8)

inst_7:
// rs1==x11, rs2==x14, rd==x12, rs2_h1_val == 57343, rs1_h1_val == 64, rs2_h0_val == 4096
// opcode: umax16 ; op1:x11; op2:x14; dest:x12; op1val:0x400005;  op2val:0xdfff1000
TEST_RR_OP(umax16, x12, x11, x14, 0x00000000, 0x400005, 0xdfff1000, x1, 28, x8)

inst_8:
// rs1==x22, rs2==x0, rd==x31, rs2_h1_val == 61439, rs1_h1_val == 49151, rs1_h0_val == 32768
// opcode: umax16 ; op1:x22; op2:x0; dest:x31; op1val:0xbfff8000;  op2val:0xefff0011
TEST_RR_OP(umax16, x31, x22, x0, 0x00000000, 0xbfff8000, 0xefff0011, x1, 32, x8)

inst_9:
// rs1==x13, rs2==x25, rd==x19, rs2_h1_val == 63487, rs1_h1_val == 2048
// opcode: umax16 ; op1:x13; op2:x25; dest:x19; op1val:0x8000006;  op2val:0xf7ff0012
TEST_RR_OP(umax16, x19, x13, x25, 0x00000000, 0x8000006, 0xf7ff0012, x1, 36, x8)

inst_10:
// rs1==x27, rs2==x9, rd==x23, rs2_h1_val == 64511, rs1_h0_val == 65519
// opcode: umax16 ; op1:x27; op2:x9; dest:x23; op1val:0x07ffef;  op2val:0xfbff000f
TEST_RR_OP(umax16, x23, x27, x9, 0x00000000, 0x07ffef, 0xfbff000f, x1, 40, x8)

inst_11:
// rs1==x12, rs2==x15, rd==x11, rs2_h1_val == 65023, rs2_h0_val == 2, rs1_h0_val == 65535
// opcode: umax16 ; op1:x12; op2:x15; dest:x11; op1val:0x20ffff;  op2val:0xfdff0002
TEST_RR_OP(umax16, x11, x12, x15, 0x00000000, 0x20ffff, 0xfdff0002, x1, 44, x8)

inst_12:
// rs1==x30, rs2==x10, rd==x13, rs2_h1_val == 65279, rs1_h1_val == 65531, rs1_h0_val == 4096
// opcode: umax16 ; op1:x30; op2:x10; dest:x13; op1val:0xfffb1000;  op2val:0xfeff0002
TEST_RR_OP(umax16, x13, x30, x10, 0x00000000, 0xfffb1000, 0xfeff0002, x1, 48, x8)

inst_13:
// rs1==x5, rs2==x2, rd==x24, rs2_h1_val == 65407, rs1_h1_val == 61439, rs1_h0_val == 61439
// opcode: umax16 ; op1:x5; op2:x2; dest:x24; op1val:0xefffefff;  op2val:0xff7f0003
TEST_RR_OP(umax16, x24, x5, x2, 0x00000000, 0xefffefff, 0xff7f0003, x1, 52, x8)

inst_14:
// rs1==x15, rs2==x3, rd==x7, rs2_h1_val == 65471, rs1_h0_val == 49151, rs1_h1_val == 512, rs2_h0_val == 16
// opcode: umax16 ; op1:x15; op2:x3; dest:x7; op1val:0x200bfff;  op2val:0xffbf0010
TEST_RR_OP(umax16, x7, x15, x3, 0x00000000, 0x200bfff, 0xffbf0010, x1, 56, x8)

inst_15:
// rs1==x19, rs2==x21, rd==x20, rs2_h1_val == 65503, rs2_h0_val == 49151
// opcode: umax16 ; op1:x19; op2:x21; dest:x20; op1val:0x2001000;  op2val:0xffdfbfff
TEST_RR_OP(umax16, x20, x19, x21, 0x00000000, 0x2001000, 0xffdfbfff, x1, 60, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:
// rs1==x0, rs2==x1, rd==x8, rs2_h1_val == 65519, rs1_h1_val == 65279
// opcode: umax16 ; op1:x0; op2:x1; dest:x8; op1val:0xfeff000d;  op2val:0xffef0003
TEST_RR_OP(umax16, x8, x0, x1, 0x00000000, 0xfeff000d, 0xffef0003, x7, 0, x9)

inst_17:
// rs1==x16, rs2==x31, rd==x27, rs2_h1_val == 65531, rs1_h0_val == 65533, rs2_h0_val == 128, rs1_h1_val == 43690
// opcode: umax16 ; op1:x16; op2:x31; dest:x27; op1val:0xaaaafffd;  op2val:0xfffb0080
TEST_RR_OP(umax16, x27, x16, x31, 0x00000000, 0xaaaafffd, 0xfffb0080, x7, 4, x9)

inst_18:
// rs1==x17, rs2==x18, rd==x14, rs2_h1_val == 65533, rs1_h0_val == 65527, rs2_h0_val == 8
// opcode: umax16 ; op1:x17; op2:x18; dest:x14; op1val:0x0ffff7;  op2val:0xfffd0008
TEST_RR_OP(umax16, x14, x17, x18, 0x00000000, 0x0ffff7, 0xfffd0008, x7, 8, x9)

inst_19:
// rs1==x1, rs2==x4, rd==x10, rs2_h1_val == 65534, 
// opcode: umax16 ; op1:x1; op2:x4; dest:x10; op1val:0x40000a;  op2val:0xfffe0003
TEST_RR_OP(umax16, x10, x1, x4, 0x00000000, 0x40000a, 0xfffe0003, x7, 12, x9)

inst_20:
// rs1==x23, rs2==x24, rd==x18, rs2_h1_val == 32768, rs1_h0_val == 57343, rs2_h0_val == 61439
// opcode: umax16 ; op1:x23; op2:x24; dest:x18; op1val:0x11dfff;  op2val:0x8000efff
TEST_RR_OP(umax16, x18, x23, x24, 0x00000000, 0x11dfff, 0x8000efff, x7, 16, x9)

inst_21:
// rs1==x14, rs2==x20, rd==x28, rs2_h1_val == 16384, rs2_h0_val == 1024, rs1_h0_val == 512
// opcode: umax16 ; op1:x14; op2:x20; dest:x28; op1val:0x2000200;  op2val:0x40000400
TEST_RR_OP(umax16, x28, x14, x20, 0x00000000, 0x2000200, 0x40000400, x7, 20, x9)

inst_22:
// rs1==x4, rs2==x23, rd==x16, rs2_h1_val == 8192, rs1_h1_val == 1024
// opcode: umax16 ; op1:x4; op2:x23; dest:x16; op1val:0x400000c;  op2val:0x2000000e
TEST_RR_OP(umax16, x16, x4, x23, 0x00000000, 0x400000c, 0x2000000e, x7, 24, x9)

inst_23:
// rs1==x28, rs2==x27, rd==x21, rs2_h1_val == 4096, rs1_h1_val == 128
// opcode: umax16 ; op1:x28; op2:x27; dest:x21; op1val:0x80ffef;  op2val:0x10000011
TEST_RR_OP(umax16, x21, x28, x27, 0x00000000, 0x80ffef, 0x10000011, x7, 28, x9)

inst_24:
// rs1==x3, rs2==x8, rd==x15, rs2_h1_val == 2048, 
// opcode: umax16 ; op1:x3; op2:x8; dest:x15; op1val:0xefff8000;  op2val:0x8002000
TEST_RR_OP(umax16, x15, x3, x8, 0x00000000, 0xefff8000, 0x8002000, x7, 32, x9)

inst_25:
// rs1==x18, rs2==x28, rd==x5, rs2_h1_val == 1024, rs1_h1_val == 65503
// opcode: umax16 ; op1:x18; op2:x28; dest:x5; op1val:0xffdf0000;  op2val:0x4000080
TEST_RR_OP(umax16, x5, x18, x28, 0x00000000, 0xffdf0000, 0x4000080, x7, 36, x9)

inst_26:
// rs1==x21, rs2==x6, rd==x22, rs2_h1_val == 512, rs1_h0_val == 256
// opcode: umax16 ; op1:x21; op2:x6; dest:x22; op1val:0xf7ff0100;  op2val:0x2002000
TEST_RR_OP(umax16, x22, x21, x6, 0x00000000, 0xf7ff0100, 0x2002000, x7, 40, x9)

inst_27:
// rs1==x25, rs2==x26, rd==x3, rs2_h1_val == 256, rs1_h0_val == 1024, rs2_h0_val == 65519
// opcode: umax16 ; op1:x25; op2:x26; dest:x3; op1val:0x8000400;  op2val:0x100ffef
TEST_RR_OP(umax16, x3, x25, x26, 0x00000000, 0x8000400, 0x100ffef, x7, 44, x9)

inst_28:
// rs1==x20, rs2==x13, rd==x2, rs2_h1_val == 128, rs1_h1_val == 16, rs2_h0_val == 65527
// opcode: umax16 ; op1:x20; op2:x13; dest:x2; op1val:0x10dfff;  op2val:0x80fff7
TEST_RR_OP(umax16, x2, x20, x13, 0x00000000, 0x10dfff, 0x80fff7, x7, 48, x9)

inst_29:
// rs1==x31, rs2==x17, rd==x25, rs2_h1_val == 64, rs2_h0_val == 1
// opcode: umax16 ; op1:x31; op2:x17; dest:x25; op1val:0x07ffff;  op2val:0x400001
TEST_RR_OP(umax16, x25, x31, x17, 0x00000000, 0x07ffff, 0x400001, x7, 52, x9)

inst_30:
// rs1==x6, rs2==x11, rd==x1, rs2_h1_val == 16, 
// opcode: umax16 ; op1:x6; op2:x11; dest:x1; op1val:0x03dfff;  op2val:0x10000d
TEST_RR_OP(umax16, x1, x6, x11, 0x00000000, 0x03dfff, 0x10000d, x7, 56, x9)

inst_31:
// rs1==x8, rs2==x22, rd==x0, rs2_h1_val == 8, rs1_h1_val == 16384, rs1_h0_val == 32
// opcode: umax16 ; op1:x8; op2:x22; dest:x0; op1val:0x40000020;  op2val:0x08000c
TEST_RR_OP(umax16, x0, x8, x22, 0x00000000, 0x40000020, 0x08000c, x7, 60, x9)

inst_32:
// rs2_h1_val == 4, rs1_h1_val == 0, rs2_h0_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff7;  op2val:0x040020
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x00fff7, 0x040020, x7, 64, x9)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs1_h0_val == 65534, rs2_h0_val == 65279, rs1_h1_val == 65533
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffe;  op2val:0x40feff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfffdfffe, 0x40feff, x1, 0, x2)

inst_34:
// rs1_h0_val == 16384, rs2_h0_val == 65533
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x074000;  op2val:0xfffefffd
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x074000, 0xfffefffd, x1, 4, x2)

inst_35:
// rs1_h0_val == 8192, rs2_h0_val == 32767
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd2000;  op2val:0xfdff7fff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfffd2000, 0xfdff7fff, x1, 8, x2)

inst_36:
// rs1_h0_val == 2048, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x130800;  op2val:0x800400
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x130800, 0x800400, x1, 12, x2)

inst_37:
// rs1_h0_val == 128, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x030080;  op2val:0x40fff7
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x030080, 0x40fff7, x1, 16, x2)

inst_38:
// rs1_h0_val == 64, rs1_h1_val == 8
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x080040;  op2val:0xfdff0002
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x080040, 0xfdff0002, x1, 20, x2)

inst_39:
// rs1_h0_val == 16, rs2_h0_val == 256
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x130010;  op2val:0x090100
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x130010, 0x090100, x1, 24, x2)

inst_40:
// rs1_h0_val == 4, rs1_h1_val == 8192
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004;  op2val:0x050100
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x20000004, 0x050100, x1, 28, x2)

inst_41:
// rs1_h0_val == 2, rs2_h0_val == 4, rs2_h1_val == 2
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0002;  op2val:0x020004
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x0c0002, 0x020004, x1, 32, x2)

inst_42:
// rs1_h0_val == 1, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001;  op2val:0x11feff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x100001, 0x11feff, x1, 36, x2)

inst_43:
// rs2_h1_val == 1, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000b;  op2val:0x01000d
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x02000b, 0x01000d, x1, 40, x2)

inst_44:
// rs2_h1_val == 65535, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x081000;  op2val:0xffff0001
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x081000, 0xffff0001, x1, 44, x2)

inst_45:
// rs2_h1_val == 0, rs2_h0_val == 65023
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x070020;  op2val:0x00fdff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x070020, 0x00fdff, x1, 48, x2)

inst_46:
// rs2_h0_val == 43690, rs1_h0_val == 65023
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff;  op2val:0x5555aaaa
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x09fdff, 0x5555aaaa, x1, 52, x2)

inst_47:
// rs2_h0_val == 57343, rs1_h1_val == 21845
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x55551000;  op2val:0x200dfff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x55551000, 0x200dfff, x1, 56, x2)

inst_48:
// rs2_h0_val == 63487, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe;  op2val:0x0ff7ff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x10fffe, 0x0ff7ff, x1, 60, x2)

inst_49:
// rs2_h0_val == 64511, rs1_h1_val == 65527
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70006;  op2val:0xdffffbff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfff70006, 0xdffffbff, x1, 64, x2)

inst_50:
// rs2_h0_val == 65407, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe;  op2val:0x09ff7f
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x07fffe, 0x09ff7f, x1, 68, x2)

inst_51:
// rs2_h0_val == 64, rs1_h1_val == 4
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x040011;  op2val:0x120040
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x040011, 0x120040, x1, 72, x2)

inst_52:
// rs2_h0_val == 65535, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0aefff;  op2val:0x800ffff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x0aefff, 0x800ffff, x1, 76, x2)

inst_53:
// rs2_h0_val == 0, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x110013;  op2val:0x10000000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x110013, 0x10000000, x1, 80, x2)

inst_54:
// rs1_h1_val == 32767, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffe;  op2val:0x01efff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x7ffffffe, 0x01efff, x1, 84, x2)

inst_55:
// rs1_h1_val == 57343, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0004;  op2val:0xffbfff7f
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xdfff0004, 0xffbfff7f, x1, 88, x2)

inst_56:
// rs1_h1_val == 64511, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000b;  op2val:0xfffe0012
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfbff000b, 0xfffe0012, x1, 92, x2)

inst_57:
// rs1_h1_val == 65023, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffbfff;  op2val:0x09000b
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfdffbfff, 0x09000b, x1, 96, x2)

inst_58:
// rs1_h1_val == 65407, rs2_h0_val == 65531
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0100;  op2val:0x40fffb
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xff7f0100, 0x40fffb, x1, 100, x2)

inst_59:
// rs1_h1_val == 65471, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0040;  op2val:0xff7f0006
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xffbf0040, 0xff7f0006, x1, 104, x2)

inst_60:
// rs1_h1_val == 65519, rs1_h0_val == 64511
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbff;  op2val:0x0cf7ff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xffeffbff, 0x0cf7ff, x1, 108, x2)

inst_61:
// rs1_h1_val == 65534, rs1_h0_val == 21845
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe5555;  op2val:0xfffb2000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfffe5555, 0xfffb2000, x1, 112, x2)

inst_62:
// rs1_h1_val == 32768, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fdff;  op2val:0x000012
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x8000fdff, 0x000012, x1, 116, x2)

inst_63:
// rs1_h1_val == 4096, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd;  op2val:0x20000010
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x1000fffd, 0x20000010, x1, 120, x2)

inst_64:
// rs2_h0_val == 65534, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550003;  op2val:0xfdfffffe
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x55550003, 0xfdfffffe, x1, 124, x2)

inst_65:
// rs1_h1_val == 256, rs1_h0_val == 43690
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100aaaa;  op2val:0x80000400
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x100aaaa, 0x80000400, x1, 128, x2)

inst_66:
// rs1_h1_val == 1, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x010006;  op2val:0x4000000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x010006, 0x4000000, x1, 132, x2)

inst_67:
// rs1_h1_val == 65535, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0200;  op2val:0xefff8000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xffff0200, 0xefff8000, x1, 136, x2)

inst_68:
// rs2_h0_val == 16384, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0001;  op2val:0x074000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x0a0001, 0x074000, x1, 140, x2)

inst_69:
// rs1_h0_val == 32767, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e7fff;  op2val:0xfbfffff7
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x0e7fff, 0xfbfffff7, x1, 144, x2)

inst_70:
// rs2_h0_val == 65503, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100005;  op2val:0x0effdf
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x100005, 0x0effdf, x1, 148, x2)

inst_71:
// rs1_h0_val == 63487, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff;  op2val:0x06ffdf
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfbfff7ff, 0x06ffdf, x1, 152, x2)

inst_72:
// rs1_h0_val == 65279, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff;  op2val:0x2000ffff
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x7ffffeff, 0x2000ffff, x1, 156, x2)

inst_73:
// rs1_h0_val == 65407, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x11ff7f;  op2val:0x0c000d
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x11ff7f, 0x0c000d, x1, 160, x2)

inst_74:
// rs1_h0_val == 65471, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffbf;  op2val:0xefff8000
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x40ffbf, 0xefff8000, x1, 164, x2)

inst_75:
// rs2_h0_val == 2048, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffe;  op2val:0xdfff0800
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x04fffe, 0xdfff0800, x1, 168, x2)

inst_76:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 512, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65503
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffdf;  op2val:0x030200
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x03ffdf, 0x030200, x1, 172, x2)

inst_77:
// rs2_h1_val == 43690, rs1_h1_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x200009;  op2val:0xaaaa0005
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x200009, 0xaaaa0005, x1, 176, x2)

inst_78:
// rs2_h1_val == 61439, rs1_h1_val == 49151, rs1_h0_val == 32768
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff8000;  op2val:0xefff0011
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xbfff8000, 0xefff0011, x1, 180, x2)

inst_79:
// rs2_h1_val == 65519, rs1_h1_val == 65279
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000d;  op2val:0xffef0003
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0xfeff000d, 0xffef0003, x1, 184, x2)

inst_80:
// rs2_h1_val == 8, rs1_h1_val == 16384, rs1_h0_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000020;  op2val:0x08000c
TEST_RR_OP(umax16, x31, x30, x29, 0x00000000, 0x40000020, 0x08000c, x1, 188, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
