
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcras16 instruction of the RISC-V RV32PZicsr extension for the rcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x12, rd==x13, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -9, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16
// opcode: rcras16 ; op1:x19; op2:x12; dest:x13; op1val:0xfff78000;  op2val:0x070010
TEST_RR_OP(rcras16, x13, x19, x12, 0x00000000, 0xfff78000, 0x070010, x5, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x22, rs1_h1_val == rs2_h1_val, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -1025, rs1_h1_val == -1025
// opcode: rcras16 ; op1:x25; op2:x25; dest:x22; op1val:0xfbff0003;  op2val:0xfbffc000
TEST_RR_OP(rcras16, x22, x25, x25, 0x00000000, 0xfbff0003, 0xfbffc000, x5, 4, x7)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x26, rd==x4, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -2049, rs2_h0_val == -1, rs1_h1_val == 128
// opcode: rcras16 ; op1:x4; op2:x26; dest:x4; op1val:0x800007;  op2val:0xf7ffffff
TEST_RR_OP(rcras16, x4, x4, x26, 0x00000000, 0x800007, 0xf7ffffff, x5, 8, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 4, rs2_h0_val == 32, rs1_h0_val == -9
// opcode: rcras16 ; op1:x21; op2:x21; dest:x21; op1val:0x04fff7;  op2val:0x070020
TEST_RR_OP(rcras16, x21, x21, x21, 0x00000000, 0x04fff7, 0x070020, x5, 12, x7)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x17, rd==x17, rs1_h0_val == rs2_h0_val, rs1_h0_val == 1, rs2_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -257
// opcode: rcras16 ; op1:x12; op2:x17; dest:x17; op1val:0xfeff0001;  op2val:0xc0000001
TEST_RR_OP(rcras16, x17, x12, x17, 0x00000000, 0xfeff0001, 0xc0000001, x5, 16, x7)

inst_5:
// rs1==x11, rs2==x13, rd==x31, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -1025, rs2_h0_val == -17, rs2_h1_val == 0
// opcode: rcras16 ; op1:x11; op2:x13; dest:x31; op1val:0x06fbff;  op2val:0x00ffef
TEST_RR_OP(rcras16, x31, x11, x13, 0x00000000, 0x06fbff, 0x00ffef, x5, 20, x7)

inst_6:
// rs1==x8, rs2==x31, rd==x10, rs2_h1_val == -21846, rs1_h1_val == -33, rs2_h0_val == -257, rs1_h0_val == -129
// opcode: rcras16 ; op1:x8; op2:x31; dest:x10; op1val:0xffdfff7f;  op2val:0xaaaafeff
TEST_RR_OP(rcras16, x10, x8, x31, 0x00000000, 0xffdfff7f, 0xaaaafeff, x5, 24, x7)

inst_7:
// rs1==x0, rs2==x22, rd==x29, rs2_h1_val == 21845, rs1_h0_val == -3
// opcode: rcras16 ; op1:x0; op2:x22; dest:x29; op1val:0xfff7fffd;  op2val:0x55553fff
TEST_RR_OP(rcras16, x29, x0, x22, 0x00000000, 0xfff7fffd, 0x55553fff, x5, 28, x7)

inst_8:
// rs1==x3, rs2==x0, rd==x2, rs2_h1_val == 32767, rs1_h0_val == 2048, rs2_h0_val == -65, rs1_h1_val == 21845
// opcode: rcras16 ; op1:x3; op2:x0; dest:x2; op1val:0x55550800;  op2val:0x7fffffbf
TEST_RR_OP(rcras16, x2, x3, x0, 0x00000000, 0x55550800, 0x7fffffbf, x5, 32, x7)

inst_9:
// rs1==x13, rs2==x4, rd==x9, rs2_h1_val == -16385, rs1_h1_val == -513
// opcode: rcras16 ; op1:x13; op2:x4; dest:x9; op1val:0xfdfffffd;  op2val:0xbffffffa
TEST_RR_OP(rcras16, x9, x13, x4, 0x00000000, 0xfdfffffd, 0xbffffffa, x5, 36, x7)

inst_10:
// rs1==x28, rs2==x27, rd==x0, rs2_h1_val == -8193, rs1_h0_val == -2, rs2_h0_val == -9
// opcode: rcras16 ; op1:x28; op2:x27; dest:x0; op1val:0xfffafffe;  op2val:0xdffffff7
TEST_RR_OP(rcras16, x0, x28, x27, 0x00000000, 0xfffafffe, 0xdffffff7, x5, 40, x7)

inst_11:
// rs1==x14, rs2==x1, rd==x11, rs2_h1_val == -4097, rs2_h0_val == 0
// opcode: rcras16 ; op1:x14; op2:x1; dest:x11; op1val:0xc0000006;  op2val:0xefff0000
TEST_RR_OP(rcras16, x11, x14, x1, 0x00000000, 0xc0000006, 0xefff0000, x5, 44, x7)

inst_12:
// rs1==x6, rs2==x2, rd==x30, rs2_h1_val == -513, rs2_h0_val == -513, rs1_h0_val == 32
// opcode: rcras16 ; op1:x6; op2:x2; dest:x30; op1val:0x050020;  op2val:0xfdfffdff
TEST_RR_OP(rcras16, x30, x6, x2, 0x00000000, 0x050020, 0xfdfffdff, x5, 48, x7)

inst_13:
// rs1==x10, rs2==x18, rd==x6, rs2_h1_val == -257, 
// opcode: rcras16 ; op1:x10; op2:x18; dest:x6; op1val:0xfff90003;  op2val:0xfefffff7
TEST_RR_OP(rcras16, x6, x10, x18, 0x00000000, 0xfff90003, 0xfefffff7, x5, 52, x7)

inst_14:
// rs1==x23, rs2==x15, rd==x25, rs2_h1_val == -129, rs1_h1_val == -21846, rs2_h0_val == 4096
// opcode: rcras16 ; op1:x23; op2:x15; dest:x25; op1val:0xaaaa0800;  op2val:0xff7f1000
TEST_RR_OP(rcras16, x25, x23, x15, 0x00000000, 0xaaaa0800, 0xff7f1000, x5, 56, x7)

inst_15:
// rs1==x15, rs2==x29, rd==x19, rs2_h1_val == -65, 
// opcode: rcras16 ; op1:x15; op2:x29; dest:x19; op1val:0x06fbff;  op2val:0xffbf0007
TEST_RR_OP(rcras16, x19, x15, x29, 0x00000000, 0x06fbff, 0xffbf0007, x5, 60, x10)

inst_16:
// rs1==x22, rs2==x23, rd==x3, rs2_h1_val == -33, 
// opcode: rcras16 ; op1:x22; op2:x23; dest:x3; op1val:0xfff80009;  op2val:0xffdfc000
TEST_RR_OP(rcras16, x3, x22, x23, 0x00000000, 0xfff80009, 0xffdfc000, x5, 64, x10)

inst_17:
// rs1==x18, rs2==x6, rd==x15, rs2_h1_val == -17, 
// opcode: rcras16 ; op1:x18; op2:x6; dest:x15; op1val:0xfdfffbff;  op2val:0xffeffffa
TEST_RR_OP(rcras16, x15, x18, x6, 0x00000000, 0xfdfffbff, 0xffeffffa, x5, 68, x10)

inst_18:
// rs1==x16, rs2==x24, rd==x28, rs2_h1_val == -9, rs2_h0_val == 16384
// opcode: rcras16 ; op1:x16; op2:x24; dest:x28; op1val:0x090020;  op2val:0xfff74000
TEST_RR_OP(rcras16, x28, x16, x24, 0x00000000, 0x090020, 0xfff74000, x5, 72, x10)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_19:
// rs1==x7, rs2==x16, rd==x12, rs2_h1_val == -5, rs1_h0_val == 256, rs2_h0_val == -32768
// opcode: rcras16 ; op1:x7; op2:x16; dest:x12; op1val:0x070100;  op2val:0xfffb8000
TEST_RR_OP(rcras16, x12, x7, x16, 0x00000000, 0x070100, 0xfffb8000, x4, 0, x10)

inst_20:
// rs1==x2, rs2==x8, rd==x16, rs2_h1_val == -3, rs2_h0_val == -2
// opcode: rcras16 ; op1:x2; op2:x8; dest:x16; op1val:0x55550006;  op2val:0xfffdfffe
TEST_RR_OP(rcras16, x16, x2, x8, 0x00000000, 0x55550006, 0xfffdfffe, x4, 4, x10)

inst_21:
// rs1==x9, rs2==x20, rd==x23, rs2_h1_val == -2, rs1_h1_val == 64, rs2_h0_val == 21845
// opcode: rcras16 ; op1:x9; op2:x20; dest:x23; op1val:0x400020;  op2val:0xfffe5555
TEST_RR_OP(rcras16, x23, x9, x20, 0x00000000, 0x400020, 0xfffe5555, x4, 8, x10)

inst_22:
// rs1==x29, rs2==x30, rd==x24, rs2_h1_val == -32768, rs1_h0_val == -5
// opcode: rcras16 ; op1:x29; op2:x30; dest:x24; op1val:0xfff9fffb;  op2val:0x8000ffff
TEST_RR_OP(rcras16, x24, x29, x30, 0x00000000, 0xfff9fffb, 0x8000ffff, x4, 12, x10)

inst_23:
// rs1==x31, rs2==x19, rd==x7, rs2_h1_val == 16384, rs2_h0_val == 2, rs1_h0_val == -2049
// opcode: rcras16 ; op1:x31; op2:x19; dest:x7; op1val:0xfff8f7ff;  op2val:0x40000002
TEST_RR_OP(rcras16, x7, x31, x19, 0x00000000, 0xfff8f7ff, 0x40000002, x4, 16, x10)

inst_24:
// rs1==x26, rs2==x5, rd==x18, rs2_h1_val == 8192, rs1_h0_val == 32767
// opcode: rcras16 ; op1:x26; op2:x5; dest:x18; op1val:0x407fff;  op2val:0x20000005
TEST_RR_OP(rcras16, x18, x26, x5, 0x00000000, 0x407fff, 0x20000005, x4, 20, x10)

inst_25:
// rs1==x20, rs2==x3, rd==x14, rs2_h1_val == 4096, rs1_h0_val == -16385, rs1_h1_val == -129
// opcode: rcras16 ; op1:x20; op2:x3; dest:x14; op1val:0xff7fbfff;  op2val:0x1000feff
TEST_RR_OP(rcras16, x14, x20, x3, 0x00000000, 0xff7fbfff, 0x1000feff, x4, 24, x10)

inst_26:
// rs1==x30, rs2==x11, rd==x27, rs2_h1_val == 2048, rs2_h0_val == 256
// opcode: rcras16 ; op1:x30; op2:x11; dest:x27; op1val:0xfff80800;  op2val:0x8000100
TEST_RR_OP(rcras16, x27, x30, x11, 0x00000000, 0xfff80800, 0x8000100, x4, 28, x10)

inst_27:
// rs1==x5, rs2==x9, rd==x26, rs2_h1_val == 1024, rs2_h0_val == 4
// opcode: rcras16 ; op1:x5; op2:x9; dest:x26; op1val:0xff7fc000;  op2val:0x4000004
TEST_RR_OP(rcras16, x26, x5, x9, 0x00000000, 0xff7fc000, 0x4000004, x4, 32, x10)

inst_28:
// rs1==x1, rs2==x7, rd==x20, rs2_h1_val == 512, rs1_h0_val == -8193
// opcode: rcras16 ; op1:x1; op2:x7; dest:x20; op1val:0x06dfff;  op2val:0x200fffc
TEST_RR_OP(rcras16, x20, x1, x7, 0x00000000, 0x06dfff, 0x200fffc, x4, 36, x10)

inst_29:
// rs1==x17, rs2==x28, rd==x1, rs2_h1_val == 256, rs1_h0_val == 4
// opcode: rcras16 ; op1:x17; op2:x28; dest:x1; op1val:0x070004;  op2val:0x1000001
TEST_RR_OP(rcras16, x1, x17, x28, 0x00000000, 0x070004, 0x1000001, x4, 40, x10)

inst_30:
// rs1==x27, rs2==x14, rd==x5, rs2_h1_val == 128, rs2_h0_val == -3, rs1_h0_val == -33
// opcode: rcras16 ; op1:x27; op2:x14; dest:x5; op1val:0x04ffdf;  op2val:0x80fffd
TEST_RR_OP(rcras16, x5, x27, x14, 0x00000000, 0x04ffdf, 0x80fffd, x4, 44, x1)

inst_31:
// rs1==x24, rs2==x10, rd==x8, rs2_h1_val == 64, rs1_h0_val == -257, rs2_h0_val == -33
// opcode: rcras16 ; op1:x24; op2:x10; dest:x8; op1val:0xffdffeff;  op2val:0x40ffdf
TEST_RR_OP(rcras16, x8, x24, x10, 0x00000000, 0xffdffeff, 0x40ffdf, x4, 48, x1)

inst_32:
// rs2_h1_val == 32, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x067fff;  op2val:0x20ffbf
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x067fff, 0x20ffbf, x4, 52, x1)

inst_33:
// rs2_h1_val == 16, rs1_h1_val == -16385, rs1_h0_val == 128
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0080;  op2val:0x105555
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xbfff0080, 0x105555, x4, 56, x1)

inst_34:
// rs2_h1_val == 8, rs1_h0_val == 512, rs2_h0_val == -129
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x090200;  op2val:0x08ff7f
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x090200, 0x08ff7f, x4, 60, x1)

inst_35:
// rs1_h0_val == -513, rs2_h1_val == -1, rs2_h0_val == -4097
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafdff;  op2val:0xffffefff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xaaaafdff, 0xffffefff, x4, 64, x1)

inst_36:
// rs1_h0_val == -65, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffbf;  op2val:0xdffffff9
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfffaffbf, 0xdffffff9, x4, 68, x1)

inst_37:
// rs1_h0_val == -17, rs1_h1_val == 4096, rs2_h1_val == 2
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffef;  op2val:0x02ffff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x1000ffef, 0x02ffff, x4, 72, x1)

inst_38:
// rs1_h0_val == 16384, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff4000;  op2val:0xfffcfff6
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x3fff4000, 0xfffcfff6, x4, 76, x1)

inst_39:
// rs1_h0_val == 8192, rs2_h0_val == -21846
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000;  op2val:0x400aaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xff7f2000, 0x400aaaa, x4, 80, x1)

inst_40:
// rs1_h0_val == 4096, rs1_h1_val == 2048, rs2_h0_val == 8192
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8001000;  op2val:0xffef2000
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x8001000, 0xffef2000, x4, 84, x1)

inst_41:
// rs1_h0_val == 1024, rs1_h1_val == 1024
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000400;  op2val:0xfdfffff9
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x4000400, 0xfdfffff9, x4, 88, x1)

inst_42:
// rs1_h0_val == 64, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0xf7fffffc
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x55550040, 0xf7fffffc, x4, 92, x1)

inst_43:
// rs1_h0_val == 16, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0010;  op2val:0x7fff0010
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfbff0010, 0x7fff0010, x4, 96, x1)

inst_44:
// rs1_h0_val == 8, rs2_h0_val == 1024, rs1_h1_val == -5
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008;  op2val:0xf7ff0400
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfffb0008, 0xf7ff0400, x4, 100, x1)

inst_45:
// rs1_h0_val == 2, rs1_h1_val == -3
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0002;  op2val:0xdfffffdf
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfffd0002, 0xdfffffdf, x4, 104, x1)

inst_46:
// rs1_h0_val == 0, rs2_h0_val == -16385
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xff7fbfff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x4000000, 0xff7fbfff, x4, 108, x1)

inst_47:
// rs1_h0_val == -1, rs1_h1_val == 1
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffff;  op2val:0xffbf1000
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x01ffff, 0xffbf1000, x4, 112, x1)

inst_48:
// rs2_h1_val == 4, rs1_h1_val == -2
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0006;  op2val:0x040009
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfffe0006, 0x040009, x4, 116, x1)

inst_49:
// rs2_h1_val == 1, rs1_h1_val == 32767
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff4000;  op2val:0x01c000
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x7fff4000, 0x01c000, x4, 120, x1)

inst_50:
// rs2_h0_val == -5, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x018000;  op2val:0xfefffffb
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x018000, 0xfefffffb, x4, 124, x1)

inst_51:
// rs2_h0_val == 2048, rs1_h1_val == -65
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0020;  op2val:0x020800
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xffbf0020, 0x020800, x4, 128, x1)

inst_52:
// rs2_h0_val == 512, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffff;  op2val:0xfff60200
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x80ffff, 0xfff60200, x4, 132, x1)

inst_53:
// rs2_h0_val == 128, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff7;  op2val:0xfbff0080
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xaaaafff7, 0xfbff0080, x4, 136, x1)

inst_54:
// rs2_h0_val == 64, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff97fff;  op2val:0x80000040
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfff97fff, 0x80000040, x4, 140, x1)

inst_55:
// rs2_h0_val == 8, rs1_h1_val == -4097
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0006;  op2val:0xfff80008
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xefff0006, 0xfff80008, x4, 144, x1)

inst_56:
// rs1_h1_val == 0, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x004000;  op2val:0x40000006
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x004000, 0x40000006, x4, 148, x1)

inst_57:
// rs1_h1_val == -8193, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0800;  op2val:0x800bfff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xdfff0800, 0x800bfff, x4, 152, x1)

inst_58:
// rs1_h1_val == -2049, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf;  op2val:0x400aaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xf7ffffdf, 0x400aaaa, x4, 156, x1)

inst_59:
// rs2_h0_val == -1025, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000100;  op2val:0xffeffbff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x8000100, 0xffeffbff, x4, 160, x1)

inst_60:
// rs1_h1_val == -17, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7ff;  op2val:0xdffffff7
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xffeff7ff, 0xdffffff7, x4, 164, x1)

inst_61:
// rs1_h1_val == -32768, rs1_h0_val == 21845
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80005555;  op2val:0x030800
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x80005555, 0x030800, x4, 168, x1)

inst_62:
// rs1_h1_val == 16384, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000009;  op2val:0xfefffdff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x40000009, 0xfefffdff, x4, 172, x1)

inst_63:
// rs1_h1_val == 8192, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000400;  op2val:0x55550040
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x20000400, 0x55550040, x4, 176, x1)

inst_64:
// rs1_h1_val == 512, rs1_h0_val == -21846
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200aaaa;  op2val:0xf7ff2000
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x200aaaa, 0xf7ff2000, x4, 180, x1)

inst_65:
// rs1_h1_val == 256, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100aaaa;  op2val:0x20fff6
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x100aaaa, 0x20fff6, x4, 184, x1)

inst_66:
// rs1_h1_val == 32, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffb;  op2val:0x08fff6
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x20fffb, 0x08fff6, x4, 188, x1)

inst_67:
// rs1_h1_val == 16, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x104000;  op2val:0xfffcffff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x104000, 0xfffcffff, x4, 192, x1)

inst_68:
// rs2_h0_val == 32767, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff9;  op2val:0x10007fff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x100fff9, 0x10007fff, x4, 196, x1)

inst_69:
// rs1_h1_val == 8, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffa;  op2val:0x200001
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x08fffa, 0x200001, x4, 200, x1)

inst_70:
// rs2_h0_val == -8193, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbf;  op2val:0xefffdfff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xf7ffffbf, 0xefffdfff, x4, 204, x1)

inst_71:
// rs1_h1_val == -1, rs2_h0_val == -2049
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff1000;  op2val:0x8000f7ff
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xffff1000, 0x8000f7ff, x4, 208, x1)

inst_72:
// rs1_h1_val == 2, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x022000;  op2val:0x060040
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x022000, 0x060040, x4, 212, x1)

inst_73:
// rs1_h0_val == -4097, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x02efff;  op2val:0x000200
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x02efff, 0x000200, x4, 216, x1)

inst_74:
// rs1_h1_val == rs2_h1_val, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -1025, rs1_h1_val == -1025
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003;  op2val:0xfbffc000
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfbff0003, 0xfbffc000, x4, 220, x1)

inst_75:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 4, rs2_h0_val == 32, rs1_h0_val == -9
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fff7;  op2val:0x070020
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0x04fff7, 0x070020, x4, 224, x1)

inst_76:
// rs2_h1_val == -8193, rs1_h0_val == -2, rs2_h0_val == -9
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffe;  op2val:0xdffffff7
TEST_RR_OP(rcras16, x31, x30, x29, 0x00000000, 0xfffafffe, 0xdffffff7, x4, 228, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
