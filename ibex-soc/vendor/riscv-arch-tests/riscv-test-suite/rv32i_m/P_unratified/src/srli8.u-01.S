
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli8.u instruction of the RISC-V RV32PZicsr extension for the srli8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x11, rd==x12, rs1_b0_val == 0, rs1_b2_val == 255, imm_val == 1
// opcode: srli8.u ; op1:x11; dest:x12; op1val:0x3ff0600;  immval:0x1
TEST_IMM_OP( srli8.u, x12, x11, 0x00000000, 0x3ff0600, 0x1, x1, 0, x22)

inst_1:
// rs1 == rd, rs1==x20, rd==x20, imm_val == 7, rs1_b2_val == 16, rs1_b0_val == 128
// opcode: srli8.u ; op1:x20; dest:x20; op1val:0x3101380;  immval:0x7
TEST_IMM_OP( srli8.u, x20, x20, 0x00000000, 0x3101380, 0x7, x1, 4, x22)

inst_2:
// rs1==x7, rd==x4, imm_val == 6, rs1_b2_val == 239
// opcode: srli8.u ; op1:x7; dest:x4; op1val:0x7ef0f00;  immval:0x6
TEST_IMM_OP( srli8.u, x4, x7, 0x00000000, 0x7ef0f00, 0x6, x1, 8, x22)

inst_3:
// rs1==x14, rd==x5, imm_val == 5, rs1_b1_val == 251, rs1_b0_val == 2, rs1_b2_val == 251, rs1_b3_val == 32
// opcode: srli8.u ; op1:x14; dest:x5; op1val:0x20fbfb02;  immval:0x5
TEST_IMM_OP( srli8.u, x5, x14, 0x00000000, 0x20fbfb02, 0x5, x1, 12, x22)

inst_4:
// rs1==x28, rd==x23, imm_val == 4, rs1_b0_val == 16, rs1_b3_val == 247
// opcode: srli8.u ; op1:x28; dest:x23; op1val:0xf7090510;  immval:0x4
TEST_IMM_OP( srli8.u, x23, x28, 0x00000000, 0xf7090510, 0x4, x1, 16, x22)

inst_5:
// rs1==x8, rd==x15, imm_val == 3, rs1_b3_val == 128
// opcode: srli8.u ; op1:x8; dest:x15; op1val:0x80fbfb07;  immval:0x3
TEST_IMM_OP( srli8.u, x15, x8, 0x00000000, 0x80fbfb07, 0x3, x1, 20, x22)

inst_6:
// rs1==x12, rd==x7, imm_val == 2, rs1_b3_val == 223
// opcode: srli8.u ; op1:x12; dest:x7; op1val:0xdf111280;  immval:0x2
TEST_IMM_OP( srli8.u, x7, x12, 0x00000000, 0xdf111280, 0x2, x1, 24, x22)

inst_7:
// rs1==x4, rd==x14, imm_val == 0, rs1_b2_val == 32, rs1_b0_val == 251, rs1_b1_val == 247
// opcode: srli8.u ; op1:x4; dest:x14; op1val:0x2020f7fb;  immval:0x0
TEST_IMM_OP( srli8.u, x14, x4, 0x00000000, 0x2020f7fb, 0x0, x1, 28, x22)

inst_8:
// rs1==x5, rd==x2, rs1_b3_val == 170, rs1_b0_val == 191, rs1_b2_val == 254
// opcode: srli8.u ; op1:x5; dest:x2; op1val:0xaafe0dbf;  immval:0x6
TEST_IMM_OP( srli8.u, x2, x5, 0x00000000, 0xaafe0dbf, 0x6, x1, 32, x22)

inst_9:
// rs1==x16, rd==x19, rs1_b3_val == 85, 
// opcode: srli8.u ; op1:x16; dest:x19; op1val:0x550efb0c;  immval:0x3
TEST_IMM_OP( srli8.u, x19, x16, 0x00000000, 0x550efb0c, 0x3, x1, 36, x22)

inst_10:
// rs1==x3, rd==x30, rs1_b3_val == 127, rs1_b1_val == 64
// opcode: srli8.u ; op1:x3; dest:x30; op1val:0x7f0b400a;  immval:0x4
TEST_IMM_OP( srli8.u, x30, x3, 0x00000000, 0x7f0b400a, 0x4, x1, 40, x22)

inst_11:
// rs1==x15, rd==x28, rs1_b3_val == 191, rs1_b2_val == 223, rs1_b1_val == 255
// opcode: srli8.u ; op1:x15; dest:x28; op1val:0xbfdfff0f;  immval:0x0
TEST_IMM_OP( srli8.u, x28, x15, 0x00000000, 0xbfdfff0f, 0x0, x1, 44, x22)

inst_12:
// rs1==x19, rd==x9, rs1_b3_val == 239, rs1_b1_val == 2
// opcode: srli8.u ; op1:x19; dest:x9; op1val:0xef09020d;  immval:0x6
TEST_IMM_OP( srli8.u, x9, x19, 0x00000000, 0xef09020d, 0x6, x1, 48, x22)

inst_13:
// rs1==x13, rd==x26, rs1_b3_val == 251, rs1_b1_val == 253, rs1_b2_val == 4
// opcode: srli8.u ; op1:x13; dest:x26; op1val:0xfb04fd09;  immval:0x0
TEST_IMM_OP( srli8.u, x26, x13, 0x00000000, 0xfb04fd09, 0x0, x1, 52, x22)

inst_14:
// rs1==x6, rd==x25, rs1_b3_val == 253, rs1_b1_val == 254, rs1_b2_val == 127
// opcode: srli8.u ; op1:x6; dest:x25; op1val:0xfd7ffe0d;  immval:0x6
TEST_IMM_OP( srli8.u, x25, x6, 0x00000000, 0xfd7ffe0d, 0x6, x1, 56, x22)

inst_15:
// rs1==x30, rd==x27, rs1_b3_val == 254, rs1_b2_val == 64, rs1_b1_val == 170, rs1_b0_val == 1
// opcode: srli8.u ; op1:x30; dest:x27; op1val:0xfe40aa01;  immval:0x2
TEST_IMM_OP( srli8.u, x27, x30, 0x00000000, 0xfe40aa01, 0x2, x1, 60, x22)

inst_16:
// rs1==x0, rd==x10, rs1_b3_val == 64, 
// opcode: srli8.u ; op1:x0; dest:x10; op1val:0x4006fd01;  immval:0x4
TEST_IMM_OP( srli8.u, x10, x0, 0x00000000, 0x4006fd01, 0x4, x1, 64, x22)

inst_17:
// rs1==x25, rd==x18, rs1_b3_val == 16, rs1_b0_val == 170
// opcode: srli8.u ; op1:x25; dest:x18; op1val:0x107f11aa;  immval:0x0
TEST_IMM_OP( srli8.u, x18, x25, 0x00000000, 0x107f11aa, 0x0, x1, 68, x22)

inst_18:
// rs1==x21, rd==x6, rs1_b3_val == 8, rs1_b1_val == 128
// opcode: srli8.u ; op1:x21; dest:x6; op1val:0x8048010;  immval:0x6
TEST_IMM_OP( srli8.u, x6, x21, 0x00000000, 0x8048010, 0x6, x1, 72, x22)

inst_19:
// rs1==x18, rd==x8, rs1_b3_val == 4, rs1_b0_val == 239
// opcode: srli8.u ; op1:x18; dest:x8; op1val:0x404fdef;  immval:0x3
TEST_IMM_OP( srli8.u, x8, x18, 0x00000000, 0x404fdef, 0x3, x1, 76, x22)

inst_20:
// rs1==x10, rd==x17, rs1_b3_val == 2, rs1_b2_val == 85
// opcode: srli8.u ; op1:x10; dest:x17; op1val:0x2550910;  immval:0x0
TEST_IMM_OP( srli8.u, x17, x10, 0x00000000, 0x2550910, 0x0, x1, 80, x22)

inst_21:
// rs1==x31, rd==x13, rs1_b3_val == 1, 
// opcode: srli8.u ; op1:x31; dest:x13; op1val:0x10eaabf;  immval:0x0
TEST_IMM_OP( srli8.u, x13, x31, 0x00000000, 0x10eaabf, 0x0, x1, 84, x22)

inst_22:
// rs1==x22, rd==x0, rs1_b3_val == 255, 
// opcode: srli8.u ; op1:x22; dest:x0; op1val:0xff0d0280;  immval:0x1
TEST_IMM_OP( srli8.u, x0, x22, 0x00000000, 0xff0d0280, 0x1, x1, 88, x5)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_23:
// rs1==x24, rd==x29, rs1_b3_val == 0, rs1_b2_val == 8
// opcode: srli8.u ; op1:x24; dest:x29; op1val:0x0880bf;  immval:0x1
TEST_IMM_OP( srli8.u, x29, x24, 0x00000000, 0x0880bf, 0x1, x4, 0, x5)

inst_24:
// rs1==x2, rd==x11, rs1_b1_val == 4, 
// opcode: srli8.u ; op1:x2; dest:x11; op1val:0x132004aa;  immval:0x6
TEST_IMM_OP( srli8.u, x11, x2, 0x00000000, 0x132004aa, 0x6, x4, 4, x5)

inst_25:
// rs1==x26, rd==x16, rs1_b1_val == 1, rs1_b2_val == 247
// opcode: srli8.u ; op1:x26; dest:x16; op1val:0x11f7010f;  immval:0x5
TEST_IMM_OP( srli8.u, x16, x26, 0x00000000, 0x11f7010f, 0x5, x4, 8, x5)

inst_26:
// rs1==x27, rd==x31, rs1_b1_val == 0, 
// opcode: srli8.u ; op1:x27; dest:x31; op1val:0xb4000ef;  immval:0x4
TEST_IMM_OP( srli8.u, x31, x27, 0x00000000, 0xb4000ef, 0x4, x4, 12, x5)

inst_27:
// rs1==x1, rd==x3, rs1_b0_val == 85, 
// opcode: srli8.u ; op1:x1; dest:x3; op1val:0xfb7f1255;  immval:0x6
TEST_IMM_OP( srli8.u, x3, x1, 0x00000000, 0xfb7f1255, 0x6, x4, 16, x5)

inst_28:
// rs1==x29, rd==x21, rs1_b0_val == 127, rs1_b2_val == 1
// opcode: srli8.u ; op1:x29; dest:x21; op1val:0x701077f;  immval:0x0
TEST_IMM_OP( srli8.u, x21, x29, 0x00000000, 0x701077f, 0x0, x4, 20, x5)

inst_29:
// rs1==x17, rd==x24, rs1_b0_val == 223, 
// opcode: srli8.u ; op1:x17; dest:x24; op1val:0x107f07df;  immval:0x3
TEST_IMM_OP( srli8.u, x24, x17, 0x00000000, 0x107f07df, 0x3, x4, 24, x5)

inst_30:
// rs1==x9, rd==x1, rs1_b0_val == 247, rs1_b1_val == 239
// opcode: srli8.u ; op1:x9; dest:x1; op1val:0x20deff7;  immval:0x6
TEST_IMM_OP( srli8.u, x1, x9, 0x00000000, 0x20deff7, 0x6, x4, 28, x5)

inst_31:
// rs1==x23, rd==x22, rs1_b0_val == 253, 
// opcode: srli8.u ; op1:x23; dest:x22; op1val:0x130a04fd;  immval:0x6
TEST_IMM_OP( srli8.u, x22, x23, 0x00000000, 0x130a04fd, 0x6, x4, 32, x5)

inst_32:
// rs1_b0_val == 254, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfb010dfe;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xfb010dfe, 0x1, x4, 36, x5)

inst_33:
// rs1_b0_val == 64, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x55ef0e40;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x55ef0e40, 0x6, x4, 40, x5)

inst_34:
// rs1_b0_val == 32, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x7f06ff20;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x7f06ff20, 0x7, x4, 44, x5)

inst_35:
// rs1_b0_val == 8, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x110ef708;  immval:0x0
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x110ef708, 0x0, x4, 48, x5)

inst_36:
// rs1_b2_val == 191, rs1_b1_val == 191
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x10bfbfbf;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x10bfbfbf, 0x3, x4, 52, x5)

inst_37:
// rs1_b2_val == 253, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x4fdefef;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x4fdefef, 0x3, x4, 56, x5)

inst_38:
// rs1_b2_val == 128, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xf780fd07;  immval:0x4
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xf780fd07, 0x4, x4, 60, x5)

inst_39:
// rs1_b2_val == 2, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x902030d;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x902030d, 0x3, x4, 64, x5)

inst_40:
// rs1_b2_val == 0, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xb00fd55;  immval:0x0
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xb00fd55, 0x0, x4, 68, x5)

inst_41:
// rs1_b1_val == 85, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xdf555505;  immval:0x5
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xdf555505, 0x5, x4, 72, x5)

inst_42:
// rs1_b1_val == 127, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfd047f08;  immval:0x2
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xfd047f08, 0x2, x4, 76, x5)

inst_43:
// rs1_b2_val == 170, rs1_b1_val == 223
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xeaadffb;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xeaadffb, 0x1, x4, 80, x5)

inst_44:
// rs1_b0_val == 4, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xe80fd04;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xe80fd04, 0x6, x4, 84, x5)

inst_45:
// rs1_b1_val == 8, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xe06080f;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xe06080f, 0x1, x4, 88, x5)

inst_46:
// rs1_b1_val == 32, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x7f0c20aa;  immval:0x2
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x7f0c20aa, 0x2, x4, 92, x5)

inst_47:
// rs1_b1_val == 16, rs1_b0_val == 255
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfedf10ff;  immval:0x5
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xfedf10ff, 0x5, x4, 96, x5)

inst_48:
// rs1_b3_val == 64, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x4006fd01;  immval:0x4
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0x4006fd01, 0x4, x4, 100, x5)

inst_49:
// rs1_b3_val == 255, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xff0d0280;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x00000000, 0xff0d0280, 0x1, x4, 104, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 27*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
