
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd831 instruction of the RISC-V RV32PZicsr extension for the zunpkd831 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd831)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x12, rd==x5, rs1_b0_val == 0, 
// opcode: zunpkd831 ; op1:x12; dest:x5; op1val:0x60f0700;
TEST_RD_OP( zunpkd831, x5, x12, 0x00000000, 0x60f0700, x1, 0, x8)

inst_1:
// rs1==x20, rd==x24, rs1_b3_val == 170, rs1_b1_val == 251
// opcode: zunpkd831 ; op1:x20; dest:x24; op1val:0xaa0bfb0e;
TEST_RD_OP( zunpkd831, x24, x20, 0x00000000, 0xaa0bfb0e, x1, 4, x8)

inst_2:
// rs1==x15, rd==x30, rs1_b3_val == 85, rs1_b1_val == 128
// opcode: zunpkd831 ; op1:x15; dest:x30; op1val:0x55078011;
TEST_RD_OP( zunpkd831, x30, x15, 0x00000000, 0x55078011, x1, 8, x8)

inst_3:
// rs1==x19, rd==x25, rs1_b3_val == 127, rs1_b1_val == 127
// opcode: zunpkd831 ; op1:x19; dest:x25; op1val:0x7f077f12;
TEST_RD_OP( zunpkd831, x25, x19, 0x00000000, 0x7f077f12, x1, 12, x8)

inst_4:
// rs1==x7, rd==x3, rs1_b3_val == 191, rs1_b2_val == 32, rs1_b0_val == 4
// opcode: zunpkd831 ; op1:x7; dest:x3; op1val:0xbf200704;
TEST_RD_OP( zunpkd831, x3, x7, 0x00000000, 0xbf200704, x1, 16, x8)

inst_5:
// rs1==x18, rd==x9, rs1_b3_val == 223, rs1_b0_val == 127
// opcode: zunpkd831 ; op1:x18; dest:x9; op1val:0xdf20137f;
TEST_RD_OP( zunpkd831, x9, x18, 0x00000000, 0xdf20137f, x1, 20, x8)

inst_6:
// rs1==x26, rd==x13, rs1_b3_val == 239, rs1_b2_val == 4
// opcode: zunpkd831 ; op1:x26; dest:x13; op1val:0xef040c04;
TEST_RD_OP( zunpkd831, x13, x26, 0x00000000, 0xef040c04, x1, 24, x8)

inst_7:
// rs1==x9, rd==x6, rs1_b3_val == 247, 
// opcode: zunpkd831 ; op1:x9; dest:x6; op1val:0xf70bfb07;
TEST_RD_OP( zunpkd831, x6, x9, 0x00000000, 0xf70bfb07, x1, 28, x8)

inst_8:
// rs1==x29, rd==x18, rs1_b3_val == 251, rs1_b0_val == 247, rs1_b1_val == 239
// opcode: zunpkd831 ; op1:x29; dest:x18; op1val:0xfb0deff7;
TEST_RD_OP( zunpkd831, x18, x29, 0x00000000, 0xfb0deff7, x1, 32, x8)

inst_9:
// rs1==x31, rd==x14, rs1_b3_val == 253, 
// opcode: zunpkd831 ; op1:x31; dest:x14; op1val:0xfd06137f;
TEST_RD_OP( zunpkd831, x14, x31, 0x00000000, 0xfd06137f, x1, 36, x8)

inst_10:
// rs1==x28, rd==x16, rs1_b3_val == 254, rs1_b1_val == 32, rs1_b2_val == 2, rs1_b0_val == 85
// opcode: zunpkd831 ; op1:x28; dest:x16; op1val:0xfe022055;
TEST_RD_OP( zunpkd831, x16, x28, 0x00000000, 0xfe022055, x1, 40, x8)

inst_11:
// rs1==x27, rd==x21, rs1_b3_val == 128, rs1_b0_val == 170, rs1_b2_val == 128
// opcode: zunpkd831 ; op1:x27; dest:x21; op1val:0x808005aa;
TEST_RD_OP( zunpkd831, x21, x27, 0x00000000, 0x808005aa, x1, 44, x8)

inst_12:
// rs1==x6, rd==x29, rs1_b3_val == 64, rs1_b0_val == 1
// opcode: zunpkd831 ; op1:x6; dest:x29; op1val:0x40031301;
TEST_RD_OP( zunpkd831, x29, x6, 0x00000000, 0x40031301, x1, 48, x8)

inst_13:
// rs1==x4, rd==x2, rs1_b3_val == 32, rs1_b1_val == 254
// opcode: zunpkd831 ; op1:x4; dest:x2; op1val:0x200efe11;
TEST_RD_OP( zunpkd831, x2, x4, 0x00000000, 0x200efe11, x1, 52, x8)

inst_14:
// rs1==x11, rd==x20, rs1_b3_val == 16, rs1_b2_val == 0, rs1_b1_val == 253
// opcode: zunpkd831 ; op1:x11; dest:x20; op1val:0x1000fd0f;
TEST_RD_OP( zunpkd831, x20, x11, 0x00000000, 0x1000fd0f, x1, 56, x8)

inst_15:
// rs1==x16, rd==x10, rs1_b3_val == 8, rs1_b0_val == 223
// opcode: zunpkd831 ; op1:x16; dest:x10; op1val:0x8057fdf;
TEST_RD_OP( zunpkd831, x10, x16, 0x00000000, 0x8057fdf, x1, 60, x8)

inst_16:
// rs1==x14, rd==x31, rs1_b3_val == 4, rs1_b2_val == 255
// opcode: zunpkd831 ; op1:x14; dest:x31; op1val:0x4ff7faa;
TEST_RD_OP( zunpkd831, x31, x14, 0x00000000, 0x4ff7faa, x1, 64, x8)

inst_17:
// rs1==x0, rd==x22, rs1_b3_val == 2, rs1_b1_val == 1, rs1_b2_val == 170
// opcode: zunpkd831 ; op1:x0; dest:x22; op1val:0x2aa010a;
TEST_RD_OP( zunpkd831, x22, x0, 0x00000000, 0x2aa010a, x1, 68, x8)

inst_18:
// rs1==x13, rd==x19, rs1_b3_val == 1, 
// opcode: zunpkd831 ; op1:x13; dest:x19; op1val:0x1aa7f05;
TEST_RD_OP( zunpkd831, x19, x13, 0x00000000, 0x1aa7f05, x1, 72, x9)

inst_19:
// rs1==x22, rd==x8, rs1_b3_val == 255, rs1_b0_val == 8
// opcode: zunpkd831 ; op1:x22; dest:x8; op1val:0xff03ef08;
TEST_RD_OP( zunpkd831, x8, x22, 0x00000000, 0xff03ef08, x1, 76, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_20:
// rs1==x25, rd==x12, rs1_b3_val == 0, rs1_b1_val == 0, rs1_b2_val == 253, rs1_b0_val == 254
// opcode: zunpkd831 ; op1:x25; dest:x12; op1val:0xfd00fe;
TEST_RD_OP( zunpkd831, x12, x25, 0x00000000, 0xfd00fe, x6, 0, x9)

inst_21:
// rs1==x5, rd==x15, rs1_b2_val == 85, rs1_b1_val == 247
// opcode: zunpkd831 ; op1:x5; dest:x15; op1val:0xdf55f77f;
TEST_RD_OP( zunpkd831, x15, x5, 0x00000000, 0xdf55f77f, x6, 4, x9)

inst_22:
// rs1==x21, rd==x26, rs1_b2_val == 127, rs1_b1_val == 4
// opcode: zunpkd831 ; op1:x21; dest:x26; op1val:0x557f04aa;
TEST_RD_OP( zunpkd831, x26, x21, 0x00000000, 0x557f04aa, x6, 8, x9)

inst_23:
// rs1==x30, rd==x7, rs1_b0_val == 191, 
// opcode: zunpkd831 ; op1:x30; dest:x7; op1val:0xc0ff7bf;
TEST_RD_OP( zunpkd831, x7, x30, 0x00000000, 0xc0ff7bf, x6, 12, x9)

inst_24:
// rs1==x1, rd==x11, rs1_b0_val == 239, rs1_b2_val == 247, rs1_b1_val == 191
// opcode: zunpkd831 ; op1:x1; dest:x11; op1val:0xf7f7bfef;
TEST_RD_OP( zunpkd831, x11, x1, 0x00000000, 0xf7f7bfef, x6, 16, x9)

inst_25:
// rs1==x10, rd==x17, rs1_b0_val == 251, rs1_b1_val == 8
// opcode: zunpkd831 ; op1:x10; dest:x17; op1val:0x18008fb;
TEST_RD_OP( zunpkd831, x17, x10, 0x00000000, 0x18008fb, x6, 20, x9)

inst_26:
// rs1==x24, rd==x27, rs1_b0_val == 253, rs1_b2_val == 1
// opcode: zunpkd831 ; op1:x24; dest:x27; op1val:0x10100fd;
TEST_RD_OP( zunpkd831, x27, x24, 0x00000000, 0x10100fd, x6, 24, x9)

inst_27:
// rs1==x17, rd==x28, rs1_b0_val == 128, 
// opcode: zunpkd831 ; op1:x17; dest:x28; op1val:0x7f801180;
TEST_RD_OP( zunpkd831, x28, x17, 0x00000000, 0x7f801180, x6, 28, x9)

inst_28:
// rs1==x2, rd==x4, rs1_b0_val == 64, 
// opcode: zunpkd831 ; op1:x2; dest:x4; op1val:0xa090e40;
TEST_RD_OP( zunpkd831, x4, x2, 0x00000000, 0xa090e40, x6, 32, x9)

inst_29:
// rs1==x23, rd==x0, rs1_b0_val == 32, 
// opcode: zunpkd831 ; op1:x23; dest:x0; op1val:0x400d0720;
TEST_RD_OP( zunpkd831, x0, x23, 0x00000000, 0x400d0720, x6, 36, x9)

inst_30:
// rs1==x8, rd==x23, rs1_b0_val == 16, 
// opcode: zunpkd831 ; op1:x8; dest:x23; op1val:0xc550f10;
TEST_RD_OP( zunpkd831, x23, x8, 0x00000000, 0xc550f10, x6, 40, x9)

inst_31:
// rs1==x3, rd==x1, rs1_b0_val == 2, 
// opcode: zunpkd831 ; op1:x3; dest:x1; op1val:0xfb550302;
TEST_RD_OP( zunpkd831, x1, x3, 0x00000000, 0xfb550302, x6, 44, x9)

inst_32:
// rs1_b0_val == 255, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x1155f7ff;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x1155f7ff, x6, 48, x9)

inst_33:
// rs1_b2_val == 64, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xb400b08;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xb400b08, x6, 52, x9)

inst_34:
// rs1_b2_val == 16, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x801006fd;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x801006fd, x6, 56, x9)

inst_35:
// rs1_b2_val == 8, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfb080980;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xfb080980, x6, 60, x9)

inst_36:
// rs1_b1_val == 170, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x106aa11;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x106aa11, x6, 64, x9)

inst_37:
// rs1_b1_val == 85, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x4aa5503;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x4aa5503, x6, 68, x9)

inst_38:
// rs1_b1_val == 223, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xdf0cdf05;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xdf0cdf05, x6, 72, x9)

inst_39:
// rs1_b1_val == 64, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xd0640aa;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xd0640aa, x6, 76, x9)

inst_40:
// rs1_b1_val == 16, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfb0e1005;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xfb0e1005, x6, 80, x9)

inst_41:
// rs1_b2_val == 191, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xdfbf0c80;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xdfbf0c80, x6, 84, x9)

inst_42:
// rs1_b2_val == 223, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x40df7ffb;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x40df7ffb, x6, 88, x9)

inst_43:
// rs1_b1_val == 2, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfb0702fd;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xfb0702fd, x6, 92, x9)

inst_44:
// rs1_b2_val == 239, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x40ef0301;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x40ef0301, x6, 96, x9)

inst_45:
// rs1_b1_val == 255, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x905ff0e;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x905ff0e, x6, 100, x9)

inst_46:
// rs1_b2_val == 251, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xaafb0840;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xaafb0840, x6, 104, x9)

inst_47:
// rs1_b2_val == 254, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xefe08fb;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0xefe08fb, x6, 108, x9)

inst_48:
// rs1_b3_val == 2, rs1_b1_val == 1, rs1_b2_val == 170
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x2aa010a;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x2aa010a, x6, 112, x9)

inst_49:
// rs1_b0_val == 32, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x400d0720;
TEST_RD_OP( zunpkd831, x31, x30, 0x00000000, 0x400d0720, x6, 116, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 30*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
