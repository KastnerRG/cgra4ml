
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli16 instruction of the RISC-V RV32PZicsr extension for the srli16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rd, rs1==x21, rd==x15, rs1_h0_val == 0, rs1_h1_val == 65023, imm_val == 14
// opcode: srli16 ; op1:x21; dest:x15; op1val:0xfdff0000;  immval:0xe
TEST_IMM_OP( srli16, x15, x21, 0x00000000, 0xfdff0000, 0xe, x2, 0, x13)

inst_1:
// rs1 == rd, rs1==x1, rd==x1, imm_val == 15, 
// opcode: srli16 ; op1:x1; dest:x1; op1val:0x0a0005;  immval:0xf
TEST_IMM_OP( srli16, x1, x1, 0x00000000, 0x0a0005, 0xf, x2, 4, x13)

inst_2:
// rs1==x24, rd==x20, imm_val == 13, rs1_h1_val == 1024, rs1_h0_val == 512
// opcode: srli16 ; op1:x24; dest:x20; op1val:0x4000200;  immval:0xd
TEST_IMM_OP( srli16, x20, x24, 0x00000000, 0x4000200, 0xd, x2, 8, x13)

inst_3:
// rs1==x10, rd==x4, imm_val == 12, rs1_h0_val == 2, rs1_h1_val == 57343
// opcode: srli16 ; op1:x10; dest:x4; op1val:0xdfff0002;  immval:0xc
TEST_IMM_OP( srli16, x4, x10, 0x00000000, 0xdfff0002, 0xc, x2, 12, x13)

inst_4:
// rs1==x31, rd==x27, imm_val == 11, rs1_h0_val == 8, rs1_h1_val == 16384
// opcode: srli16 ; op1:x31; dest:x27; op1val:0x40000008;  immval:0xb
TEST_IMM_OP( srli16, x27, x31, 0x00000000, 0x40000008, 0xb, x2, 16, x13)

inst_5:
// rs1==x0, rd==x21, imm_val == 10, rs1_h0_val == 65534
// opcode: srli16 ; op1:x0; dest:x21; op1val:0x03fffe;  immval:0xa
TEST_IMM_OP( srli16, x21, x0, 0x00000000, 0x03fffe, 0xa, x2, 20, x13)

inst_6:
// rs1==x5, rd==x14, imm_val == 9, rs1_h0_val == 65023, rs1_h1_val == 63487
// opcode: srli16 ; op1:x5; dest:x14; op1val:0xf7fffdff;  immval:0x9
TEST_IMM_OP( srli16, x14, x5, 0x00000000, 0xf7fffdff, 0x9, x2, 24, x13)

inst_7:
// rs1==x12, rd==x11, imm_val == 8, rs1_h0_val == 16, rs1_h1_val == 32768
// opcode: srli16 ; op1:x12; dest:x11; op1val:0x80000010;  immval:0x8
TEST_IMM_OP( srli16, x11, x12, 0x00000000, 0x80000010, 0x8, x2, 28, x13)

inst_8:
// rs1==x23, rd==x22, imm_val == 7, rs1_h1_val == 64, rs1_h0_val == 65531
// opcode: srli16 ; op1:x23; dest:x22; op1val:0x40fffb;  immval:0x7
TEST_IMM_OP( srli16, x22, x23, 0x00000000, 0x40fffb, 0x7, x2, 32, x13)

inst_9:
// rs1==x20, rd==x24, imm_val == 6, rs1_h0_val == 65519
// opcode: srli16 ; op1:x20; dest:x24; op1val:0x400ffef;  immval:0x6
TEST_IMM_OP( srli16, x24, x20, 0x00000000, 0x400ffef, 0x6, x2, 36, x13)

inst_10:
// rs1==x27, rd==x26, imm_val == 5, rs1_h1_val == 32
// opcode: srli16 ; op1:x27; dest:x26; op1val:0x20ffef;  immval:0x5
TEST_IMM_OP( srli16, x26, x27, 0x00000000, 0x20ffef, 0x5, x2, 40, x13)

inst_11:
// rs1==x26, rd==x23, imm_val == 4, rs1_h1_val == 65407, rs1_h0_val == 32767
// opcode: srli16 ; op1:x26; dest:x23; op1val:0xff7f7fff;  immval:0x4
TEST_IMM_OP( srli16, x23, x26, 0x00000000, 0xff7f7fff, 0x4, x2, 44, x13)

inst_12:
// rs1==x7, rd==x28, imm_val == 3, rs1_h0_val == 63487, rs1_h1_val == 4096
// opcode: srli16 ; op1:x7; dest:x28; op1val:0x1000f7ff;  immval:0x3
TEST_IMM_OP( srli16, x28, x7, 0x00000000, 0x1000f7ff, 0x3, x2, 48, x13)

inst_13:
// rs1==x18, rd==x30, imm_val == 2, rs1_h1_val == 43690
// opcode: srli16 ; op1:x18; dest:x30; op1val:0xaaaa0003;  immval:0x2
TEST_IMM_OP( srli16, x30, x18, 0x00000000, 0xaaaa0003, 0x2, x2, 52, x13)

inst_14:
// rs1==x9, rd==x0, imm_val == 1, rs1_h0_val == 65535
// opcode: srli16 ; op1:x9; dest:x0; op1val:0x06ffff;  immval:0x1
TEST_IMM_OP( srli16, x0, x9, 0x00000000, 0x06ffff, 0x1, x2, 56, x13)

inst_15:
// rs1==x3, rd==x10, imm_val == 0, rs1_h1_val == 256, rs1_h0_val == 32768
// opcode: srli16 ; op1:x3; dest:x10; op1val:0x1008000;  immval:0x0
TEST_IMM_OP( srli16, x10, x3, 0x00000000, 0x1008000, 0x0, x2, 60, x13)

inst_16:
// rs1==x30, rd==x8, rs1_h1_val == 21845, 
// opcode: srli16 ; op1:x30; dest:x8; op1val:0x55550012;  immval:0xf
TEST_IMM_OP( srli16, x8, x30, 0x00000000, 0x55550012, 0xf, x2, 64, x13)

inst_17:
// rs1==x8, rd==x16, rs1_h1_val == 32767, rs1_h0_val == 65471
// opcode: srli16 ; op1:x8; dest:x16; op1val:0x7fffffbf;  immval:0x2
TEST_IMM_OP( srli16, x16, x8, 0x00000000, 0x7fffffbf, 0x2, x2, 68, x13)

inst_18:
// rs1==x11, rd==x6, rs1_h1_val == 49151, rs1_h0_val == 1024
// opcode: srli16 ; op1:x11; dest:x6; op1val:0xbfff0400;  immval:0x2
TEST_IMM_OP( srli16, x6, x11, 0x00000000, 0xbfff0400, 0x2, x2, 72, x13)

inst_19:
// rs1==x17, rd==x25, rs1_h1_val == 61439, rs1_h0_val == 4096
// opcode: srli16 ; op1:x17; dest:x25; op1val:0xefff1000;  immval:0xa
TEST_IMM_OP( srli16, x25, x17, 0x00000000, 0xefff1000, 0xa, x2, 76, x13)

inst_20:
// rs1==x16, rd==x18, rs1_h1_val == 64511, rs1_h0_val == 49151
// opcode: srli16 ; op1:x16; dest:x18; op1val:0xfbffbfff;  immval:0x9
TEST_IMM_OP( srli16, x18, x16, 0x00000000, 0xfbffbfff, 0x9, x2, 80, x8)

inst_21:
// rs1==x6, rd==x3, rs1_h1_val == 65279, 
// opcode: srli16 ; op1:x6; dest:x3; op1val:0xfeffbfff;  immval:0x4
TEST_IMM_OP( srli16, x3, x6, 0x00000000, 0xfeffbfff, 0x4, x2, 84, x8)

inst_22:
// rs1==x4, rd==x12, rs1_h1_val == 65471, 
// opcode: srli16 ; op1:x4; dest:x12; op1val:0xffbfffff;  immval:0xf
TEST_IMM_OP( srli16, x12, x4, 0x00000000, 0xffbfffff, 0xf, x2, 88, x8)

inst_23:
// rs1==x22, rd==x17, rs1_h1_val == 65503, 
// opcode: srli16 ; op1:x22; dest:x17; op1val:0xffdf0010;  immval:0x3
TEST_IMM_OP( srli16, x17, x22, 0x00000000, 0xffdf0010, 0x3, x2, 92, x8)

inst_24:
// rs1==x19, rd==x7, rs1_h1_val == 65519, 
// opcode: srli16 ; op1:x19; dest:x7; op1val:0xffef0012;  immval:0x4
TEST_IMM_OP( srli16, x7, x19, 0x00000000, 0xffef0012, 0x4, x2, 96, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_25:
// rs1==x29, rd==x5, rs1_h1_val == 65527, 
// opcode: srli16 ; op1:x29; dest:x5; op1val:0xfff7000b;  immval:0x7
TEST_IMM_OP( srli16, x5, x29, 0x00000000, 0xfff7000b, 0x7, x1, 0, x8)

inst_26:
// rs1==x14, rd==x13, rs1_h1_val == 65531, rs1_h0_val == 21845
// opcode: srli16 ; op1:x14; dest:x13; op1val:0xfffb5555;  immval:0x2
TEST_IMM_OP( srli16, x13, x14, 0x00000000, 0xfffb5555, 0x2, x1, 4, x8)

inst_27:
// rs1==x15, rd==x31, rs1_h1_val == 65533, 
// opcode: srli16 ; op1:x15; dest:x31; op1val:0xfffd0011;  immval:0xf
TEST_IMM_OP( srli16, x31, x15, 0x00000000, 0xfffd0011, 0xf, x1, 8, x8)

inst_28:
// rs1==x25, rd==x9, rs1_h0_val == 65503, 
// opcode: srli16 ; op1:x25; dest:x9; op1val:0xfdffffdf;  immval:0x1
TEST_IMM_OP( srli16, x9, x25, 0x00000000, 0xfdffffdf, 0x1, x1, 12, x8)

inst_29:
// rs1==x28, rd==x2, rs1_h0_val == 65527, rs1_h1_val == 2048
// opcode: srli16 ; op1:x28; dest:x2; op1val:0x800fff7;  immval:0x3
TEST_IMM_OP( srli16, x2, x28, 0x00000000, 0x800fff7, 0x3, x1, 16, x8)

inst_30:
// rs1==x13, rd==x19, rs1_h0_val == 65533, 
// opcode: srli16 ; op1:x13; dest:x19; op1val:0xaaaafffd;  immval:0xf
TEST_IMM_OP( srli16, x19, x13, 0x00000000, 0xaaaafffd, 0xf, x1, 20, x8)

inst_31:
// rs1==x2, rd==x29, rs1_h0_val == 16384, 
// opcode: srli16 ; op1:x2; dest:x29; op1val:0x40004000;  immval:0x6
TEST_IMM_OP( srli16, x29, x2, 0x00000000, 0x40004000, 0x6, x1, 24, x8)

inst_32:
// rs1_h0_val == 8192, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x032000;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x032000, 0xa, x1, 28, x8)

inst_33:
// rs1_h0_val == 2048, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x050800;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x050800, 0x9, x1, 32, x8)

inst_34:
// rs1_h0_val == 256, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x10000100;  immval:0x3
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x10000100, 0x3, x1, 36, x8)

inst_35:
// rs1_h0_val == 128, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfffd0080;  immval:0x4
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xfffd0080, 0x4, x1, 40, x8)

inst_36:
// rs1_h0_val == 64, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x130040;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x130040, 0x7, x1, 44, x8)

inst_37:
// rs1_h0_val == 32, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xffef0020;  immval:0x4
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xffef0020, 0x4, x1, 48, x8)

inst_38:
// rs1_h0_val == 4, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xf7ff0004;  immval:0x6
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xf7ff0004, 0x6, x1, 52, x8)

inst_39:
// rs1_h0_val == 1, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x110001;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x110001, 0xe, x1, 56, x8)

inst_40:
// rs1_h1_val == 65534, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfffe0002;  immval:0xd
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xfffe0002, 0xd, x1, 60, x8)

inst_41:
// rs1_h1_val == 8192, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x20000020;  immval:0xd
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x20000020, 0xd, x1, 64, x8)

inst_42:
// rs1_h1_val == 512, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x2000011;  immval:0x5
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x2000011, 0x5, x1, 68, x8)

inst_43:
// rs1_h1_val == 128, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x805555;  immval:0x3
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x805555, 0x3, x1, 72, x8)

inst_44:
// rs1_h1_val == 16, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x100100;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x100100, 0xa, x1, 76, x8)

inst_45:
// rs1_h1_val == 8, rs1_h0_val == 65279
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x08feff;  immval:0x6
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x08feff, 0x6, x1, 80, x8)

inst_46:
// rs1_h1_val == 4, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x04ffbf;  immval:0xf
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x04ffbf, 0xf, x1, 84, x8)

inst_47:
// rs1_h1_val == 2, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x02ffdf;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x02ffdf, 0x2, x1, 88, x8)

inst_48:
// rs1_h1_val == 1, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x010400;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x010400, 0xe, x1, 92, x8)

inst_49:
// rs1_h1_val == 65535, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xffff0008;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xffff0008, 0xa, x1, 96, x8)

inst_50:
// rs1_h1_val == 0, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x000010;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x000010, 0x2, x1, 100, x8)

inst_51:
// rs1_h0_val == 43690, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x8000aaaa;  immval:0x1
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x8000aaaa, 0x1, x1, 104, x8)

inst_52:
// rs1_h0_val == 57343, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x400dfff;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x400dfff, 0xc, x1, 108, x8)

inst_53:
// rs1_h0_val == 61439, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x09efff;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x09efff, 0xc, x1, 112, x8)

inst_54:
// rs1_h0_val == 64511, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x0bfbff;  immval:0x1
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x0bfbff, 0x1, x1, 116, x8)

inst_55:
// rs1_h0_val == 65407, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xefffff7f;  immval:0x3
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0xefffff7f, 0x3, x1, 120, x8)

inst_56:
// imm_val == 10, rs1_h0_val == 65534
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x03fffe;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x00000000, 0x03fffe, 0xa, x1, 124, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
