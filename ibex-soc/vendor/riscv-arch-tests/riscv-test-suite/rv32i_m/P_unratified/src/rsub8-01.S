
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsub8 instruction of the RISC-V RV32PZicsr extension for the rsub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x27, rd==x0, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs2_b1_val == 85, rs2_b0_val == 16, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val == 16, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val == rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b3_val == -65
// opcode: rsub8 ; op1:x23; op2:x27; dest:x0; op1val:0xfa105580;  op2val:0xbffc5510
TEST_RR_OP(rsub8, x0, x23, x27, 0x00000000, 0xfa105580, 0xbffc5510, x1, 0, x14)

inst_1:// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x17, rs1_b3_val == rs2_b3_val, rs1_b1_val == 1, rs2_b0_val == 4, rs2_b3_val == 0, rs2_b1_val == 1, rs1_b3_val == 0, rs1_b2_val == 85
// opcode: rsub8 ; op1:x11; op2:x11; dest:x17; op1val:0x5501f9;  op2val:0xf60104
TEST_RR_OP(rsub8, x17, x11, x11, 0x00000000, 0x5501f9, 0xf60104, x1, 4, x14)

inst_2:// rs1 == rd != rs2, rs1==x2, rs2==x29, rd==x2, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b1_val == 2, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b1_val == -3, rs1_b1_val != rs2_b1_val, rs1_b0_val == -2, rs1_b3_val == -5, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b2_val == 4
// opcode: rsub8 ; op1:x2; op2:x29; dest:x2; op1val:0xfbc002fe;  op2val:0x304fdf9
TEST_RR_OP(rsub8, x2, x2, x29, 0x00000000, 0xfbc002fe, 0x304fdf9, x1, 8, x14)

inst_3:// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b1_val == -86, rs2_b2_val == -86, rs1_b0_val == -3, rs1_b3_val == 16, rs2_b0_val == -2, rs1_b1_val == 8
// opcode: rsub8 ; op1:x5; op2:x5; dest:x5; op1val:0x100708fd;  op2val:0xbfaaaafe
TEST_RR_OP(rsub8, x5, x5, x5, 0x00000000, 0x100708fd, 0xbfaaaafe, x1, 12, x14)

inst_4:// rs2 == rd != rs1, rs1==x20, rs2==x12, rd==x12, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == -1, rs2_b1_val == -65, rs1_b0_val == 85, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == -3, rs1_b3_val == 4, rs1_b2_val == 127
// opcode: rsub8 ; op1:x20; op2:x12; dest:x12; op1val:0x47ffd55;  op2val:0x7ffbf09
TEST_RR_OP(rsub8, x12, x20, x12, 0x00000000, 0x47ffd55, 0x7ffbf09, x1, 16, x14)

inst_5:// rs1==x15, rs2==x17, rd==x19, rs1_b2_val == rs2_b2_val, rs2_b3_val == -5, rs1_b2_val == -128, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b0_val == rs2_b0_val, rs2_b1_val == -1, rs1_b1_val == -17, rs2_b2_val == -128
// opcode: rsub8 ; op1:x15; op2:x17; dest:x19; op1val:0xfa80eff8;  op2val:0xfb80fff8
TEST_RR_OP(rsub8, x19, x15, x17, 0x00000000, 0xfa80eff8, 0xfb80fff8, x1, 20, x14)

inst_6:// rs1==x0, rs2==x9, rd==x18, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b0_val == -33, rs1_b3_val == -33
// opcode: rsub8 ; op1:x0; op2:x9; dest:x18; op1val:0xdf0955f8;  op2val:0x909fadf
TEST_RR_OP(rsub8, x18, x0, x9, 0x00000000, 0xdf0955f8, 0x909fadf, x1, 24, x14)

inst_7:// rs1==x24, rs2==x26, rd==x3, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b3_val == -128, rs2_b1_val == 16, rs1_b1_val == -33, rs1_b3_val == 32, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b0_val == 1
// opcode: rsub8 ; op1:x24; op2:x26; dest:x3; op1val:0x2005df01;  op2val:0x80f910fc
TEST_RR_OP(rsub8, x3, x24, x26, 0x00000000, 0x2005df01, 0x80f910fc, x1, 28, x14)

inst_8:// rs1==x13, rs2==x25, rd==x8, rs2_b3_val == -86, rs1_b0_val == 16, rs2_b2_val == 8, rs2_b1_val == -33, rs2_b0_val == -128
// opcode: rsub8 ; op1:x13; op2:x25; dest:x8; op1val:0x4075510;  op2val:0xaa08df80
TEST_RR_OP(rsub8, x8, x13, x25, 0x00000000, 0x4075510, 0xaa08df80, x1, 32, x14)

inst_9:// rs1==x18, rs2==x30, rd==x24, rs2_b3_val == 85, rs2_b1_val == -2, rs1_b3_val == -65, rs1_b2_val == 0, rs1_b0_val == 2, rs2_b2_val == 32, rs1_b1_val == -128
// opcode: rsub8 ; op1:x18; op2:x30; dest:x24; op1val:0xbf008002;  op2val:0x5520fefa
TEST_RR_OP(rsub8, x24, x18, x30, 0x00000000, 0xbf008002, 0x5520fefa, x1, 36, x14)

inst_10:// rs1==x10, rs2==x21, rd==x26, rs2_b3_val == 127, rs1_b3_val == 2, rs1_b0_val == -17, rs2_b1_val == -128, rs1_b2_val == -3
// opcode: rsub8 ; op1:x10; op2:x21; dest:x26; op1val:0x2fd80ef;  op2val:0x7ff98006
TEST_RR_OP(rsub8, x26, x10, x21, 0x00000000, 0x2fd80ef, 0x7ff98006, x1, 40, x14)

inst_11:// rs1==x29, rs2==x6, rd==x15, rs2_b3_val == -33, rs1_b2_val == -65, rs1_b1_val == -1, rs1_b0_val == -86, rs2_b2_val == -65, rs1_b3_val == -128
// opcode: rsub8 ; op1:x29; op2:x6; dest:x15; op1val:0x80bfffaa;  op2val:0xdfbffa03
TEST_RR_OP(rsub8, x15, x29, x6, 0x00000000, 0x80bfffaa, 0xdfbffa03, x1, 44, x14)

inst_12:// rs1==x30, rs2==x4, rd==x23, rs2_b3_val == -17, rs1_b2_val == -1
// opcode: rsub8 ; op1:x30; op2:x4; dest:x23; op1val:0x10ffdf05;  op2val:0xefffbf06
TEST_RR_OP(rsub8, x23, x30, x4, 0x00000000, 0x10ffdf05, 0xefffbf06, x1, 48, x14)

inst_13:// rs1==x22, rs2==x7, rd==x13, rs2_b3_val == -9, rs1_b1_val == 0, rs2_b0_val == -5, rs1_b3_val == -9
// opcode: rsub8 ; op1:x22; op2:x7; dest:x13; op1val:0xf73f0001;  op2val:0xf70407fb
TEST_RR_OP(rsub8, x13, x22, x7, 0x00000000, 0xf73f0001, 0xf70407fb, x1, 52, x14)

inst_14:// rs1==x7, rs2==x14, rd==x28, rs2_b3_val == -3, rs1_b2_val == -9, rs2_b0_val == 1, rs1_b3_val == 85, rs2_b1_val == 4, rs1_b0_val == 32, rs2_b2_val == 64
// opcode: rsub8 ; op1:x7; op2:x14; dest:x28; op1val:0x55f75520;  op2val:0xfd400401
TEST_RR_OP(rsub8, x28, x7, x14, 0x00000000, 0x55f75520, 0xfd400401, x1, 56, x13)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_15:// rs1==x9, rs2==x10, rd==x11, rs2_b3_val == -2, rs2_b1_val == 0
// opcode: rsub8 ; op1:x9; op2:x10; dest:x11; op1val:0xfa550555;  op2val:0xfefc00c0
TEST_RR_OP(rsub8, x11, x9, x10, 0x00000000, 0xfa550555, 0xfefc00c0, x5, 0, x13)

inst_16:// rs1==x16, rs2==x3, rd==x20, rs2_b3_val == 64, rs2_b2_val == 85
// opcode: rsub8 ; op1:x16; op2:x3; dest:x20; op1val:0xfcf70506;  op2val:0x405509fa
TEST_RR_OP(rsub8, x20, x16, x3, 0x00000000, 0xfcf70506, 0x405509fa, x5, 4, x13)

inst_17:// rs1==x28, rs2==x8, rd==x27, rs2_b3_val == 32, rs2_b0_val == 8, rs1_b2_val == 2
// opcode: rsub8 ; op1:x28; op2:x8; dest:x27; op1val:0x5502c020;  op2val:0x20055508
TEST_RR_OP(rsub8, x27, x28, x8, 0x00000000, 0x5502c020, 0x20055508, x5, 8, x13)

inst_18:// rs1==x4, rs2==x1, rd==x30, rs2_b3_val == 16, rs2_b0_val == 64
// opcode: rsub8 ; op1:x4; op2:x1; dest:x30; op1val:0xfaf70909;  op2val:0x10fcf840
TEST_RR_OP(rsub8, x30, x4, x1, 0x00000000, 0xfaf70909, 0x10fcf840, x5, 12, x13)

inst_19:// rs1==x25, rs2==x15, rd==x9, rs2_b3_val == 8, rs1_b2_val == 1, rs1_b0_val == -1
// opcode: rsub8 ; op1:x25; op2:x15; dest:x9; op1val:0x3f0180ff;  op2val:0x807fc3f
TEST_RR_OP(rsub8, x9, x25, x15, 0x00000000, 0x3f0180ff, 0x807fc3f, x5, 16, x13)

inst_20:// rs1==x6, rs2==x18, rd==x1, rs2_b3_val == 4, rs2_b1_val == -9
// opcode: rsub8 ; op1:x6; op2:x18; dest:x1; op1val:0xdf070207;  op2val:0x4c0f7fb
TEST_RR_OP(rsub8, x1, x6, x18, 0x00000000, 0xdf070207, 0x4c0f7fb, x5, 20, x13)

inst_21:// rs1==x3, rs2==x19, rd==x6, rs2_b3_val == 2, rs2_b1_val == 2, rs1_b2_val == -17, rs1_b3_val == -3
// opcode: rsub8 ; op1:x3; op2:x19; dest:x6; op1val:0xfdef80fc;  op2val:0x23f02fb
TEST_RR_OP(rsub8, x6, x3, x19, 0x00000000, 0xfdef80fc, 0x23f02fb, x5, 24, x13)

inst_22:// rs1==x31, rs2==x16, rd==x10, rs2_b3_val == 1, rs1_b1_val == 4, rs2_b0_val == 0, rs2_b1_val == -5, rs2_b2_val == -3, rs1_b3_val == -1
// opcode: rsub8 ; op1:x31; op2:x16; dest:x10; op1val:0xffc00402;  op2val:0x1fdfb00
TEST_RR_OP(rsub8, x10, x31, x16, 0x00000000, 0xffc00402, 0x1fdfb00, x5, 28, x13)

inst_23:// rs1==x14, rs2==x2, rd==x7, rs2_b3_val == -1, rs1_b1_val == -65, rs1_b2_val == -5
// opcode: rsub8 ; op1:x14; op2:x2; dest:x7; op1val:0x9fbbfef;  op2val:0xfff9df03
TEST_RR_OP(rsub8, x7, x14, x2, 0x00000000, 0x9fbbfef, 0xfff9df03, x5, 32, x13)

inst_24:// rs1==x27, rs2==x23, rd==x14, rs1_b2_val == -33, rs2_b0_val == -17
// opcode: rsub8 ; op1:x27; op2:x23; dest:x14; op1val:0x7dff6aa;  op2val:0x5fdaaef
TEST_RR_OP(rsub8, x14, x27, x23, 0x00000000, 0x7dff6aa, 0x5fdaaef, x5, 36, x13)

inst_25:// rs1==x12, rs2==x31, rd==x29, rs1_b2_val == -2, rs2_b0_val == 85
// opcode: rsub8 ; op1:x12; op2:x31; dest:x29; op1val:0xfe033f;  op2val:0xfe08c055
TEST_RR_OP(rsub8, x29, x12, x31, 0x00000000, 0xfe033f, 0xfe08c055, x5, 40, x13)

inst_26:// rs1==x21, rs2==x20, rd==x31, rs1_b2_val == 64, rs2_b2_val == 0, rs1_b1_val == -9
// opcode: rsub8 ; op1:x21; op2:x20; dest:x31; op1val:0x740f7aa;  op2val:0xaa00f909
TEST_RR_OP(rsub8, x31, x21, x20, 0x00000000, 0x740f7aa, 0xaa00f909, x5, 44, x13)

inst_27:// rs1==x19, rs2==x28, rd==x16, rs1_b2_val == 32, rs1_b1_val == -86, rs1_b3_val == 64, rs2_b1_val == 8, rs1_b0_val == 64
// opcode: rsub8 ; op1:x19; op2:x28; dest:x16; op1val:0x4020aa40;  op2val:0xc0fa0810
TEST_RR_OP(rsub8, x16, x19, x28, 0x00000000, 0x4020aa40, 0xc0fa0810, x5, 48, x13)

inst_28:// rs1==x17, rs2==x24, rd==x22, rs1_b2_val == 8, 
// opcode: rsub8 ; op1:x17; op2:x24; dest:x22; op1val:0xfd08f8f9;  op2val:0xfbf607fc
TEST_RR_OP(rsub8, x22, x17, x24, 0x00000000, 0xfd08f8f9, 0xfbf607fc, x5, 52, x13)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:// rs1==x8, rs2==x22, rd==x21, rs1_b2_val == 4, rs2_b0_val == 2
// opcode: rsub8 ; op1:x8; op2:x22; dest:x21; op1val:0xbf04df40;  op2val:0x7c00802
TEST_RR_OP(rsub8, x21, x8, x22, 0x00000000, 0xbf04df40, 0x7c00802, x2, 0, x3)

inst_30:// rs1==x1, rs2==x13, rd==x4, rs1_b1_val == 127, rs1_b3_val == 127, rs2_b2_val == 127
// opcode: rsub8 ; op1:x1; op2:x13; dest:x4; op1val:0x7fc07f05;  op2val:0xff7ff606
TEST_RR_OP(rsub8, x4, x1, x13, 0x00000000, 0x7fc07f05, 0xff7ff606, x2, 4, x3)

inst_31:// rs1==x26, rs2==x0, rd==x25, rs1_b1_val == -5, rs2_b2_val == 1
// opcode: rsub8 ; op1:x26; op2:x0; dest:x25; op1val:0xfdf8fbfc;  op2val:0x6010706
TEST_RR_OP(rsub8, x25, x26, x0, 0x00000000, 0xfdf8fbfc, 0x6010706, x2, 8, x3)

inst_32:// rs1_b1_val == -2, rs2_b1_val == -17
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x605fe3f;  op2val:0x955efdf
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x605fe3f, 0x955efdf, x2, 12, x3)

inst_33:// rs1_b1_val == 64, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6044002;  op2val:0x1005faf8
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xf6044002, 0x1005faf8, x2, 16, x3)

inst_34:// rs1_b1_val == 32, rs2_b1_val == 32
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8802010;  op2val:0xaa802004
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xf8802010, 0xaa802004, x2, 20, x3)

inst_35:// rs1_b1_val == 16, rs1_b0_val == -9
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20c010f7;  op2val:0x3fbf08fb
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x20c010f7, 0x3fbf08fb, x2, 24, x3)

inst_36:// rs2_b1_val == 127, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f7fcf6;  op2val:0xc07ffc
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x10f7fcf6, 0xc07ffc, x2, 28, x3)

inst_37:// rs2_b1_val == 64, rs1_b0_val == -65, rs2_b0_val == -9, rs2_b2_val == -5
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff855bf;  op2val:0x5fb40f7
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xdff855bf, 0x5fb40f7, x2, 32, x3)

inst_38:// rs2_b0_val == -86, rs1_b0_val == -5
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0f655fb;  op2val:0x7ff08aa
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xc0f655fb, 0x7ff08aa, x2, 36, x3)

inst_39:// rs2_b0_val == 127, rs2_b2_val == -9, rs1_b3_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x87f01fb;  op2val:0x20f7f97f
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x87f01fb, 0x20f7f97f, x2, 40, x3)

inst_40:// rs2_b0_val == -65, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40520c0;  op2val:0x40fb09bf
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x40520c0, 0x40fb09bf, x2, 44, x3)

inst_41:// rs2_b0_val == -3, rs2_b2_val == 2
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf09c0f8;  op2val:0xaa02effd
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xdf09c0f8, 0xaa02effd, x2, 48, x3)

inst_42:// rs2_b0_val == 32, rs1_b0_val == 4
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fa3f04;  op2val:0xf602f820
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x9fa3f04, 0xf602f820, x2, 52, x3)

inst_43:// rs2_b2_val == 16, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb07fdaa;  op2val:0x4010803f
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xfb07fdaa, 0x4010803f, x2, 56, x3)

inst_44:// rs1_b0_val == 127, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x067f7f;  op2val:0xfe09ff40
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x067f7f, 0xfe09ff40, x2, 60, x3)

inst_45:// rs2_b0_val == -1, rs1_b3_val == -86
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa807ff6;  op2val:0xfd05feff
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xaa807ff6, 0xfd05feff, x2, 64, x3)

inst_46:// rs1_b0_val == -33, rs2_b2_val == -17, rs1_b3_val == -17
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xefef10df;  op2val:0x3ef08df
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xefef10df, 0x3ef08df, x2, 68, x3)

inst_47:// rs2_b2_val == -33, rs1_b3_val == 1
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fc0603;  op2val:0x3fdff810
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x1fc0603, 0x3fdff810, x2, 72, x3)

inst_48:// rs1_b0_val == 8, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fd0808;  op2val:0xf706c001
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x6fd0808, 0xf706c001, x2, 76, x3)

inst_49:// rs1_b3_val == -2, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe08c0fe;  op2val:0x9fdefff
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xfe08c0fe, 0x9fdefff, x2, 80, x3)

inst_50:// rs2_b2_val == -2, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff050902;  op2val:0x2fe0003
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xff050902, 0x2fe0003, x2, 84, x3)

inst_51:// rs1_b2_val == -86, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9aafffb;  op2val:0x87ff9f9
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xf9aafffb, 0x87ff9f9, x2, 88, x3)

inst_52:// rs1_b0_val == 0, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf880f900;  op2val:0xf606f8bf
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xf880f900, 0xf606f8bf, x2, 92, x3)

inst_53:// rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs2_b1_val == 85, rs2_b0_val == 16, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val == 16, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val == rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b1_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b3_val == -65
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa105580;  op2val:0xbffc5510
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xfa105580, 0xbffc5510, x2, 96, x3)

inst_54:// rs1_b3_val == rs2_b3_val, rs1_b1_val == 1, rs2_b0_val == 4, rs2_b3_val == 0, rs2_b1_val == 1, rs1_b3_val == 0, rs1_b2_val == 85
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5501f9;  op2val:0xf60104
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x5501f9, 0xf60104, x2, 100, x3)

inst_55:// rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b1_val == -86, rs2_b2_val == -86, rs1_b0_val == -3, rs1_b3_val == 16, rs2_b0_val == -2, rs1_b1_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x100708fd;  op2val:0xbfaaaafe
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0x100708fd, 0xbfaaaafe, x2, 104, x3)

inst_56:// rs1_b1_val == -5, rs2_b2_val == 1
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdf8fbfc;  op2val:0x6010706
TEST_RR_OP(rsub8, x31, x30, x29, 0x00000000, 0xfdf8fbfc, 0x6010706, x2, 108, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
