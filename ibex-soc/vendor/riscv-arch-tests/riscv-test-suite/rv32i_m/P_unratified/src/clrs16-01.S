
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clrs16 instruction of the RISC-V RV32PZicsr extension for the clrs16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clrs16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x19,signature_x19_1)

inst_0:
// rs1==x13, rd==x26, rs1_h0_val == -32768, 
// opcode: clrs16 ; op1:x13; dest:x26; op1val:0x038000;
TEST_RD_OP( clrs16, x26, x13, 0x00000000, 0x038000, x19, 0, x7)

inst_1:
// rs1==x31, rd==x3, rs1_h1_val == -21846, rs1_h0_val == 128
// opcode: clrs16 ; op1:x31; dest:x3; op1val:0xaaaa0080;
TEST_RD_OP( clrs16, x3, x31, 0x00000000, 0xaaaa0080, x19, 4, x7)

inst_2:
// rs1==x11, rd==x8, rs1_h1_val == 21845, rs1_h0_val == 2048
// opcode: clrs16 ; op1:x11; dest:x8; op1val:0x55550800;
TEST_RD_OP( clrs16, x8, x11, 0x00000000, 0x55550800, x19, 8, x7)

inst_3:
// rs1==x23, rd==x11, rs1_h1_val == 32767, rs1_h0_val == 64
// opcode: clrs16 ; op1:x23; dest:x11; op1val:0x7fff0040;
TEST_RD_OP( clrs16, x11, x23, 0x00000000, 0x7fff0040, x19, 12, x7)

inst_4:
// rs1==x1, rd==x27, rs1_h1_val == -16385, rs1_h0_val == 8
// opcode: clrs16 ; op1:x1; dest:x27; op1val:0xbfff0008;
TEST_RD_OP( clrs16, x27, x1, 0x00000000, 0xbfff0008, x19, 16, x7)

inst_5:
// rs1==x16, rd==x0, rs1_h1_val == -8193, rs1_h0_val == 2
// opcode: clrs16 ; op1:x16; dest:x0; op1val:0xdfff0002;
TEST_RD_OP( clrs16, x0, x16, 0x00000000, 0xdfff0002, x19, 20, x7)

inst_6:
// rs1==x14, rd==x15, rs1_h1_val == -4097, rs1_h0_val == 1024
// opcode: clrs16 ; op1:x14; dest:x15; op1val:0xefff0400;
TEST_RD_OP( clrs16, x15, x14, 0x00000000, 0xefff0400, x19, 24, x7)

inst_7:
// rs1==x20, rd==x28, rs1_h1_val == -2049, rs1_h0_val == 16384
// opcode: clrs16 ; op1:x20; dest:x28; op1val:0xf7ff4000;
TEST_RD_OP( clrs16, x28, x20, 0x00000000, 0xf7ff4000, x19, 28, x7)

inst_8:
// rs1==x10, rd==x23, rs1_h1_val == -1025, rs1_h0_val == -17
// opcode: clrs16 ; op1:x10; dest:x23; op1val:0xfbffffef;
TEST_RD_OP( clrs16, x23, x10, 0x00000000, 0xfbffffef, x19, 32, x7)

inst_9:
// rs1==x4, rd==x21, rs1_h1_val == -513, 
// opcode: clrs16 ; op1:x4; dest:x21; op1val:0xfdff3fff;
TEST_RD_OP( clrs16, x21, x4, 0x00000000, 0xfdff3fff, x19, 36, x7)

inst_10:
// rs1==x8, rd==x10, rs1_h1_val == -257, rs1_h0_val == 32
// opcode: clrs16 ; op1:x8; dest:x10; op1val:0xfeff0020;
TEST_RD_OP( clrs16, x10, x8, 0x00000000, 0xfeff0020, x19, 40, x7)

inst_11:
// rs1==x27, rd==x2, rs1_h1_val == -129, rs1_h0_val == -33
// opcode: clrs16 ; op1:x27; dest:x2; op1val:0xff7fffdf;
TEST_RD_OP( clrs16, x2, x27, 0x00000000, 0xff7fffdf, x19, 44, x7)

inst_12:
// rs1==x9, rd==x1, rs1_h1_val == -65, rs1_h0_val == 4
// opcode: clrs16 ; op1:x9; dest:x1; op1val:0xffbf0004;
TEST_RD_OP( clrs16, x1, x9, 0x00000000, 0xffbf0004, x19, 48, x7)

inst_13:
// rs1==x5, rd==x20, rs1_h1_val == -33, rs1_h0_val == 256
// opcode: clrs16 ; op1:x5; dest:x20; op1val:0xffdf0100;
TEST_RD_OP( clrs16, x20, x5, 0x00000000, 0xffdf0100, x19, 52, x7)

inst_14:
// rs1==x3, rd==x6, rs1_h1_val == -17, 
// opcode: clrs16 ; op1:x3; dest:x6; op1val:0xffef0007;
TEST_RD_OP( clrs16, x6, x3, 0x00000000, 0xffef0007, x19, 56, x7)

inst_15:
// rs1==x26, rd==x16, rs1_h1_val == -9, rs1_h0_val == -513
// opcode: clrs16 ; op1:x26; dest:x16; op1val:0xfff7fdff;
TEST_RD_OP( clrs16, x16, x26, 0x00000000, 0xfff7fdff, x19, 60, x7)

inst_16:
// rs1==x6, rd==x22, rs1_h1_val == -5, 
// opcode: clrs16 ; op1:x6; dest:x22; op1val:0xfffb0002;
TEST_RD_OP( clrs16, x22, x6, 0x00000000, 0xfffb0002, x19, 64, x7)

inst_17:
// rs1==x2, rd==x18, rs1_h1_val == -3, 
// opcode: clrs16 ; op1:x2; dest:x18; op1val:0xfffd8000;
TEST_RD_OP( clrs16, x18, x2, 0x00000000, 0xfffd8000, x19, 68, x7)

inst_18:
// rs1==x21, rd==x14, rs1_h1_val == -2, rs1_h0_val == -9
// opcode: clrs16 ; op1:x21; dest:x14; op1val:0xfffefff7;
TEST_RD_OP( clrs16, x14, x21, 0x00000000, 0xfffefff7, x19, 72, x7)

inst_19:
// rs1==x12, rd==x24, rs1_h1_val == -32768, rs1_h0_val == -65
// opcode: clrs16 ; op1:x12; dest:x24; op1val:0x8000ffbf;
TEST_RD_OP( clrs16, x24, x12, 0x00000000, 0x8000ffbf, x19, 76, x7)

inst_20:
// rs1==x25, rd==x9, rs1_h1_val == 16384, 
// opcode: clrs16 ; op1:x25; dest:x9; op1val:0x40000006;
TEST_RD_OP( clrs16, x9, x25, 0x00000000, 0x40000006, x19, 80, x7)

inst_21:
// rs1==x29, rd==x13, rs1_h1_val == 8192, rs1_h0_val == -16385
// opcode: clrs16 ; op1:x29; dest:x13; op1val:0x2000bfff;
TEST_RD_OP( clrs16, x13, x29, 0x00000000, 0x2000bfff, x19, 84, x7)

inst_22:
// rs1==x28, rd==x12, rs1_h1_val == 4096, rs1_h0_val == 1
// opcode: clrs16 ; op1:x28; dest:x12; op1val:0x10000001;
TEST_RD_OP( clrs16, x12, x28, 0x00000000, 0x10000001, x19, 88, x2)

inst_23:
// rs1==x7, rd==x17, rs1_h1_val == 2048, 
// opcode: clrs16 ; op1:x7; dest:x17; op1val:0x800fff6;
TEST_RD_OP( clrs16, x17, x7, 0x00000000, 0x800fff6, x19, 92, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_24:
// rs1==x18, rd==x31, rs1_h0_val == 16, 
// opcode: clrs16 ; op1:x18; dest:x31; op1val:0x40000010;
TEST_RD_OP( clrs16, x31, x18, 0x00000000, 0x40000010, x1, 0, x2)

inst_25:
// rs1==x30, rd==x4, rs1_h0_val == 0, 
// opcode: clrs16 ; op1:x30; dest:x4; op1val:0xdfff0000;
TEST_RD_OP( clrs16, x4, x30, 0x00000000, 0xdfff0000, x1, 4, x2)

inst_26:
// rs1==x19, rd==x25, rs1_h0_val == -1, 
// opcode: clrs16 ; op1:x19; dest:x25; op1val:0x7fffffff;
TEST_RD_OP( clrs16, x25, x19, 0x00000000, 0x7fffffff, x1, 8, x2)

inst_27:
// rs1==x15, rd==x5, rs1_h1_val == 1024, rs1_h0_val == -5
// opcode: clrs16 ; op1:x15; dest:x5; op1val:0x400fffb;
TEST_RD_OP( clrs16, x5, x15, 0x00000000, 0x400fffb, x1, 12, x2)

inst_28:
// rs1==x0, rd==x7, rs1_h1_val == 512, 
// opcode: clrs16 ; op1:x0; dest:x7; op1val:0x200fffa;
TEST_RD_OP( clrs16, x7, x0, 0x00000000, 0x200fffa, x1, 16, x2)

inst_29:
// rs1==x17, rd==x19, rs1_h1_val == 256, rs1_h0_val == -21846
// opcode: clrs16 ; op1:x17; dest:x19; op1val:0x100aaaa;
TEST_RD_OP( clrs16, x19, x17, 0x00000000, 0x100aaaa, x1, 20, x2)

inst_30:
// rs1==x22, rd==x30, rs1_h1_val == 128, 
// opcode: clrs16 ; op1:x22; dest:x30; op1val:0x800800;
TEST_RD_OP( clrs16, x30, x22, 0x00000000, 0x800800, x1, 24, x2)

inst_31:
// rs1==x24, rd==x29, rs1_h1_val == 64, 
// opcode: clrs16 ; op1:x24; dest:x29; op1val:0x400004;
TEST_RD_OP( clrs16, x29, x24, 0x00000000, 0x400004, x1, 28, x2)

inst_32:
// rs1_h1_val == 32, rs1_h0_val == 4096
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x201000;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x201000, x1, 32, x2)

inst_33:
// rs1_h1_val == 16, rs1_h0_val == -4097
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x10efff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x10efff, x1, 36, x2)

inst_34:
// rs1_h1_val == 8, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x08fffc;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x08fffc, x1, 40, x2)

inst_35:
// rs1_h1_val == 4, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x040800;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x040800, x1, 44, x2)

inst_36:
// rs1_h1_val == 2, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x02fffc;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x02fffc, x1, 48, x2)

inst_37:
// rs1_h1_val == 1, rs1_h0_val == -2049
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x01f7ff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x01f7ff, x1, 52, x2)

inst_38:
// rs1_h1_val == 0, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x00fff6;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x00fff6, x1, 56, x2)

inst_39:
// rs1_h1_val == -1, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xffffaaaa;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xffffaaaa, x1, 60, x2)

inst_40:
// rs1_h0_val == 21845, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xc0005555;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xc0005555, x1, 64, x2)

inst_41:
// rs1_h0_val == 32767, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x107fff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x107fff, x1, 68, x2)

inst_42:
// rs1_h0_val == -8193, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x08dfff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x08dfff, x1, 72, x2)

inst_43:
// rs1_h0_val == -3, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xeffffffd;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xeffffffd, x1, 76, x2)

inst_44:
// rs1_h0_val == -2, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x00fffe;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x00fffe, x1, 80, x2)

inst_45:
// rs1_h0_val == -1025, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xfffdfbff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xfffdfbff, x1, 84, x2)

inst_46:
// rs1_h0_val == 8192, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x3fff2000;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x3fff2000, x1, 88, x2)

inst_47:
// rs1_h0_val == 512, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x060200;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x060200, x1, 92, x2)

inst_48:
// rs1_h0_val == -257, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xfff7feff;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xfff7feff, x1, 96, x2)

inst_49:
// rs1_h0_val == -129, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0xf7ffff7f;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0xf7ffff7f, x1, 100, x2)

inst_50:
// rs1_h1_val == 512, 
// opcode: clrs16 ; op1:x30; dest:x31; op1val:0x200fffa;
TEST_RD_OP( clrs16, x31, x30, 0x00000000, 0x200fffa, x1, 104, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x19_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 27*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
