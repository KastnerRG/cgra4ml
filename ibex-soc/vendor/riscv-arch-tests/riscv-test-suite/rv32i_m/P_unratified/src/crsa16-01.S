
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the crsa16 instruction of the RISC-V RV32PZicsr extension for the crsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",crsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x0, rd==x7, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -8193
// opcode: crsa16 ; op1:x5; op2:x0; dest:x7; op1val:0xfff68000;  op2val:0xdfffc000
TEST_RR_OP(crsa16, x7, x5, x0, 0x00000000, 0xfff68000, 0xdfffc000, x1, 0, x14)

inst_1:// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x23, rs1_h1_val == rs2_h1_val, rs2_h0_val == -3, rs1_h1_val == -2049, rs2_h1_val == -2049, rs1_h0_val == -4097
// opcode: crsa16 ; op1:x7; op2:x7; dest:x23; op1val:0xf7ffefff;  op2val:0xf7fffffd
TEST_RR_OP(crsa16, x23, x7, x7, 0x00000000, 0xf7ffefff, 0xf7fffffd, x1, 4, x14)

inst_2:// rs1 == rd != rs2, rs1==x27, rs2==x17, rd==x27, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -21846, rs1_h0_val == 16, rs2_h0_val == -9
// opcode: crsa16 ; op1:x27; op2:x17; dest:x27; op1val:0xaaaa0010;  op2val:0x40fff7
TEST_RR_OP(crsa16, x27, x27, x17, 0x00000000, 0xaaaa0010, 0x40fff7, x1, 8, x14)

inst_3:// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -1, rs2_h0_val == -513, rs1_h0_val == 21845, rs1_h1_val == 2048
// opcode: crsa16 ; op1:x8; op2:x8; dest:x8; op1val:0x8005555;  op2val:0xfffffdff
TEST_RR_OP(crsa16, x8, x8, x8, 0x00000000, 0x8005555, 0xfffffdff, x1, 12, x14)

inst_4:// rs2 == rd != rs1, rs1==x30, rs2==x4, rd==x4, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs1_h1_val == 8, rs2_h0_val == 32767
// opcode: crsa16 ; op1:x30; op2:x4; dest:x4; op1val:0x080800;  op2val:0x8007fff
TEST_RR_OP(crsa16, x4, x30, x4, 0x00000000, 0x080800, 0x8007fff, x1, 16, x14)

inst_5:// rs1==x29, rs2==x16, rd==x5, rs1_h0_val == rs2_h0_val, rs1_h1_val == -17
// opcode: crsa16 ; op1:x29; op2:x16; dest:x5; op1val:0xffeffff6;  op2val:0x40fff6
TEST_RR_OP(crsa16, x5, x29, x16, 0x00000000, 0xffeffff6, 0x40fff6, x1, 20, x14)

inst_6:// rs1==x0, rs2==x13, rd==x30, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -2049
// opcode: crsa16 ; op1:x0; op2:x13; dest:x30; op1val:0xf7fff7ff;  op2val:0x050003
TEST_RR_OP(crsa16, x30, x0, x13, 0x00000000, 0xf7fff7ff, 0x050003, x1, 24, x14)

inst_7:// rs1==x26, rs2==x24, rd==x12, rs2_h1_val == -21846, rs1_h0_val == 128, rs2_h0_val == 2048
// opcode: crsa16 ; op1:x26; op2:x24; dest:x12; op1val:0x8000080;  op2val:0xaaaa0800
TEST_RR_OP(crsa16, x12, x26, x24, 0x00000000, 0x8000080, 0xaaaa0800, x1, 28, x14)

inst_8:// rs1==x2, rs2==x28, rd==x17, rs2_h1_val == 21845, rs2_h0_val == -33
// opcode: crsa16 ; op1:x2; op2:x28; dest:x17; op1val:0xffef0010;  op2val:0x5555ffdf
TEST_RR_OP(crsa16, x17, x2, x28, 0x00000000, 0xffef0010, 0x5555ffdf, x1, 32, x14)

inst_9:// rs1==x6, rs2==x27, rd==x15, rs2_h1_val == 32767, rs2_h0_val == -129, rs1_h0_val == 8
// opcode: crsa16 ; op1:x6; op2:x27; dest:x15; op1val:0x060008;  op2val:0x7fffff7f
TEST_RR_OP(crsa16, x15, x6, x27, 0x00000000, 0x060008, 0x7fffff7f, x1, 36, x14)

inst_10:// rs1==x20, rs2==x3, rd==x10, rs2_h1_val == -16385, rs1_h0_val == 2
// opcode: crsa16 ; op1:x20; op2:x3; dest:x10; op1val:0x030002;  op2val:0xbfff0009
TEST_RR_OP(crsa16, x10, x20, x3, 0x00000000, 0x030002, 0xbfff0009, x1, 40, x14)

inst_11:// rs1==x17, rs2==x23, rd==x0, rs2_h1_val == -4097, rs1_h1_val == 512
// opcode: crsa16 ; op1:x17; op2:x23; dest:x0; op1val:0x200fffc;  op2val:0xeffffff8
TEST_RR_OP(crsa16, x0, x17, x23, 0x00000000, 0x200fffc, 0xeffffff8, x1, 44, x14)

inst_12:// rs1==x31, rs2==x11, rd==x24, rs2_h1_val == -1025, rs1_h1_val == 4096, rs2_h0_val == 4096
// opcode: crsa16 ; op1:x31; op2:x11; dest:x24; op1val:0x1000fff8;  op2val:0xfbff1000
TEST_RR_OP(crsa16, x24, x31, x11, 0x00000000, 0x1000fff8, 0xfbff1000, x1, 48, x14)

inst_13:// rs1==x15, rs2==x29, rd==x18, rs2_h1_val == -513, rs1_h0_val == -17, rs2_h0_val == 64, rs1_h1_val == -257
// opcode: crsa16 ; op1:x15; op2:x29; dest:x18; op1val:0xfeffffef;  op2val:0xfdff0040
TEST_RR_OP(crsa16, x18, x15, x29, 0x00000000, 0xfeffffef, 0xfdff0040, x1, 52, x14)

inst_14:// rs1==x9, rs2==x21, rd==x16, rs2_h1_val == -257, rs1_h0_val == 8192
// opcode: crsa16 ; op1:x9; op2:x21; dest:x16; op1val:0xc0002000;  op2val:0xfeffffdf
TEST_RR_OP(crsa16, x16, x9, x21, 0x00000000, 0xc0002000, 0xfeffffdf, x1, 56, x14)

inst_15:// rs1==x23, rs2==x25, rd==x22, rs2_h1_val == -129, rs1_h1_val == -3
// opcode: crsa16 ; op1:x23; op2:x25; dest:x22; op1val:0xfffd0008;  op2val:0xff7fc000
TEST_RR_OP(crsa16, x22, x23, x25, 0x00000000, 0xfffd0008, 0xff7fc000, x1, 60, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:// rs1==x1, rs2==x18, rd==x2, rs2_h1_val == -65, rs1_h0_val == 32767
// opcode: crsa16 ; op1:x1; op2:x18; dest:x2; op1val:0x8007fff;  op2val:0xffbf0009
TEST_RR_OP(crsa16, x2, x1, x18, 0x00000000, 0x8007fff, 0xffbf0009, x7, 0, x8)

inst_17:// rs1==x21, rs2==x20, rd==x3, rs2_h1_val == -33, rs1_h0_val == 4, rs1_h1_val == 128
// opcode: crsa16 ; op1:x21; op2:x20; dest:x3; op1val:0x800004;  op2val:0xffdf0003
TEST_RR_OP(crsa16, x3, x21, x20, 0x00000000, 0x800004, 0xffdf0003, x7, 4, x8)

inst_18:// rs1==x18, rs2==x5, rd==x19, rs2_h1_val == -17, rs2_h0_val == -65
// opcode: crsa16 ; op1:x18; op2:x5; dest:x19; op1val:0x2000080;  op2val:0xffefffbf
TEST_RR_OP(crsa16, x19, x18, x5, 0x00000000, 0x2000080, 0xffefffbf, x7, 8, x8)

inst_19:// rs1==x24, rs2==x2, rd==x14, rs2_h1_val == -9, rs2_h0_val == 2, rs1_h0_val == -513, rs1_h1_val == 1
// opcode: crsa16 ; op1:x24; op2:x2; dest:x14; op1val:0x01fdff;  op2val:0xfff70002
TEST_RR_OP(crsa16, x14, x24, x2, 0x00000000, 0x01fdff, 0xfff70002, x7, 12, x8)

inst_20:// rs1==x3, rs2==x15, rd==x25, rs2_h1_val == -5, rs1_h1_val == 32, rs2_h0_val == 21845, rs1_h0_val == -65
// opcode: crsa16 ; op1:x3; op2:x15; dest:x25; op1val:0x20ffbf;  op2val:0xfffb5555
TEST_RR_OP(crsa16, x25, x3, x15, 0x00000000, 0x20ffbf, 0xfffb5555, x7, 16, x8)

inst_21:// rs1==x19, rs2==x22, rd==x11, rs2_h1_val == -3, rs2_h0_val == -1025, rs1_h1_val == 16, rs1_h0_val == 64
// opcode: crsa16 ; op1:x19; op2:x22; dest:x11; op1val:0x100040;  op2val:0xfffdfbff
TEST_RR_OP(crsa16, x11, x19, x22, 0x00000000, 0x100040, 0xfffdfbff, x7, 20, x8)

inst_22:// rs1==x4, rs2==x30, rd==x26, rs2_h1_val == -2, rs1_h1_val == 1024
// opcode: crsa16 ; op1:x4; op2:x30; dest:x26; op1val:0x400fffa;  op2val:0xfffe0005
TEST_RR_OP(crsa16, x26, x4, x30, 0x00000000, 0x400fffa, 0xfffe0005, x7, 24, x8)

inst_23:// rs1==x25, rs2==x31, rd==x29, rs2_h1_val == -32768, rs1_h1_val == 64, rs2_h0_val == 128, rs1_h0_val == -5
// opcode: crsa16 ; op1:x25; op2:x31; dest:x29; op1val:0x40fffb;  op2val:0x80000080
TEST_RR_OP(crsa16, x29, x25, x31, 0x00000000, 0x40fffb, 0x80000080, x7, 28, x8)

inst_24:// rs1==x11, rs2==x26, rd==x21, rs2_h1_val == 16384, 
// opcode: crsa16 ; op1:x11; op2:x26; dest:x21; op1val:0x200efff;  op2val:0x40000005
TEST_RR_OP(crsa16, x21, x11, x26, 0x00000000, 0x200efff, 0x40000005, x7, 32, x8)

inst_25:// rs1==x28, rs2==x9, rd==x1, rs2_h1_val == 8192, rs1_h1_val == -4097
// opcode: crsa16 ; op1:x28; op2:x9; dest:x1; op1val:0xefff5555;  op2val:0x20000007
TEST_RR_OP(crsa16, x1, x28, x9, 0x00000000, 0xefff5555, 0x20000007, x7, 36, x8)

inst_26:// rs1==x14, rs2==x12, rd==x13, rs2_h1_val == 4096, rs2_h0_val == -257, rs1_h1_val == 4, rs1_h0_val == -8193
// opcode: crsa16 ; op1:x14; op2:x12; dest:x13; op1val:0x04dfff;  op2val:0x1000feff
TEST_RR_OP(crsa16, x13, x14, x12, 0x00000000, 0x04dfff, 0x1000feff, x7, 40, x8)

inst_27:// rs1==x12, rs2==x6, rd==x31, rs2_h1_val == 1024, rs1_h1_val == -33
// opcode: crsa16 ; op1:x12; op2:x6; dest:x31; op1val:0xffdfdfff;  op2val:0x4001000
TEST_RR_OP(crsa16, x31, x12, x6, 0x00000000, 0xffdfdfff, 0x4001000, x7, 44, x8)

inst_28:// rs1==x16, rs2==x14, rd==x6, rs2_h1_val == 512, rs1_h0_val == -3, rs2_h0_val == 8
// opcode: crsa16 ; op1:x16; op2:x14; dest:x6; op1val:0x06fffd;  op2val:0x2000008
TEST_RR_OP(crsa16, x6, x16, x14, 0x00000000, 0x06fffd, 0x2000008, x7, 48, x8)

inst_29:// rs1==x10, rs2==x1, rd==x28, rs2_h1_val == 256, rs2_h0_val == -32768, rs1_h1_val == -32768
// opcode: crsa16 ; op1:x10; op2:x1; dest:x28; op1val:0x80000080;  op2val:0x1008000
TEST_RR_OP(crsa16, x28, x10, x1, 0x00000000, 0x80000080, 0x1008000, x7, 52, x2)

inst_30:// rs1==x22, rs2==x10, rd==x20, rs1_h0_val == -1025, 
// opcode: crsa16 ; op1:x22; op2:x10; dest:x20; op1val:0xffdffbff;  op2val:0x800fff7
TEST_RR_OP(crsa16, x20, x22, x10, 0x00000000, 0xffdffbff, 0x800fff7, x7, 56, x2)

inst_31:// rs1==x13, rs2==x19, rd==x9, rs1_h0_val == -257, 
// opcode: crsa16 ; op1:x13; op2:x19; dest:x9; op1val:0xfffafeff;  op2val:0xdffffbff
TEST_RR_OP(crsa16, x9, x13, x19, 0x00000000, 0xfffafeff, 0xdffffbff, x7, 60, x2)

inst_32:// rs1_h0_val == -129, rs1_h1_val == -65
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f;  op2val:0x4000006
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffbfff7f, 0x4000006, x7, 64, x2)

inst_33:// rs1_h0_val == -33, rs2_h0_val == 16
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffdf;  op2val:0xffef0010
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfff8ffdf, 0xffef0010, x7, 68, x2)

inst_34:// rs1_h0_val == -9, rs2_h0_val == 16384
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff7;  op2val:0xfdff4000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfffcfff7, 0xfdff4000, x7, 72, x2)

inst_35:// rs1_h0_val == -2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffe;  op2val:0x80007fff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x01fffe, 0x80007fff, x7, 76, x2)

inst_36:// rs1_h0_val == 16384, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef4000;  op2val:0xfff80040
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffef4000, 0xfff80040, x7, 80, x2)

inst_37:// rs1_h0_val == 4096, rs1_h1_val == -1025
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff1000;  op2val:0xfff8ff7f
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfbff1000, 0xfff8ff7f, x7, 84, x2)

inst_38:// rs1_h0_val == 1024, rs1_h1_val == -1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0400;  op2val:0xffdffeff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffff0400, 0xffdffeff, x7, 88, x2)

inst_39:// rs1_h0_val == 512, rs2_h0_val == 256
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060200;  op2val:0x10000100
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x060200, 0x10000100, x7, 92, x2)

inst_40:// rs1_h0_val == 256, rs2_h0_val == 1024
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060100;  op2val:0xffff0400
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x060100, 0xffff0400, x7, 96, x2)

inst_41:// rs1_h0_val == 32, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040020;  op2val:0xfff6fffa
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x040020, 0xfff6fffa, x7, 100, x2)

inst_42:// rs1_h0_val == 1, rs1_h1_val == 256
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000001;  op2val:0xaaaa0100
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x1000001, 0xaaaa0100, x7, 104, x2)

inst_43:// rs1_h0_val == 0, rs2_h1_val == 4
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x04fff9
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x200000, 0x04fff9, x7, 108, x2)

inst_44:// rs1_h0_val == -1, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffff;  op2val:0x40008000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfffaffff, 0x40008000, x7, 112, x2)

inst_45:// rs2_h1_val == 128, rs1_h1_val == -513
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0000;  op2val:0x800009
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfdff0000, 0x800009, x7, 116, x2)

inst_46:// rs2_h1_val == 32, rs1_h1_val == -5, rs2_h0_val == -8193
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0006;  op2val:0x20dfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfffb0006, 0x20dfff, x7, 120, x2)

inst_47:// rs2_h1_val == 16, rs2_h0_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb;  op2val:0x100001
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xaaaafffb, 0x100001, x7, 124, x2)

inst_48:// rs2_h0_val == -5, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0008;  op2val:0xfffbfffb
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffdf0008, 0xfffbfffb, x7, 128, x2)

inst_49:// rs2_h0_val == -2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200;  op2val:0x8000fffe
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xefff0200, 0x8000fffe, x7, 132, x2)

inst_50:// rs2_h0_val == 8192, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4008000;  op2val:0x2002000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x4008000, 0x2002000, x7, 136, x2)

inst_51:// rs2_h0_val == 512, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff9;  op2val:0xfff80200
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x80fff9, 0xfff80200, x7, 140, x2)

inst_52:// rs2_h0_val == 32, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff9;  op2val:0xffbf0020
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x8000fff9, 0xffbf0020, x7, 144, x2)

inst_53:// rs2_h0_val == 4, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fbff;  op2val:0xfdff0004
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x100fbff, 0xfdff0004, x7, 148, x2)

inst_54:// rs2_h0_val == 0, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff7;  op2val:0xfffa0000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xc000fff7, 0xfffa0000, x7, 152, x2)

inst_55:// rs2_h0_val == -1, rs1_h1_val == 0
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x007fff;  op2val:0x7fffffff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x007fff, 0x7fffffff, x7, 156, x2)

inst_56:// rs1_h1_val == 21845, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff;  op2val:0x07dfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x5555ffff, 0x07dfff, x7, 160, x2)

inst_57:// rs1_h1_val == 32767, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0010;  op2val:0x10001000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x7fff0010, 0x10001000, x7, 164, x2)

inst_58:// rs1_h1_val == -16385, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffe;  op2val:0xfff6fbff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xbffffffe, 0xfff6fbff, x7, 168, x2)

inst_59:// rs1_h1_val == -8193, rs2_h1_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff;  op2val:0x01fff7
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xdffffbff, 0x01fff7, x7, 172, x2)

inst_60:// rs1_h1_val == -129, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0400;  op2val:0x4000fffb
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xff7f0400, 0x4000fffb, x7, 176, x2)

inst_61:// rs1_h1_val == -9, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff78000;  op2val:0xf7fffeff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfff78000, 0xf7fffeff, x7, 180, x2)

inst_62:// rs1_h1_val == -2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0000;  op2val:0x20000008
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfffe0000, 0x20000008, x7, 184, x2)

inst_63:// rs1_h1_val == 16384, rs1_h0_val == -21846
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000aaaa;  op2val:0xc0000003
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x4000aaaa, 0xc0000003, x7, 188, x2)

inst_64:// rs1_h1_val == 8192, rs2_h0_val == -4097
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20002000;  op2val:0xfbffefff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x20002000, 0xfbffefff, x7, 192, x2)

inst_65:// rs2_h1_val == 8, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0200;  op2val:0x08fdff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xfdff0200, 0x08fdff, x7, 196, x2)

inst_66:// rs2_h1_val == 2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fdff;  op2val:0x02fdff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x40fdff, 0x02fdff, x7, 200, x2)

inst_67:// rs2_h0_val == -21846, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400;  op2val:0x03aaaa
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x3fff0400, 0x03aaaa, x7, 204, x2)

inst_68:// rs2_h0_val == -16385, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff9;  op2val:0x100bfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffbffff9, 0x100bfff, x7, 208, x2)

inst_69:// rs1_h1_val == 2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02aaaa;  op2val:0xfffffffb
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x02aaaa, 0xfffffffb, x7, 212, x2)

inst_70:// rs1_h0_val == -16385, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fbfff;  op2val:0xfdff8000
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xff7fbfff, 0xfdff8000, x7, 216, x2)

inst_71:// rs2_h0_val == -2049, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0200;  op2val:0xfbfff7ff
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xffdf0200, 0xfbfff7ff, x7, 220, x2)

inst_72:// rs2_h0_val == -17, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550000;  op2val:0x01ffef
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x55550000, 0x01ffef, x7, 224, x2)

inst_73:// rs2_h1_val == 0, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x023fff;  op2val:0x000010
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x023fff, 0x000010, x7, 228, x2)

inst_74:// rs1_h1_val == rs2_h1_val, rs2_h0_val == -3, rs1_h1_val == -2049, rs2_h1_val == -2049, rs1_h0_val == -4097
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffefff;  op2val:0xf7fffffd
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xf7ffefff, 0xf7fffffd, x7, 232, x2)

inst_75:// rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -2049
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ff;  op2val:0x050003
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0xf7fff7ff, 0x050003, x7, 236, x2)

inst_76:// rs2_h1_val == -4097, rs1_h1_val == 512
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffc;  op2val:0xeffffff8
TEST_RR_OP(crsa16, x31, x30, x29, 0x00000000, 0x200fffc, 0xeffffff8, x7, 240, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 61*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
