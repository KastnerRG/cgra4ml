
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl16 instruction of the RISC-V RV32PZicsr extension for the srl16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srl16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x16, rd==x4, rs2_val == 5, rs1_h0_val == 8192, rs1_h1_val == 32767
// opcode: srl16 ; op1:x30; op2:x16; dest:x4; op1val:0x7fff2000;  op2val:0x5
TEST_RR_OP(srl16, x4, x30, x16, 0x00000000, 0x7fff2000, 0x5, x6, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x30, rs2_val == 7, rs1_h1_val == 0, rs1_h0_val == 65279
// opcode: srl16 ; op1:x8; op2:x8; dest:x30; op1val:0x00feff;  op2val:0x7
TEST_RR_OP(srl16, x30, x8, x8, 0x00000000, 0x00feff, 0x7, x6, 4, x9)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x15, rd==x23, rs2_val == 11, rs1_h0_val == 65527
// opcode: srl16 ; op1:x23; op2:x15; dest:x23; op1val:0x03fff7;  op2val:0xb
TEST_RR_OP(srl16, x23, x23, x15, 0x00000000, 0x03fff7, 0xb, x6, 8, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs2_val == 13, rs1_h0_val == 2, rs1_h1_val == 63487
// opcode: srl16 ; op1:x3; op2:x3; dest:x3; op1val:0xf7ff0002;  op2val:0xd
TEST_RR_OP(srl16, x3, x3, x3, 0x00000000, 0xf7ff0002, 0xd, x6, 12, x9)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x28, rd==x28, rs2_val == 14, rs1_h0_val == 65534
// opcode: srl16 ; op1:x22; op2:x28; dest:x28; op1val:0x00fffe;  op2val:0xe
TEST_RR_OP(srl16, x28, x22, x28, 0x00000000, 0x00fffe, 0xe, x6, 16, x9)

inst_5:
// rs1==x13, rs2==x23, rd==x20, rs2_val == 8, rs1_h1_val == 49151
// opcode: srl16 ; op1:x13; op2:x23; dest:x20; op1val:0xbfff0002;  op2val:0x8
TEST_RR_OP(srl16, x20, x13, x23, 0x00000000, 0xbfff0002, 0x8, x6, 20, x9)

inst_6:
// rs1==x12, rs2==x31, rd==x25, rs2_val == 4, rs1_h1_val == 1024, rs1_h0_val == 65023
// opcode: srl16 ; op1:x12; op2:x31; dest:x25; op1val:0x400fdff;  op2val:0x4
TEST_RR_OP(srl16, x25, x12, x31, 0x00000000, 0x400fdff, 0x4, x6, 24, x9)

inst_7:
// rs1==x29, rs2==x25, rd==x22, rs2_val == 2, rs1_h1_val == 2
// opcode: srl16 ; op1:x29; op2:x25; dest:x22; op1val:0x02000d;  op2val:0x2
TEST_RR_OP(srl16, x22, x29, x25, 0x00000000, 0x02000d, 0x2, x6, 28, x9)

inst_8:
// rs1==x27, rs2==x4, rd==x15, rs2_val == 1, 
// opcode: srl16 ; op1:x27; op2:x4; dest:x15; op1val:0x0a0012;  op2val:0x1
TEST_RR_OP(srl16, x15, x27, x4, 0x00000000, 0x0a0012, 0x1, x6, 32, x9)

inst_9:
// rs1==x14, rs2==x26, rd==x13, rs1_h1_val == 43690, rs1_h0_val == 65519
// opcode: srl16 ; op1:x14; op2:x26; dest:x13; op1val:0xaaaaffef;  op2val:0x12
TEST_RR_OP(srl16, x13, x14, x26, 0x00000000, 0xaaaaffef, 0x12, x6, 36, x9)

inst_10:
// rs1==x18, rs2==x30, rd==x8, rs1_h1_val == 21845, rs1_h0_val == 65471
// opcode: srl16 ; op1:x18; op2:x30; dest:x8; op1val:0x5555ffbf;  op2val:0xc
TEST_RR_OP(srl16, x8, x18, x30, 0x00000000, 0x5555ffbf, 0xc, x6, 40, x9)

inst_11:
// rs1==x19, rs2==x2, rd==x21, rs1_h1_val == 57343, rs1_h0_val == 65535
// opcode: srl16 ; op1:x19; op2:x2; dest:x21; op1val:0xdfffffff;  op2val:0xf
TEST_RR_OP(srl16, x21, x19, x2, 0x00000000, 0xdfffffff, 0xf, x6, 44, x9)

inst_12:
// rs1==x21, rs2==x13, rd==x29, rs1_h1_val == 61439, rs1_h0_val == 64
// opcode: srl16 ; op1:x21; op2:x13; dest:x29; op1val:0xefff0040;  op2val:0x2
TEST_RR_OP(srl16, x29, x21, x13, 0x00000000, 0xefff0040, 0x2, x6, 48, x9)

inst_13:
// rs1==x5, rs2==x0, rd==x1, rs1_h1_val == 64511, 
// opcode: srl16 ; op1:x5; op2:x0; dest:x1; op1val:0xfbffffef;  op2val:0x0
TEST_RR_OP(srl16, x1, x5, x0, 0x00000000, 0xfbffffef, 0x0, x6, 52, x9)

inst_14:
// rs1==x7, rs2==x11, rd==x12, rs1_h1_val == 65023, rs2_val == 10
// opcode: srl16 ; op1:x7; op2:x11; dest:x12; op1val:0xfdfffff7;  op2val:0xa
TEST_RR_OP(srl16, x12, x7, x11, 0x00000000, 0xfdfffff7, 0xa, x6, 56, x9)

inst_15:
// rs1==x9, rs2==x22, rd==x31, rs1_h1_val == 65279, rs1_h0_val == 0
// opcode: srl16 ; op1:x9; op2:x22; dest:x31; op1val:0xfeff0000;  op2val:0x9
TEST_RR_OP(srl16, x31, x9, x22, 0x00000000, 0xfeff0000, 0x9, x6, 60, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x1, rs2==x27, rd==x16, rs1_h1_val == 65407, rs1_h0_val == 2048
// opcode: srl16 ; op1:x1; op2:x27; dest:x16; op1val:0xff7f0800;  op2val:0x6
TEST_RR_OP(srl16, x16, x1, x27, 0x00000000, 0xff7f0800, 0x6, x3, 0, x8)

inst_17:
// rs1==x2, rs2==x9, rd==x26, rs1_h1_val == 65471, 
// opcode: srl16 ; op1:x2; op2:x9; dest:x26; op1val:0xffbf0007;  op2val:0xb
TEST_RR_OP(srl16, x26, x2, x9, 0x00000000, 0xffbf0007, 0xb, x3, 4, x8)

inst_18:
// rs1==x0, rs2==x29, rd==x6, rs1_h1_val == 65503, rs1_h0_val == 65531
// opcode: srl16 ; op1:x0; op2:x29; dest:x6; op1val:0xffdffffb;  op2val:0x8
TEST_RR_OP(srl16, x6, x0, x29, 0x00000000, 0xffdffffb, 0x8, x3, 8, x8)

inst_19:
// rs1==x24, rs2==x5, rd==x17, rs1_h1_val == 65519, rs1_h0_val == 21845
// opcode: srl16 ; op1:x24; op2:x5; dest:x17; op1val:0xffef5555;  op2val:0xf
TEST_RR_OP(srl16, x17, x24, x5, 0x00000000, 0xffef5555, 0xf, x3, 12, x8)

inst_20:
// rs1==x20, rs2==x18, rd==x24, rs1_h1_val == 65527, rs1_h0_val == 49151
// opcode: srl16 ; op1:x20; op2:x18; dest:x24; op1val:0xfff7bfff;  op2val:0x10
TEST_RR_OP(srl16, x24, x20, x18, 0x00000000, 0xfff7bfff, 0x10, x3, 16, x8)

inst_21:
// rs1==x10, rs2==x7, rd==x11, rs1_h1_val == 65531, rs1_h0_val == 65407
// opcode: srl16 ; op1:x10; op2:x7; dest:x11; op1val:0xfffbff7f;  op2val:0xd
TEST_RR_OP(srl16, x11, x10, x7, 0x00000000, 0xfffbff7f, 0xd, x3, 20, x8)

inst_22:
// rs1==x15, rs2==x19, rd==x10, rs1_h1_val == 65533, 
// opcode: srl16 ; op1:x15; op2:x19; dest:x10; op1val:0xfffd0011;  op2val:0x13
TEST_RR_OP(srl16, x10, x15, x19, 0x00000000, 0xfffd0011, 0x13, x3, 24, x8)

inst_23:
// rs1==x25, rs2==x1, rd==x5, rs1_h1_val == 65534, rs1_h0_val == 32768
// opcode: srl16 ; op1:x25; op2:x1; dest:x5; op1val:0xfffe8000;  op2val:0xe
TEST_RR_OP(srl16, x5, x25, x1, 0x00000000, 0xfffe8000, 0xe, x3, 28, x8)

inst_24:
// rs1==x6, rs2==x12, rd==x19, rs1_h1_val == 32768, rs1_h0_val == 65533
// opcode: srl16 ; op1:x6; op2:x12; dest:x19; op1val:0x8000fffd;  op2val:0xf
TEST_RR_OP(srl16, x19, x6, x12, 0x00000000, 0x8000fffd, 0xf, x3, 32, x8)

inst_25:
// rs1==x11, rs2==x14, rd==x9, rs1_h1_val == 16384, 
// opcode: srl16 ; op1:x11; op2:x14; dest:x9; op1val:0x40000002;  op2val:0xf
TEST_RR_OP(srl16, x9, x11, x14, 0x00000000, 0x40000002, 0xf, x3, 36, x8)

inst_26:
// rs1==x28, rs2==x6, rd==x27, rs1_h0_val == 16384, 
// opcode: srl16 ; op1:x28; op2:x6; dest:x27; op1val:0xdfff4000;  op2val:0xa
TEST_RR_OP(srl16, x27, x28, x6, 0x00000000, 0xdfff4000, 0xa, x3, 40, x8)

inst_27:
// rs1==x4, rs2==x10, rd==x14, rs1_h0_val == 4096, 
// opcode: srl16 ; op1:x4; op2:x10; dest:x14; op1val:0xfff71000;  op2val:0x12
TEST_RR_OP(srl16, x14, x4, x10, 0x00000000, 0xfff71000, 0x12, x3, 44, x8)

inst_28:
// rs1==x31, rs2==x21, rd==x0, rs1_h0_val == 1024, 
// opcode: srl16 ; op1:x31; op2:x21; dest:x0; op1val:0xaaaa0400;  op2val:0xf
TEST_RR_OP(srl16, x0, x31, x21, 0x00000000, 0xaaaa0400, 0xf, x3, 48, x8)

inst_29:
// rs1==x26, rs2==x17, rd==x2, rs1_h0_val == 512, 
// opcode: srl16 ; op1:x26; op2:x17; dest:x2; op1val:0xffbf0200;  op2val:0x12
TEST_RR_OP(srl16, x2, x26, x17, 0x00000000, 0xffbf0200, 0x12, x3, 52, x1)

inst_30:
// rs1==x16, rs2==x20, rd==x7, rs1_h0_val == 256, rs1_h1_val == 2048
// opcode: srl16 ; op1:x16; op2:x20; dest:x7; op1val:0x8000100;  op2val:0x0
TEST_RR_OP(srl16, x7, x16, x20, 0x00000000, 0x8000100, 0x0, x3, 56, x1)

inst_31:
// rs1==x17, rs2==x24, rd==x18, rs1_h0_val == 128, rs1_h1_val == 1
// opcode: srl16 ; op1:x17; op2:x24; dest:x18; op1val:0x010080;  op2val:0x11
TEST_RR_OP(srl16, x18, x17, x24, 0x00000000, 0x010080, 0x11, x3, 60, x1)

inst_32:
// rs1_h0_val == 32, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020;  op2val:0xf
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xefff0020, 0xf, x3, 64, x1)

inst_33:
// rs1_h0_val == 16, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0010;  op2val:0xe
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x0e0010, 0xe, x3, 68, x1)

inst_34:
// rs1_h0_val == 8, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000008;  op2val:0xc
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x40000008, 0xc, x3, 72, x1)

inst_35:
// rs1_h0_val == 4, rs1_h1_val == 512
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000004;  op2val:0x12
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x2000004, 0x12, x3, 76, x1)

inst_36:
// rs1_h0_val == 1, rs1_h1_val == 8192
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000001;  op2val:0x8
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x20000001, 0x8, x3, 80, x1)

inst_37:
// rs1_h1_val == 4096, rs1_h0_val == 57343
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000dfff;  op2val:0x12
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x1000dfff, 0x12, x3, 84, x1)

inst_38:
// rs1_h1_val == 256, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffbf;  op2val:0x13
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x100ffbf, 0x13, x3, 88, x1)

inst_39:
// rs1_h1_val == 128, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000d;  op2val:0x13
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x80000d, 0x13, x3, 92, x1)

inst_40:
// rs1_h1_val == 64, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffef;  op2val:0xf
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x40ffef, 0xf, x3, 96, x1)

inst_41:
// rs1_h1_val == 32, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x6
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x200000, 0x6, x3, 100, x1)

inst_42:
// rs1_h1_val == 16, rs1_h0_val == 63487
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff;  op2val:0x10
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x10f7ff, 0x10, x3, 104, x1)

inst_43:
// rs1_h1_val == 8, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000b;  op2val:0xb
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x08000b, 0xb, x3, 108, x1)

inst_44:
// rs1_h0_val == 61439, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x06efff;  op2val:0x11
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x06efff, 0x11, x3, 112, x1)

inst_45:
// rs1_h0_val == 64511, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffbff;  op2val:0x2
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x0ffbff, 0x2, x3, 116, x1)

inst_46:
// rs1_h1_val == 4, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0x1
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x041000, 0x1, x3, 120, x1)

inst_47:
// rs1_h0_val == 65503, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdf;  op2val:0x12
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xaaaaffdf, 0x12, x3, 124, x1)

inst_48:
// rs1_h1_val == 65535, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x6
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xfffffffe, 0x6, x3, 128, x1)

inst_49:
// rs1_h0_val == 43690, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa;  op2val:0xf
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x08aaaa, 0xf, x3, 132, x1)

inst_50:
// rs1_h0_val == 32767, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x117fff;  op2val:0xb
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x117fff, 0xb, x3, 136, x1)

inst_51:
// rs2_val == 7, rs1_h1_val == 0, rs1_h0_val == 65279
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0x00feff;  op2val:0x7
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0x00feff, 0x7, x3, 140, x1)

inst_52:
// rs2_val == 13, rs1_h0_val == 2, rs1_h1_val == 63487
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0002;  op2val:0xd
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xf7ff0002, 0xd, x3, 144, x1)

inst_53:
// rs1_h1_val == 64511, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef;  op2val:0x13
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xfbffffef, 0x13, x3, 148, x1)

inst_54:
// rs1_h1_val == 65503, rs1_h0_val == 65531
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb;  op2val:0x8
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xffdffffb, 0x8, x3, 152, x1)

inst_55:
// rs1_h0_val == 1024, 
// opcode: srl16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0400;  op2val:0xf
TEST_RR_OP(srl16, x31, x30, x29, 0x00000000, 0xaaaa0400, 0xf, x3, 156, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
