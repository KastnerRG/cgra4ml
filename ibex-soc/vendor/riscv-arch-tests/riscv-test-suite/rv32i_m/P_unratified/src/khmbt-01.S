
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmbt instruction of the RISC-V RV32PZicsr extension for the khmbt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmbt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x14, rd==x24, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -16385
// opcode: khmbt ; op1:x21; op2:x14; dest:x24; op1val:0xfff98000;  op2val:0xfff6bfff
TEST_PKRR_OP(khmbt, x24, x21, x14, 0x00000000, 0xfff98000, 0xfff6bfff, x21, x8, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x20, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: khmbt ; op1:x28; op2:x28; dest:x20; op1val:0x3ffffff8;  op2val:0x3fff2000
TEST_PKRR_OP(khmbt, x20, x28, x28, 0x00000000, 0x3ffffff8, 0x3fff2000, x28, x8, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x22, rd==x29, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 512, rs1_h0_val == 1, rs2_h1_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: khmbt ; op1:x29; op2:x22; dest:x29; op1val:0xfff80001;  op2val:0x080200
TEST_PKRR_OP(khmbt, x29, x29, x22, 0x00000000, 0xfff80001, 0x080200, x29, x8, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -65, rs2_h0_val == -33, rs1_h0_val == -9
// opcode: khmbt ; op1:x0; op2:x0; dest:x0; op1val:0x3ffffff7;  op2val:0xffbfffdf
TEST_PKRR_OP(khmbt, x0, x0, x0, 0x00000000, 0x3ffffff7, 0xffbfffdf, x0, x8, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x21, rd==x21, rs1_h0_val == rs2_h0_val, rs1_h1_val == 16384
// opcode: khmbt ; op1:x22; op2:x21; dest:x21; op1val:0x4000fff6;  op2val:0x09fff6
TEST_PKRR_OP(khmbt, x21, x22, x21, 0x00000000, 0x4000fff6, 0x09fff6, x22, x8, 32, x13)

inst_5:
// rs1==x14, rs2==x27, rd==x4, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -8193, rs1_h0_val == 8
// opcode: khmbt ; op1:x14; op2:x27; dest:x4; op1val:0xdfff0008;  op2val:0xfffafffa
TEST_PKRR_OP(khmbt, x4, x14, x27, 0x00000000, 0xdfff0008, 0xfffafffa, x14, x8, 40, x13)

inst_6:
// rs1==x27, rs2==x15, rd==x12, rs2_h1_val == -21846, 
// opcode: khmbt ; op1:x27; op2:x15; dest:x12; op1val:0xc000fffa;  op2val:0xaaaafff8
TEST_PKRR_OP(khmbt, x12, x27, x15, 0x00000000, 0xc000fffa, 0xaaaafff8, x27, x8, 48, x13)

inst_7:
// rs1==x3, rs2==x6, rd==x26, rs2_h1_val == 21845, rs1_h0_val == -257, rs2_h0_val == 64
// opcode: khmbt ; op1:x3; op2:x6; dest:x26; op1val:0xc000feff;  op2val:0x55550040
TEST_PKRR_OP(khmbt, x26, x3, x6, 0x00000000, 0xc000feff, 0x55550040, x3, x8, 56, x13)

inst_8:
// rs1==x19, rs2==x23, rd==x27, rs2_h1_val == 32767, rs1_h0_val == 512, rs1_h1_val == 32
// opcode: khmbt ; op1:x19; op2:x23; dest:x27; op1val:0x200200;  op2val:0x7fff2000
TEST_PKRR_OP(khmbt, x27, x19, x23, 0x00000000, 0x200200, 0x7fff2000, x19, x8, 64, x13)

inst_9:
// rs1==x10, rs2==x20, rd==x11, rs2_h1_val == -16385, rs1_h0_val == -4097
// opcode: khmbt ; op1:x10; op2:x20; dest:x11; op1val:0x3fffefff;  op2val:0xbfffffdf
TEST_PKRR_OP(khmbt, x11, x10, x20, 0x00000000, 0x3fffefff, 0xbfffffdf, x10, x8, 72, x13)

inst_10:
// rs1==x25, rs2==x29, rd==x28, rs2_h1_val == -8193, rs1_h0_val == -3
// opcode: khmbt ; op1:x25; op2:x29; dest:x28; op1val:0xfff8fffd;  op2val:0xdfff0040
TEST_PKRR_OP(khmbt, x28, x25, x29, 0x00000000, 0xfff8fffd, 0xdfff0040, x25, x8, 80, x13)

inst_11:
// rs1==x31, rs2==x30, rd==x6, rs2_h1_val == -4097, rs1_h0_val == 128, rs2_h0_val == 32767, rs1_h1_val == 0
// opcode: khmbt ; op1:x31; op2:x30; dest:x6; op1val:0x000080;  op2val:0xefff7fff
TEST_PKRR_OP(khmbt, x6, x31, x30, 0x00000000, 0x000080, 0xefff7fff, x31, x8, 88, x13)

inst_12:
// rs1==x18, rs2==x12, rd==x1, rs2_h1_val == -2049, rs1_h0_val == -21846
// opcode: khmbt ; op1:x18; op2:x12; dest:x1; op1val:0xc000aaaa;  op2val:0xf7ff3fff
TEST_PKRR_OP(khmbt, x1, x18, x12, 0x00000000, 0xc000aaaa, 0xf7ff3fff, x18, x8, 96, x13)

inst_13:
// rs1==x30, rs2==x7, rd==x9, rs2_h1_val == -1025, rs1_h1_val == -4097, rs1_h0_val == -17
// opcode: khmbt ; op1:x30; op2:x7; dest:x9; op1val:0xefffffef;  op2val:0xfbff0009
TEST_PKRR_OP(khmbt, x9, x30, x7, 0x00000000, 0xefffffef, 0xfbff0009, x30, x8, 104, x13)

inst_14:
// rs1==x5, rs2==x11, rd==x2, rs2_h1_val == -513, 
// opcode: khmbt ; op1:x5; op2:x11; dest:x2; op1val:0x070003;  op2val:0xfdff0009
TEST_PKRR_OP(khmbt, x2, x5, x11, 0x00000000, 0x070003, 0xfdff0009, x5, x8, 112, x13)
RVTEST_SIGBASE(x21,signature_x21_0)

inst_15:
// rs1==x11, rs2==x3, rd==x8, rs2_h1_val == -257, rs1_h1_val == -2049, rs1_h0_val == 4
// opcode: khmbt ; op1:x11; op2:x3; dest:x8; op1val:0xf7ff0004;  op2val:0xfeff2000
TEST_PKRR_OP(khmbt, x8, x11, x3, 0x00000000, 0xf7ff0004, 0xfeff2000, x11, x21, 0, x12)

inst_16:
// rs1==x13, rs2==x31, rd==x17, rs2_h1_val == -129, rs1_h1_val == -33
// opcode: khmbt ; op1:x13; op2:x31; dest:x17; op1val:0xffdf0005;  op2val:0xff7ffffc
TEST_PKRR_OP(khmbt, x17, x13, x31, 0x00000000, 0xffdf0005, 0xff7ffffc, x13, x21, 8, x12)

inst_17:
// rs1==x4, rs2==x9, rd==x22, rs2_h1_val == -33, rs1_h0_val == 16384
// opcode: khmbt ; op1:x4; op2:x9; dest:x22; op1val:0xfff94000;  op2val:0xffdfbfff
TEST_PKRR_OP(khmbt, x22, x4, x9, 0x00000000, 0xfff94000, 0xffdfbfff, x4, x21, 16, x12)

inst_18:
// rs1==x16, rs2==x10, rd==x14, rs2_h1_val == -17, 
// opcode: khmbt ; op1:x16; op2:x10; dest:x14; op1val:0x40008000;  op2val:0xffeffffc
TEST_PKRR_OP(khmbt, x14, x16, x10, 0x00000000, 0x40008000, 0xffeffffc, x16, x21, 24, x12)

inst_19:
// rs1==x23, rs2==x17, rd==x30, rs2_h1_val == -9, rs2_h0_val == -257, rs1_h0_val == -65
// opcode: khmbt ; op1:x23; op2:x17; dest:x30; op1val:0xfff8ffbf;  op2val:0xfff7feff
TEST_PKRR_OP(khmbt, x30, x23, x17, 0x00000000, 0xfff8ffbf, 0xfff7feff, x23, x21, 32, x12)

inst_20:
// rs1==x15, rs2==x2, rd==x25, rs2_h1_val == -5, rs1_h1_val == 8
// opcode: khmbt ; op1:x15; op2:x2; dest:x25; op1val:0x08fff6;  op2val:0xfffb0040
TEST_PKRR_OP(khmbt, x25, x15, x2, 0x00000000, 0x08fff6, 0xfffb0040, x15, x21, 40, x12)

inst_21:
// rs1==x9, rs2==x5, rd==x15, rs2_h1_val == -3, rs1_h0_val == -8193, rs2_h0_val == 32
// opcode: khmbt ; op1:x9; op2:x5; dest:x15; op1val:0x4000dfff;  op2val:0xfffd0020
TEST_PKRR_OP(khmbt, x15, x9, x5, 0x00000000, 0x4000dfff, 0xfffd0020, x9, x21, 48, x12)

inst_22:
// rs1==x24, rs2==x8, rd==x13, rs2_h1_val == -2, rs1_h0_val == 21845, rs2_h0_val == -1
// opcode: khmbt ; op1:x24; op2:x8; dest:x13; op1val:0xfff65555;  op2val:0xfffeffff
TEST_PKRR_OP(khmbt, x13, x24, x8, 0x00000000, 0xfff65555, 0xfffeffff, x24, x21, 56, x12)

inst_23:
// rs1==x7, rs2==x19, rd==x10, rs2_h1_val == -32768, 
// opcode: khmbt ; op1:x7; op2:x19; dest:x10; op1val:0x07ffef;  op2val:0x8000fff9
TEST_PKRR_OP(khmbt, x10, x7, x19, 0x00000000, 0x07ffef, 0x8000fff9, x7, x21, 64, x12)

inst_24:
// rs1==x1, rs2==x4, rd==x7, rs2_h1_val == 16384, rs1_h0_val == -129, rs2_h0_val == -2049
// opcode: khmbt ; op1:x1; op2:x4; dest:x7; op1val:0x20ff7f;  op2val:0x4000f7ff
TEST_PKRR_OP(khmbt, x7, x1, x4, 0x00000000, 0x20ff7f, 0x4000f7ff, x1, x21, 72, x12)

inst_25:
// rs1==x6, rs2==x24, rd==x16, rs2_h1_val == 8192, rs1_h1_val == -65
// opcode: khmbt ; op1:x6; op2:x24; dest:x16; op1val:0xffbf0005;  op2val:0x20007fff
TEST_PKRR_OP(khmbt, x16, x6, x24, 0x00000000, 0xffbf0005, 0x20007fff, x6, x21, 80, x12)

inst_26:
// rs1==x2, rs2==x26, rd==x31, rs2_h1_val == 4096, rs2_h0_val == -513, rs1_h1_val == 256
// opcode: khmbt ; op1:x2; op2:x26; dest:x31; op1val:0x100fff6;  op2val:0x1000fdff
TEST_PKRR_OP(khmbt, x31, x2, x26, 0x00000000, 0x100fff6, 0x1000fdff, x2, x21, 88, x12)

inst_27:
// rs1==x26, rs2==x16, rd==x19, rs2_h1_val == 2048, rs1_h0_val == -5, rs2_h0_val == -32768
// opcode: khmbt ; op1:x26; op2:x16; dest:x19; op1val:0x08fffb;  op2val:0x8008000
TEST_PKRR_OP(khmbt, x19, x26, x16, 0x00000000, 0x08fffb, 0x8008000, x26, x21, 96, x12)

inst_28:
// rs1==x8, rs2==x18, rd==x23, rs2_h1_val == 1024, rs1_h0_val == 64, rs1_h1_val == -1025, rs2_h0_val == -17
// opcode: khmbt ; op1:x8; op2:x18; dest:x23; op1val:0xfbff0040;  op2val:0x400ffef
TEST_PKRR_OP(khmbt, x23, x8, x18, 0x00000000, 0xfbff0040, 0x400ffef, x8, x21, 104, x12)

inst_29:
// rs1==x20, rs2==x1, rd==x5, rs2_h1_val == 512, 
// opcode: khmbt ; op1:x20; op2:x1; dest:x5; op1val:0xffbffff8;  op2val:0x200f7ff
TEST_PKRR_OP(khmbt, x5, x20, x1, 0x00000000, 0xffbffff8, 0x200f7ff, x20, x21, 112, x12)

inst_30:
// rs1==x17, rs2==x13, rd==x3, rs2_h1_val == 256, rs2_h0_val == -3
// opcode: khmbt ; op1:x17; op2:x13; dest:x3; op1val:0xfff6feff;  op2val:0x100fffd
TEST_PKRR_OP(khmbt, x3, x17, x13, 0x00000000, 0xfff6feff, 0x100fffd, x17, x21, 120, x2)

inst_31:
// rs1==x12, rs2==x25, rd==x18, rs2_h1_val == 128, rs1_h1_val == -3, rs2_h0_val == -8193, rs1_h0_val == 1024
// opcode: khmbt ; op1:x12; op2:x25; dest:x18; op1val:0xfffd0400;  op2val:0x80dfff
TEST_PKRR_OP(khmbt, x18, x12, x25, 0x00000000, 0xfffd0400, 0x80dfff, x12, x21, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h1_val == 64, rs2_h0_val == 21845, rs1_h1_val == 2, rs1_h0_val == 4096
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x021000;  op2val:0x405555
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x021000, 0x405555, x30, x1, 0, x2)

inst_33:
// rs2_h1_val == 32, rs1_h1_val == 8192, rs1_h0_val == -16385
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff;  op2val:0x200009
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x2000bfff, 0x200009, x30, x1, 8, x2)

inst_34:
// rs2_h1_val == 16, rs1_h1_val == -9
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff8;  op2val:0x10f7ff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfff7fff8, 0x10f7ff, x30, x1, 16, x2)

inst_35:
// rs1_h0_val == -1025, rs2_h1_val == 4, rs1_h1_val == 128
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x80fbff;  op2val:0x043fff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x80fbff, 0x043fff, x30, x1, 24, x2)

inst_36:
// rs1_h0_val == -513, rs2_h0_val == 1
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x05fdff;  op2val:0x55550001
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x05fdff, 0x55550001, x30, x1, 32, x2)

inst_37:
// rs1_h0_val == -33, rs2_h0_val == 0
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf;  op2val:0xfff60000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xffdfffdf, 0xfff60000, x30, x1, 40, x2)

inst_38:
// rs1_h0_val == -2, rs2_h0_val == -2
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffe;  op2val:0xfffafffe
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffafffe, 0xfffafffe, x30, x1, 48, x2)

inst_39:
// rs1_h0_val == 8192, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x202000;  op2val:0xfffedfff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x202000, 0xfffedfff, x30, x1, 56, x2)

inst_40:
// rs1_h0_val == 2048, rs1_h1_val == -513, rs2_h1_val == 0
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0800;  op2val:0x005555
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfdff0800, 0x005555, x30, x1, 64, x2)

inst_41:
// rs1_h0_val == 256, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0100;  op2val:0xfffaffef
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xffdf0100, 0xfffaffef, x30, x1, 72, x2)

inst_42:
// rs1_h0_val == 32, rs2_h0_val == -4097
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0020;  op2val:0xaaaaefff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfbff0020, 0xaaaaefff, x30, x1, 80, x2)

inst_43:
// rs1_h0_val == 16, rs2_h0_val == 4
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0010;  op2val:0xfffa0004
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffd0010, 0xfffa0004, x30, x1, 88, x2)

inst_44:
// rs1_h0_val == 2, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0002;  op2val:0xfffe0020
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfdff0002, 0xfffe0020, x30, x1, 96, x2)

inst_45:
// rs1_h0_val == 0, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0000;  op2val:0xfbff5555
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xffbf0000, 0xfbff5555, x30, x1, 104, x2)

inst_46:
// rs1_h0_val == -1, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffff;  op2val:0x40bfff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfff8ffff, 0x40bfff, x30, x1, 112, x2)

inst_47:
// rs2_h1_val == 2, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800;  op2val:0x020005
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfff80800, 0x020005, x30, x1, 120, x2)

inst_48:
// rs2_h1_val == 1, rs1_h1_val == -5
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaa;  op2val:0x013fff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffbaaaa, 0x013fff, x30, x1, 128, x2)

inst_49:
// rs2_h1_val == -1, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0002;  op2val:0xfffffffa
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xf7ff0002, 0xfffffffa, x30, x1, 136, x2)

inst_50:
// rs2_h0_val == -21846, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20000010;  op2val:0x02aaaa
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x20000010, 0x02aaaa, x30, x1, 144, x2)

inst_51:
// rs2_h0_val == -1025, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0100;  op2val:0xfffcfbff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfbff0100, 0xfffcfbff, x30, x1, 152, x2)

inst_52:
// rs2_h0_val == -129, rs1_h1_val == -129
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0002;  op2val:0xfeffff7f
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xff7f0002, 0xfeffff7f, x30, x1, 160, x2)

inst_53:
// rs2_h0_val == -65, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x060000;  op2val:0x02ffbf
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x060000, 0x02ffbf, x30, x1, 168, x2)

inst_54:
// rs2_h0_val == -5, rs1_h1_val == 21845
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff9;  op2val:0x03fffb
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x5555fff9, 0x03fffb, x30, x1, 176, x2)

inst_55:
// rs2_h0_val == 16384, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbefff;  op2val:0x204000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffbefff, 0x204000, x30, x1, 184, x2)

inst_56:
// rs2_h0_val == 4096, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feff;  op2val:0xfffb1000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfff7feff, 0xfffb1000, x30, x1, 192, x2)

inst_57:
// rs2_h0_val == 2048, rs1_h1_val == 1024
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x400c000;  op2val:0xfeff0800
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x400c000, 0xfeff0800, x30, x1, 200, x2)

inst_58:
// rs2_h0_val == 1024, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x80ffef;  op2val:0x030400
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x80ffef, 0x030400, x30, x1, 208, x2)

inst_59:
// rs2_h0_val == 256, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffb;  op2val:0x2000100
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffcfffb, 0x2000100, x30, x1, 216, x2)

inst_60:
// rs2_h0_val == 128, rs1_h1_val == -257
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffdfff;  op2val:0xc0000080
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfeffdfff, 0xc0000080, x30, x1, 224, x2)

inst_61:
// rs2_h0_val == 16, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x070005;  op2val:0x020010
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x070005, 0x020010, x30, x1, 232, x2)

inst_62:
// rs2_h0_val == 8, rs1_h1_val == 4096
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd;  op2val:0xaaaa0008
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x1000fffd, 0xaaaa0008, x30, x1, 240, x2)

inst_63:
// rs2_h0_val == 2, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20000006;  op2val:0x010002
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x20000006, 0x010002, x30, x1, 248, x2)

inst_64:
// rs1_h1_val == -21846, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac000;  op2val:0x80000000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xaaaac000, 0x80000000, x30, x1, 256, x2)

inst_65:
// rs1_h1_val == -17, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffef0002;  op2val:0xfff68000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xffef0002, 0xfff68000, x30, x1, 264, x2)

inst_66:
// rs1_h1_val == -2, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0003;  op2val:0x8000fffa
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffe0003, 0x8000fffa, x30, x1, 272, x2)

inst_67:
// rs1_h1_val == -32768, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa;  op2val:0xeffffff8
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x8000aaaa, 0xeffffff8, x30, x1, 280, x2)

inst_68:
// rs1_h1_val == 2048, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa;  op2val:0xdfff2000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x800aaaa, 0xdfff2000, x30, x1, 288, x2)

inst_69:
// rs1_h1_val == 512, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x2000010;  op2val:0xdfff7fff
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x2000010, 0xdfff7fff, x30, x1, 296, x2)

inst_70:
// rs1_h0_val == -2049, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7ff;  op2val:0xfffcfffc
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x4000f7ff, 0xfffcfffc, x30, x1, 304, x2)

inst_71:
// rs1_h1_val == 64, rs2_h0_val == -9
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x40ffef;  op2val:0xfffcfff7
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x40ffef, 0xfffcfff7, x30, x1, 312, x2)

inst_72:
// rs1_h1_val == 16, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x101000;  op2val:0x2000020
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x101000, 0x2000020, x30, x1, 320, x2)

inst_73:
// rs1_h1_val == 4, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x04fffa;  op2val:0x032000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x04fffa, 0x032000, x30, x1, 328, x2)

inst_74:
// rs1_h1_val == 1, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x01efff;  op2val:0xff7fffef
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x01efff, 0xff7fffef, x30, x1, 336, x2)

inst_75:
// rs1_h1_val == -16385, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002;  op2val:0xffff8000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xbfff0002, 0xffff8000, x30, x1, 344, x2)

inst_76:
// rs1_h1_val == -1, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa;  op2val:0xfbff0800
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0xfffffffa, 0xfbff0800, x30, x1, 352, x2)

inst_77:
// rs1_h0_val == 32767, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7fff;  op2val:0x090002
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x3fff7fff, 0x090002, x30, x1, 360, x2)

inst_78:
// rs1_h1_val == 32767, 
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf;  op2val:0xfffb0000
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x7fffffdf, 0xfffb0000, x30, x1, 368, x2)

inst_79:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -65, rs2_h0_val == -33, rs1_h0_val == -9
// opcode: khmbt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff7;  op2val:0xffbfffdf
TEST_PKRR_OP(khmbt, x31, x30, x29, 0x00000000, 0x3ffffff7, 0xffbfffdf, x30, x1, 376, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x21_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
