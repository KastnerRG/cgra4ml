
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmplt8 instruction of the RISC-V RV32PZicsr extension for the scmplt8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmplt8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x22, rd==x13, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val == 2, rs2_b0_val == 4, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b2_val == -1, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b2_val == 32, rs2_b3_val == 85
// opcode: scmplt8 ; op1:x20; op2:x22; dest:x13; op1val:0x2fffc80;  op2val:0x5520fa04
TEST_RR_OP(scmplt8, x13, x20, x22, 0x00000000, 0x2fffc80, 0x5520fa04, x7, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x30, rs1_b3_val == rs2_b3_val, rs2_b3_val == -2, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b0_val == 2, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == -2, rs1_b1_val == 85, rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: scmplt8 ; op1:x3; op2:x3; dest:x30; op1val:0xfe065506;  op2val:0xfef93f02
TEST_RR_OP(scmplt8, x30, x3, x3, 0x00000000, 0xfe065506, 0xfef93f02, x7, 4, x11)

inst_2:
// rs1 == rd != rs2, rs1==x0, rs2==x16, rd==x0, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == -86, rs1_b2_val == -33, rs1_b3_val == -17, rs1_b0_val == 8, rs2_b2_val == 16
// opcode: scmplt8 ; op1:x0; op2:x16; dest:x0; op1val:0xefdff908;  op2val:0x5510aa09
TEST_RR_OP(scmplt8, x0, x0, x16, 0x00000000, 0xefdff908, 0x5510aa09, x7, 8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b1_val == -1, rs1_b2_val == -2, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val == 32, rs2_b2_val == -33, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b0_val == -9
// opcode: scmplt8 ; op1:x5; op2:x5; dest:x5; op1val:0x7ffeff20;  op2val:0xfedf09f7
TEST_RR_OP(scmplt8, x5, x5, x5, 0x00000000, 0x7ffeff20, 0xfedf09f7, x7, 12, x11)

inst_4:
// rs2 == rd != rs1, rs1==x10, rs2==x24, rd==x24, rs1_b2_val == rs2_b2_val, rs2_b3_val == 16, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 1, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b2_val == 1
// opcode: scmplt8 ; op1:x10; op2:x24; dest:x24; op1val:0x7f01f8c0;  op2val:0x10013ff6
TEST_RR_OP(scmplt8, x24, x10, x24, 0x00000000, 0x7f01f8c0, 0x10013ff6, x7, 16, x11)

inst_5:
// rs1==x23, rs2==x20, rd==x10, rs1_b1_val == rs2_b1_val, rs1_b0_val == 85, rs2_b0_val == 0
// opcode: scmplt8 ; op1:x23; op2:x20; dest:x10; op1val:0xf6f60955;  op2val:0xc0050900
TEST_RR_OP(scmplt8, x10, x23, x20, 0x00000000, 0xf6f60955, 0xc0050900, x7, 20, x11)

inst_6:
// rs1==x24, rs2==x17, rd==x6, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b3_val == -5, rs1_b0_val == 1, rs2_b2_val == 127
// opcode: scmplt8 ; op1:x24; op2:x17; dest:x6; op1val:0xfe033f01;  op2val:0xfb7faaf9
TEST_RR_OP(scmplt8, x6, x24, x17, 0x00000000, 0xfe033f01, 0xfb7faaf9, x7, 24, x11)

inst_7:
// rs1==x14, rs2==x28, rd==x29, rs1_b0_val == rs2_b0_val, rs1_b2_val == 16, rs2_b2_val == 8, rs1_b3_val == -65, rs2_b1_val == -17
// opcode: scmplt8 ; op1:x14; op2:x28; dest:x29; op1val:0xbf10f607;  op2val:0x1008ef07
TEST_RR_OP(scmplt8, x29, x14, x28, 0x00000000, 0xbf10f607, 0x1008ef07, x7, 28, x11)

inst_8:
// rs1==x28, rs2==x21, rd==x3, rs2_b3_val == -86, rs1_b3_val == 85, rs2_b1_val == 1, rs1_b0_val == -1, rs2_b2_val == 64, rs1_b1_val == 8
// opcode: scmplt8 ; op1:x28; op2:x21; dest:x3; op1val:0x553f08ff;  op2val:0xaa400106
TEST_RR_OP(scmplt8, x3, x28, x21, 0x00000000, 0x553f08ff, 0xaa400106, x7, 32, x11)

inst_9:
// rs1==x16, rs2==x10, rd==x23, rs2_b3_val == 127, 
// opcode: scmplt8 ; op1:x16; op2:x10; dest:x23; op1val:0x6f9073f;  op2val:0x7f2003f7
TEST_RR_OP(scmplt8, x23, x16, x10, 0x00000000, 0x6f9073f, 0x7f2003f7, x7, 36, x11)

inst_10:
// rs1==x8, rs2==x27, rd==x1, rs2_b3_val == -65, rs1_b2_val == -65, rs2_b1_val == 64, rs1_b0_val == -2, rs1_b1_val == 127, rs2_b0_val == -17
// opcode: scmplt8 ; op1:x8; op2:x27; dest:x1; op1val:0x9bf7ffe;  op2val:0xbf0740ef
TEST_RR_OP(scmplt8, x1, x8, x27, 0x00000000, 0x9bf7ffe, 0xbf0740ef, x7, 40, x11)

inst_11:
// rs1==x1, rs2==x2, rd==x20, rs2_b3_val == -33, rs2_b1_val == -5, rs1_b0_val == -5, rs1_b1_val == -86, rs2_b0_val == -5, rs1_b2_val == 85, rs2_b2_val == 0
// opcode: scmplt8 ; op1:x1; op2:x2; dest:x20; op1val:0x955aafb;  op2val:0xdf00fbfb
TEST_RR_OP(scmplt8, x20, x1, x2, 0x00000000, 0x955aafb, 0xdf00fbfb, x7, 44, x11)

inst_12:
// rs1==x2, rs2==x4, rd==x16, rs2_b3_val == -17, rs1_b0_val == 127, rs2_b0_val == -3, rs2_b1_val == 8
// opcode: scmplt8 ; op1:x2; op2:x4; dest:x16; op1val:0x903fa7f;  op2val:0xef4008fd
TEST_RR_OP(scmplt8, x16, x2, x4, 0x00000000, 0x903fa7f, 0xef4008fd, x7, 48, x11)

inst_13:
// rs1==x25, rs2==x15, rd==x22, rs2_b3_val == -9, rs2_b0_val == 8, rs1_b3_val == -33, rs2_b2_val == -65, rs2_b1_val == 4, rs1_b1_val == -17
// opcode: scmplt8 ; op1:x25; op2:x15; dest:x22; op1val:0xdfc0ef55;  op2val:0xf7bf0408
TEST_RR_OP(scmplt8, x22, x25, x15, 0x00000000, 0xdfc0ef55, 0xf7bf0408, x7, 52, x11)

inst_14:
// rs1==x31, rs2==x9, rd==x19, rs2_b3_val == -3, rs1_b2_val == 32, rs2_b2_val == -17, rs1_b3_val == -1
// opcode: scmplt8 ; op1:x31; op2:x9; dest:x19; op1val:0xff20fa07;  op2val:0xfdef05fb
TEST_RR_OP(scmplt8, x19, x31, x9, 0x00000000, 0xff20fa07, 0xfdef05fb, x7, 56, x11)

inst_15:
// rs1==x22, rs2==x14, rd==x8, rs2_b3_val == -128, rs1_b3_val == 1, rs1_b0_val == -3, rs1_b1_val == -33, rs2_b1_val == -9
// opcode: scmplt8 ; op1:x22; op2:x14; dest:x8; op1val:0x13fdffd;  op2val:0x80bff7f7
TEST_RR_OP(scmplt8, x8, x22, x14, 0x00000000, 0x13fdffd, 0x80bff7f7, x7, 60, x5)

inst_16:
// rs1==x27, rs2==x31, rd==x26, rs2_b3_val == 64, rs1_b1_val == -65, rs1_b2_val == 4, rs1_b3_val == 8
// opcode: scmplt8 ; op1:x27; op2:x31; dest:x26; op1val:0x804bffd;  op2val:0x40eff9f8
TEST_RR_OP(scmplt8, x26, x27, x31, 0x00000000, 0x804bffd, 0x40eff9f8, x7, 64, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x18, rs2==x29, rd==x11, rs2_b3_val == 32, 
// opcode: scmplt8 ; op1:x18; op2:x29; dest:x11; op1val:0xefdf06fd;  op2val:0x2007fb05
TEST_RR_OP(scmplt8, x11, x18, x29, 0x00000000, 0xefdf06fd, 0x2007fb05, x3, 0, x5)

inst_18:
// rs1==x15, rs2==x11, rd==x27, rs2_b3_val == 8, rs2_b1_val == -128, rs2_b2_val == 4, rs1_b0_val == -9
// opcode: scmplt8 ; op1:x15; op2:x11; dest:x27; op1val:0x6f803f7;  op2val:0x804803f
TEST_RR_OP(scmplt8, x27, x15, x11, 0x00000000, 0x6f803f7, 0x804803f, x3, 4, x5)

inst_19:
// rs1==x21, rs2==x1, rd==x31, rs2_b3_val == 4, rs1_b1_val == -5, rs2_b1_val == 2, rs1_b0_val == 64
// opcode: scmplt8 ; op1:x21; op2:x1; dest:x31; op1val:0xff05fb40;  op2val:0x4fa0204
TEST_RR_OP(scmplt8, x31, x21, x1, 0x00000000, 0xff05fb40, 0x4fa0204, x3, 8, x5)

inst_20:
// rs1==x9, rs2==x0, rd==x4, rs2_b3_val == 2, rs2_b2_val == -1
// opcode: scmplt8 ; op1:x9; op2:x0; dest:x4; op1val:0xf601df55;  op2val:0x2fffcf7
TEST_RR_OP(scmplt8, x4, x9, x0, 0x00000000, 0xf601df55, 0x2fffcf7, x3, 12, x5)

inst_21:
// rs1==x30, rs2==x13, rd==x21, rs2_b3_val == 1, rs2_b0_val == 16, rs2_b1_val == -1
// opcode: scmplt8 ; op1:x30; op2:x13; dest:x21; op1val:0xff060503;  op2val:0x105ff10
TEST_RR_OP(scmplt8, x21, x30, x13, 0x00000000, 0xff060503, 0x105ff10, x3, 16, x5)

inst_22:
// rs1==x4, rs2==x7, rd==x17, rs2_b3_val == 0, rs1_b1_val == 4, rs1_b2_val == 127
// opcode: scmplt8 ; op1:x4; op2:x7; dest:x17; op1val:0x57f04f9;  op2val:0x0003f7
TEST_RR_OP(scmplt8, x17, x4, x7, 0x00000000, 0x57f04f9, 0x0003f7, x3, 20, x5)

inst_23:
// rs1==x29, rs2==x8, rd==x18, rs2_b3_val == -1, rs1_b3_val == 4, rs2_b0_val == -33, rs1_b2_val == -9, rs1_b0_val == -65
// opcode: scmplt8 ; op1:x29; op2:x8; dest:x18; op1val:0x4f707bf;  op2val:0xff7ff9df
TEST_RR_OP(scmplt8, x18, x29, x8, 0x00000000, 0x4f707bf, 0xff7ff9df, x3, 24, x5)

inst_24:
// rs1==x26, rs2==x6, rd==x7, rs2_b2_val == -86, rs1_b0_val == 0
// opcode: scmplt8 ; op1:x26; op2:x6; dest:x7; op1val:0x5506fc00;  op2val:0x55aaf710
TEST_RR_OP(scmplt8, x7, x26, x6, 0x00000000, 0x5506fc00, 0x55aaf710, x3, 28, x5)

inst_25:
// rs1==x7, rs2==x18, rd==x28, rs1_b2_val == -17, rs2_b0_val == 64, rs1_b3_val == -86, rs2_b2_val == 2, rs2_b1_val == 16
// opcode: scmplt8 ; op1:x7; op2:x18; dest:x28; op1val:0xaaef0780;  op2val:0x55021040
TEST_RR_OP(scmplt8, x28, x7, x18, 0x00000000, 0xaaef0780, 0x55021040, x3, 32, x5)

inst_26:
// rs1==x11, rs2==x26, rd==x9, rs1_b2_val == -5, rs1_b0_val == 16
// opcode: scmplt8 ; op1:x11; op2:x26; dest:x9; op1val:0x1fbf610;  op2val:0xdf40fcf8
TEST_RR_OP(scmplt8, x9, x11, x26, 0x00000000, 0x1fbf610, 0xdf40fcf8, x3, 36, x5)

inst_27:
// rs1==x19, rs2==x12, rd==x14, rs1_b2_val == -3, rs1_b0_val == -33
// opcode: scmplt8 ; op1:x19; op2:x12; dest:x14; op1val:0xc0fdffdf;  op2val:0x47f80fb
TEST_RR_OP(scmplt8, x14, x19, x12, 0x00000000, 0xc0fdffdf, 0x47f80fb, x3, 40, x5)

inst_28:
// rs1==x12, rs2==x30, rd==x25, rs1_b2_val == -128, 
// opcode: scmplt8 ; op1:x12; op2:x30; dest:x25; op1val:0xf68055fa;  op2val:0x5faf9f6
TEST_RR_OP(scmplt8, x25, x12, x30, 0x00000000, 0xf68055fa, 0x5faf9f6, x3, 44, x5)

inst_29:
// rs1==x13, rs2==x25, rd==x12, rs1_b2_val == 64, rs2_b2_val == -2
// opcode: scmplt8 ; op1:x13; op2:x25; dest:x12; op1val:0xf64055fd;  op2val:0xf7fe013f
TEST_RR_OP(scmplt8, x12, x13, x25, 0x00000000, 0xf64055fd, 0xf7fe013f, x3, 48, x5)

inst_30:
// rs1==x17, rs2==x23, rd==x15, rs1_b2_val == 8, rs2_b1_val == -65, rs2_b0_val == 1, rs1_b1_val == -9
// opcode: scmplt8 ; op1:x17; op2:x23; dest:x15; op1val:0xf608f740;  op2val:0x709bf01
TEST_RR_OP(scmplt8, x15, x17, x23, 0x00000000, 0xf608f740, 0x709bf01, x3, 52, x5)

inst_31:
// rs1==x6, rs2==x19, rd==x2, rs1_b2_val == 2, rs1_b3_val == 32
// opcode: scmplt8 ; op1:x6; op2:x19; dest:x2; op1val:0x2002c007;  op2val:0xfc3f4006
TEST_RR_OP(scmplt8, x2, x6, x19, 0x00000000, 0x2002c007, 0xfc3f4006, x3, 56, x5)

inst_32:
// rs1_b2_val == 0, rs2_b0_val == 32, rs1_b0_val == -17, rs1_b3_val == 16
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x100006ef;  op2val:0x4bf0820
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x100006ef, 0x4bf0820, x3, 60, x5)

inst_33:
// rs1_b1_val == -3, rs2_b0_val == -1, rs2_b2_val == -128
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc10fd80;  op2val:0x680bfff
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xfc10fd80, 0x680bfff, x3, 64, x5)

inst_34:
// rs1_b1_val == -2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x4f7fe07;  op2val:0x5509fc09
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x4f7fe07, 0x5509fc09, x3, 68, x5)

inst_35:
// rs1_b1_val == -128, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa048006;  op2val:0x5fc0203
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xaa048006, 0x5fc0203, x3, 72, x5)

inst_36:
// rs1_b1_val == 64, rs1_b3_val == -9
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fd4055;  op2val:0x808f6f7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xf7fd4055, 0x808f6f7, x3, 76, x5)

inst_37:
// rs1_b1_val == 32, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fd207f;  op2val:0xef01fa07
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x55fd207f, 0xef01fa07, x3, 80, x5)

inst_38:
// rs2_b1_val == 85, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x8002006;  op2val:0xbf1055ff
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x8002006, 0xbf1055ff, x3, 84, x5)

inst_39:
// rs2_b1_val == 127, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x5510fbdf;  op2val:0xf8007fdf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x5510fbdf, 0xf8007fdf, x3, 88, x5)

inst_40:
// rs2_b1_val == -33, rs2_b0_val == 85
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf607c03f;  op2val:0xf8f9df55
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xf607c03f, 0xf8f9df55, x3, 92, x5)

inst_41:
// rs2_b1_val == -3, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fb5510;  op2val:0xf8f8fd06
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x9fb5510, 0xf8f8fd06, x3, 96, x5)

inst_42:
// rs2_b1_val == -2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x5effefc;  op2val:0xdf01fe3f
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x5effefc, 0xdf01fe3f, x3, 100, x5)

inst_43:
// rs2_b1_val == 32, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fbf606;  op2val:0x80920f7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x9fbf606, 0x80920f7, x3, 104, x5)

inst_44:
// rs2_b1_val == 0, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x4dff840;  op2val:0x6800010
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x4dff840, 0x6800010, x3, 108, x5)

inst_45:
// rs2_b0_val == -86, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf1006df;  op2val:0x80fe80aa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xbf1006df, 0x80fe80aa, x3, 112, x5)

inst_46:
// rs2_b0_val == 127, rs1_b3_val == 0
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf40df;  op2val:0xfbaa007f
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xdf40df, 0xfbaa007f, x3, 116, x5)

inst_47:
// rs2_b0_val == -65, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x902f9df;  op2val:0x1aafdbf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x902f9df, 0x1aafdbf, x3, 120, x5)

inst_48:
// rs1_b1_val == 16, rs1_b3_val == 64
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x400110bf;  op2val:0x40f601fb
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x400110bf, 0x40f601fb, x3, 124, x5)

inst_49:
// rs2_b0_val == -2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x802055;  op2val:0xf6aafcfe
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x802055, 0xf6aafcfe, x3, 128, x5)

inst_50:
// rs1_b1_val == 2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f80220;  op2val:0xf9092010
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x7f80220, 0xf9092010, x3, 132, x5)

inst_51:
// rs1_b1_val == 1, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f2001c0;  op2val:0xf7ef03c0
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x3f2001c0, 0xf7ef03c0, x3, 136, x5)

inst_52:
// rs1_b1_val == 0, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xef5500f9;  op2val:0xfdbffdfd
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xef5500f9, 0xfdbffdfd, x3, 140, x5)

inst_53:
// rs1_b0_val == -86, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x55faf8aa;  op2val:0xfb04fa09
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x55faf8aa, 0xfb04fa09, x3, 144, x5)

inst_54:
// rs2_b2_val == 85, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fd0301;  op2val:0xaa555520
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x8fd0301, 0xaa555520, x3, 148, x5)

inst_55:
// rs1_b3_val == -5, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb060709;  op2val:0x1108008
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xfb060709, 0x1108008, x3, 152, x5)

inst_56:
// rs1_b3_val == -3, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd05fd80;  op2val:0xf901ef07
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xfd05fd80, 0xf901ef07, x3, 156, x5)

inst_57:
// rs2_b2_val == -9, rs2_b0_val == -128
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf00aa10;  op2val:0xfdf7fb80
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xbf00aa10, 0xfdf7fb80, x3, 160, x5)

inst_58:
// rs1_b3_val == -128, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x800703fa;  op2val:0x7f65502
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x800703fa, 0x7f65502, x3, 164, x5)

inst_59:
// rs1_b0_val == 4, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xc010ef04;  op2val:0xc0fcfefa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xc010ef04, 0xc0fcfefa, x3, 168, x5)

inst_60:
// rs1_b2_val == -86, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x4aaf801;  op2val:0xf8011000
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x4aaf801, 0xf8011000, x3, 172, x5)

inst_61:
// rs1_b0_val == 2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fb4002;  op2val:0xaafe09c0
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xf8fb4002, 0xaafe09c0, x3, 176, x5)

inst_62:
// rs2_b2_val == -5, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc0603aa;  op2val:0x3fbfffa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xfc0603aa, 0x3fbfffa, x3, 180, x5)

inst_63:
// rs2_b2_val == -3, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fb0606;  op2val:0xfbfdfef9
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x20fb0606, 0xfbfdfef9, x3, 184, x5)

inst_64:
// rs1_b3_val == rs2_b3_val, rs2_b3_val == -2, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b0_val == 2, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == -2, rs1_b1_val == 85, rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe065506;  op2val:0xfef93f02
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xfe065506, 0xfef93f02, x3, 188, x5)

inst_65:
// rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == -86, rs1_b2_val == -33, rs1_b3_val == -17, rs1_b0_val == 8, rs2_b2_val == 16
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdff908;  op2val:0x5510aa09
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xefdff908, 0x5510aa09, x3, 192, x5)

inst_66:
// rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b1_val == -1, rs1_b2_val == -2, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val == 32, rs2_b2_val == -33, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b0_val == -9
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffeff20;  op2val:0xfedf09f7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0x7ffeff20, 0xfedf09f7, x3, 196, x5)

inst_67:
// rs2_b3_val == 2, rs2_b2_val == -1
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf601df55;  op2val:0x2fffcf7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x00000000, 0xf601df55, 0x2fffcf7, x3, 200, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
