
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll8 instruction of the RISC-V RV32PZicsr extension for the sll8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sll8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x3, rd==x15, rs2_val == 5, rs1_b3_val == 2
// opcode: sll8 ; op1:x16; op2:x3; dest:x15; op1val:0x20e0d0a;  op2val:0x5
TEST_RR_OP(sll8, x15, x16, x3, 0x00000000, 0x20e0d0a, 0x5, x5, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x30, rs2_val == 3, rs1_b0_val == 253
// opcode: sll8 ; op1:x1; op2:x1; dest:x30; op1val:0x11120efd;  op2val:0x3
TEST_RR_OP(sll8, x30, x1, x1, 0x00000000, 0x11120efd, 0x3, x5, 4, x14)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x22, rd==x7, rs2_val == 6, rs1_b1_val == 255, rs1_b3_val == 0, rs1_b0_val == 191
// opcode: sll8 ; op1:x7; op2:x22; dest:x7; op1val:0x03ffbf;  op2val:0x6
TEST_RR_OP(sll8, x7, x7, x22, 0x00000000, 0x03ffbf, 0x6, x5, 8, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs2_val == 4, rs1_b3_val == 64, rs1_b2_val == 32
// opcode: sll8 ; op1:x18; op2:x18; dest:x18; op1val:0x40200903;  op2val:0x4
TEST_RR_OP(sll8, x18, x18, x18, 0x00000000, 0x40200903, 0x4, x5, 12, x14)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x9, rd==x9, rs2_val == 2, rs1_b2_val == 64, rs1_b3_val == 85
// opcode: sll8 ; op1:x6; op2:x9; dest:x9; op1val:0x55400efd;  op2val:0x2
TEST_RR_OP(sll8, x9, x6, x9, 0x00000000, 0x55400efd, 0x2, x5, 16, x14)

inst_5:
// rs1==x8, rs2==x27, rd==x21, rs2_val == 1, rs1_b0_val == 16
// opcode: sll8 ; op1:x8; op2:x27; dest:x21; op1val:0xf0e0b10;  op2val:0x1
TEST_RR_OP(sll8, x21, x8, x27, 0x00000000, 0xf0e0b10, 0x1, x5, 20, x14)

inst_6:
// rs1==x3, rs2==x23, rd==x24, rs1_b3_val == 170, rs1_b1_val == 191, rs1_b0_val == 1
// opcode: sll8 ; op1:x3; op2:x23; dest:x24; op1val:0xaa0dbf01;  op2val:0x2
TEST_RR_OP(sll8, x24, x3, x23, 0x00000000, 0xaa0dbf01, 0x2, x5, 24, x14)

inst_7:
// rs1==x9, rs2==x25, rd==x17, rs1_b3_val == 127, rs1_b2_val == 254
// opcode: sll8 ; op1:x9; op2:x25; dest:x17; op1val:0x7ffe0c0f;  op2val:0x6
TEST_RR_OP(sll8, x17, x9, x25, 0x00000000, 0x7ffe0c0f, 0x6, x5, 28, x14)

inst_8:
// rs1==x10, rs2==x21, rd==x23, rs1_b3_val == 191, rs1_b2_val == 1
// opcode: sll8 ; op1:x10; op2:x21; dest:x23; op1val:0xbf010d13;  op2val:0x0
TEST_RR_OP(sll8, x23, x10, x21, 0x00000000, 0xbf010d13, 0x0, x5, 32, x14)

inst_9:
// rs1==x29, rs2==x24, rd==x16, rs1_b3_val == 223, rs1_b0_val == 251, rs1_b1_val == 16
// opcode: sll8 ; op1:x29; op2:x24; dest:x16; op1val:0xdf0a10fb;  op2val:0x11
TEST_RR_OP(sll8, x16, x29, x24, 0x00000000, 0xdf0a10fb, 0x11, x5, 36, x14)

inst_10:
// rs1==x2, rs2==x13, rd==x3, rs1_b3_val == 239, rs1_b0_val == 223, rs1_b1_val == 254
// opcode: sll8 ; op1:x2; op2:x13; dest:x3; op1val:0xef01fedf;  op2val:0xe
TEST_RR_OP(sll8, x3, x2, x13, 0x00000000, 0xef01fedf, 0xe, x5, 40, x14)

inst_11:
// rs1==x4, rs2==x2, rd==x13, rs1_b3_val == 247, rs1_b0_val == 255
// opcode: sll8 ; op1:x4; op2:x2; dest:x13; op1val:0xf70313ff;  op2val:0x13
TEST_RR_OP(sll8, x13, x4, x2, 0x00000000, 0xf70313ff, 0x13, x5, 44, x14)

inst_12:
// rs1==x25, rs2==x12, rd==x6, rs1_b3_val == 251, rs1_b1_val == 247
// opcode: sll8 ; op1:x25; op2:x12; dest:x6; op1val:0xfb07f7ff;  op2val:0xd
TEST_RR_OP(sll8, x6, x25, x12, 0x00000000, 0xfb07f7ff, 0xd, x5, 48, x14)

inst_13:
// rs1==x28, rs2==x11, rd==x20, rs1_b3_val == 253, rs1_b1_val == 253
// opcode: sll8 ; op1:x28; op2:x11; dest:x20; op1val:0xfd05fd13;  op2val:0x3
TEST_RR_OP(sll8, x20, x28, x11, 0x00000000, 0xfd05fd13, 0x3, x5, 52, x14)

inst_14:
// rs1==x0, rs2==x8, rd==x14, rs1_b3_val == 254, rs1_b1_val == 170
// opcode: sll8 ; op1:x0; op2:x8; dest:x14; op1val:0xfe0aaa03;  op2val:0x12
TEST_RR_OP(sll8, x14, x0, x8, 0x00000000, 0xfe0aaa03, 0x12, x5, 56, x9)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x19, rs2==x10, rd==x29, rs1_b3_val == 128, rs1_b0_val == 85
// opcode: sll8 ; op1:x19; op2:x10; dest:x29; op1val:0x8006bf55;  op2val:0x7
TEST_RR_OP(sll8, x29, x19, x10, 0x00000000, 0x8006bf55, 0x7, x3, 0, x9)

inst_16:
// rs1==x17, rs2==x15, rd==x27, rs1_b3_val == 32, rs1_b0_val == 2, rs1_b2_val == 16
// opcode: sll8 ; op1:x17; op2:x15; dest:x27; op1val:0x20101002;  op2val:0x11
TEST_RR_OP(sll8, x27, x17, x15, 0x00000000, 0x20101002, 0x11, x3, 4, x9)

inst_17:
// rs1==x13, rs2==x16, rd==x5, rs1_b3_val == 16, rs1_b0_val == 64, rs1_b1_val == 251
// opcode: sll8 ; op1:x13; op2:x16; dest:x5; op1val:0x100ffb40;  op2val:0x6
TEST_RR_OP(sll8, x5, x13, x16, 0x00000000, 0x100ffb40, 0x6, x3, 8, x9)

inst_18:
// rs1==x20, rs2==x31, rd==x26, rs1_b3_val == 8, rs1_b1_val == 32, rs1_b0_val == 170, rs1_b2_val == 191
// opcode: sll8 ; op1:x20; op2:x31; dest:x26; op1val:0x8bf20aa;  op2val:0xf
TEST_RR_OP(sll8, x26, x20, x31, 0x00000000, 0x8bf20aa, 0xf, x3, 12, x9)

inst_19:
// rs1==x22, rs2==x28, rd==x0, rs1_b3_val == 4, rs1_b1_val == 64
// opcode: sll8 ; op1:x22; op2:x28; dest:x0; op1val:0x40d4009;  op2val:0x7
TEST_RR_OP(sll8, x0, x22, x28, 0x00000000, 0x40d4009, 0x7, x3, 16, x9)

inst_20:
// rs1==x11, rs2==x19, rd==x1, rs1_b3_val == 1, rs1_b1_val == 0, rs1_b2_val == 239
// opcode: sll8 ; op1:x11; op2:x19; dest:x1; op1val:0x1ef00bf;  op2val:0x10
TEST_RR_OP(sll8, x1, x11, x19, 0x00000000, 0x1ef00bf, 0x10, x3, 20, x9)

inst_21:
// rs1==x26, rs2==x14, rd==x19, rs1_b3_val == 255, rs1_b1_val == 128
// opcode: sll8 ; op1:x26; op2:x14; dest:x19; op1val:0xff0b8003;  op2val:0x12
TEST_RR_OP(sll8, x19, x26, x14, 0x00000000, 0xff0b8003, 0x12, x3, 24, x9)

inst_22:
// rs1==x30, rs2==x6, rd==x12, rs1_b0_val == 127, rs1_b2_val == 223
// opcode: sll8 ; op1:x30; op2:x6; dest:x12; op1val:0xaadffd7f;  op2val:0x5
TEST_RR_OP(sll8, x12, x30, x6, 0x00000000, 0xaadffd7f, 0x5, x3, 28, x9)

inst_23:
// rs1==x27, rs2==x30, rd==x4, rs1_b0_val == 239, rs1_b2_val == 8
// opcode: sll8 ; op1:x27; op2:x30; dest:x4; op1val:0x7f08fbef;  op2val:0x1
TEST_RR_OP(sll8, x4, x27, x30, 0x00000000, 0x7f08fbef, 0x1, x3, 32, x9)

inst_24:
// rs1==x24, rs2==x26, rd==x31, rs1_b0_val == 247, 
// opcode: sll8 ; op1:x24; op2:x26; dest:x31; op1val:0xe0f80f7;  op2val:0x9
TEST_RR_OP(sll8, x31, x24, x26, 0x00000000, 0xe0f80f7, 0x9, x3, 36, x9)

inst_25:
// rs1==x14, rs2==x4, rd==x28, rs1_b0_val == 254, rs1_b2_val == 128
// opcode: sll8 ; op1:x14; op2:x4; dest:x28; op1val:0x12800cfe;  op2val:0xf
TEST_RR_OP(sll8, x28, x14, x4, 0x00000000, 0x12800cfe, 0xf, x3, 40, x9)

inst_26:
// rs1==x15, rs2==x7, rd==x8, rs1_b0_val == 128, rs1_b2_val == 4
// opcode: sll8 ; op1:x15; op2:x7; dest:x8; op1val:0xdf040b80;  op2val:0x9
TEST_RR_OP(sll8, x8, x15, x7, 0x00000000, 0xdf040b80, 0x9, x3, 44, x9)

inst_27:
// rs1==x12, rs2==x5, rd==x10, rs1_b0_val == 32, rs1_b1_val == 239
// opcode: sll8 ; op1:x12; op2:x5; dest:x10; op1val:0xfb20ef20;  op2val:0x11
TEST_RR_OP(sll8, x10, x12, x5, 0x00000000, 0xfb20ef20, 0x11, x3, 48, x9)

inst_28:
// rs1==x31, rs2==x29, rd==x22, rs1_b0_val == 8, 
// opcode: sll8 ; op1:x31; op2:x29; dest:x22; op1val:0xaa208008;  op2val:0x10
TEST_RR_OP(sll8, x22, x31, x29, 0x00000000, 0xaa208008, 0x10, x3, 52, x9)

inst_29:
// rs1==x21, rs2==x17, rd==x2, rs1_b0_val == 4, rs1_b2_val == 85
// opcode: sll8 ; op1:x21; op2:x17; dest:x2; op1val:0x7f55fd04;  op2val:0xd
TEST_RR_OP(sll8, x2, x21, x17, 0x00000000, 0x7f55fd04, 0xd, x3, 56, x9)

inst_30:
// rs1==x23, rs2==x0, rd==x25, rs1_b0_val == 0, rs1_b1_val == 1
// opcode: sll8 ; op1:x23; op2:x0; dest:x25; op1val:0x50d0100;  op2val:0x0
TEST_RR_OP(sll8, x25, x23, x0, 0x00000000, 0x50d0100, 0x0, x3, 60, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x5, rs2==x20, rd==x11, rs1_b2_val == 247, 
// opcode: sll8 ; op1:x5; op2:x20; dest:x11; op1val:0x11f7aa40;  op2val:0x1
TEST_RR_OP(sll8, x11, x5, x20, 0x00000000, 0x11f7aa40, 0x1, x1, 0, x2)

inst_32:
// rs1_b2_val == 251, rs1_b1_val == 223
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fbdf0b;  op2val:0xd
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x5fbdf0b, 0xd, x1, 4, x2)

inst_33:
// rs1_b2_val == 253, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xcfdbf02;  op2val:0x9
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0xcfdbf02, 0x9, x1, 8, x2)

inst_34:
// rs1_b2_val == 2, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x13020ef7;  op2val:0x8
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x13020ef7, 0x8, x1, 12, x2)

inst_35:
// rs1_b2_val == 255, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff40ff;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x10ff40ff, 0x0, x1, 16, x2)

inst_36:
// rs1_b2_val == 0, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x5500aa10;  op2val:0x13
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x5500aa10, 0x13, x1, 20, x2)

inst_37:
// rs1_b1_val == 127, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0f7faa;  op2val:0x8
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0xfe0f7faa, 0x8, x1, 24, x2)

inst_38:
// rs1_b1_val == 8, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x10110805;  op2val:0x10
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x10110805, 0x10, x1, 28, x2)

inst_39:
// rs1_b2_val == 170, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x3aa40fd;  op2val:0x12
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x3aa40fd, 0x12, x1, 32, x2)

inst_40:
// rs1_b2_val == 127, rs1_b1_val == 2
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd7f02df;  op2val:0xa
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0xfd7f02df, 0xa, x1, 36, x2)

inst_41:
// rs1_b1_val == 4, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x40aa0408;  op2val:0x10
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x40aa0408, 0x10, x1, 40, x2)

inst_42:
// rs1_b1_val == 85, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x95555fd;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x95555fd, 0x3, x1, 44, x2)

inst_43:
// rs2_val == 4, rs1_b3_val == 64, rs1_b2_val == 32
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x40200903;  op2val:0x4
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x40200903, 0x4, x1, 48, x2)

inst_44:
// rs1_b3_val == 4, rs1_b1_val == 64
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x40d4009;  op2val:0x7
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x40d4009, 0x7, x1, 52, x2)

inst_45:
// rs1_b0_val == 0, rs1_b1_val == 1
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x50d0100;  op2val:0xd
TEST_RR_OP(sll8, x31, x30, x29, 0x00000000, 0x50d0100, 0xd, x1, 56, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 15*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
