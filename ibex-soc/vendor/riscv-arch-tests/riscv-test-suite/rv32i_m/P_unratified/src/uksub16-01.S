
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub16 instruction of the RISC-V RV32PZicsr extension for the uksub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x25, rd==x0, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 43690, rs2_h1_val == 32
// opcode: uksub16 ; op1:x3; op2:x25; dest:x0; op1val:0xaaaa0000;  op2val:0x200009
TEST_PKRR_OP(uksub16, x0, x3, x25, 0x00000000, 0xaaaa0000, 0x200009, x3, x17, 0, x21)

inst_1:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x13, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 1024, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: uksub16 ; op1:x11; op2:x11; dest:x13; op1val:0x130003;  op2val:0x130400
TEST_PKRR_OP(uksub16, x13, x11, x11, 0x00000000, 0x130003, 0x130400, x11, x17, 8, x21)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x20, rd==x2, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 64, rs1_h1_val == 65535
// opcode: uksub16 ; op1:x2; op2:x20; dest:x2; op1val:0xffff0013;  op2val:0x400013
TEST_PKRR_OP(uksub16, x2, x2, x20, 0x00000000, 0xffff0013, 0x400013, x2, x17, 16, x21)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_h1_val == 43690, rs1_h0_val == 65471, rs1_h1_val == 2, rs2_h0_val == 63487
// opcode: uksub16 ; op1:x22; op2:x22; dest:x22; op1val:0x02ffbf;  op2val:0xaaaaf7ff
TEST_PKRR_OP(uksub16, x22, x22, x22, 0x00000000, 0x02ffbf, 0xaaaaf7ff, x22, x17, 24, x21)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x5, rd==x5, rs2_h1_val == 21845, rs1_h1_val == 57343
// opcode: uksub16 ; op1:x9; op2:x5; dest:x5; op1val:0xdfff000d;  op2val:0x5555000d
TEST_PKRR_OP(uksub16, x5, x9, x5, 0x00000000, 0xdfff000d, 0x5555000d, x9, x17, 32, x21)

inst_5:
// rs1==x28, rs2==x15, rd==x29, rs2_h1_val == 32767, rs1_h1_val == 4
// opcode: uksub16 ; op1:x28; op2:x15; dest:x29; op1val:0x04000d;  op2val:0x7fff0400
TEST_PKRR_OP(uksub16, x29, x28, x15, 0x00000000, 0x04000d, 0x7fff0400, x28, x17, 40, x21)

inst_6:
// rs1==x27, rs2==x19, rd==x28, rs2_h1_val == 49151, rs2_h0_val == 65533, rs1_h0_val == 49151
// opcode: uksub16 ; op1:x27; op2:x19; dest:x28; op1val:0x0abfff;  op2val:0xbffffffd
TEST_PKRR_OP(uksub16, x28, x27, x19, 0x00000000, 0x0abfff, 0xbffffffd, x27, x17, 48, x21)

inst_7:
// rs1==x12, rs2==x0, rd==x4, rs2_h1_val == 57343, rs2_h0_val == 64511, rs1_h1_val == 1024, rs1_h0_val == 65527
// opcode: uksub16 ; op1:x12; op2:x0; dest:x4; op1val:0x400fff7;  op2val:0xdffffbff
TEST_PKRR_OP(uksub16, x4, x12, x0, 0x00000000, 0x400fff7, 0xdffffbff, x12, x17, 56, x21)

inst_8:
// rs1==x6, rs2==x14, rd==x24, rs2_h1_val == 61439, rs1_h0_val == 32767, rs2_h0_val == 8192
// opcode: uksub16 ; op1:x6; op2:x14; dest:x24; op1val:0x0a7fff;  op2val:0xefff2000
TEST_PKRR_OP(uksub16, x24, x6, x14, 0x00000000, 0x0a7fff, 0xefff2000, x6, x17, 64, x21)

inst_9:
// rs1==x7, rs2==x10, rd==x27, rs2_h1_val == 63487, rs1_h1_val == 2048, rs1_h0_val == 32768
// opcode: uksub16 ; op1:x7; op2:x10; dest:x27; op1val:0x8008000;  op2val:0xf7fffffd
TEST_PKRR_OP(uksub16, x27, x7, x10, 0x00000000, 0x8008000, 0xf7fffffd, x7, x17, 72, x21)

inst_10:
// rs1==x0, rs2==x2, rd==x6, rs2_h1_val == 64511, rs1_h1_val == 0
// opcode: uksub16 ; op1:x0; op2:x2; dest:x6; op1val:0x00fff7;  op2val:0xfbff000e
TEST_PKRR_OP(uksub16, x6, x0, x2, 0x00000000, 0x00fff7, 0xfbff000e, x0, x17, 80, x21)

inst_11:
// rs1==x18, rs2==x3, rd==x20, rs2_h1_val == 65023, rs1_h0_val == 1, rs2_h0_val == 57343, rs1_h1_val == 65534
// opcode: uksub16 ; op1:x18; op2:x3; dest:x20; op1val:0xfffe0001;  op2val:0xfdffdfff
TEST_PKRR_OP(uksub16, x20, x18, x3, 0x00000000, 0xfffe0001, 0xfdffdfff, x18, x17, 88, x21)

inst_12:
// rs1==x1, rs2==x28, rd==x26, rs2_h1_val == 65279, rs2_h0_val == 512, rs1_h0_val == 65533
// opcode: uksub16 ; op1:x1; op2:x28; dest:x26; op1val:0x0afffd;  op2val:0xfeff0200
TEST_PKRR_OP(uksub16, x26, x1, x28, 0x00000000, 0x0afffd, 0xfeff0200, x1, x17, 96, x21)

inst_13:
// rs1==x20, rs2==x27, rd==x25, rs2_h1_val == 65407, rs1_h0_val == 65023, rs2_h0_val == 0
// opcode: uksub16 ; op1:x20; op2:x27; dest:x25; op1val:0x04fdff;  op2val:0xff7f0000
TEST_PKRR_OP(uksub16, x25, x20, x27, 0x00000000, 0x04fdff, 0xff7f0000, x20, x17, 104, x21)

inst_14:
// rs1==x29, rs2==x6, rd==x1, rs2_h1_val == 65471, rs2_h0_val == 65407
// opcode: uksub16 ; op1:x29; op2:x6; dest:x1; op1val:0xdfff0006;  op2val:0xffbfff7f
TEST_PKRR_OP(uksub16, x1, x29, x6, 0x00000000, 0xdfff0006, 0xffbfff7f, x29, x17, 112, x21)

inst_15:
// rs1==x16, rs2==x8, rd==x3, rs2_h1_val == 65503, rs1_h1_val == 65023
// opcode: uksub16 ; op1:x16; op2:x8; dest:x3; op1val:0xfdff8000;  op2val:0xffdf0012
TEST_PKRR_OP(uksub16, x3, x16, x8, 0x00000000, 0xfdff8000, 0xffdf0012, x16, x17, 120, x21)

inst_16:
// rs1==x10, rs2==x31, rd==x15, rs2_h1_val == 65519, rs2_h0_val == 61439
// opcode: uksub16 ; op1:x10; op2:x31; dest:x15; op1val:0x0a000c;  op2val:0xffefefff
TEST_PKRR_OP(uksub16, x15, x10, x31, 0x00000000, 0x0a000c, 0xffefefff, x10, x17, 128, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x5, rs2==x23, rd==x31, rs2_h1_val == 65527, rs1_h1_val == 65531
// opcode: uksub16 ; op1:x5; op2:x23; dest:x31; op1val:0xfffb0007;  op2val:0xfff7000d
TEST_PKRR_OP(uksub16, x31, x5, x23, 0x00000000, 0xfffb0007, 0xfff7000d, x5, x2, 0, x3)

inst_18:
// rs1==x23, rs2==x16, rd==x11, rs2_h1_val == 65531, rs1_h1_val == 21845, rs1_h0_val == 64, rs2_h0_val == 4096
// opcode: uksub16 ; op1:x23; op2:x16; dest:x11; op1val:0x55550040;  op2val:0xfffb1000
TEST_PKRR_OP(uksub16, x11, x23, x16, 0x00000000, 0x55550040, 0xfffb1000, x23, x2, 8, x3)

inst_19:
// rs1==x24, rs2==x13, rd==x21, rs2_h1_val == 65533, rs1_h0_val == 65279, rs2_h0_val == 32768
// opcode: uksub16 ; op1:x24; op2:x13; dest:x21; op1val:0x400feff;  op2val:0xfffd8000
TEST_PKRR_OP(uksub16, x21, x24, x13, 0x00000000, 0x400feff, 0xfffd8000, x24, x2, 16, x3)

inst_20:
// rs1==x8, rs2==x12, rd==x17, rs2_h1_val == 65534, rs1_h0_val == 65534, rs1_h1_val == 256
// opcode: uksub16 ; op1:x8; op2:x12; dest:x17; op1val:0x100fffe;  op2val:0xfffe0006
TEST_PKRR_OP(uksub16, x17, x8, x12, 0x00000000, 0x100fffe, 0xfffe0006, x8, x2, 24, x3)

inst_21:
// rs1==x4, rs2==x18, rd==x8, rs2_h1_val == 32768, 
// opcode: uksub16 ; op1:x4; op2:x18; dest:x8; op1val:0xffff0012;  op2val:0x80000006
TEST_PKRR_OP(uksub16, x8, x4, x18, 0x00000000, 0xffff0012, 0x80000006, x4, x2, 32, x3)

inst_22:
// rs1==x17, rs2==x1, rd==x12, rs2_h1_val == 16384, rs1_h0_val == 21845, rs2_h0_val == 65535
// opcode: uksub16 ; op1:x17; op2:x1; dest:x12; op1val:0x8005555;  op2val:0x4000ffff
TEST_PKRR_OP(uksub16, x12, x17, x1, 0x00000000, 0x8005555, 0x4000ffff, x17, x2, 40, x3)

inst_23:
// rs1==x15, rs2==x7, rd==x19, rs2_h1_val == 8192, 
// opcode: uksub16 ; op1:x15; op2:x7; dest:x19; op1val:0x400fffd;  op2val:0x2000ff7f
TEST_PKRR_OP(uksub16, x19, x15, x7, 0x00000000, 0x400fffd, 0x2000ff7f, x15, x2, 48, x3)

inst_24:
// rs1==x30, rs2==x4, rd==x23, rs2_h1_val == 4096, rs2_h0_val == 43690
// opcode: uksub16 ; op1:x30; op2:x4; dest:x23; op1val:0x02000c;  op2val:0x1000aaaa
TEST_PKRR_OP(uksub16, x23, x30, x4, 0x00000000, 0x02000c, 0x1000aaaa, x30, x2, 56, x3)

inst_25:
// rs1==x19, rs2==x24, rd==x9, rs2_h1_val == 2048, rs1_h1_val == 49151, rs1_h0_val == 65535, rs2_h0_val == 16
// opcode: uksub16 ; op1:x19; op2:x24; dest:x9; op1val:0xbfffffff;  op2val:0x8000010
TEST_PKRR_OP(uksub16, x9, x19, x24, 0x00000000, 0xbfffffff, 0x8000010, x19, x2, 64, x3)

inst_26:
// rs1==x31, rs2==x29, rd==x14, rs2_h1_val == 1024, rs1_h1_val == 65471
// opcode: uksub16 ; op1:x31; op2:x29; dest:x14; op1val:0xffbf000b;  op2val:0x4000011
TEST_PKRR_OP(uksub16, x14, x31, x29, 0x00000000, 0xffbf000b, 0x4000011, x31, x2, 72, x3)

inst_27:
// rs1==x13, rs2==x9, rd==x30, rs2_h1_val == 512, rs1_h1_val == 4096, rs1_h0_val == 57343
// opcode: uksub16 ; op1:x13; op2:x9; dest:x30; op1val:0x1000dfff;  op2val:0x2001000
TEST_PKRR_OP(uksub16, x30, x13, x9, 0x00000000, 0x1000dfff, 0x2001000, x13, x2, 80, x3)

inst_28:
// rs1==x14, rs2==x21, rd==x7, rs2_h1_val == 256, rs1_h0_val == 2
// opcode: uksub16 ; op1:x14; op2:x21; dest:x7; op1val:0x120002;  op2val:0x100dfff
TEST_PKRR_OP(uksub16, x7, x14, x21, 0x00000000, 0x120002, 0x100dfff, x14, x2, 88, x3)

inst_29:
// rs1==x26, rs2==x17, rd==x16, rs2_h1_val == 128, rs1_h1_val == 8
// opcode: uksub16 ; op1:x26; op2:x17; dest:x16; op1val:0x080000;  op2val:0x80aaaa
TEST_PKRR_OP(uksub16, x16, x26, x17, 0x00000000, 0x080000, 0x80aaaa, x26, x2, 96, x3)

inst_30:
// rs1==x21, rs2==x30, rd==x10, rs2_h1_val == 16, rs1_h1_val == 65527
// opcode: uksub16 ; op1:x21; op2:x30; dest:x10; op1val:0xfff7000e;  op2val:0x100200
TEST_PKRR_OP(uksub16, x10, x21, x30, 0x00000000, 0xfff7000e, 0x100200, x21, x2, 104, x3)

inst_31:
// rs1==x25, rs2==x26, rd==x18, rs2_h1_val == 8, rs2_h0_val == 128
// opcode: uksub16 ; op1:x25; op2:x26; dest:x18; op1val:0x10007fff;  op2val:0x080080
TEST_PKRR_OP(uksub16, x18, x25, x26, 0x00000000, 0x10007fff, 0x080080, x25, x2, 112, x3)

inst_32:
// rs2_h1_val == 4, rs1_h0_val == 2048
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x120800;  op2val:0x040010
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x120800, 0x040010, x30, x2, 120, x3)

inst_33:
// rs1_h0_val == 65531, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffb;  op2val:0x208000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x03fffb, 0x208000, x30, x2, 128, x3)

inst_34:
// rs1_h0_val == 16384, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x044000;  op2val:0xfff70013
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x044000, 0xfff70013, x30, x2, 136, x3)

inst_35:
// rs1_h0_val == 8192, rs2_h0_val == 16384, rs1_h1_val == 128
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x802000;  op2val:0x0f4000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x802000, 0x0f4000, x30, x2, 144, x3)

inst_36:
// rs1_h0_val == 4096, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4001000;  op2val:0x55550007
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x4001000, 0x55550007, x30, x2, 152, x3)

inst_37:
// rs1_h0_val == 1024, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x050400;  op2val:0xff7f0400
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x050400, 0xff7f0400, x30, x2, 160, x3)

inst_38:
// rs1_h0_val == 512, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0x10000e
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x800200, 0x10000e, x30, x2, 168, x3)

inst_39:
// rs1_h0_val == 256, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800100;  op2val:0xbfff0080
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x800100, 0xbfff0080, x30, x2, 176, x3)

inst_40:
// rs1_h0_val == 128, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x120080;  op2val:0x070013
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x120080, 0x070013, x30, x2, 184, x3)

inst_41:
// rs1_h0_val == 32, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020;  op2val:0x08ff7f
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfff70020, 0x08ff7f, x30, x2, 192, x3)

inst_42:
// rs1_h0_val == 16, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0010;  op2val:0xdfff0003
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x0a0010, 0xdfff0003, x30, x2, 200, x3)

inst_43:
// rs1_h0_val == 8, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x030008;  op2val:0x09fbff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x030008, 0x09fbff, x30, x2, 208, x3)

inst_44:
// rs1_h0_val == 4, rs2_h1_val == 65535
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004;  op2val:0xffff0005
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfffb0004, 0xffff0005, x30, x2, 216, x3)

inst_45:
// rs2_h1_val == 2, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff7;  op2val:0x02ff7f
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfffbfff7, 0x02ff7f, x30, x2, 224, x3)

inst_46:
// rs2_h1_val == 1, rs2_h0_val == 2
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000020;  op2val:0x010002
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x1000020, 0x010002, x30, x2, 232, x3)

inst_47:
// rs2_h1_val == 0, rs1_h1_val == 1
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff;  op2val:0x000002
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x01dfff, 0x000002, x30, x2, 240, x3)

inst_48:
// rs2_h0_val == 21845, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x130005;  op2val:0x115555
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x130005, 0x115555, x30, x2, 248, x3)

inst_49:
// rs2_h0_val == 32767, rs1_h0_val == 65503
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf;  op2val:0x55557fff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x07ffdf, 0x55557fff, x30, x2, 256, x3)

inst_50:
// rs2_h0_val == 49151, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfbfff;  op2val:0x00bfff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xffbfbfff, 0x00bfff, x30, x2, 264, x3)

inst_51:
// rs2_h0_val == 65023, rs1_h1_val == 64511
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffeff;  op2val:0x4000fdff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfbfffeff, 0x4000fdff, x30, x2, 272, x3)

inst_52:
// rs2_h0_val == 65279, rs1_h0_val == 43690
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaa;  op2val:0xf7fffeff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x80aaaa, 0xf7fffeff, x30, x2, 280, x3)

inst_53:
// rs2_h0_val == 65471, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x110020;  op2val:0x07ffbf
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x110020, 0x07ffbf, x30, x2, 288, x3)

inst_54:
// rs2_h0_val == 65503, rs1_h1_val == 65533
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0012;  op2val:0x0cffdf
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfffd0012, 0x0cffdf, x30, x2, 296, x3)

inst_55:
// rs2_h0_val == 256, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0020;  op2val:0xdfff0100
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xffbf0020, 0xdfff0100, x30, x2, 304, x3)

inst_56:
// rs2_h0_val == 64, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bfff;  op2val:0x100040
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x00bfff, 0x100040, x30, x2, 312, x3)

inst_57:
// rs2_h0_val == 32, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x040010;  op2val:0x070020
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x040010, 0x070020, x30, x2, 320, x3)

inst_58:
// rs2_h0_val == 8, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000c;  op2val:0xefff0008
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xbfff000c, 0xefff0008, x30, x2, 328, x3)

inst_59:
// rs2_h0_val == 4, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0006;  op2val:0xfffe0004
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x0e0006, 0xfffe0004, x30, x2, 336, x3)

inst_60:
// rs2_h0_val == 1, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffb;  op2val:0xfffe0001
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x13fffb, 0xfffe0001, x30, x2, 344, x3)

inst_61:
// rs1_h1_val == 32767, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002;  op2val:0xeffffffd
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x7fff0002, 0xeffffffd, x30, x2, 352, x3)

inst_62:
// rs1_h1_val == 61439, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0x8000aaaa
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xeffffeff, 0x8000aaaa, x30, x2, 360, x3)

inst_63:
// rs1_h1_val == 63487, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0400;  op2val:0x8004000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xf7ff0400, 0x8004000, x30, x2, 368, x3)

inst_64:
// rs2_h0_val == 65527, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0005;  op2val:0xfffffff7
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xbfff0005, 0xfffffff7, x30, x2, 376, x3)

inst_65:
// rs1_h1_val == 65279, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0040;  op2val:0xfffbff7f
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfeff0040, 0xfffbff7f, x30, x2, 384, x3)

inst_66:
// rs1_h1_val == 65407, rs2_h0_val == 65519
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0003;  op2val:0x0cffef
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xff7f0003, 0x0cffef, x30, x2, 392, x3)

inst_67:
// rs1_h1_val == 65503, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbf;  op2val:0xffeffff7
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xffdfffbf, 0xffeffff7, x30, x2, 400, x3)

inst_68:
// rs1_h1_val == 65519, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf;  op2val:0xfdff0012
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xffefffdf, 0xfdff0012, x30, x2, 408, x3)

inst_69:
// rs1_h1_val == 16384, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000003;  op2val:0xffbffbff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x40000003, 0xffbffbff, x30, x2, 416, x3)

inst_70:
// rs1_h1_val == 8192, rs1_h0_val == 64511
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fbff;  op2val:0xfbff0002
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x2000fbff, 0xfbff0002, x30, x2, 424, x3)

inst_71:
// rs1_h1_val == 512, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff7;  op2val:0xff7fffdf
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x200fff7, 0xff7fffdf, x30, x2, 432, x3)

inst_72:
// rs1_h1_val == 64, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400012;  op2val:0x004000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x400012, 0x004000, x30, x2, 440, x3)

inst_73:
// rs1_h1_val == 32, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000f;  op2val:0x09aaaa
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x20000f, 0x09aaaa, x30, x2, 448, x3)

inst_74:
// rs1_h1_val == 16, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100800;  op2val:0xaaaa2000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x100800, 0xaaaa2000, x30, x2, 456, x3)

inst_75:
// rs1_h0_val == 61439, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800efff;  op2val:0x0eaaaa
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x800efff, 0x0eaaaa, x30, x2, 464, x3)

inst_76:
// rs1_h1_val == 32768, rs1_h0_val == 63487
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7ff;  op2val:0x8000f7ff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x8000f7ff, 0x8000f7ff, x30, x2, 472, x3)

inst_77:
// rs2_h0_val == 65531, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000008;  op2val:0x0efffb
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x2000008, 0x0efffb, x30, x2, 480, x3)

inst_78:
// rs2_h0_val == 65534, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0008;  op2val:0x40fffe
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xf7ff0008, 0x40fffe, x30, x2, 488, x3)

inst_79:
// rs1_h0_val == 65407, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7f;  op2val:0x40fbff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xfeffff7f, 0x40fbff, x30, x2, 496, x3)

inst_80:
// rs1_h0_val == 65519, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffef;  op2val:0xffdf0008
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x1000ffef, 0xffdf0008, x30, x2, 504, x3)

inst_81:
// rs2_h0_val == 2048, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550400;  op2val:0x800800
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0x55550400, 0x800800, x30, x2, 512, x3)

inst_82:
// rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 43690, rs2_h1_val == 32
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0000;  op2val:0x200009
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x00000000, 0xaaaa0000, 0x200009, x30, x2, 520, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
