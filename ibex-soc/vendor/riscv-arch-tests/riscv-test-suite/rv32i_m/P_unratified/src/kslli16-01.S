
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslli16 instruction of the RISC-V RV32PZicsr extension for the kslli16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslli16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x22, rd==x31, rs1_h0_val == -32768, imm_val == 13, rs1_h1_val == 16384
// opcode: kslli16 ; op1:x22; dest:x31; op1val:0x40008000;  immval:0xd
TEST_PKIMM_OP( kslli16, x31, x22, 0x00000000, 0x40008000, 0xd, x22, x1, 0, x24)

inst_1:
// rs1 == rd, rs1==x0, rd==x0, imm_val == 15, rs1_h1_val == -8193, rs1_h0_val == -2
// opcode: kslli16 ; op1:x0; dest:x0; op1val:0xdffffffe;  immval:0xf
TEST_PKIMM_OP( kslli16, x0, x0, 0x00000000, 0xdffffffe, 0xf, x0, x1, 8, x24)

inst_2:
// rs1==x23, rd==x9, imm_val == 14, rs1_h0_val == -33, rs1_h1_val == -2
// opcode: kslli16 ; op1:x23; dest:x9; op1val:0xfffeffdf;  immval:0xe
TEST_PKIMM_OP( kslli16, x9, x23, 0x00000000, 0xfffeffdf, 0xe, x23, x1, 16, x24)

inst_3:
// rs1==x2, rd==x5, imm_val == 12, rs1_h1_val == -1025
// opcode: kslli16 ; op1:x2; dest:x5; op1val:0xfbff0005;  immval:0xc
TEST_PKIMM_OP( kslli16, x5, x2, 0x00000000, 0xfbff0005, 0xc, x2, x1, 24, x24)

inst_4:
// rs1==x3, rd==x19, imm_val == 11, rs1_h0_val == 1024, rs1_h1_val == 4096
// opcode: kslli16 ; op1:x3; dest:x19; op1val:0x10000400;  immval:0xb
TEST_PKIMM_OP( kslli16, x19, x3, 0x00000000, 0x10000400, 0xb, x3, x1, 32, x24)

inst_5:
// rs1==x10, rd==x17, imm_val == 10, rs1_h0_val == 16384
// opcode: kslli16 ; op1:x10; dest:x17; op1val:0x054000;  immval:0xa
TEST_PKIMM_OP( kslli16, x17, x10, 0x00000000, 0x054000, 0xa, x10, x1, 40, x24)

inst_6:
// rs1==x4, rd==x2, imm_val == 9, rs1_h1_val == 16
// opcode: kslli16 ; op1:x4; dest:x2; op1val:0x100006;  immval:0x9
TEST_PKIMM_OP( kslli16, x2, x4, 0x00000000, 0x100006, 0x9, x4, x1, 48, x24)

inst_7:
// rs1==x30, rd==x10, imm_val == 8, rs1_h0_val == -3
// opcode: kslli16 ; op1:x30; dest:x10; op1val:0xdffffffd;  immval:0x8
TEST_PKIMM_OP( kslli16, x10, x30, 0x00000000, 0xdffffffd, 0x8, x30, x1, 56, x24)

inst_8:
// rs1==x7, rd==x21, imm_val == 7, rs1_h1_val == 8
// opcode: kslli16 ; op1:x7; dest:x21; op1val:0x080009;  immval:0x7
TEST_PKIMM_OP( kslli16, x21, x7, 0x00000000, 0x080009, 0x7, x7, x1, 64, x24)

inst_9:
// rs1==x26, rd==x12, imm_val == 6, rs1_h1_val == 128, rs1_h0_val == -5
// opcode: kslli16 ; op1:x26; dest:x12; op1val:0x80fffb;  immval:0x6
TEST_PKIMM_OP( kslli16, x12, x26, 0x00000000, 0x80fffb, 0x6, x26, x1, 72, x24)

inst_10:
// rs1==x19, rd==x15, imm_val == 5, rs1_h0_val == 8
// opcode: kslli16 ; op1:x19; dest:x15; op1val:0x030008;  immval:0x5
TEST_PKIMM_OP( kslli16, x15, x19, 0x00000000, 0x030008, 0x5, x19, x1, 80, x24)

inst_11:
// rs1==x18, rd==x11, imm_val == 4, 
// opcode: kslli16 ; op1:x18; dest:x11; op1val:0xfffafff8;  immval:0x4
TEST_PKIMM_OP( kslli16, x11, x18, 0x00000000, 0xfffafff8, 0x4, x18, x1, 88, x24)

inst_12:
// rs1==x29, rd==x26, imm_val == 3, rs1_h0_val == 128
// opcode: kslli16 ; op1:x29; dest:x26; op1val:0x800080;  immval:0x3
TEST_PKIMM_OP( kslli16, x26, x29, 0x00000000, 0x800080, 0x3, x29, x1, 96, x24)

inst_13:
// rs1==x5, rd==x7, imm_val == 2, rs1_h1_val == 4, rs1_h0_val == -17
// opcode: kslli16 ; op1:x5; dest:x7; op1val:0x04ffef;  immval:0x2
TEST_PKIMM_OP( kslli16, x7, x5, 0x00000000, 0x04ffef, 0x2, x5, x1, 104, x24)

inst_14:
// rs1==x6, rd==x8, imm_val == 1, rs1_h0_val == -9, rs1_h1_val == -4097
// opcode: kslli16 ; op1:x6; dest:x8; op1val:0xeffffff7;  immval:0x1
TEST_PKIMM_OP( kslli16, x8, x6, 0x00000000, 0xeffffff7, 0x1, x6, x1, 112, x24)

inst_15:
// rs1==x15, rd==x18, imm_val == 0, 
// opcode: kslli16 ; op1:x15; dest:x18; op1val:0x074000;  immval:0x0
TEST_PKIMM_OP( kslli16, x18, x15, 0x00000000, 0x074000, 0x0, x15, x1, 120, x24)

inst_16:
// rs1==x16, rd==x23, rs1_h1_val == -21846, 
// opcode: kslli16 ; op1:x16; dest:x23; op1val:0xaaaa4000;  immval:0xc
TEST_PKIMM_OP( kslli16, x23, x16, 0x00000000, 0xaaaa4000, 0xc, x16, x1, 128, x24)

inst_17:
// rs1==x20, rd==x30, rs1_h1_val == 21845, 
// opcode: kslli16 ; op1:x20; dest:x30; op1val:0x55550008;  immval:0x0
TEST_PKIMM_OP( kslli16, x30, x20, 0x00000000, 0x55550008, 0x0, x20, x1, 136, x24)

inst_18:
// rs1==x14, rd==x25, rs1_h1_val == 32767, 
// opcode: kslli16 ; op1:x14; dest:x25; op1val:0x7fffffef;  immval:0x7
TEST_PKIMM_OP( kslli16, x25, x14, 0x00000000, 0x7fffffef, 0x7, x14, x1, 144, x24)

inst_19:
// rs1==x13, rd==x14, rs1_h1_val == -16385, rs1_h0_val == -2049
// opcode: kslli16 ; op1:x13; dest:x14; op1val:0xbffff7ff;  immval:0xa
TEST_PKIMM_OP( kslli16, x14, x13, 0x00000000, 0xbffff7ff, 0xa, x13, x1, 152, x24)

inst_20:
// rs1==x11, rd==x20, rs1_h1_val == -2049, rs1_h0_val == -1
// opcode: kslli16 ; op1:x11; dest:x20; op1val:0xf7ffffff;  immval:0xb
TEST_PKIMM_OP( kslli16, x20, x11, 0x00000000, 0xf7ffffff, 0xb, x11, x1, 160, x5)

inst_21:
// rs1==x28, rd==x22, rs1_h1_val == -513, rs1_h0_val == -1025
// opcode: kslli16 ; op1:x28; dest:x22; op1val:0xfdfffbff;  immval:0xf
TEST_PKIMM_OP( kslli16, x22, x28, 0x00000000, 0xfdfffbff, 0xf, x28, x1, 168, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_22:
// rs1==x12, rd==x6, rs1_h1_val == -257, rs1_h0_val == 2
// opcode: kslli16 ; op1:x12; dest:x6; op1val:0xfeff0002;  immval:0x7
TEST_PKIMM_OP( kslli16, x6, x12, 0x00000000, 0xfeff0002, 0x7, x12, x2, 0, x5)

inst_23:
// rs1==x27, rd==x28, rs1_h1_val == -129, 
// opcode: kslli16 ; op1:x27; dest:x28; op1val:0xff7ffff8;  immval:0xd
TEST_PKIMM_OP( kslli16, x28, x27, 0x00000000, 0xff7ffff8, 0xd, x27, x2, 8, x5)

inst_24:
// rs1==x9, rd==x24, rs1_h1_val == -65, rs1_h0_val == 512
// opcode: kslli16 ; op1:x9; dest:x24; op1val:0xffbf0200;  immval:0xc
TEST_PKIMM_OP( kslli16, x24, x9, 0x00000000, 0xffbf0200, 0xc, x9, x2, 16, x5)

inst_25:
// rs1==x21, rd==x4, rs1_h1_val == -33, 
// opcode: kslli16 ; op1:x21; dest:x4; op1val:0xffdffff7;  immval:0x0
TEST_PKIMM_OP( kslli16, x4, x21, 0x00000000, 0xffdffff7, 0x0, x21, x2, 24, x5)

inst_26:
// rs1==x25, rd==x3, rs1_h1_val == -17, 
// opcode: kslli16 ; op1:x25; dest:x3; op1val:0xffefc000;  immval:0xb
TEST_PKIMM_OP( kslli16, x3, x25, 0x00000000, 0xffefc000, 0xb, x25, x2, 32, x5)

inst_27:
// rs1==x8, rd==x29, rs1_h1_val == -9, 
// opcode: kslli16 ; op1:x8; dest:x29; op1val:0xfff7fff6;  immval:0x1
TEST_PKIMM_OP( kslli16, x29, x8, 0x00000000, 0xfff7fff6, 0x1, x8, x2, 40, x5)

inst_28:
// rs1==x24, rd==x1, rs1_h1_val == -5, rs1_h0_val == -16385
// opcode: kslli16 ; op1:x24; dest:x1; op1val:0xfffbbfff;  immval:0x3
TEST_PKIMM_OP( kslli16, x1, x24, 0x00000000, 0xfffbbfff, 0x3, x24, x2, 48, x5)

inst_29:
// rs1==x17, rd==x27, rs1_h1_val == -3, rs1_h0_val == -257
// opcode: kslli16 ; op1:x17; dest:x27; op1val:0xfffdfeff;  immval:0xe
TEST_PKIMM_OP( kslli16, x27, x17, 0x00000000, 0xfffdfeff, 0xe, x17, x2, 56, x5)

inst_30:
// rs1==x1, rd==x13, rs1_h0_val == -65, rs1_h1_val == 2048
// opcode: kslli16 ; op1:x1; dest:x13; op1val:0x800ffbf;  immval:0x1
TEST_PKIMM_OP( kslli16, x13, x1, 0x00000000, 0x800ffbf, 0x1, x1, x2, 64, x5)

inst_31:
// rs1==x31, rd==x16, rs1_h0_val == 8192, 
// opcode: kslli16 ; op1:x31; dest:x16; op1val:0xffbf2000;  immval:0xf
TEST_PKIMM_OP( kslli16, x16, x31, 0x00000000, 0xffbf2000, 0xf, x31, x2, 72, x5)

inst_32:
// rs1_h0_val == 4096, rs1_h1_val == 256
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x1001000;  immval:0x9
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x1001000, 0x9, x30, x2, 80, x5)

inst_33:
// rs1_h0_val == 2048, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xefff0800;  immval:0x8
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xefff0800, 0x8, x30, x2, 88, x5)

inst_34:
// rs1_h0_val == 256, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x10000100;  immval:0xa
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x10000100, 0xa, x30, x2, 96, x5)

inst_35:
// rs1_h0_val == 64, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xfff70040;  immval:0x7
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xfff70040, 0x7, x30, x2, 104, x5)

inst_36:
// rs1_h0_val == 32, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x55550020;  immval:0x6
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x55550020, 0x6, x30, x2, 112, x5)

inst_37:
// rs1_h0_val == 16, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x090010;  immval:0x9
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x090010, 0x9, x30, x2, 120, x5)

inst_38:
// rs1_h0_val == 4, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xfff90004;  immval:0x6
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xfff90004, 0x6, x30, x2, 128, x5)

inst_39:
// rs1_h0_val == 1, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xf7ff0001;  immval:0x0
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xf7ff0001, 0x0, x30, x2, 136, x5)

inst_40:
// rs1_h0_val == 0, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xfff80000;  immval:0x0
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xfff80000, 0x0, x30, x2, 144, x5)

inst_41:
// rs1_h1_val == -32768, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x80000009;  immval:0x4
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x80000009, 0x4, x30, x2, 152, x5)

inst_42:
// rs1_h1_val == 8192, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x20000010;  immval:0x2
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x20000010, 0x2, x30, x2, 160, x5)

inst_43:
// rs1_h1_val == 1024, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x4000008;  immval:0x2
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x4000008, 0x2, x30, x2, 168, x5)

inst_44:
// rs1_h1_val == 512, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x2000004;  immval:0x4
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x2000004, 0x4, x30, x2, 176, x5)

inst_45:
// rs1_h1_val == 64, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x40fff7;  immval:0xb
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x40fff7, 0xb, x30, x2, 184, x5)

inst_46:
// rs1_h1_val == 32, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x20ffff;  immval:0x9
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x20ffff, 0x9, x30, x2, 192, x5)

inst_47:
// rs1_h1_val == 2, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x02fff7;  immval:0x6
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x02fff7, 0x6, x30, x2, 200, x5)

inst_48:
// rs1_h1_val == 1, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x011000;  immval:0x5
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x011000, 0x5, x30, x2, 208, x5)

inst_49:
// rs1_h1_val == 0, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x000800;  immval:0x1
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x000800, 0x1, x30, x2, 216, x5)

inst_50:
// rs1_h1_val == -1, rs1_h0_val == 21845
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xffff5555;  immval:0x9
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xffff5555, 0x9, x30, x2, 224, x5)

inst_51:
// rs1_h0_val == -21846, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x20aaaa;  immval:0x7
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x20aaaa, 0x7, x30, x2, 232, x5)

inst_52:
// rs1_h0_val == 32767, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xfffe7fff;  immval:0x5
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xfffe7fff, 0x5, x30, x2, 240, x5)

inst_53:
// rs1_h0_val == -8193, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xaaaadfff;  immval:0x0
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xaaaadfff, 0x0, x30, x2, 248, x5)

inst_54:
// rs1_h0_val == -4097, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x400efff;  immval:0xe
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x400efff, 0xe, x30, x2, 256, x5)

inst_55:
// rs1_h0_val == -513, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x2000fdff;  immval:0xc
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x2000fdff, 0xc, x30, x2, 264, x5)

inst_56:
// rs1_h0_val == -129, 
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0x07ff7f;  immval:0x7
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0x07ff7f, 0x7, x30, x2, 272, x5)

inst_57:
// imm_val == 15, rs1_h1_val == -8193, rs1_h0_val == -2
// opcode: kslli16 ; op1:x30; dest:x31; op1val:0xdffffffe;  immval:0xf
TEST_PKIMM_OP( kslli16, x31, x30, 0x00000000, 0xdffffffe, 0xf, x30, x2, 280, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 72*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
