
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urstas16 instruction of the RISC-V RV32PZicsr extension for the urstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x8, rd==x19, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 65279, rs2_h0_val == 65527
// opcode: urstas16 ; op1:x13; op2:x8; dest:x19; op1val:0xfeff0000;  op2val:0x06fff7
TEST_RR_OP(urstas16, x19, x13, x8, 0x00000000, 0xfeff0000, 0x06fff7, x7, 0, x22)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x26, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65279, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: urstas16 ; op1:x31; op2:x31; dest:x26; op1val:0x0c000a;  op2val:0x0cfeff
TEST_RR_OP(urstas16, x26, x31, x31, 0x00000000, 0x0c000a, 0x0cfeff, x7, 4, x22)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x11, rd==x18, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 49151, rs1_h1_val == 61439, rs1_h0_val == 16, rs2_h0_val == 16
// opcode: urstas16 ; op1:x18; op2:x11; dest:x18; op1val:0xefff0010;  op2val:0xbfff0010
TEST_RR_OP(urstas16, x18, x18, x11, 0x00000000, 0xefff0010, 0xbfff0010, x7, 8, x22)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs2_h1_val == 43690, rs2_h0_val == 65534, rs1_h1_val == 65533
// opcode: urstas16 ; op1:x17; op2:x17; dest:x17; op1val:0xfffd0009;  op2val:0xaaaafffe
TEST_RR_OP(urstas16, x17, x17, x17, 0x00000000, 0xfffd0009, 0xaaaafffe, x7, 12, x22)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x21, rd==x21, rs2_h1_val == 21845, rs1_h0_val == 512, rs2_h0_val == 0, rs1_h1_val == 65407
// opcode: urstas16 ; op1:x24; op2:x21; dest:x21; op1val:0xff7f0200;  op2val:0x55550000
TEST_RR_OP(urstas16, x21, x24, x21, 0x00000000, 0xff7f0200, 0x55550000, x7, 16, x22)

inst_5:
// rs1==x15, rs2==x5, rd==x29, rs2_h1_val == 32767, rs2_h0_val == 21845, rs1_h1_val == 63487, rs1_h0_val == 8
// opcode: urstas16 ; op1:x15; op2:x5; dest:x29; op1val:0xf7ff0008;  op2val:0x7fff5555
TEST_RR_OP(urstas16, x29, x15, x5, 0x00000000, 0xf7ff0008, 0x7fff5555, x7, 20, x22)

inst_6:
// rs1==x6, rs2==x13, rd==x10, rs2_h1_val == 57343, rs2_h0_val == 65531, rs1_h0_val == 2
// opcode: urstas16 ; op1:x6; op2:x13; dest:x10; op1val:0xefff0002;  op2val:0xdffffffb
TEST_RR_OP(urstas16, x10, x6, x13, 0x00000000, 0xefff0002, 0xdffffffb, x7, 24, x22)

inst_7:
// rs1==x12, rs2==x4, rd==x3, rs2_h1_val == 61439, rs2_h0_val == 65533, rs1_h0_val == 128, rs1_h1_val == 1024
// opcode: urstas16 ; op1:x12; op2:x4; dest:x3; op1val:0x4000080;  op2val:0xeffffffd
TEST_RR_OP(urstas16, x3, x12, x4, 0x00000000, 0x4000080, 0xeffffffd, x7, 28, x22)

inst_8:
// rs1==x10, rs2==x25, rd==x8, rs2_h1_val == 63487, rs1_h1_val == 0, rs1_h0_val == 43690
// opcode: urstas16 ; op1:x10; op2:x25; dest:x8; op1val:0x00aaaa;  op2val:0xf7fffeff
TEST_RR_OP(urstas16, x8, x10, x25, 0x00000000, 0x00aaaa, 0xf7fffeff, x7, 32, x22)

inst_9:
// rs1==x27, rs2==x24, rd==x31, rs2_h1_val == 64511, rs1_h1_val == 16
// opcode: urstas16 ; op1:x27; op2:x24; dest:x31; op1val:0x10aaaa;  op2val:0xfbff000c
TEST_RR_OP(urstas16, x31, x27, x24, 0x00000000, 0x10aaaa, 0xfbff000c, x7, 36, x22)

inst_10:
// rs1==x19, rs2==x20, rd==x14, rs2_h1_val == 65023, rs1_h1_val == 2, rs2_h0_val == 57343, rs1_h0_val == 4096
// opcode: urstas16 ; op1:x19; op2:x20; dest:x14; op1val:0x021000;  op2val:0xfdffdfff
TEST_RR_OP(urstas16, x14, x19, x20, 0x00000000, 0x021000, 0xfdffdfff, x7, 40, x22)

inst_11:
// rs1==x26, rs2==x0, rd==x13, rs2_h1_val == 65279, 
// opcode: urstas16 ; op1:x26; op2:x0; dest:x13; op1val:0x070008;  op2val:0xfeff0003
TEST_RR_OP(urstas16, x13, x26, x0, 0x00000000, 0x070008, 0xfeff0003, x7, 44, x22)

inst_12:
// rs1==x30, rs2==x9, rd==x2, rs2_h1_val == 65407, 
// opcode: urstas16 ; op1:x30; op2:x9; dest:x2; op1val:0x0f0005;  op2val:0xff7f0010
TEST_RR_OP(urstas16, x2, x30, x9, 0x00000000, 0x0f0005, 0xff7f0010, x7, 48, x22)

inst_13:
// rs1==x1, rs2==x19, rd==x16, rs2_h1_val == 65471, rs1_h1_val == 65503, rs1_h0_val == 65519
// opcode: urstas16 ; op1:x1; op2:x19; dest:x16; op1val:0xffdfffef;  op2val:0xffbffffd
TEST_RR_OP(urstas16, x16, x1, x19, 0x00000000, 0xffdfffef, 0xffbffffd, x7, 52, x22)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_14:
// rs1==x8, rs2==x18, rd==x30, rs2_h1_val == 65503, rs2_h0_val == 64, rs1_h1_val == 65531
// opcode: urstas16 ; op1:x8; op2:x18; dest:x30; op1val:0xfffb0200;  op2val:0xffdf0040
TEST_RR_OP(urstas16, x30, x8, x18, 0x00000000, 0xfffb0200, 0xffdf0040, x13, 0, x17)

inst_15:
// rs1==x0, rs2==x10, rd==x7, rs2_h1_val == 65519, rs2_h0_val == 16384
// opcode: urstas16 ; op1:x0; op2:x10; dest:x7; op1val:0x100002;  op2val:0xffef4000
TEST_RR_OP(urstas16, x7, x0, x10, 0x00000000, 0x100002, 0xffef4000, x13, 4, x17)

inst_16:
// rs1==x11, rs2==x28, rd==x9, rs2_h1_val == 65527, rs2_h0_val == 64511, rs1_h1_val == 65471
// opcode: urstas16 ; op1:x11; op2:x28; dest:x9; op1val:0xffbfffef;  op2val:0xfff7fbff
TEST_RR_OP(urstas16, x9, x11, x28, 0x00000000, 0xffbfffef, 0xfff7fbff, x13, 8, x17)

inst_17:
// rs1==x7, rs2==x27, rd==x24, rs2_h1_val == 65531, rs2_h0_val == 4, rs1_h1_val == 65535
// opcode: urstas16 ; op1:x7; op2:x27; dest:x24; op1val:0xffff0013;  op2val:0xfffb0004
TEST_RR_OP(urstas16, x24, x7, x27, 0x00000000, 0xffff0013, 0xfffb0004, x13, 12, x17)

inst_18:
// rs1==x22, rs2==x15, rd==x11, rs2_h1_val == 65533, rs1_h0_val == 65023, rs2_h0_val == 8
// opcode: urstas16 ; op1:x22; op2:x15; dest:x11; op1val:0x00fdff;  op2val:0xfffd0008
TEST_RR_OP(urstas16, x11, x22, x15, 0x00000000, 0x00fdff, 0xfffd0008, x13, 16, x17)

inst_19:
// rs1==x3, rs2==x12, rd==x6, rs2_h1_val == 65534, rs1_h1_val == 64, rs2_h0_val == 65519
// opcode: urstas16 ; op1:x3; op2:x12; dest:x6; op1val:0x40aaaa;  op2val:0xfffeffef
TEST_RR_OP(urstas16, x6, x3, x12, 0x00000000, 0x40aaaa, 0xfffeffef, x13, 20, x17)

inst_20:
// rs1==x4, rs2==x23, rd==x27, rs2_h1_val == 32768, rs1_h0_val == 64511
// opcode: urstas16 ; op1:x4; op2:x23; dest:x27; op1val:0x06fbff;  op2val:0x80005555
TEST_RR_OP(urstas16, x27, x4, x23, 0x00000000, 0x06fbff, 0x80005555, x13, 24, x17)

inst_21:
// rs1==x29, rs2==x1, rd==x22, rs2_h1_val == 16384, rs1_h1_val == 4
// opcode: urstas16 ; op1:x29; op2:x1; dest:x22; op1val:0x04aaaa;  op2val:0x40000007
TEST_RR_OP(urstas16, x22, x29, x1, 0x00000000, 0x04aaaa, 0x40000007, x13, 28, x17)

inst_22:
// rs1==x20, rs2==x14, rd==x4, rs2_h1_val == 8192, rs1_h1_val == 8, rs2_h0_val == 128
// opcode: urstas16 ; op1:x20; op2:x14; dest:x4; op1val:0x080011;  op2val:0x20000080
TEST_RR_OP(urstas16, x4, x20, x14, 0x00000000, 0x080011, 0x20000080, x13, 32, x17)

inst_23:
// rs1==x5, rs2==x29, rd==x25, rs2_h1_val == 4096, rs1_h1_val == 64511
// opcode: urstas16 ; op1:x5; op2:x29; dest:x25; op1val:0xfbfffdff;  op2val:0x10000005
TEST_RR_OP(urstas16, x25, x5, x29, 0x00000000, 0xfbfffdff, 0x10000005, x13, 36, x17)

inst_24:
// rs1==x9, rs2==x7, rd==x15, rs2_h1_val == 2048, rs2_h0_val == 65503, rs1_h1_val == 65534
// opcode: urstas16 ; op1:x9; op2:x7; dest:x15; op1val:0xfffe000d;  op2val:0x800ffdf
TEST_RR_OP(urstas16, x15, x9, x7, 0x00000000, 0xfffe000d, 0x800ffdf, x13, 40, x17)

inst_25:
// rs1==x23, rs2==x6, rd==x28, rs2_h1_val == 1024, rs1_h0_val == 65503, rs2_h0_val == 32
// opcode: urstas16 ; op1:x23; op2:x6; dest:x28; op1val:0x09ffdf;  op2val:0x4000020
TEST_RR_OP(urstas16, x28, x23, x6, 0x00000000, 0x09ffdf, 0x4000020, x13, 44, x17)

inst_26:
// rs1==x2, rs2==x3, rd==x5, rs2_h1_val == 512, 
// opcode: urstas16 ; op1:x2; op2:x3; dest:x5; op1val:0x08ffef;  op2val:0x2000004
TEST_RR_OP(urstas16, x5, x2, x3, 0x00000000, 0x08ffef, 0x2000004, x13, 48, x17)

inst_27:
// rs1==x21, rs2==x16, rd==x12, rs2_h1_val == 256, rs1_h0_val == 65527, rs1_h1_val == 128
// opcode: urstas16 ; op1:x21; op2:x16; dest:x12; op1val:0x80fff7;  op2val:0x1004000
TEST_RR_OP(urstas16, x12, x21, x16, 0x00000000, 0x80fff7, 0x1004000, x13, 52, x17)

inst_28:
// rs1==x28, rs2==x2, rd==x0, rs2_h1_val == 128, rs1_h0_val == 16384
// opcode: urstas16 ; op1:x28; op2:x2; dest:x0; op1val:0x124000;  op2val:0x800003
TEST_RR_OP(urstas16, x0, x28, x2, 0x00000000, 0x124000, 0x800003, x13, 56, x3)

inst_29:
// rs1==x14, rs2==x26, rd==x1, rs2_h1_val == 64, 
// opcode: urstas16 ; op1:x14; op2:x26; dest:x1; op1val:0xffdf0007;  op2val:0x400011
TEST_RR_OP(urstas16, x1, x14, x26, 0x00000000, 0xffdf0007, 0x400011, x13, 60, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x16, rs2==x22, rd==x20, rs2_h1_val == 32, rs1_h0_val == 4, rs2_h0_val == 61439
// opcode: urstas16 ; op1:x16; op2:x22; dest:x20; op1val:0xfbff0004;  op2val:0x20efff
TEST_RR_OP(urstas16, x20, x16, x22, 0x00000000, 0xfbff0004, 0x20efff, x1, 0, x3)

inst_31:
// rs1==x25, rs2==x30, rd==x23, rs2_h1_val == 16, 
// opcode: urstas16 ; op1:x25; op2:x30; dest:x23; op1val:0x0efdff;  op2val:0x100080
TEST_RR_OP(urstas16, x23, x25, x30, 0x00000000, 0x0efdff, 0x100080, x1, 4, x3)

inst_32:
// rs1_h0_val == 65531, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffb;  op2val:0x4000004
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x07fffb, 0x4000004, x1, 8, x3)

inst_33:
// rs1_h0_val == 65533, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffd;  op2val:0xf7ff5555
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x03fffd, 0xf7ff5555, x1, 12, x3)

inst_34:
// rs1_h0_val == 65534, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffe;  op2val:0xf7fffffd
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x05fffe, 0xf7fffffd, x1, 16, x3)

inst_35:
// rs1_h0_val == 32768, rs2_h0_val == 512
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff8000;  op2val:0xfdff0200
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfeff8000, 0xfdff0200, x1, 20, x3)

inst_36:
// rs1_h0_val == 8192, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd2000;  op2val:0x100efff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfffd2000, 0x100efff, x1, 24, x3)

inst_37:
// rs1_h0_val == 2048, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0x8000004
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfffd0800, 0x8000004, x1, 28, x3)

inst_38:
// rs1_h0_val == 1024, rs1_h1_val == 32767
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0xfdff0011
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x7fff0400, 0xfdff0011, x1, 32, x3)

inst_39:
// rs1_h0_val == 256, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0100;  op2val:0xfff70008
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xf7ff0100, 0xfff70008, x1, 36, x3)

inst_40:
// rs1_h0_val == 64, rs1_h1_val == 65527
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70040;  op2val:0x2000012
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfff70040, 0x2000012, x1, 40, x3)

inst_41:
// rs1_h0_val == 32, rs1_h1_val == 32
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200020;  op2val:0xff7fffef
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x200020, 0xff7fffef, x1, 44, x3)

inst_42:
// rs1_h0_val == 1, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001;  op2val:0xf7fffff7
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x100001, 0xf7fffff7, x1, 48, x3)

inst_43:
// rs1_h0_val == 65535, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffff;  op2val:0x0c0004
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x05ffff, 0x0c0004, x1, 52, x3)

inst_44:
// rs2_h1_val == 8, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000f;  op2val:0x08efff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x03000f, 0x08efff, x1, 56, x3)

inst_45:
// rs2_h1_val == 4, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffd;  op2val:0x040200
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x80fffd, 0x040200, x1, 60, x3)

inst_46:
// rs2_h1_val == 2, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0005;  op2val:0x02000f
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfffe0005, 0x02000f, x1, 64, x3)

inst_47:
// rs2_h1_val == 1, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x020010;  op2val:0x014000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x020010, 0x014000, x1, 68, x3)

inst_48:
// rs2_h1_val == 65535, rs1_h1_val == 8192
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000100;  op2val:0xffffefff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x20000100, 0xffffefff, x1, 72, x3)

inst_49:
// rs2_h1_val == 0, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x110001;  op2val:0x00000f
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x110001, 0x00000f, x1, 76, x3)

inst_50:
// rs2_h0_val == 43690, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e000c;  op2val:0xfffdaaaa
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x0e000c, 0xfffdaaaa, x1, 80, x3)

inst_51:
// rs2_h0_val == 32767, rs1_h1_val == 16384
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000012;  op2val:0x0d7fff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x40000012, 0x0d7fff, x1, 84, x3)

inst_52:
// rs2_h0_val == 49151, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000f;  op2val:0x0dbfff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xffdf000f, 0x0dbfff, x1, 88, x3)

inst_53:
// rs2_h0_val == 63487, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800011;  op2val:0x0bf7ff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x800011, 0x0bf7ff, x1, 92, x3)

inst_54:
// rs2_h0_val == 65023, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffe;  op2val:0x400fdff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x80fffe, 0x400fdff, x1, 96, x3)

inst_55:
// rs2_h0_val == 65407, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x408000;  op2val:0xfffbff7f
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x408000, 0xfffbff7f, x1, 100, x3)

inst_56:
// rs2_h0_val == 1024, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800;  op2val:0xdfff0400
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x4000800, 0xdfff0400, x1, 104, x3)

inst_57:
// rs2_h0_val == 256, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009;  op2val:0x7fff0100
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfbff0009, 0x7fff0100, x1, 108, x3)

inst_58:
// rs2_h0_val == 2, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0x200002
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x800200, 0x200002, x1, 112, x3)

inst_59:
// rs2_h0_val == 1, rs1_h1_val == 43690
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x080001
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x080001, x1, 116, x3)

inst_60:
// rs2_h0_val == 65535, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0afbff;  op2val:0x02ffff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x0afbff, 0x02ffff, x1, 120, x3)

inst_61:
// rs1_h1_val == 21845, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7;  op2val:0x050005
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x5555fff7, 0x050005, x1, 124, x3)

inst_62:
// rs1_h1_val == 49151, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffe;  op2val:0xdfff000b
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xbffffffe, 0xdfff000b, x1, 128, x3)

inst_63:
// rs1_h1_val == 57343, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000b;  op2val:0x08000f
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xdfff000b, 0x08000f, x1, 132, x3)

inst_64:
// rs1_h1_val == 65023, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaa;  op2val:0xdffffffb
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfdffaaaa, 0xdffffffb, x1, 136, x3)

inst_65:
// rs1_h1_val == 65519, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0013;  op2val:0x0fbfff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xffef0013, 0x0fbfff, x1, 140, x3)

inst_66:
// rs1_h1_val == 32768, rs2_h0_val == 32768
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf;  op2val:0x55558000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x8000ffdf, 0x55558000, x1, 144, x3)

inst_67:
// rs1_h1_val == 4096, rs2_h0_val == 65471
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffe;  op2val:0x11ffbf
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x1000fffe, 0x11ffbf, x1, 148, x3)

inst_68:
// rs1_h1_val == 2048, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000012;  op2val:0x80efff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x8000012, 0x80efff, x1, 152, x3)

inst_69:
// rs1_h1_val == 512, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000c;  op2val:0x7fffbfff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x200000c, 0x7fffbfff, x1, 156, x3)

inst_70:
// rs1_h1_val == 256, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000009;  op2val:0x067fff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x1000009, 0x067fff, x1, 160, x3)

inst_71:
// rs1_h1_val == 1, rs1_h0_val == 65471
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbf;  op2val:0xffdf0011
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x01ffbf, 0xffdf0011, x1, 164, x3)

inst_72:
// rs1_h0_val == 21845, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x035555;  op2val:0xfeff0200
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x035555, 0xfeff0200, x1, 168, x3)

inst_73:
// rs1_h0_val == 32767, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0xf7ff0003
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfff77fff, 0xf7ff0003, x1, 172, x3)

inst_74:
// rs1_h0_val == 49151, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefbfff;  op2val:0x074000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xffefbfff, 0x074000, x1, 176, x3)

inst_75:
// rs1_h0_val == 57343, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x13dfff;  op2val:0x020010
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x13dfff, 0x020010, x1, 180, x3)

inst_76:
// rs1_h0_val == 61439, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555efff;  op2val:0xfffb7fff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x5555efff, 0xfffb7fff, x1, 184, x3)

inst_77:
// rs1_h0_val == 63487, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff;  op2val:0x008000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfffbf7ff, 0x008000, x1, 188, x3)

inst_78:
// rs1_h0_val == 65279, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20feff;  op2val:0x100008
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x20feff, 0x100008, x1, 192, x3)

inst_79:
// rs1_h0_val == 65407, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cff7f;  op2val:0xefff0008
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x0cff7f, 0xefff0008, x1, 196, x3)

inst_80:
// rs2_h0_val == 8192, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040;  op2val:0x102000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xaaaa0040, 0x102000, x1, 200, x3)

inst_81:
// rs2_h0_val == 4096, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100efff;  op2val:0xfffd1000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x100efff, 0xfffd1000, x1, 204, x3)

inst_82:
// rs2_h0_val == 2048, 
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd;  op2val:0x4000800
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x1000fffd, 0x4000800, x1, 208, x3)

inst_83:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65279, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000a;  op2val:0x0cfeff
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x0c000a, 0x0cfeff, x1, 212, x3)

inst_84:
// rs2_h1_val == 43690, rs2_h0_val == 65534, rs1_h1_val == 65533
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0009;  op2val:0xaaaafffe
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0xfffd0009, 0xaaaafffe, x1, 216, x3)

inst_85:
// rs2_h1_val == 65519, rs2_h0_val == 16384
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002;  op2val:0xffef4000
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x100002, 0xffef4000, x1, 220, x3)

inst_86:
// rs2_h1_val == 128, rs1_h0_val == 16384
// opcode: urstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x124000;  op2val:0x800003
TEST_RR_OP(urstas16, x31, x30, x29, 0x00000000, 0x124000, 0x800003, x1, 224, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 57*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
