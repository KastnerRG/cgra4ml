
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulr64 instruction of the RISC-V RV32PZicsr extension for the mulr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",mulr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x13, rd==x12, rs1_w0_val == 0, rs2_w0_val == 64
// opcode: mulr64 ; op1:x8; op2:x13; dest:x12; op1val:0x00000000;  op2val:0x00000040;
TEST_P64_PNN_OP(mulr64, x12, x13, x8, x13, 0x00000000, 0, 0x00000000, 0x00000040, x1, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x22, rs2_w0_val == 2863311530, rs1_w0_val == 128
// opcode: mulr64 ; op1:x15; op2:x15; dest:x22; op1val:0x00000080;  op2val:0xaaaaaaaa;
TEST_P64_PNN_OP(mulr64, x22, x23, x15, x15, 0x00000000, 0, 0x00000080, 0xaaaaaaaa, x1, 8, x7)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x22, rd==x30, rs2_w0_val == 1431655765, rs1_w0_val == 4278190079
// opcode: mulr64 ; op1:x30; op2:x22; dest:x30; op1val:0xfeffffff;  op2val:0x55555555;
TEST_P64_PNN_OP(mulr64, x30, x31, x30, x22, 0x00000000, 0, 0xfeffffff, 0x55555555, x1, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs2_w0_val == 2147483647, 
// opcode: mulr64 ; op1:x6; op2:x6; dest:x6; op1val:0x00000011;  op2val:0x7fffffff;
TEST_P64_PNN_OP(mulr64, x6, x7, x6, x6, 0x00000000, 0, 0x00000011, 0x7fffffff, x1, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x8, rd==x8, rs2_w0_val == 3221225471, rs1_w0_val == 4294967231
// opcode: mulr64 ; op1:x28; op2:x8; dest:x8; op1val:0xffffffbf;  op2val:0xbfffffff;
TEST_P64_PNN_OP(mulr64, x8, x9, x28, x8, 0x00000000, 0, 0xffffffbf, 0xbfffffff, x1, 32, x7)

inst_5:
// rs1==x5, rs2==x12, rd==x24, rs2_w0_val == 3758096383, rs1_w0_val == 4294950911
// opcode: mulr64 ; op1:x5; op2:x12; dest:x24; op1val:0xffffbfff;  op2val:0xdfffffff;
TEST_P64_PNN_OP(mulr64, x24, x25, x5, x12, 0x00000000, 0, 0xffffbfff, 0xdfffffff, x1, 40, x7)

inst_6:
// rs1==x0, rs2==x4, rd==x14, rs2_w0_val == 4026531839, rs1_w0_val == 4294967263
// opcode: mulr64 ; op1:x0; op2:x4; dest:x14; op1val:0xffffffdf;  op2val:0xefffffff;
TEST_P64_PNN_OP(mulr64, x14, x15, x0, x4, 0x00000000, 0, 0xffffffdf, 0xefffffff, x1, 48, x7)

inst_7:
// rs1==x23, rs2==x0, rd==x26, rs2_w0_val == 4160749567, 
// opcode: mulr64 ; op1:x23; op2:x0; dest:x26; op1val:0x0000000e;  op2val:0xf7ffffff;
TEST_P64_PNN_OP(mulr64, x26, x27, x23, x0, 0x00000000, 0, 0x0000000e, 0xf7ffffff, x1, 56, x7)

inst_8:
// rs1==x26, rs2==x11, rd==x20, rs2_w0_val == 4227858431, rs1_w0_val == 536870912
// opcode: mulr64 ; op1:x26; op2:x11; dest:x20; op1val:0x20000000;  op2val:0xfbffffff;
TEST_P64_PNN_OP(mulr64, x20, x21, x26, x11, 0x00000000, 0, 0x20000000, 0xfbffffff, x1, 64, x7)

inst_9:
// rs1==x14, rs2==x17, rd==x2, rs2_w0_val == 4261412863, rs1_w0_val == 2147483647
// opcode: mulr64 ; op1:x14; op2:x17; dest:x2; op1val:0x7fffffff;  op2val:0xfdffffff;
TEST_P64_PNN_OP(mulr64, x2, x3, x14, x17, 0x00000000, 0, 0x7fffffff, 0xfdffffff, x1, 72, x7)

inst_10:
// rs1==x29, rs2==x24, rd==x18, rs2_w0_val == 4278190079, rs1_w0_val == 4293918719
// opcode: mulr64 ; op1:x29; op2:x24; dest:x18; op1val:0xffefffff;  op2val:0xfeffffff;
TEST_P64_PNN_OP(mulr64, x18, x19, x29, x24, 0x00000000, 0, 0xffefffff, 0xfeffffff, x1, 80, x7)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_11:
// rs1==x27, rs2==x1, rd==x16, rs2_w0_val == 4286578687, 
// opcode: mulr64 ; op1:x27; op2:x1; dest:x16; op1val:0x0000000f;  op2val:0xff7fffff;
TEST_P64_PNN_OP(mulr64, x16, x17, x27, x1, 0x00000000, 0, 0x0000000f, 0xff7fffff, x8, 0, x2)

inst_12:
// rs1==x31, rs2==x25, rd==x28, rs2_w0_val == 4290772991, rs1_w0_val == 4294967167
// opcode: mulr64 ; op1:x31; op2:x25; dest:x28; op1val:0xffffff7f;  op2val:0xffbfffff;
TEST_P64_PNN_OP(mulr64, x28, x29, x31, x25, 0x00000000, 0, 0xffffff7f, 0xffbfffff, x8, 8, x2)

inst_13:
// rs1==x20, rs2==x16, rd==x10, rs2_w0_val == 4292870143, rs1_w0_val == 67108864
// opcode: mulr64 ; op1:x20; op2:x16; dest:x10; op1val:0x04000000;  op2val:0xffdfffff;
TEST_P64_PNN_OP(mulr64, x10, x11, x20, x16, 0x00000000, 0, 0x04000000, 0xffdfffff, x8, 16, x2)

inst_14:
// rs1==x16, rs2==x30, rd==x4, rs2_w0_val == 4293918719, rs1_w0_val == 16
// opcode: mulr64 ; op1:x16; op2:x30; dest:x4; op1val:0x00000010;  op2val:0xffefffff;
TEST_P64_PNN_OP(mulr64, x4, x5, x16, x30, 0x00000000, 0, 0x00000010, 0xffefffff, x8, 24, x2)

inst_15:
// rs1==x1, rs2==x26, rs2_w0_val == 4294443007, 
// opcode: mulr64 ; op1:x1; op2:x26; dest:x14; op1val:0x00000003;  op2val:0xfff7ffff;
TEST_P64_PNN_OP(mulr64, x14, x15, x1, x26, 0x00000000, 0, 0x00000003, 0xfff7ffff, x8, 32, x2)

inst_16:
// rs1==x7, rs2==x19, rs2_w0_val == 4294705151, rs1_w0_val == 4294966783
// opcode: mulr64 ; op1:x7; op2:x19; dest:x28; op1val:0xfffffdff;  op2val:0xfffbffff;
TEST_P64_PNN_OP(mulr64, x28, x29, x7, x19, 0x00000000, 0, 0xfffffdff, 0xfffbffff, x8, 40, x2)

inst_17:
// rs1==x21, rs2==x9, rs2_w0_val == 4294836223, rs1_w0_val == 2147483648
// opcode: mulr64 ; op1:x21; op2:x9; dest:x28; op1val:0x80000000;  op2val:0xfffdffff;
TEST_P64_PNN_OP(mulr64, x28, x29, x21, x9, 0x00000000, 0, 0x80000000, 0xfffdffff, x8, 48, x2)

inst_18:
// rs1==x11, rs2==x18, rs2_w0_val == 4294901759, rs1_w0_val == 4227858431
// opcode: mulr64 ; op1:x11; op2:x18; dest:x30; op1val:0xfbffffff;  op2val:0xfffeffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x11, x18, 0x00000000, 0, 0xfbffffff, 0xfffeffff, x8, 56, x2)

inst_19:
// rs1==x22, rs2==x14, rs2_w0_val == 4294934527, 
// opcode: mulr64 ; op1:x22; op2:x14; dest:x20; op1val:0xffffffbf;  op2val:0xffff7fff;
TEST_P64_PNN_OP(mulr64, x20, x21, x22, x14, 0x00000000, 0, 0xffffffbf, 0xffff7fff, x8, 64, x2)

inst_20:
// rs1==x12, rs2==x31, rs2_w0_val == 4294950911, rs1_w0_val == 3221225471
// opcode: mulr64 ; op1:x12; op2:x31; dest:x16; op1val:0xbfffffff;  op2val:0xffffbfff;
TEST_P64_PNN_OP(mulr64, x16, x17, x12, x31, 0x00000000, 0, 0xbfffffff, 0xffffbfff, x8, 72, x2)

inst_21:
// rs1==x4, rs2==x7, rs2_w0_val == 4294959103, 
// opcode: mulr64 ; op1:x4; op2:x7; dest:x6; op1val:0xffffffbf;  op2val:0xffffdfff;
TEST_P64_PNN_OP(mulr64, x6, x7, x4, x7, 0x00000000, 0, 0xffffffbf, 0xffffdfff, x8, 80, x2)

inst_22:
// rs1==x17, rs2==x27, rs2_w0_val == 4294963199, rs1_w0_val == 4290772991
// opcode: mulr64 ; op1:x17; op2:x27; dest:x6; op1val:0xffbfffff;  op2val:0xffffefff;
TEST_P64_PNN_OP(mulr64, x6, x7, x17, x27, 0x00000000, 0, 0xffbfffff, 0xffffefff, x8, 88, x4)

inst_23:
// rs1==x3, rs2==x2, rs2_w0_val == 4294965247, rs1_w0_val == 1431655765
// opcode: mulr64 ; op1:x3; op2:x2; dest:x18; op1val:0x55555555;  op2val:0xfffff7ff;
TEST_P64_PNN_OP(mulr64, x18, x19, x3, x2, 0x00000000, 0, 0x55555555, 0xfffff7ff, x8, 96, x4)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_24:
// rs1==x2, rs2==x28, rs2_w0_val == 4294966271, 
// opcode: mulr64 ; op1:x2; op2:x28; dest:x30; op1val:0x0000000c;  op2val:0xfffffbff;
TEST_P64_PNN_OP(mulr64, x30, x31, x2, x28, 0x00000000, 0, 0x0000000c, 0xfffffbff, x1, 0, x4)

inst_25:
// rs1==x24, rs2==x20, rs2_w0_val == 4294966783, 
// opcode: mulr64 ; op1:x24; op2:x20; dest:x22; op1val:0xfbffffff;  op2val:0xfffffdff;
TEST_P64_PNN_OP(mulr64, x22, x23, x24, x20, 0x00000000, 0, 0xfbffffff, 0xfffffdff, x1, 8, x4)

inst_26:
// rs1==x25, rs2==x29, rs2_w0_val == 4294967039, rs1_w0_val == 16777216
// opcode: mulr64 ; op1:x25; op2:x29; dest:x12; op1val:0x01000000;  op2val:0xfffffeff;
TEST_P64_PNN_OP(mulr64, x12, x13, x25, x29, 0x00000000, 0, 0x01000000, 0xfffffeff, x1, 16, x4)

inst_27:
// rs1==x19, rs2==x10, rs2_w0_val == 4294967167, 
// opcode: mulr64 ; op1:x19; op2:x10; dest:x20; op1val:0x00000011;  op2val:0xffffff7f;
TEST_P64_PNN_OP(mulr64, x20, x21, x19, x10, 0x00000000, 0, 0x00000011, 0xffffff7f, x1, 24, x4)

inst_28:
// rs1==x18, rs2==x3, rs2_w0_val == 4294967231, rs1_w0_val == 1073741824
// opcode: mulr64 ; op1:x18; op2:x3; dest:x22; op1val:0x40000000;  op2val:0xffffffbf;
TEST_P64_PNN_OP(mulr64, x22, x23, x18, x3, 0x00000000, 0, 0x40000000, 0xffffffbf, x1, 32, x4)

inst_29:
// rs1==x9, rs2==x23, rs2_w0_val == 4294967263, rs1_w0_val == 131072
// opcode: mulr64 ; op1:x9; op2:x23; dest:x24; op1val:0x00020000;  op2val:0xffffffdf;
TEST_P64_PNN_OP(mulr64, x24, x25, x9, x23, 0x00000000, 0, 0x00020000, 0xffffffdf, x1, 40, x4)

inst_30:
// rs1==x10, rs2==x21, rs2_w0_val == 4294967279, rs1_w0_val == 4294705151
// opcode: mulr64 ; op1:x10; op2:x21; dest:x6; op1val:0xfffbffff;  op2val:0xffffffef;
TEST_P64_PNN_OP(mulr64, x6, x7, x10, x21, 0x00000000, 0, 0xfffbffff, 0xffffffef, x1, 48, x4)

inst_31:
// rs1==x13, rs2==x5, rs2_w0_val == 4294967287, rs1_w0_val == 4261412863
// opcode: mulr64 ; op1:x13; op2:x5; dest:x12; op1val:0xfdffffff;  op2val:0xfffffff7;
TEST_P64_PNN_OP(mulr64, x12, x13, x13, x5, 0x00000000, 0, 0xfdffffff, 0xfffffff7, x1, 56, x4)

inst_32:
// rs2_w0_val == 4294967291, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfbffffff;  op2val:0xfffffffb;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfbffffff, 0xfffffffb, x1, 64, x4)

inst_33:
// rs2_w0_val == 4294967293, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfdffffff;  op2val:0xfffffffd;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfdffffff, 0xfffffffd, x1, 72, x4)

inst_34:
// rs2_w0_val == 4294967294, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x01000000;  op2val:0xfffffffe;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x01000000, 0xfffffffe, x1, 80, x4)

inst_35:
// rs2_w0_val == 2147483648, rs1_w0_val == 16384
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00004000;  op2val:0x80000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00004000, 0x80000000, x1, 88, x4)

inst_36:
// rs2_w0_val == 1073741824, rs1_w0_val == 524288
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00080000;  op2val:0x40000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00080000, 0x40000000, x1, 96, x4)

inst_37:
// rs2_w0_val == 536870912, rs1_w0_val == 33554432
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x02000000;  op2val:0x20000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x02000000, 0x20000000, x1, 104, x4)

inst_38:
// rs2_w0_val == 268435456, rs1_w0_val == 8
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000008;  op2val:0x10000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000008, 0x10000000, x1, 112, x4)

inst_39:
// rs2_w0_val == 134217728, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffff7f;  op2val:0x08000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffff7f, 0x08000000, x1, 120, x4)

inst_40:
// rs2_w0_val == 67108864, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000011;  op2val:0x04000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000011, 0x04000000, x1, 128, x4)

inst_41:
// rs2_w0_val == 33554432, rs1_w0_val == 8192
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00002000;  op2val:0x02000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00002000, 0x02000000, x1, 136, x4)

inst_42:
// rs2_w0_val == 16777216, rs1_w0_val == 32
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000020;  op2val:0x01000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000020, 0x01000000, x1, 144, x4)

inst_43:
// rs2_w0_val == 8388608, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000f;  op2val:0x00800000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000f, 0x00800000, x1, 152, x4)

inst_44:
// rs1_w0_val == 64, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000040;  op2val:0x10000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000040, 0x10000000, x1, 160, x4)

inst_45:
// rs1_w0_val == 4, rs2_w0_val == 131072
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000004;  op2val:0x00020000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000004, 0x00020000, x1, 168, x4)

inst_46:
// rs1_w0_val == 2, rs2_w0_val == 1
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000002;  op2val:0x00000001;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000002, 0x00000001, x1, 176, x4)

inst_47:
// rs1_w0_val == 1, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000001;  op2val:0xefffffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000001, 0xefffffff, x1, 184, x4)

inst_48:
// rs1_w0_val == 4294967295, rs2_w0_val == 128
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffff;  op2val:0x00000080;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffff, 0x00000080, x1, 192, x4)

inst_49:
// rs2_w0_val == 4194304, rs1_w0_val == 2097152
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00200000;  op2val:0x00400000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00200000, 0x00400000, x1, 200, x4)

inst_50:
// rs2_w0_val == 2097152, rs1_w0_val == 4294959103
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffdfff;  op2val:0x00200000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffdfff, 0x00200000, x1, 208, x4)

inst_51:
// rs2_w0_val == 1048576, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000011;  op2val:0x00100000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000011, 0x00100000, x1, 216, x4)

inst_52:
// rs2_w0_val == 524288, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000b;  op2val:0x00080000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000b, 0x00080000, x1, 224, x4)

inst_53:
// rs2_w0_val == 262144, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfbffffff;  op2val:0x00040000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfbffffff, 0x00040000, x1, 232, x4)

inst_54:
// rs2_w0_val == 65536, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffefffff;  op2val:0x00010000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffefffff, 0x00010000, x1, 240, x4)

inst_55:
// rs2_w0_val == 32768, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x02000000;  op2val:0x00008000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x02000000, 0x00008000, x1, 248, x4)

inst_56:
// rs2_w0_val == 16384, rs1_w0_val == 4294965247
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffff7ff;  op2val:0x00004000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffff7ff, 0x00004000, x1, 256, x4)

inst_57:
// rs2_w0_val == 8192, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000d;  op2val:0x00002000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000d, 0x00002000, x1, 264, x4)

inst_58:
// rs2_w0_val == 4096, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000d;  op2val:0x00001000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000d, 0x00001000, x1, 272, x4)

inst_59:
// rs2_w0_val == 2048, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffdf;  op2val:0x00000800;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffdf, 0x00000800, x1, 280, x4)

inst_60:
// rs2_w0_val == 1024, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000f;  op2val:0x00000400;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000f, 0x00000400, x1, 288, x4)

inst_61:
// rs2_w0_val == 512, rs1_w0_val == 4294967279
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffef;  op2val:0x00000200;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffef, 0x00000200, x1, 296, x4)

inst_62:
// rs2_w0_val == 256, rs1_w0_val == 4294934527
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffff7fff;  op2val:0x00000100;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffff7fff, 0x00000100, x1, 304, x4)

inst_63:
// rs2_w0_val == 32, rs1_w0_val == 256
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000100;  op2val:0x00000020;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000100, 0x00000020, x1, 312, x4)

inst_64:
// rs2_w0_val == 16, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000008;  op2val:0x00000010;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000008, 0x00000010, x1, 320, x4)

inst_65:
// rs2_w0_val == 8, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000d;  op2val:0x00000008;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000d, 0x00000008, x1, 328, x4)

inst_66:
// rs2_w0_val == 4, rs1_w0_val == 4294967294
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffe;  op2val:0x00000004;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffe, 0x00000004, x1, 336, x4)

inst_67:
// rs2_w0_val == 2, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffff7ff;  op2val:0x00000002;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffff7ff, 0x00000002, x1, 344, x4)

inst_68:
// rs2_w0_val == 4294967295, rs1_w0_val == 1048576
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00100000;  op2val:0xffffffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00100000, 0xffffffff, x1, 352, x4)

inst_69:
// rs2_w0_val == 0, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000006;  op2val:0x00000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000006, 0x00000000, x1, 360, x4)

inst_70:
// rs1_w0_val == 2863311530, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaaaaa;  op2val:0xfffffff7;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaaaaa, 0xfffffff7, x1, 368, x4)

inst_71:
// rs1_w0_val == 3758096383, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xdfffffff;  op2val:0x01000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xdfffffff, 0x01000000, x1, 376, x4)

inst_72:
// rs1_w0_val == 4026531839, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xefffffff;  op2val:0x00000003;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xefffffff, 0x00000003, x1, 384, x4)

inst_73:
// rs1_w0_val == 4160749567, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffff;  op2val:0x7fffffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffff, 0x7fffffff, x1, 392, x4)

inst_74:
// rs1_w0_val == 4286578687, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xff7fffff;  op2val:0xffefffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xff7fffff, 0xffefffff, x1, 400, x4)

inst_75:
// rs1_w0_val == 4292870143, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffdfffff;  op2val:0x0000000c;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffdfffff, 0x0000000c, x1, 408, x4)

inst_76:
// rs1_w0_val == 4294443007, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfff7ffff;  op2val:0x00080000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfff7ffff, 0x00080000, x1, 416, x4)

inst_77:
// rs1_w0_val == 4294836223, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffdffff;  op2val:0xfffffffe;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffdffff, 0xfffffffe, x1, 424, x4)

inst_78:
// rs1_w0_val == 4294901759, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffeffff;  op2val:0x00002000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffeffff, 0x00002000, x1, 432, x4)

inst_79:
// rs1_w0_val == 4294963199, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffefff;  op2val:0x00000011;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xffffefff, 0x00000011, x1, 440, x4)

inst_80:
// rs1_w0_val == 4294966271, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffbff;  op2val:0x00001000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffbff, 0x00001000, x1, 448, x4)

inst_81:
// rs1_w0_val == 4294967287, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffff7;  op2val:0x00000006;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffff7, 0x00000006, x1, 456, x4)

inst_82:
// rs1_w0_val == 4294967291, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffb;  op2val:0x00000020;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffb, 0x00000020, x1, 464, x4)

inst_83:
// rs1_w0_val == 4294967293, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffd;  op2val:0x00000004;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffd, 0x00000004, x1, 472, x4)

inst_84:
// rs1_w0_val == 268435456, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x10000000;  op2val:0x80000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x10000000, 0x80000000, x1, 480, x4)

inst_85:
// rs1_w0_val == 134217728, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x08000000;  op2val:0x7fffffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x08000000, 0x7fffffff, x1, 488, x4)

inst_86:
// rs1_w0_val == 8388608, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00800000;  op2val:0x80000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00800000, 0x80000000, x1, 496, x4)

inst_87:
// rs1_w0_val == 4194304, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00400000;  op2val:0x04000000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00400000, 0x04000000, x1, 504, x4)

inst_88:
// rs1_w0_val == 262144, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00040000;  op2val:0x00000012;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00040000, 0x00000012, x1, 512, x4)

inst_89:
// rs1_w0_val == 65536, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00010000;  op2val:0x0000000b;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00010000, 0x0000000b, x1, 520, x4)

inst_90:
// rs1_w0_val == 32768, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00008000;  op2val:0x00000040;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00008000, 0x00000040, x1, 528, x4)

inst_91:
// rs1_w0_val == 4096, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00001000;  op2val:0x00008000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00001000, 0x00008000, x1, 536, x4)

inst_92:
// rs1_w0_val == 2048, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000800;  op2val:0xffffff7f;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000800, 0xffffff7f, x1, 544, x4)

inst_93:
// rs1_w0_val == 1024, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000400;  op2val:0x00000020;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000400, 0x00000020, x1, 552, x4)

inst_94:
// rs1_w0_val == 512, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000200;  op2val:0x0000000d;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000200, 0x0000000d, x1, 560, x4)

inst_95:
// rs1_w0_val == 4294967039, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffeff;  op2val:0x00020000;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffeff, 0x00020000, x1, 568, x4)

inst_96:
// rs2_w0_val == 2863311530, rs1_w0_val == 128
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000080;  op2val:0xaaaaaaaa;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x00000080, 0xaaaaaaaa, x1, 576, x4)

inst_97:
// rs2_w0_val == 4160749567, 
// opcode: mulr64 ; op1:x31; op2:x29; dest:x30; op1val:0x0000000e;  op2val:0xf7ffffff;
TEST_P64_PNN_OP(mulr64, x30, x31, x31, x29, 0x00000000, 0, 0x0000000e, 0xf7ffffff, x1, 584, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 148*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
