
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukadd16 instruction of the RISC-V RV32PZicsr extension for the ukadd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukadd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x1, rd==x6, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64511, rs1_h1_val == 2
// opcode: ukadd16 ; op1:x21; op2:x1; dest:x6; op1val:0x020000;  op2val:0xfbff000e
TEST_PKRR_OP(ukadd16, x6, x21, x1, 0x00000000, 0x020000, 0xfbff000e, x21, x7, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x4, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs2_h1_val == 65534, rs1_h0_val == 65503, rs1_h1_val == 65534
// opcode: ukadd16 ; op1:x31; op2:x31; dest:x4; op1val:0xfffeffdf;  op2val:0xfffe0004
TEST_PKRR_OP(ukadd16, x4, x31, x31, 0x00000000, 0xfffeffdf, 0xfffe0004, x31, x7, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x15, rs2==x18, rd==x15, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 8192, rs2_h0_val == 128, rs1_h0_val == 128, rs2_h1_val == 65023
// opcode: ukadd16 ; op1:x15; op2:x18; dest:x15; op1val:0x20000080;  op2val:0xfdff0080
TEST_PKRR_OP(ukadd16, x15, x15, x18, 0x00000000, 0x20000080, 0xfdff0080, x15, x7, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_h1_val == 43690, rs1_h0_val == 65531, rs1_h1_val == 4096
// opcode: ukadd16 ; op1:x16; op2:x16; dest:x16; op1val:0x1000fffb;  op2val:0xaaaa000e
TEST_PKRR_OP(ukadd16, x16, x16, x16, 0x00000000, 0x1000fffb, 0xaaaa000e, x16, x7, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x10, rs2==x12, rd==x12, rs2_h1_val == 21845, rs1_h0_val == 32768
// opcode: ukadd16 ; op1:x10; op2:x12; dest:x12; op1val:0x0a8000;  op2val:0x5555000e
TEST_PKRR_OP(ukadd16, x12, x10, x12, 0x00000000, 0x0a8000, 0x5555000e, x10, x7, 32, x13)

inst_5:
// rs1==x17, rs2==x8, rd==x19, rs2_h1_val == 32767, rs1_h0_val == 65533, rs1_h1_val == 8, rs2_h0_val == 65471
// opcode: ukadd16 ; op1:x17; op2:x8; dest:x19; op1val:0x08fffd;  op2val:0x7fffffbf
TEST_PKRR_OP(ukadd16, x19, x17, x8, 0x00000000, 0x08fffd, 0x7fffffbf, x17, x7, 40, x13)

inst_6:
// rs1==x2, rs2==x9, rd==x8, rs2_h1_val == 49151, rs1_h1_val == 1024, rs2_h0_val == 16384, rs1_h0_val == 4096
// opcode: ukadd16 ; op1:x2; op2:x9; dest:x8; op1val:0x4001000;  op2val:0xbfff4000
TEST_PKRR_OP(ukadd16, x8, x2, x9, 0x00000000, 0x4001000, 0xbfff4000, x2, x7, 48, x13)

inst_7:
// rs1==x3, rs2==x27, rd==x10, rs2_h1_val == 57343, rs1_h0_val == 2048, rs1_h1_val == 65279, rs2_h0_val == 2048
// opcode: ukadd16 ; op1:x3; op2:x27; dest:x10; op1val:0xfeff0800;  op2val:0xdfff0800
TEST_PKRR_OP(ukadd16, x10, x3, x27, 0x00000000, 0xfeff0800, 0xdfff0800, x3, x7, 56, x13)

inst_8:
// rs1==x0, rs2==x30, rd==x21, rs2_h1_val == 61439, rs2_h0_val == 65533, rs1_h1_val == 65519, rs1_h0_val == 32
// opcode: ukadd16 ; op1:x0; op2:x30; dest:x21; op1val:0xffef0020;  op2val:0xeffffffd
TEST_PKRR_OP(ukadd16, x21, x0, x30, 0x00000000, 0xffef0020, 0xeffffffd, x0, x7, 64, x13)

inst_9:
// rs1==x6, rs2==x3, rd==x25, rs2_h1_val == 63487, rs1_h1_val == 32767, rs2_h0_val == 63487
// opcode: ukadd16 ; op1:x6; op2:x3; dest:x25; op1val:0x7fff0020;  op2val:0xf7fff7ff
TEST_PKRR_OP(ukadd16, x25, x6, x3, 0x00000000, 0x7fff0020, 0xf7fff7ff, x6, x7, 72, x13)

inst_10:
// rs1==x30, rs2==x22, rd==x2, rs2_h1_val == 65279, rs1_h0_val == 4, rs1_h1_val == 65527, rs2_h0_val == 32768
// opcode: ukadd16 ; op1:x30; op2:x22; dest:x2; op1val:0xfff70004;  op2val:0xfeff8000
TEST_PKRR_OP(ukadd16, x2, x30, x22, 0x00000000, 0xfff70004, 0xfeff8000, x30, x7, 80, x13)

inst_11:
// rs1==x11, rs2==x29, rd==x27, rs2_h1_val == 65407, 
// opcode: ukadd16 ; op1:x11; op2:x29; dest:x27; op1val:0xfffe000f;  op2val:0xff7f000e
TEST_PKRR_OP(ukadd16, x27, x11, x29, 0x00000000, 0xfffe000f, 0xff7f000e, x11, x7, 88, x13)

inst_12:
// rs1==x9, rs2==x2, rd==x5, rs2_h1_val == 65471, rs2_h0_val == 65534
// opcode: ukadd16 ; op1:x9; op2:x2; dest:x5; op1val:0xfeff000d;  op2val:0xffbffffe
TEST_PKRR_OP(ukadd16, x5, x9, x2, 0x00000000, 0xfeff000d, 0xffbffffe, x9, x7, 96, x13)

inst_13:
// rs1==x27, rs2==x24, rd==x23, rs2_h1_val == 65503, rs1_h1_val == 65471, rs1_h0_val == 61439
// opcode: ukadd16 ; op1:x27; op2:x24; dest:x23; op1val:0xffbfefff;  op2val:0xffdf0004
TEST_PKRR_OP(ukadd16, x23, x27, x24, 0x00000000, 0xffbfefff, 0xffdf0004, x27, x7, 104, x13)

inst_14:
// rs1==x25, rs2==x26, rd==x0, rs2_h1_val == 65519, rs1_h1_val == 4
// opcode: ukadd16 ; op1:x25; op2:x26; dest:x0; op1val:0x040009;  op2val:0xffef0007
TEST_PKRR_OP(ukadd16, x0, x25, x26, 0x00000000, 0x040009, 0xffef0007, x25, x7, 112, x13)

inst_15:
// rs1==x18, rs2==x4, rd==x17, rs2_h1_val == 65527, rs2_h0_val == 65407, rs1_h1_val == 64511
// opcode: ukadd16 ; op1:x18; op2:x4; dest:x17; op1val:0xfbff000d;  op2val:0xfff7ff7f
TEST_PKRR_OP(ukadd16, x17, x18, x4, 0x00000000, 0xfbff000d, 0xfff7ff7f, x18, x7, 120, x12)

inst_16:
// rs1==x19, rs2==x5, rd==x24, rs2_h1_val == 65531, 
// opcode: ukadd16 ; op1:x19; op2:x5; dest:x24; op1val:0x0b0800;  op2val:0xfffb4000
TEST_PKRR_OP(ukadd16, x24, x19, x5, 0x00000000, 0x0b0800, 0xfffb4000, x19, x7, 128, x12)

inst_17:
// rs1==x22, rs2==x25, rd==x1, rs2_h1_val == 65533, rs1_h0_val == 65407, rs1_h1_val == 512
// opcode: ukadd16 ; op1:x22; op2:x25; dest:x1; op1val:0x200ff7f;  op2val:0xfffd0013
TEST_PKRR_OP(ukadd16, x1, x22, x25, 0x00000000, 0x200ff7f, 0xfffd0013, x22, x7, 136, x12)

inst_18:
// rs1==x14, rs2==x17, rd==x31, rs2_h1_val == 32768, rs1_h0_val == 32767, rs2_h0_val == 65503
// opcode: ukadd16 ; op1:x14; op2:x17; dest:x31; op1val:0x0c7fff;  op2val:0x8000ffdf
TEST_PKRR_OP(ukadd16, x31, x14, x17, 0x00000000, 0x0c7fff, 0x8000ffdf, x14, x7, 144, x12)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_19:
// rs1==x5, rs2==x15, rd==x11, rs2_h1_val == 16384, rs2_h0_val == 65519
// opcode: ukadd16 ; op1:x5; op2:x15; dest:x11; op1val:0x2000000b;  op2val:0x4000ffef
TEST_PKRR_OP(ukadd16, x11, x5, x15, 0x00000000, 0x2000000b, 0x4000ffef, x5, x2, 0, x12)

inst_20:
// rs1==x1, rs2==x11, rd==x18, rs2_h1_val == 8192, 
// opcode: ukadd16 ; op1:x1; op2:x11; dest:x18; op1val:0xfffeefff;  op2val:0x20008000
TEST_PKRR_OP(ukadd16, x18, x1, x11, 0x00000000, 0xfffeefff, 0x20008000, x1, x2, 8, x12)

inst_21:
// rs1==x26, rs2==x7, rd==x14, rs2_h1_val == 4096, rs1_h0_val == 65535
// opcode: ukadd16 ; op1:x26; op2:x7; dest:x14; op1val:0x09ffff;  op2val:0x1000ffdf
TEST_PKRR_OP(ukadd16, x14, x26, x7, 0x00000000, 0x09ffff, 0x1000ffdf, x26, x2, 16, x12)

inst_22:
// rs1==x24, rs2==x19, rd==x30, rs2_h1_val == 2048, rs1_h1_val == 65531
// opcode: ukadd16 ; op1:x24; op2:x19; dest:x30; op1val:0xfffb0006;  op2val:0x800fffd
TEST_PKRR_OP(ukadd16, x30, x24, x19, 0x00000000, 0xfffb0006, 0x800fffd, x24, x2, 24, x12)

inst_23:
// rs1==x8, rs2==x23, rd==x28, rs2_h1_val == 1024, rs1_h1_val == 16, rs1_h0_val == 65519
// opcode: ukadd16 ; op1:x8; op2:x23; dest:x28; op1val:0x10ffef;  op2val:0x4000080
TEST_PKRR_OP(ukadd16, x28, x8, x23, 0x00000000, 0x10ffef, 0x4000080, x8, x2, 32, x12)

inst_24:
// rs1==x23, rs2==x20, rd==x7, rs2_h1_val == 512, 
// opcode: ukadd16 ; op1:x23; op2:x20; dest:x7; op1val:0xffef1000;  op2val:0x200f7ff
TEST_PKRR_OP(ukadd16, x7, x23, x20, 0x00000000, 0xffef1000, 0x200f7ff, x23, x2, 40, x12)

inst_25:
// rs1==x20, rs2==x6, rd==x13, rs2_h1_val == 256, rs2_h0_val == 32767, rs1_h1_val == 43690
// opcode: ukadd16 ; op1:x20; op2:x6; dest:x13; op1val:0xaaaa000f;  op2val:0x1007fff
TEST_PKRR_OP(ukadd16, x13, x20, x6, 0x00000000, 0xaaaa000f, 0x1007fff, x20, x2, 48, x12)

inst_26:
// rs1==x4, rs2==x0, rd==x22, rs2_h1_val == 128, rs2_h0_val == 65531
// opcode: ukadd16 ; op1:x4; op2:x0; dest:x22; op1val:0x04ff7f;  op2val:0x80fffb
TEST_PKRR_OP(ukadd16, x22, x4, x0, 0x00000000, 0x04ff7f, 0x80fffb, x4, x2, 56, x12)

inst_27:
// rs1==x28, rs2==x14, rd==x9, rs2_h1_val == 64, 
// opcode: ukadd16 ; op1:x28; op2:x14; dest:x9; op1val:0x030005;  op2val:0x400013
TEST_PKRR_OP(ukadd16, x9, x28, x14, 0x00000000, 0x030005, 0x400013, x28, x2, 64, x12)

inst_28:
// rs1==x7, rs2==x10, rd==x3, rs2_h1_val == 32, rs2_h0_val == 1
// opcode: ukadd16 ; op1:x7; op2:x10; dest:x3; op1val:0x400000d;  op2val:0x200001
TEST_PKRR_OP(ukadd16, x3, x7, x10, 0x00000000, 0x400000d, 0x200001, x7, x2, 72, x12)

inst_29:
// rs1==x13, rs2==x21, rd==x26, rs2_h1_val == 16, rs2_h0_val == 2, rs1_h0_val == 16384
// opcode: ukadd16 ; op1:x13; op2:x21; dest:x26; op1val:0xffbf4000;  op2val:0x100002
TEST_PKRR_OP(ukadd16, x26, x13, x21, 0x00000000, 0xffbf4000, 0x100002, x13, x2, 80, x12)

inst_30:
// rs1==x12, rs2==x13, rd==x29, rs2_h1_val == 8, 
// opcode: ukadd16 ; op1:x12; op2:x13; dest:x29; op1val:0xfff70007;  op2val:0x08f7ff
TEST_PKRR_OP(ukadd16, x29, x12, x13, 0x00000000, 0xfff70007, 0x08f7ff, x12, x2, 88, x1)

inst_31:
// rs1==x29, rs2==x28, rd==x20, rs2_h1_val == 4, rs1_h1_val == 63487, rs2_h0_val == 8192
// opcode: ukadd16 ; op1:x29; op2:x28; dest:x20; op1val:0xf7ffefff;  op2val:0x042000
TEST_PKRR_OP(ukadd16, x20, x29, x28, 0x00000000, 0xf7ffefff, 0x042000, x29, x2, 96, x1)

inst_32:
// rs1_h0_val == 65534, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe;  op2val:0x400ff7f
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x10fffe, 0x400ff7f, x30, x2, 104, x1)

inst_33:
// rs1_h0_val == 8192, rs2_h0_val == 64511
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e2000;  op2val:0xf7fffbff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0e2000, 0xf7fffbff, x30, x2, 112, x1)

inst_34:
// rs1_h0_val == 1024, rs2_h0_val == 8
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x130400;  op2val:0xf7ff0008
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x130400, 0xf7ff0008, x30, x2, 120, x1)

inst_35:
// rs1_h0_val == 512, rs2_h0_val == 49151
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200;  op2val:0x400bfff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x20000200, 0x400bfff, x30, x2, 128, x1)

inst_36:
// rs1_h0_val == 256, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x020100;  op2val:0x0abfff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x020100, 0x0abfff, x30, x2, 136, x1)

inst_37:
// rs1_h0_val == 64, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x030040;  op2val:0x4000007
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x030040, 0x4000007, x30, x2, 144, x1)

inst_38:
// rs1_h0_val == 16, rs2_h0_val == 1024
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0010;  op2val:0x060400
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xaaaa0010, 0x060400, x30, x2, 152, x1)

inst_39:
// rs1_h0_val == 8, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000008;  op2val:0x4000080
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x4000008, 0x4000080, x30, x2, 160, x1)

inst_40:
// rs1_h0_val == 2, rs2_h0_val == 57343, rs1_h1_val == 128
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800002;  op2val:0x0cdfff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x800002, 0x0cdfff, x30, x2, 168, x1)

inst_41:
// rs1_h0_val == 1, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0001;  op2val:0x10ffdf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xffef0001, 0x10ffdf, x30, x2, 176, x1)

inst_42:
// rs2_h1_val == 2, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf2000;  op2val:0x02fffd
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xffbf2000, 0x02fffd, x30, x2, 184, x1)

inst_43:
// rs2_h1_val == 1, rs1_h1_val == 57343, rs1_h0_val == 65279
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff;  op2val:0x010002
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xdffffeff, 0x010002, x30, x2, 192, x1)

inst_44:
// rs2_h1_val == 65535, rs1_h0_val == 49151
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06bfff;  op2val:0xffff0001
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x06bfff, 0xffff0001, x30, x2, 200, x1)

inst_45:
// rs2_h1_val == 0, rs2_h0_val == 256
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffef;  op2val:0x000100
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x03ffef, 0x000100, x30, x2, 208, x1)

inst_46:
// rs2_h0_val == 43690, rs1_h0_val == 43690, rs1_h1_val == 2048
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa;  op2val:0xaaaaaaaa
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x800aaaa, 0xaaaaaaaa, x30, x2, 216, x1)

inst_47:
// rs2_h0_val == 21845, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0100;  op2val:0xaaaa5555
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0d0100, 0xaaaa5555, x30, x2, 224, x1)

inst_48:
// rs2_h0_val == 61439, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0009;  op2val:0xffdfefff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0a0009, 0xffdfefff, x30, x2, 232, x1)

inst_49:
// rs2_h0_val == 65023, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffd;  op2val:0xfff7fdff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x04fffd, 0xfff7fdff, x30, x2, 240, x1)

inst_50:
// rs2_h0_val == 512, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000d;  op2val:0xbfff0200
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x04000d, 0xbfff0200, x30, x2, 248, x1)

inst_51:
// rs2_h0_val == 64, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0005;  op2val:0xfdff0040
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0b0005, 0xfdff0040, x30, x2, 256, x1)

inst_52:
// rs2_h0_val == 32, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0fffdf;  op2val:0x0f0020
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0fffdf, 0x0f0020, x30, x2, 264, x1)

inst_53:
// rs2_h0_val == 16, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0003;  op2val:0x2000010
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0d0003, 0x2000010, x30, x2, 272, x1)

inst_54:
// rs2_h0_val == 65535, rs1_h1_val == 64
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffd;  op2val:0x7fffffff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x40fffd, 0x7fffffff, x30, x2, 280, x1)

inst_55:
// rs2_h0_val == 0, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x050001;  op2val:0xbfff0000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x050001, 0xbfff0000, x30, x2, 288, x1)

inst_56:
// rs1_h1_val == 21845, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0x007fff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x55550040, 0x007fff, x30, x2, 296, x1)

inst_57:
// rs1_h1_val == 49151, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0009;  op2val:0x0c0010
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xbfff0009, 0x0c0010, x30, x2, 304, x1)

inst_58:
// rs1_h1_val == 61439, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080;  op2val:0x02ffff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xefff0080, 0x02ffff, x30, x2, 312, x1)

inst_59:
// rs1_h1_val == 65023, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff4000;  op2val:0x09000e
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xfdff4000, 0x09000e, x30, x2, 320, x1)

inst_60:
// rs1_h1_val == 65407, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fbfff;  op2val:0xefff0200
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xff7fbfff, 0xefff0200, x30, x2, 328, x1)

inst_61:
// rs2_h0_val == 65527, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0bfeff;  op2val:0x09fff7
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0bfeff, 0x09fff7, x30, x2, 336, x1)

inst_62:
// rs1_h1_val == 65503, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0080;  op2val:0xffff0009
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xffdf0080, 0xffff0009, x30, x2, 344, x1)

inst_63:
// rs1_h1_val == 65533, rs1_h0_val == 21845
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd5555;  op2val:0x7fff0008
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xfffd5555, 0x7fff0008, x30, x2, 352, x1)

inst_64:
// rs1_h1_val == 32768, rs2_h0_val == 4096
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000009;  op2val:0x061000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x80000009, 0x061000, x30, x2, 360, x1)

inst_65:
// rs1_h1_val == 16384, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0xfffe0008
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x4000efff, 0xfffe0008, x30, x2, 368, x1)

inst_66:
// rs1_h1_val == 256, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd;  op2val:0x7fff4000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x100fffd, 0x7fff4000, x30, x2, 376, x1)

inst_67:
// rs1_h1_val == 32, rs1_h0_val == 65527
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff7;  op2val:0x7fffaaaa
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x20fff7, 0x7fffaaaa, x30, x2, 384, x1)

inst_68:
// rs1_h1_val == 1, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x014000;  op2val:0x03fbff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x014000, 0x03fbff, x30, x2, 392, x1)

inst_69:
// rs1_h1_val == 65535, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0010;  op2val:0xfff70080
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xffff0010, 0xfff70080, x30, x2, 400, x1)

inst_70:
// rs1_h1_val == 0, rs1_h0_val == 57343
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff;  op2val:0x20000020
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x00dfff, 0x20000020, x30, x2, 408, x1)

inst_71:
// rs2_h0_val == 65279, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0001;  op2val:0x11feff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x0d0001, 0x11feff, x30, x2, 416, x1)

inst_72:
// rs1_h0_val == 64511, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fbff;  op2val:0xaaaafffe
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x00fbff, 0xaaaafffe, x30, x2, 424, x1)

inst_73:
// rs1_h0_val == 65023, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fdff;  op2val:0x070008
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x13fdff, 0x070008, x30, x2, 432, x1)

inst_74:
// rs1_h0_val == 65471, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf;  op2val:0x0c8000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0xfeffffbf, 0x0c8000, x30, x2, 440, x1)

inst_75:
// rs1_h0_val == 63487, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13f7ff;  op2val:0xff7f0080
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x13f7ff, 0xff7f0080, x30, x2, 448, x1)

inst_76:
// rs2_h1_val == 43690, rs1_h0_val == 65531, rs1_h1_val == 4096
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffb;  op2val:0xaaaa000e
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x1000fffb, 0xaaaa000e, x30, x2, 456, x1)

inst_77:
// rs2_h1_val == 65519, rs1_h1_val == 4
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040009;  op2val:0xffef0007
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x040009, 0xffef0007, x30, x2, 464, x1)

inst_78:
// rs2_h1_val == 128, rs2_h0_val == 65531
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ff7f;  op2val:0x80fffb
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x00000000, 0x04ff7f, 0x80fffb, x30, x2, 472, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
