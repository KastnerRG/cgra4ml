
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmul.u instruction of the RISC-V RV32PZicsr extension for the smmul.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmul.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x30, rd==x24, rs1_w0_val == -2147483648, rs2_w0_val == -33554433
// opcode: smmul.u ; op1:x10; dest:x24; op1val:0x80000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x24, x10, x30, 0x00000000, 0x80000000, 0xfdffffff, x8, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x14, rs2_w0_val == -1431655766, rs1_w0_val == 1431655765
// opcode: smmul.u ; op1:x27; dest:x14; op1val:0x55555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x14, x27, x27, 0x00000000, 0x55555555, 0xaaaaaaaa, x8, 4, x13)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x3, rd==x4, rs2_w0_val == 1431655765, rs1_w0_val == -2
// opcode: smmul.u ; op1:x4; dest:x4; op1val:0xfffffffe;  immval:$imm_val
TEST_RR_OP(smmul.u, x4, x4, x3, 0x00000000, 0xfffffffe, 0x55555555, x8, 8, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs2_w0_val == 2147483647, 
// opcode: smmul.u ; op1:x31; dest:x31; op1val:0xfffffff9;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x31, x31, 0x00000000, 0xfffffff9, 0x7fffffff, x8, 12, x13)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x25, rd==x25, rs2_w0_val == -1073741825, 
// opcode: smmul.u ; op1:x24; dest:x25; op1val:0x000006;  immval:$imm_val
TEST_RR_OP(smmul.u, x25, x24, x25, 0x00000000, 0x000006, 0xbfffffff, x8, 16, x13)

inst_5:
// rs1==x3, rs2==x28, rd==x10, rs2_w0_val == -536870913, rs1_w0_val == 536870912
// opcode: smmul.u ; op1:x3; dest:x10; op1val:0x20000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x10, x3, x28, 0x00000000, 0x20000000, 0xdfffffff, x8, 20, x13)

inst_6:
// rs1==x26, rs2==x17, rd==x19, rs2_w0_val == -268435457, rs1_w0_val == 8
// opcode: smmul.u ; op1:x26; dest:x19; op1val:0x000008;  immval:$imm_val
TEST_RR_OP(smmul.u, x19, x26, x17, 0x00000000, 0x000008, 0xefffffff, x8, 24, x13)

inst_7:
// rs1==x29, rs2==x21, rd==x17, rs2_w0_val == -134217729, rs1_w0_val == -1431655766
// opcode: smmul.u ; op1:x29; dest:x17; op1val:0xaaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul.u, x17, x29, x21, 0x00000000, 0xaaaaaaaa, 0xf7ffffff, x8, 28, x13)

inst_8:
// rs1==x18, rs2==x0, rd==x22, rs2_w0_val == -67108865, rs1_w0_val == 4
// opcode: smmul.u ; op1:x18; dest:x22; op1val:0x000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x22, x18, x0, 0x00000000, 0x000004, 0xfbffffff, x8, 32, x13)

inst_9:
// rs1==x2, rs2==x9, rd==x5, rs2_w0_val == -16777217, rs1_w0_val == -524289
// opcode: smmul.u ; op1:x2; dest:x5; op1val:0xfff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x5, x2, x9, 0x00000000, 0xfff7ffff, 0xfeffffff, x8, 36, x13)

inst_10:
// rs1==x6, rs2==x11, rd==x7, rs2_w0_val == -8388609, 
// opcode: smmul.u ; op1:x6; dest:x7; op1val:0xaaaaaaab;  immval:$imm_val
TEST_RR_OP(smmul.u, x7, x6, x11, 0x00000000, 0xaaaaaaab, 0xff7fffff, x8, 40, x13)

inst_11:
// rs1==x7, rs2==x12, rd==x20, rs2_w0_val == -4194305, rs1_w0_val == -33554433
// opcode: smmul.u ; op1:x7; dest:x20; op1val:0xfdffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x20, x7, x12, 0x00000000, 0xfdffffff, 0xffbfffff, x8, 44, x13)

inst_12:
// rs1==x1, rs2==x4, rd==x15, rs2_w0_val == -2097153, 
// opcode: smmul.u ; op1:x1; dest:x15; op1val:0xfffffffe;  immval:$imm_val
TEST_RR_OP(smmul.u, x15, x1, x4, 0x00000000, 0xfffffffe, 0xffdfffff, x8, 48, x13)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_13:
// rs1==x23, rs2==x20, rd==x6, rs2_w0_val == -1048577, rs1_w0_val == 65536
// opcode: smmul.u ; op1:x23; dest:x6; op1val:0x010000;  immval:$imm_val
TEST_RR_OP(smmul.u, x6, x23, x20, 0x00000000, 0x010000, 0xffefffff, x4, 0, x7)

inst_14:
// rs1==x8, rs2==x19, rd==x16, rs2_w0_val == -524289, rs1_w0_val == -536870913
// opcode: smmul.u ; op1:x8; dest:x16; op1val:0xdfffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x16, x8, x19, 0x00000000, 0xdfffffff, 0xfff7ffff, x4, 4, x7)

inst_15:
// rs1==x20, rs2==x23, rd==x21, rs2_w0_val == -262145, rs1_w0_val == -262145
// opcode: smmul.u ; op1:x20; dest:x21; op1val:0xfffbffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x21, x20, x23, 0x00000000, 0xfffbffff, 0xfffbffff, x4, 8, x7)

inst_16:
// rs1==x25, rs2==x18, rd==x2, rs2_w0_val == -131073, 
// opcode: smmul.u ; op1:x25; dest:x2; op1val:0xaaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul.u, x2, x25, x18, 0x00000000, 0xaaaaaaaa, 0xfffdffff, x4, 12, x7)

inst_17:
// rs1==x30, rs2==x13, rd==x8, rs2_w0_val == -65537, 
// opcode: smmul.u ; op1:x30; dest:x8; op1val:0xc0000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x8, x30, x13, 0x00000000, 0xc0000000, 0xfffeffff, x4, 16, x7)

inst_18:
// rs1==x12, rs2==x15, rd==x29, rs2_w0_val == -32769, rs1_w0_val == 131072
// opcode: smmul.u ; op1:x12; dest:x29; op1val:0x020000;  immval:$imm_val
TEST_RR_OP(smmul.u, x29, x12, x15, 0x00000000, 0x020000, 0xffff7fff, x4, 20, x7)

inst_19:
// rs1==x9, rs2==x1, rd==x23, rs2_w0_val == -16385, 
// opcode: smmul.u ; op1:x9; dest:x23; op1val:0x66666666;  immval:$imm_val
TEST_RR_OP(smmul.u, x23, x9, x1, 0x00000000, 0x66666666, 0xffffbfff, x4, 24, x7)

inst_20:
// rs1==x11, rs2==x16, rd==x3, rs2_w0_val == -8193, rs1_w0_val == 0
// opcode: smmul.u ; op1:x11; dest:x3; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x3, x11, x16, 0x00000000, 0x000000, 0xffffdfff, x4, 28, x7)

inst_21:
// rs1==x14, rs2==x5, rd==x27, rs2_w0_val == -4097, 
// opcode: smmul.u ; op1:x14; dest:x27; op1val:0xfff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x27, x14, x5, 0x00000000, 0xfff7ffff, 0xffffefff, x4, 32, x7)

inst_22:
// rs1==x17, rs2==x8, rd==x26, rs2_w0_val == -2049, rs1_w0_val == -1
// opcode: smmul.u ; op1:x17; dest:x26; op1val:0xffffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x26, x17, x8, 0x00000000, 0xffffffff, 0xfffff7ff, x4, 36, x7)

inst_23:
// rs1==x28, rs2==x10, rd==x18, rs2_w0_val == -1025, 
// opcode: smmul.u ; op1:x28; dest:x18; op1val:0x000008;  immval:$imm_val
TEST_RR_OP(smmul.u, x18, x28, x10, 0x00000000, 0x000008, 0xfffffbff, x4, 40, x7)

inst_24:
// rs1==x5, rs2==x22, rd==x11, rs2_w0_val == -513, 
// opcode: smmul.u ; op1:x5; dest:x11; op1val:0x33333333;  immval:$imm_val
TEST_RR_OP(smmul.u, x11, x5, x22, 0x00000000, 0x33333333, 0xfffffdff, x4, 44, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_25:
// rs1==x13, rs2==x29, rd==x9, rs2_w0_val == -257, rs1_w0_val == 16384
// opcode: smmul.u ; op1:x13; dest:x9; op1val:0x004000;  immval:$imm_val
TEST_RR_OP(smmul.u, x9, x13, x29, 0x00000000, 0x004000, 0xfffffeff, x3, 0, x8)

inst_26:
// rs1==x16, rs2==x24, rd==x30, rs2_w0_val == -129, rs1_w0_val == 262144
// opcode: smmul.u ; op1:x16; dest:x30; op1val:0x040000;  immval:$imm_val
TEST_RR_OP(smmul.u, x30, x16, x24, 0x00000000, 0x040000, 0xffffff7f, x3, 4, x8)

inst_27:
// rs1==x22, rs2==x14, rd==x28, rs2_w0_val == -65, rs1_w0_val == 64
// opcode: smmul.u ; op1:x22; dest:x28; op1val:0x000040;  immval:$imm_val
TEST_RR_OP(smmul.u, x28, x22, x14, 0x00000000, 0x000040, 0xffffffbf, x3, 8, x8)

inst_28:
// rs1==x21, rs2==x7, rd==x0, rs2_w0_val == -33, 
// opcode: smmul.u ; op1:x21; dest:x0; op1val:0xfff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x0, x21, x7, 0x00000000, 0xfff7ffff, 0xffffffdf, x3, 12, x8)

inst_29:
// rs1==x15, rs2==x6, rd==x1, rs2_w0_val == -17, 
// opcode: smmul.u ; op1:x15; dest:x1; op1val:0xffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x1, x15, x6, 0x00000000, 0xffff4afd, 0xffffffef, x3, 16, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x12, rs2_w0_val == -9, rs1_w0_val == 1073741824
// opcode: smmul.u ; op1:x0; dest:x12; op1val:0x40000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x12, x0, x2, 0x00000000, 0x40000000, 0xfffffff7, x3, 20, x8)

inst_31:
// rs1==x19, rs2==x26, rd==x13, rs2_w0_val == -5, rs1_w0_val == 2
// opcode: smmul.u ; op1:x19; dest:x13; op1val:0x000002;  immval:$imm_val
TEST_RR_OP(smmul.u, x13, x19, x26, 0x00000000, 0x000002, 0xfffffffb, x3, 24, x8)

inst_32:
// rs2_w0_val == -3, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff6;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffff6, 0xfffffffd, x3, 28, x8)

inst_33:
// rs2_w0_val == -2, rs1_w0_val == 67108864
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x4000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x4000000, 0xfffffffe, x3, 32, x8)

inst_34:
// rs2_w0_val == -2147483648, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00b503;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x00b503, 0x80000000, x3, 36, x8)

inst_35:
// rs2_w0_val == 1073741824, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000008;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000008, 0x40000000, x3, 40, x8)

inst_36:
// rs2_w0_val == 536870912, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00b503;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x00b503, 0x20000000, x3, 44, x8)

inst_37:
// rs2_w0_val == 268435456, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffa;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffffa, 0x10000000, x3, 48, x8)

inst_38:
// rs2_w0_val == 134217728, rs1_w0_val == 32768
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x008000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x008000, 0x8000000, x3, 52, x8)

inst_39:
// rs2_w0_val == 67108864, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x55555555, 0x4000000, x3, 56, x8)

inst_40:
// rs2_w0_val == 33554432, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000000, 0x2000000, x3, 60, x8)

inst_41:
// rs2_w0_val == 16777216, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffff4afd, 0x1000000, x3, 64, x8)

inst_42:
// rs2_w0_val == 8388608, rs1_w0_val == 16
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000010;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000010, 0x800000, x3, 68, x8)

inst_43:
// rs2_w0_val == 4194304, rs1_w0_val == 2048
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000800;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000800, 0x400000, x3, 72, x8)

inst_44:
// rs2_w0_val == 2097152, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000003;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000003, 0x200000, x3, 76, x8)

inst_45:
// rs2_w0_val == 1048576, rs1_w0_val == -131073
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffdffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffdffff, 0x100000, x3, 80, x8)

inst_46:
// rs2_w0_val == 524288, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff6;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffff6, 0x080000, x3, 84, x8)

inst_47:
// rs2_w0_val == 262144, rs1_w0_val == -2049
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffff7ff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffff7ff, 0x040000, x3, 88, x8)

inst_48:
// rs1_w0_val == 32, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000020;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000020, 0xfffff7ff, x3, 92, x8)

inst_49:
// rs1_w0_val == 1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000001;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000001, 0xfffffffd, x3, 96, x8)

inst_50:
// rs2_w0_val == 131072, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x66666667;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x66666667, 0x020000, x3, 100, x8)

inst_51:
// rs2_w0_val == 65536, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000000, 0x010000, x3, 104, x8)

inst_52:
// rs2_w0_val == 32768, rs1_w0_val == 8388608
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x800000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x800000, 0x008000, x3, 108, x8)

inst_53:
// rs2_w0_val == 16384, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x020000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x020000, 0x004000, x3, 112, x8)

inst_54:
// rs2_w0_val == 8192, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x66666665;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x66666665, 0x002000, x3, 116, x8)

inst_55:
// rs2_w0_val == 4096, rs1_w0_val == -33
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffdf;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffffdf, 0x001000, x3, 120, x8)

inst_56:
// rs2_w0_val == 2048, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000000, 0x000800, x3, 124, x8)

inst_57:
// rs2_w0_val == 1024, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffdffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffdffff, 0x000400, x3, 128, x8)

inst_58:
// rs2_w0_val == 512, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000000, 0x000200, x3, 132, x8)

inst_59:
// rs2_w0_val == 256, rs1_w0_val == -1048577
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffefffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffefffff, 0x000100, x3, 136, x8)

inst_60:
// rs2_w0_val == 128, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x040000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x040000, 0x000080, x3, 140, x8)

inst_61:
// rs2_w0_val == 64, rs1_w0_val == 4096
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x001000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x001000, 0x000040, x3, 144, x8)

inst_62:
// rs2_w0_val == 32, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff4afc;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffff4afc, 0x000020, x3, 148, x8)

inst_63:
// rs2_w0_val == 16, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x55555555, 0x000010, x3, 152, x8)

inst_64:
// rs2_w0_val == 8, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x55555555, 0x000008, x3, 156, x8)

inst_65:
// rs2_w0_val == 4, rs1_w0_val == -67108865
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfbffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfbffffff, 0x000004, x3, 160, x8)

inst_66:
// rs2_w0_val == 2, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffff4afd, 0x000002, x3, 164, x8)

inst_67:
// rs2_w0_val == 1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000000, 0x000001, x3, 168, x8)

inst_68:
// rs2_w0_val == 0, rs1_w0_val == -4194305
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffbfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffbfffff, 0x000000, x3, 172, x8)

inst_69:
// rs2_w0_val == -1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000800;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000800, 0xffffffff, x3, 176, x8)

inst_70:
// rs1_w0_val == 2147483647, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x7fffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x7fffffff, 0x33333334, x3, 180, x8)

inst_71:
// rs1_w0_val == -1073741825, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xbfffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xbfffffff, 0x000010, x3, 184, x8)

inst_72:
// rs1_w0_val == -268435457, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xefffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xefffffff, 0x000000, x3, 188, x8)

inst_73:
// rs1_w0_val == -134217729, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xf7ffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xf7ffffff, 0x000002, x3, 192, x8)

inst_74:
// rs1_w0_val == -16777217, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfeffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfeffffff, 0xffff4afd, x3, 196, x8)

inst_75:
// rs1_w0_val == -8388609, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xff7fffff, 0xfffffff8, x3, 200, x8)

inst_76:
// rs1_w0_val == -2097153, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffdfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffdfffff, 0xfffffffc, x3, 204, x8)

inst_77:
// rs1_w0_val == -65537, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffeffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffeffff, 0x55555554, x3, 208, x8)

inst_78:
// rs1_w0_val == -32769, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff7fff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffff7fff, 0xffff4afd, x3, 212, x8)

inst_79:
// rs1_w0_val == -16385, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffbfff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffbfff, 0x000200, x3, 216, x8)

inst_80:
// rs1_w0_val == -8193, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffdfff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffdfff, 0x000007, x3, 220, x8)

inst_81:
// rs1_w0_val == -4097, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffefff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffefff, 0x000003, x3, 224, x8)

inst_82:
// rs1_w0_val == -1025, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffbff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffbff, 0x33333332, x3, 228, x8)

inst_83:
// rs1_w0_val == -513, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffdff, 0xaaaaaaaa, x3, 232, x8)

inst_84:
// rs1_w0_val == -257, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffeff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffeff, 0xffffffff, x3, 236, x8)

inst_85:
// rs1_w0_val == -129, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffff7f;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffff7f, 0x100000, x3, 240, x8)

inst_86:
// rs1_w0_val == -65, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffbf;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffffbf, 0x000200, x3, 244, x8)

inst_87:
// rs1_w0_val == -17, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffef;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xffffffef, 0x000005, x3, 248, x8)

inst_88:
// rs1_w0_val == -9, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff7;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffff7, 0xaaaaaaab, x3, 252, x8)

inst_89:
// rs1_w0_val == -5, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffb;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffffb, 0xfffffff6, x3, 256, x8)

inst_90:
// rs1_w0_val == -3, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffffd, 0xfffffff6, x3, 260, x8)

inst_91:
// rs1_w0_val == 268435456, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x10000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x10000000, 0xfff7ffff, x3, 264, x8)

inst_92:
// rs1_w0_val == 134217728, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x8000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x8000000, 0xbfffffff, x3, 268, x8)

inst_93:
// rs1_w0_val == 33554432, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x2000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x2000000, 0x000200, x3, 272, x8)

inst_94:
// rs1_w0_val == 16777216, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x1000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x1000000, 0xfffeffff, x3, 276, x8)

inst_95:
// rs1_w0_val == 4194304, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x400000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x400000, 0xffff4afc, x3, 280, x8)

inst_96:
// rs1_w0_val == 2097152, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x200000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x200000, 0x000400, x3, 284, x8)

inst_97:
// rs1_w0_val == 1048576, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x100000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x100000, 0xffffffff, x3, 288, x8)

inst_98:
// rs1_w0_val == 524288, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x080000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x080000, 0xfbffffff, x3, 292, x8)

inst_99:
// rs1_w0_val == 8192, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x002000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x002000, 0xffff7fff, x3, 296, x8)

inst_100:
// rs1_w0_val == 1024, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000400;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000400, 0xc0000000, x3, 300, x8)

inst_101:
// rs1_w0_val == 512, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000200;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000200, 0xfffdffff, x3, 304, x8)

inst_102:
// rs1_w0_val == 256, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000100;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000100, 0x00b503, x3, 308, x8)

inst_103:
// rs1_w0_val == 128, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000080;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000080, 0xfffffff8, x3, 312, x8)

inst_104:
// rs2_w0_val == 2147483647, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff9;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfffffff9, 0x7fffffff, x3, 316, x8)

inst_105:
// rs2_w0_val == -67108865, rs1_w0_val == 4
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x000004, 0xfbffffff, x3, 320, x8)

inst_106:
// rs2_w0_val == -33, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xffffffdf, x3, 324, x8)

inst_107:
// rs2_w0_val == -9, rs1_w0_val == 1073741824
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x40000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x00000000, 0x40000000, 0xfffffff7, x3, 328, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 83*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
