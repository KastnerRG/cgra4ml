
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pbsada instruction of the RISC-V RV32PZicsr extension for the pbsada covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pbsada)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x0, rd==x31, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 170, rs2_b3_val == 254, rs2_b0_val == 8, rs1_b2_val == 128, rs1_b3_val == 191
// opcode: pbsada ; op1:x14; op2:x0; dest:x31; op1val:0xbf800900;  op2val:0xfe09aa08
TEST_RR_OP(pbsada, x31, x14, x0, 0x00000000, 0xbf800900, 0xfe09aa08, x6, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x10, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b3_val == 1, rs1_b3_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: pbsada ; op1:x17; op2:x17; dest:x10; op1val:0x10c1312;  op2val:0x111aa0e
TEST_RR_OP(pbsada, x10, x17, x17, 0x00000000, 0x10c1312, 0x111aa0e, x6, 4, x8)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x25, rd==x23, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val == 16, rs2_b3_val == 85, rs2_b1_val == 239, rs2_b0_val == 128
// opcode: pbsada ; op1:x23; op2:x25; dest:x23; op1val:0xbf070910;  op2val:0x5507ef80
TEST_RR_OP(pbsada, x23, x23, x25, 0x00000000, 0xbf070910, 0x5507ef80, x6, 8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 127, rs2_b0_val == 170, rs2_b2_val == 128, rs2_b1_val == 127, rs2_b3_val == 8, rs1_b2_val == 1
// opcode: pbsada ; op1:x4; op2:x4; dest:x4; op1val:0x9017f12;  op2val:0x8807faa
TEST_RR_OP(pbsada, x4, x4, x4, 0x00000000, 0x9017f12, 0x8807faa, x6, 12, x8)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x13, rd==x13, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 253, rs1_b0_val == 4, rs2_b2_val == 64, rs1_b1_val == 251, rs1_b2_val == 85, rs2_b3_val == 251, rs2_b0_val == 4
// opcode: pbsada ; op1:x29; op2:x13; dest:x13; op1val:0xfd55fb04;  op2val:0xfb401204
TEST_RR_OP(pbsada, x13, x29, x13, 0x00000000, 0xfd55fb04, 0xfb401204, x6, 16, x8)

inst_5:
// rs1==x2, rs2==x9, rd==x14, rs2_b3_val == 170, rs2_b1_val == 254, rs2_b0_val == 253, rs1_b1_val == 223, rs1_b0_val == 127
// opcode: pbsada ; op1:x2; op2:x9; dest:x14; op1val:0xe55df7f;  op2val:0xaa0ffefd
TEST_RR_OP(pbsada, x14, x2, x9, 0x00000000, 0xe55df7f, 0xaa0ffefd, x6, 20, x8)

inst_6:
// rs1==x18, rs2==x5, rd==x9, rs2_b3_val == 127, rs2_b1_val == 128, rs1_b2_val == 251, rs1_b3_val == 223
// opcode: pbsada ; op1:x18; op2:x5; dest:x9; op1val:0xdffb0d12;  op2val:0x7f07800b
TEST_RR_OP(pbsada, x9, x18, x5, 0x00000000, 0xdffb0d12, 0x7f07800b, x6, 24, x8)

inst_7:
// rs1==x1, rs2==x18, rd==x30, rs2_b3_val == 191, rs2_b0_val == 64, rs1_b1_val == 85, rs1_b0_val == 247, rs1_b3_val == 16
// opcode: pbsada ; op1:x1; op2:x18; dest:x30; op1val:0x101255f7;  op2val:0xbf40aa40
TEST_RR_OP(pbsada, x30, x1, x18, 0x00000000, 0x101255f7, 0xbf40aa40, x6, 28, x8)

inst_8:
// rs1==x21, rs2==x15, rd==x16, rs2_b3_val == 223, rs2_b2_val == 223, rs1_b1_val == 253, rs1_b3_val == 0
// opcode: pbsada ; op1:x21; op2:x15; dest:x16; op1val:0x09fd03;  op2val:0xdfdf090c
TEST_RR_OP(pbsada, x16, x21, x15, 0x00000000, 0x09fd03, 0xdfdf090c, x6, 32, x8)

inst_9:
// rs1==x9, rs2==x7, rd==x1, rs2_b3_val == 239, rs1_b3_val == 4, rs1_b1_val == 170, rs2_b1_val == 85
// opcode: pbsada ; op1:x9; op2:x7; dest:x1; op1val:0x403aa11;  op2val:0xef055505
TEST_RR_OP(pbsada, x1, x9, x7, 0x00000000, 0x403aa11, 0xef055505, x6, 36, x8)

inst_10:
// rs1==x20, rs2==x28, rd==x18, rs2_b3_val == 247, rs1_b2_val == 170, rs2_b2_val == 254, rs1_b1_val == 8
// opcode: pbsada ; op1:x20; op2:x28; dest:x18; op1val:0x10aa087f;  op2val:0xf7fe1340
TEST_RR_OP(pbsada, x18, x20, x28, 0x00000000, 0x10aa087f, 0xf7fe1340, x6, 40, x8)

inst_11:
// rs1==x25, rs2==x24, rd==x2, rs2_b3_val == 253, rs1_b2_val == 254, rs1_b3_val == 239
// opcode: pbsada ; op1:x25; op2:x24; dest:x2; op1val:0xeffefd04;  op2val:0xfd0f0f04
TEST_RR_OP(pbsada, x2, x25, x24, 0x00000000, 0xeffefd04, 0xfd0f0f04, x6, 44, x8)

inst_12:
// rs1==x13, rs2==x22, rd==x0, rs2_b3_val == 128, rs2_b1_val == 4, rs1_b2_val == 64, rs2_b2_val == 253
// opcode: pbsada ; op1:x13; op2:x22; dest:x0; op1val:0xd40030d;  op2val:0x80fd0440
TEST_RR_OP(pbsada, x0, x13, x22, 0x00000000, 0xd40030d, 0x80fd0440, x6, 48, x8)

inst_13:
// rs1==x22, rs2==x20, rd==x5, rs2_b3_val == 64, rs2_b1_val == 255, rs1_b2_val == 239, rs1_b0_val == 85, rs2_b2_val == 127, rs1_b3_val == 247
// opcode: pbsada ; op1:x22; op2:x20; dest:x5; op1val:0xf7ef0955;  op2val:0x407fff0b
TEST_RR_OP(pbsada, x5, x22, x20, 0x00000000, 0xf7ef0955, 0x407fff0b, x6, 52, x8)

inst_14:
// rs1==x31, rs2==x10, rd==x11, rs2_b3_val == 32, rs1_b0_val == 64, rs1_b3_val == 85, rs1_b2_val == 2, rs2_b0_val == 1
// opcode: pbsada ; op1:x31; op2:x10; dest:x11; op1val:0x55020a40;  op2val:0x20fd0501
TEST_RR_OP(pbsada, x11, x31, x10, 0x00000000, 0x55020a40, 0x20fd0501, x6, 56, x8)

inst_15:
// rs1==x26, rs2==x16, rd==x20, rs2_b3_val == 16, rs1_b1_val == 1, rs1_b0_val == 251, rs1_b2_val == 127
// opcode: pbsada ; op1:x26; op2:x16; dest:x20; op1val:0x127f01fb;  op2val:0x1007040c
TEST_RR_OP(pbsada, x20, x26, x16, 0x00000000, 0x127f01fb, 0x1007040c, x6, 60, x8)

inst_16:
// rs1==x3, rs2==x1, rd==x17, rs2_b3_val == 4, rs1_b0_val == 32
// opcode: pbsada ; op1:x3; op2:x1; dest:x17; op1val:0xbffb0620;  op2val:0x4070cfd
TEST_RR_OP(pbsada, x17, x3, x1, 0x00000000, 0xbffb0620, 0x4070cfd, x6, 64, x8)

inst_17:
// rs1==x30, rs2==x27, rd==x24, rs2_b3_val == 2, rs1_b0_val == 239, rs1_b2_val == 247, rs2_b2_val == 85
// opcode: pbsada ; op1:x30; op2:x27; dest:x24; op1val:0x10f708ef;  op2val:0x2555511
TEST_RR_OP(pbsada, x24, x30, x27, 0x00000000, 0x10f708ef, 0x2555511, x6, 68, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x24, rs2==x19, rd==x6, rs2_b3_val == 255, rs1_b0_val == 2, rs2_b2_val == 170, rs2_b0_val == 255
// opcode: pbsada ; op1:x24; op2:x19; dest:x6; op1val:0x1550e02;  op2val:0xffaa0cff
TEST_RR_OP(pbsada, x6, x24, x19, 0x00000000, 0x1550e02, 0xffaa0cff, x1, 0, x4)

inst_19:
// rs1==x11, rs2==x6, rd==x12, rs2_b3_val == 0, rs2_b0_val == 239, rs2_b1_val == 8
// opcode: pbsada ; op1:x11; op2:x6; dest:x12; op1val:0xafe087f;  op2val:0x0a08ef
TEST_RR_OP(pbsada, x12, x11, x6, 0x00000000, 0xafe087f, 0x0a08ef, x1, 4, x4)

inst_20:
// rs1==x15, rs2==x31, rd==x29, rs2_b2_val == 191, rs1_b1_val == 254, rs2_b0_val == 251
// opcode: pbsada ; op1:x15; op2:x31; dest:x29; op1val:0x613fe55;  op2val:0x20bf09fb
TEST_RR_OP(pbsada, x29, x15, x31, 0x00000000, 0x613fe55, 0x20bf09fb, x1, 8, x4)

inst_21:
// rs1==x7, rs2==x12, rd==x3, rs2_b2_val == 239, 
// opcode: pbsada ; op1:x7; op2:x12; dest:x3; op1val:0xdf0efefb;  op2val:0x40ef0a01
TEST_RR_OP(pbsada, x3, x7, x12, 0x00000000, 0xdf0efefb, 0x40ef0a01, x1, 12, x4)

inst_22:
// rs1==x27, rs2==x14, rd==x21, rs2_b2_val == 247, rs1_b1_val == 32
// opcode: pbsada ; op1:x27; op2:x14; dest:x21; op1val:0xa122005;  op2val:0xdf70c01
TEST_RR_OP(pbsada, x21, x27, x14, 0x00000000, 0xa122005, 0xdf70c01, x1, 16, x4)

inst_23:
// rs1==x19, rs2==x21, rd==x22, rs2_b2_val == 251, rs1_b3_val == 64
// opcode: pbsada ; op1:x19; op2:x21; dest:x22; op1val:0x40110512;  op2val:0x8fb1101
TEST_RR_OP(pbsada, x22, x19, x21, 0x00000000, 0x40110512, 0x8fb1101, x1, 20, x4)

inst_24:
// rs1==x8, rs2==x3, rd==x27, rs2_b2_val == 32, rs2_b1_val == 2, rs1_b3_val == 127
// opcode: pbsada ; op1:x8; op2:x3; dest:x27; op1val:0x7f020910;  op2val:0x320020c
TEST_RR_OP(pbsada, x27, x8, x3, 0x00000000, 0x7f020910, 0x320020c, x1, 24, x4)

inst_25:
// rs1==x10, rs2==x8, rd==x7, rs2_b2_val == 16, rs2_b0_val == 85
// opcode: pbsada ; op1:x10; op2:x8; dest:x7; op1val:0xd0f030e;  op2val:0xfb107f55
TEST_RR_OP(pbsada, x7, x10, x8, 0x00000000, 0xd0f030e, 0xfb107f55, x1, 28, x4)

inst_26:
// rs1==x12, rs2==x26, rd==x25, rs1_b2_val == 0, rs2_b0_val == 223
// opcode: pbsada ; op1:x12; op2:x26; dest:x25; op1val:0xdf001112;  op2val:0x0a55df
TEST_RR_OP(pbsada, x25, x12, x26, 0x00000000, 0xdf001112, 0x0a55df, x1, 32, x4)

inst_27:
// rs1==x5, rs2==x11, rd==x26, rs1_b1_val == 191, rs1_b3_val == 170, rs1_b2_val == 223
// opcode: pbsada ; op1:x5; op2:x11; dest:x26; op1val:0xaadfbf0f;  op2val:0xbfdfff13
TEST_RR_OP(pbsada, x26, x5, x11, 0x00000000, 0xaadfbf0f, 0xbfdfff13, x1, 36, x4)

inst_28:
// rs1==x16, rs2==x30, rd==x28, rs1_b1_val == 239, rs1_b2_val == 4
// opcode: pbsada ; op1:x16; op2:x30; dest:x28; op1val:0x604ef0d;  op2val:0xf713030d
TEST_RR_OP(pbsada, x28, x16, x30, 0x00000000, 0x604ef0d, 0xf713030d, x1, 40, x4)

inst_29:
// rs1==x6, rs2==x2, rd==x19, rs1_b1_val == 247, rs1_b2_val == 8, rs1_b3_val == 128, rs1_b0_val == 170
// opcode: pbsada ; op1:x6; op2:x2; dest:x19; op1val:0x8008f7aa;  op2val:0xfe130b06
TEST_RR_OP(pbsada, x19, x6, x2, 0x00000000, 0x8008f7aa, 0xfe130b06, x1, 44, x4)

inst_30:
// rs1==x28, rs2==x29, rd==x15, rs1_b1_val == 128, 
// opcode: pbsada ; op1:x28; op2:x29; dest:x15; op1val:0x70e80f7;  op2val:0xd55040c
TEST_RR_OP(pbsada, x15, x28, x29, 0x00000000, 0x70e80f7, 0xd55040c, x1, 48, x4)

inst_31:
// rs1==x0, rs2==x23, rd==x8, rs1_b1_val == 64, rs1_b2_val == 191
// opcode: pbsada ; op1:x0; op2:x23; dest:x8; op1val:0x3bf4005;  op2val:0x120d0905
TEST_RR_OP(pbsada, x8, x0, x23, 0x00000000, 0x3bf4005, 0x120d0905, x1, 52, x4)

inst_32:
// rs1_b1_val == 16, rs1_b3_val == 254, rs2_b1_val == 223
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfe0e1013;  op2val:0x60bdf01
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xfe0e1013, 0x60bdf01, x1, 56, x4)

inst_33:
// rs1_b1_val == 4, rs2_b1_val == 253
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x70b04aa;  op2val:0xfbfefddf
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x70b04aa, 0xfbfefddf, x1, 60, x4)

inst_34:
// rs1_b1_val == 2, rs2_b1_val == 16
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf04020a;  op2val:0x400d1012
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xf04020a, 0x400d1012, x1, 64, x4)

inst_35:
// rs1_b1_val == 255, rs2_b0_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x4055ff55;  op2val:0x7df1120
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x4055ff55, 0x7df1120, x1, 68, x4)

inst_36:
// rs1_b1_val == 0, rs2_b0_val == 247
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xd0b0003;  op2val:0xfbfedff7
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xd0b0003, 0xfbfedff7, x1, 72, x4)

inst_37:
// rs1_b0_val == 191, rs1_b2_val == 253
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf7fd07bf;  op2val:0x5505090d
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xf7fd07bf, 0x5505090d, x1, 76, x4)

inst_38:
// rs1_b0_val == 223, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xdf0f03df;  op2val:0x1303aa0b
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xdf0f03df, 0x1303aa0b, x1, 80, x4)

inst_39:
// rs1_b0_val == 253, rs2_b2_val == 255
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x90104fd;  op2val:0xf7ffdf80
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x90104fd, 0xf7ffdf80, x1, 84, x4)

inst_40:
// rs1_b0_val == 254, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x9effdfe;  op2val:0x8dfff0c
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x9effdfe, 0x8dfff0c, x1, 88, x4)

inst_41:
// rs2_b1_val == 1, rs1_b2_val == 16, rs1_b3_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x201040f7;  op2val:0xef0c0105
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x201040f7, 0xef0c0105, x1, 92, x4)

inst_42:
// rs2_b1_val == 0, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x201102ef;  op2val:0x1fb000f
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x201102ef, 0x1fb000f, x1, 96, x4)

inst_43:
// rs2_b0_val == 127, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf70def09;  op2val:0xef09037f
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xf70def09, 0xef09037f, x1, 100, x4)

inst_44:
// rs2_b0_val == 191, rs1_b3_val == 251
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfb0120f7;  op2val:0x10fd0fbf
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xfb0120f7, 0x10fd0fbf, x1, 104, x4)

inst_45:
// rs2_b0_val == 254, rs2_b1_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x80f70f7f;  op2val:0x78020fe
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x80f70f7f, 0x78020fe, x1, 108, x4)

inst_46:
// rs2_b0_val == 16, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xeffbbf0d;  op2val:0x800b0210
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xeffbbf0d, 0x800b0210, x1, 112, x4)

inst_47:
// rs2_b0_val == 2, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x130909fe;  op2val:0xff70f02
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x130909fe, 0xff70f02, x1, 116, x4)

inst_48:
// rs2_b0_val == 0, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfd0908fe;  op2val:0x40c0600
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xfd0908fe, 0x40c0600, x1, 120, x4)

inst_49:
// rs1_b0_val == 128, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x55bf4080;  op2val:0x130c5503
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x55bf4080, 0x130c5503, x1, 124, x4)

inst_50:
// rs1_b0_val == 8, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x80080c08;  op2val:0xe12070e
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x80080c08, 0xe12070e, x1, 128, x4)

inst_51:
// rs1_b0_val == 1, rs2_b1_val == 247
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfe030201;  op2val:0x130af705
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xfe030201, 0x130af705, x1, 132, x4)

inst_52:
// rs1_b0_val == 255, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfb1308ff;  op2val:0xf7030200
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xfb1308ff, 0xf7030200, x1, 136, x4)

inst_53:
// rs1_b3_val == 8, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x803fbdf;  op2val:0x11fb030d
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x803fbdf, 0x11fb030d, x1, 140, x4)

inst_54:
// rs1_b3_val == 2, rs2_b2_val == 8, rs2_b1_val == 191
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x2effd04;  op2val:0xe08bf06
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x2effd04, 0xe08bf06, x1, 144, x4)

inst_55:
// rs1_b3_val == 255, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xffaa0f08;  op2val:0x5ef08fe
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xffaa0f08, 0x5ef08fe, x1, 148, x4)

inst_56:
// rs2_b2_val == 4, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x200d070b;  op2val:0xfd041012
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x200d070b, 0xfd041012, x1, 152, x4)

inst_57:
// rs2_b2_val == 0, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xeaaffbf;  op2val:0xb00fd20
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xeaaffbf, 0xb00fd20, x1, 156, x4)

inst_58:
// rs2_b1_val == 251, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x2008dffb;  op2val:0x40afb09
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x2008dffb, 0x40afb09, x1, 160, x4)

inst_59:
// rs1_b2_val == 32, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x720aaef;  op2val:0x130906fd
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x720aaef, 0x130906fd, x1, 164, x4)

inst_60:
// rs2_b1_val == 64, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x87f02fe;  op2val:0xb074080
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x87f02fe, 0xb074080, x1, 168, x4)

inst_61:
// rs2_b2_val == 2, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x60f0205;  op2val:0xff020109
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x60f0205, 0xff020109, x1, 172, x4)

inst_62:
// rs2_b2_val == 1, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xc12ff0a;  op2val:0xd010280
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xc12ff0a, 0xd010280, x1, 176, x4)

inst_63:
// rs1_b2_val == 255, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xbff000b;  op2val:0x3aaf7ef
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xbff000b, 0x3aaf7ef, x1, 180, x4)

inst_64:
// rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 170, rs2_b3_val == 254, rs2_b0_val == 8, rs1_b2_val == 128, rs1_b3_val == 191
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xbf800900;  op2val:0xfe09aa08
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xbf800900, 0xfe09aa08, x1, 184, x4)

inst_65:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b3_val == 1, rs1_b3_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x10c1312;  op2val:0x111aa0e
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x10c1312, 0x111aa0e, x1, 188, x4)

inst_66:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 127, rs2_b0_val == 170, rs2_b2_val == 128, rs2_b1_val == 127, rs2_b3_val == 8, rs1_b2_val == 1
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x9017f12;  op2val:0x8807faa
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0x9017f12, 0x8807faa, x1, 192, x4)

inst_67:
// rs2_b3_val == 128, rs2_b1_val == 4, rs1_b2_val == 64, rs2_b2_val == 253
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xd40030d;  op2val:0x80fd0440
TEST_RR_OP(pbsada, x31, x30, x29, 0x00000000, 0xd40030d, 0x80fd0440, x1, 196, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
