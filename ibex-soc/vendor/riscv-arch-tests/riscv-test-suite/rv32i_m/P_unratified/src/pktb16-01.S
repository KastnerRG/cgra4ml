
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pktb16 instruction of the RISC-V RV32PZicsr extension for the pktb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pktb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x6, rd==x30, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64511, rs2_h0_val == 65023
// opcode: pktb16 ; op1:x14; op2:x6; dest:x30; op1val:0x030000;  op2val:0xfbfffdff
TEST_RR_OP(pktb16, x30, x14, x6, 0x00000000, 0x030000, 0xfbfffdff, x1, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x5, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32768, rs2_h1_val == 65279, rs1_h1_val == 65279, rs1_h0_val == 65407
// opcode: pktb16 ; op1:x31; op2:x31; dest:x5; op1val:0xfeffff7f;  op2val:0xfeff8000
TEST_RR_OP(pktb16, x5, x31, x31, 0x00000000, 0xfeffff7f, 0xfeff8000, x1, 4, x10)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x7, rd==x26, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h0_val == 21845, rs1_h1_val == 65407
// opcode: pktb16 ; op1:x26; op2:x7; dest:x26; op1val:0xff7f5555;  op2val:0x075555
TEST_RR_OP(pktb16, x26, x26, x7, 0x00000000, 0xff7f5555, 0x075555, x1, 8, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_h1_val == 43690, rs1_h1_val == 2
// opcode: pktb16 ; op1:x29; op2:x29; dest:x29; op1val:0x02000d;  op2val:0xaaaa000c
TEST_RR_OP(pktb16, x29, x29, x29, 0x00000000, 0x02000d, 0xaaaa000c, x1, 12, x10)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x23, rd==x23, rs2_h1_val == 21845, rs1_h0_val == 64, rs1_h1_val == 512, rs2_h0_val == 65519
// opcode: pktb16 ; op1:x5; op2:x23; dest:x23; op1val:0x2000040;  op2val:0x5555ffef
TEST_RR_OP(pktb16, x23, x5, x23, 0x00000000, 0x2000040, 0x5555ffef, x1, 16, x10)

inst_5:
// rs1==x27, rs2==x14, rd==x31, rs2_h1_val == 32767, rs2_h0_val == 8
// opcode: pktb16 ; op1:x27; op2:x14; dest:x31; op1val:0x09000f;  op2val:0x7fff0008
TEST_RR_OP(pktb16, x31, x27, x14, 0x00000000, 0x09000f, 0x7fff0008, x1, 20, x10)

inst_6:
// rs1==x9, rs2==x8, rd==x25, rs2_h1_val == 49151, rs2_h0_val == 2, rs1_h0_val == 8
// opcode: pktb16 ; op1:x9; op2:x8; dest:x25; op1val:0x0b0008;  op2val:0xbfff0002
TEST_RR_OP(pktb16, x25, x9, x8, 0x00000000, 0x0b0008, 0xbfff0002, x1, 24, x10)

inst_7:
// rs1==x13, rs2==x16, rd==x21, rs2_h1_val == 57343, rs1_h1_val == 8
// opcode: pktb16 ; op1:x13; op2:x16; dest:x21; op1val:0x080006;  op2val:0xdfff0011
TEST_RR_OP(pktb16, x21, x13, x16, 0x00000000, 0x080006, 0xdfff0011, x1, 28, x10)

inst_8:
// rs1==x16, rs2==x4, rd==x3, rs2_h1_val == 61439, rs1_h1_val == 32
// opcode: pktb16 ; op1:x16; op2:x4; dest:x3; op1val:0x200040;  op2val:0xefff0003
TEST_RR_OP(pktb16, x3, x16, x4, 0x00000000, 0x200040, 0xefff0003, x1, 32, x10)

inst_9:
// rs1==x22, rs2==x25, rd==x4, rs2_h1_val == 63487, rs1_h0_val == 65531, rs2_h0_val == 65533
// opcode: pktb16 ; op1:x22; op2:x25; dest:x4; op1val:0x07fffb;  op2val:0xf7fffffd
TEST_RR_OP(pktb16, x4, x22, x25, 0x00000000, 0x07fffb, 0xf7fffffd, x1, 36, x10)

inst_10:
// rs1==x19, rs2==x13, rd==x24, rs2_h1_val == 65023, rs1_h1_val == 49151
// opcode: pktb16 ; op1:x19; op2:x13; dest:x24; op1val:0xbfff0000;  op2val:0xfdff000e
TEST_RR_OP(pktb16, x24, x19, x13, 0x00000000, 0xbfff0000, 0xfdff000e, x1, 40, x10)

inst_11:
// rs1==x0, rs2==x19, rd==x15, rs2_h1_val == 65407, rs1_h0_val == 32768
// opcode: pktb16 ; op1:x0; op2:x19; dest:x15; op1val:0x038000;  op2val:0xff7f0007
TEST_RR_OP(pktb16, x15, x0, x19, 0x00000000, 0x038000, 0xff7f0007, x1, 44, x10)

inst_12:
// rs1==x17, rs2==x0, rd==x22, rs2_h1_val == 65471, rs1_h0_val == 4096, rs2_h0_val == 65407, rs1_h1_val == 256
// opcode: pktb16 ; op1:x17; op2:x0; dest:x22; op1val:0x1001000;  op2val:0xffbfff7f
TEST_RR_OP(pktb16, x22, x17, x0, 0x00000000, 0x1001000, 0xffbfff7f, x1, 48, x10)

inst_13:
// rs1==x25, rs2==x24, rd==x8, rs2_h1_val == 65503, rs1_h0_val == 2, rs1_h1_val == 2048
// opcode: pktb16 ; op1:x25; op2:x24; dest:x8; op1val:0x8000002;  op2val:0xffdf000d
TEST_RR_OP(pktb16, x8, x25, x24, 0x00000000, 0x8000002, 0xffdf000d, x1, 52, x10)

inst_14:
// rs1==x8, rs2==x11, rd==x14, rs2_h1_val == 65519, rs2_h0_val == 49151
// opcode: pktb16 ; op1:x8; op2:x11; dest:x14; op1val:0x200fffb;  op2val:0xffefbfff
TEST_RR_OP(pktb16, x14, x8, x11, 0x00000000, 0x200fffb, 0xffefbfff, x1, 56, x10)

inst_15:
// rs1==x15, rs2==x2, rd==x6, rs2_h1_val == 65527, rs1_h1_val == 64, rs2_h0_val == 61439
// opcode: pktb16 ; op1:x15; op2:x2; dest:x6; op1val:0x400007;  op2val:0xfff7efff
TEST_RR_OP(pktb16, x6, x15, x2, 0x00000000, 0x400007, 0xfff7efff, x1, 60, x10)

inst_16:
// rs1==x18, rs2==x5, rd==x16, rs2_h1_val == 65531, rs2_h0_val == 1, rs1_h0_val == 256
// opcode: pktb16 ; op1:x18; op2:x5; dest:x16; op1val:0x080100;  op2val:0xfffb0001
TEST_RR_OP(pktb16, x16, x18, x5, 0x00000000, 0x080100, 0xfffb0001, x1, 64, x10)

inst_17:
// rs1==x24, rs2==x26, rd==x2, rs2_h1_val == 65533, rs2_h0_val == 1024, rs1_h1_val == 65533
// opcode: pktb16 ; op1:x24; op2:x26; dest:x2; op1val:0xfffd0007;  op2val:0xfffd0400
TEST_RR_OP(pktb16, x2, x24, x26, 0x00000000, 0xfffd0007, 0xfffd0400, x1, 68, x8)

inst_18:
// rs1==x11, rs2==x17, rd==x12, rs2_h1_val == 65534, rs1_h0_val == 49151, rs1_h1_val == 1024
// opcode: pktb16 ; op1:x11; op2:x17; dest:x12; op1val:0x400bfff;  op2val:0xfffe000d
TEST_RR_OP(pktb16, x12, x11, x17, 0x00000000, 0x400bfff, 0xfffe000d, x1, 72, x8)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_19:
// rs1==x6, rs2==x30, rd==x27, rs2_h1_val == 32768, rs1_h1_val == 65535
// opcode: pktb16 ; op1:x6; op2:x30; dest:x27; op1val:0xffff0008;  op2val:0x8000000b
TEST_RR_OP(pktb16, x27, x6, x30, 0x00000000, 0xffff0008, 0x8000000b, x5, 0, x8)

inst_20:
// rs1==x7, rs2==x3, rd==x1, rs2_h1_val == 16384, rs2_h0_val == 512, rs1_h1_val == 65519, rs1_h0_val == 65023
// opcode: pktb16 ; op1:x7; op2:x3; dest:x1; op1val:0xffeffdff;  op2val:0x40000200
TEST_RR_OP(pktb16, x1, x7, x3, 0x00000000, 0xffeffdff, 0x40000200, x5, 4, x8)

inst_21:
// rs1==x2, rs2==x20, rd==x18, rs2_h1_val == 8192, rs2_h0_val == 65503
// opcode: pktb16 ; op1:x2; op2:x20; dest:x18; op1val:0x205555;  op2val:0x2000ffdf
TEST_RR_OP(pktb16, x18, x2, x20, 0x00000000, 0x205555, 0x2000ffdf, x5, 8, x8)

inst_22:
// rs1==x28, rs2==x15, rd==x0, rs2_h1_val == 4096, rs2_h0_val == 65535, rs1_h0_val == 32
// opcode: pktb16 ; op1:x28; op2:x15; dest:x0; op1val:0x200020;  op2val:0x1000ffff
TEST_RR_OP(pktb16, x0, x28, x15, 0x00000000, 0x200020, 0x1000ffff, x5, 12, x8)

inst_23:
// rs1==x30, rs2==x10, rd==x11, rs2_h1_val == 2048, rs2_h0_val == 65471, rs1_h1_val == 1
// opcode: pktb16 ; op1:x30; op2:x10; dest:x11; op1val:0x011000;  op2val:0x800ffbf
TEST_RR_OP(pktb16, x11, x30, x10, 0x00000000, 0x011000, 0x800ffbf, x5, 16, x8)

inst_24:
// rs1==x3, rs2==x22, rd==x9, rs2_h1_val == 1024, rs1_h1_val == 8192, rs1_h0_val == 63487
// opcode: pktb16 ; op1:x3; op2:x22; dest:x9; op1val:0x2000f7ff;  op2val:0x4000012
TEST_RR_OP(pktb16, x9, x3, x22, 0x00000000, 0x2000f7ff, 0x4000012, x5, 20, x8)

inst_25:
// rs1==x12, rs2==x18, rd==x7, rs2_h1_val == 512, rs1_h0_val == 65535, rs1_h1_val == 64511
// opcode: pktb16 ; op1:x12; op2:x18; dest:x7; op1val:0xfbffffff;  op2val:0x200ffdf
TEST_RR_OP(pktb16, x7, x12, x18, 0x00000000, 0xfbffffff, 0x200ffdf, x5, 24, x8)

inst_26:
// rs1==x10, rs2==x12, rd==x19, rs2_h1_val == 256, rs2_h0_val == 128, rs1_h0_val == 65519
// opcode: pktb16 ; op1:x10; op2:x12; dest:x19; op1val:0x13ffef;  op2val:0x1000080
TEST_RR_OP(pktb16, x19, x10, x12, 0x00000000, 0x13ffef, 0x1000080, x5, 28, x8)

inst_27:
// rs1==x4, rs2==x9, rd==x10, rs2_h1_val == 128, rs1_h0_val == 65503
// opcode: pktb16 ; op1:x4; op2:x9; dest:x10; op1val:0x11ffdf;  op2val:0x800008
TEST_RR_OP(pktb16, x10, x4, x9, 0x00000000, 0x11ffdf, 0x800008, x5, 32, x8)

inst_28:
// rs1==x20, rs2==x27, rd==x28, rs2_h1_val == 64, rs2_h0_val == 65534, rs1_h0_val == 128
// opcode: pktb16 ; op1:x20; op2:x27; dest:x28; op1val:0x20000080;  op2val:0x40fffe
TEST_RR_OP(pktb16, x28, x20, x27, 0x00000000, 0x20000080, 0x40fffe, x5, 36, x8)

inst_29:
// rs1==x21, rs2==x1, rd==x17, rs2_h1_val == 32, rs1_h1_val == 61439
// opcode: pktb16 ; op1:x21; op2:x1; dest:x17; op1val:0xefffffdf;  op2val:0x200005
TEST_RR_OP(pktb16, x17, x21, x1, 0x00000000, 0xefffffdf, 0x200005, x5, 40, x8)

inst_30:
// rs1==x23, rs2==x28, rd==x13, rs1_h0_val == 65533, rs1_h1_val == 32767
// opcode: pktb16 ; op1:x23; op2:x28; dest:x13; op1val:0x7ffffffd;  op2val:0x7fff0080
TEST_RR_OP(pktb16, x13, x23, x28, 0x00000000, 0x7ffffffd, 0x7fff0080, x5, 44, x8)

inst_31:
// rs1==x1, rs2==x21, rd==x20, rs1_h0_val == 65534, rs1_h1_val == 0, rs2_h1_val == 4, rs2_h0_val == 32
// opcode: pktb16 ; op1:x1; op2:x21; dest:x20; op1val:0x00fffe;  op2val:0x040020
TEST_RR_OP(pktb16, x20, x1, x21, 0x00000000, 0x00fffe, 0x040020, x5, 48, x8)

inst_32:
// rs1_h0_val == 16384, rs2_h0_val == 65531, rs1_h1_val == 4096
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10004000;  op2val:0x0cfffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x10004000, 0x0cfffb, x5, 52, x8)

inst_33:
// rs1_h0_val == 8192, rs2_h0_val == 64511
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20002000;  op2val:0x400fbff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x20002000, 0x400fbff, x5, 56, x1)

inst_34:
// rs1_h0_val == 2048, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000800;  op2val:0x0f0080
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x1000800, 0x0f0080, x5, 60, x1)

inst_35:
// rs1_h0_val == 1024, rs1_h1_val == 65503
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0400;  op2val:0x1000fffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xffdf0400, 0x1000fffb, x5, 64, x1)

inst_36:
// rs1_h0_val == 512, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0200;  op2val:0x0d0020
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xffff0200, 0x0d0020, x5, 68, x1)

inst_37:
// rs1_h0_val == 16, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010;  op2val:0x04000f
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xff7f0010, 0x04000f, x5, 72, x1)

inst_38:
// rs1_h0_val == 4, rs1_h1_val == 21845
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550004;  op2val:0x12fffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x55550004, 0x12fffb, x5, 76, x1)

inst_39:
// rs1_h0_val == 1, rs2_h0_val == 256
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0001;  op2val:0xfbff0100
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x7fff0001, 0xfbff0100, x5, 80, x1)

inst_40:
// rs2_h1_val == 16, rs1_h1_val == 16384
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400;  op2val:0x10ffff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x40000400, 0x10ffff, x5, 84, x1)

inst_41:
// rs2_h1_val == 8, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x200100;  op2val:0x080001
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x200100, 0x080001, x5, 88, x1)

inst_42:
// rs2_h1_val == 2, rs1_h0_val == 64511, rs2_h0_val == 65279, rs1_h1_val == 65527
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff;  op2val:0x02feff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfff7fbff, 0x02feff, x5, 92, x1)

inst_43:
// rs2_h1_val == 1, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002;  op2val:0x010020
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfff70002, 0x010020, x5, 96, x1)

inst_44:
// rs2_h1_val == 65535, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100;  op2val:0xfffffbff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xefff0100, 0xfffffbff, x5, 100, x1)

inst_45:
// rs2_h1_val == 0, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c2000;  op2val:0x00ffef
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x0c2000, 0x00ffef, x5, 104, x1)

inst_46:
// rs2_h0_val == 64, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009;  op2val:0xffbf0040
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfbff0009, 0xffbf0040, x5, 108, x1)

inst_47:
// rs2_h0_val == 16, rs1_h1_val == 57343
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff5555;  op2val:0x090010
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xdfff5555, 0x090010, x5, 112, x1)

inst_48:
// rs2_h0_val == 4, rs1_h0_val == 61439
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0x2000004
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x4000efff, 0x2000004, x5, 116, x1)

inst_49:
// rs2_h0_val == 0, rs1_h1_val == 65531
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000d;  op2val:0x55550000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfffb000d, 0x55550000, x5, 120, x1)

inst_50:
// rs1_h1_val == 43690, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaefff;  op2val:0xefff0007
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xaaaaefff, 0xefff0007, x5, 124, x1)

inst_51:
// rs1_h1_val == 63487, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff8000;  op2val:0x080001
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xf7ff8000, 0x080001, x5, 128, x1)

inst_52:
// rs1_h1_val == 65023, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0011;  op2val:0x2000feff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfdff0011, 0x2000feff, x5, 132, x1)

inst_53:
// rs1_h1_val == 65471, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555;  op2val:0xfffb0003
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xffbf5555, 0xfffb0003, x5, 136, x1)

inst_54:
// rs1_h1_val == 65534, rs1_h0_val == 65471
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbf;  op2val:0x0dfffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfffeffbf, 0x0dfffb, x5, 140, x1)

inst_55:
// rs1_h1_val == 32768, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ff7f;  op2val:0x050040
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x8000ff7f, 0x050040, x5, 144, x1)

inst_56:
// rs1_h1_val == 128, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffdf;  op2val:0x13ff7f
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x80ffdf, 0x13ff7f, x5, 148, x1)

inst_57:
// rs2_h0_val == 43690, rs1_h0_val == 65279
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x11aaaa
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfffffeff, 0x11aaaa, x5, 152, x1)

inst_58:
// rs1_h1_val == 16, rs2_h0_val == 8192
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x104000;  op2val:0x092000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x104000, 0x092000, x5, 156, x1)

inst_59:
// rs2_h0_val == 32767, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000a;  op2val:0x057fff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x8000000a, 0x057fff, x5, 160, x1)

inst_60:
// rs1_h1_val == 4, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x04bfff;  op2val:0xffef0000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x04bfff, 0xffef0000, x5, 164, x1)

inst_61:
// rs2_h0_val == 57343, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000400;  op2val:0x5555dfff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x2000400, 0x5555dfff, x5, 168, x1)

inst_62:
// rs1_h0_val == 65527, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x12fff7;  op2val:0x00fffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x12fff7, 0x00fffb, x5, 172, x1)

inst_63:
// rs2_h0_val == 63487, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000a;  op2val:0xffbff7ff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x02000a, 0xffbff7ff, x5, 176, x1)

inst_64:
// rs1_h0_val == 43690, rs2_h0_val == 2048
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa;  op2val:0x130800
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xffbfaaaa, 0x130800, x5, 180, x1)

inst_65:
// rs1_h0_val == 32767, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7fff;  op2val:0x04f7ff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xaaaa7fff, 0x04f7ff, x5, 184, x1)

inst_66:
// rs2_h0_val == 16384, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000c;  op2val:0x0b4000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x03000c, 0x0b4000, x5, 188, x1)

inst_67:
// rs1_h0_val == 57343, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff;  op2val:0x8000aaaa
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x01dfff, 0x8000aaaa, x5, 192, x1)

inst_68:
// rs2_h0_val == 4096, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0011;  op2val:0xefff1000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xefff0011, 0xefff1000, x5, 196, x1)

inst_69:
// rs2_h0_val == 65527, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0fffdf;  op2val:0xfff7fff7
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x0fffdf, 0xfff7fff7, x5, 200, x1)

inst_70:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32768, rs2_h1_val == 65279, rs1_h1_val == 65279, rs1_h0_val == 65407
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7f;  op2val:0xfeff8000
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0xfeffff7f, 0xfeff8000, x5, 204, x1)

inst_71:
// rs2_h1_val == 43690, rs1_h1_val == 2
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000d;  op2val:0xaaaa000c
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x02000d, 0xaaaa000c, x5, 208, x1)

inst_72:
// rs2_h1_val == 65407, rs1_h0_val == 32768
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x038000;  op2val:0xff7f0007
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x038000, 0xff7f0007, x5, 212, x1)

inst_73:
// rs2_h1_val == 4096, rs2_h0_val == 65535, rs1_h0_val == 32
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x200020;  op2val:0x1000ffff
TEST_RR_OP(pktb16, x31, x30, x29, 0x00000000, 0x200020, 0x1000ffff, x5, 216, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 55*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
