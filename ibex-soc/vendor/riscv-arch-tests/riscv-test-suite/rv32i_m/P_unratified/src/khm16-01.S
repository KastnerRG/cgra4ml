
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khm16 instruction of the RISC-V RV32PZicsr extension for the khm16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khm16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x26, rd==x7, rs1_h0_val == -32768, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16, rs2_h1_val == -2049, rs1_h1_val == -2049
// opcode: khm16 ; op1:x23; op2:x26; dest:x7; op1val:0xf7ff8000;  op2val:0xf7ff0010
TEST_PKRR_OP(khm16, x7, x23, x26, 0x00000000, 0xf7ff8000, 0xf7ff0010, x23, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x31, rs1_h1_val != rs2_h1_val, rs1_h1_val == -1, rs2_h0_val == 256, rs2_h1_val == -2, rs1_h0_val == 0
// opcode: khm16 ; op1:x13; op2:x13; dest:x31; op1val:0xffff0000;  op2val:0xfffe0100
TEST_PKRR_OP(khm16, x31, x13, x13, 0x00000000, 0xffff0000, 0xfffe0100, x13, x4, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x11, rd==x2, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 1, rs1_h0_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -17
// opcode: khm16 ; op1:x2; op2:x11; dest:x2; op1val:0xffef0800;  op2val:0x070001
TEST_PKRR_OP(khm16, x2, x2, x11, 0x00000000, 0xffef0800, 0x070001, x2, x4, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -16385, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -257, rs1_h1_val == 32767
// opcode: khm16 ; op1:x15; op2:x15; dest:x15; op1val:0x7fffbfff;  op2val:0xfffafeff
TEST_PKRR_OP(khm16, x15, x15, x15, 0x00000000, 0x7fffbfff, 0xfffafeff, x15, x4, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x20, rd==x20, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 1024, rs1_h1_val == 2048, rs2_h0_val == 8
// opcode: khm16 ; op1:x11; op2:x20; dest:x20; op1val:0x8000400;  op2val:0x090008
TEST_PKRR_OP(khm16, x20, x11, x20, 0x00000000, 0x8000400, 0x090008, x11, x4, 32, x5)

inst_5:
// rs1==x7, rs2==x14, rd==x18, rs1_h0_val == rs2_h0_val, rs1_h0_val == -9, rs2_h1_val == -1025, rs2_h0_val == -9
// opcode: khm16 ; op1:x7; op2:x14; dest:x18; op1val:0xfff8fff7;  op2val:0xfbfffff7
TEST_PKRR_OP(khm16, x18, x7, x14, 0x00000000, 0xfff8fff7, 0xfbfffff7, x7, x4, 40, x5)

inst_6:
// rs1==x22, rs2==x30, rd==x27, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h0_val == 16, rs2_h1_val == -257
// opcode: khm16 ; op1:x22; op2:x30; dest:x27; op1val:0x050010;  op2val:0xfefffffe
TEST_PKRR_OP(khm16, x27, x22, x30, 0x00000000, 0x050010, 0xfefffffe, x22, x4, 48, x5)

inst_7:
// rs1==x28, rs2==x16, rd==x3, rs2_h1_val == -21846, rs1_h1_val == -33, rs1_h0_val == 1
// opcode: khm16 ; op1:x28; op2:x16; dest:x3; op1val:0xffdf0001;  op2val:0xaaaafffc
TEST_PKRR_OP(khm16, x3, x28, x16, 0x00000000, 0xffdf0001, 0xaaaafffc, x28, x4, 56, x5)

inst_8:
// rs1==x12, rs2==x19, rd==x26, rs2_h1_val == 21845, rs1_h1_val == 64, rs1_h0_val == 16384, rs2_h0_val == -2049
// opcode: khm16 ; op1:x12; op2:x19; dest:x26; op1val:0x404000;  op2val:0x5555f7ff
TEST_PKRR_OP(khm16, x26, x12, x19, 0x00000000, 0x404000, 0x5555f7ff, x12, x4, 64, x5)

inst_9:
// rs1==x1, rs2==x18, rd==x25, rs2_h1_val == 32767, 
// opcode: khm16 ; op1:x1; op2:x18; dest:x25; op1val:0xfffc0800;  op2val:0x7fff0001
TEST_PKRR_OP(khm16, x25, x1, x18, 0x00000000, 0xfffc0800, 0x7fff0001, x1, x4, 72, x5)

inst_10:
// rs1==x16, rs2==x25, rd==x17, rs2_h1_val == -16385, rs1_h1_val == 16, rs1_h0_val == 32767
// opcode: khm16 ; op1:x16; op2:x25; dest:x17; op1val:0x107fff;  op2val:0xbffffeff
TEST_PKRR_OP(khm16, x17, x16, x25, 0x00000000, 0x107fff, 0xbffffeff, x16, x4, 80, x5)

inst_11:
// rs1==x21, rs2==x6, rd==x11, rs2_h1_val == -8193, rs2_h0_val == 21845, rs1_h0_val == 32, rs1_h1_val == 256
// opcode: khm16 ; op1:x21; op2:x6; dest:x11; op1val:0x1000020;  op2val:0xdfff5555
TEST_PKRR_OP(khm16, x11, x21, x6, 0x00000000, 0x1000020, 0xdfff5555, x21, x4, 88, x5)

inst_12:
// rs1==x10, rs2==x31, rd==x24, rs2_h1_val == -4097, rs1_h0_val == 512, rs1_h1_val == -32768
// opcode: khm16 ; op1:x10; op2:x31; dest:x24; op1val:0x80000200;  op2val:0xefff0003
TEST_PKRR_OP(khm16, x24, x10, x31, 0x00000000, 0x80000200, 0xefff0003, x10, x4, 96, x5)

inst_13:
// rs1==x31, rs2==x10, rd==x30, rs2_h1_val == -513, rs1_h1_val == 512
// opcode: khm16 ; op1:x31; op2:x10; dest:x30; op1val:0x2000020;  op2val:0xfdff0009
TEST_PKRR_OP(khm16, x30, x31, x10, 0x00000000, 0x2000020, 0xfdff0009, x31, x4, 104, x2)

inst_14:
// rs1==x0, rs2==x28, rd==x16, rs2_h1_val == -129, rs2_h0_val == -21846
// opcode: khm16 ; op1:x0; op2:x28; dest:x16; op1val:0x408000;  op2val:0xff7faaaa
TEST_PKRR_OP(khm16, x16, x0, x28, 0x00000000, 0x408000, 0xff7faaaa, x0, x4, 112, x2)

inst_15:
// rs1==x17, rs2==x23, rd==x10, rs2_h1_val == -65, 
// opcode: khm16 ; op1:x17; op2:x23; dest:x10; op1val:0x7fff0200;  op2val:0xffbf5555
TEST_PKRR_OP(khm16, x10, x17, x23, 0x00000000, 0x7fff0200, 0xffbf5555, x17, x4, 120, x2)

inst_16:
// rs1==x14, rs2==x9, rd==x1, rs2_h1_val == -33, rs1_h1_val == -5, rs2_h0_val == 16384
// opcode: khm16 ; op1:x14; op2:x9; dest:x1; op1val:0xfffb0006;  op2val:0xffdf4000
TEST_PKRR_OP(khm16, x1, x14, x9, 0x00000000, 0xfffb0006, 0xffdf4000, x14, x4, 128, x2)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_17:
// rs1==x19, rs2==x17, rd==x22, rs2_h1_val == -17, rs2_h0_val == 4096
// opcode: khm16 ; op1:x19; op2:x17; dest:x22; op1val:0x2000009;  op2val:0xffef1000
TEST_PKRR_OP(khm16, x22, x19, x17, 0x00000000, 0x2000009, 0xffef1000, x19, x10, 0, x2)

inst_18:
// rs1==x9, rs2==x7, rd==x13, rs2_h1_val == -9, rs1_h0_val == -3
// opcode: khm16 ; op1:x9; op2:x7; dest:x13; op1val:0xffeffffd;  op2val:0xfff7f7ff
TEST_PKRR_OP(khm16, x13, x9, x7, 0x00000000, 0xffeffffd, 0xfff7f7ff, x9, x10, 8, x2)

inst_19:
// rs1==x4, rs2==x5, rd==x9, rs2_h1_val == -5, rs1_h1_val == -65, rs2_h0_val == 32767, rs1_h0_val == 8192
// opcode: khm16 ; op1:x4; op2:x5; dest:x9; op1val:0xffbf2000;  op2val:0xfffb7fff
TEST_PKRR_OP(khm16, x9, x4, x5, 0x00000000, 0xffbf2000, 0xfffb7fff, x4, x10, 16, x2)

inst_20:
// rs1==x20, rs2==x24, rd==x21, rs2_h1_val == -3, 
// opcode: khm16 ; op1:x20; op2:x24; dest:x21; op1val:0x3ffffff8;  op2val:0xfffd0006
TEST_PKRR_OP(khm16, x21, x20, x24, 0x00000000, 0x3ffffff8, 0xfffd0006, x20, x10, 24, x2)

inst_21:
// rs1==x18, rs2==x27, rd==x28, rs2_h1_val == -32768, rs2_h0_val == 8192
// opcode: khm16 ; op1:x18; op2:x27; dest:x28; op1val:0x40fff8;  op2val:0x80002000
TEST_PKRR_OP(khm16, x28, x18, x27, 0x00000000, 0x40fff8, 0x80002000, x18, x10, 32, x2)

inst_22:
// rs1==x26, rs2==x8, rd==x29, rs2_h1_val == 16384, 
// opcode: khm16 ; op1:x26; op2:x8; dest:x29; op1val:0x8000005;  op2val:0x4000fff7
TEST_PKRR_OP(khm16, x29, x26, x8, 0x00000000, 0x8000005, 0x4000fff7, x26, x10, 40, x2)

inst_23:
// rs1==x6, rs2==x22, rd==x12, rs2_h1_val == 8192, rs2_h0_val == -513, rs1_h1_val == -1025
// opcode: khm16 ; op1:x6; op2:x22; dest:x12; op1val:0xfbff0800;  op2val:0x2000fdff
TEST_PKRR_OP(khm16, x12, x6, x22, 0x00000000, 0xfbff0800, 0x2000fdff, x6, x10, 48, x2)

inst_24:
// rs1==x5, rs2==x12, rd==x4, rs2_h1_val == 4096, rs1_h0_val == -33
// opcode: khm16 ; op1:x5; op2:x12; dest:x4; op1val:0x40ffdf;  op2val:0x1000fff7
TEST_PKRR_OP(khm16, x4, x5, x12, 0x00000000, 0x40ffdf, 0x1000fff7, x5, x10, 56, x2)

inst_25:
// rs1==x27, rs2==x21, rd==x0, rs2_h1_val == 2048, rs1_h0_val == 256
// opcode: khm16 ; op1:x27; op2:x21; dest:x0; op1val:0xfffb0100;  op2val:0x800fdff
TEST_PKRR_OP(khm16, x0, x27, x21, 0x00000000, 0xfffb0100, 0x800fdff, x27, x10, 64, x2)

inst_26:
// rs1==x24, rs2==x1, rd==x14, rs2_h1_val == 1024, rs2_h0_val == -5, rs1_h0_val == -21846, rs1_h1_val == -129
// opcode: khm16 ; op1:x24; op2:x1; dest:x14; op1val:0xff7faaaa;  op2val:0x400fffb
TEST_PKRR_OP(khm16, x14, x24, x1, 0x00000000, 0xff7faaaa, 0x400fffb, x24, x10, 72, x2)

inst_27:
// rs1==x25, rs2==x0, rd==x23, rs2_h1_val == 512, rs1_h1_val == 16384, rs1_h0_val == -5
// opcode: khm16 ; op1:x25; op2:x0; dest:x23; op1val:0x4000fffb;  op2val:0x2000009
TEST_PKRR_OP(khm16, x23, x25, x0, 0x00000000, 0x4000fffb, 0x2000009, x25, x10, 80, x2)

inst_28:
// rs1==x8, rs2==x3, rd==x5, rs2_h1_val == 256, 
// opcode: khm16 ; op1:x8; op2:x3; dest:x5; op1val:0xfffa0020;  op2val:0x1001000
TEST_PKRR_OP(khm16, x5, x8, x3, 0x00000000, 0xfffa0020, 0x1001000, x8, x10, 88, x7)

inst_29:
// rs1==x30, rs2==x2, rd==x8, rs2_h1_val == 128, rs2_h0_val == -32768, rs1_h1_val == 1
// opcode: khm16 ; op1:x30; op2:x2; dest:x8; op1val:0x01fff6;  op2val:0x808000
TEST_PKRR_OP(khm16, x8, x30, x2, 0x00000000, 0x01fff6, 0x808000, x30, x10, 96, x7)

inst_30:
// rs1==x3, rs2==x29, rd==x6, rs2_h1_val == 64, rs2_h0_val == 128, rs1_h0_val == -129
// opcode: khm16 ; op1:x3; op2:x29; dest:x6; op1val:0xffbfff7f;  op2val:0x400080
TEST_PKRR_OP(khm16, x6, x3, x29, 0x00000000, 0xffbfff7f, 0x400080, x3, x10, 104, x7)

inst_31:
// rs1==x29, rs2==x4, rd==x19, rs2_h1_val == 32, 
// opcode: khm16 ; op1:x29; op2:x4; dest:x19; op1val:0xffbf2000;  op2val:0x20c000
TEST_PKRR_OP(khm16, x19, x29, x4, 0x00000000, 0xffbf2000, 0x20c000, x29, x10, 112, x7)

inst_32:
// rs1_h0_val == -1025, rs2_h0_val == 2
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbff;  op2val:0xfffc0002
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xffeffbff, 0xfffc0002, x30, x10, 120, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_h0_val == -513, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fdff;  op2val:0xfffbfffa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x03fdff, 0xfffbfffa, x30, x1, 0, x7)

inst_34:
// rs1_h0_val == -257, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100feff;  op2val:0xfff80080
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x100feff, 0xfff80080, x30, x1, 8, x7)

inst_35:
// rs1_h0_val == -65, rs2_h1_val == 16, rs1_h1_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffbf;  op2val:0x10fffc
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x00ffbf, 0x10fffc, x30, x1, 16, x7)

inst_36:
// rs1_h0_val == -17, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffef;  op2val:0x400003
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x4000ffef, 0x400003, x30, x1, 24, x7)

inst_37:
// rs1_h0_val == -2, rs1_h1_val == 21845
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffe;  op2val:0x203fff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x5555fffe, 0x203fff, x30, x1, 32, x7)

inst_38:
// rs1_h0_val == 4096, rs2_h0_val == -4097
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x1001000;  op2val:0x40efff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x1001000, 0x40efff, x30, x1, 40, x7)

inst_39:
// rs1_h0_val == 128, rs2_h0_val == -1
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0080;  op2val:0x5555ffff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfbff0080, 0x5555ffff, x30, x1, 48, x7)

inst_40:
// rs1_h0_val == 64, rs2_h0_val == -16385
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x030040;  op2val:0x100bfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x030040, 0x100bfff, x30, x1, 56, x7)

inst_41:
// rs1_h0_val == 8, rs2_h1_val == 4, rs1_h1_val == -21846
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0008;  op2val:0x04feff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xaaaa0008, 0x04feff, x30, x1, 64, x7)

inst_42:
// rs1_h0_val == 4, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x400004;  op2val:0x80000006
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x400004, 0x80000006, x30, x1, 72, x7)

inst_43:
// rs1_h0_val == 2, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x400002;  op2val:0xfff83fff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x400002, 0xfff83fff, x30, x1, 80, x7)

inst_44:
// rs1_h0_val == -1, rs2_h0_val == 2048
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffff;  op2val:0x800800
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x07ffff, 0x800800, x30, x1, 88, x7)

inst_45:
// rs2_h1_val == 8, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x400100;  op2val:0x08c000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x400100, 0x08c000, x30, x1, 96, x7)

inst_46:
// rs2_h1_val == 2, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe;  op2val:0x02feff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x10fffe, 0x02feff, x30, x1, 104, x7)

inst_47:
// rs2_h1_val == 1, rs1_h1_val == 8192
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd;  op2val:0x012000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x2000fffd, 0x012000, x30, x1, 112, x7)

inst_48:
// rs2_h1_val == 0, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000;  op2val:0x00bfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xff7f2000, 0x00bfff, x30, x1, 120, x7)

inst_49:
// rs2_h1_val == -1, rs1_h0_val == -4097
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100efff;  op2val:0xfffffffb
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x100efff, 0xfffffffb, x30, x1, 128, x7)

inst_50:
// rs2_h0_val == -8193, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf;  op2val:0x200dfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x03ffbf, 0x200dfff, x30, x1, 136, x7)

inst_51:
// rs2_h0_val == -3, rs1_h0_val == -2049
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7ff;  op2val:0x7ffffffd
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xff7ff7ff, 0x7ffffffd, x30, x1, 144, x7)

inst_52:
// rs2_h0_val == 1024, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf;  op2val:0x010400
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x06ffbf, 0x010400, x30, x1, 152, x7)

inst_53:
// rs2_h0_val == 512, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80020;  op2val:0xfff70200
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfff80020, 0xfff70200, x30, x1, 160, x7)

inst_54:
// rs2_h0_val == 64, rs1_h1_val == -3
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0007;  op2val:0xfeff0040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfffd0007, 0xfeff0040, x30, x1, 168, x7)

inst_55:
// rs2_h0_val == 32, rs1_h1_val == 32
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff6;  op2val:0xfff60020
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x20fff6, 0xfff60020, x30, x1, 176, x7)

inst_56:
// rs2_h0_val == 4, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff7;  op2val:0xc0000004
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xc000fff7, 0xc0000004, x30, x1, 184, x7)

inst_57:
// rs2_h0_val == 0, rs1_h1_val == -257
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0001;  op2val:0xff7f0000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfeff0001, 0xff7f0000, x30, x1, 192, x7)

inst_58:
// rs1_h1_val == -16385, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400;  op2val:0x7ffffff7
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xbfff0400, 0x7ffffff7, x30, x1, 200, x7)

inst_59:
// rs1_h1_val == -8193, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0040;  op2val:0x08fff9
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xdfff0040, 0x08fff9, x30, x1, 208, x7)

inst_60:
// rs1_h1_val == -4097, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffbf;  op2val:0x010010
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xefffffbf, 0x010010, x30, x1, 216, x7)

inst_61:
// rs1_h1_val == -513, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0009;  op2val:0xfeffffff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfdff0009, 0xfeffffff, x30, x1, 224, x7)

inst_62:
// rs1_h1_val == -9, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff;  op2val:0x090006
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfff7efff, 0x090006, x30, x1, 232, x7)

inst_63:
// rs1_h1_val == -2, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe1000;  op2val:0x1000020
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfffe1000, 0x1000020, x30, x1, 240, x7)

inst_64:
// rs1_h1_val == 4096, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff6;  op2val:0x5555efff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x1000fff6, 0x5555efff, x30, x1, 248, x7)

inst_65:
// rs1_h1_val == 1024, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4001000;  op2val:0x5555f7ff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x4001000, 0x5555f7ff, x30, x1, 256, x7)

inst_66:
// rs1_h1_val == 128, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x800002;  op2val:0xfefffdff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x800002, 0xfefffdff, x30, x1, 264, x7)

inst_67:
// rs1_h1_val == 8, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x080000;  op2val:0xfffeaaaa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x080000, 0xfffeaaaa, x30, x1, 272, x7)

inst_68:
// rs2_h0_val == -33, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x080010;  op2val:0x100ffdf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x080010, 0x100ffdf, x30, x1, 280, x7)

inst_69:
// rs1_h1_val == 4, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x040040;  op2val:0xbffff7ff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x040040, 0xbffff7ff, x30, x1, 288, x7)

inst_70:
// rs1_h1_val == 2, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x02efff;  op2val:0xc0000040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x02efff, 0xc0000040, x30, x1, 296, x7)

inst_71:
// rs2_h0_val == -1025, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff;  op2val:0x00fbff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfffef7ff, 0x00fbff, x30, x1, 304, x7)

inst_72:
// rs1_h0_val == 21845, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x40005555;  op2val:0x07fbff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x40005555, 0x07fbff, x30, x1, 312, x7)

inst_73:
// rs2_h0_val == -129, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff8;  op2val:0xff7fff7f
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x2000fff8, 0xff7fff7f, x30, x1, 320, x7)

inst_74:
// rs2_h0_val == -65, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffbf;  op2val:0x80ffbf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x100ffbf, 0x80ffbf, x30, x1, 328, x7)

inst_75:
// rs1_h0_val == -8193, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefdfff;  op2val:0xfff90001
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xffefdfff, 0xfff90001, x30, x1, 336, x7)

inst_76:
// rs2_h0_val == -17, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffc;  op2val:0x5555ffef
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x4000fffc, 0x5555ffef, x30, x1, 344, x7)

inst_77:
// rs1_h1_val != rs2_h1_val, rs1_h1_val == -1, rs2_h0_val == 256, rs2_h1_val == -2, rs1_h0_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0000;  op2val:0xfffe0100
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xffff0000, 0xfffe0100, x30, x1, 352, x7)

inst_78:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -16385, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -257, rs1_h1_val == 32767
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbfff;  op2val:0xfffafeff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x7fffbfff, 0xfffafeff, x30, x1, 360, x7)

inst_79:
// rs2_h1_val == 2048, rs1_h0_val == 256
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0100;  op2val:0x800fdff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0xfffb0100, 0x800fdff, x30, x1, 368, x7)

inst_80:
// rs2_h1_val == 512, rs1_h1_val == 16384, rs1_h0_val == -5
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb;  op2val:0x2000009
TEST_PKRR_OP(khm16, x31, x30, x29, 0x00000000, 0x4000fffb, 0x2000009, x30, x1, 376, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
