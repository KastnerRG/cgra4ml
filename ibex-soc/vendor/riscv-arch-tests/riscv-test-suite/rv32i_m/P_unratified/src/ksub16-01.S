
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksub16 instruction of the RISC-V RV32PZicsr extension for the ksub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x10, rd==x5, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 0, rs1_h1_val == 32
// opcode: ksub16 ; op1:x14; op2:x10; dest:x5; op1val:0x208000;  op2val:0x00fff8
TEST_PKRR_OP(ksub16, x5, x14, x10, 0x00000000, 0x208000, 0x00fff8, x14, x2, 0, x1)

inst_1:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x30, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -2, rs1_h1_val == 128, rs2_h0_val == 21845
// opcode: ksub16 ; op1:x6; op2:x6; dest:x30; op1val:0x80fffe;  op2val:0x805555
TEST_PKRR_OP(ksub16, x30, x6, x6, 0x00000000, 0x80fffe, 0x805555, x6, x2, 8, x1)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x3, rd==x9, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -16385, rs2_h1_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -1
// opcode: ksub16 ; op1:x9; op2:x3; dest:x9; op1val:0xbfff0006;  op2val:0x10ffff
TEST_PKRR_OP(ksub16, x9, x9, x3, 0x00000000, 0xbfff0006, 0x10ffff, x9, x2, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -8193, rs1_h0_val == -33
// opcode: ksub16 ; op1:x20; op2:x20; dest:x20; op1val:0xdfffffdf;  op2val:0xfff8fffc
TEST_PKRR_OP(ksub16, x20, x20, x20, 0x00000000, 0xdfffffdf, 0xfff8fffc, x20, x2, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x25, rd==x25, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -9, rs1_h0_val == -17, rs2_h0_val == -9
// opcode: ksub16 ; op1:x22; op2:x25; dest:x25; op1val:0x09ffef;  op2val:0xfff7fff7
TEST_PKRR_OP(ksub16, x25, x22, x25, 0x00000000, 0x09ffef, 0xfff7fff7, x22, x2, 32, x1)

inst_5:
// rs1==x28, rs2==x23, rd==x31, rs1_h0_val == rs2_h0_val, rs1_h1_val == -4097, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -32768
// opcode: ksub16 ; op1:x28; op2:x23; dest:x31; op1val:0xefff3fff;  op2val:0x80003fff
TEST_PKRR_OP(ksub16, x31, x28, x23, 0x00000000, 0xefff3fff, 0x80003fff, x28, x2, 40, x1)

inst_6:
// rs1==x3, rs2==x14, rd==x6, rs2_h1_val == -21846, rs1_h0_val == -8193
// opcode: ksub16 ; op1:x3; op2:x14; dest:x6; op1val:0x03dfff;  op2val:0xaaaa0006
TEST_PKRR_OP(ksub16, x6, x3, x14, 0x00000000, 0x03dfff, 0xaaaa0006, x3, x2, 48, x1)

inst_7:
// rs1==x21, rs2==x15, rd==x0, rs2_h1_val == 21845, rs1_h0_val == 1024, rs1_h1_val == -2049, rs2_h0_val == 8
// opcode: ksub16 ; op1:x21; op2:x15; dest:x0; op1val:0xf7ff0400;  op2val:0x55550008
TEST_PKRR_OP(ksub16, x0, x21, x15, 0x00000000, 0xf7ff0400, 0x55550008, x21, x2, 56, x1)

inst_8:
// rs1==x26, rs2==x24, rd==x10, rs2_h1_val == 32767, rs1_h0_val == -4097
// opcode: ksub16 ; op1:x26; op2:x24; dest:x10; op1val:0x3fffefff;  op2val:0x7ffffff7
TEST_PKRR_OP(ksub16, x10, x26, x24, 0x00000000, 0x3fffefff, 0x7ffffff7, x26, x2, 64, x1)

inst_9:
// rs1==x5, rs2==x13, rd==x17, rs2_h1_val == -16385, rs2_h0_val == 64
// opcode: ksub16 ; op1:x5; op2:x13; dest:x17; op1val:0xf7fffffc;  op2val:0xbfff0040
TEST_PKRR_OP(ksub16, x17, x5, x13, 0x00000000, 0xf7fffffc, 0xbfff0040, x5, x2, 72, x1)

inst_10:
// rs1==x13, rs2==x28, rd==x11, rs2_h1_val == -8193, rs1_h1_val == 16384, rs1_h0_val == 21845
// opcode: ksub16 ; op1:x13; op2:x28; dest:x11; op1val:0x40005555;  op2val:0xdfff0009
TEST_PKRR_OP(ksub16, x11, x13, x28, 0x00000000, 0x40005555, 0xdfff0009, x13, x2, 80, x1)

inst_11:
// rs1==x17, rs2==x19, rd==x12, rs2_h1_val == -4097, rs2_h0_val == 2, rs1_h0_val == 2048, rs1_h1_val == 0
// opcode: ksub16 ; op1:x17; op2:x19; dest:x12; op1val:0x000800;  op2val:0xefff0002
TEST_PKRR_OP(ksub16, x12, x17, x19, 0x00000000, 0x000800, 0xefff0002, x17, x2, 88, x1)

inst_12:
// rs1==x27, rs2==x4, rd==x16, rs2_h1_val == -2049, rs1_h1_val == 2
// opcode: ksub16 ; op1:x27; op2:x4; dest:x16; op1val:0x020003;  op2val:0xf7fffffa
TEST_PKRR_OP(ksub16, x16, x27, x4, 0x00000000, 0x020003, 0xf7fffffa, x27, x2, 96, x1)

inst_13:
// rs1==x11, rs2==x8, rd==x13, rs2_h1_val == -1025, rs1_h1_val == 512, rs2_h0_val == -17
// opcode: ksub16 ; op1:x11; op2:x8; dest:x13; op1val:0x200fff9;  op2val:0xfbffffef
TEST_PKRR_OP(ksub16, x13, x11, x8, 0x00000000, 0x200fff9, 0xfbffffef, x11, x2, 104, x1)

inst_14:
// rs1==x24, rs2==x12, rd==x28, rs2_h1_val == -513, rs1_h0_val == 16384
// opcode: ksub16 ; op1:x24; op2:x12; dest:x28; op1val:0x004000;  op2val:0xfdfffffc
TEST_PKRR_OP(ksub16, x28, x24, x12, 0x00000000, 0x004000, 0xfdfffffc, x24, x2, 112, x6)

inst_15:
// rs1==x16, rs2==x21, rd==x27, rs2_h1_val == -257, rs1_h0_val == -257, rs2_h0_val == 16384
// opcode: ksub16 ; op1:x16; op2:x21; dest:x27; op1val:0x07feff;  op2val:0xfeff4000
TEST_PKRR_OP(ksub16, x27, x16, x21, 0x00000000, 0x07feff, 0xfeff4000, x16, x2, 120, x6)

inst_16:
// rs1==x1, rs2==x5, rd==x24, rs2_h1_val == -129, rs1_h1_val == 8192, rs1_h0_val == 1, rs2_h0_val == -32768
// opcode: ksub16 ; op1:x1; op2:x5; dest:x24; op1val:0x20000001;  op2val:0xff7f8000
TEST_PKRR_OP(ksub16, x24, x1, x5, 0x00000000, 0x20000001, 0xff7f8000, x1, x2, 128, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x0, rs2==x7, rd==x29, rs2_h1_val == -65, rs1_h1_val == 4096, rs1_h0_val == -129
// opcode: ksub16 ; op1:x0; op2:x7; dest:x29; op1val:0x1000ff7f;  op2val:0xffbf0009
TEST_PKRR_OP(ksub16, x29, x0, x7, 0x00000000, 0x1000ff7f, 0xffbf0009, x0, x5, 0, x6)

inst_18:
// rs1==x4, rs2==x26, rd==x7, rs2_h1_val == -33, rs1_h0_val == 4096, rs2_h0_val == 4096
// opcode: ksub16 ; op1:x4; op2:x26; dest:x7; op1val:0xfff91000;  op2val:0xffdf1000
TEST_PKRR_OP(ksub16, x7, x4, x26, 0x00000000, 0xfff91000, 0xffdf1000, x4, x5, 8, x6)

inst_19:
// rs1==x25, rs2==x31, rd==x14, rs2_h1_val == -17, rs1_h1_val == 8, rs2_h0_val == -16385
// opcode: ksub16 ; op1:x25; op2:x31; dest:x14; op1val:0x080005;  op2val:0xffefbfff
TEST_PKRR_OP(ksub16, x14, x25, x31, 0x00000000, 0x080005, 0xffefbfff, x25, x5, 16, x6)

inst_20:
// rs1==x12, rs2==x22, rd==x21, rs2_h1_val == -5, 
// opcode: ksub16 ; op1:x12; op2:x22; dest:x21; op1val:0x08ffdf;  op2val:0xfffb0006
TEST_PKRR_OP(ksub16, x21, x12, x22, 0x00000000, 0x08ffdf, 0xfffb0006, x12, x5, 24, x6)

inst_21:
// rs1==x10, rs2==x2, rd==x26, rs2_h1_val == -3, rs2_h0_val == 512, rs1_h1_val == -1025, rs1_h0_val == 32
// opcode: ksub16 ; op1:x10; op2:x2; dest:x26; op1val:0xfbff0020;  op2val:0xfffd0200
TEST_PKRR_OP(ksub16, x26, x10, x2, 0x00000000, 0xfbff0020, 0xfffd0200, x10, x5, 32, x6)

inst_22:
// rs1==x15, rs2==x1, rd==x22, rs2_h1_val == -2, 
// opcode: ksub16 ; op1:x15; op2:x1; dest:x22; op1val:0x20c000;  op2val:0xfffe8000
TEST_PKRR_OP(ksub16, x22, x15, x1, 0x00000000, 0x20c000, 0xfffe8000, x15, x5, 40, x6)

inst_23:
// rs1==x31, rs2==x27, rd==x15, rs2_h1_val == 16384, rs1_h0_val == -65, rs1_h1_val == -32768
// opcode: ksub16 ; op1:x31; op2:x27; dest:x15; op1val:0x8000ffbf;  op2val:0x4000fff6
TEST_PKRR_OP(ksub16, x15, x31, x27, 0x00000000, 0x8000ffbf, 0x4000fff6, x31, x5, 48, x6)

inst_24:
// rs1==x19, rs2==x30, rd==x23, rs2_h1_val == 8192, rs1_h1_val == -5
// opcode: ksub16 ; op1:x19; op2:x30; dest:x23; op1val:0xfffbdfff;  op2val:0x20000005
TEST_PKRR_OP(ksub16, x23, x19, x30, 0x00000000, 0xfffbdfff, 0x20000005, x19, x5, 56, x6)

inst_25:
// rs1==x2, rs2==x16, rd==x19, rs2_h1_val == 4096, rs2_h0_val == -21846
// opcode: ksub16 ; op1:x2; op2:x16; dest:x19; op1val:0x060007;  op2val:0x1000aaaa
TEST_PKRR_OP(ksub16, x19, x2, x16, 0x00000000, 0x060007, 0x1000aaaa, x2, x5, 64, x6)

inst_26:
// rs1==x30, rs2==x0, rd==x3, rs2_h1_val == 2048, rs1_h0_val == 8192, rs2_h0_val == 32, rs1_h1_val == -2
// opcode: ksub16 ; op1:x30; op2:x0; dest:x3; op1val:0xfffe2000;  op2val:0x8000020
TEST_PKRR_OP(ksub16, x3, x30, x0, 0x00000000, 0xfffe2000, 0x8000020, x30, x5, 72, x6)

inst_27:
// rs1==x18, rs2==x9, rd==x2, rs2_h1_val == 1024, rs2_h0_val == -129, rs1_h0_val == 64
// opcode: ksub16 ; op1:x18; op2:x9; dest:x2; op1val:0xfbff0040;  op2val:0x400ff7f
TEST_PKRR_OP(ksub16, x2, x18, x9, 0x00000000, 0xfbff0040, 0x400ff7f, x18, x5, 80, x6)

inst_28:
// rs1==x23, rs2==x18, rd==x8, rs2_h1_val == 512, rs1_h1_val == -21846
// opcode: ksub16 ; op1:x23; op2:x18; dest:x8; op1val:0xaaaaffbf;  op2val:0x2000005
TEST_PKRR_OP(ksub16, x8, x23, x18, 0x00000000, 0xaaaaffbf, 0x2000005, x23, x5, 88, x6)

inst_29:
// rs1==x8, rs2==x11, rd==x4, rs2_h1_val == 256, 
// opcode: ksub16 ; op1:x8; op2:x11; dest:x4; op1val:0xfffcdfff;  op2val:0x1000007
TEST_PKRR_OP(ksub16, x4, x8, x11, 0x00000000, 0xfffcdfff, 0x1000007, x8, x5, 96, x6)

inst_30:
// rs1==x29, rs2==x17, rd==x18, rs2_h1_val == 64, rs1_h0_val == 0, rs1_h1_val == 1
// opcode: ksub16 ; op1:x29; op2:x17; dest:x18; op1val:0x010000;  op2val:0x400008
TEST_PKRR_OP(ksub16, x18, x29, x17, 0x00000000, 0x010000, 0x400008, x29, x5, 104, x2)

inst_31:
// rs1==x7, rs2==x29, rd==x1, rs1_h0_val == -1025, rs2_h0_val == -4097
// opcode: ksub16 ; op1:x7; op2:x29; dest:x1; op1val:0x1000fbff;  op2val:0xf7ffefff
TEST_PKRR_OP(ksub16, x1, x7, x29, 0x00000000, 0x1000fbff, 0xf7ffefff, x7, x5, 112, x2)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == -513
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0x101000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0x101000, x30, x5, 120, x2)

inst_33:
// rs1_h0_val == -9, rs2_h0_val == 1024
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff7;  op2val:0xfff70400
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x8000fff7, 0xfff70400, x30, x5, 128, x2)

inst_34:
// rs1_h0_val == -5, rs2_h0_val == 1
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffb;  op2val:0x55550001
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfff8fffb, 0x55550001, x30, x5, 136, x2)

inst_35:
// rs1_h0_val == -3, rs1_h1_val == -129
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x07fffa
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x07fffa, x30, x5, 144, x2)

inst_36:
// rs1_h0_val == 512, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000200;  op2val:0xfff6fff9
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xc0000200, 0xfff6fff9, x30, x5, 152, x2)

inst_37:
// rs1_h0_val == 256, rs2_h0_val == 0, rs1_h1_val == -3
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100;  op2val:0xfffe0000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffd0100, 0xfffe0000, x30, x5, 160, x2)

inst_38:
// rs1_h0_val == 128, rs2_h0_val == -513, rs1_h1_val == 256
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000080;  op2val:0xfffbfdff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x1000080, 0xfffbfdff, x30, x5, 168, x2)

inst_39:
// rs1_h0_val == 16, rs2_h0_val == -2049
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010;  op2val:0xaaaaf7ff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xf7ff0010, 0xaaaaf7ff, x30, x5, 176, x2)

inst_40:
// rs1_h0_val == 8, rs2_h0_val == 16
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0008;  op2val:0x7fff0010
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffd0008, 0x7fff0010, x30, x5, 184, x2)

inst_41:
// rs1_h0_val == 4, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000004;  op2val:0x09fff9
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x2000004, 0x09fff9, x30, x5, 192, x2)

inst_42:
// rs1_h0_val == 2, rs2_h0_val == 8192
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0002;  op2val:0xfffa2000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xdfff0002, 0xfffa2000, x30, x5, 200, x2)

inst_43:
// rs1_h0_val == -1, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffff;  op2val:0xfffcefff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffcffff, 0xfffcefff, x30, x5, 208, x2)

inst_44:
// rs2_h1_val == 32, rs2_h0_val == -2
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400;  op2val:0x20fffe
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x3fff0400, 0x20fffe, x30, x5, 216, x2)

inst_45:
// rs2_h1_val == 8, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000002;  op2val:0x080002
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x20000002, 0x080002, x30, x5, 224, x2)

inst_46:
// rs2_h1_val == 4, rs2_h0_val == 4, rs1_h1_val == 21845
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0x040004
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x55550040, 0x040004, x30, x5, 232, x2)

inst_47:
// rs2_h1_val == 2, rs2_h0_val == 2048
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x098000;  op2val:0x020800
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x098000, 0x020800, x30, x5, 240, x2)

inst_48:
// rs2_h0_val == -5, rs1_h1_val == 16
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10efff;  op2val:0x20fffb
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x10efff, 0x20fffb, x30, x5, 248, x2)

inst_49:
// rs2_h0_val == -3, rs1_h1_val == 2048
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8002000;  op2val:0x100fffd
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x8002000, 0x100fffd, x30, x5, 256, x2)

inst_50:
// rs2_h0_val == 256, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0010;  op2val:0xfffc0100
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x3fff0010, 0xfffc0100, x30, x5, 264, x2)

inst_51:
// rs2_h0_val == 128, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1004000;  op2val:0x20000080
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x1004000, 0x20000080, x30, x5, 272, x2)

inst_52:
// rs1_h1_val == 32767, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0009;  op2val:0x080100
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x7fff0009, 0x080100, x30, x5, 280, x2)

inst_53:
// rs2_h0_val == -1025, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000;  op2val:0xf7fffbff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xefffc000, 0xf7fffbff, x30, x5, 288, x2)

inst_54:
// rs1_h1_val == -257, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffdf;  op2val:0x04f7ff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfeffffdf, 0x04f7ff, x30, x5, 296, x2)

inst_55:
// rs1_h1_val == -65, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3fff;  op2val:0x050000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xffbf3fff, 0x050000, x30, x5, 304, x2)

inst_56:
// rs1_h1_val == -33, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0xaaaa0100
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xffdf4000, 0xaaaa0100, x30, x5, 312, x2)

inst_57:
// rs1_h1_val == -17, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0006;  op2val:0xfff80001
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xffef0006, 0xfff80001, x30, x5, 320, x2)

inst_58:
// rs1_h1_val == -9, rs2_h0_val == -257
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7f;  op2val:0x00feff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfff7ff7f, 0x00feff, x30, x5, 328, x2)

inst_59:
// rs1_h1_val == 1024, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000080;  op2val:0xff7f5555
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x4000080, 0xff7f5555, x30, x5, 336, x2)

inst_60:
// rs2_h1_val == 1, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffff;  op2val:0x010200
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x80ffff, 0x010200, x30, x5, 344, x2)

inst_61:
// rs2_h0_val == -65, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90003;  op2val:0xaaaaffbf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfff90003, 0xaaaaffbf, x30, x5, 352, x2)

inst_62:
// rs2_h1_val == -1, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc5555;  op2val:0xffffffef
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffc5555, 0xffffffef, x30, x5, 360, x2)

inst_63:
// rs1_h1_val == 64, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fff6;  op2val:0xdfff0400
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x40fff6, 0xdfff0400, x30, x5, 368, x2)

inst_64:
// rs2_h0_val == 32767, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff8;  op2val:0xfff77fff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xffeffff8, 0xfff77fff, x30, x5, 376, x2)

inst_65:
// rs1_h1_val == 4, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x040400;  op2val:0x20fff6
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x040400, 0x20fff6, x30, x5, 384, x2)

inst_66:
// rs2_h0_val == -8193, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20efff;  op2val:0xfff7dfff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x20efff, 0xfff7dfff, x30, x5, 392, x2)

inst_67:
// rs1_h1_val == -1, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0x05fff8
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffffff6, 0x05fff8, x30, x5, 400, x2)

inst_68:
// rs1_h0_val == -21846, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcaaaa;  op2val:0x00fffd
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffcaaaa, 0x00fffd, x30, x5, 408, x2)

inst_69:
// rs1_h0_val == 32767, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef7fff;  op2val:0xfffaffef
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xffef7fff, 0xfffaffef, x30, x5, 416, x2)

inst_70:
// rs1_h0_val == -16385, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbfff;  op2val:0x20000000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffdbfff, 0x20000000, x30, x5, 424, x2)

inst_71:
// rs2_h0_val == -33, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800;  op2val:0x00ffdf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfff60800, 0x00ffdf, x30, x5, 432, x2)

inst_72:
// rs1_h0_val == -2049, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100f7ff;  op2val:0x09aaaa
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x100f7ff, 0x09aaaa, x30, x5, 440, x2)

inst_73:
// rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -2, rs1_h1_val == 128, rs2_h0_val == 21845
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffe;  op2val:0x805555
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x80fffe, 0x805555, x30, x5, 448, x2)

inst_74:
// rs2_h1_val == -65, rs1_h1_val == 4096, rs1_h0_val == -129
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7f;  op2val:0xffbf0009
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0x1000ff7f, 0xffbf0009, x30, x5, 456, x2)

inst_75:
// rs2_h1_val == 2048, rs1_h0_val == 8192, rs2_h0_val == 32, rs1_h1_val == -2
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000;  op2val:0x8000020
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x00000000, 0xfffe2000, 0x8000020, x30, x5, 464, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 118*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
