
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umin8 instruction of the RISC-V RV32PZicsr extension for the umin8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umin8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x10, rd==x15, rs1_b0_val == 0, rs2_b1_val == 4, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 8, rs2_b3_val == 191, rs1_b1_val == 2, rs1_b2_val == 1
// opcode: umin8 ; op1:x25; op2:x10; dest:x15; op1val:0xc010200;  op2val:0xbf080413
TEST_RR_OP(umin8, x15, x25, x10, 0x00000000, 0xc010200, 0xbf080413, x9, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x28, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 251, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 1, rs2_b3_val == 251, rs1_b2_val == 64, rs1_b0_val == 253
// opcode: umin8 ; op1:x14; op2:x14; dest:x28; op1val:0xfb4007fd;  op2val:0xfb010c0d
TEST_RR_OP(umin8, x28, x14, x14, 0x00000000, 0xfb4007fd, 0xfb010c0d, x9, 4, x13)

inst_2:
// rs1 == rd != rs2, rs1==x3, rs2==x16, rd==x3, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b1_val == 1, rs2_b0_val == 8
// opcode: umin8 ; op1:x3; op2:x16; dest:x3; op1val:0xb07060d;  op2val:0x9070108
TEST_RR_OP(umin8, x3, x3, x16, 0x00000000, 0xb07060d, 0x9070108, x9, 8, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 255, rs1_b2_val == 223, rs1_b1_val == 255, rs2_b2_val == 170, rs1_b3_val == 239
// opcode: umin8 ; op1:x17; op2:x17; dest:x17; op1val:0xefdfff07;  op2val:0xaaaff06
TEST_RR_OP(umin8, x17, x17, x17, 0x00000000, 0xefdfff07, 0xaaaff06, x9, 12, x13)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x6, rd==x6, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 239, rs2_b3_val == 85, rs2_b0_val == 253, rs1_b1_val == 16, rs1_b2_val == 247
// opcode: umin8 ; op1:x18; op2:x6; dest:x6; op1val:0x5f710fd;  op2val:0x55ef06fd
TEST_RR_OP(umin8, x6, x18, x6, 0x00000000, 0x5f710fd, 0x55ef06fd, x9, 16, x13)

inst_5:
// rs1==x15, rs2==x31, rd==x5, rs2_b3_val == 170, rs1_b0_val == 64, rs1_b2_val == 8, rs2_b0_val == 128, rs2_b2_val == 255
// opcode: umin8 ; op1:x15; op2:x31; dest:x5; op1val:0xf080540;  op2val:0xaaff0180
TEST_RR_OP(umin8, x5, x15, x31, 0x00000000, 0xf080540, 0xaaff0180, x9, 20, x13)

inst_6:
// rs1==x0, rs2==x27, rd==x4, rs2_b3_val == 127, rs1_b0_val == 251, rs1_b2_val == 128
// opcode: umin8 ; op1:x0; op2:x27; dest:x4; op1val:0xef8005fb;  op2val:0x7faa0b12
TEST_RR_OP(umin8, x4, x0, x27, 0x00000000, 0xef8005fb, 0x7faa0b12, x9, 24, x13)

inst_7:
// rs1==x29, rs2==x3, rd==x27, rs2_b3_val == 223, rs1_b0_val == 254
// opcode: umin8 ; op1:x29; op2:x3; dest:x27; op1val:0x90505fe;  op2val:0xdf0d0411
TEST_RR_OP(umin8, x27, x29, x3, 0x00000000, 0x90505fe, 0xdf0d0411, x9, 28, x13)

inst_8:
// rs1==x30, rs2==x5, rd==x12, rs2_b3_val == 239, rs2_b0_val == 0, rs1_b3_val == 2, rs1_b1_val == 64, rs2_b2_val == 127
// opcode: umin8 ; op1:x30; op2:x5; dest:x12; op1val:0x2114003;  op2val:0xef7f0500
TEST_RR_OP(umin8, x12, x30, x5, 0x00000000, 0x2114003, 0xef7f0500, x9, 32, x13)

inst_9:
// rs1==x23, rs2==x22, rd==x2, rs2_b3_val == 247, rs1_b3_val == 223, rs2_b1_val == 32
// opcode: umin8 ; op1:x23; op2:x22; dest:x2; op1val:0xdff70203;  op2val:0xf7062013
TEST_RR_OP(umin8, x2, x23, x22, 0x00000000, 0xdff70203, 0xf7062013, x9, 36, x13)

inst_10:
// rs1==x1, rs2==x24, rd==x11, rs2_b3_val == 253, rs1_b1_val == 170, rs1_b3_val == 254, rs2_b2_val == 253, rs2_b0_val == 247, rs1_b2_val == 253, rs2_b1_val == 254, rs1_b0_val == 247
// opcode: umin8 ; op1:x1; op2:x24; dest:x11; op1val:0xfefdaaf7;  op2val:0xfdfdfef7
TEST_RR_OP(umin8, x11, x1, x24, 0x00000000, 0xfefdaaf7, 0xfdfdfef7, x9, 40, x13)

inst_11:
// rs1==x7, rs2==x4, rd==x22, rs2_b3_val == 254, rs1_b1_val == 191, rs2_b0_val == 1, rs2_b2_val == 128
// opcode: umin8 ; op1:x7; op2:x4; dest:x22; op1val:0x30ebf06;  op2val:0xfe801201
TEST_RR_OP(umin8, x22, x7, x4, 0x00000000, 0x30ebf06, 0xfe801201, x9, 44, x13)

inst_12:
// rs1==x8, rs2==x0, rd==x29, rs2_b3_val == 128, rs1_b2_val == 0, rs2_b0_val == 4, rs1_b1_val == 4, rs1_b3_val == 191
// opcode: umin8 ; op1:x8; op2:x0; dest:x29; op1val:0xbf000407;  op2val:0x80070504
TEST_RR_OP(umin8, x29, x8, x0, 0x00000000, 0xbf000407, 0x80070504, x9, 48, x13)

inst_13:
// rs1==x6, rs2==x12, rd==x0, rs2_b3_val == 64, rs1_b0_val == 4, rs1_b3_val == 255, rs1_b2_val == 4
// opcode: umin8 ; op1:x6; op2:x12; dest:x0; op1val:0xff044004;  op2val:0x40010a0c
TEST_RR_OP(umin8, x0, x6, x12, 0x00000000, 0xff044004, 0x40010a0c, x9, 52, x13)

inst_14:
// rs1==x31, rs2==x25, rd==x20, rs2_b3_val == 32, rs2_b0_val == 64, rs2_b2_val == 2, rs1_b3_val == 247
// opcode: umin8 ; op1:x31; op2:x25; dest:x20; op1val:0xf7fd0b04;  op2val:0x20020940
TEST_RR_OP(umin8, x20, x31, x25, 0x00000000, 0xf7fd0b04, 0x20020940, x9, 56, x13)

inst_15:
// rs1==x21, rs2==x19, rd==x30, rs2_b3_val == 16, rs1_b3_val == 0, rs2_b1_val == 247
// opcode: umin8 ; op1:x21; op2:x19; dest:x30; op1val:0x0d0c40;  op2val:0x10aaf700
TEST_RR_OP(umin8, x30, x21, x19, 0x00000000, 0x0d0c40, 0x10aaf700, x9, 60, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x28, rs2==x30, rd==x9, rs2_b3_val == 8, rs1_b2_val == 32, rs1_b3_val == 1
// opcode: umin8 ; op1:x28; op2:x30; dest:x9; op1val:0x120130e;  op2val:0x8fff708
TEST_RR_OP(umin8, x9, x28, x30, 0x00000000, 0x120130e, 0x8fff708, x3, 0, x6)

inst_17:
// rs1==x26, rs2==x28, rd==x16, rs2_b3_val == 4, rs1_b1_val == 1
// opcode: umin8 ; op1:x26; op2:x28; dest:x16; op1val:0xfe4001fe;  op2val:0x40f0c01
TEST_RR_OP(umin8, x16, x26, x28, 0x00000000, 0xfe4001fe, 0x40f0c01, x3, 4, x6)

inst_18:
// rs1==x27, rs2==x9, rd==x31, rs2_b3_val == 2, rs2_b1_val == 2
// opcode: umin8 ; op1:x27; op2:x9; dest:x31; op1val:0xd120afb;  op2val:0x2120205
TEST_RR_OP(umin8, x31, x27, x9, 0x00000000, 0xd120afb, 0x2120205, x3, 8, x6)

inst_19:
// rs1==x4, rs2==x13, rd==x10, rs2_b3_val == 1, rs2_b1_val == 85, rs2_b2_val == 247, rs1_b1_val == 0, rs1_b2_val == 170
// opcode: umin8 ; op1:x4; op2:x13; dest:x10; op1val:0xfeaa0003;  op2val:0x1f755fd
TEST_RR_OP(umin8, x10, x4, x13, 0x00000000, 0xfeaa0003, 0x1f755fd, x3, 12, x6)

inst_20:
// rs1==x16, rs2==x11, rd==x24, rs2_b3_val == 255, rs2_b2_val == 191, rs2_b1_val == 191, rs1_b1_val == 251, rs2_b0_val == 251
// opcode: umin8 ; op1:x16; op2:x11; dest:x24; op1val:0x9aafbfd;  op2val:0xffbfbffb
TEST_RR_OP(umin8, x24, x16, x11, 0x00000000, 0x9aafbfd, 0xffbfbffb, x3, 16, x6)

inst_21:
// rs1==x24, rs2==x2, rd==x14, rs2_b3_val == 0, rs1_b2_val == 191, rs1_b0_val == 127
// opcode: umin8 ; op1:x24; op2:x2; dest:x14; op1val:0x9bf107f;  op2val:0x0a0d11
TEST_RR_OP(umin8, x14, x24, x2, 0x00000000, 0x9bf107f, 0x0a0d11, x3, 20, x6)

inst_22:
// rs1==x9, rs2==x18, rd==x13, rs2_b2_val == 85, rs1_b3_val == 85, rs2_b0_val == 170, rs2_b1_val == 239
// opcode: umin8 ; op1:x9; op2:x18; dest:x13; op1val:0x550503fd;  op2val:0x655efaa
TEST_RR_OP(umin8, x13, x9, x18, 0x00000000, 0x550503fd, 0x655efaa, x3, 24, x6)

inst_23:
// rs1==x20, rs2==x29, rd==x19, rs2_b2_val == 223, rs2_b0_val == 16, rs1_b1_val == 223
// opcode: umin8 ; op1:x20; op2:x29; dest:x19; op1val:0x306dffb;  op2val:0xfedf0310
TEST_RR_OP(umin8, x19, x20, x29, 0x00000000, 0x306dffb, 0xfedf0310, x3, 28, x6)

inst_24:
// rs1==x2, rs2==x21, rd==x18, rs2_b2_val == 251, rs1_b0_val == 85
// opcode: umin8 ; op1:x2; op2:x21; dest:x18; op1val:0x120b0655;  op2val:0x8fbfe13
TEST_RR_OP(umin8, x18, x2, x21, 0x00000000, 0x120b0655, 0x8fbfe13, x3, 32, x6)

inst_25:
// rs1==x11, rs2==x20, rd==x7, rs1_b1_val == 85, 
// opcode: umin8 ; op1:x11; op2:x20; dest:x7; op1val:0xdf055509;  op2val:0x400120aa
TEST_RR_OP(umin8, x7, x11, x20, 0x00000000, 0xdf055509, 0x400120aa, x3, 36, x6)

inst_26:
// rs1==x22, rs2==x26, rd==x21, rs1_b1_val == 127, rs1_b0_val == 16, rs1_b3_val == 16
// opcode: umin8 ; op1:x22; op2:x26; dest:x21; op1val:0x10017f10;  op2val:0x111202fd
TEST_RR_OP(umin8, x21, x22, x26, 0x00000000, 0x10017f10, 0x111202fd, x3, 40, x6)

inst_27:
// rs1==x19, rs2==x8, rd==x1, rs1_b1_val == 239, rs1_b0_val == 170, rs1_b2_val == 255
// opcode: umin8 ; op1:x19; op2:x8; dest:x1; op1val:0x1ffefaa;  op2val:0x8fd0cfd
TEST_RR_OP(umin8, x1, x19, x8, 0x00000000, 0x1ffefaa, 0x8fd0cfd, x3, 44, x6)

inst_28:
// rs1==x5, rs2==x23, rd==x25, rs1_b1_val == 247, rs2_b2_val == 16, rs2_b0_val == 255
// opcode: umin8 ; op1:x5; op2:x23; dest:x25; op1val:0xbf13f7fb;  op2val:0xfe1020ff
TEST_RR_OP(umin8, x25, x5, x23, 0x00000000, 0xbf13f7fb, 0xfe1020ff, x3, 48, x6)

inst_29:
// rs1==x12, rs2==x15, rd==x26, rs1_b1_val == 253, rs2_b0_val == 85
// opcode: umin8 ; op1:x12; op2:x15; dest:x26; op1val:0xb04fd0b;  op2val:0xfbbf1355
TEST_RR_OP(umin8, x26, x12, x15, 0x00000000, 0xb04fd0b, 0xfbbf1355, x3, 52, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_30:
// rs1==x10, rs2==x1, rd==x23, rs1_b1_val == 254, rs1_b0_val == 191, rs1_b2_val == 16, rs2_b1_val == 127
// opcode: umin8 ; op1:x10; op2:x1; dest:x23; op1val:0x110febf;  op2val:0xdff7f06
TEST_RR_OP(umin8, x23, x10, x1, 0x00000000, 0x110febf, 0xdff7f06, x2, 0, x4)

inst_31:
// rs1==x13, rs2==x7, rd==x8, rs1_b1_val == 128, rs2_b2_val == 0, rs1_b0_val == 1
// opcode: umin8 ; op1:x13; op2:x7; dest:x8; op1val:0xef088001;  op2val:0x100ef0a
TEST_RR_OP(umin8, x8, x13, x7, 0x00000000, 0xef088001, 0x100ef0a, x2, 4, x4)

inst_32:
// rs1_b1_val == 32, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x50c2006;  op2val:0xfd0a0304
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x50c2006, 0xfd0a0304, x2, 8, x4)

inst_33:
// rs1_b1_val == 8, rs1_b2_val == 239, rs1_b3_val == 32, rs1_b0_val == 255
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x20ef08ff;  op2val:0xfbef030a
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x20ef08ff, 0xfbef030a, x2, 12, x4)

inst_34:
// rs1_b0_val == 223, rs1_b3_val == 170
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaeff7df;  op2val:0x2006050f
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xaaeff7df, 0x2006050f, x2, 16, x4)

inst_35:
// rs1_b0_val == 239, rs1_b2_val == 127
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x17ffdef;  op2val:0xeffef05
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x17ffdef, 0xeffef05, x2, 20, x4)

inst_36:
// rs1_b0_val == 128, rs1_b3_val == 128
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x8040bf80;  op2val:0x3110b12
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x8040bf80, 0x3110b12, x2, 24, x4)

inst_37:
// rs1_b0_val == 32, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xff050120;  op2val:0xfb0b0e09
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xff050120, 0xfb0b0e09, x2, 28, x4)

inst_38:
// rs2_b1_val == 0, rs2_b0_val == 127
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbaa04fe;  op2val:0xdf07007f
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xbaa04fe, 0xdf07007f, x2, 32, x4)

inst_39:
// rs2_b0_val == 191, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x613057f;  op2val:0xdf0720bf
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x613057f, 0xdf0720bf, x2, 36, x4)

inst_40:
// rs2_b0_val == 223, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x55aaf7bf;  op2val:0xaa0aefdf
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x55aaf7bf, 0xaa0aefdf, x2, 40, x4)

inst_41:
// rs2_b0_val == 239, rs2_b1_val == 8
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xa0b0510;  op2val:0x10508ef
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xa0b0510, 0x10508ef, x2, 44, x4)

inst_42:
// rs2_b0_val == 254, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x80f7f711;  op2val:0x555511fe
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x80f7f711, 0x555511fe, x2, 48, x4)

inst_43:
// rs2_b0_val == 32, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0a800a;  op2val:0x3110120
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xff0a800a, 0x3110120, x2, 52, x4)

inst_44:
// rs2_b0_val == 2, rs2_b1_val == 64, rs1_b2_val == 254
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefefb0f;  op2val:0xfef74002
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xfefefb0f, 0xfef74002, x2, 56, x4)

inst_45:
// rs1_b3_val == 127, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f09fdfb;  op2val:0x130c0705
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x7f09fdfb, 0x130c0705, x2, 60, x4)

inst_46:
// rs1_b3_val == 253, rs2_b1_val == 16
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd050000;  op2val:0xf031040
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xfd050000, 0xf031040, x2, 64, x4)

inst_47:
// rs1_b0_val == 8, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xefbf0d08;  op2val:0xaa11000b
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xefbf0d08, 0xaa11000b, x2, 68, x4)

inst_48:
// rs1_b3_val == 64, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x40800007;  op2val:0x10def02
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x40800007, 0x10def02, x2, 72, x4)

inst_49:
// rs1_b0_val == 2, rs2_b2_val == 64
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0202;  op2val:0x80400111
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x0a0202, 0x80400111, x2, 76, x4)

inst_50:
// rs2_b2_val == 254, rs1_b2_val == 251
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafb7f80;  op2val:0xfefe0201
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xaafb7f80, 0xfefe0201, x2, 80, x4)

inst_51:
// rs1_b3_val == 8, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x80aff11;  op2val:0xef020f03
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x80aff11, 0xef020f03, x2, 84, x4)

inst_52:
// rs1_b3_val == 4, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x403bf7f;  op2val:0x71011bf
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x403bf7f, 0x71011bf, x2, 88, x4)

inst_53:
// rs2_b2_val == 32, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x301f70c;  op2val:0x6200004
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x301f70c, 0x6200004, x2, 92, x4)

inst_54:
// rs2_b2_val == 4, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x10060805;  op2val:0x80440ef
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x10060805, 0x80440ef, x2, 96, x4)

inst_55:
// rs2_b1_val == 170, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x5580dfbf;  op2val:0x411aa01
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x5580dfbf, 0x411aa01, x2, 100, x4)

inst_56:
// rs2_b1_val == 223, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0e08ff;  op2val:0x202dff7
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xff0e08ff, 0x202dff7, x2, 104, x4)

inst_57:
// rs2_b1_val == 251, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x1312fdfd;  op2val:0xffaafb0d
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x1312fdfd, 0xffaafb0d, x2, 108, x4)

inst_58:
// rs2_b1_val == 253, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x61109aa;  op2val:0x806fd0b
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x61109aa, 0x806fd0b, x2, 112, x4)

inst_59:
// rs2_b1_val == 128, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffd8001;  op2val:0x80fe80fe
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xdffd8001, 0x80fe80fe, x2, 116, x4)

inst_60:
// rs1_b2_val == 2, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x8020407;  op2val:0x809df80
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0x8020407, 0x809df80, x2, 120, x4)

inst_61:
// rs1_b2_val == 85, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa550e12;  op2val:0x8014007
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xaa550e12, 0x8014007, x2, 124, x4)

inst_62:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 251, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 1, rs2_b3_val == 251, rs1_b2_val == 64, rs1_b0_val == 253
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb4007fd;  op2val:0xfb010c0d
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xfb4007fd, 0xfb010c0d, x2, 128, x4)

inst_63:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 255, rs1_b2_val == 223, rs1_b1_val == 255, rs2_b2_val == 170, rs1_b3_val == 239
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdfff07;  op2val:0xaaaff06
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xefdfff07, 0xaaaff06, x2, 132, x4)

inst_64:
// rs2_b3_val == 127, rs1_b0_val == 251, rs1_b2_val == 128
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xef8005fb;  op2val:0x7faa0b12
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xef8005fb, 0x7faa0b12, x2, 136, x4)

inst_65:
// rs2_b3_val == 128, rs1_b2_val == 0, rs2_b0_val == 4, rs1_b1_val == 4, rs1_b3_val == 191
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf000407;  op2val:0x80070504
TEST_RR_OP(umin8, x31, x30, x29, 0x00000000, 0xbf000407, 0x80070504, x2, 140, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
