
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstsa16 instruction of the RISC-V RV32PZicsr extension for the kstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x23,signature_x23_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x13, rd==x2, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs2_h1_val == 512, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == 8192, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -33
// opcode: kstsa16 ; op1:x20; op2:x13; dest:x2; op1val:0x20008000;  op2val:0x200ffdf
TEST_PKRR_OP(kstsa16, x2, x20, x13, 0x00000000, 0x20008000, 0x200ffdf, x20, x23, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x16, rs1_h1_val == rs2_h1_val, rs2_h0_val == -2, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kstsa16 ; op1:x28; op2:x28; dest:x16; op1val:0x030009;  op2val:0x03fffe
TEST_PKRR_OP(kstsa16, x16, x28, x28, 0x00000000, 0x030009, 0x03fffe, x28, x23, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x31, rs2==x10, rd==x31, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 2, rs1_h0_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -257
// opcode: kstsa16 ; op1:x31; op2:x10; dest:x31; op1val:0xfeff0008;  op2val:0x2000002
TEST_PKRR_OP(kstsa16, x31, x31, x10, 0x00000000, 0xfeff0008, 0x2000002, x31, x23, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == -9, rs1_h0_val == -21846
// opcode: kstsa16 ; op1:x5; op2:x5; dest:x5; op1val:0xfff7aaaa;  op2val:0xfffa0100
TEST_PKRR_OP(kstsa16, x5, x5, x5, 0x00000000, 0xfff7aaaa, 0xfffa0100, x5, x23, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x1, rd==x1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 8
// opcode: kstsa16 ; op1:x17; op2:x1; dest:x1; op1val:0x08fff9;  op2val:0xfff80002
TEST_PKRR_OP(kstsa16, x1, x17, x1, 0x00000000, 0x08fff9, 0xfff80002, x17, x23, 32, x9)

inst_5:
// rs1==x19, rs2==x18, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h1_val == -33, rs1_h1_val == 4096, rs1_h0_val == 2048, rs2_h0_val == 2048
// opcode: kstsa16 ; op1:x19; op2:x18; dest:x6; op1val:0x10000800;  op2val:0xffdf0800
TEST_PKRR_OP(kstsa16, x6, x19, x18, 0x00000000, 0x10000800, 0xffdf0800, x19, x23, 40, x9)

inst_6:
// rs1==x29, rs2==x0, rd==x21, rs2_h1_val == -21846, rs2_h0_val == 32767, rs1_h1_val == 2
// opcode: kstsa16 ; op1:x29; op2:x0; dest:x21; op1val:0x020009;  op2val:0xaaaa7fff
TEST_PKRR_OP(kstsa16, x21, x29, x0, 0x00000000, 0x020009, 0xaaaa7fff, x29, x23, 48, x9)

inst_7:
// rs1==x3, rs2==x7, rd==x26, rs2_h1_val == 21845, rs1_h0_val == 0
// opcode: kstsa16 ; op1:x3; op2:x7; dest:x26; op1val:0x090000;  op2val:0x55557fff
TEST_PKRR_OP(kstsa16, x26, x3, x7, 0x00000000, 0x090000, 0x55557fff, x3, x23, 56, x9)

inst_8:
// rs1==x14, rs2==x6, rd==x3, rs2_h1_val == 32767, 
// opcode: kstsa16 ; op1:x14; op2:x6; dest:x3; op1val:0xfff90005;  op2val:0x7ffffffa
TEST_PKRR_OP(kstsa16, x3, x14, x6, 0x00000000, 0xfff90005, 0x7ffffffa, x14, x23, 64, x9)

inst_9:
// rs1==x1, rs2==x14, rd==x24, rs2_h1_val == -16385, rs2_h0_val == 1024, rs1_h1_val == 16, rs1_h0_val == -9
// opcode: kstsa16 ; op1:x1; op2:x14; dest:x24; op1val:0x10fff7;  op2val:0xbfff0400
TEST_PKRR_OP(kstsa16, x24, x1, x14, 0x00000000, 0x10fff7, 0xbfff0400, x1, x23, 72, x9)

inst_10:
// rs1==x18, rs2==x2, rd==x29, rs2_h1_val == -8193, rs2_h0_val == 4, rs1_h1_val == 2048
// opcode: kstsa16 ; op1:x18; op2:x2; dest:x29; op1val:0x800fff7;  op2val:0xdfff0004
TEST_PKRR_OP(kstsa16, x29, x18, x2, 0x00000000, 0x800fff7, 0xdfff0004, x18, x23, 80, x9)

inst_11:
// rs1==x27, rs2==x29, rd==x4, rs2_h1_val == -4097, rs1_h1_val == 64
// opcode: kstsa16 ; op1:x27; op2:x29; dest:x4; op1val:0x400006;  op2val:0xefffc000
TEST_PKRR_OP(kstsa16, x4, x27, x29, 0x00000000, 0x400006, 0xefffc000, x27, x23, 88, x9)

inst_12:
// rs1==x12, rs2==x15, rd==x28, rs2_h1_val == -2049, rs1_h0_val == 512, rs1_h1_val == -4097, rs2_h0_val == 16
// opcode: kstsa16 ; op1:x12; op2:x15; dest:x28; op1val:0xefff0200;  op2val:0xf7ff0010
TEST_PKRR_OP(kstsa16, x28, x12, x15, 0x00000000, 0xefff0200, 0xf7ff0010, x12, x23, 96, x9)

inst_13:
// rs1==x8, rs2==x26, rd==x12, rs2_h1_val == -1025, rs1_h1_val == -1025, rs2_h0_val == -2049
// opcode: kstsa16 ; op1:x8; op2:x26; dest:x12; op1val:0xfbfffff7;  op2val:0xfbfff7ff
TEST_PKRR_OP(kstsa16, x12, x8, x26, 0x00000000, 0xfbfffff7, 0xfbfff7ff, x8, x23, 104, x9)

inst_14:
// rs1==x22, rs2==x16, rd==x17, rs2_h1_val == -513, rs2_h0_val == -513, rs1_h0_val == 8192, rs1_h1_val == 512
// opcode: kstsa16 ; op1:x22; op2:x16; dest:x17; op1val:0x2002000;  op2val:0xfdfffdff
TEST_PKRR_OP(kstsa16, x17, x22, x16, 0x00000000, 0x2002000, 0xfdfffdff, x22, x23, 112, x9)

inst_15:
// rs1==x2, rs2==x22, rd==x0, rs2_h1_val == -257, rs2_h0_val == 512
// opcode: kstsa16 ; op1:x2; op2:x22; dest:x0; op1val:0x2000fff6;  op2val:0xfeff0200
TEST_PKRR_OP(kstsa16, x0, x2, x22, 0x00000000, 0x2000fff6, 0xfeff0200, x2, x23, 120, x5)

inst_16:
// rs1==x11, rs2==x21, rd==x9, rs2_h1_val == -129, rs1_h1_val == -33, rs1_h0_val == -513
// opcode: kstsa16 ; op1:x11; op2:x21; dest:x9; op1val:0xffdffdff;  op2val:0xff7fffdf
TEST_PKRR_OP(kstsa16, x9, x11, x21, 0x00000000, 0xffdffdff, 0xff7fffdf, x11, x23, 128, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x10, rs2==x4, rd==x11, rs2_h1_val == -65, rs1_h0_val == -5
// opcode: kstsa16 ; op1:x10; op2:x4; dest:x11; op1val:0x800fffb;  op2val:0xffbfffdf
TEST_PKRR_OP(kstsa16, x11, x10, x4, 0x00000000, 0x800fffb, 0xffbfffdf, x10, x1, 0, x5)

inst_18:
// rs1==x23, rs2==x24, rd==x22, rs2_h1_val == -17, rs2_h0_val == -3, rs1_h0_val == 32767
// opcode: kstsa16 ; op1:x23; op2:x24; dest:x22; op1val:0x097fff;  op2val:0xffeffffd
TEST_PKRR_OP(kstsa16, x22, x23, x24, 0x00000000, 0x097fff, 0xffeffffd, x23, x1, 8, x5)

inst_19:
// rs1==x16, rs2==x12, rd==x8, rs2_h1_val == -9, rs2_h0_val == -5, rs1_h1_val == -21846
// opcode: kstsa16 ; op1:x16; op2:x12; dest:x8; op1val:0xaaaa0007;  op2val:0xfff7fffb
TEST_PKRR_OP(kstsa16, x8, x16, x12, 0x00000000, 0xaaaa0007, 0xfff7fffb, x16, x1, 16, x5)

inst_20:
// rs1==x7, rs2==x8, rd==x14, rs2_h1_val == -5, rs2_h0_val == -9
// opcode: kstsa16 ; op1:x7; op2:x8; dest:x14; op1val:0xfff77fff;  op2val:0xfffbfff7
TEST_PKRR_OP(kstsa16, x14, x7, x8, 0x00000000, 0xfff77fff, 0xfffbfff7, x7, x1, 24, x5)

inst_21:
// rs1==x15, rs2==x30, rd==x10, rs2_h1_val == -3, rs1_h1_val == -8193, rs1_h0_val == 64
// opcode: kstsa16 ; op1:x15; op2:x30; dest:x10; op1val:0xdfff0040;  op2val:0xfffdfffd
TEST_PKRR_OP(kstsa16, x10, x15, x30, 0x00000000, 0xdfff0040, 0xfffdfffd, x15, x1, 32, x5)

inst_22:
// rs1==x30, rs2==x3, rd==x15, rs2_h1_val == -2, rs1_h0_val == -3, rs1_h1_val == -5
// opcode: kstsa16 ; op1:x30; op2:x3; dest:x15; op1val:0xfffbfffd;  op2val:0xfffefffc
TEST_PKRR_OP(kstsa16, x15, x30, x3, 0x00000000, 0xfffbfffd, 0xfffefffc, x30, x1, 40, x5)

inst_23:
// rs1==x26, rs2==x19, rd==x13, rs2_h1_val == -32768, rs1_h1_val == -16385, rs1_h0_val == -257, rs2_h0_val == 128
// opcode: kstsa16 ; op1:x26; op2:x19; dest:x13; op1val:0xbffffeff;  op2val:0x80000080
TEST_PKRR_OP(kstsa16, x13, x26, x19, 0x00000000, 0xbffffeff, 0x80000080, x26, x1, 48, x5)

inst_24:
// rs1==x4, rs2==x17, rd==x27, rs2_h1_val == 16384, rs1_h0_val == 128
// opcode: kstsa16 ; op1:x4; op2:x17; dest:x27; op1val:0xdfff0080;  op2val:0x40003fff
TEST_PKRR_OP(kstsa16, x27, x4, x17, 0x00000000, 0xdfff0080, 0x40003fff, x4, x1, 56, x5)

inst_25:
// rs1==x24, rs2==x23, rd==x7, rs2_h1_val == 8192, rs1_h0_val == 32
// opcode: kstsa16 ; op1:x24; op2:x23; dest:x7; op1val:0xbfff0020;  op2val:0x2000fdff
TEST_PKRR_OP(kstsa16, x7, x24, x23, 0x00000000, 0xbfff0020, 0x2000fdff, x24, x1, 64, x5)

inst_26:
// rs1==x25, rs2==x20, rd==x30, rs2_h1_val == 4096, rs1_h1_val == 16384, rs2_h0_val == -21846
// opcode: kstsa16 ; op1:x25; op2:x20; dest:x30; op1val:0x4000fffb;  op2val:0x1000aaaa
TEST_PKRR_OP(kstsa16, x30, x25, x20, 0x00000000, 0x4000fffb, 0x1000aaaa, x25, x1, 72, x5)

inst_27:
// rs1==x6, rs2==x31, rd==x19, rs2_h1_val == 2048, rs1_h1_val == -1, rs2_h0_val == -1
// opcode: kstsa16 ; op1:x6; op2:x31; dest:x19; op1val:0xffff0005;  op2val:0x800ffff
TEST_PKRR_OP(kstsa16, x19, x6, x31, 0x00000000, 0xffff0005, 0x800ffff, x6, x1, 80, x5)

inst_28:
// rs1==x13, rs2==x9, rd==x25, rs2_h1_val == 1024, rs1_h1_val == -2049, rs2_h0_val == -65, rs1_h0_val == -33
// opcode: kstsa16 ; op1:x13; op2:x9; dest:x25; op1val:0xf7ffffdf;  op2val:0x400ffbf
TEST_PKRR_OP(kstsa16, x25, x13, x9, 0x00000000, 0xf7ffffdf, 0x400ffbf, x13, x1, 88, x2)

inst_29:
// rs1==x9, rs2==x11, rd==x23, rs2_h1_val == 256, rs1_h0_val == -2
// opcode: kstsa16 ; op1:x9; op2:x11; dest:x23; op1val:0xfff7fffe;  op2val:0x100ffff
TEST_PKRR_OP(kstsa16, x23, x9, x11, 0x00000000, 0xfff7fffe, 0x100ffff, x9, x1, 96, x2)

inst_30:
// rs1==x21, rs2==x27, rd==x20, rs1_h0_val == -1025, rs2_h1_val == 32
// opcode: kstsa16 ; op1:x21; op2:x27; dest:x20; op1val:0x09fbff;  op2val:0x20fff9
TEST_PKRR_OP(kstsa16, x20, x21, x27, 0x00000000, 0x09fbff, 0x20fff9, x21, x1, 104, x2)

inst_31:
// rs1==x0, rs2==x25, rd==x18, rs1_h0_val == -129, rs1_h1_val == -3
// opcode: kstsa16 ; op1:x0; op2:x25; dest:x18; op1val:0xfffdff7f;  op2val:0xffbf0200
TEST_PKRR_OP(kstsa16, x18, x0, x25, 0x00000000, 0xfffdff7f, 0xffbf0200, x0, x1, 112, x2)

inst_32:
// rs1_h0_val == -65, rs2_h0_val == 16384
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffbf;  op2val:0xefff4000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfffdffbf, 0xefff4000, x30, x1, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs1_h0_val == -17, rs2_h1_val == 64, rs2_h0_val == -8193
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef;  op2val:0x40dfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x200ffef, 0x40dfff, x30, x1, 0, x2)

inst_34:
// rs1_h0_val == 16384, rs1_h1_val == 128
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x804000;  op2val:0xfbffffbf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x804000, 0xfbffffbf, x30, x1, 8, x2)

inst_35:
// rs1_h0_val == 4096, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x021000;  op2val:0xf7fffff9
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x021000, 0xf7fffff9, x30, x1, 16, x2)

inst_36:
// rs1_h0_val == 1024, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x080400;  op2val:0xfffbffdf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x080400, 0xfffbffdf, x30, x1, 24, x2)

inst_37:
// rs1_h0_val == 256, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000100;  op2val:0x4000003
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x20000100, 0x4000003, x30, x1, 32, x2)

inst_38:
// rs1_h0_val == 16, rs1_h1_val == -65
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0010;  op2val:0xff7ffffe
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xffbf0010, 0xff7ffffe, x30, x1, 40, x2)

inst_39:
// rs1_h0_val == 4, rs1_h1_val == 1024, rs2_h0_val == 8192
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000004;  op2val:0x072000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x4000004, 0x072000, x30, x1, 48, x2)

inst_40:
// rs1_h0_val == 2, rs2_h0_val == 0, rs1_h1_val == 32767
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002;  op2val:0xfff90000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x7fff0002, 0xfff90000, x30, x1, 56, x2)

inst_41:
// rs1_h0_val == 1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60001;  op2val:0xf7ff0400
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff60001, 0xf7ff0400, x30, x1, 64, x2)

inst_42:
// rs1_h0_val == -1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0xfeff0080
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfbffffff, 0xfeff0080, x30, x1, 72, x2)

inst_43:
// rs2_h1_val == 128, rs1_h1_val == 21845
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55557fff;  op2val:0x80fffb
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x55557fff, 0x80fffb, x30, x1, 80, x2)

inst_44:
// rs2_h1_val == 16, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0002;  op2val:0x100010
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xf7ff0002, 0x100010, x30, x1, 88, x2)

inst_45:
// rs2_h1_val == 8, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60100;  op2val:0x080080
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff60100, 0x080080, x30, x1, 96, x2)

inst_46:
// rs2_h1_val == 4, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fbff;  op2val:0x04aaaa
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff9fbff, 0x04aaaa, x30, x1, 104, x2)

inst_47:
// rs2_h1_val == 2, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdf;  op2val:0x020004
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff6ffdf, 0x020004, x30, x1, 112, x2)

inst_48:
// rs2_h0_val == -32768, rs1_h1_val == -129
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0100;  op2val:0xfffd8000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xff7f0100, 0xfffd8000, x30, x1, 120, x2)

inst_49:
// rs2_h0_val == 4096, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffef;  op2val:0x201000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfeffffef, 0x201000, x30, x1, 128, x2)

inst_50:
// rs2_h0_val == 64, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000009;  op2val:0xdfff0040
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x20000009, 0xdfff0040, x30, x1, 136, x2)

inst_51:
// rs2_h0_val == 32, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060000;  op2val:0xfffb0020
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x060000, 0xfffb0020, x30, x1, 144, x2)

inst_52:
// rs2_h0_val == 8, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090009;  op2val:0x050008
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x090009, 0x050008, x30, x1, 152, x2)

inst_53:
// rs2_h0_val == 1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfdff;  op2val:0x2000001
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfffdfdff, 0x2000001, x30, x1, 160, x2)

inst_54:
// rs1_h1_val == -513, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0007;  op2val:0x2000fffd
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfdff0007, 0x2000fffd, x30, x1, 168, x2)

inst_55:
// rs2_h0_val == -17, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb;  op2val:0xdfffffef
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xffdffffb, 0xdfffffef, x30, x1, 176, x2)

inst_56:
// rs1_h1_val == -17, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0x7fff0004
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xffefffff, 0x7fff0004, x30, x1, 184, x2)

inst_57:
// rs2_h0_val == -257, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90002;  op2val:0x02feff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff90002, 0x02feff, x30, x1, 192, x2)

inst_58:
// rs1_h1_val == -2, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffd;  op2val:0xfdffffef
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfffefffd, 0xfdffffef, x30, x1, 200, x2)

inst_59:
// rs1_h1_val == -32768, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf;  op2val:0xfffefff8
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x8000ffdf, 0xfffefff8, x30, x1, 208, x2)

inst_60:
// rs2_h1_val == 1, rs1_h1_val == 1
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01aaaa;  op2val:0x010008
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x01aaaa, 0x010008, x30, x1, 216, x2)

inst_61:
// rs1_h1_val == 256, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffff;  op2val:0x2000080
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x100ffff, 0x2000080, x30, x1, 224, x2)

inst_62:
// rs2_h1_val == 0, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060020;  op2val:0x008000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x060020, 0x008000, x30, x1, 232, x2)

inst_63:
// rs2_h1_val == -1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffe;  op2val:0xffff0100
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff8fffe, 0xffff0100, x30, x1, 240, x2)

inst_64:
// rs1_h1_val == 32, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffdf;  op2val:0x3ffffff6
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x20ffdf, 0x3ffffff6, x30, x1, 248, x2)

inst_65:
// rs2_h0_val == 21845, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffd;  op2val:0xffff5555
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x05fffd, 0xffff5555, x30, x1, 256, x2)

inst_66:
// rs2_h0_val == -16385, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004;  op2val:0x3fffbfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x20000004, 0x3fffbfff, x30, x1, 264, x2)

inst_67:
// rs1_h1_val == 4, rs1_h0_val == -8193
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04dfff;  op2val:0x40000006
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x04dfff, 0x40000006, x30, x1, 272, x2)

inst_68:
// rs2_h0_val == -4097, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff;  op2val:0x200efff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff7fbff, 0x200efff, x30, x1, 280, x2)

inst_69:
// rs1_h1_val == 0, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00c000;  op2val:0xfffdffff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x00c000, 0xfffdffff, x30, x1, 288, x2)

inst_70:
// rs2_h0_val == -1025, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0006;  op2val:0x10fbff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x7fff0006, 0x10fbff, x30, x1, 296, x2)

inst_71:
// rs1_h0_val == 21845, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1005555;  op2val:0x200fffb
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x1005555, 0x200fffb, x30, x1, 304, x2)

inst_72:
// rs2_h0_val == -129, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x208000;  op2val:0x40ff7f
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x208000, 0x40ff7f, x30, x1, 312, x2)

inst_73:
// rs1_h0_val == -16385, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffbfff;  op2val:0x09fffa
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xf7ffbfff, 0x09fffa, x30, x1, 320, x2)

inst_74:
// rs1_h0_val == -4097, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff;  op2val:0xfff80800
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff7efff, 0xfff80800, x30, x1, 328, x2)

inst_75:
// rs1_h0_val == -2049, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ff;  op2val:0xfff74000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfff8f7ff, 0xfff74000, x30, x1, 336, x2)

inst_76:
// rs2_h1_val == -21846, rs2_h0_val == 32767, rs1_h1_val == 2
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x020009;  op2val:0xaaaa7fff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x020009, 0xaaaa7fff, x30, x1, 344, x2)

inst_77:
// rs2_h1_val == -257, rs2_h0_val == 512
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff6;  op2val:0xfeff0200
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0x2000fff6, 0xfeff0200, x30, x1, 352, x2)

inst_78:
// rs1_h0_val == -129, rs1_h1_val == -3
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f;  op2val:0xffbf0200
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x00000000, 0xfffdff7f, 0xffbf0200, x30, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x23_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x23_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
