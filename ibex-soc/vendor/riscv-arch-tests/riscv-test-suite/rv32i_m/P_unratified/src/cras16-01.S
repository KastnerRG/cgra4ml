
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cras16 instruction of the RISC-V RV32PZicsr extension for the cras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",cras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x0, rd==x25, rs1_h0_val == -32768, rs2_h0_val == -3, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -21846, rs1_h1_val == -21846
// opcode: cras16 ; op1:x7; op2:x0; dest:x25; op1val:0xaaaa8000;  op2val:0xaaaafffd
TEST_RR_OP(cras16, x25, x7, x0, 0x00000000, 0xaaaa8000, 0xaaaafffd, x3, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x6, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 32, rs1_h1_val == 2048, rs2_h0_val == -4097, rs1_h0_val == -2049
// opcode: cras16 ; op1:x30; op2:x30; dest:x6; op1val:0x800f7ff;  op2val:0x20efff
TEST_RR_OP(cras16, x6, x30, x30, 0x00000000, 0x800f7ff, 0x20efff, x3, 4, x9)

inst_2:
// rs1 == rd != rs2, rs1==x5, rs2==x20, rd==x5, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 0, rs1_h1_val == -257, rs1_h0_val == 1024
// opcode: cras16 ; op1:x5; op2:x20; dest:x5; op1val:0xfeff0400;  op2val:0x090000
TEST_RR_OP(cras16, x5, x5, x20, 0x00000000, 0xfeff0400, 0x090000, x3, 8, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -8193, rs2_h0_val == -129
// opcode: cras16 ; op1:x28; op2:x28; dest:x28; op1val:0x09fffc;  op2val:0xdfffff7f
TEST_RR_OP(cras16, x28, x28, x28, 0x00000000, 0x09fffc, 0xdfffff7f, x3, 12, x9)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x4, rd==x4, rs1_h0_val == rs2_h0_val, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs1_h1_val == 4, rs2_h1_val == -513, rs1_h0_val == 4
// opcode: cras16 ; op1:x19; op2:x4; dest:x4; op1val:0x040004;  op2val:0xfdff0004
TEST_RR_OP(cras16, x4, x19, x4, 0x00000000, 0x040004, 0xfdff0004, x3, 16, x9)

inst_5:
// rs1==x20, rs2==x16, rd==x1, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -1, rs1_h1_val == 16384
// opcode: cras16 ; op1:x20; op2:x16; dest:x1; op1val:0x4000fff6;  op2val:0xffff0006
TEST_RR_OP(cras16, x1, x20, x16, 0x00000000, 0x4000fff6, 0xffff0006, x3, 20, x9)

inst_6:
// rs1==x27, rs2==x23, rd==x14, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -4097
// opcode: cras16 ; op1:x27; op2:x23; dest:x14; op1val:0x050007;  op2val:0xeffffff6
TEST_RR_OP(cras16, x14, x27, x23, 0x00000000, 0x050007, 0xeffffff6, x3, 24, x9)

inst_7:
// rs1==x18, rs2==x31, rd==x7, rs2_h1_val == 21845, rs2_h0_val == -2, rs1_h1_val == -3, rs1_h0_val == -4097
// opcode: cras16 ; op1:x18; op2:x31; dest:x7; op1val:0xfffdefff;  op2val:0x5555fffe
TEST_RR_OP(cras16, x7, x18, x31, 0x00000000, 0xfffdefff, 0x5555fffe, x3, 28, x9)

inst_8:
// rs1==x8, rs2==x5, rd==x24, rs2_h1_val == 32767, rs1_h1_val == -5, rs2_h0_val == -33
// opcode: cras16 ; op1:x8; op2:x5; dest:x24; op1val:0xfffb0007;  op2val:0x7fffffdf
TEST_RR_OP(cras16, x24, x8, x5, 0x00000000, 0xfffb0007, 0x7fffffdf, x3, 32, x9)

inst_9:
// rs1==x17, rs2==x21, rd==x31, rs2_h1_val == -16385, rs1_h0_val == -17
// opcode: cras16 ; op1:x17; op2:x21; dest:x31; op1val:0xfeffffef;  op2val:0xbffffff6
TEST_RR_OP(cras16, x31, x17, x21, 0x00000000, 0xfeffffef, 0xbffffff6, x3, 36, x9)

inst_10:
// rs1==x0, rs2==x10, rd==x30, rs2_h1_val == -2049, rs2_h0_val == -16385, rs1_h1_val == 0
// opcode: cras16 ; op1:x0; op2:x10; dest:x30; op1val:0x000003;  op2val:0xf7ffbfff
TEST_RR_OP(cras16, x30, x0, x10, 0x00000000, 0x000003, 0xf7ffbfff, x3, 40, x9)

inst_11:
// rs1==x2, rs2==x14, rd==x26, rs2_h1_val == -1025, rs1_h0_val == 32767, rs2_h0_val == -1
// opcode: cras16 ; op1:x2; op2:x14; dest:x26; op1val:0x40007fff;  op2val:0xfbffffff
TEST_RR_OP(cras16, x26, x2, x14, 0x00000000, 0x40007fff, 0xfbffffff, x3, 44, x9)

inst_12:
// rs1==x15, rs2==x12, rd==x29, rs2_h1_val == -257, rs1_h0_val == 16
// opcode: cras16 ; op1:x15; op2:x12; dest:x29; op1val:0xfeff0010;  op2val:0xfeff0007
TEST_RR_OP(cras16, x29, x15, x12, 0x00000000, 0xfeff0010, 0xfeff0007, x3, 48, x9)

inst_13:
// rs1==x21, rs2==x22, rd==x16, rs2_h1_val == -129, rs1_h0_val == -129
// opcode: cras16 ; op1:x21; op2:x22; dest:x16; op1val:0xfffdff7f;  op2val:0xff7f0003
TEST_RR_OP(cras16, x16, x21, x22, 0x00000000, 0xfffdff7f, 0xff7f0003, x3, 52, x14)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_14:
// rs1==x24, rs2==x7, rd==x20, rs2_h1_val == -65, rs1_h0_val == -21846, rs1_h1_val == 2
// opcode: cras16 ; op1:x24; op2:x7; dest:x20; op1val:0x02aaaa;  op2val:0xffbf0000
TEST_RR_OP(cras16, x20, x24, x7, 0x00000000, 0x02aaaa, 0xffbf0000, x5, 0, x14)

inst_15:
// rs1==x11, rs2==x18, rd==x12, rs2_h1_val == -33, rs1_h0_val == 21845
// opcode: cras16 ; op1:x11; op2:x18; dest:x12; op1val:0x065555;  op2val:0xffdffff8
TEST_RR_OP(cras16, x12, x11, x18, 0x00000000, 0x065555, 0xffdffff8, x5, 4, x14)

inst_16:
// rs1==x13, rs2==x6, rd==x11, rs2_h1_val == -17, rs1_h0_val == 2048, rs2_h0_val == -2049
// opcode: cras16 ; op1:x13; op2:x6; dest:x11; op1val:0x000800;  op2val:0xffeff7ff
TEST_RR_OP(cras16, x11, x13, x6, 0x00000000, 0x000800, 0xffeff7ff, x5, 8, x14)

inst_17:
// rs1==x1, rs2==x8, rd==x18, rs2_h1_val == -9, rs1_h1_val == 64, rs2_h0_val == 128
// opcode: cras16 ; op1:x1; op2:x8; dest:x18; op1val:0x40fff8;  op2val:0xfff70080
TEST_RR_OP(cras16, x18, x1, x8, 0x00000000, 0x40fff8, 0xfff70080, x5, 12, x14)

inst_18:
// rs1==x4, rs2==x26, rd==x10, rs2_h1_val == -5, rs1_h1_val == -65, rs2_h0_val == -65, rs1_h0_val == -5
// opcode: cras16 ; op1:x4; op2:x26; dest:x10; op1val:0xffbffffb;  op2val:0xfffbffbf
TEST_RR_OP(cras16, x10, x4, x26, 0x00000000, 0xffbffffb, 0xfffbffbf, x5, 16, x14)

inst_19:
// rs1==x23, rs2==x11, rd==x0, rs2_h1_val == -3, rs2_h0_val == -513
// opcode: cras16 ; op1:x23; op2:x11; dest:x0; op1val:0xfffbfff6;  op2val:0xfffdfdff
TEST_RR_OP(cras16, x0, x23, x11, 0x00000000, 0xfffbfff6, 0xfffdfdff, x5, 20, x14)

inst_20:
// rs1==x9, rs2==x3, rd==x21, rs2_h1_val == -2, rs2_h0_val == 32767, rs1_h1_val == -513
// opcode: cras16 ; op1:x9; op2:x3; dest:x21; op1val:0xfdff0009;  op2val:0xfffe7fff
TEST_RR_OP(cras16, x21, x9, x3, 0x00000000, 0xfdff0009, 0xfffe7fff, x5, 24, x14)

inst_21:
// rs1==x26, rs2==x29, rd==x3, rs2_h1_val == -32768, rs1_h0_val == 8192, rs2_h0_val == -8193
// opcode: cras16 ; op1:x26; op2:x29; dest:x3; op1val:0x002000;  op2val:0x8000dfff
TEST_RR_OP(cras16, x3, x26, x29, 0x00000000, 0x002000, 0x8000dfff, x5, 28, x14)

inst_22:
// rs1==x6, rs2==x17, rd==x15, rs2_h1_val == 16384, rs1_h1_val == -16385, rs1_h0_val == -65
// opcode: cras16 ; op1:x6; op2:x17; dest:x15; op1val:0xbfffffbf;  op2val:0x4000fdff
TEST_RR_OP(cras16, x15, x6, x17, 0x00000000, 0xbfffffbf, 0x4000fdff, x5, 32, x14)

inst_23:
// rs1==x3, rs2==x19, rd==x17, rs2_h1_val == 8192, rs1_h1_val == -17
// opcode: cras16 ; op1:x3; op2:x19; dest:x17; op1val:0xffeffff8;  op2val:0x20000009
TEST_RR_OP(cras16, x17, x3, x19, 0x00000000, 0xffeffff8, 0x20000009, x5, 36, x14)

inst_24:
// rs1==x29, rs2==x27, rd==x9, rs2_h1_val == 4096, rs2_h0_val == -5, rs1_h0_val == -2
// opcode: cras16 ; op1:x29; op2:x27; dest:x9; op1val:0x4000fffe;  op2val:0x1000fffb
TEST_RR_OP(cras16, x9, x29, x27, 0x00000000, 0x4000fffe, 0x1000fffb, x5, 40, x14)

inst_25:
// rs1==x10, rs2==x13, rd==x2, rs2_h1_val == 2048, rs1_h0_val == 512, rs2_h0_val == -257, rs1_h1_val == 4096
// opcode: cras16 ; op1:x10; op2:x13; dest:x2; op1val:0x10000200;  op2val:0x800feff
TEST_RR_OP(cras16, x2, x10, x13, 0x00000000, 0x10000200, 0x800feff, x5, 44, x14)

inst_26:
// rs1==x25, rs2==x24, rd==x19, rs2_h1_val == 1024, rs2_h0_val == -1025
// opcode: cras16 ; op1:x25; op2:x24; dest:x19; op1val:0x070004;  op2val:0x400fbff
TEST_RR_OP(cras16, x19, x25, x24, 0x00000000, 0x070004, 0x400fbff, x5, 48, x14)

inst_27:
// rs1==x16, rs2==x25, rd==x13, rs2_h1_val == 512, rs1_h0_val == 64, rs1_h1_val == -2
// opcode: cras16 ; op1:x16; op2:x25; dest:x13; op1val:0xfffe0040;  op2val:0x2000004
TEST_RR_OP(cras16, x13, x16, x25, 0x00000000, 0xfffe0040, 0x2000004, x5, 52, x3)

inst_28:
// rs1==x14, rs2==x1, rd==x8, rs2_h1_val == 256, 
// opcode: cras16 ; op1:x14; op2:x1; dest:x8; op1val:0x050005;  op2val:0x100feff
TEST_RR_OP(cras16, x8, x14, x1, 0x00000000, 0x050005, 0x100feff, x5, 56, x3)

inst_29:
// rs1==x12, rs2==x2, rd==x27, rs2_h1_val == 128, rs1_h0_val == 0
// opcode: cras16 ; op1:x12; op2:x2; dest:x27; op1val:0x3fff0000;  op2val:0x800080
TEST_RR_OP(cras16, x27, x12, x2, 0x00000000, 0x3fff0000, 0x800080, x5, 60, x3)

inst_30:
// rs1==x31, rs2==x15, rd==x22, rs1_h0_val == -1025, rs1_h1_val == -1025
// opcode: cras16 ; op1:x31; op2:x15; dest:x22; op1val:0xfbfffbff;  op2val:0x100dfff
TEST_RR_OP(cras16, x22, x31, x15, 0x00000000, 0xfbfffbff, 0x100dfff, x5, 64, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x22, rs2==x9, rd==x23, rs1_h0_val == -513, 
// opcode: cras16 ; op1:x22; op2:x9; dest:x23; op1val:0xc000fdff;  op2val:0xfffdfffc
TEST_RR_OP(cras16, x23, x22, x9, 0x00000000, 0xc000fdff, 0xfffdfffc, x1, 0, x3)

inst_32:
// rs1_h0_val == -257, rs1_h1_val == 32, rs2_h0_val == 16384
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20feff;  op2val:0xfffd4000
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x20feff, 0xfffd4000, x1, 4, x3)

inst_33:
// rs1_h0_val == -33, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffdf;  op2val:0xfffe3fff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x00ffdf, 0xfffe3fff, x1, 8, x3)

inst_34:
// rs1_h0_val == -9, rs2_h0_val == 21845, rs1_h1_val == 8
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff7;  op2val:0x8005555
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x08fff7, 0x8005555, x1, 12, x3)

inst_35:
// rs1_h0_val == -3, rs1_h1_val == -8193, rs2_h0_val == -21846
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffd;  op2val:0xc000aaaa
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xdffffffd, 0xc000aaaa, x1, 16, x3)

inst_36:
// rs1_h0_val == 16384, rs2_h0_val == 2048
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef4000;  op2val:0x060800
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xffef4000, 0x060800, x1, 20, x3)

inst_37:
// rs1_h0_val == 4096, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x061000;  op2val:0x030800
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x061000, 0x030800, x1, 24, x3)

inst_38:
// rs1_h0_val == 256, rs2_h0_val == -32768
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x040100;  op2val:0xfff68000
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x040100, 0xfff68000, x1, 28, x3)

inst_39:
// rs1_h0_val == 128, rs2_h0_val == 16
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x050080;  op2val:0x090010
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x050080, 0x090010, x1, 32, x3)

inst_40:
// rs1_h0_val == 32, rs2_h0_val == 8192
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0020;  op2val:0x2002000
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xfffa0020, 0x2002000, x1, 36, x3)

inst_41:
// rs1_h0_val == 8, rs1_h1_val == -4097
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0008;  op2val:0xfdffff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xefff0008, 0xfdffff7f, x1, 40, x3)

inst_42:
// rs1_h0_val == 2, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002;  op2val:0xfffcfdff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xaaaa0002, 0xfffcfdff, x1, 44, x3)

inst_43:
// rs1_h0_val == 1, rs1_h1_val == -1, rs2_h1_val == 4
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0001;  op2val:0x04fffd
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xffff0001, 0x04fffd, x1, 48, x3)

inst_44:
// rs1_h0_val == -1, rs2_h1_val == 16, rs2_h0_val == -9
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0x10fff7
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xfffdffff, 0x10fff7, x1, 52, x3)

inst_45:
// rs2_h1_val == 64, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x050800;  op2val:0x403fff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x050800, 0x403fff, x1, 56, x3)

inst_46:
// rs2_h0_val == 4096, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0x3fff1000
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xffbf0100, 0x3fff1000, x1, 60, x3)

inst_47:
// rs2_h0_val == 1024, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff3fff;  op2val:0xffdf0400
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xdfff3fff, 0xffdf0400, x1, 64, x3)

inst_48:
// rs2_h0_val == 512, rs1_h0_val == -16385, rs1_h1_val == 1024
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400bfff;  op2val:0xf7ff0200
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x400bfff, 0xf7ff0200, x1, 68, x3)

inst_49:
// rs2_h0_val == 256, rs1_h1_val == 512
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffc;  op2val:0xefff0100
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x200fffc, 0xefff0100, x1, 72, x3)

inst_50:
// rs2_h0_val == 64, rs1_h1_val == -32768
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000002;  op2val:0xfffa0040
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x80000002, 0xfffa0040, x1, 76, x3)

inst_51:
// rs2_h0_val == 32, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffbf;  op2val:0xfbff0020
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xaaaaffbf, 0xfbff0020, x1, 80, x3)

inst_52:
// rs2_h0_val == 8, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x020005;  op2val:0xf7ff0008
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x020005, 0xf7ff0008, x1, 84, x3)

inst_53:
// rs2_h0_val == 2, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff;  op2val:0x800002
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xffeffdff, 0x800002, x1, 88, x3)

inst_54:
// rs2_h0_val == 1, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff8;  op2val:0x40000001
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x09fff8, 0x40000001, x1, 92, x3)

inst_55:
// rs1_h1_val == 21845, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550005;  op2val:0xfffb0002
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x55550005, 0xfffb0002, x1, 96, x3)

inst_56:
// rs1_h1_val == 32767, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0020;  op2val:0xfff8fff9
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x7fff0020, 0xfff8fff9, x1, 100, x3)

inst_57:
// rs1_h1_val == -33, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0006;  op2val:0xfffdfbff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xffdf0006, 0xfffdfbff, x1, 104, x3)

inst_58:
// rs1_h1_val == -9, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70010;  op2val:0xffbf0200
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xfff70010, 0xffbf0200, x1, 108, x3)

inst_59:
// rs1_h1_val == 8192, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004;  op2val:0x400ff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x20000004, 0x400ff7f, x1, 112, x3)

inst_60:
// rs2_h1_val == 8, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffc;  op2val:0x08fffa
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x4000fffc, 0x08fffa, x1, 116, x3)

inst_61:
// rs2_h1_val == 2, rs1_h1_val == -129
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0006;  op2val:0x02ff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xff7f0006, 0x02ff7f, x1, 120, x3)

inst_62:
// rs2_h1_val == 1, rs1_h1_val == 16
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100007;  op2val:0x010020
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x100007, 0x010020, x1, 124, x3)

inst_63:
// rs1_h1_val == 256, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000009;  op2val:0x102000
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x1000009, 0x102000, x1, 128, x3)

inst_64:
// rs1_h1_val == 1, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x012000;  op2val:0xfffdfffe
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x012000, 0xfffdfffe, x1, 132, x3)

inst_65:
// rs2_h1_val == 0, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc2000;  op2val:0x00ff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xfffc2000, 0x00ff7f, x1, 136, x3)

inst_66:
// rs1_h1_val == -2049, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0003;  op2val:0x40ff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xf7ff0003, 0x40ff7f, x1, 140, x3)

inst_67:
// rs1_h0_val == -8193, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff;  op2val:0xfffcfffe
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x20dfff, 0xfffcfffe, x1, 144, x3)

inst_68:
// rs2_h0_val == -17, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0100;  op2val:0xdfffffef
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xf7ff0100, 0xdfffffef, x1, 148, x3)

inst_69:
// rs1_h1_val == 128, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff7;  op2val:0xfdff3fff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x80fff7, 0xfdff3fff, x1, 152, x3)

inst_70:
// rs1_h0_val == -32768, rs2_h0_val == -3, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -21846, rs1_h1_val == -21846
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa8000;  op2val:0xaaaafffd
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0xaaaa8000, 0xaaaafffd, x1, 156, x3)

inst_71:
// rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 32, rs1_h1_val == 2048, rs2_h0_val == -4097, rs1_h0_val == -2049
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800f7ff;  op2val:0x20efff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x800f7ff, 0x20efff, x1, 160, x3)

inst_72:
// rs2_h1_val == -2049, rs2_h0_val == -16385, rs1_h1_val == 0
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x000003;  op2val:0xf7ffbfff
TEST_RR_OP(cras16, x31, x30, x29, 0x00000000, 0x000003, 0xf7ffbfff, x1, 164, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 42*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
