
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmple8 instruction of the RISC-V RV32PZicsr extension for the scmple8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmple8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x2, rd==x24, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs2_b0_val == 16, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b3_val == -33, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b1_val == 4, rs1_b1_val == -86, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b2_val == -2
// opcode: scmple8 ; op1:x26; op2:x2; dest:x24; op1val:0xdf03aa80;  op2val:0xf8fe0410
TEST_RR_OP(scmple8, x24, x26, x2, 0x00000000, 0xdf03aa80, 0xf8fe0410, x15, 0, x16)

inst_1:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x11, rs1_b3_val == rs2_b3_val, rs2_b2_val == 64, rs2_b1_val == -65, rs1_b2_val == -3, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 85, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -33, rs2_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 85
// opcode: scmple8 ; op1:x21; op2:x21; dest:x11; op1val:0x55fddf09;  op2val:0x5540bf7f
TEST_RR_OP(scmple8, x11, x21, x21, 0x00000000, 0x55fddf09, 0x5540bf7f, x15, 4, x16)

inst_2:
// rs1 == rd != rs2, rs1==x5, rs2==x0, rd==x5, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 1, rs2_b1_val == 64, rs1_b3_val == -9, rs1_b0_val == 16, rs1_b1_val == -2, rs1_b2_val == 127
// opcode: scmple8 ; op1:x5; op2:x0; dest:x5; op1val:0xf77ffe10;  op2val:0x3f64001
TEST_RR_OP(scmple8, x5, x5, x0, 0x00000000, 0xf77ffe10, 0x3f64001, x15, 8, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b2_val == -1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b0_val == 1, rs1_b3_val == 8, rs2_b0_val == -5
// opcode: scmple8 ; op1:x9; op2:x9; dest:x9; op1val:0x8fffa01;  op2val:0xfafebffb
TEST_RR_OP(scmple8, x9, x9, x9, 0x00000000, 0x8fffa01, 0xfafebffb, x15, 12, x16)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x7, rd==x7, rs1_b2_val == rs2_b2_val, rs1_b2_val == -2, rs1_b0_val == 8, rs1_b1_val == -3, rs1_b3_val == 0, rs2_b0_val == -2
// opcode: scmple8 ; op1:x6; op2:x7; dest:x7; op1val:0xfefd08;  op2val:0xf8fe09fe
TEST_RR_OP(scmple8, x7, x6, x7, 0x00000000, 0xfefd08, 0xf8fe09fe, x15, 16, x16)

inst_5:
// rs1==x10, rs2==x11, rd==x19, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 16, rs1_b3_val == -65, rs2_b2_val == 2
// opcode: scmple8 ; op1:x10; op2:x11; dest:x19; op1val:0xbf10fe07;  op2val:0x302077f
TEST_RR_OP(scmple8, x19, x10, x11, 0x00000000, 0xbf10fe07, 0x302077f, x15, 20, x16)

inst_6:
// rs1==x18, rs2==x29, rd==x23, rs1_b1_val == rs2_b1_val, rs2_b3_val == -3, rs2_b1_val == -3, rs1_b0_val == -9, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b3_val == 4, rs2_b2_val == 4
// opcode: scmple8 ; op1:x18; op2:x29; dest:x23; op1val:0x410fdf7;  op2val:0xfd04fdfb
TEST_RR_OP(scmple8, x23, x18, x29, 0x00000000, 0x410fdf7, 0xfd04fdfb, x15, 24, x16)

inst_7:
// rs1==x25, rs2==x4, rd==x14, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b1_val == -86, rs2_b0_val == 4, rs1_b2_val == 85, rs2_b2_val == 127
// opcode: scmple8 ; op1:x25; op2:x4; dest:x14; op1val:0x55550303;  op2val:0x67faa04
TEST_RR_OP(scmple8, x14, x25, x4, 0x00000000, 0x55550303, 0x67faa04, x15, 28, x16)

inst_8:
// rs1==x7, rs2==x12, rd==x13, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 4, rs1_b0_val == -65, rs2_b1_val == 8, rs1_b3_val == 2, rs2_b3_val == 127
// opcode: scmple8 ; op1:x7; op2:x12; dest:x13; op1val:0x2c004bf;  op2val:0x7ffa0801
TEST_RR_OP(scmple8, x13, x7, x12, 0x00000000, 0x2c004bf, 0x7ffa0801, x15, 32, x16)

inst_9:
// rs1==x20, rs2==x3, rd==x4, rs1_b0_val == rs2_b0_val, rs1_b3_val == -86, rs2_b3_val == -128, rs2_b1_val == 32, rs2_b2_val == -86
// opcode: scmple8 ; op1:x20; op2:x3; dest:x4; op1val:0xaa06c03f;  op2val:0x80aa203f
TEST_RR_OP(scmple8, x4, x20, x3, 0x00000000, 0xaa06c03f, 0x80aa203f, x15, 36, x16)

inst_10:
// rs1==x17, rs2==x19, rd==x1, rs2_b3_val == -86, rs1_b2_val == -65, rs2_b0_val == 2, rs2_b1_val == -17
// opcode: scmple8 ; op1:x17; op2:x19; dest:x1; op1val:0xbfbf09c0;  op2val:0xaac0ef02
TEST_RR_OP(scmple8, x1, x17, x19, 0x00000000, 0xbfbf09c0, 0xaac0ef02, x15, 40, x16)

inst_11:
// rs1==x22, rs2==x8, rd==x30, rs2_b3_val == -65, rs2_b0_val == -33, rs1_b1_val == -17, rs1_b2_val == -86, rs1_b3_val == -3
// opcode: scmple8 ; op1:x22; op2:x8; dest:x30; op1val:0xfdaaefc0;  op2val:0xbff820df
TEST_RR_OP(scmple8, x30, x22, x8, 0x00000000, 0xfdaaefc0, 0xbff820df, x15, 44, x16)

inst_12:
// rs1==x1, rs2==x31, rd==x27, rs2_b3_val == -33, rs2_b2_val == -17, rs2_b1_val == 127, rs1_b0_val == -5, rs1_b3_val == -2
// opcode: scmple8 ; op1:x1; op2:x31; dest:x27; op1val:0xfe0705fb;  op2val:0xdfef7ffc
TEST_RR_OP(scmple8, x27, x1, x31, 0x00000000, 0xfe0705fb, 0xdfef7ffc, x15, 48, x7)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_13:
// rs1==x29, rs2==x1, rd==x31, rs2_b3_val == -17, rs1_b3_val == -1, rs2_b1_val == -33, rs1_b0_val == 127
// opcode: scmple8 ; op1:x29; op2:x1; dest:x31; op1val:0xff09097f;  op2val:0xef3fdffc
TEST_RR_OP(scmple8, x31, x29, x1, 0x00000000, 0xff09097f, 0xef3fdffc, x4, 0, x7)

inst_14:
// rs1==x12, rs2==x17, rd==x3, rs2_b3_val == -9, rs2_b0_val == -65, rs2_b1_val == -2, rs1_b0_val == 2, rs1_b2_val == 4
// opcode: scmple8 ; op1:x12; op2:x17; dest:x3; op1val:0xf904aa02;  op2val:0xf706febf
TEST_RR_OP(scmple8, x3, x12, x17, 0x00000000, 0xf904aa02, 0xf706febf, x4, 4, x7)

inst_15:
// rs1==x13, rs2==x30, rd==x0, rs2_b3_val == -5, rs2_b1_val == 85, rs1_b1_val == -65, rs2_b2_val == -3, rs1_b2_val == 0
// opcode: scmple8 ; op1:x13; op2:x30; dest:x0; op1val:0x300bf10;  op2val:0xfbfd5507
TEST_RR_OP(scmple8, x0, x13, x30, 0x00000000, 0x300bf10, 0xfbfd5507, x4, 8, x7)

inst_16:
// rs1==x24, rs2==x10, rd==x17, rs2_b3_val == -2, rs1_b2_val == -5, rs1_b0_val == 85
// opcode: scmple8 ; op1:x24; op2:x10; dest:x17; op1val:0x8fbf655;  op2val:0xfe03053f
TEST_RR_OP(scmple8, x17, x24, x10, 0x00000000, 0x8fbf655, 0xfe03053f, x4, 12, x7)

inst_17:
// rs1==x27, rs2==x22, rd==x21, rs2_b3_val == 64, rs1_b2_val == 8, rs2_b0_val == 85
// opcode: scmple8 ; op1:x27; op2:x22; dest:x21; op1val:0x3f0803f8;  op2val:0x40030455
TEST_RR_OP(scmple8, x21, x27, x22, 0x00000000, 0x3f0803f8, 0x40030455, x4, 16, x7)

inst_18:
// rs1==x11, rs2==x20, rd==x16, rs2_b3_val == 32, rs2_b1_val == 2, rs1_b3_val == 127, rs1_b2_val == -9, rs1_b1_val == 64
// opcode: scmple8 ; op1:x11; op2:x20; dest:x16; op1val:0x7ff740fc;  op2val:0x20090203
TEST_RR_OP(scmple8, x16, x11, x20, 0x00000000, 0x7ff740fc, 0x20090203, x4, 20, x7)

inst_19:
// rs1==x28, rs2==x23, rd==x25, rs2_b3_val == 16, 
// opcode: scmple8 ; op1:x28; op2:x23; dest:x25; op1val:0x7fbf04bf;  op2val:0x107ffe10
TEST_RR_OP(scmple8, x25, x28, x23, 0x00000000, 0x7fbf04bf, 0x107ffe10, x4, 24, x7)

inst_20:
// rs1==x14, rs2==x5, rd==x10, rs2_b3_val == 8, rs2_b2_val == 32, rs1_b1_val == 0, rs1_b0_val == -3, rs2_b0_val == 0
// opcode: scmple8 ; op1:x14; op2:x5; dest:x10; op1val:0xbffb00fd;  op2val:0x8205500
TEST_RR_OP(scmple8, x10, x14, x5, 0x00000000, 0xbffb00fd, 0x8205500, x4, 28, x7)

inst_21:
// rs1==x23, rs2==x13, rd==x26, rs2_b3_val == 4, rs2_b2_val == -65, rs1_b0_val == -17
// opcode: scmple8 ; op1:x23; op2:x13; dest:x26; op1val:0xff0703ef;  op2val:0x4bf7f09
TEST_RR_OP(scmple8, x26, x23, x13, 0x00000000, 0xff0703ef, 0x4bf7f09, x4, 32, x7)

inst_22:
// rs1==x31, rs2==x25, rd==x29, rs2_b3_val == 2, rs2_b0_val == 32, rs1_b1_val == 2, rs2_b1_val == -1
// opcode: scmple8 ; op1:x31; op2:x25; dest:x29; op1val:0x47f02fc;  op2val:0x2fcff20
TEST_RR_OP(scmple8, x29, x31, x25, 0x00000000, 0x47f02fc, 0x2fcff20, x4, 36, x7)

inst_23:
// rs1==x8, rs2==x26, rd==x18, rs1_b2_val == -33, rs2_b1_val == 1
// opcode: scmple8 ; op1:x8; op2:x26; dest:x18; op1val:0x8dff67f;  op2val:0x5070103
TEST_RR_OP(scmple8, x18, x8, x26, 0x00000000, 0x8dff67f, 0x5070103, x4, 40, x7)

inst_24:
// rs1==x16, rs2==x24, rd==x15, rs1_b2_val == -17, rs1_b3_val == 1
// opcode: scmple8 ; op1:x16; op2:x24; dest:x15; op1val:0x1efdf07;  op2val:0x1020fe3f
TEST_RR_OP(scmple8, x15, x16, x24, 0x00000000, 0x1efdf07, 0x1020fe3f, x4, 44, x7)

inst_25:
// rs1==x0, rs2==x6, rd==x2, rs1_b2_val == -128, rs2_b0_val == -86
// opcode: scmple8 ; op1:x0; op2:x6; dest:x2; op1val:0x280f8f8;  op2val:0x200440aa
TEST_RR_OP(scmple8, x2, x0, x6, 0x00000000, 0x280f8f8, 0x200440aa, x4, 48, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:
// rs1==x30, rs2==x18, rd==x28, rs1_b2_val == 64, 
// opcode: scmple8 ; op1:x30; op2:x18; dest:x28; op1val:0x3f400503;  op2val:0x807f0500
TEST_RR_OP(scmple8, x28, x30, x18, 0x00000000, 0x3f400503, 0x807f0500, x1, 0, x5)

inst_27:
// rs1==x19, rs2==x15, rd==x22, rs1_b2_val == 32, rs1_b0_val == -33, rs1_b1_val == 85
// opcode: scmple8 ; op1:x19; op2:x15; dest:x22; op1val:0xfa2055df;  op2val:0x707047f
TEST_RR_OP(scmple8, x22, x19, x15, 0x00000000, 0xfa2055df, 0x707047f, x1, 4, x5)

inst_28:
// rs1==x3, rs2==x16, rd==x8, rs1_b2_val == 2, rs2_b3_val == 1, rs1_b0_val == 4
// opcode: scmple8 ; op1:x3; op2:x16; dest:x8; op1val:0x102df04;  op2val:0x1ef05aa
TEST_RR_OP(scmple8, x8, x3, x16, 0x00000000, 0x102df04, 0x1ef05aa, x1, 8, x5)

inst_29:
// rs1==x2, rs2==x28, rd==x12, rs1_b2_val == 1, rs1_b1_val == -1
// opcode: scmple8 ; op1:x2; op2:x28; dest:x12; op1val:0xdf01fff6;  op2val:0x2eff607
TEST_RR_OP(scmple8, x12, x2, x28, 0x00000000, 0xdf01fff6, 0x2eff607, x1, 12, x5)

inst_30:
// rs1==x15, rs2==x27, rd==x6, rs1_b1_val == 127, rs2_b2_val == 8
// opcode: scmple8 ; op1:x15; op2:x27; dest:x6; op1val:0x3807ff6;  op2val:0xf708077f
TEST_RR_OP(scmple8, x6, x15, x27, 0x00000000, 0x3807ff6, 0xf708077f, x1, 16, x5)

inst_31:
// rs1==x4, rs2==x14, rd==x20, rs1_b1_val == -9, rs2_b3_val == -1
// opcode: scmple8 ; op1:x4; op2:x14; dest:x20; op1val:0x1fff707;  op2val:0xff025505
TEST_RR_OP(scmple8, x20, x4, x14, 0x00000000, 0x1fff707, 0xff025505, x1, 20, x5)

inst_32:
// rs1_b1_val == -5, rs2_b2_val == -1, rs2_b0_val == 8
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffdfb01;  op2val:0x7fff608
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xdffdfb01, 0x7fff608, x1, 24, x5)

inst_33:
// rs1_b1_val == -128, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1048001;  op2val:0xaafc053f
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x1048001, 0xaafc053f, x1, 28, x5)

inst_34:
// rs1_b1_val == 32, rs2_b0_val == 64
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffb207f;  op2val:0xf908fa40
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x7ffb207f, 0xf908fa40, x1, 32, x5)

inst_35:
// rs1_b1_val == 16, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf3f107f;  op2val:0x9030605
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xbf3f107f, 0x9030605, x1, 36, x5)

inst_36:
// rs1_b1_val == 8, rs1_b0_val == 32
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffd0820;  op2val:0xfef9fa02
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x3ffd0820, 0xfef9fa02, x1, 40, x5)

inst_37:
// rs1_b1_val == 1, rs2_b0_val == -9
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x551001fd;  op2val:0xfe0740f7
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x551001fd, 0xfe0740f7, x1, 44, x5)

inst_38:
// rs2_b1_val == -9, rs1_b0_val == -1
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9eff7ff;  op2val:0x4f9f707
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xf9eff7ff, 0x4f9f707, x1, 48, x5)

inst_39:
// rs2_b1_val == -5, rs2_b2_val == 16
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f93fff;  op2val:0x610fbfc
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xf8f93fff, 0x610fbfc, x1, 52, x5)

inst_40:
// rs2_b1_val == -128, rs2_b2_val == -5, rs1_b3_val == 16
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fbfc05;  op2val:0xf6fb8040
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x10fbfc05, 0xf6fb8040, x1, 56, x5)

inst_41:
// rs2_b1_val == 16, rs2_b2_val == -33
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfadf407f;  op2val:0x3df10aa
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfadf407f, 0x3df10aa, x1, 60, x5)

inst_42:
// rs2_b1_val == 0, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf83f04fc;  op2val:0xfd080040
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xf83f04fc, 0xfd080040, x1, 64, x5)

inst_43:
// rs2_b0_val == -17, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x2dff708;  op2val:0xfe2008ef
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x2dff708, 0xfe2008ef, x1, 68, x5)

inst_44:
// rs2_b0_val == -3, rs2_b2_val == 1
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe40f909;  op2val:0xf60110fd
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfe40f909, 0xf60110fd, x1, 72, x5)

inst_45:
// rs2_b0_val == -128, rs1_b3_val == -17
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xefff04f9;  op2val:0xfa040480
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xefff04f9, 0xfa040480, x1, 76, x5)

inst_46:
// rs1_b0_val == -86, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff8f6aa;  op2val:0xf9fdfb02
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xdff8f6aa, 0xf9fdfb02, x1, 80, x5)

inst_47:
// rs2_b0_val == -1, rs2_b2_val == 0
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f80bf02;  op2val:0x3f0006ff
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x3f80bf02, 0x3f0006ff, x1, 84, x5)

inst_48:
// rs2_b3_val == 0, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x27ffef7;  op2val:0xfffbfa
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x27ffef7, 0xfffbfa, x1, 88, x5)

inst_49:
// rs2_b2_val == 85, rs1_b3_val == 64, rs1_b0_val == 0
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f8df00;  op2val:0x805555f8
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x40f8df00, 0x805555f8, x1, 92, x5)

inst_50:
// rs1_b0_val == -2, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa09fdfe;  op2val:0xf6080904
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfa09fdfe, 0xf6080904, x1, 96, x5)

inst_51:
// rs1_b3_val == -5, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbef403f;  op2val:0xfefc0020
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfbef403f, 0xfefc0020, x1, 100, x5)

inst_52:
// rs1_b3_val == -128, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8006fffc;  op2val:0xf702fafa
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x8006fffc, 0xf702fafa, x1, 104, x5)

inst_53:
// rs1_b0_val == 64, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf709fe40;  op2val:0x607bf03
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xf709fe40, 0x607bf03, x1, 108, x5)

inst_54:
// rs2_b2_val == -9, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfef7ef;  op2val:0x7ff708fa
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfbfef7ef, 0x7ff708fa, x1, 112, x5)

inst_55:
// rs1_b3_val == 32, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fcfefc;  op2val:0xffc0fbfd
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x20fcfefc, 0xffc0fbfd, x1, 116, x5)

inst_56:
// rs2_b2_val == -128, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa02063f;  op2val:0x580c0f7
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xfa02063f, 0x580c0f7, x1, 120, x5)

inst_57:
// rs1_b3_val == rs2_b3_val, rs2_b2_val == 64, rs2_b1_val == -65, rs1_b2_val == -3, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 85, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -33, rs2_b0_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 85
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fddf09;  op2val:0x5540bf7f
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x55fddf09, 0x5540bf7f, x1, 124, x5)

inst_58:
// rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 1, rs2_b1_val == 64, rs1_b3_val == -9, rs1_b0_val == 16, rs1_b1_val == -2, rs1_b2_val == 127
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77ffe10;  op2val:0x3f64001
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0xf77ffe10, 0x3f64001, x1, 128, x5)

inst_59:
// rs2_b3_val == -5, rs2_b1_val == 85, rs1_b1_val == -65, rs2_b2_val == -3, rs1_b2_val == 0
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x300bf10;  op2val:0xfbfd5507
TEST_RR_OP(scmple8, x31, x30, x29, 0x00000000, 0x300bf10, 0xfbfd5507, x1, 132, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
