
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsda instruction of the RISC-V RV32PZicsr extension for the kmsda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x29, rd==x8, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs2_h1_val == -8193, rs1_h1_val == 2
// opcode: kmsda ; op1:x16; op2:x29; dest:x8; op1val:0x028000;  op2val:0xdfff0040
TEST_PKRR_OP(kmsda, x8, x16, x29, 0x00000000, 0x028000, 0xdfff0040, x16, x4, 0, x1)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x21, rs1_h1_val == rs2_h1_val, rs2_h1_val == 32, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32
// opcode: kmsda ; op1:x18; op2:x18; dest:x21; op1val:0x200003;  op2val:0x20c000
TEST_PKRR_OP(kmsda, x21, x18, x18, 0x00000000, 0x200003, 0x20c000, x18, x4, 8, x1)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x10, rd==x23, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -32768, rs2_h1_val == 256, rs1_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -1
// opcode: kmsda ; op1:x23; op2:x10; dest:x23; op1val:0xfffffffd;  op2val:0x1008000
TEST_PKRR_OP(kmsda, x23, x23, x10, 0x00000000, 0xfffffffd, 0x1008000, x23, x4, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 1024, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2
// opcode: kmsda ; op1:x24; op2:x24; dest:x24; op1val:0xffff0002;  op2val:0xfff80400
TEST_PKRR_OP(kmsda, x24, x24, x24, 0x00000000, 0xffff0002, 0xfff80400, x24, x4, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x11, rd==x11, rs1_h0_val == rs2_h0_val, rs2_h0_val == -21846, rs1_h1_val == 8, rs1_h0_val == -21846
// opcode: kmsda ; op1:x0; op2:x11; dest:x11; op1val:0x08aaaa;  op2val:0x3fffaaaa
TEST_PKRR_OP(kmsda, x11, x0, x11, 0x00000000, 0x08aaaa, 0x3fffaaaa, x0, x4, 32, x1)

inst_5:
// rs1==x6, rs2==x8, rd==x14, rs2_h1_val == -21846, rs1_h0_val == -8193
// opcode: kmsda ; op1:x6; op2:x8; dest:x14; op1val:0x06dfff;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kmsda, x14, x6, x8, 0x00000000, 0x06dfff, 0xaaaaaaaa, x6, x4, 40, x1)

inst_6:
// rs1==x27, rs2==x15, rd==x13, rs2_h1_val == 21845, rs2_h0_val == -5, rs1_h0_val == 16384
// opcode: kmsda ; op1:x27; op2:x15; dest:x13; op1val:0xfffa4000;  op2val:0x5555fffb
TEST_PKRR_OP(kmsda, x13, x27, x15, 0x00000000, 0xfffa4000, 0x5555fffb, x27, x4, 48, x1)

inst_7:
// rs1==x19, rs2==x27, rd==x9, rs2_h1_val == 32767, rs1_h1_val == -16385, rs1_h0_val == 32
// opcode: kmsda ; op1:x19; op2:x27; dest:x9; op1val:0xbfff0020;  op2val:0x7ffffffc
TEST_PKRR_OP(kmsda, x9, x19, x27, 0x00000000, 0xbfff0020, 0x7ffffffc, x19, x4, 56, x1)

inst_8:
// rs1==x5, rs2==x9, rd==x2, rs2_h1_val == -16385, rs2_h0_val == -2, rs1_h0_val == 16, rs1_h1_val == 1
// opcode: kmsda ; op1:x5; op2:x9; dest:x2; op1val:0x010010;  op2val:0xbffffffe
TEST_PKRR_OP(kmsda, x2, x5, x9, 0x00000000, 0x010010, 0xbffffffe, x5, x4, 64, x1)

inst_9:
// rs1==x17, rs2==x6, rd==x29, rs2_h1_val == -4097, rs2_h0_val == -33, rs1_h1_val == -32768
// opcode: kmsda ; op1:x17; op2:x6; dest:x29; op1val:0x80000009;  op2val:0xefffffdf
TEST_PKRR_OP(kmsda, x29, x17, x6, 0x00000000, 0x80000009, 0xefffffdf, x17, x4, 72, x1)

inst_10:
// rs1==x12, rs2==x5, rd==x27, rs2_h1_val == -2049, rs1_h1_val == -257
// opcode: kmsda ; op1:x12; op2:x5; dest:x27; op1val:0xfeff0005;  op2val:0xf7ffaaaa
TEST_PKRR_OP(kmsda, x27, x12, x5, 0x00000000, 0xfeff0005, 0xf7ffaaaa, x12, x4, 80, x1)

inst_11:
// rs1==x29, rs2==x12, rd==x0, rs2_h1_val == -1025, rs2_h0_val == -4097
// opcode: kmsda ; op1:x29; op2:x12; dest:x0; op1val:0x3fff0010;  op2val:0xfbffefff
TEST_PKRR_OP(kmsda, x0, x29, x12, 0x00000000, 0x3fff0010, 0xfbffefff, x29, x4, 88, x1)

inst_12:
// rs1==x2, rs2==x26, rd==x17, rs2_h1_val == -513, rs1_h1_val == 8192
// opcode: kmsda ; op1:x2; op2:x26; dest:x17; op1val:0x2000aaaa;  op2val:0xfdff3fff
TEST_PKRR_OP(kmsda, x17, x2, x26, 0x00000000, 0x2000aaaa, 0xfdff3fff, x2, x4, 96, x1)

inst_13:
// rs1==x15, rs2==x3, rd==x28, rs2_h1_val == -257, rs2_h0_val == 8192, rs1_h0_val == -9
// opcode: kmsda ; op1:x15; op2:x3; dest:x28; op1val:0x8000fff7;  op2val:0xfeff2000
TEST_PKRR_OP(kmsda, x28, x15, x3, 0x00000000, 0x8000fff7, 0xfeff2000, x15, x4, 104, x1)

inst_14:
// rs1==x8, rs2==x17, rd==x19, rs2_h1_val == -129, rs1_h0_val == 1, rs2_h0_val == -2049
// opcode: kmsda ; op1:x8; op2:x17; dest:x19; op1val:0xfff90001;  op2val:0xff7ff7ff
TEST_PKRR_OP(kmsda, x19, x8, x17, 0x00000000, 0xfff90001, 0xff7ff7ff, x8, x4, 112, x1)

inst_15:
// rs1==x14, rs2==x19, rd==x22, rs2_h1_val == -65, rs2_h0_val == -513
// opcode: kmsda ; op1:x14; op2:x19; dest:x22; op1val:0xfff80006;  op2val:0xffbffdff
TEST_PKRR_OP(kmsda, x22, x14, x19, 0x00000000, 0xfff80006, 0xffbffdff, x14, x4, 120, x1)

inst_16:
// rs1==x25, rs2==x23, rd==x7, rs2_h1_val == -33, rs1_h0_val == -33, rs2_h0_val == 16
// opcode: kmsda ; op1:x25; op2:x23; dest:x7; op1val:0x01ffdf;  op2val:0xffdf0010
TEST_PKRR_OP(kmsda, x7, x25, x23, 0x00000000, 0x01ffdf, 0xffdf0010, x25, x4, 128, x1)

inst_17:
// rs1==x21, rs2==x1, rd==x20, rs2_h1_val == -17, rs2_h0_val == 8
// opcode: kmsda ; op1:x21; op2:x1; dest:x20; op1val:0xfff6fff7;  op2val:0xffef0008
TEST_PKRR_OP(kmsda, x20, x21, x1, 0x00000000, 0xfff6fff7, 0xffef0008, x21, x4, 136, x17)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_18:
// rs1==x11, rs2==x31, rd==x16, rs2_h1_val == -9, rs2_h0_val == -1, rs1_h1_val == -21846
// opcode: kmsda ; op1:x11; op2:x31; dest:x16; op1val:0xaaaa0006;  op2val:0xfff7ffff
TEST_PKRR_OP(kmsda, x16, x11, x31, 0x00000000, 0xaaaa0006, 0xfff7ffff, x11, x8, 0, x17)

inst_19:
// rs1==x7, rs2==x21, rd==x3, rs2_h1_val == -5, 
// opcode: kmsda ; op1:x7; op2:x21; dest:x3; op1val:0x8000dfff;  op2val:0xfffbfffc
TEST_PKRR_OP(kmsda, x3, x7, x21, 0x00000000, 0x8000dfff, 0xfffbfffc, x7, x8, 8, x17)

inst_20:
// rs1==x4, rs2==x30, rd==x26, rs2_h1_val == -3, rs1_h1_val == 0
// opcode: kmsda ; op1:x4; op2:x30; dest:x26; op1val:0x00fff6;  op2val:0xfffdfffb
TEST_PKRR_OP(kmsda, x26, x4, x30, 0x00000000, 0x00fff6, 0xfffdfffb, x4, x8, 16, x17)

inst_21:
// rs1==x31, rs2==x0, rd==x25, rs2_h1_val == -2, rs1_h0_val == -1025
// opcode: kmsda ; op1:x31; op2:x0; dest:x25; op1val:0xfff8fbff;  op2val:0xfffef7ff
TEST_PKRR_OP(kmsda, x25, x31, x0, 0x00000000, 0xfff8fbff, 0xfffef7ff, x31, x8, 24, x17)

inst_22:
// rs1==x30, rs2==x7, rd==x15, rs2_h1_val == -32768, rs1_h1_val == 512
// opcode: kmsda ; op1:x30; op2:x7; dest:x15; op1val:0x2000005;  op2val:0x80000008
TEST_PKRR_OP(kmsda, x15, x30, x7, 0x00000000, 0x2000005, 0x80000008, x30, x8, 32, x17)

inst_23:
// rs1==x1, rs2==x25, rd==x10, rs2_h1_val == 16384, rs2_h0_val == 1, rs1_h0_val == -17
// opcode: kmsda ; op1:x1; op2:x25; dest:x10; op1val:0xfff9ffef;  op2val:0x40000001
TEST_PKRR_OP(kmsda, x10, x1, x25, 0x00000000, 0xfff9ffef, 0x40000001, x1, x8, 40, x17)

inst_24:
// rs1==x10, rs2==x22, rd==x31, rs2_h1_val == 8192, rs1_h0_val == -65, rs2_h0_val == -16385, rs1_h1_val == -3
// opcode: kmsda ; op1:x10; op2:x22; dest:x31; op1val:0xfffdffbf;  op2val:0x2000bfff
TEST_PKRR_OP(kmsda, x31, x10, x22, 0x00000000, 0xfffdffbf, 0x2000bfff, x10, x8, 48, x17)

inst_25:
// rs1==x13, rs2==x14, rd==x18, rs2_h1_val == 4096, rs1_h0_val == -257, rs2_h0_val == 16384
// opcode: kmsda ; op1:x13; op2:x14; dest:x18; op1val:0xfff9feff;  op2val:0x10004000
TEST_PKRR_OP(kmsda, x18, x13, x14, 0x00000000, 0xfff9feff, 0x10004000, x13, x8, 56, x17)

inst_26:
// rs1==x26, rs2==x2, rd==x6, rs2_h1_val == 2048, rs2_h0_val == 4, rs1_h1_val == -17, rs1_h0_val == -129
// opcode: kmsda ; op1:x26; op2:x2; dest:x6; op1val:0xffefff7f;  op2val:0x8000004
TEST_PKRR_OP(kmsda, x6, x26, x2, 0x00000000, 0xffefff7f, 0x8000004, x26, x8, 64, x17)

inst_27:
// rs1==x22, rs2==x16, rd==x30, rs2_h1_val == 1024, 
// opcode: kmsda ; op1:x22; op2:x16; dest:x30; op1val:0x000009;  op2val:0x400efff
TEST_PKRR_OP(kmsda, x30, x22, x16, 0x00000000, 0x000009, 0x400efff, x22, x8, 72, x17)

inst_28:
// rs1==x28, rs2==x4, rd==x12, rs2_h1_val == 512, rs1_h0_val == -5, rs1_h1_val == -8193, rs2_h0_val == -257
// opcode: kmsda ; op1:x28; op2:x4; dest:x12; op1val:0xdffffffb;  op2val:0x200feff
TEST_PKRR_OP(kmsda, x12, x28, x4, 0x00000000, 0xdffffffb, 0x200feff, x28, x8, 80, x17)

inst_29:
// rs1==x3, rs2==x28, rd==x4, rs2_h1_val == 128, rs1_h1_val == -9
// opcode: kmsda ; op1:x3; op2:x28; dest:x4; op1val:0xfff7aaaa;  op2val:0x80fffa
TEST_PKRR_OP(kmsda, x4, x3, x28, 0x00000000, 0xfff7aaaa, 0x80fffa, x3, x8, 88, x17)

inst_30:
// rs1==x20, rs2==x13, rd==x5, rs2_h1_val == 64, rs1_h0_val == 2048
// opcode: kmsda ; op1:x20; op2:x13; dest:x5; op1val:0x20000800;  op2val:0x40fff6
TEST_PKRR_OP(kmsda, x5, x20, x13, 0x00000000, 0x20000800, 0x40fff6, x20, x8, 96, x17)

inst_31:
// rs1==x9, rs2==x20, rd==x1, rs1_h0_val == -513, rs1_h1_val == 2048
// opcode: kmsda ; op1:x9; op2:x20; dest:x1; op1val:0x800fdff;  op2val:0x4000fff9
TEST_PKRR_OP(kmsda, x1, x9, x20, 0x00000000, 0x800fdff, 0x4000fff9, x9, x8, 104, x17)

inst_32:
// rs1_h0_val == -2, rs1_h1_val == 256
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe;  op2val:0xfbffffff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x100fffe, 0xfbffffff, x30, x8, 112, x17)

inst_33:
// rs1_h0_val == 8192, rs2_h1_val == 1
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x062000;  op2val:0x01fff8
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x062000, 0x01fff8, x30, x8, 120, x17)

inst_34:
// rs1_h0_val == 4096, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x031000;  op2val:0x7fffc000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x031000, 0x7fffc000, x30, x8, 128, x17)

inst_35:
// rs1_h0_val == 1024, rs1_h1_val == -129, rs2_h1_val == 0
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0400;  op2val:0x000010
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xff7f0400, 0x000010, x30, x8, 136, x17)

inst_36:
// rs1_h0_val == 512, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x020200;  op2val:0x1000005
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x020200, 0x1000005, x30, x8, 144, x17)

inst_37:
// rs1_h0_val == 256, rs1_h1_val == -513
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0100;  op2val:0x030009
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfdff0100, 0x030009, x30, x8, 152, x17)

inst_38:
// rs1_h0_val == 128, rs2_h1_val == 16, rs1_h1_val == -2049, rs2_h0_val == -17
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080;  op2val:0x10ffef
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xf7ff0080, 0x10ffef, x30, x8, 160, x17)

inst_39:
// rs1_h0_val == 64, rs2_h0_val == -1025, rs1_h1_val == -4097
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xefff0040;  op2val:0xfffbfbff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xefff0040, 0xfffbfbff, x30, x8, 168, x17)

inst_40:
// rs1_h0_val == 8, rs1_h1_val == -33
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0008;  op2val:0x050004
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xffdf0008, 0x050004, x30, x8, 176, x17)

inst_41:
// rs1_h0_val == 4, rs1_h1_val == 4
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x040004;  op2val:0x000009
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x040004, 0x000009, x30, x8, 184, x17)

inst_42:
// rs1_h0_val == 0, rs1_h1_val == 64
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xfffc4000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x400000, 0xfffc4000, x30, x8, 192, x17)

inst_43:
// rs1_h0_val == -1, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xfffeaaaa
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfeffffff, 0xfffeaaaa, x30, x8, 200, x17)

inst_44:
// rs2_h1_val == 8, rs2_h0_val == 32767
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff7;  op2val:0x087fff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xdffffff7, 0x087fff, x30, x8, 208, x17)

inst_45:
// rs2_h1_val == 4, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xefff0800;  op2val:0x04ffdf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xefff0800, 0x04ffdf, x30, x8, 216, x17)

inst_46:
// rs2_h1_val == 2, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400080;  op2val:0x02fffb
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x400080, 0x02fffb, x30, x8, 224, x17)

inst_47:
// rs2_h0_val == -3, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8dfff;  op2val:0xfbfffffd
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfff8dfff, 0xfbfffffd, x30, x8, 232, x17)

inst_48:
// rs2_h0_val == 4096, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xc0000002;  op2val:0x801000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xc0000002, 0x801000, x30, x8, 240, x17)

inst_49:
// rs2_h0_val == 2048, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x030006;  op2val:0x10000800
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x030006, 0x10000800, x30, x8, 248, x17)

inst_50:
// rs2_h0_val == 512, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff80004;  op2val:0xfffe0200
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfff80004, 0xfffe0200, x30, x8, 256, x17)

inst_51:
// rs2_h0_val == 256, rs1_h1_val == 1024
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400fff8;  op2val:0x4000100
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x400fff8, 0x4000100, x30, x8, 264, x17)

inst_52:
// rs2_h0_val == 128, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x090004;  op2val:0xff7f0080
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x090004, 0xff7f0080, x30, x8, 272, x17)

inst_53:
// rs2_h0_val == 32, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x012000;  op2val:0x10000020
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x012000, 0x10000020, x30, x8, 280, x17)

inst_54:
// rs2_h0_val == 2, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x80000008;  op2val:0xf7ff0002
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x80000008, 0xf7ff0002, x30, x8, 288, x17)

inst_55:
// rs2_h0_val == 0, rs1_h1_val == 16, rs1_h0_val == -2049
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff;  op2val:0x800000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x10f7ff, 0x800000, x30, x8, 296, x17)

inst_56:
// rs1_h1_val == 21845, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x55550005;  op2val:0xc0000200
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x55550005, 0xc0000200, x30, x8, 304, x17)

inst_57:
// rs1_h1_val == 32767, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0200;  op2val:0xfeffbfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x7fff0200, 0xfeffbfff, x30, x8, 312, x17)

inst_58:
// rs1_h1_val == -1025, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff8000;  op2val:0xaaaa0003
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfbff8000, 0xaaaa0003, x30, x8, 320, x17)

inst_59:
// rs1_h1_val == -65, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef;  op2val:0xfff70020
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xffbfffef, 0xfff70020, x30, x8, 328, x17)

inst_60:
// rs1_h1_val == -5, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0x010008
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfffbffff, 0x010008, x30, x8, 336, x17)

inst_61:
// rs1_h1_val == -2, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0007;  op2val:0xffbfffdf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfffe0007, 0xffbfffdf, x30, x8, 344, x17)

inst_62:
// rs1_h1_val == 16384, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x40000007;  op2val:0xdfff0000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x40000007, 0xdfff0000, x30, x8, 352, x17)

inst_63:
// rs1_h1_val == 4096, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x10000800;  op2val:0xfffafbff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x10000800, 0xfffafbff, x30, x8, 360, x17)

inst_64:
// rs2_h0_val == -129, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff6;  op2val:0x3fffff7f
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfff6fff6, 0x3fffff7f, x30, x8, 368, x17)

inst_65:
// rs1_h1_val == 128, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x800080;  op2val:0x090007
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x800080, 0x090007, x30, x8, 376, x17)

inst_66:
// rs2_h0_val == -65, rs1_h0_val == -16385
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff;  op2val:0x05ffbf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x08bfff, 0x05ffbf, x30, x8, 384, x17)

inst_67:
// rs2_h1_val == -1, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x04fffe;  op2val:0xffffffbf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x04fffe, 0xffffffbf, x30, x8, 392, x17)

inst_68:
// rs2_h0_val == 21845, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x020004;  op2val:0xaaaa5555
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x020004, 0xaaaa5555, x30, x8, 400, x17)

inst_69:
// rs2_h0_val == -8193, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x04fff9;  op2val:0xfff9dfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x04fff9, 0xfff9dfff, x30, x8, 408, x17)

inst_70:
// rs1_h0_val == 21845, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff5555;  op2val:0x800fffa
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x7fff5555, 0x800fffa, x30, x8, 416, x17)

inst_71:
// rs1_h0_val == 32767, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff67fff;  op2val:0xfff6fffb
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfff67fff, 0xfff6fffb, x30, x8, 424, x17)

inst_72:
// rs1_h0_val == -4097, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x2000efff;  op2val:0xffdfdfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x2000efff, 0xffdfdfff, x30, x8, 432, x17)

inst_73:
// rs2_h0_val == -9, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x80ffdf;  op2val:0xffbffff7
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x80ffdf, 0xffbffff7, x30, x8, 440, x17)

inst_74:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == 32, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x200003;  op2val:0x20c000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x200003, 0x20c000, x30, x8, 448, x17)

inst_75:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 1024, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffff0002;  op2val:0xfff80400
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xffff0002, 0xfff80400, x30, x8, 456, x17)

inst_76:
// rs1_h0_val == rs2_h0_val, rs2_h0_val == -21846, rs1_h1_val == 8, rs1_h0_val == -21846
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa;  op2val:0x3fffaaaa
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0x08aaaa, 0x3fffaaaa, x30, x8, 464, x17)

inst_77:
// rs2_h1_val == -2, rs1_h0_val == -1025
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fbff;  op2val:0xfffef7ff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x00000000, 0xfff8fbff, 0xfffef7ff, x30, x8, 472, x17)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
