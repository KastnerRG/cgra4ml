
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smtt16 instruction of the RISC-V RV32PZicsr extension for the smtt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smtt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x15, rd==x31, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val == -17, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs1_h0_val != rs2_h0_val, rs2_h0_val == 2048, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: smtt16 ; op1:x17; op2:x15; dest:x31; op1val:0xffef8000;  op2val:0x4000800
TEST_RR_OP(smtt16, x31, x17, x15, 0x00000000, 0xffef8000, 0x4000800, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x27, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 32767, rs1_h1_val == 32767, rs2_h0_val == -9
// opcode: smtt16 ; op1:x7; op2:x7; dest:x27; op1val:0x7fff0007;  op2val:0x7ffffff7
TEST_RR_OP(smtt16, x27, x7, x7, 0x00000000, 0x7fff0007, 0x7ffffff7, x4, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x25, rs2==x16, rd==x25, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -33, rs1_h1_val == -2
// opcode: smtt16 ; op1:x25; op2:x16; dest:x25; op1val:0xfffefff9;  op2val:0xffdf0006
TEST_RR_OP(smtt16, x25, x25, x16, 0x00000000, 0xfffefff9, 0xffdf0006, x4, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 128, rs1_h0_val == 2048, rs2_h1_val == -129
// opcode: smtt16 ; op1:x22; op2:x22; dest:x22; op1val:0x800800;  op2val:0xff7ffff7
TEST_RR_OP(smtt16, x22, x22, x22, 0x00000000, 0x800800, 0xff7ffff7, x4, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x30, rd==x30, rs1_h0_val == rs2_h0_val, rs1_h1_val == -5, rs1_h0_val == -65, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -257, rs2_h0_val == -65
// opcode: smtt16 ; op1:x9; op2:x30; dest:x30; op1val:0xfffbffbf;  op2val:0xfeffffbf
TEST_RR_OP(smtt16, x30, x9, x30, 0x00000000, 0xfffbffbf, 0xfeffffbf, x4, 16, x5)

inst_5:
// rs1==x0, rs2==x26, rd==x9, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -1, rs1_h0_val == 21845, rs1_h1_val == -1025, rs2_h0_val == 32
// opcode: smtt16 ; op1:x0; op2:x26; dest:x9; op1val:0xfbff5555;  op2val:0xffff0020
TEST_RR_OP(smtt16, x9, x0, x26, 0x00000000, 0xfbff5555, 0xffff0020, x4, 20, x5)

inst_6:
// rs1==x23, rs2==x14, rd==x13, rs2_h1_val == -21846, rs1_h0_val == -16385, rs2_h0_val == -16385
// opcode: smtt16 ; op1:x23; op2:x14; dest:x13; op1val:0x07bfff;  op2val:0xaaaabfff
TEST_RR_OP(smtt16, x13, x23, x14, 0x00000000, 0x07bfff, 0xaaaabfff, x4, 24, x5)

inst_7:
// rs1==x15, rs2==x1, rd==x7, rs2_h1_val == 21845, rs1_h1_val == -3, rs1_h0_val == 1024
// opcode: smtt16 ; op1:x15; op2:x1; dest:x7; op1val:0xfffd0400;  op2val:0x55550005
TEST_RR_OP(smtt16, x7, x15, x1, 0x00000000, 0xfffd0400, 0x55550005, x4, 28, x5)

inst_8:
// rs1==x13, rs2==x12, rd==x29, rs2_h1_val == -16385, rs2_h0_val == -513, rs1_h1_val == 1
// opcode: smtt16 ; op1:x13; op2:x12; dest:x29; op1val:0x010007;  op2val:0xbffffdff
TEST_RR_OP(smtt16, x29, x13, x12, 0x00000000, 0x010007, 0xbffffdff, x4, 32, x5)

inst_9:
// rs1==x20, rs2==x28, rd==x19, rs2_h1_val == -8193, rs2_h0_val == 16384
// opcode: smtt16 ; op1:x20; op2:x28; dest:x19; op1val:0x06fffc;  op2val:0xdfff4000
TEST_RR_OP(smtt16, x19, x20, x28, 0x00000000, 0x06fffc, 0xdfff4000, x4, 36, x5)

inst_10:
// rs1==x21, rs2==x2, rd==x10, rs2_h1_val == -4097, rs1_h0_val == -513, rs1_h1_val == 4096, rs2_h0_val == 32767
// opcode: smtt16 ; op1:x21; op2:x2; dest:x10; op1val:0x1000fdff;  op2val:0xefff7fff
TEST_RR_OP(smtt16, x10, x21, x2, 0x00000000, 0x1000fdff, 0xefff7fff, x4, 40, x5)

inst_11:
// rs1==x26, rs2==x9, rd==x18, rs2_h1_val == -2049, rs1_h0_val == -2, rs2_h0_val == -4097, rs1_h1_val == 0
// opcode: smtt16 ; op1:x26; op2:x9; dest:x18; op1val:0x00fffe;  op2val:0xf7ffefff
TEST_RR_OP(smtt16, x18, x26, x9, 0x00000000, 0x00fffe, 0xf7ffefff, x4, 44, x5)

inst_12:
// rs1==x3, rs2==x18, rd==x11, rs2_h1_val == -1025, rs1_h0_val == 64
// opcode: smtt16 ; op1:x3; op2:x18; dest:x11; op1val:0x7fff0040;  op2val:0xfbfffffa
TEST_RR_OP(smtt16, x11, x3, x18, 0x00000000, 0x7fff0040, 0xfbfffffa, x4, 48, x5)

inst_13:
// rs1==x29, rs2==x27, rd==x28, rs2_h1_val == -513, rs1_h0_val == -8193, rs2_h0_val == 16
// opcode: smtt16 ; op1:x29; op2:x27; dest:x28; op1val:0x09dfff;  op2val:0xfdff0010
TEST_RR_OP(smtt16, x28, x29, x27, 0x00000000, 0x09dfff, 0xfdff0010, x4, 52, x9)

inst_14:
// rs1==x19, rs2==x31, rd==x2, rs2_h1_val == -65, rs2_h0_val == -33, rs1_h0_val == 4096
// opcode: smtt16 ; op1:x19; op2:x31; dest:x2; op1val:0x091000;  op2val:0xffbfffdf
TEST_RR_OP(smtt16, x2, x19, x31, 0x00000000, 0x091000, 0xffbfffdf, x4, 56, x9)

inst_15:
// rs1==x30, rs2==x3, rd==x15, rs2_h1_val == -17, rs1_h1_val == 1024, rs1_h0_val == 16
// opcode: smtt16 ; op1:x30; op2:x3; dest:x15; op1val:0x4000010;  op2val:0xffef4000
TEST_RR_OP(smtt16, x15, x30, x3, 0x00000000, 0x4000010, 0xffef4000, x4, 60, x9)

inst_16:
// rs1==x6, rs2==x17, rd==x0, rs2_h1_val == -9, rs2_h0_val == -32768, rs1_h0_val == 4
// opcode: smtt16 ; op1:x6; op2:x17; dest:x0; op1val:0xffef0004;  op2val:0xfff78000
TEST_RR_OP(smtt16, x0, x6, x17, 0x00000000, 0xffef0004, 0xfff78000, x4, 64, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x16, rs2==x5, rd==x20, rs2_h1_val == -5, rs1_h0_val == -5, rs1_h1_val == 16
// opcode: smtt16 ; op1:x16; op2:x5; dest:x20; op1val:0x10fffb;  op2val:0xfffb4000
TEST_RR_OP(smtt16, x20, x16, x5, 0x00000000, 0x10fffb, 0xfffb4000, x7, 0, x9)

inst_18:
// rs1==x28, rs2==x4, rd==x8, rs2_h1_val == -3, rs2_h0_val == -1025
// opcode: smtt16 ; op1:x28; op2:x4; dest:x8; op1val:0x3fff0009;  op2val:0xfffdfbff
TEST_RR_OP(smtt16, x8, x28, x4, 0x00000000, 0x3fff0009, 0xfffdfbff, x7, 4, x9)

inst_19:
// rs1==x11, rs2==x19, rd==x5, rs2_h1_val == -2, rs1_h0_val == -2049, rs1_h1_val == -129
// opcode: smtt16 ; op1:x11; op2:x19; dest:x5; op1val:0xff7ff7ff;  op2val:0xfffe4000
TEST_RR_OP(smtt16, x5, x11, x19, 0x00000000, 0xff7ff7ff, 0xfffe4000, x7, 8, x9)

inst_20:
// rs1==x2, rs2==x25, rd==x21, rs2_h1_val == -32768, rs1_h1_val == 256
// opcode: smtt16 ; op1:x2; op2:x25; dest:x21; op1val:0x1000800;  op2val:0x8000fff9
TEST_RR_OP(smtt16, x21, x2, x25, 0x00000000, 0x1000800, 0x8000fff9, x7, 12, x9)

inst_21:
// rs1==x18, rs2==x8, rd==x6, rs2_h1_val == 16384, rs1_h1_val == -8193, rs1_h0_val == 128
// opcode: smtt16 ; op1:x18; op2:x8; dest:x6; op1val:0xdfff0080;  op2val:0x40007fff
TEST_RR_OP(smtt16, x6, x18, x8, 0x00000000, 0xdfff0080, 0x40007fff, x7, 16, x9)

inst_22:
// rs1==x14, rs2==x20, rd==x26, rs2_h1_val == 8192, rs2_h0_val == 8
// opcode: smtt16 ; op1:x14; op2:x20; dest:x26; op1val:0xfffedfff;  op2val:0x20000008
TEST_RR_OP(smtt16, x26, x14, x20, 0x00000000, 0xfffedfff, 0x20000008, x7, 20, x9)

inst_23:
// rs1==x10, rs2==x11, rd==x1, rs2_h1_val == 4096, 
// opcode: smtt16 ; op1:x10; op2:x11; dest:x1; op1val:0xfff9f7ff;  op2val:0x1000fff9
TEST_RR_OP(smtt16, x1, x10, x11, 0x00000000, 0xfff9f7ff, 0x1000fff9, x7, 24, x9)

inst_24:
// rs1==x12, rs2==x24, rd==x4, rs2_h1_val == 2048, rs1_h0_val == -129, rs1_h1_val == -32768
// opcode: smtt16 ; op1:x12; op2:x24; dest:x4; op1val:0x8000ff7f;  op2val:0x8008000
TEST_RR_OP(smtt16, x4, x12, x24, 0x00000000, 0x8000ff7f, 0x8008000, x7, 28, x9)

inst_25:
// rs1==x1, rs2==x0, rd==x24, rs2_h1_val == 512, rs2_h0_val == 0
// opcode: smtt16 ; op1:x1; op2:x0; dest:x24; op1val:0xfffa0005;  op2val:0x2000000
TEST_RR_OP(smtt16, x24, x1, x0, 0x00000000, 0xfffa0005, 0x2000000, x7, 32, x2)

inst_26:
// rs1==x27, rs2==x29, rd==x14, rs2_h1_val == 256, rs2_h0_val == -5, rs1_h0_val == -3
// opcode: smtt16 ; op1:x27; op2:x29; dest:x14; op1val:0x06fffd;  op2val:0x100fffb
TEST_RR_OP(smtt16, x14, x27, x29, 0x00000000, 0x06fffd, 0x100fffb, x7, 36, x2)

inst_27:
// rs1==x5, rs2==x23, rd==x17, rs2_h1_val == 128, rs2_h0_val == -21846
// opcode: smtt16 ; op1:x5; op2:x23; dest:x17; op1val:0xff7f1000;  op2val:0x80aaaa
TEST_RR_OP(smtt16, x17, x5, x23, 0x00000000, 0xff7f1000, 0x80aaaa, x7, 40, x2)

inst_28:
// rs1==x8, rs2==x21, rd==x16, rs2_h1_val == 64, rs2_h0_val == 2
// opcode: smtt16 ; op1:x8; op2:x21; dest:x16; op1val:0xfffbc000;  op2val:0x400002
TEST_RR_OP(smtt16, x16, x8, x21, 0x00000000, 0xfffbc000, 0x400002, x7, 44, x2)

inst_29:
// rs1==x31, rs2==x13, rd==x12, rs2_h1_val == 32, 
// opcode: smtt16 ; op1:x31; op2:x13; dest:x12; op1val:0xfbffbfff;  op2val:0x20ffbf
TEST_RR_OP(smtt16, x12, x31, x13, 0x00000000, 0xfbffbfff, 0x20ffbf, x7, 48, x2)

inst_30:
// rs1==x24, rs2==x10, rd==x3, rs1_h0_val == -1025, 
// opcode: smtt16 ; op1:x24; op2:x10; dest:x3; op1val:0xfff8fbff;  op2val:0xfff77fff
TEST_RR_OP(smtt16, x3, x24, x10, 0x00000000, 0xfff8fbff, 0xfff77fff, x7, 52, x2)

inst_31:
// rs1==x4, rs2==x6, rd==x23, rs1_h0_val == -257, 
// opcode: smtt16 ; op1:x4; op2:x6; dest:x23; op1val:0x100feff;  op2val:0x800bfff
TEST_RR_OP(smtt16, x23, x4, x6, 0x00000000, 0x100feff, 0x800bfff, x7, 56, x2)

inst_32:
// rs1_h0_val == -33, rs2_h1_val == 16, rs2_h0_val == 256, rs1_h1_val == 21845
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffdf;  op2val:0x100100
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x5555ffdf, 0x100100, x7, 60, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_h0_val == -17, rs2_h1_val == 8, rs2_h0_val == -1
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffef;  op2val:0x08ffff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x01ffef, 0x08ffff, x1, 0, x2)

inst_34:
// rs1_h0_val == -9, rs2_h0_val == -129
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff7;  op2val:0x1000ff7f
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x09fff7, 0x1000ff7f, x1, 4, x2)

inst_35:
// rs1_h0_val == 16384, rs1_h1_val == -1, rs2_h0_val == 21845, rs2_h1_val == 2
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff4000;  op2val:0x025555
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xffff4000, 0x025555, x1, 8, x2)

inst_36:
// rs1_h0_val == 8192, rs1_h1_val == 16384
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40002000;  op2val:0xfffbfff6
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x40002000, 0xfffbfff6, x1, 12, x2)

inst_37:
// rs1_h0_val == 512, rs1_h1_val == -9
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70200;  op2val:0x400006
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfff70200, 0x400006, x1, 16, x2)

inst_38:
// rs1_h0_val == 256, rs1_h1_val == 8
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080100;  op2val:0xfff7ffbf
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x080100, 0xfff7ffbf, x1, 20, x2)

inst_39:
// rs1_h0_val == 32, rs1_h1_val == 8192
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020;  op2val:0xffbf0008
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x20000020, 0xffbf0008, x1, 24, x2)

inst_40:
// rs1_h0_val == 8, rs1_h1_val == -16385
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0008;  op2val:0x80ff7f
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xbfff0008, 0x80ff7f, x1, 28, x2)

inst_41:
// rs1_h0_val == 2, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000002;  op2val:0xfeffff7f
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xc0000002, 0xfeffff7f, x1, 32, x2)

inst_42:
// rs1_h0_val == 1, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000001;  op2val:0x020002
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xc0000001, 0x020002, x1, 36, x2)

inst_43:
// rs1_h0_val == 0, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70000;  op2val:0xaaaafff7
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfff70000, 0xaaaafff7, x1, 40, x2)

inst_44:
// rs1_h0_val == -1, rs2_h0_val == -2049
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffff;  op2val:0x08f7ff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x03ffff, 0x08f7ff, x1, 44, x2)

inst_45:
// rs2_h1_val == 4, rs1_h1_val == -65
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffc;  op2val:0x040009
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xffbffffc, 0x040009, x1, 48, x2)

inst_46:
// rs2_h0_val == -3, rs1_h1_val == 4
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x044000;  op2val:0x4000fffd
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x044000, 0x4000fffd, x1, 52, x2)

inst_47:
// rs2_h0_val == -2, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef;  op2val:0x4000fffe
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x08ffef, 0x4000fffe, x1, 56, x2)

inst_48:
// rs2_h0_val == 8192, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800006;  op2val:0x052000
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x800006, 0x052000, x1, 60, x2)

inst_49:
// rs2_h0_val == 4096, rs1_h1_val == 512
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000002;  op2val:0x071000
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x2000002, 0x071000, x1, 64, x2)

inst_50:
// rs2_h0_val == 1024, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffe;  op2val:0x10000400
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x3ffffffe, 0x10000400, x1, 68, x2)

inst_51:
// rs2_h0_val == 512, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0002;  op2val:0xfbff0200
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfffa0002, 0xfbff0200, x1, 72, x2)

inst_52:
// rs2_h0_val == 128, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400feff;  op2val:0xdfff0080
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x400feff, 0xdfff0080, x1, 76, x2)

inst_53:
// rs2_h0_val == 64, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0003;  op2val:0xfff80040
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xff7f0003, 0xfff80040, x1, 80, x2)

inst_54:
// rs2_h0_val == 4, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff5555;  op2val:0x80000004
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x3fff5555, 0x80000004, x1, 84, x2)

inst_55:
// rs2_h0_val == 1, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcc000;  op2val:0x4000001
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfffcc000, 0x4000001, x1, 88, x2)

inst_56:
// rs1_h1_val == -21846, rs1_h0_val == 32767
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7fff;  op2val:0xc000ffff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xaaaa7fff, 0xc000ffff, x1, 92, x2)

inst_57:
// rs1_h1_val == -4097, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020;  op2val:0x800efff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xefff0020, 0x800efff, x1, 96, x2)

inst_58:
// rs1_h1_val == -33, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdfff;  op2val:0x030100
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xffdfdfff, 0x030100, x1, 100, x2)

inst_59:
// rs1_h1_val == 2048, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000008;  op2val:0xfffc0100
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x8000008, 0xfffc0100, x1, 104, x2)

inst_60:
// rs1_h0_val == -4097, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0xfff9fffd
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x4000efff, 0xfff9fffd, x1, 108, x2)

inst_61:
// rs2_h1_val == 1, rs1_h0_val == -21846
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaa;  op2val:0x010001
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xff7faaaa, 0x010001, x1, 112, x2)

inst_62:
// rs2_h1_val == 0, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f;  op2val:0x000003
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfffdff7f, 0x000003, x1, 116, x2)

inst_63:
// rs1_h1_val == 64, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x402000;  op2val:0xfffd0004
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x402000, 0xfffd0004, x1, 120, x2)

inst_64:
// rs1_h1_val == 32, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x205555;  op2val:0xbffffff8
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x205555, 0xbffffff8, x1, 124, x2)

inst_65:
// rs2_h0_val == -8193, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7;  op2val:0x07dfff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x4000fff7, 0x07dfff, x1, 128, x2)

inst_66:
// rs1_h1_val == 2, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x020007;  op2val:0xff7ffffd
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x020007, 0xff7ffffd, x1, 132, x2)

inst_67:
// rs1_h1_val == -257, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0006;  op2val:0xfff73fff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfeff0006, 0xfff73fff, x1, 136, x2)

inst_68:
// rs2_h0_val == -257, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000bfff;  op2val:0x8000feff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x4000bfff, 0x8000feff, x1, 140, x2)

inst_69:
// rs1_h1_val == -2049, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0007;  op2val:0xfffe0007
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xf7ff0007, 0xfffe0007, x1, 144, x2)

inst_70:
// rs1_h1_val == -513, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff9;  op2val:0x10ffff
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfdfffff9, 0x10ffff, x1, 148, x2)

inst_71:
// rs2_h0_val == -17, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff8;  op2val:0xfff8ffef
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfdfffff8, 0xfff8ffef, x1, 152, x2)

inst_72:
// rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 32767, rs1_h1_val == 32767, rs2_h0_val == -9
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0007;  op2val:0x7ffffff7
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0x7fff0007, 0x7ffffff7, x1, 156, x2)

inst_73:
// rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -1, rs1_h0_val == 21845, rs1_h1_val == -1025, rs2_h0_val == 32
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555;  op2val:0xffff0020
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfbff5555, 0xffff0020, x1, 160, x2)

inst_74:
// rs2_h1_val == -9, rs2_h0_val == -32768, rs1_h0_val == 4
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0004;  op2val:0xfff78000
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xffef0004, 0xfff78000, x1, 164, x2)

inst_75:
// rs2_h1_val == 512, rs2_h0_val == 0
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0005;  op2val:0x2000000
TEST_RR_OP(smtt16, x31, x30, x29, 0x00000000, 0xfffa0005, 0x2000000, x1, 168, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 43*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
