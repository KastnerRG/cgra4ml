
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmplt16 instruction of the RISC-V RV32PZicsr extension for the ucmplt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmplt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x1, rd==x9, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 65519, rs2_h0_val == 65407
// opcode: ucmplt16 ; op1:x15; op2:x1; dest:x9; op1val:0xffef0000;  op2val:0x0eff7f
TEST_RR_OP(ucmplt16, x9, x15, x1, 0x00000000, 0xffef0000, 0x0eff7f, x13, 0, x19)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x4, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 256, rs2_h1_val == 8, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs1_h1_val == 8
// opcode: ucmplt16 ; op1:x7; op2:x7; dest:x4; op1val:0x080800;  op2val:0x080100
TEST_RR_OP(ucmplt16, x4, x7, x7, 0x00000000, 0x080800, 0x080100, x13, 4, x19)

inst_2:
// rs1 == rd != rs2, rs1==x17, rs2==x21, rd==x17, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 65471, rs2_h1_val == 63487
// opcode: ucmplt16 ; op1:x17; op2:x21; dest:x17; op1val:0xffbf0013;  op2val:0xf7ff0013
TEST_RR_OP(ucmplt16, x17, x17, x21, 0x00000000, 0xffbf0013, 0xf7ff0013, x13, 8, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs2_h1_val == 43690, 
// opcode: ucmplt16 ; op1:x23; op2:x23; dest:x23; op1val:0x0d000a;  op2val:0xaaaa0100
TEST_RR_OP(ucmplt16, x23, x23, x23, 0x00000000, 0x0d000a, 0xaaaa0100, x13, 12, x19)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x0, rd==x0, rs2_h1_val == 21845, rs1_h1_val == 21845, rs1_h0_val == 65535, rs2_h0_val == 65519
// opcode: ucmplt16 ; op1:x8; op2:x0; dest:x0; op1val:0x5555ffff;  op2val:0x5555ffef
TEST_RR_OP(ucmplt16, x0, x8, x0, 0x00000000, 0x5555ffff, 0x5555ffef, x13, 16, x19)

inst_5:
// rs1==x5, rs2==x12, rd==x29, rs2_h1_val == 32767, rs1_h1_val == 8192, rs2_h0_val == 0
// opcode: ucmplt16 ; op1:x5; op2:x12; dest:x29; op1val:0x20000011;  op2val:0x7fff0000
TEST_RR_OP(ucmplt16, x29, x5, x12, 0x00000000, 0x20000011, 0x7fff0000, x13, 20, x19)

inst_6:
// rs1==x9, rs2==x10, rd==x8, rs2_h1_val == 49151, rs1_h0_val == 8192, rs1_h1_val == 32767
// opcode: ucmplt16 ; op1:x9; op2:x10; dest:x8; op1val:0x7fff2000;  op2val:0xbfff000b
TEST_RR_OP(ucmplt16, x8, x9, x10, 0x00000000, 0x7fff2000, 0xbfff000b, x13, 24, x19)

inst_7:
// rs1==x20, rs2==x24, rd==x14, rs2_h1_val == 57343, rs1_h0_val == 4096, rs2_h0_val == 63487
// opcode: ucmplt16 ; op1:x20; op2:x24; dest:x14; op1val:0x061000;  op2val:0xdffff7ff
TEST_RR_OP(ucmplt16, x14, x20, x24, 0x00000000, 0x061000, 0xdffff7ff, x13, 28, x19)

inst_8:
// rs1==x24, rs2==x27, rd==x18, rs2_h1_val == 61439, rs2_h0_val == 65531, rs1_h1_val == 43690
// opcode: ucmplt16 ; op1:x24; op2:x27; dest:x18; op1val:0xaaaa000e;  op2val:0xeffffffb
TEST_RR_OP(ucmplt16, x18, x24, x27, 0x00000000, 0xaaaa000e, 0xeffffffb, x13, 32, x19)

inst_9:
// rs1==x26, rs2==x6, rd==x16, rs2_h1_val == 64511, rs1_h0_val == 512, rs1_h1_val == 61439
// opcode: ucmplt16 ; op1:x26; op2:x6; dest:x16; op1val:0xefff0200;  op2val:0xfbff0007
TEST_RR_OP(ucmplt16, x16, x26, x6, 0x00000000, 0xefff0200, 0xfbff0007, x13, 36, x19)

inst_10:
// rs1==x30, rs2==x2, rd==x11, rs2_h1_val == 65023, rs1_h1_val == 0, rs1_h0_val == 57343, rs2_h0_val == 16
// opcode: ucmplt16 ; op1:x30; op2:x2; dest:x11; op1val:0x00dfff;  op2val:0xfdff0010
TEST_RR_OP(ucmplt16, x11, x30, x2, 0x00000000, 0x00dfff, 0xfdff0010, x13, 40, x19)

inst_11:
// rs1==x1, rs2==x3, rd==x12, rs2_h1_val == 65279, rs1_h0_val == 65471, rs1_h1_val == 65279
// opcode: ucmplt16 ; op1:x1; op2:x3; dest:x12; op1val:0xfeffffbf;  op2val:0xfeff0009
TEST_RR_OP(ucmplt16, x12, x1, x3, 0x00000000, 0xfeffffbf, 0xfeff0009, x13, 44, x19)

inst_12:
// rs1==x0, rs2==x30, rd==x28, rs2_h1_val == 65407, rs2_h0_val == 1, rs1_h0_val == 63487
// opcode: ucmplt16 ; op1:x0; op2:x30; dest:x28; op1val:0x05f7ff;  op2val:0xff7f0001
TEST_RR_OP(ucmplt16, x28, x0, x30, 0x00000000, 0x05f7ff, 0xff7f0001, x13, 48, x19)

inst_13:
// rs1==x10, rs2==x19, rd==x5, rs2_h1_val == 65471, rs1_h0_val == 65407, rs1_h1_val == 32768
// opcode: ucmplt16 ; op1:x10; op2:x19; dest:x5; op1val:0x8000ff7f;  op2val:0xffbffffb
TEST_RR_OP(ucmplt16, x5, x10, x19, 0x00000000, 0x8000ff7f, 0xffbffffb, x13, 52, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x27, rs2==x9, rd==x15, rs2_h1_val == 65503, rs1_h1_val == 64, rs2_h0_val == 65279, rs1_h0_val == 61439
// opcode: ucmplt16 ; op1:x27; op2:x9; dest:x15; op1val:0x40efff;  op2val:0xffdffeff
TEST_RR_OP(ucmplt16, x15, x27, x9, 0x00000000, 0x40efff, 0xffdffeff, x1, 0, x3)

inst_15:
// rs1==x16, rs2==x5, rd==x25, rs2_h1_val == 65519, rs1_h0_val == 43690
// opcode: ucmplt16 ; op1:x16; op2:x5; dest:x25; op1val:0x8000aaaa;  op2val:0xffef000e
TEST_RR_OP(ucmplt16, x25, x16, x5, 0x00000000, 0x8000aaaa, 0xffef000e, x1, 4, x3)

inst_16:
// rs1==x14, rs2==x16, rd==x27, rs2_h1_val == 65527, rs1_h0_val == 1024, rs1_h1_val == 57343
// opcode: ucmplt16 ; op1:x14; op2:x16; dest:x27; op1val:0xdfff0400;  op2val:0xfff70009
TEST_RR_OP(ucmplt16, x27, x14, x16, 0x00000000, 0xdfff0400, 0xfff70009, x1, 8, x3)

inst_17:
// rs1==x4, rs2==x18, rd==x30, rs2_h1_val == 65531, rs1_h0_val == 49151
// opcode: ucmplt16 ; op1:x4; op2:x18; dest:x30; op1val:0x5555bfff;  op2val:0xfffb000f
TEST_RR_OP(ucmplt16, x30, x4, x18, 0x00000000, 0x5555bfff, 0xfffb000f, x1, 12, x3)

inst_18:
// rs1==x25, rs2==x26, rd==x20, rs2_h1_val == 65533, rs2_h0_val == 65534, rs1_h0_val == 32
// opcode: ucmplt16 ; op1:x25; op2:x26; dest:x20; op1val:0x050020;  op2val:0xfffdfffe
TEST_RR_OP(ucmplt16, x20, x25, x26, 0x00000000, 0x050020, 0xfffdfffe, x1, 16, x3)

inst_19:
// rs1==x22, rs2==x29, rd==x7, rs2_h1_val == 65534, rs1_h1_val == 64511
// opcode: ucmplt16 ; op1:x22; op2:x29; dest:x7; op1val:0xfbff0003;  op2val:0xfffe0001
TEST_RR_OP(ucmplt16, x7, x22, x29, 0x00000000, 0xfbff0003, 0xfffe0001, x1, 20, x3)

inst_20:
// rs1==x18, rs2==x4, rd==x22, rs2_h1_val == 32768, rs2_h0_val == 65533, rs1_h0_val == 32767
// opcode: ucmplt16 ; op1:x18; op2:x4; dest:x22; op1val:0x117fff;  op2val:0x8000fffd
TEST_RR_OP(ucmplt16, x22, x18, x4, 0x00000000, 0x117fff, 0x8000fffd, x1, 24, x3)

inst_21:
// rs1==x12, rs2==x8, rd==x31, rs2_h1_val == 16384, 
// opcode: ucmplt16 ; op1:x12; op2:x8; dest:x31; op1val:0x0c000b;  op2val:0x40000011
TEST_RR_OP(ucmplt16, x31, x12, x8, 0x00000000, 0x0c000b, 0x40000011, x1, 28, x3)

inst_22:
// rs1==x31, rs2==x25, rd==x10, rs2_h1_val == 8192, rs1_h0_val == 65519, rs2_h0_val == 61439
// opcode: ucmplt16 ; op1:x31; op2:x25; dest:x10; op1val:0x8000ffef;  op2val:0x2000efff
TEST_RR_OP(ucmplt16, x10, x31, x25, 0x00000000, 0x8000ffef, 0x2000efff, x1, 32, x3)

inst_23:
// rs1==x28, rs2==x13, rd==x2, rs2_h1_val == 4096, rs2_h0_val == 65527
// opcode: ucmplt16 ; op1:x28; op2:x13; dest:x2; op1val:0x55551000;  op2val:0x1000fff7
TEST_RR_OP(ucmplt16, x2, x28, x13, 0x00000000, 0x55551000, 0x1000fff7, x1, 36, x3)

inst_24:
// rs1==x13, rs2==x17, rd==x6, rs2_h1_val == 2048, rs1_h0_val == 65279, rs2_h0_val == 4096
// opcode: ucmplt16 ; op1:x13; op2:x17; dest:x6; op1val:0x0afeff;  op2val:0x8001000
TEST_RR_OP(ucmplt16, x6, x13, x17, 0x00000000, 0x0afeff, 0x8001000, x1, 40, x3)

inst_25:
// rs1==x19, rs2==x31, rd==x13, rs2_h1_val == 1024, rs1_h1_val == 65527
// opcode: ucmplt16 ; op1:x19; op2:x31; dest:x13; op1val:0xfff70800;  op2val:0x400f7ff
TEST_RR_OP(ucmplt16, x13, x19, x31, 0x00000000, 0xfff70800, 0x400f7ff, x1, 44, x3)

inst_26:
// rs1==x29, rs2==x11, rd==x26, rs2_h1_val == 512, rs2_h0_val == 16384
// opcode: ucmplt16 ; op1:x29; op2:x11; dest:x26; op1val:0x120009;  op2val:0x2004000
TEST_RR_OP(ucmplt16, x26, x29, x11, 0x00000000, 0x120009, 0x2004000, x1, 48, x3)

inst_27:
// rs1==x21, rs2==x15, rd==x19, rs2_h1_val == 256, 
// opcode: ucmplt16 ; op1:x21; op2:x15; dest:x19; op1val:0xaaaaff7f;  op2val:0x1000013
TEST_RR_OP(ucmplt16, x19, x21, x15, 0x00000000, 0xaaaaff7f, 0x1000013, x1, 52, x5)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_28:
// rs1==x6, rs2==x14, rd==x21, rs2_h1_val == 128, rs2_h0_val == 2, rs1_h0_val == 65534, rs1_h1_val == 1
// opcode: ucmplt16 ; op1:x6; op2:x14; dest:x21; op1val:0x01fffe;  op2val:0x800002
TEST_RR_OP(ucmplt16, x21, x6, x14, 0x00000000, 0x01fffe, 0x800002, x4, 0, x5)

inst_29:
// rs1==x3, rs2==x28, rd==x1, rs2_h1_val == 64, rs2_h0_val == 128
// opcode: ucmplt16 ; op1:x3; op2:x28; dest:x1; op1val:0xfeff0009;  op2val:0x400080
TEST_RR_OP(ucmplt16, x1, x3, x28, 0x00000000, 0xfeff0009, 0x400080, x4, 4, x5)

inst_30:
// rs1==x11, rs2==x20, rd==x3, rs2_h1_val == 32, 
// opcode: ucmplt16 ; op1:x11; op2:x20; dest:x3; op1val:0x8000000a;  op2val:0x200007
TEST_RR_OP(ucmplt16, x3, x11, x20, 0x00000000, 0x8000000a, 0x200007, x4, 8, x5)

inst_31:
// rs1==x2, rs2==x22, rd==x24, rs1_h0_val == 65531, 
// opcode: ucmplt16 ; op1:x2; op2:x22; dest:x24; op1val:0x12fffb;  op2val:0x80efff
TEST_RR_OP(ucmplt16, x24, x2, x22, 0x00000000, 0x12fffb, 0x80efff, x4, 12, x5)

inst_32:
// rs1_h0_val == 65533, rs1_h1_val == 65023, rs2_h0_val == 32
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffd;  op2val:0x2000020
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xfdfffffd, 0x2000020, x4, 16, x5)

inst_33:
// rs1_h0_val == 32768, rs1_h1_val == 63487
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff8000;  op2val:0x55550080
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xf7ff8000, 0x55550080, x4, 20, x5)

inst_34:
// rs1_h0_val == 16384, rs1_h1_val == 65407, rs2_h1_val == 65535
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f4000;  op2val:0xfffffffe
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xff7f4000, 0xfffffffe, x4, 24, x5)

inst_35:
// rs1_h0_val == 256, rs2_h0_val == 1024
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100;  op2val:0x7fff0400
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x7fff0100, 0x7fff0400, x4, 28, x5)

inst_36:
// rs1_h0_val == 128, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0080;  op2val:0x124000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x0b0080, 0x124000, x4, 32, x5)

inst_37:
// rs1_h0_val == 64, rs1_h1_val == 65535
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0040;  op2val:0x06efff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffff0040, 0x06efff, x4, 36, x5)

inst_38:
// rs1_h0_val == 16, rs2_h0_val == 65023
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0010;  op2val:0xbffffdff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x7fff0010, 0xbffffdff, x4, 40, x5)

inst_39:
// rs1_h0_val == 8, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0008;  op2val:0x2000000c
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x0a0008, 0x2000000c, x4, 44, x5)

inst_40:
// rs1_h0_val == 4, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0004;  op2val:0x0afffd
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xaaaa0004, 0x0afffd, x4, 48, x5)

inst_41:
// rs1_h0_val == 2, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0002;  op2val:0x0d0002
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffef0002, 0x0d0002, x4, 52, x5)

inst_42:
// rs1_h0_val == 1, rs2_h1_val == 16
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70001;  op2val:0x10fffd
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xfff70001, 0x10fffd, x4, 56, x5)

inst_43:
// rs2_h1_val == 4, rs2_h0_val == 65471, rs1_h1_val == 65531
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbff7f;  op2val:0x04ffbf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xfffbff7f, 0x04ffbf, x4, 60, x5)

inst_44:
// rs2_h1_val == 2, rs1_h1_val == 32
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x207fff;  op2val:0x020000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x207fff, 0x020000, x4, 64, x5)

inst_45:
// rs2_h1_val == 1, rs1_h0_val == 64511, rs1_h1_val == 65503
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbff;  op2val:0x010007
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffdffbff, 0x010007, x4, 68, x5)

inst_46:
// rs2_h1_val == 0, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbff;  op2val:0x00feff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffdffbff, 0x00feff, x4, 72, x5)

inst_47:
// rs2_h0_val == 43690, rs1_h1_val == 1024
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000007;  op2val:0xfffbaaaa
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x4000007, 0xfffbaaaa, x4, 76, x5)

inst_48:
// rs2_h0_val == 512, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e;  op2val:0x100200
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x00000e, 0x100200, x4, 80, x5)

inst_49:
// rs2_h0_val == 64, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20007fff;  op2val:0x0d0040
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x20007fff, 0x0d0040, x4, 84, x5)

inst_50:
// rs2_h0_val == 8, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x130020;  op2val:0xff7f0008
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x130020, 0xff7f0008, x4, 88, x5)

inst_51:
// rs2_h0_val == 4, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0001;  op2val:0x2000004
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffbf0001, 0x2000004, x4, 92, x5)

inst_52:
// rs2_h0_val == 65535, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b8000;  op2val:0x0dffff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x0b8000, 0x0dffff, x4, 96, x5)

inst_53:
// rs1_h1_val == 49151, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0040;  op2val:0x800013
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xbfff0040, 0x800013, x4, 100, x5)

inst_54:
// rs1_h1_val == 65533, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7fff;  op2val:0x070012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xfffd7fff, 0x070012, x4, 104, x5)

inst_55:
// rs1_h1_val == 65534, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff;  op2val:0x114000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xfffef7ff, 0x114000, x4, 108, x5)

inst_56:
// rs1_h1_val == 16384, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000800;  op2val:0x10004000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x40000800, 0x10004000, x4, 112, x5)

inst_57:
// rs1_h1_val == 4096, rs2_h0_val == 49151
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffe;  op2val:0x0ebfff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x1000fffe, 0x0ebfff, x4, 116, x5)

inst_58:
// rs1_h1_val == 2048, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080;  op2val:0x110004
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x8000080, 0x110004, x4, 120, x5)

inst_59:
// rs1_h1_val == 512, rs2_h0_val == 2048
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200f7ff;  op2val:0x030800
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x200f7ff, 0x030800, x4, 124, x5)

inst_60:
// rs1_h1_val == 256, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000003;  op2val:0xfffb000c
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x1000003, 0xfffb000c, x4, 128, x5)

inst_61:
// rs1_h1_val == 128, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x801000;  op2val:0x090000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x801000, 0x090000, x4, 132, x5)

inst_62:
// rs2_h0_val == 21845, rs1_h0_val == 65023
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffdff;  op2val:0xffbf5555
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x7ffffdff, 0xffbf5555, x4, 136, x5)

inst_63:
// rs1_h1_val == 16, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100005;  op2val:0x80000800
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x100005, 0x80000800, x4, 140, x5)

inst_64:
// rs2_h0_val == 32767, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x401000;  op2val:0xffff7fff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x401000, 0xffff7fff, x4, 144, x5)

inst_65:
// rs1_h1_val == 4, rs2_h0_val == 8192
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x044000;  op2val:0xffbf2000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x044000, 0xffbf2000, x4, 148, x5)

inst_66:
// rs2_h0_val == 57343, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaa;  op2val:0x0ddfff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffefaaaa, 0x0ddfff, x4, 152, x5)

inst_67:
// rs2_h0_val == 64511, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x0dfbff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x0dfbff, x4, 156, x5)

inst_68:
// rs1_h0_val == 21845, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x075555;  op2val:0x2000004
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x075555, 0x2000004, x4, 160, x5)

inst_69:
// rs2_h0_val == 65503, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200;  op2val:0xfffeffdf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffbf0200, 0xfffeffdf, x4, 164, x5)

inst_70:
// rs1_h1_val == 2, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x020005;  op2val:0x020012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x020005, 0x020012, x4, 168, x5)

inst_71:
// rs2_h0_val == 32768, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000c;  op2val:0xf7ff8000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x20000c, 0xf7ff8000, x4, 172, x5)

inst_72:
// rs1_h0_val == 65503, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x10000005
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffffffdf, 0x10000005, x4, 176, x5)

inst_73:
// rs1_h0_val == 65527, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff7;  op2val:0x7fff0007
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0xffbffff7, 0x7fff0007, x4, 180, x5)

inst_74:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 256, rs2_h1_val == 8, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs1_h1_val == 8
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080800;  op2val:0x080100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x080800, 0x080100, x4, 184, x5)

inst_75:
// rs2_h1_val == 43690, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000a;  op2val:0xaaaa0100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x0d000a, 0xaaaa0100, x4, 188, x5)

inst_76:
// rs2_h1_val == 21845, rs1_h1_val == 21845, rs1_h0_val == 65535, rs2_h0_val == 65519
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff;  op2val:0x5555ffef
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x00000000, 0x5555ffff, 0x5555ffef, x4, 192, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 49*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
