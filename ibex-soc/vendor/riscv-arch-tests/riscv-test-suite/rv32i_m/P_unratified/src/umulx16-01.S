
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umulx16 instruction of the RISC-V RV32PZicsr extension for the umulx16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umulx16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x11, rd==x26, rs1_h0_val == 0, rs2_h1_val == 0, rs2_h0_val == 32, rs1_h1_val == 256
// opcode: umulx16 ; op1:x28; op2:x11; dest:x26; op1val:0x01000000;  op2val:0x00000020
TEST_P64_PNN_OP(umulx16, x26, x27, x28, x11, 0x00000000, 0, 0x01000000, 0x00000020, x1, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x30, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 16384, rs2_h0_val == 256, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4, rs2_h1_val == 65533
// opcode: umulx16 ; op1:x20; op2:x20; dest:x30; op1val:0x40000004;  op2val:0xfffd0100
TEST_P64_PNN_OP(umulx16, x30, x31, x20, x20, 0x00000000, 0, 0x40000004, 0xfffd0100, x1, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x12, rs2==x8, rd==x12, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 128, rs1_h1_val == 32768, rs2_h1_val == 32768
// opcode: umulx16 ; op1:x12; op2:x8; dest:x12; op1val:0x80000080;  op2val:0x8000000a
TEST_P64_PNN_OP(umulx16, x12, x13, x12, x8, 0x00000000, 0, 0x80000080, 0x8000000a, x1, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h0_val == 2048, rs2_h1_val == 65535
// opcode: umulx16 ; op1:x2; op2:x2; dest:x2; op1val:0x00050800;  op2val:0xffff0800
TEST_P64_PNN_OP(umulx16, x2, x3, x2, x2, 0x00000000, 0, 0x00050800, 0xffff0800, x1, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x4, rd==x4, rs2_h1_val == 43690, rs2_h0_val == 4096
// opcode: umulx16 ; op1:x23; op2:x4; dest:x4; op1val:0x00110011;  op2val:0xaaaa1000
TEST_P64_PNN_OP(umulx16, x4, x5, x23, x4, 0x00000000, 0, 0x00110011, 0xaaaa1000, x1, 32, x5)

inst_5:
// rs1==x13, rs2==x0, rd==x14, rs2_h1_val == 21845, rs2_h0_val == 65023, rs1_h0_val == 65503, rs1_h1_val == 8192
// opcode: umulx16 ; op1:x13; op2:x0; dest:x14; op1val:0x2000ffdf;  op2val:0x5555fdff
TEST_P64_PNN_OP(umulx16, x14, x15, x13, x0, 0x00000000, 0, 0x2000ffdf, 0x5555fdff, x1, 40, x5)

inst_6:
// rs1==x17, rs2==x9, rd==x18, rs2_h1_val == 32767, rs2_h0_val == 65527
// opcode: umulx16 ; op1:x17; op2:x9; dest:x18; op1val:0x8000000c;  op2val:0x7ffffff7
TEST_P64_PNN_OP(umulx16, x18, x19, x17, x9, 0x00000000, 0, 0x8000000c, 0x7ffffff7, x1, 48, x5)

inst_7:
// rs1==x6, rs2==x23, rd==x28, rs2_h1_val == 49151, rs2_h0_val == 1024, rs1_h0_val == 43690, rs1_h1_val == 65535
// opcode: umulx16 ; op1:x6; op2:x23; dest:x28; op1val:0xffffaaaa;  op2val:0xbfff0400
TEST_P64_PNN_OP(umulx16, x28, x29, x6, x23, 0x00000000, 0, 0xffffaaaa, 0xbfff0400, x1, 56, x5)

inst_8:
// rs1==x7, rs2==x6, rd==x16, rs2_h1_val == 57343, rs2_h0_val == 512, rs1_h0_val == 4096, rs1_h1_val == 21845
// opcode: umulx16 ; op1:x7; op2:x6; dest:x16; op1val:0x55551000;  op2val:0xdfff0200
TEST_P64_PNN_OP(umulx16, x16, x17, x7, x6, 0x00000000, 0, 0x55551000, 0xdfff0200, x1, 64, x5)

inst_9:
// rs1==x16, rs2==x30, rd==x8, rs2_h1_val == 61439, rs1_h1_val == 32767
// opcode: umulx16 ; op1:x16; op2:x30; dest:x8; op1val:0x7fff000e;  op2val:0xefff000e
TEST_P64_PNN_OP(umulx16, x8, x9, x16, x30, 0x00000000, 0, 0x7fff000e, 0xefff000e, x1, 72, x5)

inst_10:
// rs1==x24, rs2==x3, rd==x20, rs2_h1_val == 63487, rs2_h0_val == 64511, rs1_h0_val == 64, rs1_h1_val == 4
// opcode: umulx16 ; op1:x24; op2:x3; dest:x20; op1val:0x00040040;  op2val:0xf7fffbff
TEST_P64_PNN_OP(umulx16, x20, x21, x24, x3, 0x00000000, 0, 0x00040040, 0xf7fffbff, x1, 80, x5)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_11:
// rs1==x1, rs2==x27, rd==x22, rs2_h1_val == 64511, rs1_h1_val == 61439, rs1_h0_val == 65534
// opcode: umulx16 ; op1:x1; op2:x27; dest:x22; op1val:0xeffffffe;  op2val:0xfbff0200
TEST_P64_PNN_OP(umulx16, x22, x23, x1, x27, 0x00000000, 0, 0xeffffffe, 0xfbff0200, x12, 0, x5)

inst_12:
// rs1==x30, rs2==x7, rd==x24, rs2_h1_val == 65023, 
// opcode: umulx16 ; op1:x30; op2:x7; dest:x24; op1val:0x000a0005;  op2val:0xfdff0100
TEST_P64_PNN_OP(umulx16, x24, x25, x30, x7, 0x00000000, 0, 0x000a0005, 0xfdff0100, x12, 8, x20)

inst_13:
// rs1==x4, rs2==x15, rd==x10, rs2_h1_val == 65279, rs2_h0_val == 63487
// opcode: umulx16 ; op1:x4; op2:x15; dest:x10; op1val:0x5555000c;  op2val:0xfefff7ff
TEST_P64_PNN_OP(umulx16, x10, x11, x4, x15, 0x00000000, 0, 0x5555000c, 0xfefff7ff, x12, 16, x20)

inst_14:
// rs1==x15, rs2==x24, rd==x6, rs2_h1_val == 65407, rs2_h0_val == 65531, rs1_h1_val == 2048
// opcode: umulx16 ; op1:x15; op2:x24; dest:x6; op1val:0x08000003;  op2val:0xff7ffffb
TEST_P64_PNN_OP(umulx16, x6, x7, x15, x24, 0x00000000, 0, 0x08000003, 0xff7ffffb, x12, 24, x20)

inst_15:
// rs1==x22, rs2==x21, rs2_h1_val == 65471, rs1_h1_val == 1024, rs1_h0_val == 16
// opcode: umulx16 ; op1:x22; op2:x21; dest:x14; op1val:0x04000010;  op2val:0xffbf0013
TEST_P64_PNN_OP(umulx16, x14, x15, x22, x21, 0x00000000, 0, 0x04000010, 0xffbf0013, x12, 32, x20)

inst_16:
// rs1==x18, rs2==x31, rs2_h1_val == 65503, rs2_h0_val == 32768
// opcode: umulx16 ; op1:x18; op2:x31; dest:x8; op1val:0x000c1000;  op2val:0xffdf8000
TEST_P64_PNN_OP(umulx16, x8, x9, x18, x31, 0x00000000, 0, 0x000c1000, 0xffdf8000, x12, 40, x20)

inst_17:
// rs1==x26, rs2==x14, rs2_h1_val == 65519, rs1_h1_val == 65023
// opcode: umulx16 ; op1:x26; op2:x14; dest:x4; op1val:0xfdffffdf;  op2val:0xffef000b
TEST_P64_PNN_OP(umulx16, x4, x5, x26, x14, 0x00000000, 0, 0xfdffffdf, 0xffef000b, x12, 48, x20)

inst_18:
// rs1==x31, rs2==x16, rs2_h1_val == 65527, rs1_h0_val == 65535
// opcode: umulx16 ; op1:x31; op2:x16; dest:x10; op1val:0xfdffffff;  op2val:0xfff70013
TEST_P64_PNN_OP(umulx16, x10, x11, x31, x16, 0x00000000, 0, 0xfdffffff, 0xfff70013, x12, 56, x20)

inst_19:
// rs1==x25, rs2==x17, rs2_h1_val == 65531, rs1_h1_val == 49151, rs2_h0_val == 65519
// opcode: umulx16 ; op1:x25; op2:x17; dest:x2; op1val:0xbfff0007;  op2val:0xfffbffef
TEST_P64_PNN_OP(umulx16, x2, x3, x25, x17, 0x00000000, 0, 0xbfff0007, 0xfffbffef, x12, 64, x20)

inst_20:
// rs1==x5, rs2==x1, rs2_h1_val == 65534, rs1_h1_val == 65533, rs2_h0_val == 57343
// opcode: umulx16 ; op1:x5; op2:x1; dest:x26; op1val:0xfffd1000;  op2val:0xfffedfff
TEST_P64_PNN_OP(umulx16, x26, x27, x5, x1, 0x00000000, 0, 0xfffd1000, 0xfffedfff, x12, 72, x20)

inst_21:
// rs1==x10, rs2==x19, rs2_h1_val == 16384, rs1_h0_val == 8192, rs1_h1_val == 1, rs2_h0_val == 8
// opcode: umulx16 ; op1:x10; op2:x19; dest:x6; op1val:0x00012000;  op2val:0x40000008
TEST_P64_PNN_OP(umulx16, x6, x7, x10, x19, 0x00000000, 0, 0x00012000, 0x40000008, x12, 80, x20)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_22:
// rs1==x11, rs2==x13, rs2_h1_val == 8192, rs1_h0_val == 49151, rs2_h0_val == 8192
// opcode: umulx16 ; op1:x11; op2:x13; dest:x14; op1val:0x000abfff;  op2val:0x20002000
TEST_P64_PNN_OP(umulx16, x14, x15, x11, x13, 0x00000000, 0, 0x000abfff, 0x20002000, x1, 0, x20)

inst_23:
// rs1==x21, rs2==x26, rs2_h1_val == 4096, rs2_h0_val == 16384
// opcode: umulx16 ; op1:x21; op2:x26; dest:x10; op1val:0x000dffff;  op2val:0x10004000
TEST_P64_PNN_OP(umulx16, x10, x11, x21, x26, 0x00000000, 0, 0x000dffff, 0x10004000, x1, 8, x4)

inst_24:
// rs1==x19, rs2==x22, rs2_h1_val == 2048, rs1_h0_val == 512, rs2_h0_val == 64
// opcode: umulx16 ; op1:x19; op2:x22; dest:x2; op1val:0x000d0200;  op2val:0x08000040
TEST_P64_PNN_OP(umulx16, x2, x3, x19, x22, 0x00000000, 0, 0x000d0200, 0x08000040, x1, 16, x4)

inst_25:
// rs1==x27, rs2==x18, rs2_h1_val == 1024, rs1_h0_val == 1024, rs1_h1_val == 57343
// opcode: umulx16 ; op1:x27; op2:x18; dest:x26; op1val:0xdfff0400;  op2val:0x04000100
TEST_P64_PNN_OP(umulx16, x26, x27, x27, x18, 0x00000000, 0, 0xdfff0400, 0x04000100, x1, 24, x4)

inst_26:
// rs1==x9, rs2==x29, rs2_h1_val == 512, rs1_h1_val == 65503
// opcode: umulx16 ; op1:x9; op2:x29; dest:x10; op1val:0xffdf000f;  op2val:0x0200dfff
TEST_P64_PNN_OP(umulx16, x10, x11, x9, x29, 0x00000000, 0, 0xffdf000f, 0x0200dfff, x1, 32, x4)

inst_27:
// rs1==x8, rs2==x28, rs2_h1_val == 256, rs2_h0_val == 65534, rs1_h0_val == 57343
// opcode: umulx16 ; op1:x8; op2:x28; dest:x12; op1val:0x7fffdfff;  op2val:0x0100fffe
TEST_P64_PNN_OP(umulx16, x12, x13, x8, x28, 0x00000000, 0, 0x7fffdfff, 0x0100fffe, x1, 40, x4)

inst_28:
// rs1==x0, rs2==x5, rs2_h1_val == 128, rs1_h1_val == 512
// opcode: umulx16 ; op1:x0; op2:x5; dest:x18; op1val:0x02000080;  op2val:0x0080000b
TEST_P64_PNN_OP(umulx16, x18, x19, x0, x5, 0x00000000, 0, 0x02000080, 0x0080000b, x1, 48, x4)

inst_29:
// rs1==x14, rs2==x25, rs1_h0_val == 65531, 
// opcode: umulx16 ; op1:x14; op2:x25; dest:x10; op1val:0x0001fffb;  op2val:0x0011000e
TEST_P64_PNN_OP(umulx16, x10, x11, x14, x25, 0x00000000, 0, 0x0001fffb, 0x0011000e, x1, 56, x4)

inst_30:
// rs1==x3, rs2==x12, rs1_h0_val == 65533, rs2_h0_val == 128
// opcode: umulx16 ; op1:x3; op2:x12; dest:x18; op1val:0x2000fffd;  op2val:0xbfff0080
TEST_P64_PNN_OP(umulx16, x18, x19, x3, x12, 0x00000000, 0, 0x2000fffd, 0xbfff0080, x1, 64, x4)

inst_31:
// rs1==x29, rs2==x10, rs1_h0_val == 32768, rs1_h1_val == 0
// opcode: umulx16 ; op1:x29; op2:x10; dest:x24; op1val:0x00008000;  op2val:0xefff000f
TEST_P64_PNN_OP(umulx16, x24, x25, x29, x10, 0x00000000, 0, 0x00008000, 0xefff000f, x1, 72, x4)

inst_32:
// rs1_h0_val == 16384, rs1_h1_val == 64
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00404000;  op2val:0x0100f7ff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00404000, 0x0100f7ff, x1, 80, x4)

inst_33:
// rs1_h0_val == 256, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xdfff0100;  op2val:0xffbfdfff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xdfff0100, 0xffbfdfff, x1, 88, x4)

inst_34:
// rs1_h0_val == 32, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x000a0020;  op2val:0x01000013
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x000a0020, 0x01000013, x1, 96, x4)

inst_35:
// rs1_h0_val == 8, rs1_h1_val == 65407
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xff7f0008;  op2val:0xeffff7ff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xff7f0008, 0xeffff7ff, x1, 104, x4)

inst_36:
// rs1_h0_val == 2, rs2_h1_val == 32, rs2_h0_val == 16
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x04000002;  op2val:0x00200010
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x04000002, 0x00200010, x1, 112, x4)

inst_37:
// rs1_h0_val == 1, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x000e0001;  op2val:0xeffffbff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x000e0001, 0xeffffbff, x1, 120, x4)

inst_38:
// rs2_h1_val == 64, rs2_h0_val == 65535
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xbfff0200;  op2val:0x0040ffff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xbfff0200, 0x0040ffff, x1, 128, x4)

inst_39:
// rs2_h1_val == 16, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00400800;  op2val:0x0010fffe
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00400800, 0x0010fffe, x1, 136, x4)

inst_40:
// rs2_h1_val == 8, rs2_h0_val == 61439
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0040dfff;  op2val:0x0008efff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0040dfff, 0x0008efff, x1, 144, x4)

inst_41:
// rs2_h1_val == 4, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x000fbfff;  op2val:0x0004efff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x000fbfff, 0x0004efff, x1, 152, x4)

inst_42:
// rs2_h1_val == 2, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00010100;  op2val:0x00024000
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00010100, 0x00024000, x1, 160, x4)

inst_43:
// rs2_h1_val == 1, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x80000400;  op2val:0x0001000f
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x80000400, 0x0001000f, x1, 168, x4)

inst_44:
// rs2_h0_val == 43690, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00070013;  op2val:0xefffaaaa
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00070013, 0xefffaaaa, x1, 176, x4)

inst_45:
// rs2_h0_val == 21845, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0012000b;  op2val:0xfff75555
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0012000b, 0xfff75555, x1, 184, x4)

inst_46:
// rs2_h0_val == 32767, rs1_h0_val == 65407, rs1_h1_val == 65527
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xfff7ff7f;  op2val:0x00077fff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xfff7ff7f, 0x00077fff, x1, 192, x4)

inst_47:
// rs2_h0_val == 49151, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x55550020;  op2val:0xff7fbfff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x55550020, 0xff7fbfff, x1, 200, x4)

inst_48:
// rs2_h0_val == 65279, rs1_h1_val == 65534
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffe0003;  op2val:0xffbffeff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xfffe0003, 0xffbffeff, x1, 208, x4)

inst_49:
// rs2_h0_val == 65407, rs1_h1_val == 65519, rs1_h0_val == 32767
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xffef7fff;  op2val:0x0800ff7f
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xffef7fff, 0x0800ff7f, x1, 216, x4)

inst_50:
// rs2_h0_val == 4, rs1_h0_val == 65527
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0000fff7;  op2val:0x08000004
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0000fff7, 0x08000004, x1, 224, x4)

inst_51:
// rs2_h0_val == 2, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x000e8000;  op2val:0x01000002
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x000e8000, 0x01000002, x1, 232, x4)

inst_52:
// rs2_h0_val == 1, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xbfff0080;  op2val:0x40000001
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xbfff0080, 0x40000001, x1, 240, x4)

inst_53:
// rs2_h0_val == 0, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0003000a;  op2val:0xaaaa0000
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0003000a, 0xaaaa0000, x1, 248, x4)

inst_54:
// rs1_h1_val == 43690, rs2_h0_val == 65503
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaa000d;  op2val:0x0007ffdf
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xaaaa000d, 0x0007ffdf, x1, 256, x4)

inst_55:
// rs1_h1_val == 63487, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffdfff;  op2val:0x2000000c
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffdfff, 0x2000000c, x1, 264, x4)

inst_56:
// rs1_h1_val == 64511, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xfbff0004;  op2val:0xff7ffffb
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xfbff0004, 0xff7ffffb, x1, 272, x4)

inst_57:
// rs1_h1_val == 65279, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0013;  op2val:0x40000012
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0013, 0x40000012, x1, 280, x4)

inst_58:
// rs1_h1_val == 65471, rs1_h0_val == 65023
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xffbffdff;  op2val:0xfefffdff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xffbffdff, 0xfefffdff, x1, 288, x4)

inst_59:
// rs1_h1_val == 65531, rs1_h0_val == 65471
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffbffbf;  op2val:0x55550005
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0xfffbffbf, 0x55550005, x1, 296, x4)

inst_60:
// rs1_h1_val == 4096, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x10001000;  op2val:0xffdf000e
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x10001000, 0xffdf000e, x1, 304, x4)

inst_61:
// rs1_h1_val == 128, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00800010;  op2val:0xffbfdfff
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00800010, 0xffbfdfff, x1, 312, x4)

inst_62:
// rs1_h1_val == 32, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00208000;  op2val:0x8000000c
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00208000, 0x8000000c, x1, 320, x4)

inst_63:
// rs1_h1_val == 16, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00101000;  op2val:0x000a1000
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00101000, 0x000a1000, x1, 328, x4)

inst_64:
// rs1_h1_val == 8, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0008aaaa;  op2val:0x000f0400
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0008aaaa, 0x000f0400, x1, 336, x4)

inst_65:
// rs1_h1_val == 2, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0002fffd;  op2val:0x10000013
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0002fffd, 0x10000013, x1, 344, x4)

inst_66:
// rs1_h0_val == 21845, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x7fff5555;  op2val:0xfeffaaaa
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x7fff5555, 0xfeffaaaa, x1, 352, x4)

inst_67:
// rs2_h0_val == 65471, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0200000d;  op2val:0x1000ffbf
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0200000d, 0x1000ffbf, x1, 360, x4)

inst_68:
// rs1_h0_val == 61439, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0005efff;  op2val:0xaaaa0002
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0005efff, 0xaaaa0002, x1, 368, x4)

inst_69:
// rs1_h0_val == 63487, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0080f7ff;  op2val:0xfbff4000
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0080f7ff, 0xfbff4000, x1, 376, x4)

inst_70:
// rs1_h0_val == 64511, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0013fbff;  op2val:0x0100fffe
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0013fbff, 0x0100fffe, x1, 384, x4)

inst_71:
// rs2_h0_val == 65533, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00020008;  op2val:0x0005fffd
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00020008, 0x0005fffd, x1, 392, x4)

inst_72:
// rs1_h0_val == 65279, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0100feff;  op2val:0xefffffdf
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0100feff, 0xefffffdf, x1, 400, x4)

inst_73:
// rs1_h0_val == 65519, 
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x0005ffef;  op2val:0x00030200
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x0005ffef, 0x00030200, x1, 408, x4)

inst_74:
// rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 16384, rs2_h0_val == 256, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4, rs2_h1_val == 65533
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x40000004;  op2val:0xfffd0100
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x40000004, 0xfffd0100, x1, 416, x4)

inst_75:
// rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h0_val == 2048, rs2_h1_val == 65535
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x00050800;  op2val:0xffff0800
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x00050800, 0xffff0800, x1, 424, x4)

inst_76:
// rs2_h1_val == 128, rs1_h1_val == 512
// opcode: umulx16 ; op1:x31; op2:x29; dest:x30; op1val:0x02000080;  op2val:0x0080000b
TEST_P64_PNN_OP(umulx16, x30, x31, x31, x29, 0x00000000, 0, 0x02000080, 0x0080000b, x1, 432, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
