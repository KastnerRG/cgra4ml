
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umaqa instruction of the RISC-V RV32PZicsr extension for the umaqa covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umaqa)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x28, rd==x26, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 251, rs1_b1_val == 255, rs1_b2_val == 128, rs2_b1_val == 16
// opcode: umaqa ; op1:x4; op2:x28; dest:x26; op1val:0xa80ff00;  op2val:0xfb13100d
TEST_RR_OP(umaqa, x26, x4, x28, 0x00000000, 0xa80ff00, 0xfb13100d, x2, 0, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x7, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == 191, rs1_b1_val == 223, rs1_b0_val == 254, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: umaqa ; op1:x13; op2:x13; dest:x7; op1val:0xb12dffe;  op2val:0xbbf070e
TEST_RR_OP(umaqa, x7, x13, x13, 0x00000000, 0xb12dffe, 0xbbf070e, x2, 4, x12)

inst_2:
// rs1 == rd != rs2, rs1==x19, rs2==x30, rd==x19, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val == 64, rs1_b3_val == 247
// opcode: umaqa ; op1:x19; op2:x30; dest:x19; op1val:0xf7090340;  op2val:0x11090d09
TEST_RR_OP(umaqa, x19, x19, x30, 0x00000000, 0xf7090340, 0x11090d09, x2, 8, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 8, rs2_b3_val == 191, rs1_b1_val == 32, rs1_b2_val == 85, rs2_b0_val == 255, rs2_b1_val == 32
// opcode: umaqa ; op1:x3; op2:x3; dest:x3; op1val:0x8552009;  op2val:0xbf0720ff
TEST_RR_OP(umaqa, x3, x3, x3, 0x00000000, 0x8552009, 0xbf0720ff, x2, 12, x12)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x8, rd==x8, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 223, rs1_b0_val == 223, rs1_b2_val == 32
// opcode: umaqa ; op1:x1; op2:x8; dest:x8; op1val:0x820ffdf;  op2val:0xc0c0fdf
TEST_RR_OP(umaqa, x8, x1, x8, 0x00000000, 0x820ffdf, 0xc0c0fdf, x2, 16, x12)

inst_5:
// rs1==x28, rs2==x11, rd==x25, rs2_b3_val == 170, rs1_b2_val == 191, rs1_b3_val == 170, rs2_b2_val == 4, rs1_b1_val == 191
// opcode: umaqa ; op1:x28; op2:x11; dest:x25; op1val:0xaabfbf0c;  op2val:0xaa040f0e
TEST_RR_OP(umaqa, x25, x28, x11, 0x00000000, 0xaabfbf0c, 0xaa040f0e, x2, 20, x12)

inst_6:
// rs1==x11, rs2==x7, rd==x29, rs2_b3_val == 85, rs2_b2_val == 16, rs1_b2_val == 2, rs1_b0_val == 85
// opcode: umaqa ; op1:x11; op2:x7; dest:x29; op1val:0x7020a55;  op2val:0x55101105
TEST_RR_OP(umaqa, x29, x11, x7, 0x00000000, 0x7020a55, 0x55101105, x2, 24, x12)

inst_7:
// rs1==x30, rs2==x27, rd==x5, rs2_b3_val == 127, rs1_b3_val == 1, rs2_b0_val == 253, rs2_b2_val == 1, rs1_b0_val == 247, rs2_b1_val == 8
// opcode: umaqa ; op1:x30; op2:x27; dest:x5; op1val:0x10911f7;  op2val:0x7f0108fd
TEST_RR_OP(umaqa, x5, x30, x27, 0x00000000, 0x10911f7, 0x7f0108fd, x2, 28, x12)

inst_8:
// rs1==x25, rs2==x4, rd==x9, rs2_b3_val == 223, rs1_b3_val == 251, rs2_b0_val == 2, rs2_b2_val == 2, rs1_b0_val == 253
// opcode: umaqa ; op1:x25; op2:x4; dest:x9; op1val:0xfb1220fd;  op2val:0xdf020802
TEST_RR_OP(umaqa, x9, x25, x4, 0x00000000, 0xfb1220fd, 0xdf020802, x2, 32, x12)

inst_9:
// rs1==x5, rs2==x6, rd==x0, rs2_b3_val == 239, rs1_b0_val == 170, rs1_b1_val == 247
// opcode: umaqa ; op1:x5; op2:x6; dest:x0; op1val:0xb05f7aa;  op2val:0xef120c12
TEST_RR_OP(umaqa, x0, x5, x6, 0x00000000, 0xb05f7aa, 0xef120c12, x2, 36, x12)

inst_10:
// rs1==x31, rs2==x0, rd==x11, rs2_b3_val == 247, 
// opcode: umaqa ; op1:x31; op2:x0; dest:x11; op1val:0x30e030e;  op2val:0xf70b0d13
TEST_RR_OP(umaqa, x11, x31, x0, 0x00000000, 0x30e030e, 0xf70b0d13, x2, 40, x12)

inst_11:
// rs1==x9, rs2==x26, rd==x18, rs2_b3_val == 253, rs1_b0_val == 32, rs1_b3_val == 32, rs2_b2_val == 8, rs1_b2_val == 64, rs2_b1_val == 253
// opcode: umaqa ; op1:x9; op2:x26; dest:x18; op1val:0x2040f720;  op2val:0xfd08fd0e
TEST_RR_OP(umaqa, x18, x9, x26, 0x00000000, 0x2040f720, 0xfd08fd0e, x2, 44, x12)

inst_12:
// rs1==x15, rs2==x5, rd==x24, rs2_b3_val == 254, rs1_b1_val == 170, rs2_b2_val == 239, rs1_b3_val == 64, rs2_b1_val == 239
// opcode: umaqa ; op1:x15; op2:x5; dest:x24; op1val:0x4040aa06;  op2val:0xfeefefff
TEST_RR_OP(umaqa, x24, x15, x5, 0x00000000, 0x4040aa06, 0xfeefefff, x2, 48, x12)

inst_13:
// rs1==x18, rs2==x14, rd==x27, rs2_b3_val == 128, rs1_b3_val == 239, rs1_b2_val == 254, rs2_b2_val == 254
// opcode: umaqa ; op1:x18; op2:x14; dest:x27; op1val:0xeffedf20;  op2val:0x80fe1006
TEST_RR_OP(umaqa, x27, x18, x14, 0x00000000, 0xeffedf20, 0x80fe1006, x2, 52, x12)

inst_14:
// rs1==x20, rs2==x25, rd==x31, rs2_b3_val == 64, rs1_b0_val == 128, rs2_b0_val == 239, rs2_b1_val == 128, rs1_b1_val == 8
// opcode: umaqa ; op1:x20; op2:x25; dest:x31; op1val:0xf800880;  op2val:0x401380ef
TEST_RR_OP(umaqa, x31, x20, x25, 0x00000000, 0xf800880, 0x401380ef, x2, 56, x12)

inst_15:
// rs1==x23, rs2==x17, rd==x15, rs2_b3_val == 32, rs1_b0_val == 127, rs1_b2_val == 239, rs2_b0_val == 128
// opcode: umaqa ; op1:x23; op2:x17; dest:x15; op1val:0x12ef037f;  op2val:0x200b0c80
TEST_RR_OP(umaqa, x15, x23, x17, 0x00000000, 0x12ef037f, 0x200b0c80, x2, 60, x12)

inst_16:
// rs1==x24, rs2==x31, rd==x28, rs2_b3_val == 16, rs1_b1_val == 64, rs1_b3_val == 255, rs2_b0_val == 4
// opcode: umaqa ; op1:x24; op2:x31; dest:x28; op1val:0xff034040;  op2val:0x10ef0e04
TEST_RR_OP(umaqa, x28, x24, x31, 0x00000000, 0xff034040, 0x10ef0e04, x2, 64, x12)

inst_17:
// rs1==x14, rs2==x20, rd==x10, rs2_b3_val == 8, rs1_b1_val == 85, rs2_b0_val == 170
// opcode: umaqa ; op1:x14; op2:x20; dest:x10; op1val:0x11bf5506;  op2val:0x80712aa
TEST_RR_OP(umaqa, x10, x14, x20, 0x00000000, 0x11bf5506, 0x80712aa, x2, 68, x12)

inst_18:
// rs1==x10, rs2==x22, rd==x21, rs2_b3_val == 4, rs2_b1_val == 254
// opcode: umaqa ; op1:x10; op2:x22; dest:x21; op1val:0x200b0c00;  op2val:0x407fe11
TEST_RR_OP(umaqa, x21, x10, x22, 0x00000000, 0x200b0c00, 0x407fe11, x2, 72, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_19:
// rs1==x27, rs2==x10, rd==x14, rs2_b3_val == 2, rs1_b3_val == 128
// opcode: umaqa ; op1:x27; op2:x10; dest:x14; op1val:0x80090e40;  op2val:0x210050b
TEST_RR_OP(umaqa, x14, x27, x10, 0x00000000, 0x80090e40, 0x210050b, x3, 0, x5)

inst_20:
// rs1==x29, rs2==x2, rd==x16, rs2_b3_val == 1, rs1_b0_val == 191, rs1_b1_val == 253, rs2_b0_val == 1
// opcode: umaqa ; op1:x29; op2:x2; dest:x16; op1val:0x1113fdbf;  op2val:0x10f0701
TEST_RR_OP(umaqa, x16, x29, x2, 0x00000000, 0x1113fdbf, 0x10f0701, x3, 4, x5)

inst_21:
// rs1==x12, rs2==x19, rd==x2, rs2_b3_val == 255, rs2_b1_val == 2, rs1_b2_val == 16
// opcode: umaqa ; op1:x12; op2:x19; dest:x2; op1val:0x401006fe;  op2val:0xff01020e
TEST_RR_OP(umaqa, x2, x12, x19, 0x00000000, 0x401006fe, 0xff01020e, x3, 8, x5)

inst_22:
// rs1==x16, rs2==x1, rd==x4, rs2_b3_val == 0, rs1_b1_val == 2
// opcode: umaqa ; op1:x16; op2:x1; dest:x4; op1val:0x60b02aa;  op2val:0x060705
TEST_RR_OP(umaqa, x4, x16, x1, 0x00000000, 0x60b02aa, 0x060705, x3, 12, x5)

inst_23:
// rs1==x26, rs2==x29, rd==x30, rs2_b2_val == 170, rs1_b3_val == 127, rs2_b1_val == 255
// opcode: umaqa ; op1:x26; op2:x29; dest:x30; op1val:0x7f8011aa;  op2val:0x55aaff11
TEST_RR_OP(umaqa, x30, x26, x29, 0x00000000, 0x7f8011aa, 0x55aaff11, x3, 16, x5)

inst_24:
// rs1==x0, rs2==x18, rd==x23, rs2_b2_val == 85, rs1_b1_val == 0, rs1_b3_val == 191
// opcode: umaqa ; op1:x0; op2:x18; dest:x23; op1val:0xbf2000bf;  op2val:0x80550b0e
TEST_RR_OP(umaqa, x23, x0, x18, 0x00000000, 0xbf2000bf, 0x80550b0e, x3, 20, x5)

inst_25:
// rs1==x2, rs2==x23, rd==x12, rs2_b2_val == 127, rs2_b0_val == 0, rs2_b1_val == 1
// opcode: umaqa ; op1:x2; op2:x23; dest:x12; op1val:0x805090f;  op2val:0x97f0100
TEST_RR_OP(umaqa, x12, x2, x23, 0x00000000, 0x805090f, 0x97f0100, x3, 24, x5)

inst_26:
// rs1==x8, rs2==x15, rd==x6, rs2_b2_val == 223, 
// opcode: umaqa ; op1:x8; op2:x15; dest:x6; op1val:0x7120daa;  op2val:0xfedf120d
TEST_RR_OP(umaqa, x6, x8, x15, 0x00000000, 0x7120daa, 0xfedf120d, x3, 28, x5)

inst_27:
// rs1==x17, rs2==x16, rd==x13, rs1_b2_val == 0, rs2_b0_val == 85
// opcode: umaqa ; op1:x17; op2:x16; dest:x13; op1val:0x8000d20;  op2val:0x12551255
TEST_RR_OP(umaqa, x13, x17, x16, 0x00000000, 0x8000d20, 0x12551255, x3, 32, x5)

inst_28:
// rs1==x22, rs2==x21, rd==x20, rs1_b1_val == 127, 
// opcode: umaqa ; op1:x22; op2:x21; dest:x20; op1val:0x12fe7f80;  op2val:0x13ef080f
TEST_RR_OP(umaqa, x20, x22, x21, 0x00000000, 0x12fe7f80, 0x13ef080f, x3, 36, x5)

inst_29:
// rs1==x6, rs2==x24, rd==x1, rs1_b1_val == 239, rs2_b1_val == 0, rs1_b2_val == 1
// opcode: umaqa ; op1:x6; op2:x24; dest:x1; op1val:0x8001ef0c;  op2val:0xdaa0006
TEST_RR_OP(umaqa, x1, x6, x24, 0x00000000, 0x8001ef0c, 0xdaa0006, x3, 40, x5)

inst_30:
// rs1==x7, rs2==x12, rd==x17, rs1_b1_val == 251, 
// opcode: umaqa ; op1:x7; op2:x12; dest:x17; op1val:0x2012fb12;  op2val:0xff04fd0f
TEST_RR_OP(umaqa, x17, x7, x12, 0x00000000, 0x2012fb12, 0xff04fd0f, x3, 44, x5)

inst_31:
// rs1==x21, rs2==x9, rd==x22, rs1_b1_val == 254, rs2_b0_val == 191, rs1_b3_val == 253
// opcode: umaqa ; op1:x21; op2:x9; dest:x22; op1val:0xfd0afe0d;  op2val:0xb0102bf
TEST_RR_OP(umaqa, x22, x21, x9, 0x00000000, 0xfd0afe0d, 0xb0102bf, x3, 48, x5)

inst_32:
// rs1_b1_val == 128, rs2_b2_val == 64, rs2_b0_val == 254
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf808080;  op2val:0x134002fe
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xf808080, 0x134002fe, x3, 52, x5)

inst_33:
// rs1_b1_val == 16, rs1_b3_val == 85, rs1_b0_val == 255
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x55bf10ff;  op2val:0x755efaa
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x55bf10ff, 0x755efaa, x3, 56, x1)

inst_34:
// rs1_b1_val == 4, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xd010420;  op2val:0xaa0b0507
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xd010420, 0xaa0b0507, x3, 60, x1)

inst_35:
// rs1_b1_val == 1, rs2_b0_val == 8, rs2_b2_val == 128
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x551201bf;  op2val:0x20800808
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x551201bf, 0x20800808, x3, 64, x1)

inst_36:
// rs1_b0_val == 239, rs1_b2_val == 4, rs2_b1_val == 64
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x110409ef;  op2val:0xfd014080
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x110409ef, 0xfd014080, x3, 68, x1)

inst_37:
// rs1_b0_val == 251, rs1_b3_val == 4
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x40d0afb;  op2val:0x4400280
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x40d0afb, 0x4400280, x3, 72, x1)

inst_38:
// rs1_b0_val == 16, rs2_b1_val == 223
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xff400510;  op2val:0x40adf06
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xff400510, 0x40adf06, x3, 76, x1)

inst_39:
// rs2_b2_val == 247, rs1_b2_val == 8
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x908127f;  op2val:0xaaf7070f
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x908127f, 0xaaf7070f, x3, 80, x1)

inst_40:
// rs1_b0_val == 8, rs2_b0_val == 32, rs2_b1_val == 170, rs1_b3_val == 0
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x550308;  op2val:0xe55aa20
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x550308, 0xe55aa20, x3, 84, x1)

inst_41:
// rs2_b2_val == 251, rs1_b2_val == 251
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x40fb1280;  op2val:0xeffb0580
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x40fb1280, 0xeffb0580, x3, 88, x1)

inst_42:
// rs2_b1_val == 4, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2000aaf7;  op2val:0x40550412
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x2000aaf7, 0x40550412, x3, 92, x1)

inst_43:
// rs2_b0_val == 127, rs1_b3_val == 254, rs1_b2_val == 253
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfefd0755;  op2val:0xabffd7f
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xfefd0755, 0xabffd7f, x3, 96, x1)

inst_44:
// rs2_b0_val == 247, rs2_b1_val == 191
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x48012bf;  op2val:0xe04bff7
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x48012bf, 0xe04bff7, x3, 100, x1)

inst_45:
// rs2_b0_val == 251, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x512060f;  op2val:0x10afffb
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x512060f, 0x10afffb, x3, 104, x1)

inst_46:
// rs2_b0_val == 64, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x7f0820fd;  op2val:0x13021140
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x7f0820fd, 0x13021140, x3, 108, x1)

inst_47:
// rs2_b0_val == 16, rs2_b1_val == 251
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8008bfaa;  op2val:0xf04fb10
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x8008bfaa, 0xf04fb10, x3, 112, x1)

inst_48:
// rs1_b3_val == 223, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdffb7fef;  op2val:0x3050806
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xdffb7fef, 0x3050806, x3, 116, x1)

inst_49:
// rs1_b0_val == 4, rs1_b2_val == 170
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xcaa0a04;  op2val:0xfefb0307
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xcaa0a04, 0xfefb0307, x3, 120, x1)

inst_50:
// rs2_b2_val == 253, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2007097f;  op2val:0x5fd0a13
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x2007097f, 0x5fd0a13, x3, 124, x1)

inst_51:
// rs1_b0_val == 2, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x40def02;  op2val:0xff0fbf80
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x40def02, 0xff0fbf80, x3, 128, x1)

inst_52:
// rs1_b0_val == 1, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x40fd1101;  op2val:0xfdfbfb04
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x40fd1101, 0xfdfbfb04, x3, 132, x1)

inst_53:
// rs1_b3_val == 16, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x100b0def;  op2val:0xf701fefd
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x100b0def, 0xf701fefd, x3, 136, x1)

inst_54:
// rs2_b2_val == 32, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x80fb0505;  op2val:0x620fb0f
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x80fb0505, 0x620fb0f, x3, 140, x1)

inst_55:
// rs1_b3_val == 2, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2010407;  op2val:0x12fe10ff
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x2010407, 0x12fe10ff, x3, 144, x1)

inst_56:
// rs2_b2_val == 255, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf701550d;  op2val:0x9ff080f
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xf701550d, 0x9ff080f, x3, 148, x1)

inst_57:
// rs1_b2_val == 127, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x47f0f11;  op2val:0x2070b0e
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x47f0f11, 0x2070b0e, x3, 152, x1)

inst_58:
// rs2_b2_val == 0, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfe0efb0a;  op2val:0x4000dfe
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xfe0efb0a, 0x4000dfe, x3, 156, x1)

inst_59:
// rs1_b2_val == 223, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8df20df;  op2val:0xaaabf80
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x8df20df, 0xaaabf80, x3, 160, x1)

inst_60:
// rs2_b1_val == 85, rs1_b2_val == 255
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffe13;  op2val:0x131355aa
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xfdfffe13, 0x131355aa, x3, 164, x1)

inst_61:
// rs1_b2_val == 247, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xef70c55;  op2val:0x40c0c0e
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xef70c55, 0x40c0c0e, x3, 168, x1)

inst_62:
// rs2_b1_val == 127, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x100b05df;  op2val:0x3fe7f03
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x100b05df, 0x3fe7f03, x3, 172, x1)

inst_63:
// rs2_b1_val == 247, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfbff07df;  op2val:0xfe00f711
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xfbff07df, 0xfe00f711, x3, 176, x1)

inst_64:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 8, rs2_b3_val == 191, rs1_b1_val == 32, rs1_b2_val == 85, rs2_b0_val == 255, rs2_b1_val == 32
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8552009;  op2val:0xbf0720ff
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0x8552009, 0xbf0720ff, x3, 180, x1)

inst_65:
// rs2_b2_val == 85, rs1_b1_val == 0, rs1_b3_val == 191
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xbf2000bf;  op2val:0x80550b0e
TEST_RR_OP(umaqa, x31, x30, x29, 0x00000000, 0xbf2000bf, 0x80550b0e, x3, 184, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 47*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
