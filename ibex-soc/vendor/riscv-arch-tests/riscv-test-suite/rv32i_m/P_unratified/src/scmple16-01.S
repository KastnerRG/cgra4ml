
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmple16 instruction of the RISC-V RV32PZicsr extension for the scmple16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmple16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x17, rd==x25, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 32767
// opcode: scmple16 ; op1:x13; op2:x17; dest:x25; op1val:0x7fff8000;  op2val:0xfff90006
TEST_RR_OP(scmple16, x25, x13, x17, 0x00000000, 0x7fff8000, 0xfff90006, x3, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x15, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 16384, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -129, rs1_h1_val == -129
// opcode: scmple16 ; op1:x1; op2:x1; dest:x15; op1val:0xff7f4000;  op2val:0xff7f0003
TEST_RR_OP(scmple16, x15, x1, x1, 0x00000000, 0xff7f4000, 0xff7f0003, x3, 4, x11)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x8, rd==x23, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs1_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -5
// opcode: scmple16 ; op1:x23; op2:x8; dest:x23; op1val:0xfffb5555;  op2val:0x40c000
TEST_RR_OP(scmple16, x23, x23, x8, 0x00000000, 0xfffb5555, 0x40c000, x3, 8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 4096, rs1_h1_val == 2048, rs1_h0_val == -2049
// opcode: scmple16 ; op1:x0; op2:x0; dest:x0; op1val:0x800f7ff;  op2val:0x10000009
TEST_RR_OP(scmple16, x0, x0, x0, 0x00000000, 0x800f7ff, 0x10000009, x3, 12, x11)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x4, rd==x4, rs1_h0_val == rs2_h0_val, rs2_h0_val == -1025, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 1024, rs1_h0_val == -1025
// opcode: scmple16 ; op1:x28; op2:x4; dest:x4; op1val:0x400fbff;  op2val:0xff7ffbff
TEST_RR_OP(scmple16, x4, x28, x4, 0x00000000, 0x400fbff, 0xff7ffbff, x3, 16, x11)

inst_5:
// rs1==x4, rs2==x30, rd==x6, rs2_h1_val == -21846, rs1_h0_val == -4097, rs2_h0_val == -2049
// opcode: scmple16 ; op1:x4; op2:x30; dest:x6; op1val:0xfff6efff;  op2val:0xaaaaf7ff
TEST_RR_OP(scmple16, x6, x4, x30, 0x00000000, 0xfff6efff, 0xaaaaf7ff, x3, 20, x11)

inst_6:
// rs1==x18, rs2==x24, rd==x7, rs2_h1_val == 21845, rs1_h1_val == -17, rs2_h0_val == -129, rs1_h0_val == 32
// opcode: scmple16 ; op1:x18; op2:x24; dest:x7; op1val:0xffef0020;  op2val:0x5555ff7f
TEST_RR_OP(scmple16, x7, x18, x24, 0x00000000, 0xffef0020, 0x5555ff7f, x3, 24, x11)

inst_7:
// rs1==x22, rs2==x15, rd==x26, rs2_h1_val == 32767, rs1_h0_val == 8, rs2_h0_val == -4097
// opcode: scmple16 ; op1:x22; op2:x15; dest:x26; op1val:0x070008;  op2val:0x7fffefff
TEST_RR_OP(scmple16, x26, x22, x15, 0x00000000, 0x070008, 0x7fffefff, x3, 28, x11)

inst_8:
// rs1==x30, rs2==x12, rd==x29, rs2_h1_val == -16385, rs2_h0_val == 8
// opcode: scmple16 ; op1:x30; op2:x12; dest:x29; op1val:0xfff90006;  op2val:0xbfff0008
TEST_RR_OP(scmple16, x29, x30, x12, 0x00000000, 0xfff90006, 0xbfff0008, x3, 32, x11)

inst_9:
// rs1==x8, rs2==x22, rd==x19, rs2_h1_val == -8193, rs2_h0_val == 1, rs1_h0_val == -8193, rs1_h1_val == -513
// opcode: scmple16 ; op1:x8; op2:x22; dest:x19; op1val:0xfdffdfff;  op2val:0xdfff0001
TEST_RR_OP(scmple16, x19, x8, x22, 0x00000000, 0xfdffdfff, 0xdfff0001, x3, 36, x11)

inst_10:
// rs1==x24, rs2==x6, rd==x13, rs2_h1_val == -4097, rs1_h0_val == -1, rs2_h0_val == -9
// opcode: scmple16 ; op1:x24; op2:x6; dest:x13; op1val:0x800ffff;  op2val:0xeffffff7
TEST_RR_OP(scmple16, x13, x24, x6, 0x00000000, 0x800ffff, 0xeffffff7, x3, 40, x11)

inst_11:
// rs1==x9, rs2==x23, rd==x8, rs2_h1_val == -2049, rs1_h1_val == -9, rs1_h0_val == 8192
// opcode: scmple16 ; op1:x9; op2:x23; dest:x8; op1val:0xfff72000;  op2val:0xf7ff0003
TEST_RR_OP(scmple16, x8, x9, x23, 0x00000000, 0xfff72000, 0xf7ff0003, x3, 44, x11)

inst_12:
// rs1==x15, rs2==x5, rd==x31, rs2_h1_val == -1025, rs1_h1_val == -65, rs1_h0_val == 1024, rs2_h0_val == 2048
// opcode: scmple16 ; op1:x15; op2:x5; dest:x31; op1val:0xffbf0400;  op2val:0xfbff0800
TEST_RR_OP(scmple16, x31, x15, x5, 0x00000000, 0xffbf0400, 0xfbff0800, x3, 48, x11)

inst_13:
// rs1==x10, rs2==x14, rd==x12, rs2_h1_val == -513, rs2_h0_val == 256, rs1_h0_val == -16385, rs1_h1_val == 16
// opcode: scmple16 ; op1:x10; op2:x14; dest:x12; op1val:0x10bfff;  op2val:0xfdff0100
TEST_RR_OP(scmple16, x12, x10, x14, 0x00000000, 0x10bfff, 0xfdff0100, x3, 52, x11)

inst_14:
// rs1==x2, rs2==x16, rd==x14, rs2_h1_val == -257, rs1_h1_val == 16384, rs2_h0_val == -257, rs1_h0_val == 4096
// opcode: scmple16 ; op1:x2; op2:x16; dest:x14; op1val:0x40001000;  op2val:0xfefffeff
TEST_RR_OP(scmple16, x14, x2, x16, 0x00000000, 0x40001000, 0xfefffeff, x3, 56, x11)

inst_15:
// rs1==x27, rs2==x31, rd==x16, rs2_h1_val == -65, rs1_h0_val == -513, rs2_h0_val == -1, rs1_h1_val == -32768
// opcode: scmple16 ; op1:x27; op2:x31; dest:x16; op1val:0x8000fdff;  op2val:0xffbfffff
TEST_RR_OP(scmple16, x16, x27, x31, 0x00000000, 0x8000fdff, 0xffbfffff, x3, 60, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_16:
// rs1==x26, rs2==x13, rd==x3, rs2_h1_val == -33, rs1_h0_val == -129, rs2_h0_val == 16384, rs1_h1_val == 21845
// opcode: scmple16 ; op1:x26; op2:x13; dest:x3; op1val:0x5555ff7f;  op2val:0xffdf4000
TEST_RR_OP(scmple16, x3, x26, x13, 0x00000000, 0x5555ff7f, 0xffdf4000, x4, 0, x8)

inst_17:
// rs1==x31, rs2==x25, rd==x22, rs2_h1_val == -17, rs2_h0_val == -513
// opcode: scmple16 ; op1:x31; op2:x25; dest:x22; op1val:0x3fff3fff;  op2val:0xffeffdff
TEST_RR_OP(scmple16, x22, x31, x25, 0x00000000, 0x3fff3fff, 0xffeffdff, x4, 4, x8)

inst_18:
// rs1==x29, rs2==x21, rd==x11, rs2_h1_val == -9, 
// opcode: scmple16 ; op1:x29; op2:x21; dest:x11; op1val:0xfff62000;  op2val:0xfff73fff
TEST_RR_OP(scmple16, x11, x29, x21, 0x00000000, 0xfff62000, 0xfff73fff, x4, 8, x8)

inst_19:
// rs1==x12, rs2==x11, rd==x21, rs2_h1_val == -5, rs2_h0_val == 32767
// opcode: scmple16 ; op1:x12; op2:x11; dest:x21; op1val:0xfff9dfff;  op2val:0xfffb7fff
TEST_RR_OP(scmple16, x21, x12, x11, 0x00000000, 0xfff9dfff, 0xfffb7fff, x4, 12, x8)

inst_20:
// rs1==x20, rs2==x7, rd==x10, rs2_h1_val == -3, rs2_h0_val == -2, rs1_h1_val == -2
// opcode: scmple16 ; op1:x20; op2:x7; dest:x10; op1val:0xfffe0008;  op2val:0xfffdfffe
TEST_RR_OP(scmple16, x10, x20, x7, 0x00000000, 0xfffe0008, 0xfffdfffe, x4, 16, x8)

inst_21:
// rs1==x5, rs2==x19, rd==x24, rs2_h1_val == -2, rs2_h0_val == 4
// opcode: scmple16 ; op1:x5; op2:x19; dest:x24; op1val:0x8000fffc;  op2val:0xfffe0004
TEST_RR_OP(scmple16, x24, x5, x19, 0x00000000, 0x8000fffc, 0xfffe0004, x4, 20, x8)

inst_22:
// rs1==x7, rs2==x20, rd==x17, rs2_h1_val == -32768, rs2_h0_val == 8192
// opcode: scmple16 ; op1:x7; op2:x20; dest:x17; op1val:0x038000;  op2val:0x80002000
TEST_RR_OP(scmple16, x17, x7, x20, 0x00000000, 0x038000, 0x80002000, x4, 24, x8)

inst_23:
// rs1==x11, rs2==x29, rd==x20, rs2_h1_val == 16384, rs1_h0_val == -65, rs1_h1_val == -1025
// opcode: scmple16 ; op1:x11; op2:x29; dest:x20; op1val:0xfbffffbf;  op2val:0x40000004
TEST_RR_OP(scmple16, x20, x11, x29, 0x00000000, 0xfbffffbf, 0x40000004, x4, 28, x8)

inst_24:
// rs1==x19, rs2==x18, rd==x9, rs2_h1_val == 8192, rs1_h1_val == -1, rs1_h0_val == 2
// opcode: scmple16 ; op1:x19; op2:x18; dest:x9; op1val:0xffff0002;  op2val:0x2000fff9
TEST_RR_OP(scmple16, x9, x19, x18, 0x00000000, 0xffff0002, 0x2000fff9, x4, 32, x8)

inst_25:
// rs1==x16, rs2==x10, rd==x1, rs2_h1_val == 2048, 
// opcode: scmple16 ; op1:x16; op2:x10; dest:x1; op1val:0x400c000;  op2val:0x8000006
TEST_RR_OP(scmple16, x1, x16, x10, 0x00000000, 0x400c000, 0x8000006, x4, 36, x8)

inst_26:
// rs1==x17, rs2==x9, rd==x18, rs2_h1_val == 1024, rs2_h0_val == 64
// opcode: scmple16 ; op1:x17; op2:x9; dest:x18; op1val:0x03fdff;  op2val:0x4000040
TEST_RR_OP(scmple16, x18, x17, x9, 0x00000000, 0x03fdff, 0x4000040, x4, 40, x8)

inst_27:
// rs1==x25, rs2==x27, rd==x5, rs2_h1_val == 512, rs2_h0_val == -3, rs1_h0_val == -2, rs1_h1_val == 512
// opcode: scmple16 ; op1:x25; op2:x27; dest:x5; op1val:0x200fffe;  op2val:0x200fffd
TEST_RR_OP(scmple16, x5, x25, x27, 0x00000000, 0x200fffe, 0x200fffd, x4, 44, x8)

inst_28:
// rs1==x21, rs2==x2, rd==x27, rs2_h1_val == 256, 
// opcode: scmple16 ; op1:x21; op2:x2; dest:x27; op1val:0x090009;  op2val:0x100fffc
TEST_RR_OP(scmple16, x27, x21, x2, 0x00000000, 0x090009, 0x100fffc, x4, 48, x8)

inst_29:
// rs1==x6, rs2==x26, rd==x28, rs1_h0_val == -257, 
// opcode: scmple16 ; op1:x6; op2:x26; dest:x28; op1val:0xffbffeff;  op2val:0xfffafff8
TEST_RR_OP(scmple16, x28, x6, x26, 0x00000000, 0xffbffeff, 0xfffafff8, x4, 52, x8)

inst_30:
// rs1==x14, rs2==x3, rd==x30, rs1_h0_val == -33, 
// opcode: scmple16 ; op1:x14; op2:x3; dest:x30; op1val:0x400ffdf;  op2val:0x07fffe
TEST_RR_OP(scmple16, x30, x14, x3, 0x00000000, 0x400ffdf, 0x07fffe, x4, 56, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x3, rs2==x28, rd==x2, rs1_h0_val == -17, rs1_h1_val == -33
// opcode: scmple16 ; op1:x3; op2:x28; dest:x2; op1val:0xffdfffef;  op2val:0xfbff0001
TEST_RR_OP(scmple16, x2, x3, x28, 0x00000000, 0xffdfffef, 0xfbff0001, x1, 0, x4)

inst_32:
// rs1_h0_val == -9, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff7;  op2val:0xfffac000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfff8fff7, 0xfffac000, x1, 4, x4)

inst_33:
// rs1_h0_val == -5, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffb;  op2val:0x060005
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x10fffb, 0x060005, x1, 8, x4)

inst_34:
// rs1_h0_val == -3, rs1_h1_val == -8193
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffd;  op2val:0xfff9fffd
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xdffffffd, 0xfff9fffd, x1, 12, x4)

inst_35:
// rs1_h0_val == 2048, rs1_h1_val == -4097, rs2_h1_val == 128
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0800;  op2val:0x80fffa
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xefff0800, 0x80fffa, x1, 16, x4)

inst_36:
// rs1_h0_val == 512, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550200;  op2val:0x7ffffffa
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x55550200, 0x7ffffffa, x1, 20, x4)

inst_37:
// rs1_h0_val == 256, rs1_h1_val == -16385
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0100;  op2val:0x5555c000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xbfff0100, 0x5555c000, x1, 24, x4)

inst_38:
// rs1_h0_val == 128, rs2_h0_val == -16385, rs1_h1_val == 256
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000080;  op2val:0x09bfff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x1000080, 0x09bfff, x1, 28, x4)

inst_39:
// rs1_h0_val == 64, rs2_h0_val == 21845
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0040;  op2val:0x8005555
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xffef0040, 0x8005555, x1, 32, x4)

inst_40:
// rs1_h0_val == 16, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0010;  op2val:0x55550009
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xffdf0010, 0x55550009, x1, 36, x4)

inst_41:
// rs1_h0_val == 4, rs2_h0_val == -21846
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0004;  op2val:0x100aaaa
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xdfff0004, 0x100aaaa, x1, 40, x4)

inst_42:
// rs1_h0_val == 1, rs2_h0_val == 16
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80001;  op2val:0xfffe0010
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfff80001, 0xfffe0010, x1, 44, x4)

inst_43:
// rs1_h0_val == 0, rs1_h1_val == -3
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0000;  op2val:0xefffaaaa
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfffd0000, 0xefffaaaa, x1, 48, x4)

inst_44:
// rs2_h1_val == 32, rs2_h0_val == -17
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80002;  op2val:0x20ffef
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfff80002, 0x20ffef, x1, 52, x4)

inst_45:
// rs2_h1_val == 16, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffef;  op2val:0x100004
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xffdfffef, 0x100004, x1, 56, x4)

inst_46:
// rs2_h1_val == 8, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffa;  op2val:0x080100
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xeffffffa, 0x080100, x1, 60, x4)

inst_47:
// rs2_h1_val == 4, rs2_h0_val == -32768
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0020;  op2val:0x048000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfffc0020, 0x048000, x1, 64, x4)

inst_48:
// rs2_h0_val == -5, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff;  op2val:0x4000fffb
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xc000f7ff, 0x4000fffb, x1, 68, x4)

inst_49:
// rs2_h0_val == 4096, rs1_h1_val == 0
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x00efff;  op2val:0x7fff1000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x00efff, 0x7fff1000, x1, 72, x4)

inst_50:
// rs2_h0_val == 1024, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffc;  op2val:0xefff0400
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfff6fffc, 0xefff0400, x1, 76, x4)

inst_51:
// rs2_h0_val == 512, rs1_h1_val == 2
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf;  op2val:0x7fff0200
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x02ffdf, 0x7fff0200, x1, 80, x4)

inst_52:
// rs2_h0_val == 128, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040;  op2val:0xdfff0080
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfffb0040, 0xdfff0080, x1, 84, x4)

inst_53:
// rs2_h0_val == 32, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x8000020
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfffffeff, 0x8000020, x1, 88, x4)

inst_54:
// rs2_h0_val == 2, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000006;  op2val:0xfffe0002
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x8000006, 0xfffe0002, x1, 92, x4)

inst_55:
// rs2_h0_val == 0, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000005;  op2val:0xefff0000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x80000005, 0xefff0000, x1, 96, x4)

inst_56:
// rs1_h1_val == -21846, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff7;  op2val:0xbfff3fff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xaaaafff7, 0xbfff3fff, x1, 100, x4)

inst_57:
// rs1_h1_val == -2049, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0001;  op2val:0x800080
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xf7ff0001, 0x800080, x1, 104, x4)

inst_58:
// rs1_h1_val == -257, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffbff;  op2val:0xfdff0007
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfefffbff, 0xfdff0007, x1, 108, x4)

inst_59:
// rs1_h1_val == 8192, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000007;  op2val:0xf7fffff6
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x20000007, 0xf7fffff6, x1, 112, x4)

inst_60:
// rs1_h1_val == 4096, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffc;  op2val:0xfffbffef
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x1000fffc, 0xfffbffef, x1, 116, x4)

inst_61:
// rs2_h1_val == 2, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0003;  op2val:0x02fff6
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xff7f0003, 0x02fff6, x1, 120, x4)

inst_62:
// rs2_h1_val == 1, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0004;  op2val:0x010008
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xdfff0004, 0x010008, x1, 124, x4)

inst_63:
// rs2_h1_val == 0, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0x00fdff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfff7ffff, 0x00fdff, x1, 128, x4)

inst_64:
// rs1_h1_val == 128, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x800004;  op2val:0xf7ffefff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x800004, 0xf7ffefff, x1, 132, x4)

inst_65:
// rs2_h1_val == -1, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000bfff;  op2val:0xffff0010
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x4000bfff, 0xffff0010, x1, 136, x4)

inst_66:
// rs1_h1_val == 64, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x400006;  op2val:0x20000400
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x400006, 0x20000400, x1, 140, x4)

inst_67:
// rs1_h1_val == 32, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x200007;  op2val:0xffbf0002
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x200007, 0xffbf0002, x1, 144, x4)

inst_68:
// rs1_h1_val == 8, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffa;  op2val:0x40000007
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x08fffa, 0x40000007, x1, 148, x4)

inst_69:
// rs1_h1_val == 4, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x040001;  op2val:0xfffd2000
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x040001, 0xfffd2000, x1, 152, x4)

inst_70:
// rs2_h0_val == -8193, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0020;  op2val:0x1000dfff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfeff0020, 0x1000dfff, x1, 156, x4)

inst_71:
// rs1_h1_val == 1, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x010003;  op2val:0x065555
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x010003, 0x065555, x1, 160, x4)

inst_72:
// rs1_h0_val == -21846, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x02aaaa;  op2val:0xfff9fbff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x02aaaa, 0xfff9fbff, x1, 164, x4)

inst_73:
// rs1_h0_val == 32767, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff;  op2val:0xfdfffdff
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x8007fff, 0xfdfffdff, x1, 168, x4)

inst_74:
// rs2_h0_val == -65, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x20001000;  op2val:0x06ffbf
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0x20001000, 0x06ffbf, x1, 172, x4)

inst_75:
// rs2_h0_val == -33, 
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0007;  op2val:0x03ffdf
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xfbff0007, 0x03ffdf, x1, 176, x4)

inst_76:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 16384, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -129, rs1_h1_val == -129
// opcode: scmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f4000;  op2val:0xff7f0003
TEST_RR_OP(scmple16, x31, x30, x29, 0x00000000, 0xff7f4000, 0xff7f0003, x1, 180, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 46*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
