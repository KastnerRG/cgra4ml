
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add8 instruction of the RISC-V RV32PZicsr extension for the add8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",add8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x4, rd==x2, rs1_b0_val == -128, rs2_b3_val == -5, rs1_b3_val != rs2_b3_val, rs1_b2_val == -65, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b2_val == -65, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -3
// opcode: add8 ; op1:x16; op2:x4; dest:x2; op1val:0x7bffd80;  op2val:0xfbbf0605
TEST_RR_OP(add8, x2, x16, x4, 0x00000000, 0x7bffd80, 0xfbbf0605, x11, 0, x19)

inst_1:// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x17, rs1_b3_val == rs2_b3_val, rs2_b2_val == -1, rs2_b1_val == 85, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val == -33, rs1_b0_val < 0 and rs2_b0_val < 0
// opcode: add8 ; op1:x23; op2:x23; dest:x17; op1val:0xf903df80;  op2val:0xf9ff55c0
TEST_RR_OP(add8, x17, x23, x23, 0x00000000, 0xf903df80, 0xf9ff55c0, x11, 4, x19)

inst_2:// rs1 == rd != rs2, rs1==x9, rs2==x25, rd==x9, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b3_val == 64, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b1_val == 32, rs1_b2_val == 2, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 64
// opcode: add8 ; op1:x9; op2:x25; dest:x9; op1val:0xf802403f;  op2val:0x40092006
TEST_RR_OP(add8, x9, x9, x25, 0x00000000, 0xf802403f, 0x40092006, x11, 8, x19)

inst_3:// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val == -86, rs2_b3_val == 16, rs2_b1_val == -5, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -86, rs2_b2_val == 16, rs1_b2_val == -86, rs2_b0_val == -128
// opcode: add8 ; op1:x3; op2:x3; dest:x3; op1val:0x7faaaaaa;  op2val:0x1010fb80
TEST_RR_OP(add8, x3, x3, x3, 0x00000000, 0x7faaaaaa, 0x1010fb80, x11, 12, x19)

inst_4:// rs2 == rd != rs1, rs1==x17, rs2==x13, rd==x13, rs1_b1_val == rs2_b1_val, rs2_b0_val == 4, rs2_b2_val == -2, rs1_b2_val == 127
// opcode: add8 ; op1:x17; op2:x13; dest:x13; op1val:0xf97ff809;  op2val:0xf9fef804
TEST_RR_OP(add8, x13, x17, x13, 0x00000000, 0xf97ff809, 0xf9fef804, x11, 16, x19)

inst_5:// rs1==x21, rs2==x22, rd==x1, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b1_val == -3, rs2_b2_val == -17, rs1_b1_val == 127
// opcode: add8 ; op1:x21; op2:x22; dest:x1; op1val:0xf6f87f80;  op2val:0xc0effd05
TEST_RR_OP(add8, x1, x21, x22, 0x00000000, 0xf6f87f80, 0xc0effd05, x11, 20, x19)

inst_6:// rs1==x10, rs2==x9, rd==x23, rs1_b0_val == rs2_b0_val, rs1_b1_val == -128, rs2_b0_val == -86
// opcode: add8 ; op1:x10; op2:x9; dest:x23; op1val:0xc0f680aa;  op2val:0x9063faa
TEST_RR_OP(add8, x23, x10, x9, 0x00000000, 0xc0f680aa, 0x9063faa, x11, 24, x19)

inst_7:// rs1==x26, rs2==x5, rd==x18, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b2_val == 64, rs1_b1_val == -1, rs2_b1_val == -33, rs1_b0_val == 85
// opcode: add8 ; op1:x26; op2:x5; dest:x18; op1val:0x540ff55;  op2val:0x7f8df80
TEST_RR_OP(add8, x18, x26, x5, 0x00000000, 0x540ff55, 0x7f8df80, x11, 28, x19)

inst_8:// rs1==x14, rs2==x8, rd==x25, rs2_b3_val == -86, rs2_b2_val == 64, rs1_b3_val == 85, rs1_b0_val == 4, rs2_b0_val == -5
// opcode: add8 ; op1:x14; op2:x8; dest:x25; op1val:0x5506ff04;  op2val:0xaa4020fb
TEST_RR_OP(add8, x25, x14, x8, 0x00000000, 0x5506ff04, 0xaa4020fb, x11, 32, x19)

inst_9:// rs1==x4, rs2==x30, rd==x26, rs2_b3_val == 85, rs1_b0_val == 32, rs2_b0_val == 16, rs1_b3_val == -9
// opcode: add8 ; op1:x4; op2:x30; dest:x26; op1val:0xf740f920;  op2val:0x553f0710
TEST_RR_OP(add8, x26, x4, x30, 0x00000000, 0xf740f920, 0x553f0710, x11, 36, x19)

inst_10:// rs1==x31, rs2==x10, rd==x6, rs2_b3_val == 127, rs2_b0_val == -1, rs1_b3_val == -128, rs1_b2_val == 4, rs1_b1_val == 32
// opcode: add8 ; op1:x31; op2:x10; dest:x6; op1val:0x800420fc;  op2val:0x7ff63fff
TEST_RR_OP(add8, x6, x31, x10, 0x00000000, 0x800420fc, 0x7ff63fff, x11, 40, x19)

inst_11:// rs1==x15, rs2==x7, rd==x21, rs2_b3_val == -65, rs2_b1_val == 2, rs1_b0_val == 8, rs2_b2_val == 1
// opcode: add8 ; op1:x15; op2:x7; dest:x21; op1val:0x73f0708;  op2val:0xbf010207
TEST_RR_OP(add8, x21, x15, x7, 0x00000000, 0x73f0708, 0xbf010207, x11, 44, x19)

inst_12:// rs1==x20, rs2==x14, rd==x16, rs2_b3_val == -33, rs1_b1_val == 0, rs2_b1_val == 64, rs2_b2_val == 127
// opcode: add8 ; op1:x20; op2:x14; dest:x16; op1val:0xfc050004;  op2val:0xdf7f4006
TEST_RR_OP(add8, x16, x20, x14, 0x00000000, 0xfc050004, 0xdf7f4006, x11, 48, x19)

inst_13:// rs1==x2, rs2==x1, rd==x29, rs2_b3_val == -17, rs1_b0_val == -9, rs1_b3_val == -17
// opcode: add8 ; op1:x2; op2:x1; dest:x29; op1val:0xef04dff7;  op2val:0xef10f8fc
TEST_RR_OP(add8, x29, x2, x1, 0x00000000, 0xef04dff7, 0xef10f8fc, x11, 52, x19)

inst_14:// rs1==x12, rs2==x2, rd==x30, rs2_b3_val == -9, rs1_b1_val == -2, rs2_b0_val == -9, rs1_b0_val == 2, rs1_b2_val == -2
// opcode: add8 ; op1:x12; op2:x2; dest:x30; op1val:0xf8fefe02;  op2val:0xf7f8f8f7
TEST_RR_OP(add8, x30, x12, x2, 0x00000000, 0xf8fefe02, 0xf7f8f8f7, x11, 56, x19)

inst_15:// rs1==x13, rs2==x0, rd==x7, rs2_b3_val == -3, rs2_b2_val == -5, rs2_b0_val == -2, rs1_b2_val == 0
// opcode: add8 ; op1:x13; op2:x0; dest:x7; op1val:0xfa0009aa;  op2val:0xfdfb07fe
TEST_RR_OP(add8, x7, x13, x0, 0x00000000, 0xfa0009aa, 0xfdfb07fe, x11, 60, x3)

inst_16:// rs1==x0, rs2==x31, rd==x19, rs2_b3_val == -2, rs1_b3_val == -3, rs1_b1_val == 1, rs2_b1_val == -128, rs2_b2_val == 4
// opcode: add8 ; op1:x0; op2:x31; dest:x19; op1val:0xfdc00107;  op2val:0xfe048006
TEST_RR_OP(add8, x19, x0, x31, 0x00000000, 0xfdc00107, 0xfe048006, x11, 64, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:// rs1==x29, rs2==x6, rd==x24, rs2_b3_val == -128, rs2_b1_val == -2, rs1_b0_val == -5, rs1_b3_val == 16
// opcode: add8 ; op1:x29; op2:x6; dest:x24; op1val:0x1009fefb;  op2val:0x8004fec0
TEST_RR_OP(add8, x24, x29, x6, 0x00000000, 0x1009fefb, 0x8004fec0, x2, 0, x3)

inst_18:// rs1==x11, rs2==x29, rd==x27, rs2_b3_val == 32, rs1_b0_val == -1, rs1_b3_val == -1, rs2_b0_val == 2, rs1_b1_val == 8
// opcode: add8 ; op1:x11; op2:x29; dest:x27; op1val:0xfff908ff;  op2val:0x203ffe02
TEST_RR_OP(add8, x27, x11, x29, 0x00000000, 0xfff908ff, 0x203ffe02, x2, 4, x3)

inst_19:// rs1==x28, rs2==x11, rd==x4, rs2_b3_val == 8, rs2_b1_val == 8
// opcode: add8 ; op1:x28; op2:x11; dest:x4; op1val:0x7ff6dfc0;  op2val:0x83f08aa
TEST_RR_OP(add8, x4, x28, x11, 0x00000000, 0x7ff6dfc0, 0x83f08aa, x2, 8, x3)

inst_20:// rs1==x1, rs2==x16, rd==x8, rs2_b3_val == 4, 
// opcode: add8 ; op1:x1; op2:x16; dest:x8; op1val:0x8003fffa;  op2val:0x4ff8009
TEST_RR_OP(add8, x8, x1, x16, 0x00000000, 0x8003fffa, 0x4ff8009, x2, 12, x3)

inst_21:// rs1==x30, rs2==x15, rd==x5, rs2_b3_val == 2, rs1_b3_val == 64, rs1_b2_val == -3, rs2_b1_val == -17
// opcode: add8 ; op1:x30; op2:x15; dest:x5; op1val:0x40fd03fc;  op2val:0x2feefaa
TEST_RR_OP(add8, x5, x30, x15, 0x00000000, 0x40fd03fc, 0x2feefaa, x2, 16, x3)

inst_22:// rs1==x6, rs2==x12, rd==x10, rs2_b3_val == 1, rs1_b0_val == 1, rs1_b1_val == 16
// opcode: add8 ; op1:x6; op2:x12; dest:x10; op1val:0x3401001;  op2val:0x1fbfbf6
TEST_RR_OP(add8, x10, x6, x12, 0x00000000, 0x3401001, 0x1fbfbf6, x2, 20, x3)

inst_23:// rs1==x25, rs2==x20, rd==x12, rs2_b3_val == 0, rs2_b0_val == 32, rs1_b0_val == -33
// opcode: add8 ; op1:x25; op2:x20; dest:x12; op1val:0xc0f640df;  op2val:0xbf2020
TEST_RR_OP(add8, x12, x25, x20, 0x00000000, 0xc0f640df, 0xbf2020, x2, 24, x3)

inst_24:// rs1==x18, rs2==x17, rd==x31, rs2_b3_val == -1, rs2_b0_val == 8, rs1_b3_val == 32
// opcode: add8 ; op1:x18; op2:x17; dest:x31; op1val:0x20c0f620;  op2val:0xfffaf608
TEST_RR_OP(add8, x31, x18, x17, 0x00000000, 0x20c0f620, 0xfffaf608, x2, 28, x3)

inst_25:// rs1==x27, rs2==x21, rd==x0, rs2_b2_val == -86, rs1_b2_val == 32, rs2_b1_val == -1
// opcode: add8 ; op1:x27; op2:x21; dest:x0; op1val:0xf9203ffc;  op2val:0x7aaff06
TEST_RR_OP(add8, x0, x27, x21, 0x00000000, 0xf9203ffc, 0x7aaff06, x2, 32, x3)

inst_26:// rs1==x5, rs2==x19, rd==x11, rs1_b2_val == -33, rs1_b3_val == 4, rs2_b1_val == -9
// opcode: add8 ; op1:x5; op2:x19; dest:x11; op1val:0x4df00f9;  op2val:0xf8f6f703
TEST_RR_OP(add8, x11, x5, x19, 0x00000000, 0x4df00f9, 0xf8f6f703, x2, 36, x3)

inst_27:// rs1==x22, rs2==x18, rd==x20, rs1_b2_val == -17, rs2_b1_val == 16, rs1_b1_val == -9
// opcode: add8 ; op1:x22; op2:x18; dest:x20; op1val:0xc0eff7f7;  op2val:0x40fc10f6
TEST_RR_OP(add8, x20, x22, x18, 0x00000000, 0xc0eff7f7, 0x40fc10f6, x2, 40, x3)

inst_28:// rs1==x7, rs2==x27, rd==x22, rs1_b2_val == -9, rs1_b0_val == -17
// opcode: add8 ; op1:x7; op2:x27; dest:x22; op1val:0xf8f720ef;  op2val:0xfa0140ff
TEST_RR_OP(add8, x22, x7, x27, 0x00000000, 0xf8f720ef, 0xfa0140ff, x2, 44, x3)

inst_29:// rs1==x19, rs2==x28, rd==x15, rs1_b2_val == -5, rs2_b0_val == 127
// opcode: add8 ; op1:x19; op2:x28; dest:x15; op1val:0x6fb0380;  op2val:0xf6fb3f7f
TEST_RR_OP(add8, x15, x19, x28, 0x00000000, 0x6fb0380, 0xf6fb3f7f, x2, 48, x3)

inst_30:// rs1==x8, rs2==x26, rd==x14, rs1_b2_val == -128, rs1_b3_val == -2
// opcode: add8 ; op1:x8; op2:x26; dest:x14; op1val:0xfe80aafb;  op2val:0xf8bff7f9
TEST_RR_OP(add8, x14, x8, x26, 0x00000000, 0xfe80aafb, 0xf8bff7f9, x2, 52, x3)

inst_31:// rs1==x24, rs1_b2_val == 16, rs2_b0_val == -65, rs2_b2_val == -9
// opcode: add8 ; op1:x24; op2:x11; dest:x3; op1val:0x710fe20;  op2val:0x1f7f9bf
TEST_RR_OP(add8, x3, x24, x11, 0x00000000, 0x710fe20, 0x1f7f9bf, x2, 56, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:// rs2==x24, rs1_b2_val == 8, 
// opcode: add8 ; op1:x15; op2:x24; dest:x21; op1val:0x50840fb;  op2val:0x20094005
TEST_RR_OP(add8, x21, x15, x24, 0x00000000, 0x50840fb, 0x20094005, x1, 0, x4)

inst_33:// rd==x28, rs1_b2_val == 1, rs1_b0_val == 64
// opcode: add8 ; op1:x10; op2:x18; dest:x28; op1val:0xfc018040;  op2val:0x20f602fa
TEST_RR_OP(add8, x28, x10, x18, 0x00000000, 0xfc018040, 0x20f602fa, x1, 4, x4)

inst_34:// rs1_b2_val == -1, rs1_b1_val == 85
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9ff55aa;  op2val:0xfdfefd20
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xf9ff55aa, 0xfdfefd20, x1, 8, x4)

inst_35:// rs1_b1_val == -65, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x303bf09;  op2val:0xf705df07
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x303bf09, 0xf705df07, x1, 12, x4)

inst_36:// rs1_b1_val == -17, rs2_b2_val == -33
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ff9ef08;  op2val:0x7dff7f8
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x3ff9ef08, 0x7dff7f8, x1, 16, x4)

inst_37:// rs1_b1_val == -5, rs2_b0_val == 64
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x2004fbc0;  op2val:0x8ff8040
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x2004fbc0, 0x8ff8040, x1, 20, x4)

inst_38:// rs1_b1_val == 4, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfd0480;  op2val:0xfe0305bf
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfdfd0480, 0xfe0305bf, x1, 24, x4)

inst_39:// rs1_b1_val == 2, rs2_b1_val == 4
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fe0240;  op2val:0xfcfb04fb
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xf8fe0240, 0xfcfb04fb, x1, 28, x4)

inst_40:// rs1_b0_val == 127, rs1_b3_val == -5, rs2_b2_val == 8, rs1_b2_val == 85
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb55fa7f;  op2val:0x55080806
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfb55fa7f, 0x55080806, x1, 32, x4)

inst_41:// rs1_b0_val == -65, rs2_b0_val == 1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0106bf;  op2val:0x40fc5501
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x7f0106bf, 0x40fc5501, x1, 36, x4)

inst_42:// rs2_b1_val == -86, rs1_b3_val == 1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fa02c0;  op2val:0x7f06aaff
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x1fa02c0, 0x7f06aaff, x1, 40, x4)

inst_43:// rs2_b1_val == 127, rs2_b2_val == 32, rs1_b0_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcf709fe;  op2val:0xaa207f10
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfcf709fe, 0xaa207f10, x1, 44, x4)

inst_44:// rs2_b1_val == -65, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x6c0dff7;  op2val:0xdf07bf10
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x6c0dff7, 0xdf07bf10, x1, 48, x4)

inst_45:// rs2_b1_val == 1, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f6ef01;  op2val:0x3c00140
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xf7f6ef01, 0x3c00140, x1, 52, x4)

inst_46:// rs2_b1_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbc020fe;  op2val:0x801000f8
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfbc020fe, 0x801000f8, x1, 56, x4)

inst_47:// rs2_b2_val == -128, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x9800355;  op2val:0xbf8010ff
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x9800355, 0xbf8010ff, x1, 60, x4)

inst_48:// rs2_b0_val == 85, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf80909f8;  op2val:0x058055
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xf80909f8, 0x058055, x1, 64, x4)

inst_49:// rs2_b0_val == -33, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xffaa10fe;  op2val:0x908fbdf
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xffaa10fe, 0x908fbdf, x1, 68, x4)

inst_50:// rs2_b0_val == -17, rs1_b3_val == 2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x27ffa02;  op2val:0x40fefaef
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x27ffa02, 0x40fefaef, x1, 72, x4)

inst_51:// rs2_b0_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x47ffcf8;  op2val:0xff5500
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x47ffcf8, 0xff5500, x1, 76, x4)

inst_52:// rs1_b3_val == -86, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf6fcef;  op2val:0x3040820
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xaaf6fcef, 0x3040820, x1, 80, x4)

inst_53:// rs1_b3_val == -65, rs2_b0_val == -3
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfaa05c0;  op2val:0xdf3ffffd
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xbfaa05c0, 0xdf3ffffd, x1, 84, x4)

inst_54:// rs1_b0_val == -3, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f8fdfd;  op2val:0xf7aabffc
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x10f8fdfd, 0xf7aabffc, x1, 88, x4)

inst_55:// rs1_b3_val == -33, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfef5520;  op2val:0xf6feaa07
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xdfef5520, 0xf6feaa07, x1, 92, x4)

inst_56:// rs2_b2_val == 85, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x20c0fec0;  op2val:0xfe55f6df
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x20c0fec0, 0xfe55f6df, x1, 96, x4)

inst_57:// rs1_b0_val == 16, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fe0610;  op2val:0xfbfffb55
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x80fe0610, 0xfbfffb55, x1, 100, x4)

inst_58:// rs2_b2_val == -3, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x1553ffb;  op2val:0x40fd0740
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x1553ffb, 0x40fd0740, x1, 104, x4)

inst_59:// rs1_b0_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa20df00;  op2val:0xdf055508
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfa20df00, 0xdf055508, x1, 108, x4)

inst_60:// rs2_b2_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff8063f;  op2val:0x9000408
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xeff8063f, 0x9000408, x1, 112, x4)

inst_61:// rs1_b3_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x090902;  op2val:0x340aafb
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x090902, 0x340aafb, x1, 116, x4)

inst_62:// rs2_b2_val == 2, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef63ff7;  op2val:0x4002f9fd
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfef63ff7, 0x4002f9fd, x1, 120, x4)

inst_63:// rs1_b3_val == 8, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x80755fa;  op2val:0x40f820c0
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x80755fa, 0x40f820c0, x1, 124, x4)

inst_64:// rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val == -86, rs2_b3_val == 16, rs2_b1_val == -5, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -86, rs2_b2_val == 16, rs1_b2_val == -86, rs2_b0_val == -128
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x7faaaaaa;  op2val:0x1010fb80
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0x7faaaaaa, 0x1010fb80, x1, 128, x4)

inst_65:// rs2_b3_val == -3, rs2_b2_val == -5, rs2_b0_val == -2, rs1_b2_val == 0
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa0009aa;  op2val:0xfdfb07fe
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfa0009aa, 0xfdfb07fe, x1, 132, x4)

inst_66:// rs2_b3_val == -2, rs1_b3_val == -3, rs1_b1_val == 1, rs2_b1_val == -128, rs2_b2_val == 4
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdc00107;  op2val:0xfe048006
TEST_RR_OP(add8, x31, x30, x29, 0x00000000, 0xfdc00107, 0xfe048006, x1, 136, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 35*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
