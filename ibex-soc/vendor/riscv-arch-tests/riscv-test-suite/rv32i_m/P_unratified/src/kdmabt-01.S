
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabt instruction of the RISC-V RV32PZicsr extension for the kdmabt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x25, rd==x7, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 512, rs1_h1_val == 2048, rs2_h1_val == -1025
// opcode: kdmabt ; op1:x5; op2:x25; dest:x7; op1val:0x8008000;  op2val:0xfbff0200
TEST_PKRR_OP(kdmabt, x7, x5, x25, 0x00000000, 0x8008000, 0xfbff0200, x5, x8, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x21, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == -17, rs2_h1_val == -1, rs2_h0_val == 32767, rs1_h1_val == -1
// opcode: kdmabt ; op1:x18; op2:x18; dest:x21; op1val:0xffffffef;  op2val:0xffff7fff
TEST_PKRR_OP(kdmabt, x21, x18, x18, 0x00000000, 0xffffffef, 0xffff7fff, x18, x8, 8, x10)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x27, rd==x26, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -16385, rs2_h0_val == 8192, rs1_h1_val == -2
// opcode: kdmabt ; op1:x26; op2:x27; dest:x26; op1val:0xfffebfff;  op2val:0x032000
TEST_PKRR_OP(kdmabt, x26, x26, x27, 0x00000000, 0xfffebfff, 0x032000, x26, x8, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 32767
// opcode: kdmabt ; op1:x14; op2:x14; dest:x14; op1val:0x7fff0002;  op2val:0x03fffa
TEST_PKRR_OP(kdmabt, x14, x14, x14, 0x00000000, 0x7fff0002, 0x03fffa, x14, x8, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs2_h1_val == 16384, rs1_h0_val == -513, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -21846, rs2_h0_val == -513
// opcode: kdmabt ; op1:x30; op2:x12; dest:x12; op1val:0xaaaafdff;  op2val:0x4000fdff
TEST_PKRR_OP(kdmabt, x12, x30, x12, 0x00000000, 0xaaaafdff, 0x4000fdff, x30, x8, 32, x10)

inst_5:
// rs1==x20, rs2==x11, rd==x18, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 64, rs1_h0_val == 16384, rs2_h0_val == 16384
// opcode: kdmabt ; op1:x20; op2:x11; dest:x18; op1val:0xffff4000;  op2val:0x404000
TEST_PKRR_OP(kdmabt, x18, x20, x11, 0x00000000, 0xffff4000, 0x404000, x20, x8, 40, x10)

inst_6:
// rs1==x24, rs2==x6, rd==x1, rs2_h1_val == -21846, rs1_h0_val == -2, rs1_h1_val == 21845
// opcode: kdmabt ; op1:x24; op2:x6; dest:x1; op1val:0x5555fffe;  op2val:0xaaaa2000
TEST_PKRR_OP(kdmabt, x1, x24, x6, 0x00000000, 0x5555fffe, 0xaaaa2000, x24, x8, 48, x10)

inst_7:
// rs1==x9, rs2==x3, rd==x4, rs2_h1_val == 21845, rs1_h1_val == -257, rs1_h0_val == 1024
// opcode: kdmabt ; op1:x9; op2:x3; dest:x4; op1val:0xfeff0400;  op2val:0x55550200
TEST_PKRR_OP(kdmabt, x4, x9, x3, 0x00000000, 0xfeff0400, 0x55550200, x9, x8, 56, x10)

inst_8:
// rs1==x3, rs2==x5, rd==x16, rs2_h1_val == 32767, rs2_h0_val == 4, rs1_h1_val == -1025, rs1_h0_val == 2048
// opcode: kdmabt ; op1:x3; op2:x5; dest:x16; op1val:0xfbff0800;  op2val:0x7fff0004
TEST_PKRR_OP(kdmabt, x16, x3, x5, 0x00000000, 0xfbff0800, 0x7fff0004, x3, x8, 64, x10)

inst_9:
// rs1==x16, rs2==x19, rd==x0, rs2_h1_val == -16385, rs2_h0_val == -32768
// opcode: kdmabt ; op1:x16; op2:x19; dest:x0; op1val:0xffff0009;  op2val:0xbfff8000
TEST_PKRR_OP(kdmabt, x0, x16, x19, 0x00000000, 0xffff0009, 0xbfff8000, x16, x8, 72, x10)

inst_10:
// rs1==x22, rs2==x13, rd==x2, rs2_h1_val == -8193, rs1_h1_val == 32, rs1_h0_val == 16
// opcode: kdmabt ; op1:x22; op2:x13; dest:x2; op1val:0x200010;  op2val:0xdffffff8
TEST_PKRR_OP(kdmabt, x2, x22, x13, 0x00000000, 0x200010, 0xdffffff8, x22, x8, 80, x10)

inst_11:
// rs1==x2, rs2==x30, rd==x17, rs2_h1_val == -4097, rs1_h0_val == -21846, rs1_h1_val == 1024, rs2_h0_val == 16
// opcode: kdmabt ; op1:x2; op2:x30; dest:x17; op1val:0x400aaaa;  op2val:0xefff0010
TEST_PKRR_OP(kdmabt, x17, x2, x30, 0x00000000, 0x400aaaa, 0xefff0010, x2, x8, 88, x10)

inst_12:
// rs1==x7, rs2==x16, rd==x3, rs2_h1_val == -2049, rs1_h0_val == -129
// opcode: kdmabt ; op1:x7; op2:x16; dest:x3; op1val:0xffffff7f;  op2val:0xf7ff0200
TEST_PKRR_OP(kdmabt, x3, x7, x16, 0x00000000, 0xffffff7f, 0xf7ff0200, x7, x8, 96, x10)

inst_13:
// rs1==x29, rs2==x23, rd==x11, rs2_h1_val == -513, rs2_h0_val == 1024, rs1_h1_val == -9, rs1_h0_val == 32
// opcode: kdmabt ; op1:x29; op2:x23; dest:x11; op1val:0xfff70020;  op2val:0xfdff0400
TEST_PKRR_OP(kdmabt, x11, x29, x23, 0x00000000, 0xfff70020, 0xfdff0400, x29, x8, 104, x10)

inst_14:
// rs1==x11, rs2==x2, rd==x31, rs2_h1_val == -257, rs1_h0_val == 32767, rs2_h0_val == -65
// opcode: kdmabt ; op1:x11; op2:x2; dest:x31; op1val:0x057fff;  op2val:0xfeffffbf
TEST_PKRR_OP(kdmabt, x31, x11, x2, 0x00000000, 0x057fff, 0xfeffffbf, x11, x8, 112, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x25, rs2==x0, rd==x19, rs2_h1_val == -129, rs1_h0_val == 64, rs2_h0_val == -1
// opcode: kdmabt ; op1:x25; op2:x0; dest:x19; op1val:0xffff0040;  op2val:0xff7fffff
TEST_PKRR_OP(kdmabt, x19, x25, x0, 0x00000000, 0xffff0040, 0xff7fffff, x25, x2, 0, x3)

inst_16:
// rs1==x21, rs2==x10, rd==x30, rs2_h1_val == -65, 
// opcode: kdmabt ; op1:x21; op2:x10; dest:x30; op1val:0xffff4000;  op2val:0xffbffffc
TEST_PKRR_OP(kdmabt, x30, x21, x10, 0x00000000, 0xffff4000, 0xffbffffc, x21, x2, 8, x3)

inst_17:
// rs1==x6, rs2==x24, rd==x23, rs2_h1_val == -33, rs1_h1_val == 8, rs2_h0_val == 4096
// opcode: kdmabt ; op1:x6; op2:x24; dest:x23; op1val:0x08bfff;  op2val:0xffdf1000
TEST_PKRR_OP(kdmabt, x23, x6, x24, 0x00000000, 0x08bfff, 0xffdf1000, x6, x2, 16, x3)

inst_18:
// rs1==x1, rs2==x4, rd==x22, rs2_h1_val == -17, rs1_h0_val == 21845, rs1_h1_val == -32768
// opcode: kdmabt ; op1:x1; op2:x4; dest:x22; op1val:0x80005555;  op2val:0xffef0003
TEST_PKRR_OP(kdmabt, x22, x1, x4, 0x00000000, 0x80005555, 0xffef0003, x1, x2, 24, x3)

inst_19:
// rs1==x17, rs2==x7, rd==x13, rs2_h1_val == -9, rs2_h0_val == 64
// opcode: kdmabt ; op1:x17; op2:x7; dest:x13; op1val:0xfffffffe;  op2val:0xfff70040
TEST_PKRR_OP(kdmabt, x13, x17, x7, 0x00000000, 0xfffffffe, 0xfff70040, x17, x2, 32, x3)

inst_20:
// rs1==x8, rs2==x21, rd==x24, rs2_h1_val == -5, rs2_h0_val == -129, rs1_h0_val == -2049
// opcode: kdmabt ; op1:x8; op2:x21; dest:x24; op1val:0x03f7ff;  op2val:0xfffbff7f
TEST_PKRR_OP(kdmabt, x24, x8, x21, 0x00000000, 0x03f7ff, 0xfffbff7f, x8, x2, 40, x3)

inst_21:
// rs1==x12, rs2==x28, rd==x20, rs2_h1_val == -3, rs1_h0_val == -9
// opcode: kdmabt ; op1:x12; op2:x28; dest:x20; op1val:0x8000fff7;  op2val:0xfffdfdff
TEST_PKRR_OP(kdmabt, x20, x12, x28, 0x00000000, 0x8000fff7, 0xfffdfdff, x12, x2, 48, x3)

inst_22:
// rs1==x15, rs2==x31, rd==x9, rs2_h1_val == -2, rs1_h0_val == 0
// opcode: kdmabt ; op1:x15; op2:x31; dest:x9; op1val:0x070000;  op2val:0xfffeffff
TEST_PKRR_OP(kdmabt, x9, x15, x31, 0x00000000, 0x070000, 0xfffeffff, x15, x2, 56, x3)

inst_23:
// rs1==x31, rs2==x1, rd==x28, rs2_h1_val == -32768, rs2_h0_val == -5, rs1_h1_val == 64
// opcode: kdmabt ; op1:x31; op2:x1; dest:x28; op1val:0x400020;  op2val:0x8000fffb
TEST_PKRR_OP(kdmabt, x28, x31, x1, 0x00000000, 0x400020, 0x8000fffb, x31, x2, 64, x3)

inst_24:
// rs1==x10, rs2==x26, rd==x5, rs2_h1_val == 8192, rs1_h0_val == -1
// opcode: kdmabt ; op1:x10; op2:x26; dest:x5; op1val:0xfffaffff;  op2val:0x20008000
TEST_PKRR_OP(kdmabt, x5, x10, x26, 0x00000000, 0xfffaffff, 0x20008000, x10, x2, 72, x3)

inst_25:
// rs1==x4, rs2==x29, rd==x15, rs2_h1_val == 4096, rs2_h0_val == -2049
// opcode: kdmabt ; op1:x4; op2:x29; dest:x15; op1val:0x3fff4000;  op2val:0x1000f7ff
TEST_PKRR_OP(kdmabt, x15, x4, x29, 0x00000000, 0x3fff4000, 0x1000f7ff, x4, x2, 80, x3)

inst_26:
// rs1==x23, rs2==x9, rd==x10, rs2_h1_val == 2048, rs1_h0_val == -3, rs2_h0_val == 1
// opcode: kdmabt ; op1:x23; op2:x9; dest:x10; op1val:0x08fffd;  op2val:0x8000001
TEST_PKRR_OP(kdmabt, x10, x23, x9, 0x00000000, 0x08fffd, 0x8000001, x23, x2, 88, x3)

inst_27:
// rs1==x28, rs2==x8, rd==x27, rs2_h1_val == 1024, 
// opcode: kdmabt ; op1:x28; op2:x8; dest:x27; op1val:0x55550003;  op2val:0x400ffbf
TEST_PKRR_OP(kdmabt, x27, x28, x8, 0x00000000, 0x55550003, 0x400ffbf, x28, x2, 96, x3)

inst_28:
// rs1==x27, rs2==x20, rd==x25, rs2_h1_val == 512, rs2_h0_val == 2, rs1_h1_val == -2049
// opcode: kdmabt ; op1:x27; op2:x20; dest:x25; op1val:0xf7ff0007;  op2val:0x2000002
TEST_PKRR_OP(kdmabt, x25, x27, x20, 0x00000000, 0xf7ff0007, 0x2000002, x27, x2, 104, x1)

inst_29:
// rs1==x13, rs2==x22, rd==x8, rs2_h1_val == 256, rs1_h1_val == -33, rs2_h0_val == 32
// opcode: kdmabt ; op1:x13; op2:x22; dest:x8; op1val:0xffdffffc;  op2val:0x1000020
TEST_PKRR_OP(kdmabt, x8, x13, x22, 0x00000000, 0xffdffffc, 0x1000020, x13, x2, 112, x1)

inst_30:
// rs1==x0, rs2==x15, rd==x6, rs1_h0_val == -1025, 
// opcode: kdmabt ; op1:x0; op2:x15; dest:x6; op1val:0xfff6fbff;  op2val:0xeffffdff
TEST_PKRR_OP(kdmabt, x6, x0, x15, 0x00000000, 0xfff6fbff, 0xeffffdff, x0, x2, 120, x1)

inst_31:
// rs1==x19, rs2==x17, rd==x29, rs1_h0_val == -257, rs1_h1_val == -5
// opcode: kdmabt ; op1:x19; op2:x17; dest:x29; op1val:0xfffbfeff;  op2val:0x400ff7f
TEST_PKRR_OP(kdmabt, x29, x19, x17, 0x00000000, 0xfffbfeff, 0x400ff7f, x19, x2, 128, x1)

inst_32:
// rs1_h0_val == -65, rs2_h0_val == -16385
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbf;  op2val:0xff7fbfff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xffdfffbf, 0xff7fbfff, x30, x2, 136, x1)

inst_33:
// rs1_h0_val == -33, rs2_h0_val == -1025
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdf;  op2val:0xfff7fbff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xc000ffdf, 0xfff7fbff, x30, x2, 144, x1)

inst_34:
// rs1_h0_val == -5, rs1_h1_val == -8193
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb;  op2val:0x05fffb
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xdffffffb, 0x05fffb, x30, x2, 152, x1)

inst_35:
// rs1_h0_val == 8192, rs2_h0_val == 0
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000;  op2val:0xc0000000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfffe2000, 0xc0000000, x30, x2, 160, x1)

inst_36:
// rs1_h0_val == 4096, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x061000;  op2val:0x03fffc
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x061000, 0x03fffc, x30, x2, 168, x1)

inst_37:
// rs1_h0_val == 512, rs1_h1_val == 16, rs2_h1_val == 128
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x100200;  op2val:0x800007
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x100200, 0x800007, x30, x2, 176, x1)

inst_38:
// rs1_h0_val == 256, rs2_h0_val == 128
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0100;  op2val:0x1000080
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfffb0100, 0x1000080, x30, x2, 184, x1)

inst_39:
// rs1_h0_val == 128, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0080;  op2val:0x4000c000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfbff0080, 0x4000c000, x30, x2, 192, x1)

inst_40:
// rs1_h0_val == 8, rs1_h1_val == -17, rs2_h1_val == 4
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffef0008;  op2val:0x040200
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xffef0008, 0x040200, x30, x2, 200, x1)

inst_41:
// rs1_h0_val == 4, rs1_h1_val == 128
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800004;  op2val:0xfdff0007
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x800004, 0xfdff0007, x30, x2, 208, x1)

inst_42:
// rs1_h0_val == 1, rs2_h0_val == -2
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0001;  op2val:0xeffffffe
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfffc0001, 0xeffffffe, x30, x2, 216, x1)

inst_43:
// rs2_h1_val == 32, rs1_h1_val == 512
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x200fff8;  op2val:0x200009
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x200fff8, 0x200009, x30, x2, 224, x1)

inst_44:
// rs2_h1_val == 16, rs1_h1_val == 0
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0x100010
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x000010, 0x100010, x30, x2, 232, x1)

inst_45:
// rs2_h1_val == 8, rs2_h0_val == -3
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0006;  op2val:0x08fffd
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xdfff0006, 0x08fffd, x30, x2, 240, x1)

inst_46:
// rs2_h0_val == 2048, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80fffd;  op2val:0x2000800
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x80fffd, 0x2000800, x30, x2, 248, x1)

inst_47:
// rs2_h0_val == 256, rs1_h1_val == -3
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0020;  op2val:0x080100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfffd0020, 0x080100, x30, x2, 256, x1)

inst_48:
// rs2_h0_val == 8, rs1_h1_val == -4097
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0xfff80008
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xeffffeff, 0xfff80008, x30, x2, 264, x1)

inst_49:
// rs1_h1_val == -16385, rs2_h0_val == -257
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0001;  op2val:0x5555feff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xbfff0001, 0x5555feff, x30, x2, 272, x1)

inst_50:
// rs1_h1_val == -513, rs2_h1_val == 1, rs2_h0_val == -33, rs1_h0_val == -4097
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefff;  op2val:0x01ffdf
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfdffefff, 0x01ffdf, x30, x2, 280, x1)

inst_51:
// rs2_h0_val == -17, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff1000;  op2val:0xfffbffef
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x7fff1000, 0xfffbffef, x30, x2, 288, x1)

inst_52:
// rs1_h1_val == -129, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0000;  op2val:0xfffafdff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xff7f0000, 0xfffafdff, x30, x2, 296, x1)

inst_53:
// rs1_h1_val == -65, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0001;  op2val:0xfffa4000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xffbf0001, 0xfffa4000, x30, x2, 304, x1)

inst_54:
// rs1_h1_val == 16384, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40000040;  op2val:0xefff0001
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x40000040, 0xefff0001, x30, x2, 312, x1)

inst_55:
// rs1_h1_val == 8192, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ff;  op2val:0xff7ffff9
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x2000f7ff, 0xff7ffff9, x30, x2, 320, x1)

inst_56:
// rs1_h1_val == 4096, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x10000020;  op2val:0xfbff0010
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x10000020, 0xfbff0010, x30, x2, 328, x1)

inst_57:
// rs2_h1_val == 2, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x107fff;  op2val:0x02feff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x107fff, 0x02feff, x30, x2, 336, x1)

inst_58:
// rs1_h1_val == 256, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x1000080;  op2val:0x807fff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x1000080, 0x807fff, x30, x2, 344, x1)

inst_59:
// rs2_h1_val == 0, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x10fffa;  op2val:0x000100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x10fffa, 0x000100, x30, x2, 352, x1)

inst_60:
// rs2_h0_val == -21846, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80000400;  op2val:0xbfffaaaa
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x80000400, 0xbfffaaaa, x30, x2, 360, x1)

inst_61:
// rs2_h0_val == 21845, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0006;  op2val:0x4005555
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xaaaa0006, 0x4005555, x30, x2, 368, x1)

inst_62:
// rs1_h1_val == 4, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x043fff;  op2val:0xfffb0080
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x043fff, 0xfffb0080, x30, x2, 376, x1)

inst_63:
// rs2_h0_val == -8193, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80010;  op2val:0xffefdfff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfff80010, 0xffefdfff, x30, x2, 384, x1)

inst_64:
// rs1_h1_val == 2, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x020400;  op2val:0x004000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x020400, 0x004000, x30, x2, 392, x1)

inst_65:
// rs1_h1_val == 1, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x012000;  op2val:0x80000400
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x012000, 0x80000400, x30, x2, 400, x1)

inst_66:
// rs1_h0_val == -8193, rs2_h0_val == -9
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff;  op2val:0x20fff7
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x20dfff, 0x20fff7, x30, x2, 408, x1)

inst_67:
// rs2_h0_val == -4097, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff8;  op2val:0x40efff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfffafff8, 0x40efff, x30, x2, 416, x1)

inst_68:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == -17, rs2_h1_val == -1, rs2_h0_val == 32767, rs1_h1_val == -1
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xffff7fff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xffffffef, 0xffff7fff, x30, x2, 424, x1)

inst_69:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 32767
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002;  op2val:0x03fffa
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0x7fff0002, 0x03fffa, x30, x2, 432, x1)

inst_70:
// rs1_h0_val == -1025, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fbff;  op2val:0xeffffdff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x00000000, 0xfff6fbff, 0xeffffdff, x30, x2, 440, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
