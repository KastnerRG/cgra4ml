
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smbt16 instruction of the RISC-V RV32PZicsr extension for the smbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x15, rd==x7, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 128, rs2_h1_val == -21846, rs1_h1_val == 4
// opcode: smbt16 ; op1:x6; op2:x15; dest:x7; op1val:0x048000;  op2val:0xaaaa0080
TEST_RR_OP(smbt16, x7, x6, x15, 0x00000000, 0x048000, 0xaaaa0080, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x21, rs1_h1_val == rs2_h1_val, rs1_h0_val == -4097, rs2_h0_val == 32767, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: smbt16 ; op1:x23; op2:x23; dest:x21; op1val:0x03efff;  op2val:0x037fff
TEST_RR_OP(smbt16, x21, x23, x23, 0x00000000, 0x03efff, 0x037fff, x4, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x28, rd==x9, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 21845, rs1_h0_val == -257
// opcode: smbt16 ; op1:x9; op2:x28; dest:x9; op1val:0xfffcfeff;  op2val:0x5555fffd
TEST_RR_OP(smbt16, x9, x9, x28, 0x00000000, 0xfffcfeff, 0x5555fffd, x4, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 1, rs1_h1_val == -2049, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -32768
// opcode: smbt16 ; op1:x22; op2:x22; dest:x22; op1val:0xf7ff0001;  op2val:0x8000fff9
TEST_RR_OP(smbt16, x22, x22, x22, 0x00000000, 0xf7ff0001, 0x8000fff9, x4, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x24, rd==x24, rs1_h0_val == rs2_h0_val, rs1_h0_val == -16385, rs2_h1_val == -5, rs1_h1_val == 2, rs2_h0_val == -16385
// opcode: smbt16 ; op1:x8; op2:x24; dest:x24; op1val:0x02bfff;  op2val:0xfffbbfff
TEST_RR_OP(smbt16, x24, x8, x24, 0x00000000, 0x02bfff, 0xfffbbfff, x4, 16, x5)

inst_5:
// rs1==x15, rs2==x17, rd==x6, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 512, rs2_h0_val == 512, rs1_h1_val == 16
// opcode: smbt16 ; op1:x15; op2:x17; dest:x6; op1val:0x100200;  op2val:0xfff80200
TEST_RR_OP(smbt16, x6, x15, x17, 0x00000000, 0x100200, 0xfff80200, x4, 20, x5)

inst_6:
// rs1==x16, rs2==x7, rd==x2, rs2_h1_val == 32767, rs2_h0_val == 1, rs1_h0_val == -8193
// opcode: smbt16 ; op1:x16; op2:x7; dest:x2; op1val:0xfff6dfff;  op2val:0x7fff0001
TEST_RR_OP(smbt16, x2, x16, x7, 0x00000000, 0xfff6dfff, 0x7fff0001, x4, 24, x5)

inst_7:
// rs1==x3, rs2==x13, rd==x15, rs2_h1_val == -16385, rs2_h0_val == -513, rs1_h0_val == -17
// opcode: smbt16 ; op1:x3; op2:x13; dest:x15; op1val:0xfffcffef;  op2val:0xbffffdff
TEST_RR_OP(smbt16, x15, x3, x13, 0x00000000, 0xfffcffef, 0xbffffdff, x4, 28, x5)

inst_8:
// rs1==x27, rs2==x19, rd==x12, rs2_h1_val == -8193, rs2_h0_val == 0, rs1_h1_val == -2, rs1_h0_val == 4
// opcode: smbt16 ; op1:x27; op2:x19; dest:x12; op1val:0xfffe0004;  op2val:0xdfff0000
TEST_RR_OP(smbt16, x12, x27, x19, 0x00000000, 0xfffe0004, 0xdfff0000, x4, 32, x5)

inst_9:
// rs1==x24, rs2==x27, rd==x3, rs2_h1_val == -4097, rs2_h0_val == -1025, rs1_h1_val == -9
// opcode: smbt16 ; op1:x24; op2:x27; dest:x3; op1val:0xfff7ffef;  op2val:0xeffffbff
TEST_RR_OP(smbt16, x3, x24, x27, 0x00000000, 0xfff7ffef, 0xeffffbff, x4, 36, x5)

inst_10:
// rs1==x13, rs2==x18, rd==x25, rs2_h1_val == -2049, rs1_h0_val == 8192, rs2_h0_val == -1
// opcode: smbt16 ; op1:x13; op2:x18; dest:x25; op1val:0x092000;  op2val:0xf7ffffff
TEST_RR_OP(smbt16, x25, x13, x18, 0x00000000, 0x092000, 0xf7ffffff, x4, 40, x5)

inst_11:
// rs1==x20, rs2==x30, rd==x14, rs2_h1_val == -1025, rs2_h0_val == 256
// opcode: smbt16 ; op1:x20; op2:x30; dest:x14; op1val:0xfff80006;  op2val:0xfbff0100
TEST_RR_OP(smbt16, x14, x20, x30, 0x00000000, 0xfff80006, 0xfbff0100, x4, 44, x5)

inst_12:
// rs1==x10, rs2==x12, rd==x17, rs2_h1_val == -513, rs1_h1_val == 32, rs2_h0_val == 32
// opcode: smbt16 ; op1:x10; op2:x12; dest:x17; op1val:0x20efff;  op2val:0xfdff0020
TEST_RR_OP(smbt16, x17, x10, x12, 0x00000000, 0x20efff, 0xfdff0020, x4, 48, x5)

inst_13:
// rs1==x1, rs2==x26, rd==x19, rs2_h1_val == -257, rs1_h0_val == 128
// opcode: smbt16 ; op1:x1; op2:x26; dest:x19; op1val:0x3fff0080;  op2val:0xfeff0007
TEST_RR_OP(smbt16, x19, x1, x26, 0x00000000, 0x3fff0080, 0xfeff0007, x4, 52, x5)

inst_14:
// rs1==x19, rs2==x0, rd==x1, rs2_h1_val == -129, rs2_h0_val == -17
// opcode: smbt16 ; op1:x19; op2:x0; dest:x1; op1val:0x062000;  op2val:0xff7fffef
TEST_RR_OP(smbt16, x1, x19, x0, 0x00000000, 0x062000, 0xff7fffef, x4, 56, x3)

inst_15:
// rs1==x29, rs2==x2, rd==x0, rs2_h1_val == -65, rs1_h1_val == -21846, rs2_h0_val == 4096
// opcode: smbt16 ; op1:x29; op2:x2; dest:x0; op1val:0xaaaa0007;  op2val:0xffbf1000
TEST_RR_OP(smbt16, x0, x29, x2, 0x00000000, 0xaaaa0007, 0xffbf1000, x4, 60, x3)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_16:
// rs1==x25, rs2==x1, rd==x23, rs2_h1_val == -33, rs2_h0_val == -2049
// opcode: smbt16 ; op1:x25; op2:x1; dest:x23; op1val:0xfffafff6;  op2val:0xffdff7ff
TEST_RR_OP(smbt16, x23, x25, x1, 0x00000000, 0xfffafff6, 0xffdff7ff, x15, 0, x3)

inst_17:
// rs1==x5, rs2==x25, rd==x30, rs2_h1_val == -17, rs1_h1_val == 8192
// opcode: smbt16 ; op1:x5; op2:x25; dest:x30; op1val:0x20000004;  op2val:0xffef0003
TEST_RR_OP(smbt16, x30, x5, x25, 0x00000000, 0x20000004, 0xffef0003, x15, 4, x3)

inst_18:
// rs1==x28, rs2==x9, rd==x31, rs2_h1_val == -9, rs1_h1_val == 512
// opcode: smbt16 ; op1:x28; op2:x9; dest:x31; op1val:0x2000005;  op2val:0xfff7fff6
TEST_RR_OP(smbt16, x31, x28, x9, 0x00000000, 0x2000005, 0xfff7fff6, x15, 8, x3)

inst_19:
// rs1==x2, rs2==x14, rd==x11, rs2_h1_val == -3, rs1_h1_val == 256
// opcode: smbt16 ; op1:x2; op2:x14; dest:x11; op1val:0x100efff;  op2val:0xfffd0003
TEST_RR_OP(smbt16, x11, x2, x14, 0x00000000, 0x100efff, 0xfffd0003, x15, 12, x3)

inst_20:
// rs1==x11, rs2==x6, rd==x28, rs2_h1_val == -2, rs2_h0_val == -4097
// opcode: smbt16 ; op1:x11; op2:x6; dest:x28; op1val:0x030003;  op2val:0xfffeefff
TEST_RR_OP(smbt16, x28, x11, x6, 0x00000000, 0x030003, 0xfffeefff, x15, 16, x3)

inst_21:
// rs1==x26, rs2==x29, rd==x16, rs2_h1_val == 16384, rs1_h0_val == -5
// opcode: smbt16 ; op1:x26; op2:x29; dest:x16; op1val:0xfff6fffb;  op2val:0x40000200
TEST_RR_OP(smbt16, x16, x26, x29, 0x00000000, 0xfff6fffb, 0x40000200, x15, 20, x3)

inst_22:
// rs1==x31, rs2==x20, rd==x18, rs2_h1_val == 8192, rs2_h0_val == -129, rs1_h1_val == 1
// opcode: smbt16 ; op1:x31; op2:x20; dest:x18; op1val:0x01fffb;  op2val:0x2000ff7f
TEST_RR_OP(smbt16, x18, x31, x20, 0x00000000, 0x01fffb, 0x2000ff7f, x15, 24, x3)

inst_23:
// rs1==x4, rs2==x5, rd==x29, rs2_h1_val == 4096, rs1_h0_val == -129, rs2_h0_val == 16
// opcode: smbt16 ; op1:x4; op2:x5; dest:x29; op1val:0xfffcff7f;  op2val:0x10000010
TEST_RR_OP(smbt16, x29, x4, x5, 0x00000000, 0xfffcff7f, 0x10000010, x15, 28, x3)

inst_24:
// rs1==x30, rs2==x8, rd==x5, rs2_h1_val == 2048, rs1_h1_val == -65, rs2_h0_val == 16384
// opcode: smbt16 ; op1:x30; op2:x8; dest:x5; op1val:0xffbffffc;  op2val:0x8004000
TEST_RR_OP(smbt16, x5, x30, x8, 0x00000000, 0xffbffffc, 0x8004000, x15, 32, x3)

inst_25:
// rs1==x18, rs2==x4, rd==x26, rs2_h1_val == 1024, 
// opcode: smbt16 ; op1:x18; op2:x4; dest:x26; op1val:0x200fffb;  op2val:0x4000006
TEST_RR_OP(smbt16, x26, x18, x4, 0x00000000, 0x200fffb, 0x4000006, x15, 36, x3)

inst_26:
// rs1==x7, rs2==x11, rd==x20, rs2_h1_val == 512, rs2_h0_val == 4, rs1_h0_val == 0
// opcode: smbt16 ; op1:x7; op2:x11; dest:x20; op1val:0xfffa0000;  op2val:0x2000004
TEST_RR_OP(smbt16, x20, x7, x11, 0x00000000, 0xfffa0000, 0x2000004, x15, 40, x3)

inst_27:
// rs1==x14, rs2==x21, rd==x8, rs2_h1_val == 256, rs1_h0_val == -33
// opcode: smbt16 ; op1:x14; op2:x21; dest:x8; op1val:0xfffcffdf;  op2val:0x1000007
TEST_RR_OP(smbt16, x8, x14, x21, 0x00000000, 0xfffcffdf, 0x1000007, x15, 44, x3)

inst_28:
// rs1==x17, rs2==x10, rd==x13, rs2_h1_val == 128, rs1_h1_val == 32767
// opcode: smbt16 ; op1:x17; op2:x10; dest:x13; op1val:0x7fff0009;  op2val:0x80fff6
TEST_RR_OP(smbt16, x13, x17, x10, 0x00000000, 0x7fff0009, 0x80fff6, x15, 48, x3)

inst_29:
// rs1==x0, rs2==x16, rd==x27, rs2_h1_val == 64, rs1_h0_val == 8
// opcode: smbt16 ; op1:x0; op2:x16; dest:x27; op1val:0xaaaa0008;  op2val:0x40fffd
TEST_RR_OP(smbt16, x27, x0, x16, 0x00000000, 0xaaaa0008, 0x40fffd, x15, 52, x3)

inst_30:
// rs1==x21, rs2==x3, rd==x10, rs2_h1_val == 32, rs1_h0_val == -21846
// opcode: smbt16 ; op1:x21; op2:x3; dest:x10; op1val:0x100aaaa;  op2val:0x200001
TEST_RR_OP(smbt16, x10, x21, x3, 0x00000000, 0x100aaaa, 0x200001, x15, 56, x2)

inst_31:
// rs1==x12, rs2==x31, rd==x4, rs2_h1_val == 16, rs1_h1_val == -1, rs1_h0_val == -2049
// opcode: smbt16 ; op1:x12; op2:x31; dest:x4; op1val:0xfffff7ff;  op2val:0x10ffef
TEST_RR_OP(smbt16, x4, x12, x31, 0x00000000, 0xfffff7ff, 0x10ffef, x15, 60, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs1_h0_val == -1025, rs2_h0_val == 64
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff;  op2val:0xfffb0040
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x20fbff, 0xfffb0040, x1, 0, x2)

inst_33:
// rs1_h0_val == -513, rs1_h1_val == 128
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdff;  op2val:0xbfff0004
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x80fdff, 0xbfff0004, x1, 4, x2)

inst_34:
// rs1_h0_val == -65, rs1_h1_val == -8193, rs2_h0_val == 8192
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf;  op2val:0x802000
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xdfffffbf, 0x802000, x1, 8, x2)

inst_35:
// rs1_h0_val == -9, rs1_h1_val == 1024
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff7;  op2val:0xfff80001
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x400fff7, 0xfff80001, x1, 12, x2)

inst_36:
// rs1_h0_val == -3, rs2_h1_val == 0
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd;  op2val:0x007fff
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x100fffd, 0x007fff, x1, 16, x2)

inst_37:
// rs1_h0_val == -2, rs2_h0_val == -5
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe;  op2val:0x3ffffffb
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x20fffe, 0x3ffffffb, x1, 20, x2)

inst_38:
// rs1_h0_val == 16384, rs1_h1_val == -32768
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80004000;  op2val:0xfff90010
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x80004000, 0xfff90010, x1, 24, x2)

inst_39:
// rs1_h0_val == 4096, rs2_h0_val == -65
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x101000;  op2val:0x200ffbf
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x101000, 0x200ffbf, x1, 28, x2)

inst_40:
// rs1_h0_val == 2048, rs1_h1_val == -129
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0800;  op2val:0x3ffffffd
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xff7f0800, 0x3ffffffd, x1, 32, x2)

inst_41:
// rs1_h0_val == 1024, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x030400;  op2val:0x7fff0003
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x030400, 0x7fff0003, x1, 36, x2)

inst_42:
// rs1_h0_val == 256, rs1_h1_val == 21845
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550100;  op2val:0xfff60200
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x55550100, 0xfff60200, x1, 40, x2)

inst_43:
// rs1_h0_val == 64, rs1_h1_val == -513
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0040;  op2val:0x1000fff9
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfdff0040, 0x1000fff9, x1, 44, x2)

inst_44:
// rs1_h0_val == 32, rs1_h1_val == 2048, rs2_h0_val == 8
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000020;  op2val:0x800008
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x8000020, 0x800008, x1, 48, x2)

inst_45:
// rs1_h0_val == 16, rs1_h1_val == 16384, rs2_h1_val == 2
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000010;  op2val:0x02fff9
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x40000010, 0x02fff9, x1, 52, x2)

inst_46:
// rs1_h0_val == 2, rs1_h1_val == -33
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0002;  op2val:0xefff0200
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xffdf0002, 0xefff0200, x1, 56, x2)

inst_47:
// rs2_h0_val == -2, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdf;  op2val:0x10fffe
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfff7ffdf, 0x10fffe, x1, 60, x2)

inst_48:
// rs2_h0_val == -32768, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000001;  op2val:0xfffb8000
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x40000001, 0xfffb8000, x1, 64, x2)

inst_49:
// rs2_h0_val == 2048, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0009;  op2val:0xfff80800
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfffa0009, 0xfff80800, x1, 68, x2)

inst_50:
// rs2_h0_val == 1024, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x070001;  op2val:0x8000400
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x070001, 0x8000400, x1, 72, x2)

inst_51:
// rs2_h0_val == 2, rs1_h1_val == -17, rs1_h0_val == 21845
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef5555;  op2val:0xdfff0002
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xffef5555, 0xdfff0002, x1, 76, x2)

inst_52:
// rs1_h1_val == -16385, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffefff;  op2val:0x3fffffbf
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xbfffefff, 0x3fffffbf, x1, 80, x2)

inst_53:
// rs1_h1_val == -4097, rs2_h0_val == -9
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555;  op2val:0xc000fff7
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xefff5555, 0xc000fff7, x1, 84, x2)

inst_54:
// rs1_h0_val == -1, rs2_h1_val == -1, rs1_h1_val == 4096, rs2_h0_val == 21845
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffff;  op2val:0xffff5555
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x1000ffff, 0xffff5555, x1, 88, x2)

inst_55:
// rs1_h1_val == -1025, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f;  op2val:0xfffd1000
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfbffff7f, 0xfffd1000, x1, 92, x2)

inst_56:
// rs1_h1_val == -5, rs1_h0_val == 32767
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff;  op2val:0x2000010
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfffb7fff, 0x2000010, x1, 96, x2)

inst_57:
// rs1_h1_val == -3, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffb;  op2val:0xfffffff8
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfffdfffb, 0xfffffff8, x1, 100, x2)

inst_58:
// rs2_h1_val == 8, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff;  op2val:0x08ffff
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xc000f7ff, 0x08ffff, x1, 104, x2)

inst_59:
// rs2_h1_val == 4, rs1_h1_val == 0
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff9;  op2val:0x04ff7f
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x00fff9, 0x04ff7f, x1, 108, x2)

inst_60:
// rs2_h1_val == 1, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffc;  op2val:0x010003
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x06fffc, 0x010003, x1, 112, x2)

inst_61:
// rs1_h1_val == 64, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff;  op2val:0x09fffc
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x40bfff, 0x09fffc, x1, 116, x2)

inst_62:
// rs2_h0_val == -21846, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0100;  op2val:0x09aaaa
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xff7f0100, 0x09aaaa, x1, 120, x2)

inst_63:
// rs1_h1_val == 8, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080400;  op2val:0xfffffff6
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x080400, 0xfffffff6, x1, 124, x2)

inst_64:
// rs2_h0_val == -257, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000400;  op2val:0xfff7feff
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x80000400, 0xfff7feff, x1, 128, x2)

inst_65:
// rs2_h0_val == -8193, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff6;  op2val:0x10dfff
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xaaaafff6, 0x10dfff, x1, 132, x2)

inst_66:
// rs2_h0_val == -33, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff6;  op2val:0xffbfffdf
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x800fff6, 0xffbfffdf, x1, 136, x2)

inst_67:
// rs1_h1_val == -257, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0007;  op2val:0xfff84000
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xfeff0007, 0xfff84000, x1, 140, x2)

inst_68:
// rs1_h1_val == rs2_h1_val, rs1_h0_val == -4097, rs2_h0_val == 32767, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03efff;  op2val:0x037fff
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x03efff, 0x037fff, x1, 144, x2)

inst_69:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 1, rs1_h1_val == -2049, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -32768
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0001;  op2val:0x8000fff9
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xf7ff0001, 0x8000fff9, x1, 148, x2)

inst_70:
// rs2_h1_val == -129, rs2_h0_val == -17
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x062000;  op2val:0xff7fffef
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0x062000, 0xff7fffef, x1, 152, x2)

inst_71:
// rs2_h1_val == 64, rs1_h0_val == 8
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0008;  op2val:0x40fffd
TEST_RR_OP(smbt16, x31, x30, x29, 0x00000000, 0xaaaa0008, 0x40fffd, x1, 156, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
