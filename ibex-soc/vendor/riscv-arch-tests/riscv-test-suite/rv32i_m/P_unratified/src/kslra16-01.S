
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra16 instruction of the RISC-V RV32PZicsr extension for the kslra16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x24, rd==x13, rs2_val == 1431655765, rs1_h1_val == 0, rs1_h0_val == 8
// opcode: kslra16 ; op1:x17; op2:x24; dest:x13; op1val:0x000008;  op2val:0x55555555
TEST_PKRR_OP(kslra16, x13, x17, x24, 0x00000000, 0x000008, 0x55555555, x17, x4, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x9, rs2_val == 2147483647, rs1_h1_val == 21845, rs1_h0_val == 1024
// opcode: kslra16 ; op1:x31; op2:x31; dest:x9; op1val:0x55550400;  op2val:0x7fffffff
TEST_PKRR_OP(kslra16, x9, x31, x31, 0x00000000, 0x55550400, 0x7fffffff, x31, x4, 8, x7)

inst_2:
// rs1 == rd != rs2, rs1==x20, rs2==x30, rd==x20, rs2_val == -1073741825, rs1_h0_val == 32767
// opcode: kslra16 ; op1:x20; op2:x30; dest:x20; op1val:0xfff87fff;  op2val:0xbfffffff
TEST_PKRR_OP(kslra16, x20, x20, x30, 0x00000000, 0xfff87fff, 0xbfffffff, x20, x4, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs2_val == -536870913, rs1_h0_val == 1, rs1_h1_val == 2048
// opcode: kslra16 ; op1:x25; op2:x25; dest:x25; op1val:0x8000001;  op2val:0xdfffffff
TEST_PKRR_OP(kslra16, x25, x25, x25, 0x00000000, 0x8000001, 0xdfffffff, x25, x4, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x16, rd==x16, rs2_val == -268435457, rs1_h0_val == -2049, rs1_h1_val == 8192
// opcode: kslra16 ; op1:x22; op2:x16; dest:x16; op1val:0x2000f7ff;  op2val:0xefffffff
TEST_PKRR_OP(kslra16, x16, x22, x16, 0x00000000, 0x2000f7ff, 0xefffffff, x22, x4, 32, x7)

inst_5:
// rs1==x0, rs2==x20, rd==x31, rs2_val == -134217729, rs1_h1_val == 16384
// opcode: kslra16 ; op1:x0; op2:x20; dest:x31; op1val:0x4000fff9;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra16, x31, x0, x20, 0x00000000, 0x4000fff9, 0xf7ffffff, x0, x4, 40, x7)

inst_6:
// rs1==x27, rs2==x11, rd==x5, rs2_val == -67108865, rs1_h0_val == 2048, rs1_h1_val == -129
// opcode: kslra16 ; op1:x27; op2:x11; dest:x5; op1val:0xff7f0800;  op2val:0xfbffffff
TEST_PKRR_OP(kslra16, x5, x27, x11, 0x00000000, 0xff7f0800, 0xfbffffff, x27, x4, 48, x7)

inst_7:
// rs1==x6, rs2==x22, rd==x23, rs2_val == -33554433, rs1_h0_val == -33
// opcode: kslra16 ; op1:x6; op2:x22; dest:x23; op1val:0x06ffdf;  op2val:0xfdffffff
TEST_PKRR_OP(kslra16, x23, x6, x22, 0x00000000, 0x06ffdf, 0xfdffffff, x6, x4, 56, x7)

inst_8:
// rs1==x2, rs2==x12, rd==x15, rs2_val == -16777217, 
// opcode: kslra16 ; op1:x2; op2:x12; dest:x15; op1val:0xfff90009;  op2val:0xfeffffff
TEST_PKRR_OP(kslra16, x15, x2, x12, 0x00000000, 0xfff90009, 0xfeffffff, x2, x4, 64, x7)

inst_9:
// rs1==x19, rs2==x18, rd==x14, rs2_val == -8388609, rs1_h0_val == 32
// opcode: kslra16 ; op1:x19; op2:x18; dest:x14; op1val:0x060020;  op2val:0xff7fffff
TEST_PKRR_OP(kslra16, x14, x19, x18, 0x00000000, 0x060020, 0xff7fffff, x19, x4, 72, x7)

inst_10:
// rs1==x18, rs2==x27, rd==x26, rs2_val == -4194305, rs1_h1_val == -257, rs1_h0_val == -257
// opcode: kslra16 ; op1:x18; op2:x27; dest:x26; op1val:0xfefffeff;  op2val:0xffbfffff
TEST_PKRR_OP(kslra16, x26, x18, x27, 0x00000000, 0xfefffeff, 0xffbfffff, x18, x4, 80, x7)

inst_11:
// rs1==x23, rs2==x26, rd==x18, rs2_val == -2097153, 
// opcode: kslra16 ; op1:x23; op2:x26; dest:x18; op1val:0xfffc0001;  op2val:0xffdfffff
TEST_PKRR_OP(kslra16, x18, x23, x26, 0x00000000, 0xfffc0001, 0xffdfffff, x23, x4, 88, x7)

inst_12:
// rs1==x11, rs2==x3, rd==x6, rs2_val == -1048577, rs1_h1_val == 16
// opcode: kslra16 ; op1:x11; op2:x3; dest:x6; op1val:0x100006;  op2val:0xffefffff
TEST_PKRR_OP(kslra16, x6, x11, x3, 0x00000000, 0x100006, 0xffefffff, x11, x4, 96, x7)

inst_13:
// rs1==x5, rs2==x13, rd==x11, rs2_val == -524289, rs1_h0_val == 64, rs1_h1_val == -33
// opcode: kslra16 ; op1:x5; op2:x13; dest:x11; op1val:0xffdf0040;  op2val:0xfff7ffff
TEST_PKRR_OP(kslra16, x11, x5, x13, 0x00000000, 0xffdf0040, 0xfff7ffff, x5, x4, 104, x7)

inst_14:
// rs1==x12, rs2==x15, rd==x8, rs2_val == -262145, rs1_h1_val == 512, rs1_h0_val == 16
// opcode: kslra16 ; op1:x12; op2:x15; dest:x8; op1val:0x2000010;  op2val:0xfffbffff
TEST_PKRR_OP(kslra16, x8, x12, x15, 0x00000000, 0x2000010, 0xfffbffff, x12, x4, 112, x7)

inst_15:
// rs1==x28, rs2==x6, rd==x1, rs2_val == -131073, 
// opcode: kslra16 ; op1:x28; op2:x6; dest:x1; op1val:0x05fff8;  op2val:0xfffdffff
TEST_PKRR_OP(kslra16, x1, x28, x6, 0x00000000, 0x05fff8, 0xfffdffff, x28, x4, 120, x7)

inst_16:
// rs1==x8, rs2==x0, rd==x10, rs2_val == -65537, rs1_h0_val == 8192, rs1_h1_val == 1
// opcode: kslra16 ; op1:x8; op2:x0; dest:x10; op1val:0x012000;  op2val:0x0
TEST_PKRR_OP(kslra16, x10, x8, x0, 0x00000000, 0x012000, 0x0, x8, x4, 128, x11)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x14, rs2==x10, rd==x0, rs2_val == -32769, 
// opcode: kslra16 ; op1:x14; op2:x10; dest:x0; op1val:0xfffcfff8;  op2val:0xffff7fff
TEST_PKRR_OP(kslra16, x0, x14, x10, 0x00000000, 0xfffcfff8, 0xffff7fff, x14, x6, 0, x11)

inst_18:
// rs1==x3, rs2==x5, rd==x27, rs2_val == -16385, rs1_h1_val == -4097
// opcode: kslra16 ; op1:x3; op2:x5; dest:x27; op1val:0xefff7fff;  op2val:0xffffbfff
TEST_PKRR_OP(kslra16, x27, x3, x5, 0x00000000, 0xefff7fff, 0xffffbfff, x3, x6, 8, x11)

inst_19:
// rs1==x29, rs2==x19, rd==x2, rs2_val == -8193, rs1_h1_val == -17
// opcode: kslra16 ; op1:x29; op2:x19; dest:x2; op1val:0xffeffeff;  op2val:0xffffdfff
TEST_PKRR_OP(kslra16, x2, x29, x19, 0x00000000, 0xffeffeff, 0xffffdfff, x29, x6, 16, x11)

inst_20:
// rs1==x15, rs2==x4, rd==x19, rs2_val == -4097, rs1_h0_val == -9
// opcode: kslra16 ; op1:x15; op2:x4; dest:x19; op1val:0x09fff7;  op2val:0xffffefff
TEST_PKRR_OP(kslra16, x19, x15, x4, 0x00000000, 0x09fff7, 0xffffefff, x15, x6, 24, x11)

inst_21:
// rs1==x24, rs2==x28, rd==x30, rs2_val == -2049, 
// opcode: kslra16 ; op1:x24; op2:x28; dest:x30; op1val:0xfff8fff6;  op2val:0xfffff7ff
TEST_PKRR_OP(kslra16, x30, x24, x28, 0x00000000, 0xfff8fff6, 0xfffff7ff, x24, x6, 32, x11)

inst_22:
// rs1==x10, rs2==x9, rd==x3, rs2_val == -1025, 
// opcode: kslra16 ; op1:x10; op2:x9; dest:x3; op1val:0x00fff7;  op2val:0xfffffbff
TEST_PKRR_OP(kslra16, x3, x10, x9, 0x00000000, 0x00fff7, 0xfffffbff, x10, x6, 40, x11)

inst_23:
// rs1==x21, rs2==x23, rd==x4, rs2_val == -513, rs1_h1_val == -16385, rs1_h0_val == -32768
// opcode: kslra16 ; op1:x21; op2:x23; dest:x4; op1val:0xbfff8000;  op2val:0xfffffdff
TEST_PKRR_OP(kslra16, x4, x21, x23, 0x00000000, 0xbfff8000, 0xfffffdff, x21, x6, 48, x11)

inst_24:
// rs1==x16, rs2==x7, rd==x12, rs2_val == -257, rs1_h0_val == -1025
// opcode: kslra16 ; op1:x16; op2:x7; dest:x12; op1val:0xfffcfbff;  op2val:0xfffffeff
TEST_PKRR_OP(kslra16, x12, x16, x7, 0x00000000, 0xfffcfbff, 0xfffffeff, x16, x6, 56, x11)

inst_25:
// rs1==x1, rs2==x21, rd==x29, rs2_val == -129, rs1_h0_val == -4097
// opcode: kslra16 ; op1:x1; op2:x21; dest:x29; op1val:0xbfffefff;  op2val:0xffffff7f
TEST_PKRR_OP(kslra16, x29, x1, x21, 0x00000000, 0xbfffefff, 0xffffff7f, x1, x6, 64, x11)

inst_26:
// rs1==x26, rs2==x2, rd==x17, rs2_val == -65, rs1_h0_val == -21846
// opcode: kslra16 ; op1:x26; op2:x2; dest:x17; op1val:0x01aaaa;  op2val:0xffffffbf
TEST_PKRR_OP(kslra16, x17, x26, x2, 0x00000000, 0x01aaaa, 0xffffffbf, x26, x6, 72, x11)

inst_27:
// rs1==x7, rs2==x14, rd==x28, rs2_val == -33, rs1_h1_val == 128
// opcode: kslra16 ; op1:x7; op2:x14; dest:x28; op1val:0x800009;  op2val:0xffffffdf
TEST_PKRR_OP(kslra16, x28, x7, x14, 0x00000000, 0x800009, 0xffffffdf, x7, x6, 80, x11)

inst_28:
// rs1==x4, rs2==x8, rd==x22, rs2_val == -17, rs1_h1_val == -9
// opcode: kslra16 ; op1:x4; op2:x8; dest:x22; op1val:0xfff70008;  op2val:0xffffffef
TEST_PKRR_OP(kslra16, x22, x4, x8, 0x00000000, 0xfff70008, 0xffffffef, x4, x6, 88, x11)

inst_29:
// rs1==x13, rs2==x29, rd==x7, rs2_val == -9, rs1_h0_val == -3
// opcode: kslra16 ; op1:x13; op2:x29; dest:x7; op1val:0xfffafffd;  op2val:0xfffffff7
TEST_PKRR_OP(kslra16, x7, x13, x29, 0x00000000, 0xfffafffd, 0xfffffff7, x13, x6, 96, x11)

inst_30:
// rs1==x9, rs2==x17, rd==x24, rs2_val == -5, rs1_h0_val == 16384
// opcode: kslra16 ; op1:x9; op2:x17; dest:x24; op1val:0x004000;  op2val:0xfffffffb
TEST_PKRR_OP(kslra16, x24, x9, x17, 0x00000000, 0x004000, 0xfffffffb, x9, x6, 104, x11)

inst_31:
// rs1==x30, rs2==x1, rd==x21, rs2_val == -3, rs1_h1_val == 8
// opcode: kslra16 ; op1:x30; op2:x1; dest:x21; op1val:0x080005;  op2val:0xfffffffd
TEST_PKRR_OP(kslra16, x21, x30, x1, 0x00000000, 0x080005, 0xfffffffd, x30, x6, 112, x11)

inst_32:
// rs2_val == -2, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000800;  op2val:0xfffffffe
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x8000800, 0xfffffffe, x30, x6, 120, x11)

inst_33:
// rs2_val == -2147483648, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x000006;  op2val:0x80000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x000006, 0x80000000, x30, x6, 128, x1)

inst_34:
// rs2_val == 1073741824, rs1_h1_val == 32, rs1_h0_val == 256
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x200100;  op2val:0x40000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x200100, 0x40000000, x30, x6, 136, x1)

inst_35:
// rs2_val == 536870912, rs1_h1_val == -32768
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff7;  op2val:0x20000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x8000fff7, 0x20000000, x30, x6, 144, x1)

inst_36:
// rs2_val == 268435456, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x080006;  op2val:0x10000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x080006, 0x10000000, x30, x6, 152, x1)

inst_37:
// rs1_h0_val == 4, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0004;  op2val:0x7
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfeff0004, 0x7, x30, x6, 160, x1)

inst_38:
// rs1_h0_val == 2, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0002;  op2val:0xfffffffd
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xffdf0002, 0xfffffffd, x30, x6, 168, x1)

inst_39:
// rs1_h0_val == 0, rs2_val == 2097152
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0x200000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x010000, 0x200000, x30, x6, 176, x1)

inst_40:
// rs1_h0_val == -1, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xffff7fff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfeffffff, 0xffff7fff, x30, x6, 184, x1)

inst_41:
// rs2_val == -1431655766, rs1_h0_val == -2, rs1_h1_val == 4096
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffe;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x1000fffe, 0xaaaaaaaa, x30, x6, 192, x1)

inst_42:
// rs2_val == 134217728, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x050003;  op2val:0x8000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x050003, 0x8000000, x30, x6, 200, x1)

inst_43:
// rs2_val == 67108864, rs1_h1_val == -2049
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff6;  op2val:0x4000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xf7fffff6, 0x4000000, x30, x6, 208, x1)

inst_44:
// rs2_val == 33554432, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0800;  op2val:0x2000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xefff0800, 0x2000000, x30, x6, 216, x1)

inst_45:
// rs2_val == 16777216, rs1_h0_val == 128
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0080;  op2val:0x1000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xbfff0080, 0x1000000, x30, x6, 224, x1)

inst_46:
// rs2_val == 8388608, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe;  op2val:0x800000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x20fffe, 0x800000, x30, x6, 232, x1)

inst_47:
// rs2_val == 4194304, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x000002;  op2val:0x400000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x000002, 0x400000, x30, x6, 240, x1)

inst_48:
// rs2_val == 1048576, rs1_h1_val == -513
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff7fff;  op2val:0x100000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfdff7fff, 0x100000, x30, x6, 248, x1)

inst_49:
// rs2_val == 524288, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffd;  op2val:0x80000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfff9fffd, 0x80000, x30, x6, 256, x1)

inst_50:
// rs2_val == 262144, rs1_h0_val == -5
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb;  op2val:0x40000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x4000fffb, 0x40000, x30, x6, 264, x1)

inst_51:
// rs2_val == 131072, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffc;  op2val:0x20000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x3ffffffc, 0x20000, x30, x6, 272, x1)

inst_52:
// rs2_val == 65536, rs1_h1_val == -5
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb2000;  op2val:0x10000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfffb2000, 0x10000, x30, x6, 280, x1)

inst_53:
// rs2_val == 32768, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010;  op2val:0x8000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xff7f0010, 0x8000, x30, x6, 288, x1)

inst_54:
// rs2_val == 16384, rs1_h0_val == -8193
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff;  op2val:0x4000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x4000dfff, 0x4000, x30, x6, 296, x1)

inst_55:
// rs2_val == 8192, rs1_h1_val == 2
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x028000;  op2val:0x2000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x028000, 0x2000, x30, x6, 304, x1)

inst_56:
// rs2_val == 4096, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0x1000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xeffffeff, 0x1000, x30, x6, 312, x1)

inst_57:
// rs2_val == 2048, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff;  op2val:0x800
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x01f7ff, 0x800, x30, x6, 320, x1)

inst_58:
// rs2_val == 1, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000100;  op2val:0x1
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x40000100, 0x1, x30, x6, 328, x1)

inst_59:
// rs1_h1_val == -21846, rs1_h0_val == 512
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0200;  op2val:0x800
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xaaaa0200, 0x800, x30, x6, 336, x1)

inst_60:
// rs1_h1_val == 32767, rs2_val == 16
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff8000;  op2val:0x10
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x7fff8000, 0x10, x30, x6, 344, x1)

inst_61:
// rs1_h1_val == -8193, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0800;  op2val:0x40000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xdfff0800, 0x40000000, x30, x6, 352, x1)

inst_62:
// rs1_h1_val == -1025, rs2_val == 2
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0004;  op2val:0x2
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfbff0004, 0x2, x30, x6, 360, x1)

inst_63:
// rs1_h1_val == -65, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0x2000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xffbf0100, 0x2000000, x30, x6, 368, x1)

inst_64:
// rs1_h1_val == -3, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffdf;  op2val:0x8000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfffdffdf, 0x8000, x30, x6, 376, x1)

inst_65:
// rs1_h1_val == -2, rs1_h0_val == -16385
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfffebfff, 0xaaaaaaaa, x30, x6, 384, x1)

inst_66:
// rs1_h1_val == 1024, rs1_h0_val == -17
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffef;  op2val:0xfffffffe
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x400ffef, 0xfffffffe, x30, x6, 392, x1)

inst_67:
// rs1_h1_val == 256, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffa;  op2val:0x40000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x100fffa, 0x40000, x30, x6, 400, x1)

inst_68:
// rs1_h1_val == 64, rs2_val == 64
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffef;  op2val:0x40
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x40ffef, 0x40, x30, x6, 408, x1)

inst_69:
// rs1_h1_val == 4, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb;  op2val:0x80000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x04fffb, 0x80000, x30, x6, 416, x1)

inst_70:
// rs1_h1_val == -1, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0x10000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xffffdfff, 0x10000000, x30, x6, 424, x1)

inst_71:
// rs1_h0_val == 21845, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555;  op2val:0x1000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xaaaa5555, 0x1000000, x30, x6, 432, x1)

inst_72:
// rs1_h0_val == -513, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdff;  op2val:0xfffdffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xffdffdff, 0xfffdffff, x30, x6, 440, x1)

inst_73:
// rs1_h0_val == -129, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7f;  op2val:0xfffffffd
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x00ff7f, 0xfffffffd, x30, x6, 448, x1)

inst_74:
// rs1_h0_val == -65, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffbf;  op2val:0xfffffbff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x00ffbf, 0xfffffbff, x30, x6, 456, x1)

inst_75:
// rs2_val == 1024, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x010200;  op2val:0x400
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x010200, 0x400, x30, x6, 464, x1)

inst_76:
// rs2_val == 512, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x404000;  op2val:0x200
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x404000, 0x200, x30, x6, 472, x1)

inst_77:
// rs2_val == 256, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff7;  op2val:0x100
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x03fff7, 0x100, x30, x6, 480, x1)

inst_78:
// rs2_val == 128, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0x80
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xf7ffffff, 0x80, x30, x6, 488, x1)

inst_79:
// rs1_h0_val == 4096, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x021000;  op2val:0x1000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x021000, 0x1000000, x30, x6, 496, x1)

inst_80:
// rs2_val == 32, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa;  op2val:0x20
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xdfffaaaa, 0x20, x30, x6, 504, x1)

inst_81:
// rs2_val == 8, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdf;  op2val:0x8
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xff7fffdf, 0x8, x30, x6, 512, x1)

inst_82:
// rs2_val == 4, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6feff;  op2val:0x4
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0xfff6feff, 0x4, x30, x6, 520, x1)

inst_83:
// rs2_val == 2147483647, rs1_h1_val == 21845, rs1_h0_val == 1024
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550400;  op2val:0x7fffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x55550400, 0x7fffffff, x30, x6, 528, x1)

inst_84:
// rs2_val == -536870913, rs1_h0_val == 1, rs1_h1_val == 2048
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001;  op2val:0xdfffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x8000001, 0xdfffffff, x30, x6, 536, x1)

inst_85:
// rs2_val == -134217729, rs1_h1_val == 16384
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff9;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x4000fff9, 0xf7ffffff, x30, x6, 544, x1)

inst_86:
// rs2_val == -65537, rs1_h0_val == 8192, rs1_h1_val == 1
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x012000;  op2val:0xfffeffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x00000000, 0x012000, 0xfffeffff, x30, x6, 552, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 140*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
