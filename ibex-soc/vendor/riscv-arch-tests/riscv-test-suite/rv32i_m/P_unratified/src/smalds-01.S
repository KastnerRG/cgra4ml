
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalds instruction of the RISC-V RV32PZicsr extension for the smalds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x19, rd==x12, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32767
// opcode: smalds ; op1:x11; op2:x19; dest:x12; op1val:0xfff88000;  op2val:0x7fff2000
TEST_P64_PNN_OP(smalds, x12, x13, x11, x19, 0x00000000, 0, 0xfff88000, 0x7fff2000, x1, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x8, rs1_h1_val == rs2_h1_val, rs1_h0_val == -1025, rs2_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 256, rs2_h0_val == 8
// opcode: smalds ; op1:x16; op2:x16; dest:x8; op1val:0x0100fbff;  op2val:0x01000008
TEST_P64_PNN_OP(smalds, x8, x9, x16, x16, 0x00000000, 0, 0x0100fbff, 0x01000008, x1, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x28, rd==x18, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -65, rs2_h1_val == -2
// opcode: smalds ; op1:x18; op2:x28; dest:x18; op1val:0xfff87fff;  op2val:0xfffeffbf
TEST_P64_PNN_OP(smalds, x18, x19, x18, x28, 0x00000000, 0, 0xfff87fff, 0xfffeffbf, x1, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 2, rs2_h0_val == -3, rs1_h1_val == 4, rs2_h1_val == -257
// opcode: smalds ; op1:x4; op2:x4; dest:x4; op1val:0x00040002;  op2val:0xfefffffd
TEST_P64_PNN_OP(smalds, x4, x5, x4, x4, 0x00000000, 0, 0x00040002, 0xfefffffd, x1, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x6, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h1_val == -5, rs2_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -129
// opcode: smalds ; op1:x17; op2:x6; dest:x6; op1val:0xfffb0002;  op2val:0xff7f0002
TEST_P64_PNN_OP(smalds, x6, x7, x17, x6, 0x00000000, 0, 0xfffb0002, 0xff7f0002, x1, 32, x5)

inst_5:
// rs1==x28, rs2==x15, rd==x20, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -16385, rs1_h1_val == -9, rs2_h0_val == -16385
// opcode: smalds ; op1:x28; op2:x15; dest:x20; op1val:0xfff7fff8;  op2val:0xbfffbfff
TEST_P64_PNN_OP(smalds, x20, x21, x28, x15, 0x00000000, 0, 0xfff7fff8, 0xbfffbfff, x1, 40, x5)

inst_6:
// rs1==x3, rs2==x25, rd==x24, rs2_h1_val == -21846, rs2_h0_val == 16384, rs1_h1_val == -3, rs1_h0_val == -2049
// opcode: smalds ; op1:x3; op2:x25; dest:x24; op1val:0xfffdf7ff;  op2val:0xaaaa4000
TEST_P64_PNN_OP(smalds, x24, x25, x3, x25, 0x00000000, 0, 0xfffdf7ff, 0xaaaa4000, x1, 48, x5)

inst_7:
// rs1==x12, rs2==x2, rd==x30, rs2_h1_val == 21845, rs2_h0_val == -129, rs1_h1_val == 128
// opcode: smalds ; op1:x12; op2:x2; dest:x30; op1val:0x00800006;  op2val:0x5555ff7f
TEST_P64_PNN_OP(smalds, x30, x31, x12, x2, 0x00000000, 0, 0x00800006, 0x5555ff7f, x1, 56, x5)

inst_8:
// rs1==x7, rs2==x8, rd==x26, rs2_h1_val == -8193, rs1_h0_val == 0, rs2_h0_val == 32767, rs1_h1_val == -257
// opcode: smalds ; op1:x7; op2:x8; dest:x26; op1val:0xfeff0000;  op2val:0xdfff7fff
TEST_P64_PNN_OP(smalds, x26, x27, x7, x8, 0x00000000, 0, 0xfeff0000, 0xdfff7fff, x1, 64, x5)

inst_9:
// rs1==x0, rs2==x14, rd==x28, rs2_h1_val == -4097, rs2_h0_val == 21845, rs1_h0_val == 2048, rs1_h1_val == 0
// opcode: smalds ; op1:x0; op2:x14; dest:x28; op1val:0x00000800;  op2val:0xefff5555
TEST_P64_PNN_OP(smalds, x28, x29, x0, x14, 0x00000000, 0, 0x00000800, 0xefff5555, x1, 72, x5)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_10:
// rs1==x24, rs2==x26, rd==x2, rs2_h1_val == -2049, rs1_h1_val == 21845, rs1_h0_val == -9
// opcode: smalds ; op1:x24; op2:x26; dest:x2; op1val:0x5555fff7;  op2val:0xf7ffff7f
TEST_P64_PNN_OP(smalds, x2, x3, x24, x26, 0x00000000, 0, 0x5555fff7, 0xf7ffff7f, x1, 0, x4)

inst_11:
// rs1==x23, rs2==x27, rd==x22, rs2_h1_val == -1025, rs1_h1_val == -1, rs2_h0_val == -513
// opcode: smalds ; op1:x23; op2:x27; dest:x22; op1val:0xffff0002;  op2val:0xfbfffdff
TEST_P64_PNN_OP(smalds, x22, x23, x23, x27, 0x00000000, 0, 0xffff0002, 0xfbfffdff, x1, 8, x4)

inst_12:
// rs1==x29, rs2==x22, rd==x14, rs2_h1_val == -513, rs1_h0_val == 8192
// opcode: smalds ; op1:x29; op2:x22; dest:x14; op1val:0x00802000;  op2val:0xfdff5555
TEST_P64_PNN_OP(smalds, x14, x15, x29, x22, 0x00000000, 0, 0x00802000, 0xfdff5555, x1, 16, x4)

inst_13:
// rs1==x14, rs2==x7, rd==x16, rs2_h1_val == -65, rs2_h0_val == 4, rs1_h0_val == -257, rs1_h1_val == -21846
// opcode: smalds ; op1:x14; op2:x7; dest:x16; op1val:0xaaaafeff;  op2val:0xffbf0004
TEST_P64_PNN_OP(smalds, x16, x17, x14, x7, 0x00000000, 0, 0xaaaafeff, 0xffbf0004, x1, 24, x4)

inst_14:
// rs1==x6, rs2==x13, rd==x10, rs2_h1_val == -33, rs1_h0_val == -129, rs2_h0_val == 64
// opcode: smalds ; op1:x6; op2:x13; dest:x10; op1val:0xfff8ff7f;  op2val:0xffdf0040
TEST_P64_PNN_OP(smalds, x10, x11, x6, x13, 0x00000000, 0, 0xfff8ff7f, 0xffdf0040, x1, 32, x4)

inst_15:
// rs1==x10, rs2==x21, rs2_h1_val == -17, rs1_h1_val == 2048
// opcode: smalds ; op1:x10; op2:x21; dest:x14; op1val:0x0800fff7;  op2val:0xffef0006
TEST_P64_PNN_OP(smalds, x14, x15, x10, x21, 0x00000000, 0, 0x0800fff7, 0xffef0006, x1, 40, x4)

inst_16:
// rs1==x31, rs2==x18, rs2_h1_val == -9, rs2_h0_val == 1024
// opcode: smalds ; op1:x31; op2:x18; dest:x2; op1val:0x0100fffc;  op2val:0xfff70400
TEST_P64_PNN_OP(smalds, x2, x3, x31, x18, 0x00000000, 0, 0x0100fffc, 0xfff70400, x1, 48, x4)

inst_17:
// rs1==x19, rs2==x11, rs2_h1_val == -5, 
// opcode: smalds ; op1:x19; op2:x11; dest:x18; op1val:0x01000009;  op2val:0xfffbfff6
TEST_P64_PNN_OP(smalds, x18, x19, x19, x11, 0x00000000, 0, 0x01000009, 0xfffbfff6, x1, 56, x4)

inst_18:
// rs1==x30, rs2==x5, rs2_h1_val == -3, rs1_h1_val == 64, rs1_h0_val == -17, rs2_h0_val == -9
// opcode: smalds ; op1:x30; op2:x5; dest:x26; op1val:0x0040ffef;  op2val:0xfffdfff7
TEST_P64_PNN_OP(smalds, x26, x27, x30, x5, 0x00000000, 0, 0x0040ffef, 0xfffdfff7, x1, 64, x4)

inst_19:
// rs1==x9, rs2==x12, rs2_h1_val == -32768, rs1_h1_val == 32, rs1_h0_val == -1, rs2_h0_val == -33
// opcode: smalds ; op1:x9; op2:x12; dest:x14; op1val:0x0020ffff;  op2val:0x8000ffdf
TEST_P64_PNN_OP(smalds, x14, x15, x9, x12, 0x00000000, 0, 0x0020ffff, 0x8000ffdf, x1, 72, x4)

inst_20:
// rs1==x5, rs2==x3, rs2_h1_val == 16384, rs1_h0_val == 4096, rs1_h1_val == -2
// opcode: smalds ; op1:x5; op2:x3; dest:x28; op1val:0xfffe1000;  op2val:0x40003fff
TEST_P64_PNN_OP(smalds, x28, x29, x5, x3, 0x00000000, 0, 0xfffe1000, 0x40003fff, x1, 80, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x8, rs2==x9, rs2_h1_val == 8192, rs2_h0_val == -5
// opcode: smalds ; op1:x8; op2:x9; dest:x24; op1val:0xfff7c000;  op2val:0x2000fffb
TEST_P64_PNN_OP(smalds, x24, x25, x8, x9, 0x00000000, 0, 0xfff7c000, 0x2000fffb, x3, 0, x6)

inst_22:
// rs1==x15, rs2==x24, rs2_h1_val == 4096, rs2_h0_val == 512
// opcode: smalds ; op1:x15; op2:x24; dest:x22; op1val:0x0020fff9;  op2val:0x10000200
TEST_P64_PNN_OP(smalds, x22, x23, x15, x24, 0x00000000, 0, 0x0020fff9, 0x10000200, x3, 8, x6)

inst_23:
// rs1==x21, rs2==x1, rs2_h1_val == 2048, rs1_h0_val == -3, rs2_h0_val == -17
// opcode: smalds ; op1:x21; op2:x1; dest:x26; op1val:0x5555fffd;  op2val:0x0800ffef
TEST_P64_PNN_OP(smalds, x26, x27, x21, x1, 0x00000000, 0, 0x5555fffd, 0x0800ffef, x3, 16, x6)

inst_24:
// rs1==x25, rs2==x0, rs2_h1_val == 1024, rs1_h1_val == 1024
// opcode: smalds ; op1:x25; op2:x0; dest:x4; op1val:0x04008000;  op2val:0x04007fff
TEST_P64_PNN_OP(smalds, x4, x5, x25, x0, 0x00000000, 0, 0x04008000, 0x04007fff, x3, 24, x6)

inst_25:
// rs1==x20, rs2==x17, rs2_h1_val == 512, rs1_h1_val == -513
// opcode: smalds ; op1:x20; op2:x17; dest:x30; op1val:0xfdff2000;  op2val:0x0200fffc
TEST_P64_PNN_OP(smalds, x30, x31, x20, x17, 0x00000000, 0, 0xfdff2000, 0x0200fffc, x3, 32, x6)

inst_26:
// rs1==x22, rs2==x31, rs2_h1_val == 128, rs1_h1_val == -16385, rs1_h0_val == 32
// opcode: smalds ; op1:x22; op2:x31; dest:x20; op1val:0xbfff0020;  op2val:0x0080fff6
TEST_P64_PNN_OP(smalds, x20, x21, x22, x31, 0x00000000, 0, 0xbfff0020, 0x0080fff6, x3, 40, x6)

inst_27:
// rs1==x13, rs2==x30, rs2_h1_val == 64, rs1_h1_val == 8192, rs1_h0_val == -2
// opcode: smalds ; op1:x13; op2:x30; dest:x20; op1val:0x2000fffe;  op2val:0x00400009
TEST_P64_PNN_OP(smalds, x20, x21, x13, x30, 0x00000000, 0, 0x2000fffe, 0x00400009, x3, 48, x6)

inst_28:
// rs1==x2, rs2==x20, rs1_h0_val == -513, 
// opcode: smalds ; op1:x2; op2:x20; dest:x24; op1val:0xfffdfdff;  op2val:0xfffbbfff
TEST_P64_PNN_OP(smalds, x24, x25, x2, x20, 0x00000000, 0, 0xfffdfdff, 0xfffbbfff, x3, 56, x6)

inst_29:
// rs1==x1, rs2==x10, rs1_h0_val == -65, 
// opcode: smalds ; op1:x1; op2:x10; dest:x30; op1val:0x0003ffbf;  op2val:0xfffd0005
TEST_P64_PNN_OP(smalds, x30, x31, x1, x10, 0x00000000, 0, 0x0003ffbf, 0xfffd0005, x3, 64, x6)

inst_30:
// rs1==x27, rs2==x23, rs1_h0_val == -33, rs1_h1_val == -8193
// opcode: smalds ; op1:x27; op2:x23; dest:x16; op1val:0xdfffffdf;  op2val:0xbfffbfff
TEST_P64_PNN_OP(smalds, x16, x17, x27, x23, 0x00000000, 0, 0xdfffffdf, 0xbfffbfff, x3, 72, x6)

inst_31:
// rs1==x26, rs2==x29, rs1_h0_val == -5, rs1_h1_val == -2049
// opcode: smalds ; op1:x26; op2:x29; dest:x14; op1val:0xf7fffffb;  op2val:0xaaaabfff
TEST_P64_PNN_OP(smalds, x14, x15, x26, x29, 0x00000000, 0, 0xf7fffffb, 0xaaaabfff, x3, 80, x6)

inst_32:
// rs1_h0_val == 16384, rs1_h1_val == -17
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffef4000;  op2val:0xfff6bfff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffef4000, 0xfff6bfff, x3, 88, x6)

inst_33:
// rs1_h0_val == 1024, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfff80400;  op2val:0xfeff0200
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfff80400, 0xfeff0200, x3, 96, x6)

inst_34:
// rs1_h0_val == 512, rs2_h0_val == 0
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0200;  op2val:0x00090000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0200, 0x00090000, x3, 104, x6)

inst_35:
// rs1_h0_val == 256, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x00000100;  op2val:0x00030008
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x00000100, 0x00030008, x3, 112, x6)

inst_36:
// rs1_h0_val == 128, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x55550080;  op2val:0x0800ffdf
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x55550080, 0x0800ffdf, x3, 120, x6)

inst_37:
// rs1_h0_val == 64, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffff0040;  op2val:0x20003fff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffff0040, 0x20003fff, x3, 128, x6)

inst_38:
// rs1_h0_val == 16, rs2_h1_val == -1, rs1_h1_val == 16384
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x40000010;  op2val:0xffff0009
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x40000010, 0xffff0009, x3, 136, x6)

inst_39:
// rs1_h0_val == 8, rs2_h0_val == 128
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfff70008;  op2val:0x40000080
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfff70008, 0x40000080, x3, 144, x6)

inst_40:
// rs1_h0_val == 4, rs2_h1_val == 0
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xc0000004;  op2val:0x0000fff9
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xc0000004, 0x0000fff9, x3, 152, x6)

inst_41:
// rs1_h0_val == 1, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffff0001;  op2val:0xffff0003
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffff0001, 0xffff0003, x3, 160, x6)

inst_42:
// rs2_h1_val == 32, rs1_h1_val == -32768
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x80000020;  op2val:0x0020c000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x80000020, 0x0020c000, x3, 168, x6)

inst_43:
// rs2_h1_val == 16, rs2_h0_val == -21846
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfffefbff;  op2val:0x0010aaaa
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfffefbff, 0x0010aaaa, x3, 176, x6)

inst_44:
// rs2_h1_val == 8, rs1_h1_val == 1
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0001fff8;  op2val:0x00085555
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0001fff8, 0x00085555, x3, 184, x6)

inst_45:
// rs2_h1_val == 4, rs2_h0_val == 4096
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x01008000;  op2val:0x00041000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x01008000, 0x00041000, x3, 192, x6)

inst_46:
// rs2_h1_val == 2, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfeff7fff;  op2val:0x00024000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfeff7fff, 0x00024000, x3, 200, x6)

inst_47:
// rs2_h0_val == -2, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x01000020;  op2val:0x0007fffe
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x01000020, 0x0007fffe, x3, 208, x6)

inst_48:
// rs2_h0_val == -32768, rs1_h0_val == -4097
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x2000efff;  op2val:0x02008000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x2000efff, 0x02008000, x3, 216, x6)

inst_49:
// rs2_h0_val == 2048, rs1_h1_val == 8
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0008fbff;  op2val:0x00080800
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0008fbff, 0x00080800, x3, 224, x6)

inst_50:
// rs2_h0_val == 256, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x4000fdff;  op2val:0x00030100
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x4000fdff, 0x00030100, x3, 232, x6)

inst_51:
// rs2_h0_val == 32, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0006fdff;  op2val:0x00100020
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0006fdff, 0x00100020, x3, 240, x6)

inst_52:
// rs2_h0_val == 16, rs1_h0_val == -21846
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xc000aaaa;  op2val:0x08000010
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xc000aaaa, 0x08000010, x3, 248, x6)

inst_53:
// rs2_h0_val == 1, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0005feff;  op2val:0xffef0001
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0005feff, 0xffef0001, x3, 256, x6)

inst_54:
// rs2_h0_val == -1, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfeff2000;  op2val:0xfffaffff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfeff2000, 0xfffaffff, x3, 264, x6)

inst_55:
// rs1_h1_val == 32767, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x7ffffffc;  op2val:0xfbff0003
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x7ffffffc, 0xfbff0003, x3, 272, x6)

inst_56:
// rs1_h1_val == -4097, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xefffff7f;  op2val:0xfffcffef
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xefffff7f, 0xfffcffef, x3, 280, x6)

inst_57:
// rs1_h1_val == -1025, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfbff0002;  op2val:0xffbf0002
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfbff0002, 0xffbf0002, x3, 288, x6)

inst_58:
// rs1_h1_val == -129, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xff7fefff;  op2val:0x00050002
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xff7fefff, 0x00050002, x3, 296, x6)

inst_59:
// rs1_h1_val == -65, rs1_h0_val == -16385
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffbfbfff;  op2val:0xf7fffffa
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffbfbfff, 0xf7fffffa, x3, 304, x6)

inst_60:
// rs1_h1_val == -33, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffdffff6;  op2val:0x8000bfff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffdffff6, 0x8000bfff, x3, 312, x6)

inst_61:
// rs1_h0_val == 21845, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfff65555;  op2val:0xff7fffff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfff65555, 0xff7fffff, x3, 320, x6)

inst_62:
// rs1_h1_val == 4096, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x10000010;  op2val:0x0006fdff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x10000010, 0x0006fdff, x3, 328, x6)

inst_63:
// rs1_h1_val == 512, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x02000007;  op2val:0xfdff0080
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x02000007, 0xfdff0080, x3, 336, x6)

inst_64:
// rs2_h1_val == 1, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaffbf;  op2val:0x00010002
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaffbf, 0x00010002, x3, 344, x6)

inst_65:
// rs1_h1_val == 16, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0010feff;  op2val:0xefff2000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0010feff, 0xefff2000, x3, 352, x6)

inst_66:
// rs2_h0_val == -8193, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xffbfaaaa;  op2val:0x1000dfff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xffbfaaaa, 0x1000dfff, x3, 360, x6)

inst_67:
// rs1_h1_val == 2, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0002fffb;  op2val:0xfff7c000
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0002fffb, 0xfff7c000, x3, 368, x6)

inst_68:
// rs2_h0_val == -4097, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xdfffbfff;  op2val:0x0007efff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xdfffbfff, 0x0007efff, x3, 376, x6)

inst_69:
// rs2_h0_val == -1025, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x20000002;  op2val:0x0400fbff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x20000002, 0x0400fbff, x3, 384, x6)

inst_70:
// rs2_h0_val == -257, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x00808000;  op2val:0xfbfffeff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x00808000, 0xfbfffeff, x3, 392, x6)

inst_71:
// rs1_h0_val == -8193, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xfbffdfff;  op2val:0x02000006
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xfbffdfff, 0x02000006, x3, 400, x6)

inst_72:
// rs2_h0_val == -2049, 
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0xaaaa0007;  op2val:0x0040f7ff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0xaaaa0007, 0x0040f7ff, x3, 408, x6)

inst_73:
// rs1_h1_val == rs2_h1_val, rs1_h0_val == -1025, rs2_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 256, rs2_h0_val == 8
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x0100fbff;  op2val:0x01000008
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x0100fbff, 0x01000008, x3, 416, x6)

inst_74:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 2, rs2_h0_val == -3, rs1_h1_val == 4, rs2_h1_val == -257
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x00040002;  op2val:0xfefffffd
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x00040002, 0xfefffffd, x3, 424, x6)

inst_75:
// rs2_h1_val == -4097, rs2_h0_val == 21845, rs1_h0_val == 2048, rs1_h1_val == 0
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x00000800;  op2val:0xefff5555
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x00000800, 0xefff5555, x3, 432, x6)

inst_76:
// rs2_h1_val == 1024, rs1_h1_val == 1024
// opcode: smalds ; op1:x31; op2:x29; dest:x30; op1val:0x04008000;  op2val:0x04007fff
TEST_P64_PNN_OP(smalds, x30, x31, x31, x29, 0x00000000, 0, 0x04008000, 0x04007fff, x3, 440, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
