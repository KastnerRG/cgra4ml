
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd830 instruction of the RISC-V RV32PZicsr extension for the zunpkd830 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd830)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1==x12, rd==x31, rs1_b0_val == 0, rs1_b1_val == 1
// opcode: zunpkd830 ; op1:x12; dest:x31; op1val:0x12130100;
TEST_RD_OP( zunpkd830, x31, x12, 0x00000000, 0x12130100, x4, 0, x22)

inst_1:
// rs1==x19, rd==x2, rs1_b3_val == 170, rs1_b2_val == 251
// opcode: zunpkd830 ; op1:x19; dest:x2; op1val:0xaafb0909;
TEST_RD_OP( zunpkd830, x2, x19, 0x00000000, 0xaafb0909, x4, 4, x22)

inst_2:
// rs1==x6, rd==x8, rs1_b3_val == 85, rs1_b1_val == 64, rs1_b2_val == 253
// opcode: zunpkd830 ; op1:x6; dest:x8; op1val:0x55fd4005;
TEST_RD_OP( zunpkd830, x8, x6, 0x00000000, 0x55fd4005, x4, 8, x22)

inst_3:
// rs1==x28, rd==x5, rs1_b3_val == 127, rs1_b2_val == 16, rs1_b0_val == 85
// opcode: zunpkd830 ; op1:x28; dest:x5; op1val:0x7f101155;
TEST_RD_OP( zunpkd830, x5, x28, 0x00000000, 0x7f101155, x4, 12, x22)

inst_4:
// rs1==x23, rd==x11, rs1_b3_val == 191, 
// opcode: zunpkd830 ; op1:x23; dest:x11; op1val:0xbffd1255;
TEST_RD_OP( zunpkd830, x11, x23, 0x00000000, 0xbffd1255, x4, 16, x22)

inst_5:
// rs1==x0, rd==x1, rs1_b3_val == 223, rs1_b1_val == 4, rs1_b0_val == 2
// opcode: zunpkd830 ; op1:x0; dest:x1; op1val:0xdf050402;
TEST_RD_OP( zunpkd830, x1, x0, 0x00000000, 0xdf050402, x4, 20, x22)

inst_6:
// rs1==x5, rd==x3, rs1_b3_val == 239, rs1_b0_val == 251
// opcode: zunpkd830 ; op1:x5; dest:x3; op1val:0xef0d11fb;
TEST_RD_OP( zunpkd830, x3, x5, 0x00000000, 0xef0d11fb, x4, 24, x22)

inst_7:
// rs1==x27, rd==x21, rs1_b3_val == 247, rs1_b0_val == 170
// opcode: zunpkd830 ; op1:x27; dest:x21; op1val:0xf70701aa;
TEST_RD_OP( zunpkd830, x21, x27, 0x00000000, 0xf70701aa, x4, 28, x22)

inst_8:
// rs1==x9, rd==x6, rs1_b3_val == 251, rs1_b1_val == 239, rs1_b0_val == 128
// opcode: zunpkd830 ; op1:x9; dest:x6; op1val:0xfbfdef80;
TEST_RD_OP( zunpkd830, x6, x9, 0x00000000, 0xfbfdef80, x4, 32, x22)

inst_9:
// rs1==x11, rd==x13, rs1_b3_val == 253, 
// opcode: zunpkd830 ; op1:x11; dest:x13; op1val:0xfd07120a;
TEST_RD_OP( zunpkd830, x13, x11, 0x00000000, 0xfd07120a, x4, 36, x22)

inst_10:
// rs1==x31, rd==x27, rs1_b3_val == 254, rs1_b1_val == 191
// opcode: zunpkd830 ; op1:x31; dest:x27; op1val:0xfe06bf0a;
TEST_RD_OP( zunpkd830, x27, x31, 0x00000000, 0xfe06bf0a, x4, 40, x22)

inst_11:
// rs1==x16, rd==x14, rs1_b3_val == 128, rs1_b0_val == 64, rs1_b1_val == 127, rs1_b2_val == 128
// opcode: zunpkd830 ; op1:x16; dest:x14; op1val:0x80807f40;
TEST_RD_OP( zunpkd830, x14, x16, 0x00000000, 0x80807f40, x4, 44, x22)

inst_12:
// rs1==x17, rd==x26, rs1_b3_val == 64, rs1_b1_val == 32, rs1_b2_val == 254, rs1_b0_val == 255
// opcode: zunpkd830 ; op1:x17; dest:x26; op1val:0x40fe20ff;
TEST_RD_OP( zunpkd830, x26, x17, 0x00000000, 0x40fe20ff, x4, 48, x22)

inst_13:
// rs1==x30, rd==x29, rs1_b3_val == 32, rs1_b2_val == 1
// opcode: zunpkd830 ; op1:x30; dest:x29; op1val:0x20014003;
TEST_RD_OP( zunpkd830, x29, x30, 0x00000000, 0x20014003, x4, 52, x22)

inst_14:
// rs1==x1, rd==x7, rs1_b3_val == 16, 
// opcode: zunpkd830 ; op1:x1; dest:x7; op1val:0x100a11aa;
TEST_RD_OP( zunpkd830, x7, x1, 0x00000000, 0x100a11aa, x4, 56, x22)

inst_15:
// rs1==x20, rd==x12, rs1_b3_val == 8, rs1_b0_val == 239
// opcode: zunpkd830 ; op1:x20; dest:x12; op1val:0x80e12ef;
TEST_RD_OP( zunpkd830, x12, x20, 0x00000000, 0x80e12ef, x4, 60, x22)

inst_16:
// rs1==x15, rd==x16, rs1_b3_val == 4, rs1_b2_val == 191, rs1_b1_val == 254
// opcode: zunpkd830 ; op1:x15; dest:x16; op1val:0x4bffe0d;
TEST_RD_OP( zunpkd830, x16, x15, 0x00000000, 0x4bffe0d, x4, 64, x22)

inst_17:
// rs1==x7, rd==x28, rs1_b3_val == 2, rs1_b2_val == 64, rs1_b1_val == 8
// opcode: zunpkd830 ; op1:x7; dest:x28; op1val:0x240080b;
TEST_RD_OP( zunpkd830, x28, x7, 0x00000000, 0x240080b, x4, 68, x22)

inst_18:
// rs1==x21, rd==x20, rs1_b3_val == 1, 
// opcode: zunpkd830 ; op1:x21; dest:x20; op1val:0x1fb0313;
TEST_RD_OP( zunpkd830, x20, x21, 0x00000000, 0x1fb0313, x4, 72, x22)

inst_19:
// rs1==x14, rd==x17, rs1_b3_val == 255, rs1_b0_val == 16, rs1_b2_val == 127
// opcode: zunpkd830 ; op1:x14; dest:x17; op1val:0xff7fbf10;
TEST_RD_OP( zunpkd830, x17, x14, 0x00000000, 0xff7fbf10, x4, 76, x22)

inst_20:
// rs1==x29, rd==x15, rs1_b3_val == 0, rs1_b2_val == 247
// opcode: zunpkd830 ; op1:x29; dest:x15; op1val:0xf7ef09;
TEST_RD_OP( zunpkd830, x15, x29, 0x00000000, 0xf7ef09, x4, 80, x22)

inst_21:
// rs1==x18, rd==x30, rs1_b2_val == 170, rs1_b0_val == 254
// opcode: zunpkd830 ; op1:x18; dest:x30; op1val:0xfaa08fe;
TEST_RD_OP( zunpkd830, x30, x18, 0x00000000, 0xfaa08fe, x4, 84, x22)

inst_22:
// rs1==x10, rd==x25, rs1_b0_val == 191, rs1_b1_val == 0
// opcode: zunpkd830 ; op1:x10; dest:x25; op1val:0x40bf00bf;
TEST_RD_OP( zunpkd830, x25, x10, 0x00000000, 0x40bf00bf, x4, 88, x22)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_23:
// rs1==x4, rd==x19, rs1_b0_val == 223, 
// opcode: zunpkd830 ; op1:x4; dest:x19; op1val:0x60101df;
TEST_RD_OP( zunpkd830, x19, x4, 0x00000000, 0x60101df, x1, 0, x5)

inst_24:
// rs1==x25, rd==x23, rs1_b0_val == 247, rs1_b2_val == 32
// opcode: zunpkd830 ; op1:x25; dest:x23; op1val:0x22013f7;
TEST_RD_OP( zunpkd830, x23, x25, 0x00000000, 0x22013f7, x1, 4, x5)

inst_25:
// rs1==x8, rd==x0, rs1_b0_val == 253, 
// opcode: zunpkd830 ; op1:x8; dest:x0; op1val:0x3f711fd;
TEST_RD_OP( zunpkd830, x0, x8, 0x00000000, 0x3f711fd, x1, 8, x5)

inst_26:
// rs1==x2, rd==x22, rs1_b0_val == 32, 
// opcode: zunpkd830 ; op1:x2; dest:x22; op1val:0xfbffe20;
TEST_RD_OP( zunpkd830, x22, x2, 0x00000000, 0xfbffe20, x1, 12, x5)

inst_27:
// rs1==x3, rd==x10, rs1_b0_val == 8, rs1_b1_val == 255
// opcode: zunpkd830 ; op1:x3; dest:x10; op1val:0xaa0cff08;
TEST_RD_OP( zunpkd830, x10, x3, 0x00000000, 0xaa0cff08, x1, 16, x5)

inst_28:
// rs1==x26, rd==x24, rs1_b0_val == 4, rs1_b1_val == 2
// opcode: zunpkd830 ; op1:x26; dest:x24; op1val:0x100d0204;
TEST_RD_OP( zunpkd830, x24, x26, 0x00000000, 0x100d0204, x1, 20, x5)

inst_29:
// rs1==x13, rd==x4, rs1_b0_val == 1, 
// opcode: zunpkd830 ; op1:x13; dest:x4; op1val:0xff0e0201;
TEST_RD_OP( zunpkd830, x4, x13, 0x00000000, 0xff0e0201, x1, 24, x5)

inst_30:
// rs1==x24, rd==x18, rs1_b2_val == 85, 
// opcode: zunpkd830 ; op1:x24; dest:x18; op1val:0xf755bf13;
TEST_RD_OP( zunpkd830, x18, x24, 0x00000000, 0xf755bf13, x1, 28, x5)

inst_31:
// rs1==x22, rd==x9, rs1_b2_val == 223, 
// opcode: zunpkd830 ; op1:x22; dest:x9; op1val:0x20dfef0d;
TEST_RD_OP( zunpkd830, x9, x22, 0x00000000, 0x20dfef0d, x1, 32, x5)

inst_32:
// rs1_b2_val == 8, rs1_b1_val == 85
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x7f085502;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x7f085502, x1, 36, x5)

inst_33:
// rs1_b2_val == 4, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x55040704;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x55040704, x1, 40, x5)

inst_34:
// rs1_b2_val == 2, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xef024009;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xef024009, x1, 44, x5)

inst_35:
// rs1_b2_val == 255, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xefffbf13;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xefffbf13, x1, 48, x5)

inst_36:
// rs1_b2_val == 0, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x7f000d01;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x7f000d01, x1, 52, x5)

inst_37:
// rs1_b1_val == 170, rs1_b0_val == 127
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xf7feaa7f;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xf7feaa7f, x1, 56, x5)

inst_38:
// rs1_b1_val == 223, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xa0fdf13;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xa0fdf13, x1, 60, x5)

inst_39:
// rs1_b1_val == 251, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x809fb0d;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x809fb0d, x1, 64, x5)

inst_40:
// rs1_b1_val == 253, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x7f0dfd7f;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x7f0dfd7f, x1, 68, x5)

inst_41:
// rs1_b2_val == 239, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xfeeffb03;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xfeeffb03, x1, 72, x5)

inst_42:
// rs1_b1_val == 128, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xfb808006;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xfb808006, x1, 76, x5)

inst_43:
// rs1_b1_val == 16, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xfd20107f;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xfd20107f, x1, 80, x5)

inst_44:
// rs1_b1_val == 247, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x4004f7ff;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x4004f7ff, x1, 84, x5)

inst_45:
// rs1_b3_val == 223, rs1_b1_val == 4, rs1_b0_val == 2
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xdf050402;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0xdf050402, x1, 88, x5)

inst_46:
// rs1_b0_val == 253, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x3f711fd;
TEST_RD_OP( zunpkd830, x31, x30, 0x00000000, 0x3f711fd, x1, 92, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 24*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
