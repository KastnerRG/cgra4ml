
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalbt instruction of the RISC-V RV32PZicsr extension for the smalbt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalbt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x21, rd==x2, rs1_h0_val == -32768, rs2_h0_val == -5, rs1_h1_val != rs2_h1_val, rs2_h1_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 16
// opcode: smalbt ; op1:x29; op2:x21; dest:x2; op1val:0x00108000;  op2val:0x2000fffb
TEST_P64_PNN_OP(smalbt, x2, x3, x29, x21, 0x00000000, 0, 0x00108000, 0x2000fffb, x8, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x28, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs1_h1_val == 32, rs2_h0_val == 32767, rs1_h0_val == -16385
// opcode: smalbt ; op1:x2; op2:x2; dest:x28; op1val:0x0020bfff;  op2val:0x00207fff
TEST_P64_PNN_OP(smalbt, x28, x29, x2, x2, 0x00000000, 0, 0x0020bfff, 0x00207fff, x8, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x12, rs2==x13, rd==x12, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 64, rs2_h0_val == -9
// opcode: smalbt ; op1:x12; op2:x13; dest:x12; op1val:0xffef0040;  op2val:0x0007fff7
TEST_P64_PNN_OP(smalbt, x12, x13, x12, x13, 0x00000000, 0, 0xffef0040, 0x0007fff7, x8, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -33, rs2_h1_val == -129
// opcode: smalbt ; op1:x18; op2:x18; dest:x18; op1val:0xffef0009;  op2val:0xff7fffdf
TEST_P64_PNN_OP(smalbt, x18, x19, x18, x18, 0x00000000, 0, 0xffef0009, 0xff7fffdf, x8, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x26, rd==x26, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -17, rs1_h1_val == 2048, rs1_h0_val == -1
// opcode: smalbt ; op1:x3; op2:x26; dest:x26; op1val:0x0800ffff;  op2val:0xffeffff7
TEST_P64_PNN_OP(smalbt, x26, x27, x3, x26, 0x00000000, 0, 0x0800ffff, 0xffeffff7, x8, 32, x5)

inst_5:
// rs1==x1, rs2==x9, rd==x30, rs1_h0_val == rs2_h0_val, rs2_h0_val == 8192, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 8192, rs2_h1_val == -8193, rs1_h1_val == -21846
// opcode: smalbt ; op1:x1; op2:x9; dest:x30; op1val:0xaaaa2000;  op2val:0xdfff2000
TEST_P64_PNN_OP(smalbt, x30, x31, x1, x9, 0x00000000, 0, 0xaaaa2000, 0xdfff2000, x8, 40, x5)

inst_6:
// rs1==x25, rs2==x11, rd==x6, rs2_h1_val == -21846, rs2_h0_val == -21846
// opcode: smalbt ; op1:x25; op2:x11; dest:x6; op1val:0x0007fffa;  op2val:0xaaaaaaaa
TEST_P64_PNN_OP(smalbt, x6, x7, x25, x11, 0x00000000, 0, 0x0007fffa, 0xaaaaaaaa, x8, 48, x5)

inst_7:
// rs1==x4, rs2==x15, rd==x22, rs2_h1_val == 21845, rs1_h0_val == 256, rs1_h1_val == 32767
// opcode: smalbt ; op1:x4; op2:x15; dest:x22; op1val:0x7fff0100;  op2val:0x55550009
TEST_P64_PNN_OP(smalbt, x22, x23, x4, x15, 0x00000000, 0, 0x7fff0100, 0x55550009, x8, 56, x5)

inst_8:
// rs1==x16, rs2==x1, rd==x20, rs2_h1_val == 32767, rs1_h0_val == 2, rs1_h1_val == 4
// opcode: smalbt ; op1:x16; op2:x1; dest:x20; op1val:0x00040002;  op2val:0x7ffffff6
TEST_P64_PNN_OP(smalbt, x20, x21, x16, x1, 0x00000000, 0, 0x00040002, 0x7ffffff6, x8, 64, x5)

inst_9:
// rs1==x27, rs2==x30, rd==x4, rs2_h1_val == -16385, rs1_h0_val == 32767
// opcode: smalbt ; op1:x27; op2:x30; dest:x4; op1val:0x00097fff;  op2val:0xbfff3fff
TEST_P64_PNN_OP(smalbt, x4, x5, x27, x30, 0x00000000, 0, 0x00097fff, 0xbfff3fff, x8, 72, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_10:
// rs1==x10, rs2==x8, rd==x14, rs2_h1_val == -4097, rs1_h0_val == 512
// opcode: smalbt ; op1:x10; op2:x8; dest:x14; op1val:0xffef0200;  op2val:0xeffffff6
TEST_P64_PNN_OP(smalbt, x14, x15, x10, x8, 0x00000000, 0, 0xffef0200, 0xeffffff6, x1, 0, x5)

inst_11:
// rs1==x19, rs2==x25, rd==x10, rs2_h1_val == -2049, rs1_h0_val == -513, rs2_h0_val == -32768
// opcode: smalbt ; op1:x19; op2:x25; dest:x10; op1val:0xfff9fdff;  op2val:0xf7ff8000
TEST_P64_PNN_OP(smalbt, x10, x11, x19, x25, 0x00000000, 0, 0xfff9fdff, 0xf7ff8000, x1, 8, x2)

inst_12:
// rs1==x9, rs2==x23, rd==x24, rs2_h1_val == -1025, rs2_h0_val == 4, rs1_h0_val == 1, rs1_h1_val == -65
// opcode: smalbt ; op1:x9; op2:x23; dest:x24; op1val:0xffbf0001;  op2val:0xfbff0004
TEST_P64_PNN_OP(smalbt, x24, x25, x9, x23, 0x00000000, 0, 0xffbf0001, 0xfbff0004, x1, 16, x2)

inst_13:
// rs1==x8, rs2==x31, rd==x16, rs2_h1_val == -513, rs2_h0_val == -3, rs1_h0_val == -8193, rs1_h1_val == -513
// opcode: smalbt ; op1:x8; op2:x31; dest:x16; op1val:0xfdffdfff;  op2val:0xfdfffffd
TEST_P64_PNN_OP(smalbt, x16, x17, x8, x31, 0x00000000, 0, 0xfdffdfff, 0xfdfffffd, x1, 24, x2)

inst_14:
// rs1==x23, rs2==x27, rd==x8, rs2_h1_val == -257, rs1_h0_val == 2048
// opcode: smalbt ; op1:x23; op2:x27; dest:x8; op1val:0x00060800;  op2val:0xfefffff6
TEST_P64_PNN_OP(smalbt, x8, x9, x23, x27, 0x00000000, 0, 0x00060800, 0xfefffff6, x1, 32, x2)

inst_15:
// rs1==x20, rs2==x28, rs2_h1_val == -65, 
// opcode: smalbt ; op1:x20; op2:x28; dest:x18; op1val:0xfffa0006;  op2val:0xffbf0006
TEST_P64_PNN_OP(smalbt, x18, x19, x20, x28, 0x00000000, 0, 0xfffa0006, 0xffbf0006, x1, 40, x2)

inst_16:
// rs1==x28, rs2==x29, rs2_h1_val == -33, rs1_h1_val == -129
// opcode: smalbt ; op1:x28; op2:x29; dest:x26; op1val:0xff7f0009;  op2val:0xffdfc000
TEST_P64_PNN_OP(smalbt, x26, x27, x28, x29, 0x00000000, 0, 0xff7f0009, 0xffdfc000, x1, 48, x2)

inst_17:
// rs1==x7, rs2==x4, rs2_h1_val == -9, rs2_h0_val == 1024, rs1_h1_val == -16385, rs1_h0_val == -1025
// opcode: smalbt ; op1:x7; op2:x4; dest:x22; op1val:0xbffffbff;  op2val:0xfff70400
TEST_P64_PNN_OP(smalbt, x22, x23, x7, x4, 0x00000000, 0, 0xbffffbff, 0xfff70400, x1, 56, x2)

inst_18:
// rs1==x0, rs2==x3, rs2_h1_val == -5, rs1_h1_val == -4097
// opcode: smalbt ; op1:x0; op2:x3; dest:x22; op1val:0xefff0005;  op2val:0xfffb0400
TEST_P64_PNN_OP(smalbt, x22, x23, x0, x3, 0x00000000, 0, 0xefff0005, 0xfffb0400, x1, 64, x2)

inst_19:
// rs1==x26, rs2==x12, rs2_h1_val == -3, rs2_h0_val == -129, rs1_h1_val == 256
// opcode: smalbt ; op1:x26; op2:x12; dest:x20; op1val:0x0100fffc;  op2val:0xfffdff7f
TEST_P64_PNN_OP(smalbt, x20, x21, x26, x12, 0x00000000, 0, 0x0100fffc, 0xfffdff7f, x1, 72, x2)

inst_20:
// rs1==x30, rs2==x24, rs2_h1_val == -2, rs1_h1_val == 64, rs1_h0_val == 21845
// opcode: smalbt ; op1:x30; op2:x24; dest:x16; op1val:0x00405555;  op2val:0xfffec000
TEST_P64_PNN_OP(smalbt, x16, x17, x30, x24, 0x00000000, 0, 0x00405555, 0xfffec000, x1, 80, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21:
// rs1==x13, rs2==x20, rs2_h1_val == -32768, 
// opcode: smalbt ; op1:x13; op2:x20; dest:x24; op1val:0xfffa0006;  op2val:0x80000400
TEST_P64_PNN_OP(smalbt, x24, x25, x13, x20, 0x00000000, 0, 0xfffa0006, 0x80000400, x1, 0, x2)

inst_22:
// rs1==x17, rs2==x10, rs2_h1_val == 16384, rs1_h1_val == -3
// opcode: smalbt ; op1:x17; op2:x10; dest:x12; op1val:0xfffd0800;  op2val:0x40003fff
TEST_P64_PNN_OP(smalbt, x12, x13, x17, x10, 0x00000000, 0, 0xfffd0800, 0x40003fff, x1, 8, x2)

inst_23:
// rs1==x5, rs2==x7, rs2_h1_val == 4096, rs2_h0_val == -8193, rs1_h0_val == 4096
// opcode: smalbt ; op1:x5; op2:x7; dest:x6; op1val:0xfff81000;  op2val:0x1000dfff
TEST_P64_PNN_OP(smalbt, x6, x7, x5, x7, 0x00000000, 0, 0xfff81000, 0x1000dfff, x1, 16, x2)

inst_24:
// rs1==x14, rs2==x22, rs2_h1_val == 2048, rs1_h1_val == -1, rs2_h0_val == 128, rs1_h0_val == -129
// opcode: smalbt ; op1:x14; op2:x22; dest:x12; op1val:0xffffff7f;  op2val:0x08000080
TEST_P64_PNN_OP(smalbt, x12, x13, x14, x22, 0x00000000, 0, 0xffffff7f, 0x08000080, x1, 24, x4)

inst_25:
// rs1==x31, rs2==x14, rs2_h1_val == 1024, rs1_h0_val == 4
// opcode: smalbt ; op1:x31; op2:x14; dest:x28; op1val:0xfffd0004;  op2val:0x04008000
TEST_P64_PNN_OP(smalbt, x28, x29, x31, x14, 0x00000000, 0, 0xfffd0004, 0x04008000, x1, 32, x4)

inst_26:
// rs1==x21, rs2==x0, rs2_h1_val == 512, 
// opcode: smalbt ; op1:x21; op2:x0; dest:x16; op1val:0x00040002;  op2val:0x0200c000
TEST_P64_PNN_OP(smalbt, x16, x17, x21, x0, 0x00000000, 0, 0x00040002, 0x0200c000, x1, 40, x4)

inst_27:
// rs1==x24, rs2==x17, rs2_h1_val == 256, rs1_h0_val == 128, rs2_h0_val == -4097
// opcode: smalbt ; op1:x24; op2:x17; dest:x12; op1val:0x00050080;  op2val:0x0100efff
TEST_P64_PNN_OP(smalbt, x12, x13, x24, x17, 0x00000000, 0, 0x00050080, 0x0100efff, x1, 48, x4)

inst_28:
// rs1==x6, rs2==x5, rs2_h1_val == 128, rs1_h1_val == -32768
// opcode: smalbt ; op1:x6; op2:x5; dest:x24; op1val:0x80000007;  op2val:0x0080ffdf
TEST_P64_PNN_OP(smalbt, x24, x25, x6, x5, 0x00000000, 0, 0x80000007, 0x0080ffdf, x1, 56, x4)

inst_29:
// rs1==x11, rs2==x16, rs2_h1_val == 64, rs1_h1_val == -257
// opcode: smalbt ; op1:x11; op2:x16; dest:x10; op1val:0xfefffdff;  op2val:0x00408000
TEST_P64_PNN_OP(smalbt, x10, x11, x11, x16, 0x00000000, 0, 0xfefffdff, 0x00408000, x1, 64, x4)

inst_30:
// rs1==x15, rs2==x19, rs2_h1_val == 16, rs1_h1_val == 0
// opcode: smalbt ; op1:x15; op2:x19; dest:x8; op1val:0x0000c000;  op2val:0x00100006
TEST_P64_PNN_OP(smalbt, x8, x9, x15, x19, 0x00000000, 0, 0x0000c000, 0x00100006, x1, 72, x4)

inst_31:
// rs1==x22, rs2==x6, rs1_h0_val == -257, rs2_h0_val == 16384
// opcode: smalbt ; op1:x22; op2:x6; dest:x2; op1val:0xc000feff;  op2val:0xfff84000
TEST_P64_PNN_OP(smalbt, x2, x3, x22, x6, 0x00000000, 0, 0xc000feff, 0xfff84000, x1, 80, x4)

inst_32:
// rs1_h0_val == -65, rs2_h1_val == -1, rs1_h1_val == 2
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0002ffbf;  op2val:0xffffff7f
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0002ffbf, 0xffffff7f, x1, 88, x4)

inst_33:
// rs1_h0_val == -33, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x8000ffdf;  op2val:0xffbf0006
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x8000ffdf, 0xffbf0006, x1, 96, x4)

inst_34:
// rs1_h0_val == -17, rs2_h0_val == -257
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0007ffef;  op2val:0x0040feff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0007ffef, 0x0040feff, x1, 104, x4)

inst_35:
// rs1_h0_val == -9, rs2_h0_val == 8
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0009fff7;  op2val:0xfffb0008
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0009fff7, 0xfffb0008, x1, 112, x4)

inst_36:
// rs1_h0_val == -5, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0004fffb;  op2val:0xffbf3fff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0004fffb, 0xffbf3fff, x1, 120, x4)

inst_37:
// rs1_h0_val == -3, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xc000fffd;  op2val:0x00057fff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xc000fffd, 0x00057fff, x1, 128, x4)

inst_38:
// rs1_h0_val == -2, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0040fffe;  op2val:0x04002000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0040fffe, 0x04002000, x1, 136, x4)

inst_39:
// rs1_h0_val == 16384, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x80004000;  op2val:0x4000c000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x80004000, 0x4000c000, x1, 144, x4)

inst_40:
// rs1_h0_val == 1024, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00030400;  op2val:0xfffd0005
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00030400, 0xfffd0005, x1, 152, x4)

inst_41:
// rs1_h0_val == 32, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x08000020;  op2val:0x08000003
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x08000020, 0x08000003, x1, 160, x4)

inst_42:
// rs1_h0_val == 16, rs1_h1_val == 16384
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x40000010;  op2val:0x0400fff9
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x40000010, 0x0400fff9, x1, 168, x4)

inst_43:
// rs1_h0_val == 8, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x08000008;  op2val:0x04003fff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x08000008, 0x04003fff, x1, 176, x4)

inst_44:
// rs1_h0_val == 0, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xff7f0000;  op2val:0xfeff3fff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xff7f0000, 0xfeff3fff, x1, 184, x4)

inst_45:
// rs2_h1_val == 8, rs2_h0_val == 0, rs1_h1_val == 512
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0200fff8;  op2val:0x00080000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0200fff8, 0x00080000, x1, 192, x4)

inst_46:
// rs2_h1_val == 4, rs1_h1_val == -33
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0010;  op2val:0x00040005
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0010, 0x00040005, x1, 200, x4)

inst_47:
// rs2_h1_val == 2, rs2_h0_val == 2
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00030800;  op2val:0x00020002
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00030800, 0x00020002, x1, 208, x4)

inst_48:
// rs2_h1_val == 1, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00040080;  op2val:0x0001fffc
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00040080, 0x0001fffc, x1, 216, x4)

inst_49:
// rs2_h1_val == 0, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfffcffff;  op2val:0x0000c000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfffcffff, 0x0000c000, x1, 224, x4)

inst_50:
// rs2_h0_val == 21845, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0000ffef;  op2val:0xff7f5555
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0000ffef, 0xff7f5555, x1, 232, x4)

inst_51:
// rs2_h0_val == -16385, rs1_h0_val == -21846, rs1_h1_val == 1024
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0400aaaa;  op2val:0xdfffbfff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0400aaaa, 0xdfffbfff, x1, 240, x4)

inst_52:
// rs2_h0_val == -2, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00400080;  op2val:0xfffafffe
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00400080, 0xfffafffe, x1, 248, x4)

inst_53:
// rs2_h0_val == 4096, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x08000080;  op2val:0xaaaa1000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x08000080, 0xaaaa1000, x1, 256, x4)

inst_54:
// rs2_h0_val == 2048, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00070010;  op2val:0xfffe0800
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00070010, 0xfffe0800, x1, 264, x4)

inst_55:
// rs2_h0_val == 512, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x4000fff9;  op2val:0xffff0200
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x4000fff9, 0xffff0200, x1, 272, x4)

inst_56:
// rs2_h0_val == 256, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xffdf4000;  op2val:0x00070100
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xffdf4000, 0x00070100, x1, 280, x4)

inst_57:
// rs2_h0_val == 64, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0006fbff;  op2val:0x10000040
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0006fbff, 0x10000040, x1, 288, x4)

inst_58:
// rs2_h0_val == 32, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x40003fff;  op2val:0xf7ff0020
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x40003fff, 0xf7ff0020, x1, 296, x4)

inst_59:
// rs2_h0_val == 16, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x02003fff;  op2val:0x00000010
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x02003fff, 0x00000010, x1, 304, x4)

inst_60:
// rs2_h0_val == 1, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x08000020;  op2val:0x00070001
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x08000020, 0x00070001, x1, 312, x4)

inst_61:
// rs2_h0_val == -1, rs1_h1_val == 1
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0001feff;  op2val:0xfff9ffff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0001feff, 0xfff9ffff, x1, 320, x4)

inst_62:
// rs1_h1_val == 21845, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x5555ffdf;  op2val:0x5555bfff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x5555ffdf, 0x5555bfff, x1, 328, x4)

inst_63:
// rs1_h1_val == -8193, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xdfff0003;  op2val:0x00090000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xdfff0003, 0x00090000, x1, 336, x4)

inst_64:
// rs1_h1_val == -2049, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xf7fffff8;  op2val:0xfffc0800
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xf7fffff8, 0xfffc0800, x1, 344, x4)

inst_65:
// rs1_h1_val == -9, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfff7fffe;  op2val:0xfefffff6
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfff7fffe, 0xfefffff6, x1, 352, x4)

inst_66:
// rs1_h1_val == -5, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0800;  op2val:0xfff7ff7f
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0800, 0xfff7ff7f, x1, 360, x4)

inst_67:
// rs1_h1_val == -2, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfffefff8;  op2val:0xfffc5555
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfffefff8, 0xfffc5555, x1, 368, x4)

inst_68:
// rs1_h1_val == 8192, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x20000000;  op2val:0x0008fff7
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x20000000, 0x0008fff7, x1, 376, x4)

inst_69:
// rs1_h1_val == 4096, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x10000000;  op2val:0x0006fffb
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x10000000, 0x0006fffb, x1, 384, x4)

inst_70:
// rs1_h1_val == 128, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0080dfff;  op2val:0xfefffeff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0080dfff, 0xfefffeff, x1, 392, x4)

inst_71:
// rs2_h0_val == -65, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xffffdfff;  op2val:0xbfffffbf
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xffffdfff, 0xbfffffbf, x1, 400, x4)

inst_72:
// rs1_h1_val == 8, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0008fdff;  op2val:0xfffb0004
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0008fdff, 0xfffb0004, x1, 408, x4)

inst_73:
// rs2_h0_val == -17, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00020008;  op2val:0x0040ffef
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00020008, 0x0040ffef, x1, 416, x4)

inst_74:
// rs2_h0_val == -2049, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0003bfff;  op2val:0xfff6f7ff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0003bfff, 0xfff6f7ff, x1, 424, x4)

inst_75:
// rs2_h0_val == -1025, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x10000010;  op2val:0x0007fbff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x10000010, 0x0007fbff, x1, 432, x4)

inst_76:
// rs2_h0_val == -513, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0003;  op2val:0xf7fffdff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0003, 0xf7fffdff, x1, 440, x4)

inst_77:
// rs1_h1_val == -1025, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xfbff0008;  op2val:0xfff60004
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xfbff0008, 0xfff60004, x1, 448, x4)

inst_78:
// rs1_h0_val == -4097, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xbfffefff;  op2val:0x0100fffc
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xbfffefff, 0x0100fffc, x1, 456, x4)

inst_79:
// rs1_h0_val == -2049, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xdffff7ff;  op2val:0x0003ffbf
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xdffff7ff, 0x0003ffbf, x1, 464, x4)

inst_80:
// rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs1_h1_val == 32, rs2_h0_val == 32767, rs1_h0_val == -16385
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x0020bfff;  op2val:0x00207fff
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x0020bfff, 0x00207fff, x1, 472, x4)

inst_81:
// rs2_h1_val == -5, rs1_h1_val == -4097
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0xefff0005;  op2val:0xfffb0400
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0xefff0005, 0xfffb0400, x1, 480, x4)

inst_82:
// rs2_h1_val == 512, 
// opcode: smalbt ; op1:x31; op2:x29; dest:x30; op1val:0x00040002;  op2val:0x0200c000
TEST_P64_PNN_OP(smalbt, x30, x31, x31, x29, 0x00000000, 0, 0x00040002, 0x0200c000, x1, 488, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 124*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
