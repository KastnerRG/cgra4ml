
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smslda instruction of the RISC-V RV32PZicsr extension for the smslda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smslda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x26, rd==x18, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h1_val == 2
// opcode: smslda ; op1:x9; op2:x26; dest:x18; op1val:0x00028000;  op2val:0x00090020
TEST_P64_PNN_OP(smslda, x18, x19, x9, x26, 0x00000000, 0, 0x00028000, 0x00090020, x12, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x22, rs1_h1_val == rs2_h1_val, rs2_h0_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 4096, rs2_h1_val == 0, rs1_h1_val == 0
// opcode: smslda ; op1:x20; op2:x20; dest:x22; op1val:0x00001000;  op2val:0x00008000
TEST_P64_PNN_OP(smslda, x22, x23, x20, x20, 0x00000000, 0, 0x00001000, 0x00008000, x12, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x6, rs2==x1, rd==x6, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -17, rs1_h0_val == -1, rs2_h1_val == 256
// opcode: smslda ; op1:x6; op2:x1; dest:x6; op1val:0xffefffff;  op2val:0x01000007
TEST_P64_PNN_OP(smslda, x6, x7, x6, x1, 0x00000000, 0, 0xffefffff, 0x01000007, x12, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -21846, rs1_h0_val == 4
// opcode: smslda ; op1:x16; op2:x16; dest:x16; op1val:0xaaaa0004;  op2val:0xfffa7fff
TEST_P64_PNN_OP(smslda, x16, x17, x16, x16, 0x00000000, 0, 0xaaaa0004, 0xfffa7fff, x12, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x2, rd==x2, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -1025
// opcode: smslda ; op1:x28; op2:x2; dest:x2; op1val:0x0007fff8;  op2val:0xfbfffff6
TEST_P64_PNN_OP(smslda, x2, x3, x28, x2, 0x00000000, 0, 0x0007fff8, 0xfbfffff6, x12, 32, x5)

inst_5:
// rs1==x17, rs2==x28, rd==x8, rs1_h0_val == rs2_h0_val, rs1_h0_val == 8, rs2_h0_val == 8
// opcode: smslda ; op1:x17; op2:x28; dest:x8; op1val:0x00060008;  op2val:0x00050008
TEST_P64_PNN_OP(smslda, x8, x9, x17, x28, 0x00000000, 0, 0x00060008, 0x00050008, x12, 40, x5)

inst_6:
// rs1==x23, rs2==x4, rd==x10, rs2_h1_val == -21846, rs2_h0_val == 21845, rs1_h0_val == 8192
// opcode: smslda ; op1:x23; op2:x4; dest:x10; op1val:0xfffa2000;  op2val:0xaaaa5555
TEST_P64_PNN_OP(smslda, x10, x11, x23, x4, 0x00000000, 0, 0xfffa2000, 0xaaaa5555, x12, 48, x5)

inst_7:
// rs1==x10, rs2==x29, rd==x4, rs2_h1_val == 21845, rs1_h1_val == -16385, rs1_h0_val == 1024
// opcode: smslda ; op1:x10; op2:x29; dest:x4; op1val:0xbfff0400;  op2val:0x55555555
TEST_P64_PNN_OP(smslda, x4, x5, x10, x29, 0x00000000, 0, 0xbfff0400, 0x55555555, x12, 56, x5)

inst_8:
// rs1==x14, rs2==x11, rd==x26, rs2_h1_val == 32767, rs2_h0_val == -65
// opcode: smslda ; op1:x14; op2:x11; dest:x26; op1val:0xc0000006;  op2val:0x7fffffbf
TEST_P64_PNN_OP(smslda, x26, x27, x14, x11, 0x00000000, 0, 0xc0000006, 0x7fffffbf, x12, 64, x5)

inst_9:
// rs1==x7, rs2==x18, rd==x24, rs2_h1_val == -16385, rs1_h1_val == -1
// opcode: smslda ; op1:x7; op2:x18; dest:x24; op1val:0xffff2000;  op2val:0xbffffff8
TEST_P64_PNN_OP(smslda, x24, x25, x7, x18, 0x00000000, 0, 0xffff2000, 0xbffffff8, x12, 72, x5)

inst_10:
// rs1==x22, rs2==x3, rd==x20, rs2_h1_val == -8193, rs1_h0_val == -5, rs1_h1_val == -129
// opcode: smslda ; op1:x22; op2:x3; dest:x20; op1val:0xff7ffffb;  op2val:0xdfff0006
TEST_P64_PNN_OP(smslda, x20, x21, x22, x3, 0x00000000, 0, 0xff7ffffb, 0xdfff0006, x12, 80, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_11:
// rs1==x18, rs2==x23, rd==x14, rs2_h1_val == -4097, rs1_h1_val == 8192, rs1_h0_val == -65, rs2_h0_val == -9
// opcode: smslda ; op1:x18; op2:x23; dest:x14; op1val:0x2000ffbf;  op2val:0xeffffff7
TEST_P64_PNN_OP(smslda, x14, x15, x18, x23, 0x00000000, 0, 0x2000ffbf, 0xeffffff7, x1, 0, x5)

inst_12:
// rs1==x4, rs2==x19, rd==x30, rs2_h1_val == -2049, rs1_h1_val == -3, rs1_h0_val == 2048
// opcode: smslda ; op1:x4; op2:x19; dest:x30; op1val:0xfffd0800;  op2val:0xf7ff0007
TEST_P64_PNN_OP(smslda, x30, x31, x4, x19, 0x00000000, 0, 0xfffd0800, 0xf7ff0007, x1, 8, x5)

inst_13:
// rs1==x8, rs2==x12, rd==x28, rs2_h1_val == -513, rs2_h0_val == -17
// opcode: smslda ; op1:x8; op2:x12; dest:x28; op1val:0x0000fffb;  op2val:0xfdffffef
TEST_P64_PNN_OP(smslda, x28, x29, x8, x12, 0x00000000, 0, 0x0000fffb, 0xfdffffef, x1, 16, x11)

inst_14:
// rs1==x3, rs2==x0, rd==x12, rs2_h1_val == -257, 
// opcode: smslda ; op1:x3; op2:x0; dest:x12; op1val:0xc000fffb;  op2val:0xfeff5555
TEST_P64_PNN_OP(smslda, x12, x13, x3, x0, 0x00000000, 0, 0xc000fffb, 0xfeff5555, x1, 24, x11)

inst_15:
// rs1==x15, rs2==x14, rs2_h1_val == -129, rs1_h0_val == 128
// opcode: smslda ; op1:x15; op2:x14; dest:x12; op1val:0xc0000080;  op2val:0xff7ffffc
TEST_P64_PNN_OP(smslda, x12, x13, x15, x14, 0x00000000, 0, 0xc0000080, 0xff7ffffc, x1, 32, x11)

inst_16:
// rs1==x5, rs2==x31, rs2_h1_val == -65, rs1_h0_val == 512, rs2_h0_val == -513, rs1_h1_val == -5
// opcode: smslda ; op1:x5; op2:x31; dest:x6; op1val:0xfffb0200;  op2val:0xffbffdff
TEST_P64_PNN_OP(smslda, x6, x7, x5, x31, 0x00000000, 0, 0xfffb0200, 0xffbffdff, x1, 40, x11)

inst_17:
// rs1==x2, rs2==x10, rs2_h1_val == -33, rs2_h0_val == -16385
// opcode: smslda ; op1:x2; op2:x10; dest:x8; op1val:0xc0001000;  op2val:0xffdfbfff
TEST_P64_PNN_OP(smslda, x8, x9, x2, x10, 0x00000000, 0, 0xc0001000, 0xffdfbfff, x1, 48, x11)

inst_18:
// rs1==x12, rs2==x17, rs2_h1_val == -17, rs1_h0_val == -21846, rs2_h0_val == -2
// opcode: smslda ; op1:x12; op2:x17; dest:x4; op1val:0xffefaaaa;  op2val:0xffeffffe
TEST_P64_PNN_OP(smslda, x4, x5, x12, x17, 0x00000000, 0, 0xffefaaaa, 0xffeffffe, x1, 56, x11)

inst_19:
// rs1==x30, rs2==x15, rs2_h1_val == -9, rs1_h0_val == -2
// opcode: smslda ; op1:x30; op2:x15; dest:x18; op1val:0xfff8fffe;  op2val:0xfff7c000
TEST_P64_PNN_OP(smslda, x18, x19, x30, x15, 0x00000000, 0, 0xfff8fffe, 0xfff7c000, x1, 64, x11)

inst_20:
// rs1==x0, rs2==x5, rs2_h1_val == -5, 
// opcode: smslda ; op1:x0; op2:x5; dest:x2; op1val:0x00030080;  op2val:0xfffb0003
TEST_P64_PNN_OP(smslda, x2, x3, x0, x5, 0x00000000, 0, 0x00030080, 0xfffb0003, x1, 72, x11)

inst_21:
// rs1==x26, rs2==x21, rs2_h1_val == -3, 
// opcode: smslda ; op1:x26; op2:x21; dest:x28; op1val:0xfffc2000;  op2val:0xfffdfff9
TEST_P64_PNN_OP(smslda, x28, x29, x26, x21, 0x00000000, 0, 0xfffc2000, 0xfffdfff9, x1, 80, x11)

inst_22:
// rs1==x19, rs2==x9, rs2_h1_val == -2, rs1_h1_val == 2048
// opcode: smslda ; op1:x19; op2:x9; dest:x8; op1val:0x08003fff;  op2val:0xfffefff7
TEST_P64_PNN_OP(smslda, x8, x9, x19, x9, 0x00000000, 0, 0x08003fff, 0xfffefff7, x1, 88, x11)

inst_23:
// rs1==x13, rs2==x6, rs2_h1_val == -32768, rs1_h1_val == -513, rs2_h0_val == 2048
// opcode: smslda ; op1:x13; op2:x6; dest:x26; op1val:0xfdff1000;  op2val:0x80000800
TEST_P64_PNN_OP(smslda, x26, x27, x13, x6, 0x00000000, 0, 0xfdff1000, 0x80000800, x1, 96, x11)

inst_24:
// rs1==x29, rs2==x30, rs2_h1_val == 16384, rs1_h1_val == 4, rs2_h0_val == -2049
// opcode: smslda ; op1:x29; op2:x30; dest:x4; op1val:0x0004fff9;  op2val:0x4000f7ff
TEST_P64_PNN_OP(smslda, x4, x5, x29, x30, 0x00000000, 0, 0x0004fff9, 0x4000f7ff, x1, 104, x11)

inst_25:
// rs1==x24, rs2==x7, rs2_h1_val == 8192, rs1_h0_val == 32767, rs2_h0_val == 0, rs1_h1_val == 32767
// opcode: smslda ; op1:x24; op2:x7; dest:x2; op1val:0x7fff7fff;  op2val:0x20000000
TEST_P64_PNN_OP(smslda, x2, x3, x24, x7, 0x00000000, 0, 0x7fff7fff, 0x20000000, x1, 112, x11)

inst_26:
// rs1==x25, rs2==x22, rs2_h1_val == 4096, 
// opcode: smslda ; op1:x25; op2:x22; dest:x14; op1val:0xff7ffff8;  op2val:0x10000006
TEST_P64_PNN_OP(smslda, x14, x15, x25, x22, 0x00000000, 0, 0xff7ffff8, 0x10000006, x1, 120, x11)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_27:
// rs1==x31, rs2==x8, rs2_h1_val == 2048, rs2_h0_val == -5, rs1_h1_val == -2049, rs1_h0_val == -16385
// opcode: smslda ; op1:x31; op2:x8; dest:x2; op1val:0xf7ffbfff;  op2val:0x0800fffb
TEST_P64_PNN_OP(smslda, x2, x3, x31, x8, 0x00000000, 0, 0xf7ffbfff, 0x0800fffb, x9, 0, x10)

inst_28:
// rs1==x1, rs2==x13, rs2_h1_val == 1024, rs1_h1_val == 1024
// opcode: smslda ; op1:x1; op2:x13; dest:x28; op1val:0x0400ffff;  op2val:0x0400ffbf
TEST_P64_PNN_OP(smslda, x28, x29, x1, x13, 0x00000000, 0, 0x0400ffff, 0x0400ffbf, x9, 8, x10)

inst_29:
// rs1==x21, rs2==x27, rs2_h1_val == 512, rs1_h0_val == 2
// opcode: smslda ; op1:x21; op2:x27; dest:x6; op1val:0xff7f0002;  op2val:0x02000003
TEST_P64_PNN_OP(smslda, x6, x7, x21, x27, 0x00000000, 0, 0xff7f0002, 0x02000003, x9, 16, x10)

inst_30:
// rs1==x11, rs2==x24, rs2_h1_val == 128, rs2_h0_val == 512
// opcode: smslda ; op1:x11; op2:x24; dest:x4; op1val:0xfffc0006;  op2val:0x00800200
TEST_P64_PNN_OP(smslda, x4, x5, x11, x24, 0x00000000, 0, 0xfffc0006, 0x00800200, x9, 24, x10)

inst_31:
// rs1==x27, rs2==x25, rs2_h1_val == 64, rs1_h0_val == 1, rs1_h1_val == 21845
// opcode: smslda ; op1:x27; op2:x25; dest:x30; op1val:0x55550001;  op2val:0x0040fff9
TEST_P64_PNN_OP(smslda, x30, x31, x27, x25, 0x00000000, 0, 0x55550001, 0x0040fff9, x9, 32, x10)

inst_32:
// rs2_h1_val == 32, rs2_h0_val == -4097
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0006fff8;  op2val:0x0020efff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0006fff8, 0x0020efff, x9, 40, x10)

inst_33:
// rs1_h0_val == -1025, rs1_h1_val == -33
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xffdffbff;  op2val:0xfffe3fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xffdffbff, 0xfffe3fff, x9, 48, x10)

inst_34:
// rs1_h0_val == -513, rs1_h1_val == 512
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0200fdff;  op2val:0xffef0009
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0200fdff, 0xffef0009, x9, 56, x10)

inst_35:
// rs1_h0_val == -257, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x2000feff;  op2val:0xfff8c000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x2000feff, 0xfff8c000, x9, 64, x10)

inst_36:
// rs1_h0_val == -129, rs2_h0_val == -21846
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfff8ff7f;  op2val:0xfffbaaaa
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfff8ff7f, 0xfffbaaaa, x9, 72, x10)

inst_37:
// rs1_h0_val == -33, rs1_h1_val == 256
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0100ffdf;  op2val:0x08000007
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0100ffdf, 0x08000007, x9, 80, x10)

inst_38:
// rs1_h0_val == -17, rs1_h1_val == 32
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0020ffef;  op2val:0x08000005
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0020ffef, 0x08000005, x9, 88, x10)

inst_39:
// rs1_h0_val == -9, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfff6fff7;  op2val:0xf7ffffbf
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfff6fff7, 0xf7ffffbf, x9, 96, x10)

inst_40:
// rs1_h0_val == -3, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0009fffd;  op2val:0x00203fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0009fffd, 0x00203fff, x9, 104, x10)

inst_41:
// rs1_h0_val == 16384, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff4000;  op2val:0xfffc0000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff4000, 0xfffc0000, x9, 112, x10)

inst_42:
// rs1_h0_val == 256, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x3fff0100;  op2val:0xffdf8000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x3fff0100, 0xffdf8000, x9, 120, x10)

inst_43:
// rs1_h0_val == 64, rs2_h0_val == -8193
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfff80040;  op2val:0xfdffdfff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfff80040, 0xfdffdfff, x9, 128, x10)

inst_44:
// rs1_h0_val == 32, rs2_h0_val == 1024
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00060020;  op2val:0x00400400
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00060020, 0x00400400, x9, 136, x10)

inst_45:
// rs1_h0_val == 16, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00060010;  op2val:0x0007ffef
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00060010, 0x0007ffef, x9, 144, x10)

inst_46:
// rs1_h0_val == 0, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00060000;  op2val:0xdfff3fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00060000, 0xdfff3fff, x9, 152, x10)

inst_47:
// rs2_h1_val == 16, rs1_h0_val == -4097
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0800efff;  op2val:0x0010fffc
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0800efff, 0x0010fffc, x9, 160, x10)

inst_48:
// rs2_h1_val == 8, rs1_h1_val == 4096
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x10000006;  op2val:0x0008fffc
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x10000006, 0x0008fffc, x9, 168, x10)

inst_49:
// rs2_h1_val == 4, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0080;  op2val:0x0004fff6
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0080, 0x0004fff6, x9, 176, x10)

inst_50:
// rs2_h1_val == 2, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x55557fff;  op2val:0x00020006
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x55557fff, 0x00020006, x9, 184, x10)

inst_51:
// rs2_h1_val == 1, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0400;  op2val:0x0001fff8
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0400, 0x0001fff8, x9, 192, x10)

inst_52:
// rs2_h1_val == -1, rs1_h1_val == -2
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfffe0000;  op2val:0xfffffffe
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfffe0000, 0xfffffffe, x9, 200, x10)

inst_53:
// rs2_h0_val == -1025, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00040100;  op2val:0x1000fbff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00040100, 0x1000fbff, x9, 208, x10)

inst_54:
// rs2_h0_val == -3, rs1_h1_val == -32768
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x80000000;  op2val:0xfffafffd
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x80000000, 0xfffafffd, x9, 216, x10)

inst_55:
// rs2_h0_val == 16384, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x10000005;  op2val:0xc0004000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x10000005, 0xc0004000, x9, 224, x10)

inst_56:
// rs2_h0_val == 8192, rs1_h1_val == -257
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0008;  op2val:0x00012000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0008, 0x00012000, x9, 232, x10)

inst_57:
// rs2_h0_val == 4096, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0002bfff;  op2val:0xfff91000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0002bfff, 0xfff91000, x9, 240, x10)

inst_58:
// rs2_h0_val == 256, rs1_h1_val == -4097
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xefffc000;  op2val:0xf7ff0100
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xefffc000, 0xf7ff0100, x9, 248, x10)

inst_59:
// rs2_h0_val == 128, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xffefffdf;  op2val:0xfffa0080
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xffefffdf, 0xfffa0080, x9, 256, x10)

inst_60:
// rs2_h0_val == 64, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xbfffaaaa;  op2val:0x3fff0040
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xbfffaaaa, 0x3fff0040, x9, 264, x10)

inst_61:
// rs2_h0_val == 16, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00070200;  op2val:0x02000010
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00070200, 0x02000010, x9, 272, x10)

inst_62:
// rs2_h0_val == 4, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0004fff7;  op2val:0x04000004
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0004fff7, 0x04000004, x9, 280, x10)

inst_63:
// rs2_h0_val == 2, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xc0000007;  op2val:0x04000002
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xc0000007, 0x04000002, x9, 288, x10)

inst_64:
// rs2_h0_val == 1, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0400fffd;  op2val:0x20000001
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0400fffd, 0x20000001, x9, 296, x10)

inst_65:
// rs2_h0_val == -1, rs1_h1_val == -65
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0004;  op2val:0xfffeffff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0004, 0xfffeffff, x9, 304, x10)

inst_66:
// rs1_h1_val == -8193, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xdfff2000;  op2val:0x1000fffe
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xdfff2000, 0x1000fffe, x9, 312, x10)

inst_67:
// rs1_h1_val == -9, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfff7fffc;  op2val:0x0001f7ff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfff7fffc, 0x0001f7ff, x9, 320, x10)

inst_68:
// rs1_h0_val == 21845, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xc0005555;  op2val:0x0020bfff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xc0005555, 0x0020bfff, x9, 328, x10)

inst_69:
// rs1_h1_val == 16384, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x4000fff9;  op2val:0x00027fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x4000fff9, 0x00027fff, x9, 336, x10)

inst_70:
// rs1_h1_val == 128, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00800006;  op2val:0xf7ff7fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00800006, 0xf7ff7fff, x9, 344, x10)

inst_71:
// rs1_h1_val == 64, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0040bfff;  op2val:0x0001c000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0040bfff, 0x0001c000, x9, 352, x10)

inst_72:
// rs1_h1_val == 16, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00100007;  op2val:0x00080000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00100007, 0x00080000, x9, 360, x10)

inst_73:
// rs1_h1_val == 8, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0008ffbf;  op2val:0xc0000000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0008ffbf, 0xc0000000, x9, 368, x10)

inst_74:
// rs1_h0_val == -8193, rs2_h0_val == -257
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0004dfff;  op2val:0x0006feff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0004dfff, 0x0006feff, x9, 376, x10)

inst_75:
// rs1_h1_val == 1, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00010400;  op2val:0x0200fdff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00010400, 0x0200fdff, x9, 384, x10)

inst_76:
// rs2_h0_val == -129, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfffa0006;  op2val:0x0009ff7f
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfffa0006, 0x0009ff7f, x9, 392, x10)

inst_77:
// rs1_h1_val == -1025, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xfbfffff6;  op2val:0x0006aaaa
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xfbfffff6, 0x0006aaaa, x9, 400, x10)

inst_78:
// rs2_h0_val == -33, rs1_h0_val == -2049
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x0006f7ff;  op2val:0xfff6ffdf
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x0006f7ff, 0xfff6ffdf, x9, 408, x10)

inst_79:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 4096, rs2_h1_val == 0, rs1_h1_val == 0
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0x00001000;  op2val:0x00008000
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0x00001000, 0x00008000, x9, 416, x10)

inst_80:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -21846, rs1_h0_val == 4
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xaaaa0004;  op2val:0xfffa7fff
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xaaaa0004, 0xfffa7fff, x9, 424, x10)

inst_81:
// rs2_h1_val == -257, 
// opcode: smslda ; op1:x31; op2:x29; dest:x30; op1val:0xc000fffb;  op2val:0xfeff5555
TEST_P64_PNN_OP(smslda, x30, x31, x31, x29, 0x00000000, 0, 0xc000fffb, 0xfeff5555, x9, 432, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
