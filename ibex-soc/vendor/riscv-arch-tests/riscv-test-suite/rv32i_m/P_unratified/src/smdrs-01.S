
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smdrs instruction of the RISC-V RV32PZicsr extension for the smdrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smdrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x22,signature_x22_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x11, rd==x14, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16, rs2_h1_val == -1025, rs1_h1_val == -129
// opcode: smdrs ; op1:x10; op2:x11; dest:x14; op1val:0xff7f8000;  op2val:0xfbff0010
TEST_RR_OP(smdrs, x14, x10, x11, 0x00000000, 0xff7f8000, 0xfbff0010, x22, 0, x23)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x15, rs1_h1_val == rs2_h1_val, rs2_h1_val == 512, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 64, rs1_h1_val == 512, rs1_h0_val == -4097
// opcode: smdrs ; op1:x18; op2:x18; dest:x15; op1val:0x200efff;  op2val:0x2000040
TEST_RR_OP(smdrs, x15, x18, x18, 0x00000000, 0x200efff, 0x2000040, x22, 4, x23)

inst_2:
// rs1 == rd != rs2, rs1==x24, rs2==x12, rd==x24, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -8193, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 16, rs2_h0_val == -4097
// opcode: smdrs ; op1:x24; op2:x12; dest:x24; op1val:0xdfff0010;  op2val:0x05efff
TEST_RR_OP(smdrs, x24, x24, x12, 0x00000000, 0xdfff0010, 0x05efff, x22, 8, x23)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h0_val == -257, rs2_h1_val == -2049
// opcode: smdrs ; op1:x20; op2:x20; dest:x20; op1val:0x200003;  op2val:0xf7fffeff
TEST_RR_OP(smdrs, x20, x20, x20, 0x00000000, 0x200003, 0xf7fffeff, x22, 12, x23)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x10, rd==x10, rs1_h0_val == rs2_h0_val, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h1_val == 256, rs2_h1_val == 0, rs1_h0_val == 32
// opcode: smdrs ; op1:x14; op2:x10; dest:x10; op1val:0x1000020;  op2val:0x000020
TEST_RR_OP(smdrs, x10, x14, x10, 0x00000000, 0x1000020, 0x000020, x22, 16, x23)

inst_5:
// rs1==x26, rs2==x9, rd==x6, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -3, rs1_h0_val == -257
// opcode: smdrs ; op1:x26; op2:x9; dest:x6; op1val:0xfff9feff;  op2val:0x3ffffffd
TEST_RR_OP(smdrs, x6, x26, x9, 0x00000000, 0xfff9feff, 0x3ffffffd, x22, 20, x23)

inst_6:
// rs1==x11, rs2==x15, rd==x1, rs2_h1_val == -21846, rs1_h0_val == 64, rs1_h1_val == -21846, rs2_h0_val == 2048
// opcode: smdrs ; op1:x11; op2:x15; dest:x1; op1val:0xaaaa0040;  op2val:0xaaaa0800
TEST_RR_OP(smdrs, x1, x11, x15, 0x00000000, 0xaaaa0040, 0xaaaa0800, x22, 24, x23)

inst_7:
// rs1==x17, rs2==x19, rd==x7, rs2_h1_val == 21845, rs1_h0_val == 512, rs2_h0_val == -65
// opcode: smdrs ; op1:x17; op2:x19; dest:x7; op1val:0x060200;  op2val:0x5555ffbf
TEST_RR_OP(smdrs, x7, x17, x19, 0x00000000, 0x060200, 0x5555ffbf, x22, 28, x23)

inst_8:
// rs1==x4, rs2==x5, rd==x31, rs2_h1_val == 32767, rs2_h0_val == -5
// opcode: smdrs ; op1:x4; op2:x5; dest:x31; op1val:0xfff80020;  op2val:0x7ffffffb
TEST_RR_OP(smdrs, x31, x4, x5, 0x00000000, 0xfff80020, 0x7ffffffb, x22, 32, x23)

inst_9:
// rs1==x0, rs2==x17, rd==x16, rs2_h1_val == -16385, rs1_h0_val == 2048
// opcode: smdrs ; op1:x0; op2:x17; dest:x16; op1val:0xfff60800;  op2val:0xbfffc000
TEST_RR_OP(smdrs, x16, x0, x17, 0x00000000, 0xfff60800, 0xbfffc000, x22, 36, x23)

inst_10:
// rs1==x21, rs2==x16, rd==x0, rs2_h1_val == -8193, rs1_h1_val == -32768
// opcode: smdrs ; op1:x21; op2:x16; dest:x0; op1val:0x80000040;  op2val:0xdffffffc
TEST_RR_OP(smdrs, x0, x21, x16, 0x00000000, 0x80000040, 0xdffffffc, x22, 40, x23)

inst_11:
// rs1==x1, rs2==x24, rd==x9, rs2_h1_val == -4097, rs1_h1_val == -16385, rs1_h0_val == -2049
// opcode: smdrs ; op1:x1; op2:x24; dest:x9; op1val:0xbffff7ff;  op2val:0xefffc000
TEST_RR_OP(smdrs, x9, x1, x24, 0x00000000, 0xbffff7ff, 0xefffc000, x22, 44, x23)

inst_12:
// rs1==x5, rs2==x14, rd==x11, rs2_h1_val == -513, rs1_h0_val == -16385
// opcode: smdrs ; op1:x5; op2:x14; dest:x11; op1val:0xdfffbfff;  op2val:0xfdfffffb
TEST_RR_OP(smdrs, x11, x5, x14, 0x00000000, 0xdfffbfff, 0xfdfffffb, x22, 48, x23)

inst_13:
// rs1==x13, rs2==x6, rd==x8, rs2_h1_val == -257, rs2_h0_val == 8
// opcode: smdrs ; op1:x13; op2:x6; dest:x8; op1val:0x3fff0003;  op2val:0xfeff0008
TEST_RR_OP(smdrs, x8, x13, x6, 0x00000000, 0x3fff0003, 0xfeff0008, x22, 52, x23)

inst_14:
// rs1==x2, rs2==x8, rd==x3, rs2_h1_val == -129, rs1_h0_val == -1025, rs2_h0_val == -17
// opcode: smdrs ; op1:x2; op2:x8; dest:x3; op1val:0xdffffbff;  op2val:0xff7fffef
TEST_RR_OP(smdrs, x3, x2, x8, 0x00000000, 0xdffffbff, 0xff7fffef, x22, 56, x23)

inst_15:
// rs1==x30, rs2==x4, rd==x18, rs2_h1_val == -65, rs1_h0_val == 16384
// opcode: smdrs ; op1:x30; op2:x4; dest:x18; op1val:0xfff64000;  op2val:0xffbf0005
TEST_RR_OP(smdrs, x18, x30, x4, 0x00000000, 0xfff64000, 0xffbf0005, x22, 60, x23)

inst_16:
// rs1==x16, rs2==x2, rd==x30, rs2_h1_val == -33, rs1_h1_val == 64, rs2_h0_val == -513, rs1_h0_val == 256
// opcode: smdrs ; op1:x16; op2:x2; dest:x30; op1val:0x400100;  op2val:0xffdffdff
TEST_RR_OP(smdrs, x30, x16, x2, 0x00000000, 0x400100, 0xffdffdff, x22, 64, x23)

inst_17:
// rs1==x28, rs2==x26, rd==x17, rs2_h1_val == -17, rs2_h0_val == 16384, rs1_h1_val == -513
// opcode: smdrs ; op1:x28; op2:x26; dest:x17; op1val:0xfdfffeff;  op2val:0xffef4000
TEST_RR_OP(smdrs, x17, x28, x26, 0x00000000, 0xfdfffeff, 0xffef4000, x22, 68, x23)

inst_18:
// rs1==x23, rs2==x7, rd==x2, rs2_h1_val == -9, rs2_h0_val == 2
// opcode: smdrs ; op1:x23; op2:x7; dest:x2; op1val:0xfff84000;  op2val:0xfff70002
TEST_RR_OP(smdrs, x2, x23, x7, 0x00000000, 0xfff84000, 0xfff70002, x22, 72, x10)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_19:
// rs1==x15, rs2==x3, rd==x13, rs2_h1_val == -5, rs1_h1_val == -4097, rs1_h0_val == -129, rs2_h0_val == -2049
// opcode: smdrs ; op1:x15; op2:x3; dest:x13; op1val:0xefffff7f;  op2val:0xfffbf7ff
TEST_RR_OP(smdrs, x13, x15, x3, 0x00000000, 0xefffff7f, 0xfffbf7ff, x2, 0, x10)

inst_20:
// rs1==x22, rs2==x28, rd==x19, rs2_h1_val == -3, rs1_h1_val == 16384, rs1_h0_val == -21846
// opcode: smdrs ; op1:x22; op2:x28; dest:x19; op1val:0x4000aaaa;  op2val:0xfffdffef
TEST_RR_OP(smdrs, x19, x22, x28, 0x00000000, 0x4000aaaa, 0xfffdffef, x2, 4, x10)

inst_21:
// rs1==x25, rs2==x0, rd==x22, rs2_h1_val == -2, rs1_h1_val == 8, rs2_h0_val == 128
// opcode: smdrs ; op1:x25; op2:x0; dest:x22; op1val:0x08feff;  op2val:0xfffe0080
TEST_RR_OP(smdrs, x22, x25, x0, 0x00000000, 0x08feff, 0xfffe0080, x2, 8, x10)

inst_22:
// rs1==x9, rs2==x1, rd==x29, rs2_h1_val == -32768, rs1_h0_val == 21845, rs1_h1_val == 128
// opcode: smdrs ; op1:x9; op2:x1; dest:x29; op1val:0x805555;  op2val:0x80000008
TEST_RR_OP(smdrs, x29, x9, x1, 0x00000000, 0x805555, 0x80000008, x2, 12, x10)

inst_23:
// rs1==x6, rs2==x30, rd==x21, rs2_h1_val == 16384, rs2_h0_val == -21846, rs1_h0_val == 4
// opcode: smdrs ; op1:x6; op2:x30; dest:x21; op1val:0x2000004;  op2val:0x4000aaaa
TEST_RR_OP(smdrs, x21, x6, x30, 0x00000000, 0x2000004, 0x4000aaaa, x2, 16, x10)

inst_24:
// rs1==x19, rs2==x21, rd==x27, rs2_h1_val == 8192, rs2_h0_val == -1025, rs1_h1_val == 21845
// opcode: smdrs ; op1:x19; op2:x21; dest:x27; op1val:0x55554000;  op2val:0x2000fbff
TEST_RR_OP(smdrs, x27, x19, x21, 0x00000000, 0x55554000, 0x2000fbff, x2, 20, x10)

inst_25:
// rs1==x3, rs2==x27, rd==x23, rs2_h1_val == 4096, rs1_h0_val == 0
// opcode: smdrs ; op1:x3; op2:x27; dest:x23; op1val:0xfdff0000;  op2val:0x10000080
TEST_RR_OP(smdrs, x23, x3, x27, 0x00000000, 0xfdff0000, 0x10000080, x2, 24, x10)

inst_26:
// rs1==x8, rs2==x29, rd==x5, rs2_h1_val == 2048, rs2_h0_val == 256, rs1_h1_val == -5, rs1_h0_val == 4096
// opcode: smdrs ; op1:x8; op2:x29; dest:x5; op1val:0xfffb1000;  op2val:0x8000100
TEST_RR_OP(smdrs, x5, x8, x29, 0x00000000, 0xfffb1000, 0x8000100, x2, 28, x10)

inst_27:
// rs1==x7, rs2==x25, rd==x4, rs2_h1_val == 1024, rs1_h0_val == -9, rs1_h1_val == 0
// opcode: smdrs ; op1:x7; op2:x25; dest:x4; op1val:0x00fff7;  op2val:0x4000006
TEST_RR_OP(smdrs, x4, x7, x25, 0x00000000, 0x00fff7, 0x4000006, x2, 32, x10)

inst_28:
// rs1==x27, rs2==x23, rd==x26, rs2_h1_val == 256, 
// opcode: smdrs ; op1:x27; op2:x23; dest:x26; op1val:0xfff60800;  op2val:0x1003fff
TEST_RR_OP(smdrs, x26, x27, x23, 0x00000000, 0xfff60800, 0x1003fff, x2, 36, x10)

inst_29:
// rs1==x31, rs2==x13, rd==x12, rs1_h0_val == -513, rs1_h1_val == 32767
// opcode: smdrs ; op1:x31; op2:x13; dest:x12; op1val:0x7ffffdff;  op2val:0xf7ff0005
TEST_RR_OP(smdrs, x12, x31, x13, 0x00000000, 0x7ffffdff, 0xf7ff0005, x2, 40, x10)

inst_30:
// rs1==x12, rs2==x31, rd==x28, rs1_h0_val == -65, rs2_h0_val == -1, rs1_h1_val == 2
// opcode: smdrs ; op1:x12; op2:x31; dest:x28; op1val:0x02ffbf;  op2val:0x8000ffff
TEST_RR_OP(smdrs, x28, x12, x31, 0x00000000, 0x02ffbf, 0x8000ffff, x2, 44, x10)

inst_31:
// rs1==x29, rs2==x22, rd==x25, rs1_h0_val == -33, rs2_h0_val == -2
// opcode: smdrs ; op1:x29; op2:x22; dest:x25; op1val:0xfff9ffdf;  op2val:0x2000fffe
TEST_RR_OP(smdrs, x25, x29, x22, 0x00000000, 0xfff9ffdf, 0x2000fffe, x2, 48, x10)

inst_32:
// rs1_h0_val == -17, rs2_h0_val == 512
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x03ffef;  op2val:0xefff0200
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x03ffef, 0xefff0200, x2, 52, x10)

inst_33:
// rs1_h0_val == -5, rs2_h0_val == 8192, rs1_h1_val == -257
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffb;  op2val:0xfff62000
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfefffffb, 0xfff62000, x2, 56, x10)

inst_34:
// rs1_h0_val == -3, rs1_h1_val == 8192, rs2_h0_val == -9
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd;  op2val:0x1000fff7
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x2000fffd, 0x1000fff7, x2, 60, x10)

inst_35:
// rs1_h0_val == -2, rs2_h0_val == 1024
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe;  op2val:0xc0000400
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x07fffe, 0xc0000400, x2, 64, x10)

inst_36:
// rs1_h0_val == 8192, rs2_h1_val == 2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff82000;  op2val:0x02fffa
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfff82000, 0x02fffa, x2, 68, x10)

inst_37:
// rs1_h0_val == 1024, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400;  op2val:0x07fffd
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xbfff0400, 0x07fffd, x2, 72, x10)

inst_38:
// rs1_h0_val == 128, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff60080;  op2val:0xf7ff0020
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfff60080, 0xf7ff0020, x2, 76, x10)

inst_39:
// rs1_h0_val == 8, rs1_h1_val == -2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0xfbff0800
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfffe0008, 0xfbff0800, x2, 80, x10)

inst_40:
// rs1_h0_val == 2, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002;  op2val:0x8000f7ff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xaaaa0002, 0x8000f7ff, x2, 84, x10)

inst_41:
// rs1_h0_val == 1, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x40000001;  op2val:0xaaaa0040
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x40000001, 0xaaaa0040, x2, 88, x10)

inst_42:
// rs1_h0_val == -1, rs2_h0_val == 4
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x08ffff;  op2val:0x20000004
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x08ffff, 0x20000004, x2, 92, x10)

inst_43:
// rs2_h1_val == 128, rs1_h1_val == -1025
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffa;  op2val:0x80ffbf
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfbfffffa, 0x80ffbf, x2, 96, x10)

inst_44:
// rs2_h1_val == 64, rs1_h1_val == -17, rs2_h0_val == 0
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffef0006;  op2val:0x400000
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xffef0006, 0x400000, x2, 100, x10)

inst_45:
// rs2_h0_val == -32768, rs1_h1_val == -9
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff75555;  op2val:0xbfff8000
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfff75555, 0xbfff8000, x2, 104, x10)

inst_46:
// rs2_h0_val == 4096, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x020800;  op2val:0xfff71000
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x020800, 0xfff71000, x2, 108, x10)

inst_47:
// rs2_h0_val == 1, rs1_h1_val == -2049, rs2_h1_val == 1
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffa;  op2val:0x010001
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xf7fffffa, 0x010001, x2, 112, x10)

inst_48:
// rs2_h0_val == -129, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x03fff7;  op2val:0x09ff7f
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x03fff7, 0x09ff7f, x2, 116, x10)

inst_49:
// rs1_h1_val == -65, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa;  op2val:0xfffd1000
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xffbfaaaa, 0xfffd1000, x2, 120, x10)

inst_50:
// rs1_h1_val == -33, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb;  op2val:0xfff80009
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xffdffffb, 0xfff80009, x2, 124, x10)

inst_51:
// rs1_h1_val == -3, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0001;  op2val:0x200ff7f
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfffd0001, 0x200ff7f, x2, 128, x10)

inst_52:
// rs2_h1_val == 32, rs1_h1_val == 2048
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x8000009;  op2val:0x200040
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x8000009, 0x200040, x2, 132, x10)

inst_53:
// rs2_h1_val == 16, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x03feff;  op2val:0x10feff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x03feff, 0x10feff, x2, 136, x10)

inst_54:
// rs1_h1_val == 4096, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x10000002;  op2val:0x20000009
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x10000002, 0x20000009, x2, 140, x10)

inst_55:
// rs2_h1_val == 8, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0020;  op2val:0x08feff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x3fff0020, 0x08feff, x2, 144, x10)

inst_56:
// rs2_h1_val == 4, rs1_h0_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x007fff;  op2val:0x040002
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x007fff, 0x040002, x2, 148, x10)

inst_57:
// rs1_h1_val == 1024, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x400efff;  op2val:0xdffffffa
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x400efff, 0xdffffffa, x2, 152, x10)

inst_58:
// rs2_h1_val == -1, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x09ffff;  op2val:0xffff0009
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x09ffff, 0xffff0009, x2, 156, x10)

inst_59:
// rs2_h0_val == 21845, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff80009;  op2val:0x80005555
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfff80009, 0x80005555, x2, 160, x10)

inst_60:
// rs1_h1_val == 16, rs2_h0_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x100003;  op2val:0x407fff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x100003, 0x407fff, x2, 164, x10)

inst_61:
// rs2_h0_val == -16385, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x40fff9;  op2val:0xfffdbfff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x40fff9, 0xfffdbfff, x2, 168, x10)

inst_62:
// rs2_h0_val == -33, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xefff8000;  op2val:0xaaaaffdf
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xefff8000, 0xaaaaffdf, x2, 172, x10)

inst_63:
// rs1_h1_val == 4, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdf;  op2val:0xaaaafff9
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x04ffdf, 0xaaaafff9, x2, 176, x10)

inst_64:
// rs1_h1_val == -1, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc;  op2val:0x100fff7
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0xfffffffc, 0x100fff7, x2, 180, x10)

inst_65:
// rs2_h0_val == -8193, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x100ffff;  op2val:0xfdffdfff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x100ffff, 0xfdffdfff, x2, 184, x10)

inst_66:
// rs1_h0_val == -8193, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff;  op2val:0xffdfefff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x80dfff, 0xffdfefff, x2, 188, x10)

inst_67:
// rs1_h1_val == 1, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x013fff;  op2val:0x05ffdf
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x013fff, 0x05ffdf, x2, 192, x10)

inst_68:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h0_val == -257, rs2_h1_val == -2049
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x200003;  op2val:0xf7fffeff
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x200003, 0xf7fffeff, x2, 196, x10)

inst_69:
// rs2_h1_val == -8193, rs1_h1_val == -32768
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x80000040;  op2val:0xdffffffc
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x80000040, 0xdffffffc, x2, 200, x10)

inst_70:
// rs2_h1_val == -2, rs1_h1_val == 8, rs2_h0_val == 128
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x08feff;  op2val:0xfffe0080
TEST_RR_OP(smdrs, x31, x30, x29, 0x00000000, 0x08feff, 0xfffe0080, x2, 204, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x22_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x22_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 52*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
