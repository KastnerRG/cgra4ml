
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalbb instruction of the RISC-V RV32PZicsr extension for the smalbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x8, rd==x22, rs1_h0_val == -32768, rs2_h1_val == 16384, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -1, rs1_h1_val == 4
// opcode: smalbb ; op1:x10; op2:x8; dest:x22; op1val:0x00048000;  op2val:0x4000ffff
TEST_P64_PNN_OP(smalbb, x22, x23, x10, x8, 0x00000000, 0, 0x00048000, 0x4000ffff, x1, 0, x15)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x2, rs1_h1_val == rs2_h1_val, rs2_h1_val == 8192, rs2_h0_val == -257, rs1_h1_val == 8192, rs1_h0_val == 0
// opcode: smalbb ; op1:x3; op2:x3; dest:x2; op1val:0x20000000;  op2val:0x2000feff
TEST_P64_PNN_OP(smalbb, x2, x3, x3, x3, 0x00000000, 0, 0x20000000, 0x2000feff, x1, 8, x15)

inst_2:
// rs1 == rd != rs2, rs1==x14, rs2==x7, rd==x14, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -16385, rs1_h0_val == -33, rs2_h1_val == 1
// opcode: smalbb ; op1:x14; op2:x7; dest:x14; op1val:0xfff6ffdf;  op2val:0x0001bfff
TEST_P64_PNN_OP(smalbb, x14, x15, x14, x7, 0x00000000, 0, 0xfff6ffdf, 0x0001bfff, x1, 16, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -3, rs2_h0_val == 16384
// opcode: smalbb ; op1:x16; op2:x16; dest:x16; op1val:0xfffa0005;  op2val:0xfffd4000
TEST_P64_PNN_OP(smalbb, x16, x17, x16, x16, 0x00000000, 0, 0xfffa0005, 0xfffd4000, x1, 24, x15)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x24, rd==x24, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -4097, rs1_h0_val == 8, rs1_h1_val == 128
// opcode: smalbb ; op1:x29; op2:x24; dest:x24; op1val:0x00800008;  op2val:0xefff0009
TEST_P64_PNN_OP(smalbb, x24, x25, x29, x24, 0x00000000, 0, 0x00800008, 0xefff0009, x1, 32, x15)

inst_5:
// rs1==x24, rs2==x6, rd==x30, rs1_h0_val == rs2_h0_val, rs2_h1_val == 4, rs2_h0_val == -33
// opcode: smalbb ; op1:x24; op2:x6; dest:x30; op1val:0xfff6ffdf;  op2val:0x0004ffdf
TEST_P64_PNN_OP(smalbb, x30, x31, x24, x6, 0x00000000, 0, 0xfff6ffdf, 0x0004ffdf, x1, 40, x15)

inst_6:
// rs1==x27, rs2==x11, rd==x10, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 128, rs1_h1_val == -129
// opcode: smalbb ; op1:x27; op2:x11; dest:x10; op1val:0xff7ffff6;  op2val:0xfffc0080
TEST_P64_PNN_OP(smalbb, x10, x11, x27, x11, 0x00000000, 0, 0xff7ffff6, 0xfffc0080, x1, 48, x15)

inst_7:
// rs1==x23, rs2==x9, rd==x20, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -1025, rs1_h0_val == 21845, rs2_h1_val == 32767
// opcode: smalbb ; op1:x23; op2:x9; dest:x20; op1val:0xfffa5555;  op2val:0x7ffffbff
TEST_P64_PNN_OP(smalbb, x20, x21, x23, x9, 0x00000000, 0, 0xfffa5555, 0x7ffffbff, x1, 56, x15)

inst_8:
// rs1==x26, rs2==x21, rd==x4, rs2_h1_val == -21846, rs1_h1_val == -1, rs1_h0_val == -8193
// opcode: smalbb ; op1:x26; op2:x21; dest:x4; op1val:0xffffdfff;  op2val:0xaaaafbff
TEST_P64_PNN_OP(smalbb, x4, x5, x26, x21, 0x00000000, 0, 0xffffdfff, 0xaaaafbff, x1, 64, x15)

inst_9:
// rs1==x22, rs2==x29, rd==x6, rs2_h1_val == 21845, rs1_h0_val == 32767, rs1_h1_val == -2049, rs2_h0_val == -9
// opcode: smalbb ; op1:x22; op2:x29; dest:x6; op1val:0xf7ff7fff;  op2val:0x5555fff7
TEST_P64_PNN_OP(smalbb, x6, x7, x22, x29, 0x00000000, 0, 0xf7ff7fff, 0x5555fff7, x1, 72, x15)

inst_10:
// rs1==x2, rs2==x19, rd==x26, rs2_h1_val == -16385, rs1_h0_val == -17, rs1_h1_val == 256
// opcode: smalbb ; op1:x2; op2:x19; dest:x26; op1val:0x0100ffef;  op2val:0xbfff4000
TEST_P64_PNN_OP(smalbb, x26, x27, x2, x19, 0x00000000, 0, 0x0100ffef, 0xbfff4000, x1, 80, x15)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_11:
// rs1==x30, rs2==x10, rd==x18, rs2_h1_val == -8193, rs1_h1_val == 64, rs2_h0_val == -2049
// opcode: smalbb ; op1:x30; op2:x10; dest:x18; op1val:0x0040dfff;  op2val:0xdffff7ff
TEST_P64_PNN_OP(smalbb, x18, x19, x30, x10, 0x00000000, 0, 0x0040dfff, 0xdffff7ff, x2, 0, x15)

inst_12:
// rs1==x0, rs2==x14, rd==x12, rs2_h1_val == -2049, rs2_h0_val == 2, rs1_h1_val == 4096
// opcode: smalbb ; op1:x0; op2:x14; dest:x12; op1val:0x1000fff8;  op2val:0xf7ff0002
TEST_P64_PNN_OP(smalbb, x12, x13, x0, x14, 0x00000000, 0, 0x1000fff8, 0xf7ff0002, x2, 8, x15)

inst_13:
// rs1==x6, rs2==x22, rd==x28, rs2_h1_val == -1025, rs1_h1_val == -21846, rs1_h0_val == -9
// opcode: smalbb ; op1:x6; op2:x22; dest:x28; op1val:0xaaaafff7;  op2val:0xfbfffff6
TEST_P64_PNN_OP(smalbb, x28, x29, x6, x22, 0x00000000, 0, 0xaaaafff7, 0xfbfffff6, x2, 16, x3)

inst_14:
// rs1==x9, rs2==x27, rd==x8, rs2_h1_val == -513, rs1_h1_val == 16384, rs2_h0_val == -3, rs1_h0_val == 4
// opcode: smalbb ; op1:x9; op2:x27; dest:x8; op1val:0x40000004;  op2val:0xfdfffffd
TEST_P64_PNN_OP(smalbb, x8, x9, x9, x27, 0x00000000, 0, 0x40000004, 0xfdfffffd, x2, 24, x3)

inst_15:
// rs1==x11, rs2==x1, rs2_h1_val == -257, rs1_h1_val == 2048
// opcode: smalbb ; op1:x11; op2:x1; dest:x20; op1val:0x08008000;  op2val:0xfefffff6
TEST_P64_PNN_OP(smalbb, x20, x21, x11, x1, 0x00000000, 0, 0x08008000, 0xfefffff6, x2, 32, x3)

inst_16:
// rs1==x5, rs2==x17, rs2_h1_val == -129, rs2_h0_val == 4
// opcode: smalbb ; op1:x5; op2:x17; dest:x28; op1val:0x10007fff;  op2val:0xff7f0004
TEST_P64_PNN_OP(smalbb, x28, x29, x5, x17, 0x00000000, 0, 0x10007fff, 0xff7f0004, x2, 40, x3)

inst_17:
// rs1==x13, rs2==x15, rs2_h1_val == -65, rs2_h0_val == -65, rs1_h0_val == 16
// opcode: smalbb ; op1:x13; op2:x15; dest:x20; op1val:0x00040010;  op2val:0xffbfffbf
TEST_P64_PNN_OP(smalbb, x20, x21, x13, x15, 0x00000000, 0, 0x00040010, 0xffbfffbf, x2, 48, x3)

inst_18:
// rs1==x17, rs2==x31, rs2_h1_val == -33, rs1_h0_val == -257
// opcode: smalbb ; op1:x17; op2:x31; dest:x28; op1val:0xfffcfeff;  op2val:0xffdf0004
TEST_P64_PNN_OP(smalbb, x28, x29, x17, x31, 0x00000000, 0, 0xfffcfeff, 0xffdf0004, x2, 56, x3)

inst_19:
// rs1==x8, rs2==x4, rs2_h1_val == -17, rs1_h0_val == -1025, rs2_h0_val == -32768
// opcode: smalbb ; op1:x8; op2:x4; dest:x18; op1val:0xc000fbff;  op2val:0xffef8000
TEST_P64_PNN_OP(smalbb, x18, x19, x8, x4, 0x00000000, 0, 0xc000fbff, 0xffef8000, x2, 64, x3)

inst_20:
// rs1==x4, rs2==x12, rs2_h1_val == -9, 
// opcode: smalbb ; op1:x4; op2:x12; dest:x10; op1val:0xc000fffa;  op2val:0xfff7f7ff
TEST_P64_PNN_OP(smalbb, x10, x11, x4, x12, 0x00000000, 0, 0xc000fffa, 0xfff7f7ff, x2, 72, x3)

inst_21:
// rs1==x25, rs2==x20, rs2_h1_val == -5, rs1_h0_val == 256
// opcode: smalbb ; op1:x25; op2:x20; dest:x10; op1val:0x00090100;  op2val:0xfffbfffd
TEST_P64_PNN_OP(smalbb, x10, x11, x25, x20, 0x00000000, 0, 0x00090100, 0xfffbfffd, x2, 80, x3)

inst_22:
// rs1==x31, rs2==x13, rs2_h1_val == -2, 
// opcode: smalbb ; op1:x31; op2:x13; dest:x26; op1val:0x00060006;  op2val:0xfffe0080
TEST_P64_PNN_OP(smalbb, x26, x27, x31, x13, 0x00000000, 0, 0x00060006, 0xfffe0080, x2, 88, x3)

inst_23:
// rs1==x1, rs2==x23, rs2_h1_val == -32768, rs2_h0_val == 512, rs1_h1_val == 21845
// opcode: smalbb ; op1:x1; op2:x23; dest:x28; op1val:0x55558000;  op2val:0x80000200
TEST_P64_PNN_OP(smalbb, x28, x29, x1, x23, 0x00000000, 0, 0x55558000, 0x80000200, x2, 96, x3)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_24:
// rs1==x18, rs2==x28, rs2_h1_val == 4096, rs1_h1_val == -65, rs2_h0_val == 256, rs1_h0_val == -129
// opcode: smalbb ; op1:x18; op2:x28; dest:x2; op1val:0xffbfff7f;  op2val:0x10000100
TEST_P64_PNN_OP(smalbb, x2, x3, x18, x28, 0x00000000, 0, 0xffbfff7f, 0x10000100, x1, 0, x3)

inst_25:
// rs1==x28, rs2==x2, rs2_h1_val == 2048, 
// opcode: smalbb ; op1:x28; op2:x2; dest:x26; op1val:0xfffc0006;  op2val:0x08004000
TEST_P64_PNN_OP(smalbb, x26, x27, x28, x2, 0x00000000, 0, 0xfffc0006, 0x08004000, x1, 8, x3)

inst_26:
// rs1==x15, rs2==x30, rs2_h1_val == 1024, rs1_h1_val == -16385, rs1_h0_val == 2048
// opcode: smalbb ; op1:x15; op2:x30; dest:x20; op1val:0xbfff0800;  op2val:0x04000007
TEST_P64_PNN_OP(smalbb, x20, x21, x15, x30, 0x00000000, 0, 0xbfff0800, 0x04000007, x1, 16, x3)

inst_27:
// rs1==x21, rs2==x5, rs2_h1_val == 512, rs1_h1_val == 32, rs2_h0_val == 2048
// opcode: smalbb ; op1:x21; op2:x5; dest:x28; op1val:0x00200100;  op2val:0x02000800
TEST_P64_PNN_OP(smalbb, x28, x29, x21, x5, 0x00000000, 0, 0x00200100, 0x02000800, x1, 24, x2)

inst_28:
// rs1==x20, rs2==x25, rs2_h1_val == 256, rs1_h0_val == 1, rs2_h0_val == 32, rs1_h1_val == -32768
// opcode: smalbb ; op1:x20; op2:x25; dest:x30; op1val:0x80000001;  op2val:0x01000020
TEST_P64_PNN_OP(smalbb, x30, x31, x20, x25, 0x00000000, 0, 0x80000001, 0x01000020, x1, 32, x2)

inst_29:
// rs1==x7, rs2==x0, rs2_h1_val == 128, 
// opcode: smalbb ; op1:x7; op2:x0; dest:x14; op1val:0x0100dfff;  op2val:0x0080ffbf
TEST_P64_PNN_OP(smalbb, x14, x15, x7, x0, 0x00000000, 0, 0x0100dfff, 0x0080ffbf, x1, 40, x2)

inst_30:
// rs1==x12, rs2==x18, rs1_h0_val == -513, 
// opcode: smalbb ; op1:x12; op2:x18; dest:x24; op1val:0x0800fdff;  op2val:0xfff80020
TEST_P64_PNN_OP(smalbb, x24, x25, x12, x18, 0x00000000, 0, 0x0800fdff, 0xfff80020, x1, 48, x2)

inst_31:
// rs1==x19, rs2==x26, rs1_h0_val == -65, rs2_h0_val == 64
// opcode: smalbb ; op1:x19; op2:x26; dest:x6; op1val:0xfffcffbf;  op2val:0xffbf0040
TEST_P64_PNN_OP(smalbb, x6, x7, x19, x26, 0x00000000, 0, 0xfffcffbf, 0xffbf0040, x1, 56, x2)

inst_32:
// rs1_h0_val == -5, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x4000fffb;  op2val:0x00050040
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x4000fffb, 0x00050040, x1, 64, x2)

inst_33:
// rs1_h0_val == -3, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0007fffd;  op2val:0xfffd0020
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0007fffd, 0xfffd0020, x1, 72, x2)

inst_34:
// rs1_h0_val == -2, rs2_h1_val == 32
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0009fffe;  op2val:0x00200005
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0009fffe, 0x00200005, x1, 80, x2)

inst_35:
// rs1_h0_val == 16384, rs2_h0_val == 32767, rs2_h1_val == 0
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xbfff4000;  op2val:0x00007fff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xbfff4000, 0x00007fff, x1, 88, x2)

inst_36:
// rs1_h0_val == 8192, rs2_h0_val == 1024, rs1_h1_val == 512
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x02002000;  op2val:0xaaaa0400
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x02002000, 0xaaaa0400, x1, 96, x2)

inst_37:
// rs1_h0_val == 4096, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x01001000;  op2val:0xfffcffdf
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x01001000, 0xfffcffdf, x1, 104, x2)

inst_38:
// rs1_h0_val == 1024, rs1_h1_val == -9
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfff70400;  op2val:0x0400c000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfff70400, 0x0400c000, x1, 112, x2)

inst_39:
// rs1_h0_val == 512, rs2_h0_val == -17
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfff90200;  op2val:0xbfffffef
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfff90200, 0xbfffffef, x1, 120, x2)

inst_40:
// rs1_h0_val == 128, rs1_h1_val == 0, rs2_h0_val == 8
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00000080;  op2val:0xefff0008
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00000080, 0xefff0008, x1, 128, x2)

inst_41:
// rs1_h0_val == 64, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x10000040;  op2val:0x01000400
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x10000040, 0x01000400, x1, 136, x2)

inst_42:
// rs1_h0_val == 32, rs2_h0_val == 4096
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00040020;  op2val:0x00031000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00040020, 0x00031000, x1, 144, x2)

inst_43:
// rs1_h0_val == 2, rs1_h1_val == 8
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00080002;  op2val:0xaaaafffd
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00080002, 0xaaaafffd, x1, 152, x2)

inst_44:
// rs1_h0_val == -1, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfffaffff;  op2val:0xfff60007
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfffaffff, 0xfff60007, x1, 160, x2)

inst_45:
// rs2_h1_val == 64, rs2_h0_val == -8193
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfffafffa;  op2val:0x0040dfff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfffafffa, 0x0040dfff, x1, 168, x2)

inst_46:
// rs2_h1_val == 16, rs1_h1_val == 1024
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0400fbff;  op2val:0x00100080
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0400fbff, 0x00100080, x1, 176, x2)

inst_47:
// rs2_h1_val == 8, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfff70400;  op2val:0x00080040
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfff70400, 0x00080040, x1, 184, x2)

inst_48:
// rs2_h0_val == -5, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0006;  op2val:0xaaaafffb
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0006, 0xaaaafffb, x1, 192, x2)

inst_49:
// rs2_h0_val == -2, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0005ffdf;  op2val:0xfffdfffe
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0005ffdf, 0xfffdfffe, x1, 200, x2)

inst_50:
// rs2_h0_val == 8192, rs1_h1_val == -1025
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfbffff7f;  op2val:0xfffc2000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfbffff7f, 0xfffc2000, x1, 208, x2)

inst_51:
// rs2_h0_val == 16, rs1_h1_val == -513
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfdff5555;  op2val:0x02000010
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfdff5555, 0x02000010, x1, 216, x2)

inst_52:
// rs2_h0_val == 1, rs1_h1_val == 32767
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x7fff4000;  op2val:0xfff70001
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x7fff4000, 0xfff70001, x1, 224, x2)

inst_53:
// rs2_h0_val == 0, rs1_h1_val == -4097
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xefff0003;  op2val:0x00800000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xefff0003, 0x00800000, x1, 232, x2)

inst_54:
// rs1_h1_val == -8193, rs2_h0_val == -4097
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xdffffff7;  op2val:0x5555efff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xdffffff7, 0x5555efff, x1, 240, x2)

inst_55:
// rs1_h1_val == -257, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfeffffff;  op2val:0x00050000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfeffffff, 0x00050000, x1, 248, x2)

inst_56:
// rs1_h1_val == -33, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xffdffffe;  op2val:0xfffa0005
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xffdffffe, 0xfffa0005, x1, 256, x2)

inst_57:
// rs2_h0_val == -513, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfbff0005;  op2val:0xfffbfdff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfbff0005, 0xfffbfdff, x1, 264, x2)

inst_58:
// rs1_h1_val == -17, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xffeffeff;  op2val:0xaaaaffef
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xffeffeff, 0xaaaaffef, x1, 272, x2)

inst_59:
// rs1_h1_val == -5, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfffbfffe;  op2val:0x00060010
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfffbfffe, 0x00060010, x1, 280, x2)

inst_60:
// rs1_h1_val == -3, rs1_h0_val == -21846
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfffdaaaa;  op2val:0xfffcfbff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfffdaaaa, 0xfffcfbff, x1, 288, x2)

inst_61:
// rs1_h1_val == -2, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfffe8000;  op2val:0xfffc0008
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfffe8000, 0xfffc0008, x1, 296, x2)

inst_62:
// rs2_h1_val == 2, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xffdf7fff;  op2val:0x00028000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xffdf7fff, 0x00028000, x1, 304, x2)

inst_63:
// rs2_h1_val == -1, rs2_h0_val == 21845
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00050002;  op2val:0xffff5555
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00050002, 0xffff5555, x1, 312, x2)

inst_64:
// rs2_h0_val == -21846, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfdff7fff;  op2val:0x0006aaaa
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfdff7fff, 0x0006aaaa, x1, 320, x2)

inst_65:
// rs1_h1_val == 16, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0010dfff;  op2val:0xfffcfffb
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0010dfff, 0xfffcfffb, x1, 328, x2)

inst_66:
// rs1_h1_val == 2, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00020800;  op2val:0x55550000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00020800, 0x55550000, x1, 336, x2)

inst_67:
// rs1_h1_val == 1, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x00010009;  op2val:0xdfff0007
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x00010009, 0xdfff0007, x1, 344, x2)

inst_68:
// rs2_h0_val == -129, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0100;  op2val:0xfeffff7f
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0100, 0xfeffff7f, x1, 352, x2)

inst_69:
// rs1_h0_val == -16385, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x0002bfff;  op2val:0xfffb0200
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x0002bfff, 0xfffb0200, x1, 360, x2)

inst_70:
// rs1_h0_val == -4097, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xffffefff;  op2val:0x7fff4000
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xffffefff, 0x7fff4000, x1, 368, x2)

inst_71:
// rs1_h0_val == -2049, 
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0xbffff7ff;  op2val:0xfffe0400
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0xbffff7ff, 0xfffe0400, x1, 376, x2)

inst_72:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == 8192, rs2_h0_val == -257, rs1_h1_val == 8192, rs1_h0_val == 0
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x20000000;  op2val:0x2000feff
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x20000000, 0x2000feff, x1, 384, x2)

inst_73:
// rs2_h1_val == -2049, rs2_h0_val == 2, rs1_h1_val == 4096
// opcode: smalbb ; op1:x31; op2:x29; dest:x30; op1val:0x1000fff8;  op2val:0xf7ff0002
TEST_P64_PNN_OP(smalbb, x30, x31, x31, x29, 0x00000000, 0, 0x1000fff8, 0xf7ff0002, x1, 392, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
