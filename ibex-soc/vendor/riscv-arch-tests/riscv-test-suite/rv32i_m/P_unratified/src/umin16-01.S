
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umin16 instruction of the RISC-V RV32PZicsr extension for the umin16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umin16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x4, rd==x20, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65471
// opcode: umin16 ; op1:x18; op2:x4; dest:x20; op1val:0x120000;  op2val:0x05ffbf
TEST_RR_OP(umin16, x20, x18, x4, 0x00000000, 0x120000, 0x05ffbf, x5, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x19, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 43690, rs2_h0_val == 1, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: umin16 ; op1:x20; op2:x20; dest:x19; op1val:0x12aaaa;  op2val:0x120001
TEST_RR_OP(umin16, x19, x20, x20, 0x00000000, 0x12aaaa, 0x120001, x5, 4, x10)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x27, rd==x29, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65519, rs1_h1_val == 4, rs2_h0_val == 65519
// opcode: umin16 ; op1:x29; op2:x27; dest:x29; op1val:0x04ffef;  op2val:0x06ffef
TEST_RR_OP(umin16, x29, x29, x27, 0x00000000, 0x04ffef, 0x06ffef, x5, 8, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_h1_val == 43690, rs1_h1_val == 65519, rs1_h0_val == 65534, rs2_h0_val == 2048
// opcode: umin16 ; op1:x28; op2:x28; dest:x28; op1val:0xffeffffe;  op2val:0xaaaa0800
TEST_RR_OP(umin16, x28, x28, x28, 0x00000000, 0xffeffffe, 0xaaaa0800, x5, 12, x10)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x15, rd==x15, rs2_h1_val == 21845, rs2_h0_val == 65531, rs1_h1_val == 32768
// opcode: umin16 ; op1:x17; op2:x15; dest:x15; op1val:0x8000000f;  op2val:0x5555fffb
TEST_RR_OP(umin16, x15, x17, x15, 0x00000000, 0x8000000f, 0x5555fffb, x5, 16, x10)

inst_5:
// rs1==x21, rs2==x9, rd==x17, rs2_h1_val == 32767, rs1_h1_val == 1
// opcode: umin16 ; op1:x21; op2:x9; dest:x17; op1val:0x010007;  op2val:0x7fff0007
TEST_RR_OP(umin16, x17, x21, x9, 0x00000000, 0x010007, 0x7fff0007, x5, 20, x10)

inst_6:
// rs1==x13, rs2==x18, rd==x12, rs2_h1_val == 49151, rs1_h0_val == 65471, rs2_h0_val == 0, rs1_h1_val == 65023
// opcode: umin16 ; op1:x13; op2:x18; dest:x12; op1val:0xfdffffbf;  op2val:0xbfff0000
TEST_RR_OP(umin16, x12, x13, x18, 0x00000000, 0xfdffffbf, 0xbfff0000, x5, 24, x10)

inst_7:
// rs1==x23, rs2==x2, rd==x14, rs2_h1_val == 57343, rs1_h0_val == 65531
// opcode: umin16 ; op1:x23; op2:x2; dest:x14; op1val:0x0ffffb;  op2val:0xdfff0007
TEST_RR_OP(umin16, x14, x23, x2, 0x00000000, 0x0ffffb, 0xdfff0007, x5, 28, x10)

inst_8:
// rs1==x14, rs2==x17, rd==x8, rs2_h1_val == 61439, rs1_h1_val == 57343, rs1_h0_val == 1
// opcode: umin16 ; op1:x14; op2:x17; dest:x8; op1val:0xdfff0001;  op2val:0xefff0006
TEST_RR_OP(umin16, x8, x14, x17, 0x00000000, 0xdfff0001, 0xefff0006, x5, 32, x10)

inst_9:
// rs1==x3, rs2==x31, rd==x16, rs2_h1_val == 63487, rs2_h0_val == 65533, rs1_h0_val == 32767, rs1_h1_val == 64511
// opcode: umin16 ; op1:x3; op2:x31; dest:x16; op1val:0xfbff7fff;  op2val:0xf7fffffd
TEST_RR_OP(umin16, x16, x3, x31, 0x00000000, 0xfbff7fff, 0xf7fffffd, x5, 36, x10)

inst_10:
// rs1==x22, rs2==x1, rd==x26, rs2_h1_val == 64511, rs2_h0_val == 65407
// opcode: umin16 ; op1:x22; op2:x1; dest:x26; op1val:0x0a000b;  op2val:0xfbffff7f
TEST_RR_OP(umin16, x26, x22, x1, 0x00000000, 0x0a000b, 0xfbffff7f, x5, 40, x10)

inst_11:
// rs1==x12, rs2==x6, rd==x9, rs2_h1_val == 65023, rs1_h0_val == 32
// opcode: umin16 ; op1:x12; op2:x6; dest:x9; op1val:0x060020;  op2val:0xfdff000c
TEST_RR_OP(umin16, x9, x12, x6, 0x00000000, 0x060020, 0xfdff000c, x5, 44, x10)

inst_12:
// rs1==x7, rs2==x8, rd==x0, rs2_h1_val == 65279, rs1_h1_val == 61439, rs1_h0_val == 61439
// opcode: umin16 ; op1:x7; op2:x8; dest:x0; op1val:0xefffefff;  op2val:0xfeff0000
TEST_RR_OP(umin16, x0, x7, x8, 0x00000000, 0xefffefff, 0xfeff0000, x5, 48, x10)

inst_13:
// rs1==x25, rs2==x0, rd==x18, rs2_h1_val == 65407, 
// opcode: umin16 ; op1:x25; op2:x0; dest:x18; op1val:0x05ffbf;  op2val:0xff7f000f
TEST_RR_OP(umin16, x18, x25, x0, 0x00000000, 0x05ffbf, 0xff7f000f, x5, 52, x10)

inst_14:
// rs1==x6, rs2==x12, rd==x30, rs2_h1_val == 65471, rs1_h0_val == 32768
// opcode: umin16 ; op1:x6; op2:x12; dest:x30; op1val:0x098000;  op2val:0xffbf000d
TEST_RR_OP(umin16, x30, x6, x12, 0x00000000, 0x098000, 0xffbf000d, x5, 56, x17)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_15:
// rs1==x1, rs2==x14, rd==x6, rs2_h1_val == 65503, 
// opcode: umin16 ; op1:x1; op2:x14; dest:x6; op1val:0x13000a;  op2val:0xffdf000f
TEST_RR_OP(umin16, x6, x1, x14, 0x00000000, 0x13000a, 0xffdf000f, x12, 0, x17)

inst_16:
// rs1==x15, rs2==x10, rd==x25, rs2_h1_val == 65519, rs2_h0_val == 16, rs1_h1_val == 128
// opcode: umin16 ; op1:x15; op2:x10; dest:x25; op1val:0x80fffb;  op2val:0xffef0010
TEST_RR_OP(umin16, x25, x15, x10, 0x00000000, 0x80fffb, 0xffef0010, x12, 4, x17)

inst_17:
// rs1==x9, rs2==x21, rd==x27, rs2_h1_val == 65527, rs1_h1_val == 65503, rs2_h0_val == 32768, rs1_h0_val == 16384
// opcode: umin16 ; op1:x9; op2:x21; dest:x27; op1val:0xffdf4000;  op2val:0xfff78000
TEST_RR_OP(umin16, x27, x9, x21, 0x00000000, 0xffdf4000, 0xfff78000, x12, 8, x17)

inst_18:
// rs1==x24, rs2==x30, rd==x22, rs2_h1_val == 65531, 
// opcode: umin16 ; op1:x24; op2:x30; dest:x22; op1val:0x090009;  op2val:0xfffb0013
TEST_RR_OP(umin16, x22, x24, x30, 0x00000000, 0x090009, 0xfffb0013, x12, 12, x17)

inst_19:
// rs1==x4, rs2==x19, rd==x10, rs2_h1_val == 65533, 
// opcode: umin16 ; op1:x4; op2:x19; dest:x10; op1val:0x0c0001;  op2val:0xfffd0005
TEST_RR_OP(umin16, x10, x4, x19, 0x00000000, 0x0c0001, 0xfffd0005, x12, 16, x17)

inst_20:
// rs1==x16, rs2==x25, rd==x31, rs2_h1_val == 65534, rs1_h1_val == 49151, rs1_h0_val == 65535, rs2_h0_val == 16384
// opcode: umin16 ; op1:x16; op2:x25; dest:x31; op1val:0xbfffffff;  op2val:0xfffe4000
TEST_RR_OP(umin16, x31, x16, x25, 0x00000000, 0xbfffffff, 0xfffe4000, x12, 20, x17)

inst_21:
// rs1==x10, rs2==x16, rd==x4, rs2_h1_val == 32768, rs1_h0_val == 1024, rs1_h1_val == 4096
// opcode: umin16 ; op1:x10; op2:x16; dest:x4; op1val:0x10000400;  op2val:0x8000000a
TEST_RR_OP(umin16, x4, x10, x16, 0x00000000, 0x10000400, 0x8000000a, x12, 24, x17)

inst_22:
// rs1==x5, rs2==x11, rd==x2, rs2_h1_val == 16384, rs2_h0_val == 128
// opcode: umin16 ; op1:x5; op2:x11; dest:x2; op1val:0xfdff0012;  op2val:0x40000080
TEST_RR_OP(umin16, x2, x5, x11, 0x00000000, 0xfdff0012, 0x40000080, x12, 28, x17)

inst_23:
// rs1==x2, rs2==x24, rd==x3, rs2_h1_val == 8192, 
// opcode: umin16 ; op1:x2; op2:x24; dest:x3; op1val:0x040007;  op2val:0x20000013
TEST_RR_OP(umin16, x3, x2, x24, 0x00000000, 0x040007, 0x20000013, x12, 32, x17)

inst_24:
// rs1==x11, rs2==x7, rd==x23, rs2_h1_val == 4096, rs1_h0_val == 21845
// opcode: umin16 ; op1:x11; op2:x7; dest:x23; op1val:0x075555;  op2val:0x1000ff7f
TEST_RR_OP(umin16, x23, x11, x7, 0x00000000, 0x075555, 0x1000ff7f, x12, 36, x17)

inst_25:
// rs1==x26, rs2==x22, rd==x7, rs2_h1_val == 2048, rs1_h1_val == 1024, rs2_h0_val == 61439, rs1_h0_val == 65527
// opcode: umin16 ; op1:x26; op2:x22; dest:x7; op1val:0x400fff7;  op2val:0x800efff
TEST_RR_OP(umin16, x7, x26, x22, 0x00000000, 0x400fff7, 0x800efff, x12, 40, x17)

inst_26:
// rs1==x0, rs2==x29, rd==x5, rs2_h1_val == 1024, rs2_h0_val == 65503
// opcode: umin16 ; op1:x0; op2:x29; dest:x5; op1val:0x13ffff;  op2val:0x400ffdf
TEST_RR_OP(umin16, x5, x0, x29, 0x00000000, 0x13ffff, 0x400ffdf, x12, 44, x17)

inst_27:
// rs1==x30, rs2==x5, rd==x13, rs2_h1_val == 512, rs1_h0_val == 512
// opcode: umin16 ; op1:x30; op2:x5; dest:x13; op1val:0x120200;  op2val:0x2000007
TEST_RR_OP(umin16, x13, x30, x5, 0x00000000, 0x120200, 0x2000007, x12, 48, x17)

inst_28:
// rs1==x27, rs2==x23, rd==x24, rs2_h1_val == 256, rs2_h0_val == 21845
// opcode: umin16 ; op1:x27; op2:x23; dest:x24; op1val:0xfbff0013;  op2val:0x1005555
TEST_RR_OP(umin16, x24, x27, x23, 0x00000000, 0xfbff0013, 0x1005555, x12, 52, x17)

inst_29:
// rs1==x8, rs2==x13, rd==x1, rs2_h1_val == 128, 
// opcode: umin16 ; op1:x8; op2:x13; dest:x1; op1val:0xdfff0001;  op2val:0x800080
TEST_RR_OP(umin16, x1, x8, x13, 0x00000000, 0xdfff0001, 0x800080, x12, 56, x17)

inst_30:
// rs1==x31, rs2==x3, rd==x11, rs2_h1_val == 64, 
// opcode: umin16 ; op1:x31; op2:x3; dest:x11; op1val:0x04fff7;  op2val:0x400080
TEST_RR_OP(umin16, x11, x31, x3, 0x00000000, 0x04fff7, 0x400080, x12, 60, x1)

inst_31:
// rs1==x19, rs2==x26, rd==x21, rs2_h1_val == 32, 
// opcode: umin16 ; op1:x19; op2:x26; dest:x21; op1val:0x070007;  op2val:0x20000f
TEST_RR_OP(umin16, x21, x19, x26, 0x00000000, 0x070007, 0x20000f, x12, 64, x1)

inst_32:
// rs2_h1_val == 16, rs1_h1_val == 64, rs1_h0_val == 65503
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdf;  op2val:0x10ffdf
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x40ffdf, 0x10ffdf, x12, 68, x1)

inst_33:
// rs2_h1_val == 8, rs2_h0_val == 43690, rs1_h0_val == 57343
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x05dfff;  op2val:0x08aaaa
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x05dfff, 0x08aaaa, x12, 72, x1)

inst_34:
// rs2_h1_val == 4, rs1_h0_val == 256, rs2_h0_val == 32767, rs1_h1_val == 65407
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0100;  op2val:0x047fff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xff7f0100, 0x047fff, x12, 76, x1)

inst_35:
// rs1_h0_val == 65533, rs1_h1_val == 512
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffd;  op2val:0x0affbf
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x200fffd, 0x0affbf, x12, 80, x1)

inst_36:
// rs1_h0_val == 8192, rs1_h1_val == 16384
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40002000;  op2val:0x10fffd
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x40002000, 0x10fffd, x12, 84, x1)

inst_37:
// rs1_h0_val == 4096, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x10001000;  op2val:0xfffeff7f
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x10001000, 0xfffeff7f, x12, 88, x1)

inst_38:
// rs1_h0_val == 2048, rs1_h1_val == 65533
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0x0a0005
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfffd0800, 0x0a0005, x12, 92, x1)

inst_39:
// rs1_h0_val == 128, rs2_h0_val == 8192
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x070080;  op2val:0x102000
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x070080, 0x102000, x12, 96, x1)

inst_40:
// rs1_h0_val == 64, rs2_h0_val == 512
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x130040;  op2val:0xfbff0200
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x130040, 0xfbff0200, x12, 100, x1)

inst_41:
// rs1_h0_val == 16, rs2_h0_val == 32
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0010;  op2val:0x130020
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfffd0010, 0x130020, x12, 104, x1)

inst_42:
// rs1_h0_val == 8, rs1_h1_val == 21845
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550008;  op2val:0xfdffefff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x55550008, 0xfdffefff, x12, 108, x1)

inst_43:
// rs1_h0_val == 4, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0004;  op2val:0x0e0012
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0c0004, 0x0e0012, x12, 112, x1)

inst_44:
// rs1_h0_val == 2, rs2_h0_val == 8
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0002;  op2val:0xf7ff0008
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0d0002, 0xf7ff0008, x12, 116, x1)

inst_45:
// rs2_h1_val == 2, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000f;  op2val:0x02000c
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x05000f, 0x02000c, x12, 120, x1)

inst_46:
// rs2_h1_val == 1, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000c;  op2val:0x01ffdf
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0c000c, 0x01ffdf, x12, 124, x1)

inst_47:
// rs2_h1_val == 65535, rs1_h1_val == 65471
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0xffff000d
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xffbf0100, 0xffff000d, x12, 128, x1)

inst_48:
// rs2_h1_val == 0, rs2_h0_val == 63487
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdf;  op2val:0x00f7ff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x40ffdf, 0x00f7ff, x12, 132, x1)

inst_49:
// rs2_h0_val == 49151, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0x0bbfff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x041000, 0x0bbfff, x12, 136, x1)

inst_50:
// rs2_h0_val == 57343, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000f;  op2val:0xfff7dfff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x200000f, 0xfff7dfff, x12, 140, x1)

inst_51:
// rs2_h0_val == 64511, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e4000;  op2val:0x07fbff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0e4000, 0x07fbff, x12, 144, x1)

inst_52:
// rs2_h0_val == 65023, rs1_h1_val == 65531
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbdfff;  op2val:0x40fdff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfffbdfff, 0x40fdff, x12, 148, x1)

inst_53:
// rs2_h0_val == 65279, rs1_h1_val == 256
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000100;  op2val:0xff7ffeff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x1000100, 0xff7ffeff, x12, 152, x1)

inst_54:
// rs2_h0_val == 1024, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d8000;  op2val:0x10000400
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0d8000, 0x10000400, x12, 156, x1)

inst_55:
// rs2_h0_val == 256, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000003;  op2val:0x010100
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x80000003, 0x010100, x12, 160, x1)

inst_56:
// rs2_h0_val == 64, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550800;  op2val:0x030040
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x55550800, 0x030040, x12, 164, x1)

inst_57:
// rs2_h0_val == 4, rs1_h1_val == 2048
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x8001000;  op2val:0x120004
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x8001000, 0x120004, x12, 168, x1)

inst_58:
// rs2_h0_val == 2, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x060004;  op2val:0x8000002
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x060004, 0x8000002, x12, 172, x1)

inst_59:
// rs2_h0_val == 65535, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff;  op2val:0xaaaaffff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x01dfff, 0xaaaaffff, x12, 176, x1)

inst_60:
// rs1_h1_val == 43690, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555;  op2val:0xfff7ffff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xaaaa5555, 0xfff7ffff, x12, 180, x1)

inst_61:
// rs1_h1_val == 32767, rs1_h0_val == 49151
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbfff;  op2val:0x0baaaa
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x7fffbfff, 0x0baaaa, x12, 184, x1)

inst_62:
// rs1_h1_val == 63487, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0012;  op2val:0x100ffbf
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xf7ff0012, 0x100ffbf, x12, 188, x1)

inst_63:
// rs2_h0_val == 65527, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0daaaa;  op2val:0x07fff7
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0daaaa, 0x07fff7, x12, 192, x1)

inst_64:
// rs1_h1_val == 65279, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf;  op2val:0x03efff
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfeffffbf, 0x03efff, x12, 196, x1)

inst_65:
// rs1_h1_val == 65527, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70000;  op2val:0x800013
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfff70000, 0x800013, x12, 200, x1)

inst_66:
// rs1_h1_val == 8192, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000efff;  op2val:0xdfff0000
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x2000efff, 0xdfff0000, x12, 204, x1)

inst_67:
// rs2_h0_val == 65534, rs1_h1_val == 8
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x08dfff;  op2val:0x7ffffffe
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x08dfff, 0x7ffffffe, x12, 208, x1)

inst_68:
// rs1_h1_val == 32, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200004;  op2val:0xfbff0080
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x200004, 0xfbff0080, x12, 212, x1)

inst_69:
// rs1_h1_val == 16, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100020;  op2val:0xfeff0100
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x100020, 0xfeff0100, x12, 216, x1)

inst_70:
// rs1_h1_val == 2, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x020004;  op2val:0x40000080
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x020004, 0x40000080, x12, 220, x1)

inst_71:
// rs1_h1_val == 65535, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0005;  op2val:0xfffe0007
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xffff0005, 0xfffe0007, x12, 224, x1)

inst_72:
// rs1_h1_val == 0, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffe;  op2val:0x130013
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x00fffe, 0x130013, x12, 228, x1)

inst_73:
// rs1_h1_val == 65534, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeefff;  op2val:0x01000a
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfffeefff, 0x01000a, x12, 232, x1)

inst_74:
// rs1_h0_val == 63487, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7ff;  op2val:0x200fffd
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfefff7ff, 0x200fffd, x12, 236, x1)

inst_75:
// rs1_h0_val == 64511, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffbff;  op2val:0xfdff0008
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xfefffbff, 0xfdff0008, x12, 240, x1)

inst_76:
// rs1_h0_val == 65023, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdff;  op2val:0x40000006
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x4000fdff, 0x40000006, x12, 244, x1)

inst_77:
// rs1_h0_val == 65279, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfeff;  op2val:0xefff0003
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0dfeff, 0xefff0003, x12, 248, x1)

inst_78:
// rs1_h0_val == 65407, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0eff7f;  op2val:0xfffd0009
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x0eff7f, 0xfffd0009, x12, 252, x1)

inst_79:
// rs2_h0_val == 4096, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x02bfff;  op2val:0xfffe1000
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x02bfff, 0xfffe1000, x12, 256, x1)

inst_80:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 43690, rs2_h0_val == 1, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x12aaaa;  op2val:0x120001
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x12aaaa, 0x120001, x12, 260, x1)

inst_81:
// rs2_h1_val == 43690, rs1_h1_val == 65519, rs1_h0_val == 65534, rs2_h0_val == 2048
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffe;  op2val:0xaaaa0800
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xffeffffe, 0xaaaa0800, x12, 264, x1)

inst_82:
// rs2_h1_val == 65279, rs1_h1_val == 61439, rs1_h0_val == 61439
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffefff;  op2val:0xfeff0000
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0xefffefff, 0xfeff0000, x12, 268, x1)

inst_83:
// rs2_h1_val == 1024, rs2_h0_val == 65503
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffff;  op2val:0x400ffdf
TEST_RR_OP(umin16, x31, x30, x29, 0x00000000, 0x13ffff, 0x400ffdf, x12, 272, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 69*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
