
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmxda instruction of the RISC-V RV32PZicsr extension for the kmxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x8, rd==x26, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 1, rs2_h1_val == -5
// opcode: kmxda ; op1:x16; op2:x8; dest:x26; op1val:0x018000;  op2val:0xfffbfff8
TEST_PKRR_OP(kmxda, x26, x16, x8, 0x00000000, 0x018000, 0xfffbfff8, x16, x5, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x25, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 0, rs2_h1_val == -1025, rs1_h0_val == 21845, rs1_h1_val == -1025
// opcode: kmxda ; op1:x12; op2:x12; dest:x25; op1val:0xfbff5555;  op2val:0xfbff0000
TEST_PKRR_OP(kmxda, x25, x12, x12, 0x00000000, 0xfbff5555, 0xfbff0000, x12, x5, 8, x14)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x26, rd==x7, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 16384
// opcode: kmxda ; op1:x7; op2:x26; dest:x7; op1val:0xffff4000;  op2val:0x03fff8
TEST_PKRR_OP(kmxda, x7, x7, x26, 0x00000000, 0xffff4000, 0x03fff8, x7, x5, 16, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -3, rs1_h0_val == 16, rs2_h1_val == 1
// opcode: kmxda ; op1:x30; op2:x30; dest:x30; op1val:0x050010;  op2val:0x01fffd
TEST_PKRR_OP(kmxda, x30, x30, x30, 0x00000000, 0x050010, 0x01fffd, x30, x5, 24, x14)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x16, rd==x16, rs1_h0_val == rs2_h0_val, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 2, rs1_h1_val == -21846, rs1_h0_val == 2
// opcode: kmxda ; op1:x0; op2:x16; dest:x16; op1val:0xaaaa0002;  op2val:0x400002
TEST_PKRR_OP(kmxda, x16, x0, x16, 0x00000000, 0xaaaa0002, 0x400002, x0, x5, 32, x14)

inst_5:
// rs1==x3, rs2==x11, rd==x9, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 4, rs2_h1_val == -21846
// opcode: kmxda ; op1:x3; op2:x11; dest:x9; op1val:0x04fffc;  op2val:0xaaaa0009
TEST_PKRR_OP(kmxda, x9, x3, x11, 0x00000000, 0x04fffc, 0xaaaa0009, x3, x5, 40, x14)

inst_6:
// rs1==x13, rs2==x29, rd==x31, rs2_h1_val == 21845, rs1_h0_val == -2, rs1_h1_val == 2
// opcode: kmxda ; op1:x13; op2:x29; dest:x31; op1val:0x02fffe;  op2val:0x55553fff
TEST_PKRR_OP(kmxda, x31, x13, x29, 0x00000000, 0x02fffe, 0x55553fff, x13, x5, 48, x14)

inst_7:
// rs1==x2, rs2==x10, rd==x24, rs2_h1_val == 32767, rs1_h0_val == 128, rs2_h0_val == 128
// opcode: kmxda ; op1:x2; op2:x10; dest:x24; op1val:0xfffa0080;  op2val:0x7fff0080
TEST_PKRR_OP(kmxda, x24, x2, x10, 0x00000000, 0xfffa0080, 0x7fff0080, x2, x5, 56, x14)

inst_8:
// rs1==x28, rs2==x18, rd==x27, rs2_h1_val == -16385, rs1_h1_val == 128
// opcode: kmxda ; op1:x28; op2:x18; dest:x27; op1val:0x804000;  op2val:0xbffffff9
TEST_PKRR_OP(kmxda, x27, x28, x18, 0x00000000, 0x804000, 0xbffffff9, x28, x5, 64, x14)

inst_9:
// rs1==x19, rs2==x28, rd==x1, rs2_h1_val == -8193, rs2_h0_val == 64
// opcode: kmxda ; op1:x19; op2:x28; dest:x1; op1val:0x020007;  op2val:0xdfff0040
TEST_PKRR_OP(kmxda, x1, x19, x28, 0x00000000, 0x020007, 0xdfff0040, x19, x5, 72, x14)

inst_10:
// rs1==x22, rs2==x20, rd==x4, rs2_h1_val == -4097, rs1_h0_val == -1025, rs1_h1_val == 32767
// opcode: kmxda ; op1:x22; op2:x20; dest:x4; op1val:0x7ffffbff;  op2val:0xefff3fff
TEST_PKRR_OP(kmxda, x4, x22, x20, 0x00000000, 0x7ffffbff, 0xefff3fff, x22, x5, 80, x14)

inst_11:
// rs1==x24, rs2==x17, rd==x19, rs2_h1_val == -2049, rs1_h1_val == 32, rs2_h0_val == -2049
// opcode: kmxda ; op1:x24; op2:x17; dest:x19; op1val:0x200006;  op2val:0xf7fff7ff
TEST_PKRR_OP(kmxda, x19, x24, x17, 0x00000000, 0x200006, 0xf7fff7ff, x24, x5, 88, x14)

inst_12:
// rs1==x1, rs2==x6, rd==x23, rs2_h1_val == -513, rs1_h0_val == -1
// opcode: kmxda ; op1:x1; op2:x6; dest:x23; op1val:0x06ffff;  op2val:0xfdff3fff
TEST_PKRR_OP(kmxda, x23, x1, x6, 0x00000000, 0x06ffff, 0xfdff3fff, x1, x5, 96, x14)
RVTEST_SIGBASE(x16,signature_x16_0)

inst_13:
// rs1==x17, rs2==x24, rd==x0, rs2_h1_val == -257, rs1_h1_val == 2048, rs2_h0_val == -17
// opcode: kmxda ; op1:x17; op2:x24; dest:x0; op1val:0x8000009;  op2val:0xfeffffef
TEST_PKRR_OP(kmxda, x0, x17, x24, 0x00000000, 0x8000009, 0xfeffffef, x17, x16, 0, x19)

inst_14:
// rs1==x4, rs2==x1, rd==x11, rs2_h1_val == -129, 
// opcode: kmxda ; op1:x4; op2:x1; dest:x11; op1val:0x01fff8;  op2val:0xff7ffff8
TEST_PKRR_OP(kmxda, x11, x4, x1, 0x00000000, 0x01fff8, 0xff7ffff8, x4, x16, 8, x19)

inst_15:
// rs1==x11, rs2==x13, rd==x21, rs2_h1_val == -65, rs1_h0_val == -129, rs2_h0_val == -8193
// opcode: kmxda ; op1:x11; op2:x13; dest:x21; op1val:0xaaaaff7f;  op2val:0xffbfdfff
TEST_PKRR_OP(kmxda, x21, x11, x13, 0x00000000, 0xaaaaff7f, 0xffbfdfff, x11, x16, 16, x19)

inst_16:
// rs1==x8, rs2==x5, rd==x22, rs2_h1_val == -33, rs2_h0_val == -257
// opcode: kmxda ; op1:x8; op2:x5; dest:x22; op1val:0xaaaafffc;  op2val:0xffdffeff
TEST_PKRR_OP(kmxda, x22, x8, x5, 0x00000000, 0xaaaafffc, 0xffdffeff, x8, x16, 24, x19)

inst_17:
// rs1==x6, rs2==x4, rd==x12, rs2_h1_val == -17, 
// opcode: kmxda ; op1:x6; op2:x4; dest:x12; op1val:0x8000002;  op2val:0xffeffffc
TEST_PKRR_OP(kmxda, x12, x6, x4, 0x00000000, 0x8000002, 0xffeffffc, x6, x16, 32, x19)

inst_18:
// rs1==x27, rs2==x15, rd==x18, rs2_h1_val == -9, 
// opcode: kmxda ; op1:x27; op2:x15; dest:x18; op1val:0xfbff0006;  op2val:0xfff7ffef
TEST_PKRR_OP(kmxda, x18, x27, x15, 0x00000000, 0xfbff0006, 0xfff7ffef, x27, x16, 40, x19)

inst_19:
// rs1==x15, rs2==x31, rd==x14, rs2_h1_val == -3, rs2_h0_val == -5, rs1_h0_val == -5, rs1_h1_val == 21845
// opcode: kmxda ; op1:x15; op2:x31; dest:x14; op1val:0x5555fffb;  op2val:0xfffdfffb
TEST_PKRR_OP(kmxda, x14, x15, x31, 0x00000000, 0x5555fffb, 0xfffdfffb, x15, x16, 48, x19)

inst_20:
// rs1==x18, rs2==x23, rd==x28, rs2_h1_val == -2, rs2_h0_val == 21845, rs1_h0_val == 32767
// opcode: kmxda ; op1:x18; op2:x23; dest:x28; op1val:0xfff67fff;  op2val:0xfffe5555
TEST_PKRR_OP(kmxda, x28, x18, x23, 0x00000000, 0xfff67fff, 0xfffe5555, x18, x16, 56, x19)

inst_21:
// rs1==x31, rs2==x9, rd==x2, rs2_h1_val == -32768, rs2_h0_val == -1025, rs1_h0_val == 32, rs1_h1_val == 64
// opcode: kmxda ; op1:x31; op2:x9; dest:x2; op1val:0x400020;  op2val:0x8000fbff
TEST_PKRR_OP(kmxda, x2, x31, x9, 0x00000000, 0x400020, 0x8000fbff, x31, x16, 64, x19)

inst_22:
// rs1==x5, rs2==x0, rd==x6, rs2_h1_val == 16384, rs1_h1_val == 256
// opcode: kmxda ; op1:x5; op2:x0; dest:x6; op1val:0x100fff6;  op2val:0x4000fff8
TEST_PKRR_OP(kmxda, x6, x5, x0, 0x00000000, 0x100fff6, 0x4000fff8, x5, x16, 72, x19)

inst_23:
// rs1==x29, rs2==x27, rd==x5, rs2_h1_val == 8192, 
// opcode: kmxda ; op1:x29; op2:x27; dest:x5; op1val:0xfff9fbff;  op2val:0x2000feff
TEST_PKRR_OP(kmxda, x5, x29, x27, 0x00000000, 0xfff9fbff, 0x2000feff, x29, x16, 80, x19)

inst_24:
// rs1==x25, rs2==x7, rd==x10, rs2_h1_val == 4096, rs1_h1_val == -4097
// opcode: kmxda ; op1:x25; op2:x7; dest:x10; op1val:0xefff0020;  op2val:0x1000fff6
TEST_PKRR_OP(kmxda, x10, x25, x7, 0x00000000, 0xefff0020, 0x1000fff6, x25, x16, 88, x19)

inst_25:
// rs1==x20, rs2==x3, rd==x15, rs2_h1_val == 2048, 
// opcode: kmxda ; op1:x20; op2:x3; dest:x15; op1val:0xfff67fff;  op2val:0x8000009
TEST_PKRR_OP(kmxda, x15, x20, x3, 0x00000000, 0xfff67fff, 0x8000009, x20, x16, 96, x19)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:
// rs1==x21, rs2==x22, rd==x8, rs2_h1_val == 1024, rs2_h0_val == 4, rs1_h0_val == 8
// opcode: kmxda ; op1:x21; op2:x22; dest:x8; op1val:0x3fff0008;  op2val:0x4000004
TEST_PKRR_OP(kmxda, x8, x21, x22, 0x00000000, 0x3fff0008, 0x4000004, x21, x1, 0, x4)

inst_27:
// rs1==x26, rs2==x21, rd==x29, rs2_h1_val == 512, rs2_h0_val == -513, rs1_h0_val == -17
// opcode: kmxda ; op1:x26; op2:x21; dest:x29; op1val:0x02ffef;  op2val:0x200fdff
TEST_PKRR_OP(kmxda, x29, x26, x21, 0x00000000, 0x02ffef, 0x200fdff, x26, x1, 8, x4)

inst_28:
// rs1==x9, rs2==x14, rd==x13, rs2_h1_val == 256, rs1_h0_val == -21846
// opcode: kmxda ; op1:x9; op2:x14; dest:x13; op1val:0x03aaaa;  op2val:0x100c000
TEST_PKRR_OP(kmxda, x13, x9, x14, 0x00000000, 0x03aaaa, 0x100c000, x9, x1, 16, x4)

inst_29:
// rs1==x10, rs2==x2, rd==x20, rs2_h1_val == 128, rs1_h1_val == 8192, rs2_h0_val == -4097
// opcode: kmxda ; op1:x10; op2:x2; dest:x20; op1val:0x2000fffe;  op2val:0x80efff
TEST_PKRR_OP(kmxda, x20, x10, x2, 0x00000000, 0x2000fffe, 0x80efff, x10, x1, 24, x4)

inst_30:
// rs1==x14, rs2==x25, rd==x17, rs2_h1_val == 32, rs1_h1_val == 4096, rs1_h0_val == -257
// opcode: kmxda ; op1:x14; op2:x25; dest:x17; op1val:0x1000feff;  op2val:0x203fff
TEST_PKRR_OP(kmxda, x17, x14, x25, 0x00000000, 0x1000feff, 0x203fff, x14, x1, 32, x4)

inst_31:
// rs1==x23, rs2==x19, rd==x3, rs2_h1_val == 16, 
// opcode: kmxda ; op1:x23; op2:x19; dest:x3; op1val:0x3ffffffb;  op2val:0x10fdff
TEST_PKRR_OP(kmxda, x3, x23, x19, 0x00000000, 0x3ffffffb, 0x10fdff, x23, x1, 40, x4)

inst_32:
// rs2_h1_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffef;  op2val:0x08feff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x1000ffef, 0x08feff, x30, x1, 48, x4)

inst_33:
// rs2_h1_val == 4, rs2_h0_val == -1, rs1_h0_val == -4097
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x02efff;  op2val:0x04ffff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x02efff, 0x04ffff, x30, x1, 56, x4)

inst_34:
// rs1_h0_val == -513, rs1_h1_val == 0
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x00fdff;  op2val:0x80f7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x00fdff, 0x80f7ff, x30, x1, 64, x4)

inst_35:
// rs1_h0_val == -65, rs2_h0_val == 16384
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x07ffbf;  op2val:0xfffa4000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x07ffbf, 0xfffa4000, x30, x1, 72, x4)

inst_36:
// rs1_h0_val == -33, rs2_h0_val == 2048
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdf;  op2val:0xfff80800
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xc000ffdf, 0xfff80800, x30, x1, 80, x4)

inst_37:
// rs1_h0_val == -9, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff7;  op2val:0x400f7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfffafff7, 0x400f7ff, x30, x1, 88, x4)

inst_38:
// rs1_h0_val == -3, rs1_h1_val == -8193, rs2_h0_val == 8192, rs2_h1_val == 0
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffd;  op2val:0x002000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xdffffffd, 0x002000, x30, x1, 96, x4)

inst_39:
// rs1_h0_val == 8192, rs1_h1_val == -65
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf2000;  op2val:0xfff6fffb
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xffbf2000, 0xfff6fffb, x30, x1, 104, x4)

inst_40:
// rs1_h0_val == 4096, rs2_h0_val == -21846
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x001000;  op2val:0x10aaaa
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x001000, 0x10aaaa, x30, x1, 112, x4)

inst_41:
// rs1_h0_val == 2048, rs2_h0_val == 16
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x030800;  op2val:0x040010
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x030800, 0x040010, x30, x1, 120, x4)

inst_42:
// rs1_h0_val == 1024, rs2_h1_val == -1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x200400;  op2val:0xfffffff6
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x200400, 0xfffffff6, x30, x1, 128, x4)

inst_43:
// rs1_h0_val == 512, rs2_h0_val == -32768
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0xfffa8000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x800200, 0xfffa8000, x30, x1, 136, x4)

inst_44:
// rs1_h0_val == 256, rs1_h1_val == -3
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100;  op2val:0xfff8fdff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfffd0100, 0xfff8fdff, x30, x1, 144, x4)

inst_45:
// rs1_h0_val == 64, rs1_h1_val == -513
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0040;  op2val:0x07ffff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfdff0040, 0x07ffff, x30, x1, 152, x4)

inst_46:
// rs1_h0_val == 4, rs2_h0_val == 1, rs1_h1_val == -9
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff70004;  op2val:0x10000001
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfff70004, 0x10000001, x30, x1, 160, x4)

inst_47:
// rs1_h0_val == 1, rs1_h1_val == -16385, rs2_h0_val == -65
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0001;  op2val:0x4000ffbf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xbfff0001, 0x4000ffbf, x30, x1, 168, x4)

inst_48:
// rs1_h0_val == 0, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x55550000;  op2val:0x200ffbf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x55550000, 0x200ffbf, x30, x1, 176, x4)

inst_49:
// rs2_h0_val == -2, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0x09fffe
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfffd0800, 0x09fffe, x30, x1, 184, x4)

inst_50:
// rs2_h0_val == 4096, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffe;  op2val:0xfff91000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfbfffffe, 0xfff91000, x30, x1, 192, x4)

inst_51:
// rs2_h0_val == 1024, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fff;  op2val:0xfffd0400
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xefff7fff, 0xfffd0400, x30, x1, 200, x4)

inst_52:
// rs2_h0_val == 512, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x020000;  op2val:0x010200
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x020000, 0x010200, x30, x1, 208, x4)

inst_53:
// rs2_h0_val == 256, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x20000003;  op2val:0xbfff0100
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x20000003, 0xbfff0100, x30, x1, 216, x4)

inst_54:
// rs2_h0_val == 32, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xc0000100;  op2val:0x40000020
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xc0000100, 0x40000020, x30, x1, 224, x4)

inst_55:
// rs2_h0_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd;  op2val:0xc0000008
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xaaaafffd, 0xc0000008, x30, x1, 232, x4)

inst_56:
// rs1_h1_val == -2049, rs2_h0_val == -129
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010;  op2val:0xdfffff7f
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xf7ff0010, 0xdfffff7f, x30, x1, 240, x4)

inst_57:
// rs1_h1_val == -257, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf;  op2val:0x20fdff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfeffffbf, 0x20fdff, x30, x1, 248, x4)

inst_58:
// rs1_h1_val == -129, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x050080
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x050080, x30, x1, 256, x4)

inst_59:
// rs1_h1_val == -33, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0200;  op2val:0xfffa0080
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xffdf0200, 0xfffa0080, x30, x1, 264, x4)

inst_60:
// rs1_h1_val == -17, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffa;  op2val:0x20fff9
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xffeffffa, 0x20fff9, x30, x1, 272, x4)

inst_61:
// rs1_h1_val == -5, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff;  op2val:0x80000009
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfffb7fff, 0x80000009, x30, x1, 280, x4)

inst_62:
// rs1_h1_val == -2, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010;  op2val:0x008000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfffe0010, 0x008000, x30, x1, 288, x4)

inst_63:
// rs1_h1_val == -32768, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x80000002;  op2val:0x400dfff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x80000002, 0x400dfff, x30, x1, 296, x4)

inst_64:
// rs1_h1_val == 16384, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x40000006;  op2val:0x080002
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x40000006, 0x080002, x30, x1, 304, x4)

inst_65:
// rs1_h1_val == 1024, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000800;  op2val:0xfff60003
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x4000800, 0xfff60003, x30, x1, 312, x4)

inst_66:
// rs2_h1_val == 2, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x000007;  op2val:0x020000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x000007, 0x020000, x30, x1, 320, x4)

inst_67:
// rs1_h1_val == 512, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000004;  op2val:0x802000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x2000004, 0x802000, x30, x1, 328, x4)

inst_68:
// rs1_h1_val == 16, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x100009;  op2val:0x030020
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x100009, 0x030020, x30, x1, 336, x4)

inst_69:
// rs1_h0_val == -2049, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x06f7ff;  op2val:0xbfff0100
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x06f7ff, 0xbfff0100, x30, x1, 344, x4)

inst_70:
// rs2_h0_val == 32767, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff9;  op2val:0xaaaa7fff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x7ffffff9, 0xaaaa7fff, x30, x1, 352, x4)

inst_71:
// rs1_h1_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf;  op2val:0xfff95555
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x08ffdf, 0xfff95555, x30, x1, 360, x4)

inst_72:
// rs2_h0_val == -33, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff5555;  op2val:0x06ffdf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfdff5555, 0x06ffdf, x30, x1, 368, x4)

inst_73:
// rs1_h0_val == -16385, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x07bfff;  op2val:0x04f7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x07bfff, 0x04f7ff, x30, x1, 376, x4)

inst_74:
// rs2_h0_val == -16385, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffeff;  op2val:0xfff8bfff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfefffeff, 0xfff8bfff, x30, x1, 384, x4)

inst_75:
// rs1_h0_val == -8193, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdffdfff;  op2val:0xfeffaaaa
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfdffdfff, 0xfeffaaaa, x30, x1, 392, x4)

inst_76:
// rs2_h0_val == -9, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff4000;  op2val:0xfffafff7
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xdfff4000, 0xfffafff7, x30, x1, 400, x4)

inst_77:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 0, rs2_h1_val == -1025, rs1_h0_val == 21845, rs1_h1_val == -1025
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555;  op2val:0xfbff0000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xfbff5555, 0xfbff0000, x30, x1, 408, x4)

inst_78:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -3, rs1_h0_val == 16, rs2_h1_val == 1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x050010;  op2val:0x01fffd
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x050010, 0x01fffd, x30, x1, 416, x4)

inst_79:
// rs1_h0_val == rs2_h0_val, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 2, rs1_h1_val == -21846, rs1_h0_val == 2
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002;  op2val:0x400002
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0xaaaa0002, 0x400002, x30, x1, 424, x4)

inst_80:
// rs2_h1_val == 16384, rs1_h1_val == 256
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6;  op2val:0x4000fff8
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x00000000, 0x100fff6, 0x4000fff8, x30, x1, 432, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x16_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
