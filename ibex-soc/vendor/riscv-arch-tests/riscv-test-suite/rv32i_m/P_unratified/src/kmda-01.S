
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmda instruction of the RISC-V RV32PZicsr extension for the kmda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x28, rd==x25, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == 16384, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -513
// opcode: kmda ; op1:x10; op2:x28; dest:x25; op1val:0x40008000;  op2val:0xfdff0006
TEST_PKRR_OP(kmda, x25, x10, x28, 0x00000000, 0x40008000, 0xfdff0006, x10, x5, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x22, rs1_h1_val == rs2_h1_val, rs1_h1_val == -17, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -21846, rs2_h1_val == -17, rs2_h0_val == -9
// opcode: kmda ; op1:x31; op2:x31; dest:x22; op1val:0xffefaaaa;  op2val:0xffeffff7
TEST_PKRR_OP(kmda, x22, x31, x31, 0x00000000, 0xffefaaaa, 0xffeffff7, x31, x5, 8, x6)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x11, rd==x18, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 512, rs1_h0_val == -129, rs1_h1_val == -5
// opcode: kmda ; op1:x18; op2:x11; dest:x18; op1val:0xfffbff7f;  op2val:0x060200
TEST_PKRR_OP(kmda, x18, x18, x11, 0x00000000, 0xfffbff7f, 0x060200, x18, x5, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 128, rs1_h0_val == 32, rs2_h0_val == -257
// opcode: kmda ; op1:x0; op2:x0; dest:x0; op1val:0x800020;  op2val:0x1000feff
TEST_PKRR_OP(kmda, x0, x0, x0, 0x00000000, 0x800020, 0x1000feff, x0, x5, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -5, rs1_h0_val == 2048, rs2_h0_val == 2048
// opcode: kmda ; op1:x13; op2:x12; dest:x12; op1val:0x030800;  op2val:0xfffb0800
TEST_PKRR_OP(kmda, x12, x13, x12, 0x00000000, 0x030800, 0xfffb0800, x13, x5, 32, x6)

inst_5:
// rs1==x12, rs2==x22, rd==x1, rs2_h1_val == -21846, rs1_h0_val == -65, rs2_h0_val == -16385, rs1_h1_val == 1
// opcode: kmda ; op1:x12; op2:x22; dest:x1; op1val:0x01ffbf;  op2val:0xaaaabfff
TEST_PKRR_OP(kmda, x1, x12, x22, 0x00000000, 0x01ffbf, 0xaaaabfff, x12, x5, 40, x6)

inst_6:
// rs1==x4, rs2==x27, rd==x31, rs2_h1_val == 21845, rs1_h1_val == 32767
// opcode: kmda ; op1:x4; op2:x27; dest:x31; op1val:0x7ffffffa;  op2val:0x5555bfff
TEST_PKRR_OP(kmda, x31, x4, x27, 0x00000000, 0x7ffffffa, 0x5555bfff, x4, x5, 48, x6)

inst_7:
// rs1==x21, rs2==x2, rd==x24, rs2_h1_val == 32767, rs1_h1_val == 16, rs1_h0_val == 4
// opcode: kmda ; op1:x21; op2:x2; dest:x24; op1val:0x100004;  op2val:0x7ffffff8
TEST_PKRR_OP(kmda, x24, x21, x2, 0x00000000, 0x100004, 0x7ffffff8, x21, x5, 56, x6)

inst_8:
// rs1==x7, rs2==x29, rd==x10, rs2_h1_val == -16385, rs2_h0_val == -5, rs1_h1_val == -257
// opcode: kmda ; op1:x7; op2:x29; dest:x10; op1val:0xfefffffa;  op2val:0xbffffffb
TEST_PKRR_OP(kmda, x10, x7, x29, 0x00000000, 0xfefffffa, 0xbffffffb, x7, x5, 64, x6)

inst_9:
// rs1==x1, rs2==x20, rd==x27, rs2_h1_val == -8193, rs2_h0_val == -1025, rs1_h0_val == 8192, rs1_h1_val == -513
// opcode: kmda ; op1:x1; op2:x20; dest:x27; op1val:0xfdff2000;  op2val:0xdffffbff
TEST_PKRR_OP(kmda, x27, x1, x20, 0x00000000, 0xfdff2000, 0xdffffbff, x1, x5, 72, x6)

inst_10:
// rs1==x29, rs2==x4, rd==x9, rs2_h1_val == -4097, rs2_h0_val == -513, rs1_h0_val == -2, rs1_h1_val == -21846
// opcode: kmda ; op1:x29; op2:x4; dest:x9; op1val:0xaaaafffe;  op2val:0xeffffdff
TEST_PKRR_OP(kmda, x9, x29, x4, 0x00000000, 0xaaaafffe, 0xeffffdff, x29, x5, 80, x6)

inst_11:
// rs1==x3, rs2==x1, rd==x14, rs2_h1_val == -2049, rs2_h0_val == -2, rs1_h1_val == -2049
// opcode: kmda ; op1:x3; op2:x1; dest:x14; op1val:0xf7ff0800;  op2val:0xf7fffffe
TEST_PKRR_OP(kmda, x14, x3, x1, 0x00000000, 0xf7ff0800, 0xf7fffffe, x3, x5, 88, x6)

inst_12:
// rs1==x2, rs2==x8, rd==x16, rs2_h1_val == -1025, 
// opcode: kmda ; op1:x2; op2:x8; dest:x16; op1val:0xaaaa0006;  op2val:0xfbfffbff
TEST_PKRR_OP(kmda, x16, x2, x8, 0x00000000, 0xaaaa0006, 0xfbfffbff, x2, x5, 96, x6)

inst_13:
// rs1==x24, rs2==x26, rd==x19, rs2_h1_val == -257, rs1_h1_val == 21845
// opcode: kmda ; op1:x24; op2:x26; dest:x19; op1val:0x55550005;  op2val:0xfefffff9
TEST_PKRR_OP(kmda, x19, x24, x26, 0x00000000, 0x55550005, 0xfefffff9, x24, x5, 104, x6)

inst_14:
// rs1==x25, rs2==x3, rd==x15, rs2_h1_val == -129, rs1_h1_val == -9
// opcode: kmda ; op1:x25; op2:x3; dest:x15; op1val:0xfff7fffc;  op2val:0xff7ffeff
TEST_PKRR_OP(kmda, x15, x25, x3, 0x00000000, 0xfff7fffc, 0xff7ffeff, x25, x5, 112, x6)

inst_15:
// rs1==x9, rs2==x13, rd==x7, rs2_h1_val == -65, rs2_h0_val == 21845
// opcode: kmda ; op1:x9; op2:x13; dest:x7; op1val:0x050005;  op2val:0xffbf5555
TEST_PKRR_OP(kmda, x7, x9, x13, 0x00000000, 0x050005, 0xffbf5555, x9, x5, 120, x3)

inst_16:
// rs1==x19, rs2==x14, rd==x8, rs2_h1_val == -33, rs1_h0_val == 16, rs2_h0_val == 16, rs1_h1_val == -32768
// opcode: kmda ; op1:x19; op2:x14; dest:x8; op1val:0x80000010;  op2val:0xffdf0010
TEST_PKRR_OP(kmda, x8, x19, x14, 0x00000000, 0x80000010, 0xffdf0010, x19, x5, 128, x3)

inst_17:
// rs1==x22, rs2==x19, rd==x2, rs2_h1_val == -9, rs1_h0_val == 32767
// opcode: kmda ; op1:x22; op2:x19; dest:x2; op1val:0xc0007fff;  op2val:0xfff7bfff
TEST_PKRR_OP(kmda, x2, x22, x19, 0x00000000, 0xc0007fff, 0xfff7bfff, x22, x5, 136, x3)

inst_18:
// rs1==x23, rs2==x25, rd==x17, rs2_h1_val == -3, rs1_h0_val == 8
// opcode: kmda ; op1:x23; op2:x25; dest:x17; op1val:0xfeff0008;  op2val:0xfffd0010
TEST_PKRR_OP(kmda, x17, x23, x25, 0x00000000, 0xfeff0008, 0xfffd0010, x23, x5, 144, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x27, rs2==x24, rd==x29, rs2_h1_val == -2, rs1_h0_val == 1024
// opcode: kmda ; op1:x27; op2:x24; dest:x29; op1val:0x030400;  op2val:0xfffe0200
TEST_PKRR_OP(kmda, x29, x27, x24, 0x00000000, 0x030400, 0xfffe0200, x27, x1, 0, x3)

inst_20:
// rs1==x8, rs2==x30, rd==x26, rs2_h1_val == -32768, 
// opcode: kmda ; op1:x8; op2:x30; dest:x26; op1val:0xfffa0400;  op2val:0x80000007
TEST_PKRR_OP(kmda, x26, x8, x30, 0x00000000, 0xfffa0400, 0x80000007, x8, x1, 8, x3)

inst_21:
// rs1==x6, rs2==x18, rd==x5, rs2_h1_val == 16384, rs1_h1_val == 2048, rs2_h0_val == 4096
// opcode: kmda ; op1:x6; op2:x18; dest:x5; op1val:0x8000005;  op2val:0x40001000
TEST_PKRR_OP(kmda, x5, x6, x18, 0x00000000, 0x8000005, 0x40001000, x6, x1, 16, x3)

inst_22:
// rs1==x30, rs2==x9, rd==x21, rs2_h1_val == 8192, rs1_h0_val == 256, rs1_h1_val == 2
// opcode: kmda ; op1:x30; op2:x9; dest:x21; op1val:0x020100;  op2val:0x2000fdff
TEST_PKRR_OP(kmda, x21, x30, x9, 0x00000000, 0x020100, 0x2000fdff, x30, x1, 24, x3)

inst_23:
// rs1==x17, rs2==x23, rd==x13, rs2_h1_val == 2048, rs1_h0_val == 21845, rs1_h1_val == 256
// opcode: kmda ; op1:x17; op2:x23; dest:x13; op1val:0x1005555;  op2val:0x800fdff
TEST_PKRR_OP(kmda, x13, x17, x23, 0x00000000, 0x1005555, 0x800fdff, x17, x1, 32, x3)

inst_24:
// rs1==x16, rs2==x17, rd==x4, rs2_h1_val == 1024, rs2_h0_val == 32
// opcode: kmda ; op1:x16; op2:x17; dest:x4; op1val:0xfffa2000;  op2val:0x4000020
TEST_PKRR_OP(kmda, x4, x16, x17, 0x00000000, 0xfffa2000, 0x4000020, x16, x1, 40, x3)

inst_25:
// rs1==x14, rs2==x21, rd==x30, rs2_h1_val == 512, rs1_h1_val == 64
// opcode: kmda ; op1:x14; op2:x21; dest:x30; op1val:0x40fffc;  op2val:0x200fffb
TEST_PKRR_OP(kmda, x30, x14, x21, 0x00000000, 0x40fffc, 0x200fffb, x14, x1, 48, x3)

inst_26:
// rs1==x28, rs2==x5, rd==x11, rs2_h1_val == 256, 
// opcode: kmda ; op1:x28; op2:x5; dest:x11; op1val:0x800fffe;  op2val:0x1005555
TEST_PKRR_OP(kmda, x11, x28, x5, 0x00000000, 0x800fffe, 0x1005555, x28, x1, 56, x3)

inst_27:
// rs1==x20, rs2==x7, rd==x6, rs2_h1_val == 128, rs1_h1_val == -1, rs2_h0_val == -3
// opcode: kmda ; op1:x20; op2:x7; dest:x6; op1val:0xfffffffe;  op2val:0x80fffd
TEST_PKRR_OP(kmda, x6, x20, x7, 0x00000000, 0xfffffffe, 0x80fffd, x20, x1, 64, x3)

inst_28:
// rs1==x11, rs2==x16, rd==x20, rs2_h1_val == 64, rs2_h0_val == -17
// opcode: kmda ; op1:x11; op2:x16; dest:x20; op1val:0xfefffff8;  op2val:0x40ffef
TEST_PKRR_OP(kmda, x20, x11, x16, 0x00000000, 0xfefffff8, 0x40ffef, x11, x1, 72, x3)

inst_29:
// rs1==x15, rs2==x6, rd==x23, rs2_h1_val == 32, rs1_h1_val == 512
// opcode: kmda ; op1:x15; op2:x6; dest:x23; op1val:0x2000010;  op2val:0x20fffd
TEST_PKRR_OP(kmda, x23, x15, x6, 0x00000000, 0x2000010, 0x20fffd, x15, x1, 80, x3)

inst_30:
// rs1==x5, rs2==x15, rd==x3, rs2_h1_val == 16, 
// opcode: kmda ; op1:x5; op2:x15; dest:x3; op1val:0x8002000;  op2val:0x100800
TEST_PKRR_OP(kmda, x3, x5, x15, 0x00000000, 0x8002000, 0x100800, x5, x1, 88, x2)

inst_31:
// rs1==x26, rs2==x10, rd==x28, rs2_h1_val == 8, rs1_h1_val == 4096
// opcode: kmda ; op1:x26; op2:x10; dest:x28; op1val:0x1000aaaa;  op2val:0x081000
TEST_PKRR_OP(kmda, x28, x26, x10, 0x00000000, 0x1000aaaa, 0x081000, x26, x1, 96, x2)

inst_32:
// rs1_h0_val == -1025, rs1_h1_val == -33, rs2_h0_val == -1
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbff;  op2val:0xfff8ffff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xffdffbff, 0xfff8ffff, x30, x1, 104, x2)

inst_33:
// rs1_h0_val == -513, rs2_h0_val == 4
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffdff;  op2val:0x060004
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x7ffffdff, 0x060004, x30, x1, 112, x2)

inst_34:
// rs1_h0_val == -257, rs1_h1_val == 8
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x08feff;  op2val:0xfff7fff9
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x08feff, 0xfff7fff9, x30, x1, 120, x2)

inst_35:
// rs1_h0_val == -33, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffdf;  op2val:0x06fffd
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x4000ffdf, 0x06fffd, x30, x1, 128, x2)

inst_36:
// rs1_h0_val == -17, rs2_h0_val == -8193
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffef;  op2val:0x2000dfff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x8000ffef, 0x2000dfff, x30, x1, 136, x2)

inst_37:
// rs1_h0_val == -9, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff7;  op2val:0x400006
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x7ffffff7, 0x400006, x30, x1, 144, x2)

inst_38:
// rs1_h0_val == -5, rs2_h0_val == -65
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10fffb;  op2val:0xfffbffbf
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x10fffb, 0xfffbffbf, x30, x1, 152, x2)

inst_39:
// rs1_h0_val == -3, rs1_h1_val == -129
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x55550200
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x55550200, x30, x1, 160, x2)

inst_40:
// rs1_h0_val == 16384, rs1_h1_val == -4097, rs2_h1_val == 0
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xefff4000;  op2val:0x00c000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xefff4000, 0x00c000, x30, x1, 168, x2)

inst_41:
// rs1_h0_val == 4096, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff1000;  op2val:0xfff71000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xf7ff1000, 0xfff71000, x30, x1, 176, x2)

inst_42:
// rs1_h0_val == 512, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x40000200;  op2val:0xfffb0010
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x40000200, 0xfffb0010, x30, x1, 184, x2)

inst_43:
// rs1_h0_val == 128, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080;  op2val:0x3fff0200
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xffef0080, 0x3fff0200, x30, x1, 192, x2)

inst_44:
// rs1_h0_val == 64, rs1_h1_val == -65, rs2_h0_val == 2
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0040;  op2val:0xfffd0002
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xffbf0040, 0xfffd0002, x30, x1, 200, x2)

inst_45:
// rs1_h0_val == 2, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x050002;  op2val:0xfefffeff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x050002, 0xfefffeff, x30, x1, 208, x2)

inst_46:
// rs1_h0_val == 1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x55550001;  op2val:0x3ffffff8
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x55550001, 0x3ffffff8, x30, x1, 216, x2)

inst_47:
// rs1_h0_val == 0, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x070000;  op2val:0x80000010
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x070000, 0x80000010, x30, x1, 224, x2)

inst_48:
// rs1_h0_val == -1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0xfbffc000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfffbffff, 0xfbffc000, x30, x1, 232, x2)

inst_49:
// rs2_h1_val == 4, rs1_h1_val == 1024
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400fdff;  op2val:0x040200
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x400fdff, 0x040200, x30, x1, 240, x2)

inst_50:
// rs2_h1_val == 2, rs1_h1_val == -2, rs2_h0_val == -4097
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff9;  op2val:0x02efff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfffefff9, 0x02efff, x30, x1, 248, x2)

inst_51:
// rs2_h0_val == -32768, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000;  op2val:0x028000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xefffc000, 0x028000, x30, x1, 256, x2)

inst_52:
// rs2_h0_val == 16384, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x80002000;  op2val:0x1004000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x80002000, 0x1004000, x30, x1, 264, x2)

inst_53:
// rs2_h0_val == 8192, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x023fff;  op2val:0x092000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x023fff, 0x092000, x30, x1, 272, x2)

inst_54:
// rs2_h0_val == 1024, rs1_h1_val == -16385
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006;  op2val:0x1000400
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xbfff0006, 0x1000400, x30, x1, 280, x2)

inst_55:
// rs2_h0_val == 256, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0005;  op2val:0x000100
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfeff0005, 0x000100, x30, x1, 288, x2)

inst_56:
// rs2_h0_val == 128, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffb;  op2val:0x55550080
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfdfffffb, 0x55550080, x30, x1, 296, x2)

inst_57:
// rs2_h0_val == 64, rs1_h1_val == -3
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc;  op2val:0x1000040
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfffdfffc, 0x1000040, x30, x1, 304, x2)

inst_58:
// rs2_h0_val == 8, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff6;  op2val:0xc0000008
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x3ffffff6, 0xc0000008, x30, x1, 312, x2)

inst_59:
// rs2_h0_val == 1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb;  op2val:0xbfff0001
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xffdffffb, 0xbfff0001, x30, x1, 320, x2)

inst_60:
// rs2_h0_val == 0, rs2_h1_val == -1
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10feff;  op2val:0xffff0000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x10feff, 0xffff0000, x30, x1, 328, x2)

inst_61:
// rs1_h1_val == 0, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x00fbff;  op2val:0x084000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x00fbff, 0x084000, x30, x1, 336, x2)

inst_62:
// rs1_h1_val == 8192, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffff;  op2val:0x00fff6
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x2000ffff, 0x00fff6, x30, x1, 344, x2)

inst_63:
// rs2_h1_val == 1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x4004000;  op2val:0x010002
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x4004000, 0x010002, x30, x1, 352, x2)

inst_64:
// rs1_h0_val == -16385, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x02bfff;  op2val:0x02fff6
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x02bfff, 0x02fff6, x30, x1, 360, x2)

inst_65:
// rs2_h0_val == -21846, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x802000;  op2val:0xfff9aaaa
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x802000, 0xfff9aaaa, x30, x1, 368, x2)

inst_66:
// rs1_h1_val == 32, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x200005;  op2val:0xdfffefff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x200005, 0xdfffefff, x30, x1, 376, x2)

inst_67:
// rs2_h0_val == 32767, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x80feff;  op2val:0x407fff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x80feff, 0x407fff, x30, x1, 384, x2)

inst_68:
// rs2_h0_val == -33, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff9;  op2val:0x08ffdf
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfff7fff9, 0x08ffdf, x30, x1, 392, x2)

inst_69:
// rs1_h1_val == 4, rs1_h0_val == -2049, rs2_h0_val == -2049
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x04f7ff;  op2val:0xfffdf7ff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x04f7ff, 0xfffdf7ff, x30, x1, 400, x2)

inst_70:
// rs1_h1_val == -8193, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0007;  op2val:0x07ffef
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xdfff0007, 0x07ffef, x30, x1, 408, x2)

inst_71:
// rs2_h0_val == -129, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff;  op2val:0xc000ff7f
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xdffffeff, 0xc000ff7f, x30, x1, 416, x2)

inst_72:
// rs1_h1_val == -1025, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff4000;  op2val:0x40002000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xfbff4000, 0x40002000, x30, x1, 424, x2)

inst_73:
// rs1_h0_val == -8193, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfff;  op2val:0xfff70005
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xff7fdfff, 0xfff70005, x30, x1, 432, x2)

inst_74:
// rs1_h0_val == -4097, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xbfffefff;  op2val:0xbfffffbf
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xbfffefff, 0xbfffffbf, x30, x1, 440, x2)

inst_75:
// rs1_h1_val == rs2_h1_val, rs1_h1_val == -17, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -21846, rs2_h1_val == -17, rs2_h0_val == -9
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaa;  op2val:0xffeffff7
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0xffefaaaa, 0xffeffff7, x30, x1, 448, x2)

inst_76:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 128, rs1_h0_val == 32, rs2_h0_val == -257
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x800020;  op2val:0x1000feff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x00000000, 0x800020, 0x1000feff, x30, x1, 456, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 116*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
