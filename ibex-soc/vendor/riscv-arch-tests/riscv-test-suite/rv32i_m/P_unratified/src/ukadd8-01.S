
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukadd8 instruction of the RISC-V RV32PZicsr extension for the ukadd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukadd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x7, rd==x17, rs1_b0_val == 0, rs2_b2_val == 191, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b3_val == 128, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 170, rs2_b3_val == 170, rs1_b1_val == 128, rs2_b1_val == 254
// opcode: ukadd8 ; op1:x5; op2:x7; dest:x17; op1val:0x80038000;  op2val:0xaabffeaa
TEST_RR_OP(ukadd8, x17, x5, x7, 0x00000000, 0x80038000, 0xaabffeaa, x4, 0, x9)

inst_1:// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x15, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b1_val == 223, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 239, rs1_b2_val == 4, rs2_b2_val == 85
// opcode: ukadd8 ; op1:x19; op2:x19; dest:x15; op1val:0x1204df12;  op2val:0x125512ef
TEST_RR_OP(ukadd8, x15, x19, x19, 0x00000000, 0x1204df12, 0x125512ef, x4, 8, x9)

inst_2:// rs1 == rd != rs2, rs1==x21, rs2==x27, rd==x21, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 239, rs2_b3_val == 247, rs2_b0_val == 64, rs1_b2_val == 239, rs1_b3_val == 191, rs2_b1_val == 16
// opcode: ukadd8 ; op1:x21; op2:x27; dest:x21; op1val:0xbfefdf03;  op2val:0xf7ef1040
TEST_RR_OP(ukadd8, x21, x21, x27, 0x00000000, 0xbfefdf03, 0xf7ef1040, x4, 16, x9)

inst_3:// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 32, rs1_b1_val == 239, rs1_b0_val == 2, rs2_b2_val == 0, rs2_b0_val == 16, rs2_b1_val == 239
// opcode: ukadd8 ; op1:x20; op2:x20; dest:x20; op1val:0x2003ef02;  op2val:0x300ef10
TEST_RR_OP(ukadd8, x20, x20, x20, 0x00000000, 0x2003ef02, 0x300ef10, x4, 24, x9)

inst_4:// rs2 == rd != rs1, rs1==x2, rs2==x25, rd==x25, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == 4, rs1_b0_val == 32, rs2_b2_val == 64, rs2_b3_val == 85, rs1_b1_val == 4, rs2_b0_val == 32
// opcode: ukadd8 ; op1:x2; op2:x25; dest:x25; op1val:0x120c0420;  op2val:0x55400420
TEST_RR_OP(ukadd8, x25, x2, x25, 0x00000000, 0x120c0420, 0x55400420, x4, 32, x9)

inst_5:// rs1==x22, rs2==x12, rd==x5, rs2_b3_val == 127, rs2_b0_val == 223, rs2_b2_val == 16, rs1_b2_val == 170, rs1_b3_val == 8
// opcode: ukadd8 ; op1:x22; op2:x12; dest:x5; op1val:0x8aa130f;  op2val:0x7f10efdf
TEST_RR_OP(ukadd8, x5, x22, x12, 0x00000000, 0x8aa130f, 0x7f10efdf, x4, 40, x9)

inst_6:// rs1==x15, rs2==x6, rd==x2, rs2_b3_val == 191, rs2_b1_val == 1, rs1_b3_val == 127, rs1_b2_val == 254
// opcode: ukadd8 ; op1:x15; op2:x6; dest:x2; op1val:0x7ffe0511;  op2val:0xbf0901aa
TEST_RR_OP(ukadd8, x2, x15, x6, 0x00000000, 0x7ffe0511, 0xbf0901aa, x4, 48, x9)

inst_7:// rs1==x14, rs2==x11, rd==x1, rs2_b3_val == 223, rs1_b1_val == 251, rs2_b0_val == 1, rs1_b2_val == 127
// opcode: ukadd8 ; op1:x14; op2:x11; dest:x1; op1val:0xbf7ffb00;  op2val:0xdf121301
TEST_RR_OP(ukadd8, x1, x14, x11, 0x00000000, 0xbf7ffb00, 0xdf121301, x4, 56, x9)

inst_8:// rs1==x25, rs2==x0, rd==x29, rs2_b3_val == 239, rs1_b2_val == 0, rs1_b1_val == 1, rs2_b1_val == 64, rs1_b0_val == 170
// opcode: ukadd8 ; op1:x25; op2:x0; dest:x29; op1val:0x7f0001aa;  op2val:0xef0d400e
TEST_RR_OP(ukadd8, x29, x25, x0, 0x00000000, 0x7f0001aa, 0xef0d400e, x4, 64, x9)

inst_9:// rs1==x7, rs2==x2, rd==x16, rs2_b3_val == 251, rs2_b0_val == 254
// opcode: ukadd8 ; op1:x7; op2:x2; dest:x16; op1val:0xc06ef20;  op2val:0xfb03fefe
TEST_RR_OP(ukadd8, x16, x7, x2, 0x00000000, 0xc06ef20, 0xfb03fefe, x4, 72, x9)

inst_10:// rs1==x26, rs2==x1, rd==x30, rs2_b3_val == 253, rs2_b1_val == 170, rs1_b3_val == 239, rs2_b0_val == 255
// opcode: ukadd8 ; op1:x26; op2:x1; dest:x30; op1val:0xefaa040e;  op2val:0xfd10aaff
TEST_RR_OP(ukadd8, x30, x26, x1, 0x00000000, 0xefaa040e, 0xfd10aaff, x4, 80, x9)

inst_11:// rs1==x8, rs2==x29, rd==x0, rs2_b3_val == 254, rs1_b0_val == 247, rs1_b3_val == 64, rs1_b2_val == 253
// opcode: ukadd8 ; op1:x8; op2:x29; dest:x0; op1val:0x40fd09f7;  op2val:0xfe070705
TEST_RR_OP(ukadd8, x0, x8, x29, 0x00000000, 0x40fd09f7, 0xfe070705, x4, 88, x9)

inst_12:// rs1==x6, rs2==x3, rd==x10, rs2_b3_val == 128, rs2_b1_val == 0, rs1_b2_val == 128
// opcode: ukadd8 ; op1:x6; op2:x3; dest:x10; op1val:0xf800f02;  op2val:0x800e00ff
TEST_RR_OP(ukadd8, x10, x6, x3, 0x00000000, 0xf800f02, 0x800e00ff, x4, 96, x9)

inst_13:// rs1==x31, rs2==x21, rd==x18, rs2_b3_val == 64, rs1_b0_val == 223, rs1_b2_val == 8, rs2_b2_val == 254
// opcode: ukadd8 ; op1:x31; op2:x21; dest:x18; op1val:0x20080bdf;  op2val:0x40fe40aa
TEST_RR_OP(ukadd8, x18, x31, x21, 0x00000000, 0x20080bdf, 0x40fe40aa, x4, 104, x9)

inst_14:// rs1==x10, rs2==x28, rd==x19, rs2_b3_val == 32, rs1_b0_val == 191, rs1_b2_val == 1, rs2_b2_val == 127
// opcode: ukadd8 ; op1:x10; op2:x28; dest:x19; op1val:0xf0103bf;  op2val:0x207f0a0a
TEST_RR_OP(ukadd8, x19, x10, x28, 0x00000000, 0xf0103bf, 0x207f0a0a, x4, 112, x9)

inst_15:// rs1==x1, rs2==x22, rd==x13, rs2_b3_val == 16, rs1_b0_val == 64
// opcode: ukadd8 ; op1:x1; op2:x22; dest:x13; op1val:0x77f0540;  op2val:0x100905ff
TEST_RR_OP(ukadd8, x13, x1, x22, 0x00000000, 0x77f0540, 0x100905ff, x4, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:// rs1==x23, rs2==x30, rd==x11, rs2_b3_val == 8, rs1_b0_val == 239
// opcode: ukadd8 ; op1:x23; op2:x30; dest:x11; op1val:0x200ddfef;  op2val:0x80aaa07
TEST_RR_OP(ukadd8, x11, x23, x30, 0x00000000, 0x200ddfef, 0x80aaa07, x1, 0, x2)

inst_17:// rs1==x0, rs2==x18, rd==x28, rs2_b3_val == 4, rs2_b1_val == 251, rs1_b1_val == 191, rs2_b0_val == 191, rs2_b2_val == 4
// opcode: ukadd8 ; op1:x0; op2:x18; dest:x28; op1val:0x120cbf02;  op2val:0x404fbbf
TEST_RR_OP(ukadd8, x28, x0, x18, 0x00000000, 0x120cbf02, 0x404fbbf, x1, 8, x2)

inst_18:// rs1==x28, rs2==x26, rd==x12, rs2_b3_val == 2, rs2_b1_val == 128, rs2_b2_val == 247
// opcode: ukadd8 ; op1:x28; op2:x26; dest:x12; op1val:0xe03fb0e;  op2val:0x2f78006
TEST_RR_OP(ukadd8, x12, x28, x26, 0x00000000, 0xe03fb0e, 0x2f78006, x1, 16, x2)

inst_19:// rs1==x24, rs2==x5, rd==x27, rs2_b3_val == 1, rs1_b3_val == 4, rs2_b0_val == 8, rs1_b1_val == 255, rs2_b1_val == 32
// opcode: ukadd8 ; op1:x24; op2:x5; dest:x27; op1val:0x406ffbf;  op2val:0x1552008
TEST_RR_OP(ukadd8, x27, x24, x5, 0x00000000, 0x406ffbf, 0x1552008, x1, 24, x2)

inst_20:// rs1==x16, rs2==x9, rd==x7, rs2_b3_val == 255, rs1_b1_val == 170, rs1_b3_val == 247
// opcode: ukadd8 ; op1:x16; op2:x9; dest:x7; op1val:0xf7feaa05;  op2val:0xff030510
TEST_RR_OP(ukadd8, x7, x16, x9, 0x00000000, 0xf7feaa05, 0xff030510, x1, 32, x2)

inst_21:// rs1==x11, rs2==x24, rd==x8, rs2_b3_val == 0, rs1_b0_val == 255, rs1_b2_val == 16, rs2_b1_val == 255, rs1_b1_val == 8
// opcode: ukadd8 ; op1:x11; op2:x24; dest:x8; op1val:0x7f1008ff;  op2val:0x55ffdf
TEST_RR_OP(ukadd8, x8, x11, x24, 0x00000000, 0x7f1008ff, 0x55ffdf, x1, 40, x2)

inst_22:// rs1==x13, rs2==x10, rd==x6, rs2_b2_val == 170, rs1_b2_val == 247, rs1_b0_val == 4, rs1_b1_val == 16, rs2_b1_val == 8
// opcode: ukadd8 ; op1:x13; op2:x10; dest:x6; op1val:0xaf71004;  op2val:0x7faa0803
TEST_RR_OP(ukadd8, x6, x13, x10, 0x00000000, 0xaf71004, 0x7faa0803, x1, 48, x2)

inst_23:// rs1==x29, rs2==x17, rd==x14, rs2_b2_val == 223, 
// opcode: ukadd8 ; op1:x29; op2:x17; dest:x14; op1val:0x9041206;  op2val:0xfdf0512
TEST_RR_OP(ukadd8, x14, x29, x17, 0x00000000, 0x9041206, 0xfdf0512, x1, 56, x2)

inst_24:// rs1==x30, rs2==x14, rd==x4, rs1_b1_val == 85, 
// opcode: ukadd8 ; op1:x30; op2:x14; dest:x4; op1val:0xf115502;  op2val:0x37f80ff
TEST_RR_OP(ukadd8, x4, x30, x14, 0x00000000, 0xf115502, 0x37f80ff, x1, 64, x2)

inst_25:// rs1==x3, rs2==x15, rd==x31, rs1_b1_val == 127, rs2_b1_val == 223, rs2_b0_val == 128
// opcode: ukadd8 ; op1:x3; op2:x15; dest:x31; op1val:0x9fe7f40;  op2val:0xaa0ddf80
TEST_RR_OP(ukadd8, x31, x3, x15, 0x00000000, 0x9fe7f40, 0xaa0ddf80, x1, 72, x2)

inst_26:// rs1==x12, rs2==x16, rd==x22, rs1_b1_val == 247, rs2_b1_val == 127
// opcode: ukadd8 ; op1:x12; op2:x16; dest:x22; op1val:0x800df711;  op2val:0x3107f05
TEST_RR_OP(ukadd8, x22, x12, x16, 0x00000000, 0x800df711, 0x3107f05, x1, 80, x2)

inst_27:// rs1==x17, rs2==x8, rd==x3, rs1_b1_val == 253, 
// opcode: ukadd8 ; op1:x17; op2:x8; dest:x3; op1val:0x4fdfd12;  op2val:0x1000baa
TEST_RR_OP(ukadd8, x3, x17, x8, 0x00000000, 0x4fdfd12, 0x1000baa, x1, 88, x2)

inst_28:// rs1==x18, rs2==x23, rd==x26, rs1_b1_val == 254, rs2_b0_val == 0, rs1_b0_val == 85
// opcode: ukadd8 ; op1:x18; op2:x23; dest:x26; op1val:0x907fe55;  op2val:0xfb070300
TEST_RR_OP(ukadd8, x26, x18, x23, 0x00000000, 0x907fe55, 0xfb070300, x1, 96, x2)

inst_29:// rs1==x4, rs2==x31, rd==x23, rs1_b1_val == 64, rs2_b2_val == 128
// opcode: ukadd8 ; op1:x4; op2:x31; dest:x23; op1val:0xbef4006;  op2val:0xff800740
TEST_RR_OP(ukadd8, x23, x4, x31, 0x00000000, 0xbef4006, 0xff800740, x1, 104, x2)

inst_30:// rs1==x9, rs2==x13, rd==x24, rs1_b1_val == 32, 
// opcode: ukadd8 ; op1:x9; op2:x13; dest:x24; op1val:0xf70b2009;  op2val:0xdf050012
TEST_RR_OP(ukadd8, x24, x9, x13, 0x00000000, 0xf70b2009, 0xdf050012, x1, 112, x2)

inst_31:// rs1==x27, rs2==x4, rd==x9, rs1_b1_val == 2, rs1_b2_val == 2, rs1_b0_val == 128
// opcode: ukadd8 ; op1:x27; op2:x4; dest:x9; op1val:0x40020280;  op2val:0xe110606
TEST_RR_OP(ukadd8, x9, x27, x4, 0x00000000, 0x40020280, 0xe110606, x1, 120, x2)

inst_32:// rs1_b1_val == 0, rs1_b0_val == 8
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fe0008;  op2val:0x12002013
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x3fe0008, 0x12002013, x1, 128, x2)

inst_33:// rs1_b0_val == 127, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1104807f;  op2val:0xb098011
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x1104807f, 0xb098011, x1, 136, x2)

inst_34:// rs1_b0_val == 251, rs1_b2_val == 223
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5df08fb;  op2val:0x110306df
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x5df08fb, 0x110306df, x1, 144, x2)

inst_35:// rs1_b0_val == 253, rs2_b0_val == 4
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70e03fd;  op2val:0x40100304
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xf70e03fd, 0x40100304, x1, 152, x2)

inst_36:// rs1_b0_val == 254, rs1_b3_val == 170
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0e07fe;  op2val:0x40080c
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xaa0e07fe, 0x40080c, x1, 160, x2)

inst_37:// rs1_b0_val == 16, rs2_b1_val == 247
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdef1110;  op2val:0xf06f7ef
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xdef1110, 0xf06f7ef, x1, 168, x2)

inst_38:// rs2_b2_val == 251, rs1_b2_val == 191
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4bf800c;  op2val:0x4fbffdf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x4bf800c, 0x4fbffdf, x1, 176, x2)

inst_39:// rs2_b2_val == 253, rs1_b2_val == 64, rs1_b3_val == 254
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe400d0d;  op2val:0xffd0307
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xfe400d0d, 0xffd0307, x1, 184, x2)

inst_40:// rs2_b1_val == 2, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x58013bf;  op2val:0xf0d02ef
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x58013bf, 0xf0d02ef, x1, 192, x2)

inst_41:// rs2_b0_val == 85, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa10010c;  op2val:0xbdf0c55
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xaa10010c, 0xbdf0c55, x1, 200, x2)

inst_42:// rs2_b0_val == 127, rs2_b2_val == 2
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7000904;  op2val:0xff027f7f
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x7000904, 0xff027f7f, x1, 208, x2)

inst_43:// rs2_b0_val == 247, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xd010d07;  op2val:0xbff7fff7
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xd010d07, 0xbff7fff7, x1, 216, x2)

inst_44:// rs2_b0_val == 251, rs1_b3_val == 1, rs2_b2_val == 1
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fdfe00;  op2val:0x11010bfb
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x1fdfe00, 0x11010bfb, x1, 224, x2)

inst_45:// rs2_b0_val == 253, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fdfe05;  op2val:0x555507fd
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x3fdfe05, 0x555507fd, x1, 232, x2)

inst_46:// rs2_b0_val == 2, rs1_b2_val == 251, rs2_b2_val == 255
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfb0004;  op2val:0x55ffdf02
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xdfb0004, 0x55ffdf02, x1, 240, x2)

inst_47:// rs1_b3_val == 85, rs2_b1_val == 191
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5509aa09;  op2val:0xfefdbf02
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x5509aa09, 0xfefdbf02, x1, 248, x2)

inst_48:// rs1_b3_val == 223, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfbffe13;  op2val:0x5580027f
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xdfbffe13, 0x5580027f, x1, 256, x2)

inst_49:// rs1_b3_val == 251, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb405506;  op2val:0xd0a0c55
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xfb405506, 0xd0a0c55, x1, 264, x2)

inst_50:// rs1_b3_val == 253, rs1_b2_val == 32
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd20110b;  op2val:0xff0d0c0d
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xfd20110b, 0xff0d0c0d, x1, 272, x2)

inst_51:// rs1_b0_val == 1, rs2_b2_val == 8
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4005df01;  op2val:0x10080f06
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x4005df01, 0x10080f06, x1, 280, x2)

inst_52:// rs1_b3_val == 16, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x10010a00;  op2val:0xffd0701
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x10010a00, 0xffd0701, x1, 288, x2)

inst_53:// rs2_b2_val == 32, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf0f03f7;  op2val:0xbf200f07
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xf0f03f7, 0xbf200f07, x1, 296, x2)

inst_54:// rs2_b1_val == 85, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4efef0e;  op2val:0x2df5580
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x4efef0e, 0x2df5580, x1, 304, x2)

inst_55:// rs1_b3_val == 2, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2080d06;  op2val:0x7f1300fd
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x2080d06, 0x7f1300fd, x1, 312, x2)

inst_56:// rs2_b1_val == 253, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fbaa7f;  op2val:0xaabffd08
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x5fbaa7f, 0xaabffd08, x1, 320, x2)

inst_57:// rs1_b3_val == 255, rs1_b2_val == 255
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0b55;  op2val:0xf7207f7f
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0xffff0b55, 0xf7207f7f, x1, 328, x2)

inst_58:// rs1_b3_val == 0, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x00fd13;  op2val:0xdfef0c12
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x00fd13, 0xdfef0c12, x1, 336, x2)

inst_59:// rs1_b2_val == 85, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x955aa04;  op2val:0x10082013
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x955aa04, 0x10082013, x1, 344, x2)

inst_60:// rs2_b3_val == 239, rs1_b2_val == 0, rs1_b1_val == 1, rs2_b1_val == 64, rs1_b0_val == 170
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0001aa;  op2val:0xef0d400e
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x7f0001aa, 0xef0d400e, x1, 352, x2)

inst_61:// rs2_b3_val == 4, rs2_b1_val == 251, rs1_b1_val == 191, rs2_b0_val == 191, rs2_b2_val == 4
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x120cbf02;  op2val:0x404fbbf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x00000000, 0x120cbf02, 0x404fbbf, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
