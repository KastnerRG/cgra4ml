
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukcrsa16 instruction of the RISC-V RV32PZicsr extension for the ukcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x5, rd==x14, rs1_h0_val == 0, rs1_h1_val == 65503, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: ukcrsa16 ; op1:x17; op2:x5; dest:x14; op1val:0xffdf0000;  op2val:0x120011
TEST_PKRR_OP(ukcrsa16, x14, x17, x5, 0x00000000, 0xffdf0000, 0x120011, x17, x2, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x6, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 61439, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 61439, rs2_h0_val == 65519
// opcode: ukcrsa16 ; op1:x8; op2:x8; dest:x6; op1val:0xefff0003;  op2val:0xefffffef
TEST_PKRR_OP(ukcrsa16, x6, x8, x8, 0x00000000, 0xefff0003, 0xefffffef, x8, x2, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x11, rs2==x28, rd==x11, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 65471
// opcode: ukcrsa16 ; op1:x11; op2:x28; dest:x11; op1val:0xffbf000e;  op2val:0x0d000e
TEST_PKRR_OP(ukcrsa16, x11, x11, x28, 0x00000000, 0xffbf000e, 0x0d000e, x11, x2, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs2_h1_val == 43690, rs1_h1_val == 57343, rs1_h0_val == 65534, rs2_h0_val == 65527
// opcode: ukcrsa16 ; op1:x10; op2:x10; dest:x10; op1val:0xdffffffe;  op2val:0xaaaafff7
TEST_PKRR_OP(ukcrsa16, x10, x10, x10, 0x00000000, 0xdffffffe, 0xaaaafff7, x10, x2, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x26, rd==x26, rs2_h1_val == 21845, rs2_h0_val == 512, rs1_h0_val == 64
// opcode: ukcrsa16 ; op1:x20; op2:x26; dest:x26; op1val:0xefff0040;  op2val:0x55550200
TEST_PKRR_OP(ukcrsa16, x26, x20, x26, 0x00000000, 0xefff0040, 0x55550200, x20, x2, 32, x9)

inst_5:
// rs1==x29, rs2==x1, rd==x13, rs2_h1_val == 32767, 
// opcode: ukcrsa16 ; op1:x29; op2:x1; dest:x13; op1val:0x0c000a;  op2val:0x7fff000d
TEST_PKRR_OP(ukcrsa16, x13, x29, x1, 0x00000000, 0x0c000a, 0x7fff000d, x29, x2, 40, x9)

inst_6:
// rs1==x27, rs2==x4, rd==x28, rs2_h1_val == 49151, rs2_h0_val == 1024, rs1_h1_val == 43690
// opcode: ukcrsa16 ; op1:x27; op2:x4; dest:x28; op1val:0xaaaa0007;  op2val:0xbfff0400
TEST_PKRR_OP(ukcrsa16, x28, x27, x4, 0x00000000, 0xaaaa0007, 0xbfff0400, x27, x2, 48, x9)

inst_7:
// rs1==x23, rs2==x6, rd==x16, rs2_h1_val == 57343, rs2_h0_val == 256
// opcode: ukcrsa16 ; op1:x23; op2:x6; dest:x16; op1val:0x090011;  op2val:0xdfff0100
TEST_PKRR_OP(ukcrsa16, x16, x23, x6, 0x00000000, 0x090011, 0xdfff0100, x23, x2, 56, x9)

inst_8:
// rs1==x12, rs2==x25, rd==x18, rs2_h1_val == 63487, rs1_h0_val == 65533, rs2_h0_val == 0, rs1_h1_val == 65533
// opcode: ukcrsa16 ; op1:x12; op2:x25; dest:x18; op1val:0xfffdfffd;  op2val:0xf7ff0000
TEST_PKRR_OP(ukcrsa16, x18, x12, x25, 0x00000000, 0xfffdfffd, 0xf7ff0000, x12, x2, 64, x9)

inst_9:
// rs1==x30, rs2==x29, rd==x7, rs2_h1_val == 64511, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x7; op1val:0xffbf000b;  op2val:0xfbff000b
TEST_PKRR_OP(ukcrsa16, x7, x30, x29, 0x00000000, 0xffbf000b, 0xfbff000b, x30, x2, 72, x9)

inst_10:
// rs1==x14, rs2==x3, rd==x5, rs2_h1_val == 65023, rs1_h1_val == 2048
// opcode: ukcrsa16 ; op1:x14; op2:x3; dest:x5; op1val:0x8000000;  op2val:0xfdff0013
TEST_PKRR_OP(ukcrsa16, x5, x14, x3, 0x00000000, 0x8000000, 0xfdff0013, x14, x2, 80, x9)

inst_11:
// rs1==x25, rs2==x21, rd==x29, rs2_h1_val == 65279, rs2_h0_val == 21845
// opcode: ukcrsa16 ; op1:x25; op2:x21; dest:x29; op1val:0x09000e;  op2val:0xfeff5555
TEST_PKRR_OP(ukcrsa16, x29, x25, x21, 0x00000000, 0x09000e, 0xfeff5555, x25, x2, 88, x9)

inst_12:
// rs1==x3, rs2==x24, rd==x27, rs2_h1_val == 65407, rs1_h1_val == 65407, rs2_h0_val == 2048
// opcode: ukcrsa16 ; op1:x3; op2:x24; dest:x27; op1val:0xff7f000c;  op2val:0xff7f0800
TEST_PKRR_OP(ukcrsa16, x27, x3, x24, 0x00000000, 0xff7f000c, 0xff7f0800, x3, x2, 96, x9)

inst_13:
// rs1==x1, rs2==x18, rd==x0, rs2_h1_val == 65471, rs1_h1_val == 16384, rs2_h0_val == 65534
// opcode: ukcrsa16 ; op1:x1; op2:x18; dest:x0; op1val:0x4000fffd;  op2val:0xffbffffe
TEST_PKRR_OP(ukcrsa16, x0, x1, x18, 0x00000000, 0x4000fffd, 0xffbffffe, x1, x2, 104, x9)

inst_14:
// rs1==x28, rs2==x19, rd==x24, rs2_h1_val == 65503, rs2_h0_val == 16384
// opcode: ukcrsa16 ; op1:x28; op2:x19; dest:x24; op1val:0x4000000b;  op2val:0xffdf4000
TEST_PKRR_OP(ukcrsa16, x24, x28, x19, 0x00000000, 0x4000000b, 0xffdf4000, x28, x2, 112, x9)

inst_15:
// rs1==x31, rs2==x17, rd==x12, rs2_h1_val == 65519, rs1_h1_val == 63487
// opcode: ukcrsa16 ; op1:x31; op2:x17; dest:x12; op1val:0xf7ff0000;  op2val:0xffeffff7
TEST_PKRR_OP(ukcrsa16, x12, x31, x17, 0x00000000, 0xf7ff0000, 0xffeffff7, x31, x2, 120, x10)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x6, rs2==x20, rd==x1, rs2_h1_val == 65527, rs1_h0_val == 65279
// opcode: ukcrsa16 ; op1:x6; op2:x20; dest:x1; op1val:0x07feff;  op2val:0xfff70007
TEST_PKRR_OP(ukcrsa16, x1, x6, x20, 0x00000000, 0x07feff, 0xfff70007, x6, x5, 0, x10)

inst_17:
// rs1==x16, rs2==x23, rd==x21, rs2_h1_val == 65531, rs1_h0_val == 61439
// opcode: ukcrsa16 ; op1:x16; op2:x23; dest:x21; op1val:0x09efff;  op2val:0xfffb0800
TEST_PKRR_OP(ukcrsa16, x21, x16, x23, 0x00000000, 0x09efff, 0xfffb0800, x16, x5, 8, x10)

inst_18:
// rs1==x26, rs2==x27, rd==x4, rs2_h1_val == 65533, rs2_h0_val == 63487
// opcode: ukcrsa16 ; op1:x26; op2:x27; dest:x4; op1val:0x0f000e;  op2val:0xfffdf7ff
TEST_PKRR_OP(ukcrsa16, x4, x26, x27, 0x00000000, 0x0f000e, 0xfffdf7ff, x26, x5, 16, x10)

inst_19:
// rs1==x18, rs2==x2, rd==x17, rs2_h1_val == 65534, rs1_h0_val == 8
// opcode: ukcrsa16 ; op1:x18; op2:x2; dest:x17; op1val:0x40000008;  op2val:0xfffe0013
TEST_PKRR_OP(ukcrsa16, x17, x18, x2, 0x00000000, 0x40000008, 0xfffe0013, x18, x5, 24, x10)

inst_20:
// rs1==x15, rs2==x30, rd==x2, rs2_h1_val == 32768, rs1_h1_val == 2
// opcode: ukcrsa16 ; op1:x15; op2:x30; dest:x2; op1val:0x02000d;  op2val:0x80000013
TEST_PKRR_OP(ukcrsa16, x2, x15, x30, 0x00000000, 0x02000d, 0x80000013, x15, x5, 32, x10)

inst_21:
// rs1==x13, rs2==x14, rd==x8, rs2_h1_val == 16384, 
// opcode: ukcrsa16 ; op1:x13; op2:x14; dest:x8; op1val:0xffdf0012;  op2val:0x40000013
TEST_PKRR_OP(ukcrsa16, x8, x13, x14, 0x00000000, 0xffdf0012, 0x40000013, x13, x5, 40, x10)

inst_22:
// rs1==x2, rs2==x31, rd==x3, rs2_h1_val == 8192, rs1_h0_val == 16384, rs1_h1_val == 4, rs2_h0_val == 4096
// opcode: ukcrsa16 ; op1:x2; op2:x31; dest:x3; op1val:0x044000;  op2val:0x20001000
TEST_PKRR_OP(ukcrsa16, x3, x2, x31, 0x00000000, 0x044000, 0x20001000, x2, x5, 48, x10)

inst_23:
// rs1==x19, rs2==x22, rd==x25, rs2_h1_val == 4096, rs1_h1_val == 4096, rs2_h0_val == 65535, rs1_h0_val == 65535
// opcode: ukcrsa16 ; op1:x19; op2:x22; dest:x25; op1val:0x1000ffff;  op2val:0x1000ffff
TEST_PKRR_OP(ukcrsa16, x25, x19, x22, 0x00000000, 0x1000ffff, 0x1000ffff, x19, x5, 56, x10)

inst_24:
// rs1==x24, rs2==x9, rd==x20, rs2_h1_val == 2048, rs2_h0_val == 2, rs1_h0_val == 57343
// opcode: ukcrsa16 ; op1:x24; op2:x9; dest:x20; op1val:0x0edfff;  op2val:0x8000002
TEST_PKRR_OP(ukcrsa16, x20, x24, x9, 0x00000000, 0x0edfff, 0x8000002, x24, x5, 64, x10)

inst_25:
// rs1==x7, rs2==x0, rd==x9, rs2_h1_val == 1024, rs1_h0_val == 64511, rs2_h0_val == 43690, rs1_h1_val == 65534
// opcode: ukcrsa16 ; op1:x7; op2:x0; dest:x9; op1val:0xfffefbff;  op2val:0x400aaaa
TEST_PKRR_OP(ukcrsa16, x9, x7, x0, 0x00000000, 0xfffefbff, 0x400aaaa, x7, x5, 72, x10)

inst_26:
// rs1==x9, rs2==x13, rd==x23, rs2_h1_val == 512, rs1_h0_val == 32767, rs2_h0_val == 57343
// opcode: ukcrsa16 ; op1:x9; op2:x13; dest:x23; op1val:0x0d7fff;  op2val:0x200dfff
TEST_PKRR_OP(ukcrsa16, x23, x9, x13, 0x00000000, 0x0d7fff, 0x200dfff, x9, x5, 80, x2)

inst_27:
// rs1==x22, rs2==x11, rd==x30, rs2_h1_val == 256, 
// opcode: ukcrsa16 ; op1:x22; op2:x11; dest:x30; op1val:0xff7fffff;  op2val:0x1000400
TEST_PKRR_OP(ukcrsa16, x30, x22, x11, 0x00000000, 0xff7fffff, 0x1000400, x22, x5, 88, x2)

inst_28:
// rs1==x21, rs2==x12, rd==x15, rs2_h1_val == 128, rs1_h1_val == 49151, rs1_h0_val == 63487, rs2_h0_val == 8
// opcode: ukcrsa16 ; op1:x21; op2:x12; dest:x15; op1val:0xbffff7ff;  op2val:0x800008
TEST_PKRR_OP(ukcrsa16, x15, x21, x12, 0x00000000, 0xbffff7ff, 0x800008, x21, x5, 96, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x0, rs2==x15, rd==x19, rs2_h1_val == 64, 
// opcode: ukcrsa16 ; op1:x0; op2:x15; dest:x19; op1val:0x120005;  op2val:0x400011
TEST_PKRR_OP(ukcrsa16, x19, x0, x15, 0x00000000, 0x120005, 0x400011, x0, x1, 0, x2)

inst_30:
// rs1==x5, rs2==x16, rd==x22, rs2_h1_val == 32, rs1_h0_val == 1, rs2_h0_val == 64
// opcode: ukcrsa16 ; op1:x5; op2:x16; dest:x22; op1val:0xf7ff0001;  op2val:0x200040
TEST_PKRR_OP(ukcrsa16, x22, x5, x16, 0x00000000, 0xf7ff0001, 0x200040, x5, x1, 8, x2)

inst_31:
// rs1==x4, rs2==x7, rd==x31, rs2_h1_val == 16, rs1_h0_val == 2, rs2_h0_val == 32767, rs1_h1_val == 32767
// opcode: ukcrsa16 ; op1:x4; op2:x7; dest:x31; op1val:0x7fff0002;  op2val:0x107fff
TEST_PKRR_OP(ukcrsa16, x31, x4, x7, 0x00000000, 0x7fff0002, 0x107fff, x4, x1, 16, x2)

inst_32:
// rs2_h1_val == 8, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f0008;  op2val:0x080009
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x0f0008, 0x080009, x30, x1, 24, x2)

inst_33:
// rs1_h0_val == 65531, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb;  op2val:0x1000dfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x4000fffb, 0x1000dfff, x30, x1, 32, x2)

inst_34:
// rs1_h0_val == 32768, rs1_h1_val == 8
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x088000;  op2val:0x110003
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x088000, 0x110003, x30, x1, 40, x2)

inst_35:
// rs1_h0_val == 8192, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x052000;  op2val:0xfdffffef
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x052000, 0xfdffffef, x30, x1, 48, x2)

inst_36:
// rs1_h0_val == 4096, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x031000;  op2val:0x1000040
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x031000, 0x1000040, x30, x1, 56, x2)

inst_37:
// rs1_h0_val == 2048, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030800;  op2val:0x09000b
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x030800, 0x09000b, x30, x1, 64, x2)

inst_38:
// rs1_h0_val == 1024, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030400;  op2val:0xfff7fff7
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x030400, 0xfff7fff7, x30, x1, 72, x2)

inst_39:
// rs1_h0_val == 512, rs1_h1_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0200;  op2val:0x80000b
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffef0200, 0x80000b, x30, x1, 80, x2)

inst_40:
// rs1_h0_val == 256, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0100;  op2val:0x0efff7
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xbfff0100, 0x0efff7, x30, x1, 88, x2)

inst_41:
// rs1_h0_val == 128, rs1_h1_val == 32
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080;  op2val:0xffbf0011
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x200080, 0xffbf0011, x30, x1, 96, x2)

inst_42:
// rs1_h0_val == 32, rs2_h1_val == 65535
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0020;  op2val:0xffff5555
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffbf0020, 0xffff5555, x30, x1, 104, x2)

inst_43:
// rs1_h0_val == 16, rs1_h1_val == 21845, rs2_h1_val == 1
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550010;  op2val:0x01000a
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x55550010, 0x01000a, x30, x1, 112, x2)

inst_44:
// rs1_h0_val == 4, rs2_h1_val == 4
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0004;  op2val:0x040040
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffbf0004, 0x040040, x30, x1, 120, x2)

inst_45:
// rs2_h1_val == 2, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000a;  op2val:0x02dfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfffe000a, 0x02dfff, x30, x1, 128, x2)

inst_46:
// rs2_h1_val == 0, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0006;  op2val:0x00ffef
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xf7ff0006, 0x00ffef, x30, x1, 136, x2)

inst_47:
// rs2_h0_val == 49151, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x050100;  op2val:0x11bfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x050100, 0x11bfff, x30, x1, 144, x2)

inst_48:
// rs2_h0_val == 61439, rs1_h0_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffef;  op2val:0x10efff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x02ffef, 0x10efff, x30, x1, 152, x2)

inst_49:
// rs2_h0_val == 64511, rs1_h0_val == 65503
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffdf;  op2val:0x04fbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x03ffdf, 0x04fbff, x30, x1, 160, x2)

inst_50:
// rs2_h0_val == 65023, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060080;  op2val:0x13fdff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x060080, 0x13fdff, x30, x1, 168, x2)

inst_51:
// rs2_h0_val == 65279, rs1_h0_val == 65023
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfdff;  op2val:0x07feff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfffdfdff, 0x07feff, x30, x1, 176, x2)

inst_52:
// rs2_h0_val == 65407, rs1_h1_val == 64511
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0080;  op2val:0x08ff7f
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfbff0080, 0x08ff7f, x30, x1, 184, x2)

inst_53:
// rs2_h0_val == 65471, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06f7ff;  op2val:0x1000ffbf
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x06f7ff, 0x1000ffbf, x30, x1, 192, x2)

inst_54:
// rs2_h0_val == 128, rs1_h1_val == 32768
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000dfff;  op2val:0x120080
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x8000dfff, 0x120080, x30, x1, 200, x2)

inst_55:
// rs2_h0_val == 32, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x122000;  op2val:0x070020
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x122000, 0x070020, x30, x1, 208, x2)

inst_56:
// rs2_h0_val == 16, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0080;  op2val:0x120010
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffdf0080, 0x120010, x30, x1, 216, x2)

inst_57:
// rs2_h0_val == 4, rs1_h0_val == 43690
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaa;  op2val:0xaaaa0004
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x20aaaa, 0xaaaa0004, x30, x1, 224, x2)

inst_58:
// rs2_h0_val == 1, rs1_h1_val == 128
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000b;  op2val:0xfffe0001
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x80000b, 0xfffe0001, x30, x1, 232, x2)

inst_59:
// rs1_h1_val == 65023, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0xfeffff7f
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0xfeffff7f, x30, x1, 240, x2)

inst_60:
// rs1_h1_val == 65279, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0006;  op2val:0xff7f0008
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfeff0006, 0xff7f0008, x30, x1, 248, x2)

inst_61:
// rs1_h1_val == 65527, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0x7fff0040
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfff77fff, 0x7fff0040, x30, x1, 256, x2)

inst_62:
// rs1_h1_val == 65531, rs2_h0_val == 8192
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040;  op2val:0xfbff2000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfffb0040, 0xfbff2000, x30, x1, 264, x2)

inst_63:
// rs1_h1_val == 8192, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000400;  op2val:0xaaaaaaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x20000400, 0xaaaaaaaa, x30, x1, 272, x2)

inst_64:
// rs1_h1_val == 1024, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000002;  op2val:0x200000e
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x4000002, 0x200000e, x30, x1, 280, x2)

inst_65:
// rs1_h1_val == 512, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2001000;  op2val:0xfbff000e
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x2001000, 0xfbff000e, x30, x1, 288, x2)

inst_66:
// rs1_h1_val == 256, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000008;  op2val:0xfffb0004
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x1000008, 0xfffb0004, x30, x1, 296, x2)

inst_67:
// rs1_h1_val == 64, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x407fff;  op2val:0x11000e
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x407fff, 0x11000e, x30, x1, 304, x2)

inst_68:
// rs1_h1_val == 16, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10efff;  op2val:0xffdf0001
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x10efff, 0xffdf0001, x30, x1, 312, x2)

inst_69:
// rs2_h0_val == 32768, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000f;  op2val:0x0f8000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x05000f, 0x0f8000, x30, x1, 320, x2)

inst_70:
// rs1_h1_val == 1, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf;  op2val:0x06ff7f
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x01ffdf, 0x06ff7f, x30, x1, 328, x2)

inst_71:
// rs1_h1_val == 65535, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xff7f000c
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfffffffb, 0xff7f000c, x30, x1, 336, x2)

inst_72:
// rs1_h1_val == 0, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c;  op2val:0xbfffbfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x00000c, 0xbfffbfff, x30, x1, 344, x2)

inst_73:
// rs1_h0_val == 21845, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x055555;  op2val:0x080800
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x055555, 0x080800, x30, x1, 352, x2)

inst_74:
// rs1_h0_val == 49151, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff;  op2val:0x800000a
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x40bfff, 0x800000a, x30, x1, 360, x2)

inst_75:
// rs2_h0_val == 65503, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000e;  op2val:0xfffbffdf
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffdf000e, 0xfffbffdf, x30, x1, 368, x2)

inst_76:
// rs2_h0_val == 65531, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0003;  op2val:0xf7fffffb
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xffef0003, 0xf7fffffb, x30, x1, 376, x2)

inst_77:
// rs2_h0_val == 65533, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000800;  op2val:0x4000fffd
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x80000800, 0x4000fffd, x30, x1, 384, x2)

inst_78:
// rs1_h0_val == 65407, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7f;  op2val:0x040040
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x100ff7f, 0x040040, x30, x1, 392, x2)

inst_79:
// rs1_h0_val == 65471, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffbf;  op2val:0x10000008
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x00ffbf, 0x10000008, x30, x1, 400, x2)

inst_80:
// rs1_h0_val == 65527, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff7;  op2val:0x8000aaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x03fff7, 0x8000aaaa, x30, x1, 408, x2)

inst_81:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 61439, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 61439, rs2_h0_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0003;  op2val:0xefffffef
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xefff0003, 0xefffffef, x30, x1, 416, x2)

inst_82:
// rs2_h1_val == 43690, rs1_h1_val == 57343, rs1_h0_val == 65534, rs2_h0_val == 65527
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffe;  op2val:0xaaaafff7
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xdffffffe, 0xaaaafff7, x30, x1, 424, x2)

inst_83:
// rs2_h1_val == 65471, rs1_h1_val == 16384, rs2_h0_val == 65534
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd;  op2val:0xffbffffe
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x4000fffd, 0xffbffffe, x30, x1, 432, x2)

inst_84:
// rs2_h1_val == 1024, rs1_h0_val == 64511, rs2_h0_val == 43690, rs1_h1_val == 65534
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefbff;  op2val:0x400aaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0xfffefbff, 0x400aaaa, x30, x1, 440, x2)

inst_85:
// rs2_h1_val == 64, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x120005;  op2val:0x400011
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x00000000, 0x120005, 0x400011, x30, x1, 448, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 114*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
