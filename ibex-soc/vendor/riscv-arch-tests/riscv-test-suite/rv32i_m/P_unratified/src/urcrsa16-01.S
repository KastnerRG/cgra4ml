
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urcrsa16 instruction of the RISC-V RV32PZicsr extension for the urcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x22, rd==x27, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65503, rs1_h1_val == 32
// opcode: urcrsa16 ; op1:x31; op2:x22; dest:x27; op1val:0x200000;  op2val:0x0affdf
TEST_RR_OP(urcrsa16, x27, x31, x22, 0x00000000, 0x200000, 0x0affdf, x6, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x11, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: urcrsa16 ; op1:x30; op2:x30; dest:x11; op1val:0x07000d;  op2val:0x070003
TEST_RR_OP(urcrsa16, x11, x30, x30, 0x00000000, 0x07000d, 0x070003, x6, 4, x9)

inst_2:
// rs1 == rd != rs2, rs1==x24, rs2==x31, rd==x24, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs1_h0_val == 4, rs1_h1_val == 32767
// opcode: urcrsa16 ; op1:x24; op2:x31; dest:x24; op1val:0x7fff0004;  op2val:0x030004
TEST_RR_OP(urcrsa16, x24, x24, x31, 0x00000000, 0x7fff0004, 0x030004, x6, 8, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs2_h1_val == 43690, rs1_h1_val == 64, rs2_h0_val == 49151, rs1_h0_val == 65503
// opcode: urcrsa16 ; op1:x1; op2:x1; dest:x1; op1val:0x40ffdf;  op2val:0xaaaabfff
TEST_RR_OP(urcrsa16, x1, x1, x1, 0x00000000, 0x40ffdf, 0xaaaabfff, x6, 12, x9)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x15, rd==x15, rs2_h1_val == 21845, rs1_h0_val == 16384, rs1_h1_val == 128
// opcode: urcrsa16 ; op1:x7; op2:x15; dest:x15; op1val:0x804000;  op2val:0x5555000d
TEST_RR_OP(urcrsa16, x15, x7, x15, 0x00000000, 0x804000, 0x5555000d, x6, 16, x9)

inst_5:
// rs1==x14, rs2==x8, rd==x26, rs2_h1_val == 32767, rs2_h0_val == 63487
// opcode: urcrsa16 ; op1:x14; op2:x8; dest:x26; op1val:0x09000e;  op2val:0x7ffff7ff
TEST_RR_OP(urcrsa16, x26, x14, x8, 0x00000000, 0x09000e, 0x7ffff7ff, x6, 20, x9)

inst_6:
// rs1==x28, rs2==x4, rd==x17, rs2_h1_val == 49151, rs2_h0_val == 64511, rs1_h1_val == 4096, rs1_h0_val == 65407
// opcode: urcrsa16 ; op1:x28; op2:x4; dest:x17; op1val:0x1000ff7f;  op2val:0xbffffbff
TEST_RR_OP(urcrsa16, x17, x28, x4, 0x00000000, 0x1000ff7f, 0xbffffbff, x6, 24, x9)

inst_7:
// rs1==x3, rs2==x5, rd==x14, rs2_h1_val == 57343, rs1_h1_val == 65519
// opcode: urcrsa16 ; op1:x3; op2:x5; dest:x14; op1val:0xffef0004;  op2val:0xdfff0013
TEST_RR_OP(urcrsa16, x14, x3, x5, 0x00000000, 0xffef0004, 0xdfff0013, x6, 28, x9)

inst_8:
// rs1==x20, rs2==x29, rd==x7, rs2_h1_val == 61439, rs2_h0_val == 0
// opcode: urcrsa16 ; op1:x20; op2:x29; dest:x7; op1val:0x13000f;  op2val:0xefff0000
TEST_RR_OP(urcrsa16, x7, x20, x29, 0x00000000, 0x13000f, 0xefff0000, x6, 32, x9)

inst_9:
// rs1==x23, rs2==x24, rd==x4, rs2_h1_val == 63487, rs1_h1_val == 65279
// opcode: urcrsa16 ; op1:x23; op2:x24; dest:x4; op1val:0xfeffff7f;  op2val:0xf7ff0005
TEST_RR_OP(urcrsa16, x4, x23, x24, 0x00000000, 0xfeffff7f, 0xf7ff0005, x6, 36, x9)

inst_10:
// rs1==x29, rs2==x7, rd==x21, rs2_h1_val == 64511, rs1_h1_val == 65527, rs1_h0_val == 61439
// opcode: urcrsa16 ; op1:x29; op2:x7; dest:x21; op1val:0xfff7efff;  op2val:0xfbffbfff
TEST_RR_OP(urcrsa16, x21, x29, x7, 0x00000000, 0xfff7efff, 0xfbffbfff, x6, 40, x9)

inst_11:
// rs1==x4, rs2==x2, rd==x10, rs2_h1_val == 65023, rs2_h0_val == 256, rs1_h1_val == 4
// opcode: urcrsa16 ; op1:x4; op2:x2; dest:x10; op1val:0x04000b;  op2val:0xfdff0100
TEST_RR_OP(urcrsa16, x10, x4, x2, 0x00000000, 0x04000b, 0xfdff0100, x6, 44, x9)

inst_12:
// rs1==x19, rs2==x14, rd==x28, rs2_h1_val == 65279, rs1_h1_val == 8
// opcode: urcrsa16 ; op1:x19; op2:x14; dest:x28; op1val:0x08ff7f;  op2val:0xfeff000a
TEST_RR_OP(urcrsa16, x28, x19, x14, 0x00000000, 0x08ff7f, 0xfeff000a, x6, 48, x9)

inst_13:
// rs1==x8, rs2==x13, rd==x2, rs2_h1_val == 65407, rs2_h0_val == 2
// opcode: urcrsa16 ; op1:x8; op2:x13; dest:x2; op1val:0x0d0003;  op2val:0xff7f0002
TEST_RR_OP(urcrsa16, x2, x8, x13, 0x00000000, 0x0d0003, 0xff7f0002, x6, 52, x9)

inst_14:
// rs1==x0, rs2==x25, rd==x13, rs2_h1_val == 65471, rs1_h1_val == 1
// opcode: urcrsa16 ; op1:x0; op2:x25; dest:x13; op1val:0x01ff7f;  op2val:0xffbf000f
TEST_RR_OP(urcrsa16, x13, x0, x25, 0x00000000, 0x01ff7f, 0xffbf000f, x6, 56, x9)

inst_15:
// rs1==x2, rs2==x16, rd==x8, rs2_h1_val == 65503, rs1_h0_val == 8
// opcode: urcrsa16 ; op1:x2; op2:x16; dest:x8; op1val:0x0c0008;  op2val:0xffdf0007
TEST_RR_OP(urcrsa16, x8, x2, x16, 0x00000000, 0x0c0008, 0xffdf0007, x6, 60, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x9, rs2==x6, rd==x12, rs2_h1_val == 65519, rs2_h0_val == 65527
// opcode: urcrsa16 ; op1:x9; op2:x6; dest:x12; op1val:0x120009;  op2val:0xffeffff7
TEST_RR_OP(urcrsa16, x12, x9, x6, 0x00000000, 0x120009, 0xffeffff7, x1, 0, x4)

inst_17:
// rs1==x13, rs2==x12, rd==x16, rs2_h1_val == 65527, 
// opcode: urcrsa16 ; op1:x13; op2:x12; dest:x16; op1val:0xfeff000a;  op2val:0xfff70013
TEST_RR_OP(urcrsa16, x16, x13, x12, 0x00000000, 0xfeff000a, 0xfff70013, x1, 4, x4)

inst_18:
// rs1==x26, rs2==x10, rd==x3, rs2_h1_val == 65531, rs1_h0_val == 8192
// opcode: urcrsa16 ; op1:x26; op2:x10; dest:x3; op1val:0x052000;  op2val:0xfffb000e
TEST_RR_OP(urcrsa16, x3, x26, x10, 0x00000000, 0x052000, 0xfffb000e, x1, 8, x4)

inst_19:
// rs1==x12, rs2==x21, rd==x18, rs2_h1_val == 65533, rs1_h1_val == 65023
// opcode: urcrsa16 ; op1:x12; op2:x21; dest:x18; op1val:0xfdff2000;  op2val:0xfffd000d
TEST_RR_OP(urcrsa16, x18, x12, x21, 0x00000000, 0xfdff2000, 0xfffd000d, x1, 12, x4)

inst_20:
// rs1==x6, rs2==x27, rd==x25, rs2_h1_val == 65534, rs1_h0_val == 65531
// opcode: urcrsa16 ; op1:x6; op2:x27; dest:x25; op1val:0x0bfffb;  op2val:0xfffef7ff
TEST_RR_OP(urcrsa16, x25, x6, x27, 0x00000000, 0x0bfffb, 0xfffef7ff, x1, 16, x4)

inst_21:
// rs1==x21, rs2==x19, rd==x0, rs2_h1_val == 32768, rs1_h0_val == 128, rs1_h1_val == 65534
// opcode: urcrsa16 ; op1:x21; op2:x19; dest:x0; op1val:0xfffe0080;  op2val:0x8000000f
TEST_RR_OP(urcrsa16, x0, x21, x19, 0x00000000, 0xfffe0080, 0x8000000f, x1, 20, x4)

inst_22:
// rs1==x15, rs2==x17, rd==x22, rs2_h1_val == 16384, rs1_h0_val == 49151
// opcode: urcrsa16 ; op1:x15; op2:x17; dest:x22; op1val:0xfeffbfff;  op2val:0x40000012
TEST_RR_OP(urcrsa16, x22, x15, x17, 0x00000000, 0xfeffbfff, 0x40000012, x1, 24, x4)

inst_23:
// rs1==x18, rs2==x28, rd==x23, rs2_h1_val == 8192, rs2_h0_val == 128
// opcode: urcrsa16 ; op1:x18; op2:x28; dest:x23; op1val:0x40ffdf;  op2val:0x20000080
TEST_RR_OP(urcrsa16, x23, x18, x28, 0x00000000, 0x40ffdf, 0x20000080, x1, 28, x4)

inst_24:
// rs1==x10, rs2==x11, rd==x20, rs2_h1_val == 4096, rs2_h0_val == 65519
// opcode: urcrsa16 ; op1:x10; op2:x11; dest:x20; op1val:0x090013;  op2val:0x1000ffef
TEST_RR_OP(urcrsa16, x20, x10, x11, 0x00000000, 0x090013, 0x1000ffef, x1, 32, x4)

inst_25:
// rs1==x5, rs2==x20, rd==x30, rs2_h1_val == 2048, rs1_h0_val == 32767, rs1_h1_val == 63487, rs2_h0_val == 65471
// opcode: urcrsa16 ; op1:x5; op2:x20; dest:x30; op1val:0xf7ff7fff;  op2val:0x800ffbf
TEST_RR_OP(urcrsa16, x30, x5, x20, 0x00000000, 0xf7ff7fff, 0x800ffbf, x1, 36, x4)

inst_26:
// rs1==x25, rs2==x18, rd==x5, rs2_h1_val == 1024, 
// opcode: urcrsa16 ; op1:x25; op2:x18; dest:x5; op1val:0x0f7fff;  op2val:0x400000f
TEST_RR_OP(urcrsa16, x5, x25, x18, 0x00000000, 0x0f7fff, 0x400000f, x1, 40, x4)

inst_27:
// rs1==x17, rs2==x0, rd==x6, rs2_h1_val == 512, rs2_h0_val == 65279, rs1_h0_val == 1
// opcode: urcrsa16 ; op1:x17; op2:x0; dest:x6; op1val:0xfeff0001;  op2val:0x200feff
TEST_RR_OP(urcrsa16, x6, x17, x0, 0x00000000, 0xfeff0001, 0x200feff, x1, 44, x4)

inst_28:
// rs1==x16, rs2==x23, rd==x31, rs2_h1_val == 256, rs2_h0_val == 21845, rs1_h0_val == 256
// opcode: urcrsa16 ; op1:x16; op2:x23; dest:x31; op1val:0x200100;  op2val:0x1005555
TEST_RR_OP(urcrsa16, x31, x16, x23, 0x00000000, 0x200100, 0x1005555, x1, 48, x4)

inst_29:
// rs1==x11, rs2==x3, rd==x19, rs2_h1_val == 128, rs1_h1_val == 2
// opcode: urcrsa16 ; op1:x11; op2:x3; dest:x19; op1val:0x02000b;  op2val:0x800005
TEST_RR_OP(urcrsa16, x19, x11, x3, 0x00000000, 0x02000b, 0x800005, x1, 52, x4)

inst_30:
// rs1==x27, rs2==x9, rd==x29, rs2_h1_val == 64, 
// opcode: urcrsa16 ; op1:x27; op2:x9; dest:x29; op1val:0xf7fffffb;  op2val:0x40f7ff
TEST_RR_OP(urcrsa16, x29, x27, x9, 0x00000000, 0xf7fffffb, 0x40f7ff, x1, 56, x4)

inst_31:
// rs1==x22, rs2==x26, rd==x9, rs2_h1_val == 32, rs1_h1_val == 16
// opcode: urcrsa16 ; op1:x22; op2:x26; dest:x9; op1val:0x10bfff;  op2val:0x200006
TEST_RR_OP(urcrsa16, x9, x22, x26, 0x00000000, 0x10bfff, 0x200006, x1, 60, x2)

inst_32:
// rs2_h1_val == 16, rs2_h0_val == 65531, rs1_h1_val == 65471, rs1_h0_val == 16
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0010;  op2val:0x10fffb
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffbf0010, 0x10fffb, x1, 64, x2)

inst_33:
// rs2_h1_val == 8, rs1_h0_val == 65279
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07feff;  op2val:0x08000a
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x07feff, 0x08000a, x1, 68, x2)

inst_34:
// rs2_h1_val == 4, rs1_h0_val == 43690
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa;  op2val:0x04feff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x7fffaaaa, 0x04feff, x1, 72, x2)

inst_35:
// rs2_h1_val == 2, rs2_h0_val == 57343
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0011;  op2val:0x02dfff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffef0011, 0x02dfff, x1, 76, x2)

inst_36:
// rs1_h0_val == 65533, rs2_h0_val == 1
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x11fffd;  op2val:0x120001
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x11fffd, 0x120001, x1, 80, x2)

inst_37:
// rs1_h0_val == 65534, rs1_h1_val == 61439
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffe;  op2val:0xfdffffbf
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xeffffffe, 0xfdffffbf, x1, 84, x2)

inst_38:
// rs1_h0_val == 32768, rs2_h0_val == 65407
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe8000;  op2val:0x0bff7f
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfffe8000, 0x0bff7f, x1, 88, x2)

inst_39:
// rs1_h0_val == 4096, rs1_h1_val == 2048
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8001000;  op2val:0xbfff000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x8001000, 0xbfff000e, x1, 92, x2)

inst_40:
// rs1_h0_val == 2048, rs2_h1_val == 1
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x120800;  op2val:0x010003
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x120800, 0x010003, x1, 96, x2)

inst_41:
// rs1_h0_val == 1024, rs2_h0_val == 65534
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x130400;  op2val:0x80fffe
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x130400, 0x80fffe, x1, 100, x2)

inst_42:
// rs1_h0_val == 512, rs1_h1_val == 16384, rs2_h0_val == 32
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000200;  op2val:0xfbff0020
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x40000200, 0xfbff0020, x1, 104, x2)

inst_43:
// rs1_h0_val == 64, rs2_h0_val == 16
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090040;  op2val:0x120010
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x090040, 0x120010, x1, 108, x2)

inst_44:
// rs1_h0_val == 32, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0020;  op2val:0x0dfffe
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfdff0020, 0x0dfffe, x1, 112, x2)

inst_45:
// rs1_h0_val == 2, rs2_h0_val == 32768, rs1_h1_val == 65533
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0002;  op2val:0xaaaa8000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfffd0002, 0xaaaa8000, x1, 116, x2)

inst_46:
// rs1_h0_val == 65535, rs1_h1_val == 65503
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0x118000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffdfffff, 0x118000, x1, 120, x2)

inst_47:
// rs2_h1_val == 65535, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40008000;  op2val:0xffff0006
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x40008000, 0xffff0006, x1, 124, x2)

inst_48:
// rs2_h1_val == 0, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000a;  op2val:0x000012
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffef000a, 0x000012, x1, 128, x2)

inst_49:
// rs2_h0_val == 43690, rs1_h1_val == 65407
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0007;  op2val:0x0baaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xff7f0007, 0x0baaaa, x1, 132, x2)

inst_50:
// rs2_h0_val == 32767, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0010;  op2val:0x0d7fff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x0d0010, 0x0d7fff, x1, 136, x2)

inst_51:
// rs2_h0_val == 61439, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x050006;  op2val:0x200efff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x050006, 0x200efff, x1, 140, x2)

inst_52:
// rs2_h0_val == 65023, rs1_h1_val == 65531
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0020;  op2val:0x00fdff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfffb0020, 0x00fdff, x1, 144, x2)

inst_53:
// rs2_h0_val == 1024, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0eff7f;  op2val:0x4000400
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x0eff7f, 0x4000400, x1, 148, x2)

inst_54:
// rs2_h0_val == 512, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0005;  op2val:0xdfff0200
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfeff0005, 0xdfff0200, x1, 152, x2)

inst_55:
// rs2_h0_val == 64, rs1_h0_val == 21845
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x015555;  op2val:0xbfff0040
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x015555, 0xbfff0040, x1, 156, x2)

inst_56:
// rs2_h0_val == 8, rs1_h1_val == 512
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200bfff;  op2val:0x40000008
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x200bfff, 0x40000008, x1, 160, x2)

inst_57:
// rs2_h0_val == 65535, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000e;  op2val:0x07ffff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x0c000e, 0x07ffff, x1, 164, x2)

inst_58:
// rs1_h1_val == 43690, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa4000;  op2val:0xffbf000b
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xaaaa4000, 0xffbf000b, x1, 168, x2)

inst_59:
// rs1_h1_val == 21845, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550800;  op2val:0x07000b
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x55550800, 0x07000b, x1, 172, x2)

inst_60:
// rs1_h1_val == 49151, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0020;  op2val:0x407fff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xbfff0020, 0x407fff, x1, 176, x2)

inst_61:
// rs1_h1_val == 57343, rs2_h0_val == 4096
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005;  op2val:0x0c1000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xdfff0005, 0x0c1000, x1, 180, x2)

inst_62:
// rs1_h1_val == 64511, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000a;  op2val:0x05feff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfbff000a, 0x05feff, x1, 184, x2)

inst_63:
// rs1_h1_val == 32768, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x0b000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x80000000, 0x0b000e, x1, 188, x2)

inst_64:
// rs2_h0_val == 65533, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030100;  op2val:0x0cfffd
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x030100, 0x0cfffd, x1, 192, x2)

inst_65:
// rs1_h1_val == 8192, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000002;  op2val:0x55555555
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x20000002, 0x55555555, x1, 196, x2)

inst_66:
// rs1_h1_val == 1024, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffdf;  op2val:0x03bfff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x400ffdf, 0x03bfff, x1, 200, x2)

inst_67:
// rs1_h1_val == 256, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1007fff;  op2val:0x03000a
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x1007fff, 0x03000a, x1, 204, x2)

inst_68:
// rs2_h0_val == 16384, rs1_h0_val == 63487
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ef7ff;  op2val:0x4004000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x0ef7ff, 0x4004000, x1, 208, x2)

inst_69:
// rs1_h0_val == 65527, rs2_h0_val == 2048
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff7;  op2val:0xfffe0800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfff7fff7, 0xfffe0800, x1, 212, x2)

inst_70:
// rs1_h1_val == 65535, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000d;  op2val:0xaaaa000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffff000d, 0xaaaa000e, x1, 216, x2)

inst_71:
// rs1_h1_val == 0, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0x0d000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x000200, 0x0d000e, x1, 220, x2)

inst_72:
// rs1_h0_val == 57343, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdfff;  op2val:0xffff0001
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xffbfdfff, 0xffff0001, x1, 224, x2)

inst_73:
// rs1_h0_val == 64511, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fbff;  op2val:0xff7ffffe
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x09fbff, 0xff7ffffe, x1, 228, x2)

inst_74:
// rs1_h0_val == 65023, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff;  op2val:0xff7f0003
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x200fdff, 0xff7f0003, x1, 232, x2)

inst_75:
// rs1_h0_val == 65471, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffbf;  op2val:0x8000ffbf
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x13ffbf, 0x8000ffbf, x1, 236, x2)

inst_76:
// rs2_h0_val == 8192, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff;  op2val:0x052000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x08bfff, 0x052000, x1, 240, x2)

inst_77:
// rs1_h0_val == 65519, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffef;  op2val:0x0b000b
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0x07ffef, 0x0b000b, x1, 244, x2)

inst_78:
// rs2_h1_val == 32768, rs1_h0_val == 128, rs1_h1_val == 65534
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0080;  op2val:0x8000000f
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfffe0080, 0x8000000f, x1, 248, x2)

inst_79:
// rs2_h1_val == 512, rs2_h0_val == 65279, rs1_h0_val == 1
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0001;  op2val:0x200feff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x00000000, 0xfeff0001, 0x200feff, x1, 252, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
