
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smin16 instruction of the RISC-V RV32PZicsr extension for the smin16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smin16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x12, rd==x14, rs1_h0_val == -32768, rs2_h0_val == -3, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: smin16 ; op1:x0; op2:x12; dest:x14; op1val:0x068000;  op2val:0xfffafffd
TEST_RR_OP(smin16, x14, x0, x12, 0x00000000, 0x068000, 0xfffafffd, x8, 0, x18)

inst_1:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x29, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val < 0
// opcode: smin16 ; op1:x9; op2:x9; dest:x29; op1val:0xfff8ffff;  op2val:0xfff85555
TEST_RR_OP(smin16, x29, x9, x9, 0x00000000, 0xfff8ffff, 0xfff85555, x8, 4, x18)

inst_2:
// rs1 == rd != rs2, rs1==x1, rs2==x4, rd==x1, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h1_val == -21846, rs2_h0_val == 4096, rs1_h0_val == -33
// opcode: smin16 ; op1:x1; op2:x4; dest:x1; op1val:0xaaaaffdf;  op2val:0x40001000
TEST_RR_OP(smin16, x1, x1, x4, 0x00000000, 0xaaaaffdf, 0x40001000, x8, 8, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 4
// opcode: smin16 ; op1:x10; op2:x10; dest:x10; op1val:0x05fff9;  op2val:0x060004
TEST_RR_OP(smin16, x10, x10, x10, 0x00000000, 0x05fff9, 0x060004, x8, 12, x18)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x3, rd==x3, rs1_h0_val == rs2_h0_val, rs1_h0_val == 32767, rs2_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smin16 ; op1:x25; op2:x3; dest:x3; op1val:0x037fff;  op2val:0x097fff
TEST_RR_OP(smin16, x3, x25, x3, 0x00000000, 0x037fff, 0x097fff, x8, 16, x18)

inst_5:
// rs1==x2, rs2==x11, rd==x9, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -5, rs2_h1_val == 16, rs1_h0_val == 8192, rs1_h1_val == 1
// opcode: smin16 ; op1:x2; op2:x11; dest:x9; op1val:0x012000;  op2val:0x10fffb
TEST_RR_OP(smin16, x9, x2, x11, 0x00000000, 0x012000, 0x10fffb, x8, 20, x18)

inst_6:
// rs1==x5, rs2==x29, rd==x22, rs2_h1_val == -21846, rs2_h0_val == -1, rs1_h1_val == -3
// opcode: smin16 ; op1:x5; op2:x29; dest:x22; op1val:0xfffdfff8;  op2val:0xaaaaffff
TEST_RR_OP(smin16, x22, x5, x29, 0x00000000, 0xfffdfff8, 0xaaaaffff, x8, 24, x18)

inst_7:
// rs1==x3, rs2==x22, rd==x12, rs2_h1_val == 21845, rs1_h1_val == -32768
// opcode: smin16 ; op1:x3; op2:x22; dest:x12; op1val:0x80003fff;  op2val:0x5555fff9
TEST_RR_OP(smin16, x12, x3, x22, 0x00000000, 0x80003fff, 0x5555fff9, x8, 28, x18)

inst_8:
// rs1==x6, rs2==x16, rd==x11, rs2_h1_val == 32767, rs1_h1_val == -65, rs1_h0_val == 128
// opcode: smin16 ; op1:x6; op2:x16; dest:x11; op1val:0xffbf0080;  op2val:0x7fff0007
TEST_RR_OP(smin16, x11, x6, x16, 0x00000000, 0xffbf0080, 0x7fff0007, x8, 32, x18)

inst_9:
// rs1==x22, rs2==x7, rd==x17, rs2_h1_val == -16385, rs2_h0_val == -21846, rs1_h1_val == 4
// opcode: smin16 ; op1:x22; op2:x7; dest:x17; op1val:0x048000;  op2val:0xbfffaaaa
TEST_RR_OP(smin16, x17, x22, x7, 0x00000000, 0x048000, 0xbfffaaaa, x8, 36, x18)

inst_10:
// rs1==x28, rs2==x13, rd==x21, rs2_h1_val == -8193, rs1_h0_val == -17
// opcode: smin16 ; op1:x28; op2:x13; dest:x21; op1val:0x07ffef;  op2val:0xdfff1000
TEST_RR_OP(smin16, x21, x28, x13, 0x00000000, 0x07ffef, 0xdfff1000, x8, 40, x18)

inst_11:
// rs1==x30, rs2==x5, rd==x26, rs2_h1_val == -4097, rs1_h0_val == 0, rs2_h0_val == -4097
// opcode: smin16 ; op1:x30; op2:x5; dest:x26; op1val:0xfffa0000;  op2val:0xefffefff
TEST_RR_OP(smin16, x26, x30, x5, 0x00000000, 0xfffa0000, 0xefffefff, x8, 44, x18)

inst_12:
// rs1==x21, rs2==x26, rd==x15, rs2_h1_val == -2049, rs2_h0_val == 1
// opcode: smin16 ; op1:x21; op2:x26; dest:x15; op1val:0x06ffff;  op2val:0xf7ff0001
TEST_RR_OP(smin16, x15, x21, x26, 0x00000000, 0x06ffff, 0xf7ff0001, x8, 48, x18)

inst_13:
// rs1==x11, rs2==x14, rd==x28, rs2_h1_val == -1025, rs1_h0_val == 512
// opcode: smin16 ; op1:x11; op2:x14; dest:x28; op1val:0x030200;  op2val:0xfbfffffd
TEST_RR_OP(smin16, x28, x11, x14, 0x00000000, 0x030200, 0xfbfffffd, x8, 52, x18)

inst_14:
// rs1==x19, rs2==x27, rd==x5, rs2_h1_val == -513, rs1_h1_val == 8, rs2_h0_val == 64
// opcode: smin16 ; op1:x19; op2:x27; dest:x5; op1val:0x08fff9;  op2val:0xfdff0040
TEST_RR_OP(smin16, x5, x19, x27, 0x00000000, 0x08fff9, 0xfdff0040, x8, 56, x18)

inst_15:
// rs1==x13, rs2==x23, rd==x0, rs2_h1_val == -257, rs1_h0_val == 2, rs1_h1_val == 2
// opcode: smin16 ; op1:x13; op2:x23; dest:x0; op1val:0x020002;  op2val:0xfefffffa
TEST_RR_OP(smin16, x0, x13, x23, 0x00000000, 0x020002, 0xfefffffa, x8, 60, x18)

inst_16:
// rs1==x24, rs2==x18, rd==x13, rs2_h1_val == -129, 
// opcode: smin16 ; op1:x24; op2:x18; dest:x13; op1val:0x057fff;  op2val:0xff7fefff
TEST_RR_OP(smin16, x13, x24, x18, 0x00000000, 0x057fff, 0xff7fefff, x8, 64, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x14, rs2==x20, rd==x24, rs2_h1_val == -65, 
// opcode: smin16 ; op1:x14; op2:x20; dest:x24; op1val:0x04ffdf;  op2val:0xffbf0040
TEST_RR_OP(smin16, x24, x14, x20, 0x00000000, 0x04ffdf, 0xffbf0040, x3, 0, x5)

inst_18:
// rs1==x31, rs2==x15, rd==x8, rs2_h1_val == -33, rs1_h1_val == -17, rs1_h0_val == 1024
// opcode: smin16 ; op1:x31; op2:x15; dest:x8; op1val:0xffef0400;  op2val:0xffdf0009
TEST_RR_OP(smin16, x8, x31, x15, 0x00000000, 0xffef0400, 0xffdf0009, x3, 4, x5)

inst_19:
// rs1==x15, rs2==x2, rd==x30, rs2_h1_val == -17, rs2_h0_val == -32768
// opcode: smin16 ; op1:x15; op2:x2; dest:x30; op1val:0x03c000;  op2val:0xffef8000
TEST_RR_OP(smin16, x30, x15, x2, 0x00000000, 0x03c000, 0xffef8000, x3, 8, x5)

inst_20:
// rs1==x7, rs2==x17, rd==x23, rs2_h1_val == -9, rs1_h0_val == 64
// opcode: smin16 ; op1:x7; op2:x17; dest:x23; op1val:0xfff80040;  op2val:0xfff70009
TEST_RR_OP(smin16, x23, x7, x17, 0x00000000, 0xfff80040, 0xfff70009, x3, 12, x5)

inst_21:
// rs1==x4, rs2==x24, rd==x19, rs2_h1_val == -5, rs2_h0_val == -16385, rs1_h1_val == -513
// opcode: smin16 ; op1:x4; op2:x24; dest:x19; op1val:0xfdff8000;  op2val:0xfffbbfff
TEST_RR_OP(smin16, x19, x4, x24, 0x00000000, 0xfdff8000, 0xfffbbfff, x3, 16, x5)

inst_22:
// rs1==x16, rs2==x8, rd==x7, rs2_h1_val == -3, rs1_h1_val == 64
// opcode: smin16 ; op1:x16; op2:x8; dest:x7; op1val:0x400002;  op2val:0xfffd0005
TEST_RR_OP(smin16, x7, x16, x8, 0x00000000, 0x400002, 0xfffd0005, x3, 20, x5)

inst_23:
// rs1==x23, rs2==x30, rd==x20, rs2_h1_val == -2, rs1_h0_val == 21845
// opcode: smin16 ; op1:x23; op2:x30; dest:x20; op1val:0x3fff5555;  op2val:0xfffe1000
TEST_RR_OP(smin16, x20, x23, x30, 0x00000000, 0x3fff5555, 0xfffe1000, x3, 24, x5)

inst_24:
// rs1==x12, rs2==x21, rd==x16, rs2_h1_val == -32768, rs1_h0_val == -129, rs2_h0_val == 16384
// opcode: smin16 ; op1:x12; op2:x21; dest:x16; op1val:0x01ff7f;  op2val:0x80004000
TEST_RR_OP(smin16, x16, x12, x21, 0x00000000, 0x01ff7f, 0x80004000, x3, 28, x5)

inst_25:
// rs1==x8, rs2==x6, rd==x18, rs2_h1_val == 8192, 
// opcode: smin16 ; op1:x8; op2:x6; dest:x18; op1val:0x01ff7f;  op2val:0x2000ffff
TEST_RR_OP(smin16, x18, x8, x6, 0x00000000, 0x01ff7f, 0x2000ffff, x3, 32, x5)

inst_26:
// rs1==x29, rs2==x28, rd==x31, rs2_h1_val == 4096, rs1_h0_val == -1025
// opcode: smin16 ; op1:x29; op2:x28; dest:x31; op1val:0x03fbff;  op2val:0x10001000
TEST_RR_OP(smin16, x31, x29, x28, 0x00000000, 0x03fbff, 0x10001000, x3, 36, x5)

inst_27:
// rs1==x26, rs2==x1, rd==x6, rs2_h1_val == 2048, rs1_h0_val == -3
// opcode: smin16 ; op1:x26; op2:x1; dest:x6; op1val:0x40fffd;  op2val:0x8000040
TEST_RR_OP(smin16, x6, x26, x1, 0x00000000, 0x40fffd, 0x8000040, x3, 40, x5)

inst_28:
// rs1==x17, rs2==x25, rd==x27, rs2_h1_val == 1024, rs1_h1_val == -1
// opcode: smin16 ; op1:x17; op2:x25; dest:x27; op1val:0xffff0009;  op2val:0x400fff6
TEST_RR_OP(smin16, x27, x17, x25, 0x00000000, 0xffff0009, 0x400fff6, x3, 44, x5)

inst_29:
// rs1==x18, rs2==x0, rd==x4, rs2_h1_val == 512, rs1_h1_val == -33, rs1_h0_val == 1, rs2_h0_val == 16
// opcode: smin16 ; op1:x18; op2:x0; dest:x4; op1val:0xffdf0001;  op2val:0x2000010
TEST_RR_OP(smin16, x4, x18, x0, 0x00000000, 0xffdf0001, 0x2000010, x3, 48, x5)

inst_30:
// rs1==x20, rs2==x31, rd==x25, rs2_h1_val == 256, rs1_h0_val == -65, rs1_h1_val == -129
// opcode: smin16 ; op1:x20; op2:x31; dest:x25; op1val:0xff7fffbf;  op2val:0x100bfff
TEST_RR_OP(smin16, x25, x20, x31, 0x00000000, 0xff7fffbf, 0x100bfff, x3, 52, x5)

inst_31:
// rs1==x27, rs2==x19, rd==x2, rs2_h1_val == 128, rs2_h0_val == 8192
// opcode: smin16 ; op1:x27; op2:x19; dest:x2; op1val:0xffdf0000;  op2val:0x802000
TEST_RR_OP(smin16, x2, x27, x19, 0x00000000, 0xffdf0000, 0x802000, x3, 56, x5)

inst_32:
// rs2_h1_val == 64, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff8;  op2val:0x407fff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xc000fff8, 0x407fff, x3, 60, x5)

inst_33:
// rs2_h1_val == 32, rs1_h0_val == 4, rs2_h0_val == -9
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x090004;  op2val:0x20fff7
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x090004, 0x20fff7, x3, 64, x5)

inst_34:
// rs2_h1_val == 8, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x060200;  op2val:0x081000
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x060200, 0x081000, x3, 68, x5)

inst_35:
// rs1_h0_val == -513, rs1_h1_val == 8192
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fdff;  op2val:0xc0000005
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x2000fdff, 0xc0000005, x3, 72, x5)

inst_36:
// rs1_h0_val == -257, rs2_h0_val == 256, rs1_h1_val == 1024
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400feff;  op2val:0xaaaa0100
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x400feff, 0xaaaa0100, x3, 76, x5)

inst_37:
// rs1_h0_val == -9, rs1_h1_val == 256
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff7;  op2val:0xfff90003
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x100fff7, 0xfff90003, x3, 80, x5)

inst_38:
// rs1_h0_val == -5, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb;  op2val:0x1000fffa
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff6fffb, 0x1000fffa, x3, 84, x5)

inst_39:
// rs1_h0_val == -2, rs1_h1_val == -9
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffe;  op2val:0x2000005
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff7fffe, 0x2000005, x3, 88, x5)

inst_40:
// rs1_h0_val == 16384, rs2_h0_val == 2048
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff74000;  op2val:0xffef0800
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff74000, 0xffef0800, x3, 92, x5)

inst_41:
// rs1_h0_val == 4096, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff61000;  op2val:0xffeffffc
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff61000, 0xffeffffc, x3, 96, x5)

inst_42:
// rs1_h0_val == 2048, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0800;  op2val:0x800006
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfffc0800, 0x800006, x3, 100, x5)

inst_43:
// rs1_h0_val == 256, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x040100;  op2val:0x400aaaa
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x040100, 0x400aaaa, x3, 104, x5)

inst_44:
// rs1_h0_val == 32, rs1_h1_val == -16385
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0020;  op2val:0xfff70004
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xbfff0020, 0xfff70004, x3, 108, x5)

inst_45:
// rs1_h0_val == 16, rs2_h1_val == 1
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010;  op2val:0x010006
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfdff0010, 0x010006, x3, 112, x5)

inst_46:
// rs1_h0_val == 8, rs2_h0_val == -8193
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0008;  op2val:0xfffedfff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xff7f0008, 0xfffedfff, x3, 116, x5)

inst_47:
// rs2_h1_val == 4, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400400;  op2val:0x04dfff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x400400, 0x04dfff, x3, 120, x5)

inst_48:
// rs2_h1_val == 2, rs1_h1_val == -1025, rs2_h0_val == -17
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008;  op2val:0x02ffef
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfbff0008, 0x02ffef, x3, 124, x5)

inst_49:
// rs2_h1_val == 0, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7;  op2val:0x00dfff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xbffffff7, 0x00dfff, x3, 128, x5)

inst_50:
// rs2_h1_val == -1, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0xffffefff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0xffffefff, x3, 132, x5)

inst_51:
// rs2_h0_val == -2049, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x04feff;  op2val:0x100f7ff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x04feff, 0x100f7ff, x3, 136, x5)

inst_52:
// rs2_h0_val == -1025, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0007;  op2val:0x06fbff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfbff0007, 0x06fbff, x3, 140, x5)

inst_53:
// rs2_h0_val == -513, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x08c000;  op2val:0xfff7fdff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x08c000, 0xfff7fdff, x3, 144, x5)

inst_54:
// rs2_h0_val == -257, rs1_h1_val == 32767
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff3fff;  op2val:0xffdffeff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x7fff3fff, 0xffdffeff, x3, 148, x5)

inst_55:
// rs2_h0_val == -129, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01c000;  op2val:0xfff8ff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x01c000, 0xfff8ff7f, x3, 152, x5)

inst_56:
// rs2_h0_val == -2, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x038000;  op2val:0x02fffe
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x038000, 0x02fffe, x3, 156, x5)

inst_57:
// rs2_h0_val == 1024, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x060080;  op2val:0x40000400
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x060080, 0x40000400, x3, 160, x5)

inst_58:
// rs2_h0_val == 512, rs1_h1_val == -2
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffa;  op2val:0x010200
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfffefffa, 0x010200, x3, 164, x5)

inst_59:
// rs2_h0_val == 128, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff9;  op2val:0x7fff0080
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x03fff9, 0x7fff0080, x3, 168, x5)

inst_60:
// rs2_h0_val == 32, rs1_h1_val == 32
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x204000;  op2val:0x090020
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x204000, 0x090020, x3, 172, x5)

inst_61:
// rs2_h0_val == 8, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90800;  op2val:0xfbff0008
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff90800, 0xfbff0008, x3, 176, x5)

inst_62:
// rs2_h0_val == 2, rs1_h1_val == -5
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0000;  op2val:0x040002
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfffb0000, 0x040002, x3, 180, x5)

inst_63:
// rs2_h0_val == 0, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7f;  op2val:0xfeff0000
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x09ff7f, 0xfeff0000, x3, 184, x5)

inst_64:
// rs1_h1_val == 21845, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550020;  op2val:0x40fffe
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x55550020, 0x40fffe, x3, 188, x5)

inst_65:
// rs1_h1_val == -8193, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005;  op2val:0xfbff0008
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xdfff0005, 0xfbff0008, x3, 192, x5)

inst_66:
// rs1_h1_val == -4097, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000;  op2val:0xffeffffe
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xefffc000, 0xffeffffe, x3, 196, x5)

inst_67:
// rs1_h1_val == -2049, rs1_h0_val == -8193
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffdfff;  op2val:0x8000ffff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xf7ffdfff, 0x8000ffff, x3, 200, x5)

inst_68:
// rs1_h1_val == 16384, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400;  op2val:0x20000080
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x40000400, 0x20000080, x3, 204, x5)

inst_69:
// rs1_h1_val == 4096, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd;  op2val:0x401000
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x1000fffd, 0x401000, x3, 208, x5)

inst_70:
// rs1_h1_val == 2048, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fdff;  op2val:0x104000
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x800fdff, 0x104000, x3, 212, x5)

inst_71:
// rs1_h1_val == 512, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff6;  op2val:0x8000800
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x200fff6, 0x8000800, x3, 216, x5)

inst_72:
// rs1_h1_val == 128, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x805555;  op2val:0xfbfffffb
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x805555, 0xfbfffffb, x3, 220, x5)

inst_73:
// rs2_h0_val == -65, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffdf;  op2val:0xfff7ffbf
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x06ffdf, 0xfff7ffbf, x3, 224, x5)

inst_74:
// rs1_h1_val == 16, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffff;  op2val:0x107fff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x10ffff, 0x107fff, x3, 228, x5)

inst_75:
// rs1_h1_val == -257, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0800;  op2val:0x4000010
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfeff0800, 0x4000010, x3, 232, x5)

inst_76:
// rs1_h1_val == 0, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0x04fffe
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x002000, 0x04fffe, x3, 236, x5)

inst_77:
// rs1_h0_val == -21846, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9aaaa;  op2val:0x80000020
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff9aaaa, 0x80000020, x3, 240, x5)

inst_78:
// rs1_h0_val == -16385, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01bfff;  op2val:0xfffcfdff
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x01bfff, 0xfffcfdff, x3, 244, x5)

inst_79:
// rs2_h0_val == -33, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80010;  op2val:0x20ffdf
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff80010, 0x20ffdf, x3, 248, x5)

inst_80:
// rs1_h0_val == -4097, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100efff;  op2val:0x3fff0010
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x100efff, 0x3fff0010, x3, 252, x5)

inst_81:
// rs1_h0_val == -2049, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff;  op2val:0x800ffdf
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x01f7ff, 0x800ffdf, x3, 256, x5)

inst_82:
// rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h0_val == -1, rs1_h1_val < 0 and rs2_h1_val < 0
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffff;  op2val:0xfff85555
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xfff8ffff, 0xfff85555, x3, 260, x5)

inst_83:
// rs2_h1_val == -257, rs1_h0_val == 2, rs1_h1_val == 2
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x020002;  op2val:0xfefffffa
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0x020002, 0xfefffffa, x3, 264, x5)

inst_84:
// rs2_h1_val == 512, rs1_h1_val == -33, rs1_h0_val == 1, rs2_h0_val == 16
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0001;  op2val:0x2000010
TEST_RR_OP(smin16, x31, x30, x29, 0x00000000, 0xffdf0001, 0x2000010, x3, 268, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
