
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smbb16 instruction of the RISC-V RV32PZicsr extension for the smbb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smbb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x7, rd==x15, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs2_h1_val == 4096, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs1_h1_val == -257
// opcode: smbb16 ; op1:x19; op2:x7; dest:x15; op1val:0xfeff8000;  op2val:0x10000004
TEST_RR_OP(smbb16, x15, x19, x7, 0x00000000, 0xfeff8000, 0x10000004, x3, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x27, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -21846, rs1_h1_val == -21846, rs2_h0_val == -513
// opcode: smbb16 ; op1:x13; op2:x13; dest:x27; op1val:0xaaaa0003;  op2val:0xaaaafdff
TEST_RR_OP(smbb16, x27, x13, x13, 0x00000000, 0xaaaa0003, 0xaaaafdff, x3, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x21, rs2==x30, rd==x21, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32767
// opcode: smbb16 ; op1:x21; op2:x30; dest:x21; op1val:0x7fff8000;  op2val:0xfffc0003
TEST_RR_OP(smbb16, x21, x21, x30, 0x00000000, 0x7fff8000, 0xfffc0003, x3, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 32767, rs2_h1_val == 2048, rs1_h1_val == 2
// opcode: smbb16 ; op1:x9; op2:x9; dest:x9; op1val:0x027fff;  op2val:0x800fff9
TEST_RR_OP(smbb16, x9, x9, x9, 0x00000000, 0x027fff, 0x800fff9, x3, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x6, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h0_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 8
// opcode: smbb16 ; op1:x18; op2:x6; dest:x6; op1val:0xfff88000;  op2val:0x088000
TEST_RR_OP(smbb16, x6, x18, x6, 0x00000000, 0xfff88000, 0x088000, x3, 16, x5)

inst_5:
// rs1==x22, rs2==x10, rd==x14, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2, rs1_h1_val == -4097, rs2_h0_val == 4096, rs2_h1_val == -129
// opcode: smbb16 ; op1:x22; op2:x10; dest:x14; op1val:0xefff0002;  op2val:0xff7f1000
TEST_RR_OP(smbb16, x14, x22, x10, 0x00000000, 0xefff0002, 0xff7f1000, x3, 20, x5)

inst_6:
// rs1==x27, rs2==x31, rd==x8, rs2_h1_val == 21845, rs1_h1_val == 16
// opcode: smbb16 ; op1:x27; op2:x31; dest:x8; op1val:0x100007;  op2val:0x5555fff9
TEST_RR_OP(smbb16, x8, x27, x31, 0x00000000, 0x100007, 0x5555fff9, x3, 24, x5)

inst_7:
// rs1==x11, rs2==x23, rd==x31, rs2_h1_val == 32767, rs1_h1_val == -16385, rs2_h0_val == -3, rs1_h0_val == -33
// opcode: smbb16 ; op1:x11; op2:x23; dest:x31; op1val:0xbfffffdf;  op2val:0x7ffffffd
TEST_RR_OP(smbb16, x31, x11, x23, 0x00000000, 0xbfffffdf, 0x7ffffffd, x3, 28, x5)

inst_8:
// rs1==x26, rs2==x22, rd==x12, rs2_h1_val == -16385, rs1_h0_val == 2048, rs2_h0_val == -17, rs1_h1_val == -129
// opcode: smbb16 ; op1:x26; op2:x22; dest:x12; op1val:0xff7f0800;  op2val:0xbfffffef
TEST_RR_OP(smbb16, x12, x26, x22, 0x00000000, 0xff7f0800, 0xbfffffef, x3, 32, x5)

inst_9:
// rs1==x29, rs2==x16, rd==x2, rs2_h1_val == -8193, rs1_h0_val == 8, rs1_h1_val == 21845
// opcode: smbb16 ; op1:x29; op2:x16; dest:x2; op1val:0x55550008;  op2val:0xdfffffef
TEST_RR_OP(smbb16, x2, x29, x16, 0x00000000, 0x55550008, 0xdfffffef, x3, 36, x5)

inst_10:
// rs1==x30, rs2==x27, rd==x4, rs2_h1_val == -4097, rs1_h1_val == -65, rs2_h0_val == -129, rs1_h0_val == 8192
// opcode: smbb16 ; op1:x30; op2:x27; dest:x4; op1val:0xffbf2000;  op2val:0xefffff7f
TEST_RR_OP(smbb16, x4, x30, x27, 0x00000000, 0xffbf2000, 0xefffff7f, x3, 40, x5)

inst_11:
// rs1==x25, rs2==x14, rd==x17, rs2_h1_val == -2049, rs1_h0_val == -4097
// opcode: smbb16 ; op1:x25; op2:x14; dest:x17; op1val:0xfeffefff;  op2val:0xf7ff0003
TEST_RR_OP(smbb16, x17, x25, x14, 0x00000000, 0xfeffefff, 0xf7ff0003, x3, 44, x5)

inst_12:
// rs1==x31, rs2==x18, rd==x23, rs2_h1_val == -1025, rs2_h0_val == -1025, rs1_h0_val == 16, rs1_h1_val == 256
// opcode: smbb16 ; op1:x31; op2:x18; dest:x23; op1val:0x1000010;  op2val:0xfbfffbff
TEST_RR_OP(smbb16, x23, x31, x18, 0x00000000, 0x1000010, 0xfbfffbff, x3, 48, x5)

inst_13:
// rs1==x1, rs2==x4, rd==x16, rs2_h1_val == -513, rs1_h0_val == -1025, rs1_h1_val == -8193, rs2_h0_val == -4097
// opcode: smbb16 ; op1:x1; op2:x4; dest:x16; op1val:0xdffffbff;  op2val:0xfdffefff
TEST_RR_OP(smbb16, x16, x1, x4, 0x00000000, 0xdffffbff, 0xfdffefff, x3, 52, x5)

inst_14:
// rs1==x20, rs2==x19, rd==x7, rs2_h1_val == -257, rs1_h1_val == 2048, rs2_h0_val == 8
// opcode: smbb16 ; op1:x20; op2:x19; dest:x7; op1val:0x8000002;  op2val:0xfeff0008
TEST_RR_OP(smbb16, x7, x20, x19, 0x00000000, 0x8000002, 0xfeff0008, x3, 56, x10)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_15:
// rs1==x3, rs2==x28, rd==x30, rs2_h1_val == -65, rs1_h0_val == 256, rs2_h0_val == 256
// opcode: smbb16 ; op1:x3; op2:x28; dest:x30; op1val:0xc0000100;  op2val:0xffbf0100
TEST_RR_OP(smbb16, x30, x3, x28, 0x00000000, 0xc0000100, 0xffbf0100, x9, 0, x10)

inst_16:
// rs1==x16, rs2==x25, rd==x11, rs2_h1_val == -33, rs1_h0_val == -21846, rs2_h0_val == -1
// opcode: smbb16 ; op1:x16; op2:x25; dest:x11; op1val:0xc000aaaa;  op2val:0xffdfffff
TEST_RR_OP(smbb16, x11, x16, x25, 0x00000000, 0xc000aaaa, 0xffdfffff, x9, 4, x10)

inst_17:
// rs1==x14, rs2==x26, rd==x22, rs2_h1_val == -17, 
// opcode: smbb16 ; op1:x14; op2:x26; dest:x22; op1val:0x55552000;  op2val:0xffeffff9
TEST_RR_OP(smbb16, x22, x14, x26, 0x00000000, 0x55552000, 0xffeffff9, x9, 8, x10)

inst_18:
// rs1==x7, rs2==x3, rd==x0, rs2_h1_val == -9, rs1_h1_val == 32, rs2_h0_val == 16384
// opcode: smbb16 ; op1:x7; op2:x3; dest:x0; op1val:0x20fffa;  op2val:0xfff74000
TEST_RR_OP(smbb16, x0, x7, x3, 0x00000000, 0x20fffa, 0xfff74000, x9, 12, x10)

inst_19:
// rs1==x23, rs2==x29, rd==x3, rs2_h1_val == -5, rs1_h0_val == 64, rs1_h1_val == -32768
// opcode: smbb16 ; op1:x23; op2:x29; dest:x3; op1val:0x80000040;  op2val:0xfffbffff
TEST_RR_OP(smbb16, x3, x23, x29, 0x00000000, 0x80000040, 0xfffbffff, x9, 16, x10)

inst_20:
// rs1==x17, rs2==x2, rd==x28, rs2_h1_val == -3, rs1_h0_val == 32
// opcode: smbb16 ; op1:x17; op2:x2; dest:x28; op1val:0x090020;  op2val:0xfffdfffa
TEST_RR_OP(smbb16, x28, x17, x2, 0x00000000, 0x090020, 0xfffdfffa, x9, 20, x10)

inst_21:
// rs1==x4, rs2==x11, rd==x29, rs2_h1_val == -2, 
// opcode: smbb16 ; op1:x4; op2:x11; dest:x29; op1val:0xfff60003;  op2val:0xfffe1000
TEST_RR_OP(smbb16, x29, x4, x11, 0x00000000, 0xfff60003, 0xfffe1000, x9, 24, x10)

inst_22:
// rs1==x0, rs2==x17, rd==x24, rs2_h1_val == -32768, rs1_h1_val == -33
// opcode: smbb16 ; op1:x0; op2:x17; dest:x24; op1val:0xffdf7fff;  op2val:0x8000c000
TEST_RR_OP(smbb16, x24, x0, x17, 0x00000000, 0xffdf7fff, 0x8000c000, x9, 28, x10)

inst_23:
// rs1==x2, rs2==x12, rd==x1, rs2_h1_val == 16384, rs1_h0_val == -17
// opcode: smbb16 ; op1:x2; op2:x12; dest:x1; op1val:0x09ffef;  op2val:0x4000fdff
TEST_RR_OP(smbb16, x1, x2, x12, 0x00000000, 0x09ffef, 0x4000fdff, x9, 32, x10)

inst_24:
// rs1==x12, rs2==x0, rd==x18, rs2_h1_val == 8192, rs1_h1_val == 16384, rs1_h0_val == -513, rs2_h0_val == 128
// opcode: smbb16 ; op1:x12; op2:x0; dest:x18; op1val:0x4000fdff;  op2val:0x20000080
TEST_RR_OP(smbb16, x18, x12, x0, 0x00000000, 0x4000fdff, 0x20000080, x9, 36, x10)

inst_25:
// rs1==x6, rs2==x21, rd==x26, rs2_h1_val == 1024, rs1_h1_val == -1025
// opcode: smbb16 ; op1:x6; op2:x21; dest:x26; op1val:0xfbff0009;  op2val:0x4000009
TEST_RR_OP(smbb16, x26, x6, x21, 0x00000000, 0xfbff0009, 0x4000009, x9, 40, x10)

inst_26:
// rs1==x5, rs2==x1, rd==x25, rs2_h1_val == 512, rs2_h0_val == 2, rs1_h0_val == 0, rs1_h1_val == 8192
// opcode: smbb16 ; op1:x5; op2:x1; dest:x25; op1val:0x20000000;  op2val:0x2000002
TEST_RR_OP(smbb16, x25, x5, x1, 0x00000000, 0x20000000, 0x2000002, x9, 44, x10)

inst_27:
// rs1==x8, rs2==x20, rd==x13, rs2_h1_val == 256, 
// opcode: smbb16 ; op1:x8; op2:x20; dest:x13; op1val:0x030800;  op2val:0x100ffff
TEST_RR_OP(smbb16, x13, x8, x20, 0x00000000, 0x030800, 0x100ffff, x9, 48, x10)

inst_28:
// rs1==x10, rs2==x8, rd==x5, rs2_h1_val == 128, rs2_h0_val == -21846
// opcode: smbb16 ; op1:x10; op2:x8; dest:x5; op1val:0xfff8ffdf;  op2val:0x80aaaa
TEST_RR_OP(smbb16, x5, x10, x8, 0x00000000, 0xfff8ffdf, 0x80aaaa, x9, 52, x2)

inst_29:
// rs1==x28, rs2==x15, rd==x10, rs2_h1_val == 64, 
// opcode: smbb16 ; op1:x28; op2:x15; dest:x10; op1val:0x7fffffef;  op2val:0x40fbff
TEST_RR_OP(smbb16, x10, x28, x15, 0x00000000, 0x7fffffef, 0x40fbff, x9, 56, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x15, rs2==x24, rd==x19, rs1_h0_val == -257, rs2_h0_val == 21845
// opcode: smbb16 ; op1:x15; op2:x24; dest:x19; op1val:0x05feff;  op2val:0x55555555
TEST_RR_OP(smbb16, x19, x15, x24, 0x00000000, 0x05feff, 0x55555555, x1, 0, x2)

inst_31:
// rs1==x24, rs2==x5, rd==x20, rs1_h0_val == -129, 
// opcode: smbb16 ; op1:x24; op2:x5; dest:x20; op1val:0x8000ff7f;  op2val:0x8000fdff
TEST_RR_OP(smbb16, x20, x24, x5, 0x00000000, 0x8000ff7f, 0x8000fdff, x1, 4, x2)

inst_32:
// rs1_h0_val == -65, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffbf;  op2val:0x55551000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff9ffbf, 0x55551000, x1, 8, x2)

inst_33:
// rs1_h0_val == -9, rs2_h0_val == 32767
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7;  op2val:0xfff77fff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x4000fff7, 0xfff77fff, x1, 12, x2)

inst_34:
// rs1_h0_val == -5, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffb;  op2val:0xfffb4000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xff7ffffb, 0xfffb4000, x1, 16, x2)

inst_35:
// rs1_h0_val == -3, rs1_h1_val == 1
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd;  op2val:0xfff6efff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x01fffd, 0xfff6efff, x1, 20, x2)

inst_36:
// rs1_h0_val == -2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe;  op2val:0xffbf0005
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x100fffe, 0xffbf0005, x1, 24, x2)

inst_37:
// rs1_h0_val == 16384, rs2_h0_val == 1024, rs1_h1_val == 4096
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10004000;  op2val:0x1000400
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x10004000, 0x1000400, x1, 28, x2)

inst_38:
// rs1_h0_val == 4096, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0001000;  op2val:0xbfff1000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xc0001000, 0xbfff1000, x1, 32, x2)

inst_39:
// rs1_h0_val == 1024, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000400;  op2val:0xfffdfdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x8000400, 0xfffdfdff, x1, 36, x2)

inst_40:
// rs1_h0_val == 512, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x070200;  op2val:0xfff60004
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x070200, 0xfff60004, x1, 40, x2)

inst_41:
// rs1_h0_val == 128, rs2_h0_val == -257, rs1_h1_val == 4
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x040080;  op2val:0xdffffeff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x040080, 0xdffffeff, x1, 44, x2)

inst_42:
// rs1_h0_val == 4, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x020004;  op2val:0x03fffc
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x020004, 0x03fffc, x1, 48, x2)

inst_43:
// rs1_h0_val == 1, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x090001;  op2val:0xaaaafeff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x090001, 0xaaaafeff, x1, 52, x2)

inst_44:
// rs1_h0_val == -1, rs2_h1_val == 4
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffff;  op2val:0x04c000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff6ffff, 0x04c000, x1, 56, x2)

inst_45:
// rs2_h1_val == 32, rs2_h0_val == 1, rs1_h1_val == 8
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x083fff;  op2val:0x200001
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x083fff, 0x200001, x1, 60, x2)

inst_46:
// rs2_h1_val == 16, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0020;  op2val:0x100001
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffa0020, 0x100001, x1, 64, x2)

inst_47:
// rs2_h1_val == 2, rs2_h0_val == 64
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6feff;  op2val:0x020040
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff6feff, 0x020040, x1, 68, x2)

inst_48:
// rs2_h1_val == 1, rs1_h1_val == -513, rs2_h0_val == -2049
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffbff;  op2val:0x01f7ff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfdfffbff, 0x01f7ff, x1, 72, x2)

inst_49:
// rs2_h1_val == 0, rs1_h0_val == -2049
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaf7ff;  op2val:0x000006
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffaf7ff, 0x000006, x1, 76, x2)

inst_50:
// rs2_h0_val == -5, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffc;  op2val:0xfff8fffb
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff9fffc, 0xfff8fffb, x1, 80, x2)

inst_51:
// rs2_h0_val == -2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0006;  op2val:0xfffefffe
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x3fff0006, 0xfffefffe, x1, 84, x2)

inst_52:
// rs2_h0_val == 8192, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef;  op2val:0xff7f2000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x800ffef, 0xff7f2000, x1, 88, x2)

inst_53:
// rs2_h0_val == 2048, rs1_h1_val == -9
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0xfbff0800
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff77fff, 0xfbff0800, x1, 92, x2)

inst_54:
// rs2_h0_val == 512, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x080200;  op2val:0x040200
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x080200, 0x040200, x1, 96, x2)

inst_55:
// rs2_h0_val == 32, rs1_h1_val == 0
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffdf;  op2val:0xbfff0020
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x00ffdf, 0xbfff0020, x1, 100, x2)

inst_56:
// rs2_h0_val == 16, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0200;  op2val:0x010010
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xffdf0200, 0x010010, x1, 104, x2)

inst_57:
// rs2_h0_val == 0, rs1_h1_val == 512
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000005;  op2val:0x030000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x2000005, 0x030000, x1, 108, x2)

inst_58:
// rs1_h1_val == -2049, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbff;  op2val:0xfff9f7ff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xf7fffbff, 0xfff9f7ff, x1, 112, x2)

inst_59:
// rs1_h1_val == -17, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff8;  op2val:0x091000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xffeffff8, 0x091000, x1, 116, x2)

inst_60:
// rs1_h1_val == -5, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008;  op2val:0x404000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffb0008, 0x404000, x1, 120, x2)

inst_61:
// rs1_h1_val == -3, rs1_h0_val == -16385
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbfff;  op2val:0xfffefdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffdbfff, 0xfffefdff, x1, 124, x2)

inst_62:
// rs1_h1_val == -2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe8000;  op2val:0xfff7fffe
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffe8000, 0xfff7fffe, x1, 128, x2)

inst_63:
// rs1_h1_val == 1024, rs1_h0_val == -8193
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400dfff;  op2val:0xffefefff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x400dfff, 0xffefefff, x1, 132, x2)

inst_64:
// rs1_h1_val == 128, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x801000;  op2val:0xffdffffc
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x801000, 0xffdffffc, x1, 136, x2)

inst_65:
// rs2_h1_val == -1, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbf;  op2val:0xfffffffc
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xffdfffbf, 0xfffffffc, x1, 140, x2)

inst_66:
// rs1_h1_val == 64, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x403fff;  op2val:0xc000fdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x403fff, 0xc000fdff, x1, 144, x2)

inst_67:
// rs2_h0_val == -16385, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x077fff;  op2val:0xfffcbfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x077fff, 0xfffcbfff, x1, 148, x2)

inst_68:
// rs2_h0_val == -8193, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000efff;  op2val:0xfffadfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xc000efff, 0xfffadfff, x1, 152, x2)

inst_69:
// rs1_h1_val == -1, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xffeffffc
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xffffdfff, 0xffeffffc, x1, 156, x2)

inst_70:
// rs1_h0_val == 21845, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff75555;  op2val:0xffff0003
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfff75555, 0xffff0003, x1, 160, x2)

inst_71:
// rs2_h0_val == -65, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040;  op2val:0xfffaffbf
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffb0040, 0xfffaffbf, x1, 164, x2)

inst_72:
// rs2_h0_val == -33, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff8;  op2val:0xfffeffdf
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x7ffffff8, 0xfffeffdf, x1, 168, x2)

inst_73:
// rs2_h0_val == -9, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff;  op2val:0xfffefff7
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xfffb7fff, 0xfffefff7, x1, 172, x2)

inst_74:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -21846, rs1_h1_val == -21846, rs2_h0_val == -513
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0003;  op2val:0xaaaafdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0xaaaa0003, 0xaaaafdff, x1, 176, x2)

inst_75:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 32767, rs2_h1_val == 2048, rs1_h1_val == 2
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x027fff;  op2val:0x800fff9
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x027fff, 0x800fff9, x1, 180, x2)

inst_76:
// rs2_h1_val == -9, rs1_h1_val == 32, rs2_h0_val == 16384
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffa;  op2val:0xfff74000
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x20fffa, 0xfff74000, x1, 184, x2)

inst_77:
// rs2_h1_val == 8192, rs1_h1_val == 16384, rs1_h0_val == -513, rs2_h0_val == 128
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdff;  op2val:0x20000080
TEST_RR_OP(smbb16, x31, x30, x29, 0x00000000, 0x4000fdff, 0x20000080, x1, 188, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
