
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smulx8 instruction of the RISC-V RV32PZicsr extension for the smulx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smulx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x31, rd==x16, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b3_val == -1, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b2_val == -1, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b1_val == -2, rs1_b3_val == 0
// opcode: smulx8 ; op1:x21; op2:x31; dest:x16; op1val:0x00fffe80;  op2val:0xff0703c0
TEST_P64_PNN_OP(smulx8, x16, x17, x21, x31, 0x00000000, 0, 0x00fffe80, 0xff0703c0, x1, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x2, rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b0_val == 127, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val == -17, rs1_b0_val > 0 and rs2_b0_val < 0
// opcode: smulx8 ; op1:x29; op2:x29; dest:x2; op1val:0xf8f9ef7f;  op2val:0xf8fc05f9
TEST_P64_PNN_OP(smulx8, x2, x3, x29, x29, 0x00000000, 0, 0xf8f9ef7f, 0xf8fc05f9, x1, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x17, rd==x8, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == 85, rs1_b2_val == -5, rs2_b3_val == 2, rs1_b1_val == -9, rs2_b0_val == -33, rs1_b3_val == -1
// opcode: smulx8 ; op1:x8; op2:x17; dest:x8; op1val:0xfffbf780;  op2val:0x02f855df
TEST_P64_PNN_OP(smulx8, x8, x9, x8, x17, 0x00000000, 0, 0xfffbf780, 0x02f855df, x1, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b3_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == 32
// opcode: smulx8 ; op1:x24; op2:x24; dest:x24; op1val:0x55f920fc;  op2val:0xf8f6fc3f
TEST_P64_PNN_OP(smulx8, x24, x25, x24, x24, 0x00000000, 0, 0x55f920fc, 0xf8f6fc3f, x1, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x26, rd==x26, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 64, rs1_b2_val == -17, rs1_b3_val == 127, rs2_b1_val == 1, rs1_b0_val == 0, rs1_b1_val == -3
// opcode: smulx8 ; op1:x16; op2:x26; dest:x26; op1val:0x7feffd00;  op2val:0x02060140
TEST_P64_PNN_OP(smulx8, x26, x27, x16, x26, 0x00000000, 0, 0x7feffd00, 0x02060140, x1, 32, x9)

inst_5:
// rs1==x26, rs2==x3, rd==x22, rs1_b2_val == rs2_b2_val, rs2_b1_val == -3, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val == 2, rs2_b0_val == -86, rs1_b1_val == -5, rs1_b3_val == 2, rs2_b3_val == -33
// opcode: smulx8 ; op1:x26; op2:x3; dest:x22; op1val:0x02fafb02;  op2val:0xdffafdaa
TEST_P64_PNN_OP(smulx8, x22, x23, x26, x3, 0x00000000, 0, 0x02fafb02, 0xdffafdaa, x1, 40, x9)

inst_6:
// rs1==x20, rs2==x15, rd==x28, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val == 1, rs2_b3_val == 0, rs1_b0_val == -5, rs2_b1_val == 4, rs1_b1_val > 0 and rs2_b1_val > 0
// opcode: smulx8 ; op1:x20; op2:x15; dest:x28; op1val:0xf93f01fb;  op2val:0x00f60440
TEST_P64_PNN_OP(smulx8, x28, x29, x20, x15, 0x00000000, 0, 0xf93f01fb, 0x00f60440, x1, 48, x9)

inst_7:
// rs1==x27, rs2==x2, rd==x18, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b0_val == 32, rs2_b3_val == 16, rs1_b2_val == 2, rs2_b1_val == -1, rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: smulx8 ; op1:x27; op2:x2; dest:x18; op1val:0xfc020309;  op2val:0x1003ff20
TEST_P64_PNN_OP(smulx8, x18, x19, x27, x2, 0x00000000, 0, 0xfc020309, 0x1003ff20, x1, 56, x9)

inst_8:
// rs1==x17, rs2==x25, rd==x6, rs1_b1_val == rs2_b1_val, rs2_b3_val == -86, rs2_b1_val == -33, rs2_b0_val == 1, rs1_b1_val == -33
// opcode: smulx8 ; op1:x17; op2:x25; dest:x6; op1val:0x7ffadf06;  op2val:0xaa06df01
TEST_P64_PNN_OP(smulx8, x6, x7, x17, x25, 0x00000000, 0, 0x7ffadf06, 0xaa06df01, x1, 64, x9)

inst_9:
// rs1==x5, rs2==x19, rd==x20, rs1_b0_val == rs2_b0_val, rs1_b2_val == -65, rs2_b2_val == 32
// opcode: smulx8 ; op1:x5; op2:x19; dest:x20; op1val:0xf6bf0705;  op2val:0x0320f805
TEST_P64_PNN_OP(smulx8, x20, x21, x5, x19, 0x00000000, 0, 0xf6bf0705, 0x0320f805, x1, 72, x9)

inst_10:
// rs1==x10, rs2==x8, rd==x30, rs2_b3_val == 85, rs1_b1_val == 64, rs2_b1_val == -9
// opcode: smulx8 ; op1:x10; op2:x8; dest:x30; op1val:0x0507407f;  op2val:0x5506f720
TEST_P64_PNN_OP(smulx8, x30, x31, x10, x8, 0x00000000, 0, 0x0507407f, 0x5506f720, x1, 80, x9)

inst_11:
// rs1==x6, rs2==x20, rd==x4, rs2_b3_val == 127, rs1_b3_val == -5, rs2_b1_val == -2, rs2_b0_val == -9, rs1_b1_val == 85
// opcode: smulx8 ; op1:x6; op2:x20; dest:x4; op1val:0xfbfb5580;  op2val:0x7fc0fef7
TEST_P64_PNN_OP(smulx8, x4, x5, x6, x20, 0x00000000, 0, 0xfbfb5580, 0x7fc0fef7, x1, 88, x9)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_12:
// rs1==x0, rs2==x14, rd==x10, rs2_b3_val == -65, rs2_b0_val == -1, rs2_b2_val == 8, rs1_b2_val == 1, rs1_b0_val == -65
// opcode: smulx8 ; op1:x0; op2:x14; dest:x10; op1val:0x000103bf;  op2val:0xbf0804ff
TEST_P64_PNN_OP(smulx8, x10, x11, x0, x14, 0x00000000, 0, 0x000103bf, 0xbf0804ff, x2, 0, x5)

inst_13:
// rs1==x15, rs2==x0, rd==x12, rs2_b3_val == -17, rs1_b2_val == 64, rs2_b2_val == -3
// opcode: smulx8 ; op1:x15; op2:x0; dest:x12; op1val:0x7f400305;  op2val:0xeffdffdf
TEST_P64_PNN_OP(smulx8, x12, x13, x15, x0, 0x00000000, 0, 0x7f400305, 0xeffdffdf, x2, 8, x5)

inst_14:
// rs1==x31, rs2==x22, rd==x14, rs2_b3_val == -9, rs2_b0_val == -17, rs2_b2_val == -5, rs1_b3_val == -2
// opcode: smulx8 ; op1:x31; op2:x22; dest:x14; op1val:0xfefafefa;  op2val:0xf7fb05ef
TEST_P64_PNN_OP(smulx8, x14, x15, x31, x22, 0x00000000, 0, 0xfefafefa, 0xf7fb05ef, x2, 16, x5)

inst_15:
// rs1==x23, rs2==x28, rs2_b3_val == -5, rs1_b3_val == -86, rs2_b1_val == 16, rs2_b0_val == -128
// opcode: smulx8 ; op1:x23; op2:x28; dest:x18; op1val:0xaa0209f9;  op2val:0xfbfb1080
TEST_P64_PNN_OP(smulx8, x18, x19, x23, x28, 0x00000000, 0, 0xaa0209f9, 0xfbfb1080, x2, 24, x5)

inst_16:
// rs1==x12, rs2==x13, rs2_b3_val == -3, rs2_b2_val == -33, rs1_b0_val == -33, rs2_b1_val == -65, rs1_b2_val == -128
// opcode: smulx8 ; op1:x12; op2:x13; dest:x30; op1val:0x0080fedf;  op2val:0xfddfbf06
TEST_P64_PNN_OP(smulx8, x30, x31, x12, x13, 0x00000000, 0, 0x0080fedf, 0xfddfbf06, x2, 32, x5)

inst_17:
// rs1==x7, rs2==x23, rs2_b3_val == -2, rs1_b2_val == -86, rs2_b0_val == 2
// opcode: smulx8 ; op1:x7; op2:x23; dest:x20; op1val:0xfaaa0600;  op2val:0xfe200402
TEST_P64_PNN_OP(smulx8, x20, x21, x7, x23, 0x00000000, 0, 0xfaaa0600, 0xfe200402, x2, 40, x5)

inst_18:
// rs1==x18, rs2==x9, rs2_b3_val == -128, rs1_b3_val == -65, rs1_b0_val == 64
// opcode: smulx8 ; op1:x18; op2:x9; dest:x16; op1val:0xbf3f0740;  op2val:0x80fafaf8
TEST_P64_PNN_OP(smulx8, x16, x17, x18, x9, 0x00000000, 0, 0xbf3f0740, 0x80fafaf8, x2, 48, x5)

inst_19:
// rs1==x30, rs2==x27, rs2_b3_val == 64, rs2_b0_val == -65, rs2_b1_val == 64, rs2_b2_val == 127
// opcode: smulx8 ; op1:x30; op2:x27; dest:x18; op1val:0x09f806bf;  op2val:0x407f40bf
TEST_P64_PNN_OP(smulx8, x18, x19, x30, x27, 0x00000000, 0, 0x09f806bf, 0x407f40bf, x2, 56, x5)

inst_20:
// rs1==x9, rs2==x10, rs2_b3_val == 32, rs2_b2_val == -9, rs1_b3_val == -33
// opcode: smulx8 ; op1:x9; op2:x10; dest:x28; op1val:0xdfc0c0fa;  op2val:0x20f755ef
TEST_P64_PNN_OP(smulx8, x28, x29, x9, x10, 0x00000000, 0, 0xdfc0c0fa, 0x20f755ef, x2, 64, x5)

inst_21:
// rs1==x25, rs2==x4, rs2_b3_val == 8, rs1_b1_val == 2, rs2_b0_val == -5, rs1_b3_val == 16
// opcode: smulx8 ; op1:x25; op2:x4; dest:x24; op1val:0x10010240;  op2val:0x08f801fb
TEST_P64_PNN_OP(smulx8, x24, x25, x25, x4, 0x00000000, 0, 0x10010240, 0x08f801fb, x2, 72, x5)

inst_22:
// rs1==x13, rs2==x30, rs2_b3_val == 4, rs1_b0_val == 4, rs1_b1_val == -65
// opcode: smulx8 ; op1:x13; op2:x30; dest:x14; op1val:0x0605bf04;  op2val:0x043ff802
TEST_P64_PNN_OP(smulx8, x14, x15, x13, x30, 0x00000000, 0, 0x0605bf04, 0x043ff802, x2, 80, x5)

inst_23:
// rs1==x4, rs2==x6, rs2_b3_val == 1, rs1_b2_val == 127
// opcode: smulx8 ; op1:x4; op2:x6; dest:x30; op1val:0x027f02f8;  op2val:0x01df0906
TEST_P64_PNN_OP(smulx8, x30, x31, x4, x6, 0x00000000, 0, 0x027f02f8, 0x01df0906, x2, 88, x5)

inst_24:
// rs1==x11, rs2==x12, rs2_b2_val == -86, rs1_b0_val == -17, rs2_b1_val == 127
// opcode: smulx8 ; op1:x11; op2:x12; dest:x16; op1val:0xf80301ef;  op2val:0xfcaa7ffb
TEST_P64_PNN_OP(smulx8, x16, x17, x11, x12, 0x00000000, 0, 0xf80301ef, 0xfcaa7ffb, x2, 96, x5)

inst_25:
// rs1==x3, rs2==x1, rs2_b2_val == 85, rs1_b2_val == -33
// opcode: smulx8 ; op1:x3; op2:x1; dest:x24; op1val:0x06dfeff9;  op2val:0xbf55fff6
TEST_P64_PNN_OP(smulx8, x24, x25, x3, x1, 0x00000000, 0, 0x06dfeff9, 0xbf55fff6, x2, 104, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_26:
// rs1==x14, rs2==x5, rs2_b2_val == -65, rs1_b2_val == 4, rs2_b0_val == -3, rs2_b1_val == -17, rs1_b0_val == -86
// opcode: smulx8 ; op1:x14; op2:x5; dest:x10; op1val:0xaa04fcaa;  op2val:0x00bfeffd
TEST_P64_PNN_OP(smulx8, x10, x11, x14, x5, 0x00000000, 0, 0xaa04fcaa, 0x00bfeffd, x3, 0, x4)

inst_27:
// rs1==x28, rs2==x11, rs1_b2_val == -9, 
// opcode: smulx8 ; op1:x28; op2:x11; dest:x10; op1val:0xaaf7f8c0;  op2val:0xaafac0bf
TEST_P64_PNN_OP(smulx8, x10, x11, x28, x11, 0x00000000, 0, 0xaaf7f8c0, 0xaafac0bf, x3, 8, x4)

inst_28:
// rs1==x2, rs2==x16, rs1_b2_val == -3, rs2_b1_val == -86, rs1_b3_val == 32
// opcode: smulx8 ; op1:x2; op2:x16; dest:x26; op1val:0x20fdf6f9;  op2val:0x0955aa09
TEST_P64_PNN_OP(smulx8, x26, x27, x2, x16, 0x00000000, 0, 0x20fdf6f9, 0x0955aa09, x3, 16, x4)

inst_29:
// rs1==x22, rs2==x21, rs1_b2_val == -2, 
// opcode: smulx8 ; op1:x22; op2:x21; dest:x10; op1val:0xfafe20fc;  op2val:0x7f09df20
TEST_P64_PNN_OP(smulx8, x10, x11, x22, x21, 0x00000000, 0, 0xfafe20fc, 0x7f09df20, x3, 24, x4)

inst_30:
// rs1==x1, rs2==x7, rs1_b2_val == 32, rs2_b0_val == 0
// opcode: smulx8 ; op1:x1; op2:x7; dest:x10; op1val:0xc02002f9;  op2val:0x09c0aa00
TEST_P64_PNN_OP(smulx8, x10, x11, x1, x7, 0x00000000, 0, 0xc02002f9, 0x09c0aa00, x3, 32, x4)

inst_31:
// rs1==x19, rs2==x18, rs1_b2_val == 16, 
// opcode: smulx8 ; op1:x19; op2:x18; dest:x28; op1val:0xc0104009;  op2val:0xaa03bf80
TEST_P64_PNN_OP(smulx8, x28, x29, x19, x18, 0x00000000, 0, 0xc0104009, 0xaa03bf80, x3, 40, x4)

inst_32:
// rs1_b2_val == 8, rs1_b1_val == 4, rs2_b2_val == -17, rs2_b1_val == 32
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x3f080400;  op2val:0xf6ef20f9
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x3f080400, 0xf6ef20f9, x3, 48, x4)

inst_33:
// rs1_b2_val == 0, rs1_b1_val == -86, rs1_b3_val == 1
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0100aa09;  op2val:0xf62020fa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0100aa09, 0xf62020fa, x3, 56, x4)

inst_34:
// rs1_b1_val == 127, rs2_b1_val == 2, rs1_b0_val == 16
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x00f87f10;  op2val:0x09aa02fa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x00f87f10, 0x09aa02fa, x3, 64, x4)

inst_35:
// rs1_b1_val == -128, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfcfb8009;  op2val:0x060804ef
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfcfb8009, 0x060804ef, x3, 72, x4)

inst_36:
// rs1_b1_val == 16, rs2_b1_val == -5
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf80610fa;  op2val:0x807ffbc0
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf80610fa, 0x807ffbc0, x3, 80, x4)

inst_37:
// rs1_b1_val == 8, rs2_b1_val == 8, rs1_b0_val == -1
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfaf708ff;  op2val:0x02f808fa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfaf708ff, 0x02f808fa, x3, 88, x4)

inst_38:
// rs1_b1_val == 0, rs1_b3_val == 64, rs2_b2_val == -2
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x40c000ef;  op2val:0x09fedf09
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x40c000ef, 0x09fedf09, x3, 96, x4)

inst_39:
// rs1_b1_val == -1, rs1_b0_val == -3, rs1_b3_val == -9
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf73ffffd;  op2val:0x06f7fefc
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf73ffffd, 0x06f7fefc, x3, 104, x4)

inst_40:
// rs2_b2_val == -1, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xaaeff7df;  op2val:0x05ffef06
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xaaeff7df, 0x05ffef06, x3, 112, x4)

inst_41:
// rs2_b1_val == -128, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x7ffeff04;  op2val:0x01068080
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x7ffeff04, 0x01068080, x3, 120, x4)

inst_42:
// rs2_b1_val == 0, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf700aa09;  op2val:0x10bf0020
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf700aa09, 0x10bf0020, x3, 128, x4)

inst_43:
// rs2_b2_val == -128, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x07f904aa;  op2val:0x038006ff
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x07f904aa, 0x038006ff, x3, 136, x4)

inst_44:
// rs2_b0_val == 85, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x03bffdff;  op2val:0x05aa4055
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x03bffdff, 0x05aa4055, x3, 144, x4)

inst_45:
// rs2_b0_val == 127, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xdffff6f8;  op2val:0x20c0f67f
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xdffff6f8, 0x20c0f67f, x3, 152, x4)

inst_46:
// rs1_b3_val == 4, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x04df033f;  op2val:0xf6fdfc40
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x04df033f, 0xf6fdfc40, x3, 160, x4)

inst_47:
// rs2_b2_val == 1, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfff610f8;  op2val:0xc0010905
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfff610f8, 0xc0010905, x3, 168, x4)

inst_48:
// rs2_b0_val == -2, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf9000580;  op2val:0xfb08fafe
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf9000580, 0xfb08fafe, x3, 176, x4)

inst_49:
// rs2_b0_val == 16, rs1_b0_val == 8
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf9fbc008;  op2val:0xfaaa0510
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf9fbc008, 0xfaaa0510, x3, 184, x4)

inst_50:
// rs2_b0_val == 8, rs1_b0_val == -9
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x4000fef7;  op2val:0xbf3f0208
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x4000fef7, 0xbf3f0208, x3, 192, x4)

inst_51:
// rs2_b0_val == 4, rs1_b0_val == 32
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7050320;  op2val:0x01075504
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf7050320, 0x01075504, x3, 200, x4)

inst_52:
// rs1_b0_val == 85, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfb020455;  op2val:0xfa08feff
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfb020455, 0xfa08feff, x3, 208, x4)

inst_53:
// rs1_b0_val == -2, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x047f55fe;  op2val:0xefbf40aa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x047f55fe, 0xefbf40aa, x3, 216, x4)

inst_54:
// rs1_b3_val == -17, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xef004055;  op2val:0xfb5540f6
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xef004055, 0xfb5540f6, x3, 224, x4)

inst_55:
// rs1_b3_val == -3, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfdc0f83f;  op2val:0x2009ffaa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfdc0f83f, 0x2009ffaa, x3, 232, x4)

inst_56:
// rs1_b3_val == -128, rs2_b2_val == 4
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x80fffffa;  op2val:0x07040940
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x80fffffa, 0x07040940, x3, 240, x4)

inst_57:
// rs1_b0_val == 1, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xf8ff7f01;  op2val:0xf9f604fa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xf8ff7f01, 0xf9f604fa, x3, 248, x4)

inst_58:
// rs1_b3_val == 8, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0804aa01;  op2val:0xf7fafa00
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0804aa01, 0xf7fafa00, x3, 256, x4)

inst_59:
// rs2_b2_val == 64, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x09fc0500;  op2val:0x5540dffe
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x09fc0500, 0x5540dffe, x3, 264, x4)

inst_60:
// rs2_b2_val == 16, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xef3ff803;  op2val:0xef100808
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xef3ff803, 0xef100808, x3, 272, x4)

inst_61:
// rs2_b2_val == 2, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x00faf9fd;  op2val:0xfb0201fa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x00faf9fd, 0xfb0201fa, x3, 280, x4)

inst_62:
// rs1_b2_val == 85, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0455df05;  op2val:0x072020aa
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0455df05, 0x072020aa, x3, 288, x4)

inst_63:
// rs2_b2_val == 0, 
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xaaf9fcfc;  op2val:0x5500aa04
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0xaaf9fcfc, 0x5500aa04, x3, 296, x4)

inst_64:
// rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b3_val == 85, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == 32
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x55f920fc;  op2val:0xf8f6fc3f
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x55f920fc, 0xf8f6fc3f, x3, 304, x4)

inst_65:
// rs2_b3_val == -17, rs1_b2_val == 64, rs2_b2_val == -3
// opcode: smulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x7f400305;  op2val:0xeffdffdf
TEST_P64_PNN_OP(smulx8, x30, x31, x31, x29, 0x00000000, 0, 0x7f400305, 0xeffdffdf, x3, 312, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 80*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
