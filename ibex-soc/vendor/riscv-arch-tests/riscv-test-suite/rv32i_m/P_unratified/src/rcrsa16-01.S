
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcrsa16 instruction of the RISC-V RV32PZicsr extension for the rcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x1, rd==x22, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 128
// opcode: rcrsa16 ; op1:x28; op2:x1; dest:x22; op1val:0x808000;  op2val:0x070005
TEST_RR_OP(rcrsa16, x22, x28, x1, 0x00000000, 0x808000, 0x070005, x12, 0, x26)

inst_1:// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x15, rs1_h1_val == rs2_h1_val, rs1_h0_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 2048
// opcode: rcrsa16 ; op1:x8; op2:x8; dest:x15; op1val:0xfff87fff;  op2val:0xfff80800
TEST_RR_OP(rcrsa16, x15, x8, x8, 0x00000000, 0xfff87fff, 0xfff80800, x12, 4, x26)

inst_2:// rs1 == rd != rs2, rs1==x27, rs2==x20, rd==x27, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 8192, rs2_h0_val == 21845, rs1_h1_val == -9
// opcode: rcrsa16 ; op1:x27; op2:x20; dest:x27; op1val:0xfff78000;  op2val:0x20005555
TEST_RR_OP(rcrsa16, x27, x27, x20, 0x00000000, 0xfff78000, 0x20005555, x12, 8, x26)

inst_3:// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -1025, rs2_h0_val == 4096
// opcode: rcrsa16 ; op1:x3; op2:x3; dest:x3; op1val:0x06fffa;  op2val:0xfbff1000
TEST_RR_OP(rcrsa16, x3, x3, x3, 0x00000000, 0x06fffa, 0xfbff1000, x12, 12, x26)

inst_4:// rs2 == rd != rs1, rs1==x25, rs2==x19, rd==x19, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -4097
// opcode: rcrsa16 ; op1:x25; op2:x19; dest:x19; op1val:0x3ffffffc;  op2val:0xeffffffc
TEST_RR_OP(rcrsa16, x19, x25, x19, 0x00000000, 0x3ffffffc, 0xeffffffc, x12, 16, x26)

inst_5:// rs1==x23, rs2==x10, rd==x18, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -257, rs1_h0_val == 2048
// opcode: rcrsa16 ; op1:x23; op2:x10; dest:x18; op1val:0xfff60800;  op2val:0x3ffffeff
TEST_RR_OP(rcrsa16, x18, x23, x10, 0x00000000, 0xfff60800, 0x3ffffeff, x12, 20, x26)

inst_6:// rs1==x9, rs2==x16, rd==x21, rs2_h1_val == -21846, rs2_h0_val == -1
// opcode: rcrsa16 ; op1:x9; op2:x16; dest:x21; op1val:0x070009;  op2val:0xaaaaffff
TEST_RR_OP(rcrsa16, x21, x9, x16, 0x00000000, 0x070009, 0xaaaaffff, x12, 24, x26)

inst_7:// rs1==x20, rs2==x11, rd==x29, rs2_h1_val == 21845, rs1_h0_val == 256
// opcode: rcrsa16 ; op1:x20; op2:x11; dest:x29; op1val:0xfffc0100;  op2val:0x5555fff9
TEST_RR_OP(rcrsa16, x29, x20, x11, 0x00000000, 0xfffc0100, 0x5555fff9, x12, 28, x26)

inst_8:// rs1==x4, rs2==x22, rd==x11, rs2_h1_val == 32767, rs2_h0_val == 8192, rs1_h0_val == -33
// opcode: rcrsa16 ; op1:x4; op2:x22; dest:x11; op1val:0x09ffdf;  op2val:0x7fff2000
TEST_RR_OP(rcrsa16, x11, x4, x22, 0x00000000, 0x09ffdf, 0x7fff2000, x12, 32, x26)

inst_9:// rs1==x5, rs2==x18, rd==x0, rs2_h1_val == -16385, rs1_h0_val == -257, rs1_h1_val == 2, rs2_h0_val == 8
// opcode: rcrsa16 ; op1:x5; op2:x18; dest:x0; op1val:0x02feff;  op2val:0xbfff0008
TEST_RR_OP(rcrsa16, x0, x5, x18, 0x00000000, 0x02feff, 0xbfff0008, x12, 36, x26)

inst_10:// rs1==x1, rs2==x7, rd==x2, rs2_h1_val == -8193, rs2_h0_val == -4097, rs1_h1_val == 32767
// opcode: rcrsa16 ; op1:x1; op2:x7; dest:x2; op1val:0x7fff0100;  op2val:0xdfffefff
TEST_RR_OP(rcrsa16, x2, x1, x7, 0x00000000, 0x7fff0100, 0xdfffefff, x12, 40, x26)

inst_11:// rs1==x13, rs2==x15, rd==x20, rs2_h1_val == -2049, rs1_h1_val == -8193, rs1_h0_val == -8193
// opcode: rcrsa16 ; op1:x13; op2:x15; dest:x20; op1val:0xdfffdfff;  op2val:0xf7ff0800
TEST_RR_OP(rcrsa16, x20, x13, x15, 0x00000000, 0xdfffdfff, 0xf7ff0800, x12, 44, x26)

inst_12:// rs1==x7, rs2==x29, rd==x17, rs2_h1_val == -513, rs1_h1_val == -513
// opcode: rcrsa16 ; op1:x7; op2:x29; dest:x17; op1val:0xfdfffffc;  op2val:0xfdffffff
TEST_RR_OP(rcrsa16, x17, x7, x29, 0x00000000, 0xfdfffffc, 0xfdffffff, x12, 48, x26)

inst_13:// rs1==x24, rs2==x6, rd==x14, rs2_h1_val == -257, rs2_h0_val == -9
// opcode: rcrsa16 ; op1:x24; op2:x6; dest:x14; op1val:0xc000feff;  op2val:0xfefffff7
TEST_RR_OP(rcrsa16, x14, x24, x6, 0x00000000, 0xc000feff, 0xfefffff7, x12, 52, x26)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:// rs1==x15, rs2==x24, rd==x26, rs2_h1_val == -129, rs1_h0_val == 1, rs2_h0_val == 128
// opcode: rcrsa16 ; op1:x15; op2:x24; dest:x26; op1val:0x030001;  op2val:0xff7f0080
TEST_RR_OP(rcrsa16, x26, x15, x24, 0x00000000, 0x030001, 0xff7f0080, x3, 0, x8)

inst_15:// rs1==x18, rs2==x0, rd==x24, rs2_h1_val == -65, rs2_h0_val == 32, rs1_h0_val == 4096
// opcode: rcrsa16 ; op1:x18; op2:x0; dest:x24; op1val:0xfff91000;  op2val:0xffbf0020
TEST_RR_OP(rcrsa16, x24, x18, x0, 0x00000000, 0xfff91000, 0xffbf0020, x3, 4, x8)

inst_16:// rs1==x21, rs2==x9, rd==x7, rs2_h1_val == -33, rs2_h0_val == 4, rs1_h1_val == -4097, rs1_h0_val == -65
// opcode: rcrsa16 ; op1:x21; op2:x9; dest:x7; op1val:0xefffffbf;  op2val:0xffdf0004
TEST_RR_OP(rcrsa16, x7, x21, x9, 0x00000000, 0xefffffbf, 0xffdf0004, x3, 8, x8)

inst_17:// rs1==x11, rs2==x14, rd==x30, rs2_h1_val == -17, rs1_h1_val == 16, rs2_h0_val == 64
// opcode: rcrsa16 ; op1:x11; op2:x14; dest:x30; op1val:0x10fffc;  op2val:0xffef0040
TEST_RR_OP(rcrsa16, x30, x11, x14, 0x00000000, 0x10fffc, 0xffef0040, x3, 12, x8)

inst_18:// rs1==x19, rs2==x21, rd==x10, rs2_h1_val == -9, rs1_h1_val == -129
// opcode: rcrsa16 ; op1:x19; op2:x21; dest:x10; op1val:0xff7fc000;  op2val:0xfff70020
TEST_RR_OP(rcrsa16, x10, x19, x21, 0x00000000, 0xff7fc000, 0xfff70020, x3, 16, x8)

inst_19:// rs1==x6, rs2==x13, rd==x1, rs2_h1_val == -5, 
// opcode: rcrsa16 ; op1:x6; op2:x13; dest:x1; op1val:0xfff7fff9;  op2val:0xfffbfeff
TEST_RR_OP(rcrsa16, x1, x6, x13, 0x00000000, 0xfff7fff9, 0xfffbfeff, x3, 20, x8)

inst_20:// rs1==x22, rs2==x28, rd==x4, rs2_h1_val == -3, rs2_h0_val == -21846, rs1_h0_val == -513, rs1_h1_val == -32768
// opcode: rcrsa16 ; op1:x22; op2:x28; dest:x4; op1val:0x8000fdff;  op2val:0xfffdaaaa
TEST_RR_OP(rcrsa16, x4, x22, x28, 0x00000000, 0x8000fdff, 0xfffdaaaa, x3, 24, x8)

inst_21:// rs1==x29, rs2==x25, rd==x6, rs2_h1_val == -2, rs1_h0_val == -1025, rs1_h1_val == -257
// opcode: rcrsa16 ; op1:x29; op2:x25; dest:x6; op1val:0xfefffbff;  op2val:0xfffefffc
TEST_RR_OP(rcrsa16, x6, x29, x25, 0x00000000, 0xfefffbff, 0xfffefffc, x3, 28, x8)

inst_22:// rs1==x10, rs2==x23, rd==x16, rs2_h1_val == -32768, rs1_h1_val == 0
// opcode: rcrsa16 ; op1:x10; op2:x23; dest:x16; op1val:0x000009;  op2val:0x80000040
TEST_RR_OP(rcrsa16, x16, x10, x23, 0x00000000, 0x000009, 0x80000040, x3, 32, x8)

inst_23:// rs1==x12, rs2==x2, rd==x5, rs2_h1_val == 16384, 
// opcode: rcrsa16 ; op1:x12; op2:x2; dest:x5; op1val:0xdffffffc;  op2val:0x40000008
TEST_RR_OP(rcrsa16, x5, x12, x2, 0x00000000, 0xdffffffc, 0x40000008, x3, 36, x8)

inst_24:// rs1==x16, rs2==x26, rd==x13, rs2_h1_val == 4096, rs2_h0_val == -2, rs1_h1_val == -5
// opcode: rcrsa16 ; op1:x16; op2:x26; dest:x13; op1val:0xfffb0009;  op2val:0x1000fffe
TEST_RR_OP(rcrsa16, x13, x16, x26, 0x00000000, 0xfffb0009, 0x1000fffe, x3, 40, x8)

inst_25:// rs1==x26, rs2==x31, rd==x28, rs2_h1_val == 2048, rs1_h1_val == -65, rs1_h0_val == 8192
// opcode: rcrsa16 ; op1:x26; op2:x31; dest:x28; op1val:0xffbf2000;  op2val:0x8000009
TEST_RR_OP(rcrsa16, x28, x26, x31, 0x00000000, 0xffbf2000, 0x8000009, x3, 44, x8)

inst_26:// rs1==x2, rs2==x4, rd==x31, rs2_h1_val == 1024, rs2_h0_val == -1025, rs1_h0_val == 8
// opcode: rcrsa16 ; op1:x2; op2:x4; dest:x31; op1val:0xfdff0008;  op2val:0x400fbff
TEST_RR_OP(rcrsa16, x31, x2, x4, 0x00000000, 0xfdff0008, 0x400fbff, x3, 48, x6)

inst_27:// rs1==x30, rs2==x17, rd==x25, rs2_h1_val == 512, 
// opcode: rcrsa16 ; op1:x30; op2:x17; dest:x25; op1val:0xdfff1000;  op2val:0x200fffe
TEST_RR_OP(rcrsa16, x25, x30, x17, 0x00000000, 0xdfff1000, 0x200fffe, x3, 52, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:// rs1==x17, rs2==x30, rd==x8, rs2_h1_val == 256, rs2_h0_val == 32767, rs1_h1_val == 21845
// opcode: rcrsa16 ; op1:x17; op2:x30; dest:x8; op1val:0x5555fffc;  op2val:0x1007fff
TEST_RR_OP(rcrsa16, x8, x17, x30, 0x00000000, 0x5555fffc, 0x1007fff, x1, 0, x6)

inst_29:// rs1==x14, rs2==x27, rd==x23, rs2_h1_val == 128, rs2_h0_val == 2
// opcode: rcrsa16 ; op1:x14; op2:x27; dest:x23; op1val:0xfffc0005;  op2val:0x800002
TEST_RR_OP(rcrsa16, x23, x14, x27, 0x00000000, 0xfffc0005, 0x800002, x1, 4, x6)

inst_30:// rs1==x31, rs2==x5, rd==x12, rs2_h1_val == 64, 
// opcode: rcrsa16 ; op1:x31; op2:x5; dest:x12; op1val:0x000800;  op2val:0x400009
TEST_RR_OP(rcrsa16, x12, x31, x5, 0x00000000, 0x000800, 0x400009, x1, 8, x6)

inst_31:// rs1==x0, rs2==x12, rd==x9, rs2_h1_val == 32, rs2_h0_val == 16
// opcode: rcrsa16 ; op1:x0; op2:x12; dest:x9; op1val:0x05fff9;  op2val:0x200010
TEST_RR_OP(rcrsa16, x9, x0, x12, 0x00000000, 0x05fff9, 0x200010, x1, 12, x6)

inst_32:// rs2_h1_val == 16, rs1_h0_val == -129, rs1_h1_val == 256
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7f;  op2val:0x100800
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x100ff7f, 0x100800, x1, 16, x6)

inst_33:// rs2_h1_val == 8, rs1_h1_val == 4
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x043fff;  op2val:0x08fff6
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x043fff, 0x08fff6, x1, 20, x6)

inst_34:// rs1_h0_val == -17, rs1_h1_val == -1025
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef;  op2val:0x40fffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfbffffef, 0x40fffa, x1, 24, x6)

inst_35:// rs1_h0_val == -9, rs2_h1_val == 4
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff7;  op2val:0x040005
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x05fff7, 0x040005, x1, 28, x6)

inst_36:// rs1_h0_val == -5, rs1_h1_val == 512
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffb;  op2val:0xf7ff0005
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x200fffb, 0xf7ff0005, x1, 32, x6)

inst_37:// rs1_h0_val == -3, rs1_h1_val == -33
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffd;  op2val:0xfff90080
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xffdffffd, 0xfff90080, x1, 36, x6)

inst_38:// rs1_h0_val == -2, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffe;  op2val:0x7ffffffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x200fffe, 0x7ffffffa, x1, 40, x6)

inst_39:// rs1_h0_val == 16384, rs2_h0_val == 0
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc4000;  op2val:0xff7f0000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffc4000, 0xff7f0000, x1, 44, x6)

inst_40:// rs1_h0_val == 1024, rs2_h0_val == -129
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000400;  op2val:0xaaaaff7f
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x2000400, 0xaaaaff7f, x1, 48, x6)

inst_41:// rs1_h0_val == 512, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040200;  op2val:0xf7ff7fff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x040200, 0xf7ff7fff, x1, 52, x6)

inst_42:// rs1_h0_val == 128, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0080;  op2val:0xbfffffff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffc0080, 0xbfffffff, x1, 56, x6)

inst_43:// rs1_h0_val == 64, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040040;  op2val:0x5555efff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x040040, 0x5555efff, x1, 60, x6)

inst_44:// rs1_h0_val == 32, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020;  op2val:0xff7ffffc
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfff70020, 0xff7ffffc, x1, 64, x6)

inst_45:// rs1_h0_val == 16, rs2_h0_val == 256
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0010;  op2val:0xff7f0100
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x3fff0010, 0xff7f0100, x1, 68, x6)

inst_46:// rs1_h0_val == 4, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090004;  op2val:0xfffafff9
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x090004, 0xfffafff9, x1, 72, x6)

inst_47:// rs1_h0_val == 2, rs1_h1_val == 64, rs2_h0_val == -16385
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400002;  op2val:0x06bfff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x400002, 0x06bfff, x1, 76, x6)

inst_48:// rs1_h0_val == 0, rs1_h1_val == -16385
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0000;  op2val:0x55551000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xbfff0000, 0x55551000, x1, 80, x6)

inst_49:// rs1_h0_val == -1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffff;  op2val:0xaaaafffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffcffff, 0xaaaafffa, x1, 84, x6)

inst_50:// rs2_h1_val == 2, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0003;  op2val:0x02efff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffa0003, 0x02efff, x1, 88, x6)

inst_51:// rs2_h1_val == 1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffff;  op2val:0x010007
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffaffff, 0x010007, x1, 92, x6)

inst_52:// rs2_h1_val == 0, rs2_h0_val == 1024
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0004;  op2val:0x000400
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x7fff0004, 0x000400, x1, 96, x6)

inst_53:// rs2_h1_val == -1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf;  op2val:0xffffefff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xdfffffbf, 0xffffefff, x1, 100, x6)

inst_54:// rs2_h0_val == -5, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ff7f;  op2val:0x05fffb
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x200ff7f, 0x05fffb, x1, 104, x6)

inst_55:// rs2_h0_val == -3, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff7;  op2val:0x02fffd
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x200fff7, 0x02fffd, x1, 108, x6)

inst_56:// rs2_h0_val == -32768, rs1_h0_val == -16385
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbfff;  op2val:0x4008000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x7fffbfff, 0x4008000, x1, 112, x6)

inst_57:// rs2_h0_val == 16384, rs1_h0_val == 21845
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1005555;  op2val:0x054000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x1005555, 0x054000, x1, 116, x6)

inst_58:// rs2_h0_val == 512, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550006;  op2val:0xfffc0200
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x55550006, 0xfffc0200, x1, 120, x6)

inst_59:// rs2_h0_val == 1, rs1_h1_val == -17
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff7;  op2val:0x020001
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xffeffff7, 0x020001, x1, 124, x6)

inst_60:// rs1_h1_val == -21846, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffc;  op2val:0xfffa0004
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xaaaafffc, 0xfffa0004, x1, 128, x6)

inst_61:// rs2_h0_val == -17, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000006;  op2val:0xff7fffef
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xc0000006, 0xff7fffef, x1, 132, x6)

inst_62:// rs1_h1_val == -2049, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020;  op2val:0x10002000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xf7ff0020, 0x10002000, x1, 136, x6)

inst_63:// rs2_h0_val == -513, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa8000;  op2val:0x07fdff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffa8000, 0x07fdff, x1, 140, x6)

inst_64:// rs1_h1_val == -3, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0000;  op2val:0x06efff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffd0000, 0x06efff, x1, 144, x6)

inst_65:// rs1_h1_val == -2, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0800;  op2val:0xf7ff0001
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffe0800, 0xf7ff0001, x1, 148, x6)

inst_66:// rs1_h1_val == 16384, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd;  op2val:0xfffe0002
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x4000fffd, 0xfffe0002, x1, 152, x6)

inst_67:// rs1_h1_val == 8192, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffff;  op2val:0x10000009
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x2000ffff, 0x10000009, x1, 156, x6)

inst_68:// rs1_h1_val == 4096, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbf;  op2val:0x07aaaa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x1000ffbf, 0x07aaaa, x1, 160, x6)

inst_69:// rs1_h1_val == 2048, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf;  op2val:0x20ffef
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x800ffbf, 0x20ffef, x1, 164, x6)

inst_70:// rs1_h1_val == 1024, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000020;  op2val:0x8000fffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x4000020, 0x8000fffa, x1, 168, x6)

inst_71:// rs1_h1_val == 32, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffff;  op2val:0x400efff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x20ffff, 0x400efff, x1, 172, x6)

inst_72:// rs1_h1_val == 8, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x082000;  op2val:0x040009
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x082000, 0x040009, x1, 176, x6)

inst_73:// rs2_h0_val == -8193, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0xbfffdfff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x041000, 0xbfffdfff, x1, 180, x6)

inst_74:// rs1_h1_val == 1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffa;  op2val:0x02fffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x01fffa, 0x02fffa, x1, 184, x6)

inst_75:// rs2_h0_val == -2049, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff6;  op2val:0xdffff7ff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x3ffffff6, 0xdffff7ff, x1, 188, x6)

inst_76:// rs1_h1_val == -1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa;  op2val:0xffdff7ff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffffffa, 0xffdff7ff, x1, 192, x6)

inst_77:// rs1_h0_val == -21846, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02aaaa;  op2val:0xfff90000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x02aaaa, 0xfff90000, x1, 196, x6)

inst_78:// rs2_h0_val == -65, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfbff;  op2val:0x3fffffbf
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffcfbff, 0x3fffffbf, x1, 200, x6)

inst_79:// rs2_h0_val == -33, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff6;  op2val:0xfbffffdf
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x3ffffff6, 0xfbffffdf, x1, 204, x6)

inst_80:// rs1_h0_val == -4097, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10efff;  op2val:0xffbfffff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x10efff, 0xffbfffff, x1, 208, x6)

inst_81:// rs1_h0_val == -2049, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7ff;  op2val:0xfeffffef
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfffdf7ff, 0xfeffffef, x1, 212, x6)

inst_82:// rs1_h1_val == rs2_h1_val, rs1_h0_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 2048
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff87fff;  op2val:0xfff80800
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0xfff87fff, 0xfff80800, x1, 216, x6)

inst_83:// rs2_h1_val == 32, rs2_h0_val == 16
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff9;  op2val:0x200010
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x00000000, 0x05fff9, 0x200010, x1, 220, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
