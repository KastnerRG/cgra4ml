
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd810 instruction of the RISC-V RV32PZicsr extension for the zunpkd810 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd810)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1==x18, rd==x24, rs1_b0_val == 0, rs1_b2_val == 0, rs1_b1_val == 64
// opcode: zunpkd810 ; op1:x18; dest:x24; op1val:0x3004000;
TEST_RD_OP( zunpkd810, x24, x18, 0x00000000, 0x3004000, x8, 0, x15)

inst_1:
// rs1==x10, rd==x12, rs1_b3_val == 170, rs1_b0_val == 4
// opcode: zunpkd810 ; op1:x10; dest:x12; op1val:0xaa050c04;
TEST_RD_OP( zunpkd810, x12, x10, 0x00000000, 0xaa050c04, x8, 4, x15)

inst_2:
// rs1==x19, rd==x2, rs1_b3_val == 85, rs1_b1_val == 254, rs1_b2_val == 127
// opcode: zunpkd810 ; op1:x19; dest:x2; op1val:0x557ffe09;
TEST_RD_OP( zunpkd810, x2, x19, 0x00000000, 0x557ffe09, x8, 8, x15)

inst_3:
// rs1==x26, rd==x19, rs1_b3_val == 127, rs1_b1_val == 239
// opcode: zunpkd810 ; op1:x26; dest:x19; op1val:0x7f00ef0c;
TEST_RD_OP( zunpkd810, x19, x26, 0x00000000, 0x7f00ef0c, x8, 12, x15)

inst_4:
// rs1==x14, rd==x3, rs1_b3_val == 191, rs1_b1_val == 191, rs1_b0_val == 127
// opcode: zunpkd810 ; op1:x14; dest:x3; op1val:0xbf0bbf7f;
TEST_RD_OP( zunpkd810, x3, x14, 0x00000000, 0xbf0bbf7f, x8, 16, x15)

inst_5:
// rs1==x6, rd==x1, rs1_b3_val == 223, rs1_b1_val == 8
// opcode: zunpkd810 ; op1:x6; dest:x1; op1val:0xdf000806;
TEST_RD_OP( zunpkd810, x1, x6, 0x00000000, 0xdf000806, x8, 20, x15)

inst_6:
// rs1==x21, rd==x16, rs1_b3_val == 239, rs1_b1_val == 85
// opcode: zunpkd810 ; op1:x21; dest:x16; op1val:0xef0d5505;
TEST_RD_OP( zunpkd810, x16, x21, 0x00000000, 0xef0d5505, x8, 24, x15)

inst_7:
// rs1==x2, rd==x21, rs1_b3_val == 247, rs1_b0_val == 191, rs1_b2_val == 253
// opcode: zunpkd810 ; op1:x2; dest:x21; op1val:0xf7fd06bf;
TEST_RD_OP( zunpkd810, x21, x2, 0x00000000, 0xf7fd06bf, x8, 28, x15)

inst_8:
// rs1==x22, rd==x30, rs1_b3_val == 251, rs1_b2_val == 191, rs1_b1_val == 127, rs1_b0_val == 255
// opcode: zunpkd810 ; op1:x22; dest:x30; op1val:0xfbbf7fff;
TEST_RD_OP( zunpkd810, x30, x22, 0x00000000, 0xfbbf7fff, x8, 32, x15)

inst_9:
// rs1==x30, rd==x23, rs1_b3_val == 253, rs1_b1_val == 2, rs1_b2_val == 85
// opcode: zunpkd810 ; op1:x30; dest:x23; op1val:0xfd550200;
TEST_RD_OP( zunpkd810, x23, x30, 0x00000000, 0xfd550200, x8, 36, x15)

inst_10:
// rs1==x17, rd==x27, rs1_b3_val == 254, 
// opcode: zunpkd810 ; op1:x17; dest:x27; op1val:0xfefdbfff;
TEST_RD_OP( zunpkd810, x27, x17, 0x00000000, 0xfefdbfff, x8, 40, x15)

inst_11:
// rs1==x5, rd==x28, rs1_b3_val == 128, rs1_b1_val == 32, rs1_b2_val == 1
// opcode: zunpkd810 ; op1:x5; dest:x28; op1val:0x8001200e;
TEST_RD_OP( zunpkd810, x28, x5, 0x00000000, 0x8001200e, x8, 44, x15)

inst_12:
// rs1==x28, rd==x20, rs1_b3_val == 64, rs1_b0_val == 239
// opcode: zunpkd810 ; op1:x28; dest:x20; op1val:0x401311ef;
TEST_RD_OP( zunpkd810, x20, x28, 0x00000000, 0x401311ef, x8, 48, x15)

inst_13:
// rs1==x3, rd==x17, rs1_b3_val == 32, rs1_b1_val == 251, rs1_b2_val == 16, rs1_b0_val == 16
// opcode: zunpkd810 ; op1:x3; dest:x17; op1val:0x2010fb10;
TEST_RD_OP( zunpkd810, x17, x3, 0x00000000, 0x2010fb10, x8, 52, x15)

inst_14:
// rs1==x29, rd==x26, rs1_b3_val == 16, 
// opcode: zunpkd810 ; op1:x29; dest:x26; op1val:0x10050600;
TEST_RD_OP( zunpkd810, x26, x29, 0x00000000, 0x10050600, x8, 56, x15)

inst_15:
// rs1==x4, rd==x10, rs1_b3_val == 8, rs1_b1_val == 16
// opcode: zunpkd810 ; op1:x4; dest:x10; op1val:0x80f1004;
TEST_RD_OP( zunpkd810, x10, x4, 0x00000000, 0x80f1004, x8, 60, x15)

inst_16:
// rs1==x9, rd==x13, rs1_b3_val == 4, rs1_b1_val == 4
// opcode: zunpkd810 ; op1:x9; dest:x13; op1val:0x4bf040c;
TEST_RD_OP( zunpkd810, x13, x9, 0x00000000, 0x4bf040c, x8, 64, x15)

inst_17:
// rs1==x11, rd==x14, rs1_b3_val == 2, rs1_b0_val == 1
// opcode: zunpkd810 ; op1:x11; dest:x14; op1val:0x20a0c01;
TEST_RD_OP( zunpkd810, x14, x11, 0x00000000, 0x20a0c01, x8, 68, x15)

inst_18:
// rs1==x20, rd==x22, rs1_b3_val == 1, 
// opcode: zunpkd810 ; op1:x20; dest:x22; op1val:0x110080d;
TEST_RD_OP( zunpkd810, x22, x20, 0x00000000, 0x110080d, x8, 72, x15)

inst_19:
// rs1==x7, rd==x9, rs1_b3_val == 255, rs1_b1_val == 128
// opcode: zunpkd810 ; op1:x7; dest:x9; op1val:0xff108012;
TEST_RD_OP( zunpkd810, x9, x7, 0x00000000, 0xff108012, x8, 76, x15)

inst_20:
// rs1==x0, rd==x29, rs1_b3_val == 0, rs1_b0_val == 64
// opcode: zunpkd810 ; op1:x0; dest:x29; op1val:0x0c0b40;
TEST_RD_OP( zunpkd810, x29, x0, 0x00000000, 0x0c0b40, x8, 80, x3)

inst_21:
// rs1==x16, rd==x18, rs1_b2_val == 170, rs1_b1_val == 253, rs1_b0_val == 253
// opcode: zunpkd810 ; op1:x16; dest:x18; op1val:0x55aafdfd;
TEST_RD_OP( zunpkd810, x18, x16, 0x00000000, 0x55aafdfd, x8, 84, x3)

inst_22:
// rs1==x15, rd==x25, rs1_b0_val == 223, 
// opcode: zunpkd810 ; op1:x15; dest:x25; op1val:0x801207df;
TEST_RD_OP( zunpkd810, x25, x15, 0x00000000, 0x801207df, x8, 88, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x13, rd==x0, rs1_b0_val == 247, rs1_b1_val == 1
// opcode: zunpkd810 ; op1:x13; dest:x0; op1val:0xbf0701f7;
TEST_RD_OP( zunpkd810, x0, x13, 0x00000000, 0xbf0701f7, x2, 0, x3)

inst_24:
// rs1==x1, rd==x4, rs1_b0_val == 251, 
// opcode: zunpkd810 ; op1:x1; dest:x4; op1val:0x70b12fb;
TEST_RD_OP( zunpkd810, x4, x1, 0x00000000, 0x70b12fb, x2, 4, x3)

inst_25:
// rs1==x12, rd==x6, rs1_b0_val == 254, rs1_b2_val == 2
// opcode: zunpkd810 ; op1:x12; dest:x6; op1val:0xff0210fe;
TEST_RD_OP( zunpkd810, x6, x12, 0x00000000, 0xff0210fe, x2, 8, x3)

inst_26:
// rs1==x24, rd==x7, rs1_b0_val == 128, 
// opcode: zunpkd810 ; op1:x24; dest:x7; op1val:0x124080;
TEST_RD_OP( zunpkd810, x7, x24, 0x00000000, 0x124080, x2, 12, x3)

inst_27:
// rs1==x8, rd==x5, rs1_b0_val == 32, 
// opcode: zunpkd810 ; op1:x8; dest:x5; op1val:0x2131220;
TEST_RD_OP( zunpkd810, x5, x8, 0x00000000, 0x2131220, x2, 16, x3)

inst_28:
// rs1==x25, rd==x8, rs1_b0_val == 8, rs1_b2_val == 223
// opcode: zunpkd810 ; op1:x25; dest:x8; op1val:0xdf8008;
TEST_RD_OP( zunpkd810, x8, x25, 0x00000000, 0xdf8008, x2, 20, x3)

inst_29:
// rs1==x23, rd==x11, rs1_b0_val == 2, 
// opcode: zunpkd810 ; op1:x23; dest:x11; op1val:0x2fd0802;
TEST_RD_OP( zunpkd810, x11, x23, 0x00000000, 0x2fd0802, x2, 24, x3)

inst_30:
// rs1==x27, rd==x31, rs1_b2_val == 239, rs1_b1_val == 255
// opcode: zunpkd810 ; op1:x27; dest:x31; op1val:0x20effffb;
TEST_RD_OP( zunpkd810, x31, x27, 0x00000000, 0x20effffb, x2, 28, x3)

inst_31:
// rs1==x31, rd==x15, rs1_b2_val == 247, 
// opcode: zunpkd810 ; op1:x31; dest:x15; op1val:0x7ff7ff06;
TEST_RD_OP( zunpkd810, x15, x31, 0x00000000, 0x7ff7ff06, x2, 32, x3)

inst_32:
// rs1_b2_val == 64, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x40fd7f;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x40fd7f, x2, 36, x3)

inst_33:
// rs1_b2_val == 32, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x5200401;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x5200401, x2, 40, x3)

inst_34:
// rs1_b2_val == 8, rs1_b0_val == 170, rs1_b1_val == 247
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xf08f7aa;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xf08f7aa, x2, 44, x3)

inst_35:
// rs1_b2_val == 4, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xdf041380;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xdf041380, x2, 48, x3)

inst_36:
// rs1_b2_val == 255, rs1_b1_val == 0
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xaaff0007;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xaaff0007, x2, 52, x3)

inst_37:
// rs1_b1_val == 170, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x311aafe;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x311aafe, x2, 56, x3)

inst_38:
// rs1_b0_val == 85, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x7bf0f55;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x7bf0f55, x2, 60, x3)

inst_39:
// rs1_b2_val == 251, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xaafb7f0f;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xaafb7f0f, x2, 64, x3)

inst_40:
// rs1_b1_val == 223, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x108df00;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x108df00, x2, 68, x3)

inst_41:
// rs1_b2_val == 254, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xffe0755;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xffe0755, x2, 72, x3)

inst_42:
// rs1_b2_val == 128, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x20802008;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x20802008, x2, 76, x3)

inst_43:
// rs1_b3_val == 0, rs1_b0_val == 64
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x0c0b40;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0x0c0b40, x2, 80, x3)

inst_44:
// rs1_b0_val == 247, rs1_b1_val == 1
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xbf0701f7;
TEST_RD_OP( zunpkd810, x31, x30, 0x00000000, 0xbf0701f7, x2, 84, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 22*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
