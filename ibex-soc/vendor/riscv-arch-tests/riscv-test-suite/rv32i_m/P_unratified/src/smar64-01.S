
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smar64 instruction of the RISC-V RV32PZicsr extension for the smar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x16, rd==x10, rs1_w0_val == -2147483648, rs1_w0_val != rs2_w0_val, rs2_w0_val == -4194305, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: smar64 ; op1:x6; op2:x16; dest:x10; op1val:0x80000000;  op2val:0xffbfffff
TEST_P64_PNN_OP(smar64, x10, x11, x6, x16, 0x00000000, 0, 0x80000000, 0xffbfffff, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x12, rs1_w0_val == rs2_w0_val, 
// opcode: smar64 ; op1:x28; op2:x28; dest:x12; op1val:0xfffffff6;  op2val:0xfffffff6
TEST_P64_PNN_OP(smar64, x12, x13, x28, x28, 0x00000000, 0, 0xfffffff6, 0xfffffff6, x4, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x23, rd==x2, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -134217729, rs2_w0_val == 536870912
// opcode: smar64 ; op1:x2; op2:x23; dest:x2; op1val:0xf7ffffff;  op2val:0x20000000
TEST_P64_PNN_OP(smar64, x2, x3, x2, x23, 0x00000000, 0, 0xf7ffffff, 0x20000000, x4, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 2097152, rs2_w0_val == -67108865
// opcode: smar64 ; op1:x20; op2:x20; dest:x20; op1val:0x00200000;  op2val:0xfbffffff
TEST_P64_PNN_OP(smar64, x20, x21, x20, x20, 0x00000000, 0, 0x00200000, 0xfbffffff, x4, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x26, rd==x26, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs1_w0_val == 1073741824
// opcode: smar64 ; op1:x1; op2:x26; dest:x26; op1val:0x40000000;  op2val:0x00000080
TEST_P64_PNN_OP(smar64, x26, x27, x1, x26, 0x00000000, 0, 0x40000000, 0x00000080, x4, 32, x5)

inst_5:
// rs1==x21, rs2==x30, rd==x18, rs2_w0_val == -1431655766, rs1_w0_val == 32768
// opcode: smar64 ; op1:x21; op2:x30; dest:x18; op1val:0x00008000;  op2val:0xaaaaaaaa
TEST_P64_PNN_OP(smar64, x18, x19, x21, x30, 0x00000000, 0, 0x00008000, 0xaaaaaaaa, x4, 40, x5)

inst_6:
// rs1==x9, rs2==x31, rd==x24, rs2_w0_val == 1431655765, rs1_w0_val == 131072
// opcode: smar64 ; op1:x9; op2:x31; dest:x24; op1val:0x00020000;  op2val:0x55555555
TEST_P64_PNN_OP(smar64, x24, x25, x9, x31, 0x00000000, 0, 0x00020000, 0x55555555, x4, 48, x5)

inst_7:
// rs1==x30, rs2==x12, rd==x22, rs2_w0_val == 2147483647, rs1_w0_val == -16385
// opcode: smar64 ; op1:x30; op2:x12; dest:x22; op1val:0xffffbfff;  op2val:0x7fffffff
TEST_P64_PNN_OP(smar64, x22, x23, x30, x12, 0x00000000, 0, 0xffffbfff, 0x7fffffff, x4, 56, x5)

inst_8:
// rs1==x29, rs2==x22, rd==x30, rs2_w0_val == -1073741825, 
// opcode: smar64 ; op1:x29; op2:x22; dest:x30; op1val:0xfffffff6;  op2val:0xbfffffff
TEST_P64_PNN_OP(smar64, x30, x31, x29, x22, 0x00000000, 0, 0xfffffff6, 0xbfffffff, x4, 64, x5)

inst_9:
// rs1==x0, rs2==x29, rd==x14, rs2_w0_val == -536870913, rs1_w0_val == 32
// opcode: smar64 ; op1:x0; op2:x29; dest:x14; op1val:0x00000020;  op2val:0xdfffffff
TEST_P64_PNN_OP(smar64, x14, x15, x0, x29, 0x00000000, 0, 0x00000020, 0xdfffffff, x4, 72, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_10:
// rs1==x3, rs2==x24, rd==x8, rs2_w0_val == -268435457, rs1_w0_val == -33554433
// opcode: smar64 ; op1:x3; op2:x24; dest:x8; op1val:0xfdffffff;  op2val:0xefffffff
TEST_P64_PNN_OP(smar64, x8, x9, x3, x24, 0x00000000, 0, 0xfdffffff, 0xefffffff, x1, 0, x5)

inst_11:
// rs1==x17, rs2==x8, rd==x6, rs2_w0_val == -134217729, 
// opcode: smar64 ; op1:x17; op2:x8; dest:x6; op1val:0xfffffffa;  op2val:0xf7ffffff
TEST_P64_PNN_OP(smar64, x6, x7, x17, x8, 0x00000000, 0, 0xfffffffa, 0xf7ffffff, x1, 8, x19)

inst_12:
// rs1==x31, rs2==x4, rd==x28, rs2_w0_val == -33554433, rs1_w0_val == -32769
// opcode: smar64 ; op1:x31; op2:x4; dest:x28; op1val:0xffff7fff;  op2val:0xfdffffff
TEST_P64_PNN_OP(smar64, x28, x29, x31, x4, 0x00000000, 0, 0xffff7fff, 0xfdffffff, x1, 16, x19)

inst_13:
// rs1==x11, rs2==x10, rd==x4, rs2_w0_val == -16777217, rs1_w0_val == -8388609
// opcode: smar64 ; op1:x11; op2:x10; dest:x4; op1val:0xff7fffff;  op2val:0xfeffffff
TEST_P64_PNN_OP(smar64, x4, x5, x11, x10, 0x00000000, 0, 0xff7fffff, 0xfeffffff, x1, 24, x19)

inst_14:
// rs1==x23, rs2==x15, rd==x16, rs2_w0_val == -8388609, rs1_w0_val == 2048
// opcode: smar64 ; op1:x23; op2:x15; dest:x16; op1val:0x00000800;  op2val:0xff7fffff
TEST_P64_PNN_OP(smar64, x16, x17, x23, x15, 0x00000000, 0, 0x00000800, 0xff7fffff, x1, 32, x19)

inst_15:
// rs1==x25, rs2==x27, rs2_w0_val == -2097153, rs1_w0_val == 0
// opcode: smar64 ; op1:x25; op2:x27; dest:x22; op1val:0x00000000;  op2val:0xffdfffff
TEST_P64_PNN_OP(smar64, x22, x23, x25, x27, 0x00000000, 0, 0x00000000, 0xffdfffff, x1, 40, x19)

inst_16:
// rs1==x26, rs2==x5, rs2_w0_val == -1048577, 
// opcode: smar64 ; op1:x26; op2:x5; dest:x8; op1val:0xfffffff6;  op2val:0xffefffff
TEST_P64_PNN_OP(smar64, x8, x9, x26, x5, 0x00000000, 0, 0xfffffff6, 0xffefffff, x1, 48, x19)

inst_17:
// rs1==x27, rs2==x3, rs2_w0_val == -524289, rs1_w0_val == -4194305
// opcode: smar64 ; op1:x27; op2:x3; dest:x22; op1val:0xffbfffff;  op2val:0xfff7ffff
TEST_P64_PNN_OP(smar64, x22, x23, x27, x3, 0x00000000, 0, 0xffbfffff, 0xfff7ffff, x1, 56, x19)

inst_18:
// rs1==x12, rs2==x0, rs2_w0_val == -262145, 
// opcode: smar64 ; op1:x12; op2:x0; dest:x28; op1val:0xff7fffff;  op2val:0xfffbffff
TEST_P64_PNN_OP(smar64, x28, x29, x12, x0, 0x00000000, 0, 0xff7fffff, 0xfffbffff, x1, 64, x19)

inst_19:
// rs1==x10, rs2==x11, rs2_w0_val == -131073, 
// opcode: smar64 ; op1:x10; op2:x11; dest:x2; op1val:0x00000006;  op2val:0xfffdffff
TEST_P64_PNN_OP(smar64, x2, x3, x10, x11, 0x00000000, 0, 0x00000006, 0xfffdffff, x1, 72, x19)

inst_20:
// rs1==x4, rs2==x9, rs2_w0_val == -65537, 
// opcode: smar64 ; op1:x4; op2:x9; dest:x14; op1val:0xfffffff6;  op2val:0xfffeffff
TEST_P64_PNN_OP(smar64, x14, x15, x4, x9, 0x00000000, 0, 0xfffffff6, 0xfffeffff, x1, 80, x19)

inst_21:
// rs1==x18, rs2==x17, rs2_w0_val == -32769, rs1_w0_val == 134217728
// opcode: smar64 ; op1:x18; op2:x17; dest:x16; op1val:0x08000000;  op2val:0xffff7fff
TEST_P64_PNN_OP(smar64, x16, x17, x18, x17, 0x00000000, 0, 0x08000000, 0xffff7fff, x1, 88, x19)

inst_22:
// rs1==x14, rs2==x13, rs2_w0_val == -16385, rs1_w0_val == 33554432
// opcode: smar64 ; op1:x14; op2:x13; dest:x16; op1val:0x02000000;  op2val:0xffffbfff
TEST_P64_PNN_OP(smar64, x16, x17, x14, x13, 0x00000000, 0, 0x02000000, 0xffffbfff, x1, 96, x19)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_23:
// rs1==x7, rs2==x2, rs2_w0_val == -8193, 
// opcode: smar64 ; op1:x7; op2:x2; dest:x22; op1val:0x00000000;  op2val:0xffffdfff
TEST_P64_PNN_OP(smar64, x22, x23, x7, x2, 0x00000000, 0, 0x00000000, 0xffffdfff, x3, 0, x4)

inst_24:
// rs1==x24, rs2==x7, rs2_w0_val == -4097, rs1_w0_val == 1431655765
// opcode: smar64 ; op1:x24; op2:x7; dest:x20; op1val:0x55555555;  op2val:0xffffefff
TEST_P64_PNN_OP(smar64, x20, x21, x24, x7, 0x00000000, 0, 0x55555555, 0xffffefff, x3, 8, x4)

inst_25:
// rs1==x13, rs2==x6, rs2_w0_val == -2049, rs1_w0_val == -9
// opcode: smar64 ; op1:x13; op2:x6; dest:x28; op1val:0xfffffff7;  op2val:0xfffff7ff
TEST_P64_PNN_OP(smar64, x28, x29, x13, x6, 0x00000000, 0, 0xfffffff7, 0xfffff7ff, x3, 16, x4)

inst_26:
// rs1==x19, rs2==x18, rs2_w0_val == -1025, rs1_w0_val == -2049
// opcode: smar64 ; op1:x19; op2:x18; dest:x10; op1val:0xfffff7ff;  op2val:0xfffffbff
TEST_P64_PNN_OP(smar64, x10, x11, x19, x18, 0x00000000, 0, 0xfffff7ff, 0xfffffbff, x3, 24, x4)

inst_27:
// rs1==x22, rs2==x21, rs2_w0_val == -513, rs1_w0_val == 536870912
// opcode: smar64 ; op1:x22; op2:x21; dest:x14; op1val:0x20000000;  op2val:0xfffffdff
TEST_P64_PNN_OP(smar64, x14, x15, x22, x21, 0x00000000, 0, 0x20000000, 0xfffffdff, x3, 32, x4)

inst_28:
// rs1==x8, rs2==x19, rs2_w0_val == -257, 
// opcode: smar64 ; op1:x8; op2:x19; dest:x26; op1val:0xfdffffff;  op2val:0xfffffeff
TEST_P64_PNN_OP(smar64, x26, x27, x8, x19, 0x00000000, 0, 0xfdffffff, 0xfffffeff, x3, 40, x4)

inst_29:
// rs1==x16, rs2==x14, rs2_w0_val == -129, 
// opcode: smar64 ; op1:x16; op2:x14; dest:x6; op1val:0x08000000;  op2val:0xffffff7f
TEST_P64_PNN_OP(smar64, x6, x7, x16, x14, 0x00000000, 0, 0x08000000, 0xffffff7f, x3, 48, x4)

inst_30:
// rs1==x5, rs2==x25, rs2_w0_val == -65, 
// opcode: smar64 ; op1:x5; op2:x25; dest:x10; op1val:0x00000007;  op2val:0xffffffbf
TEST_P64_PNN_OP(smar64, x10, x11, x5, x25, 0x00000000, 0, 0x00000007, 0xffffffbf, x3, 56, x4)

inst_31:
// rs1==x15, rs2==x1, rs2_w0_val == -33, rs1_w0_val == -65
// opcode: smar64 ; op1:x15; op2:x1; dest:x6; op1val:0xffffffbf;  op2val:0xffffffdf
TEST_P64_PNN_OP(smar64, x6, x7, x15, x1, 0x00000000, 0, 0xffffffbf, 0xffffffdf, x3, 64, x4)

inst_32:
// rs2_w0_val == -17, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffbfffff;  op2val:0xffffffef
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffbfffff, 0xffffffef, x3, 72, x4)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs2_w0_val == -9, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000006;  op2val:0xfffffff7
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000006, 0xfffffff7, x1, 0, x2)

inst_34:
// rs2_w0_val == -5, rs1_w0_val == 1
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000001;  op2val:0xfffffffb
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000001, 0xfffffffb, x1, 8, x2)

inst_35:
// rs2_w0_val == -3, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x3fffffff;  op2val:0xfffffffd
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x3fffffff, 0xfffffffd, x1, 16, x2)

inst_36:
// rs2_w0_val == -2, rs1_w0_val == 16777216
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x01000000;  op2val:0xfffffffe
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x01000000, 0xfffffffe, x1, 24, x2)

inst_37:
// rs2_w0_val == -2147483648, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffff7fff;  op2val:0x80000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffff7fff, 0x80000000, x1, 32, x2)

inst_38:
// rs2_w0_val == 1073741824, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffff8;  op2val:0x40000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffff8, 0x40000000, x1, 40, x2)

inst_39:
// rs2_w0_val == 268435456, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffff;  op2val:0x10000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffff, 0x10000000, x1, 48, x2)

inst_40:
// rs2_w0_val == 134217728, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffc;  op2val:0x08000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffc, 0x08000000, x1, 56, x2)

inst_41:
// rs2_w0_val == 67108864, rs1_w0_val == 16
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000010;  op2val:0x04000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000010, 0x04000000, x1, 64, x2)

inst_42:
// rs2_w0_val == 33554432, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffff7fff;  op2val:0x02000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffff7fff, 0x02000000, x1, 72, x2)

inst_43:
// rs2_w0_val == 16777216, rs1_w0_val == -1
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffff;  op2val:0x01000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffff, 0x01000000, x1, 80, x2)

inst_44:
// rs2_w0_val == 8388608, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffa;  op2val:0x00800000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffa, 0x00800000, x1, 88, x2)

inst_45:
// rs2_w0_val == 4194304, rs1_w0_val == -131073
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffdffff;  op2val:0x00400000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffdffff, 0x00400000, x1, 96, x2)

inst_46:
// rs2_w0_val == 2097152, rs1_w0_val == -1048577
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffefffff;  op2val:0x00200000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffefffff, 0x00200000, x1, 104, x2)

inst_47:
// rs2_w0_val == 1048576, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffff7fff;  op2val:0x00100000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffff7fff, 0x00100000, x1, 112, x2)

inst_48:
// rs1_w0_val == 1024, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000400;  op2val:0x00000007
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000400, 0x00000007, x1, 120, x2)

inst_49:
// rs1_w0_val == 512, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000200;  op2val:0x00000009
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000200, 0x00000009, x1, 128, x2)

inst_50:
// rs1_w0_val == 256, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000100;  op2val:0x20000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000100, 0x20000000, x1, 136, x2)

inst_51:
// rs1_w0_val == 128, rs2_w0_val == 262144
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000080;  op2val:0x00040000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000080, 0x00040000, x1, 144, x2)

inst_52:
// rs1_w0_val == 64, rs2_w0_val == 1024
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000040;  op2val:0x00000400
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000040, 0x00000400, x1, 152, x2)

inst_53:
// rs1_w0_val == 8, rs2_w0_val == 4
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000008;  op2val:0x00000004
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000008, 0x00000004, x1, 160, x2)

inst_54:
// rs1_w0_val == 4, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000004;  op2val:0xfffffbff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000004, 0xfffffbff, x1, 168, x2)

inst_55:
// rs1_w0_val == 2, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000002;  op2val:0xc0000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000002, 0xc0000000, x1, 176, x2)

inst_56:
// rs2_w0_val == 524288, rs1_w0_val == 4096
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00001000;  op2val:0x00080000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00001000, 0x00080000, x1, 184, x2)

inst_57:
// rs2_w0_val == 131072, rs1_w0_val == -1431655766
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaaaaa;  op2val:0x00020000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaaaaa, 0x00020000, x1, 192, x2)

inst_58:
// rs2_w0_val == 65536, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000010;  op2val:0x00010000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000010, 0x00010000, x1, 200, x2)

inst_59:
// rs2_w0_val == 32768, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000400;  op2val:0x00008000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000400, 0x00008000, x1, 208, x2)

inst_60:
// rs2_w0_val == 16384, rs1_w0_val == -268435457
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xefffffff;  op2val:0x00004000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xefffffff, 0x00004000, x1, 216, x2)

inst_61:
// rs2_w0_val == 8192, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffff;  op2val:0x00002000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffff, 0x00002000, x1, 224, x2)

inst_62:
// rs2_w0_val == 4096, rs1_w0_val == -67108865
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfbffffff;  op2val:0x00001000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfbffffff, 0x00001000, x1, 232, x2)

inst_63:
// rs2_w0_val == 2048, rs1_w0_val == -5
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffb;  op2val:0x00000800
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffb, 0x00000800, x1, 240, x2)

inst_64:
// rs2_w0_val == 512, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x20000000;  op2val:0x00000200
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x20000000, 0x00000200, x1, 248, x2)

inst_65:
// rs2_w0_val == 256, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00001000;  op2val:0x00000100
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00001000, 0x00000100, x1, 256, x2)

inst_66:
// rs2_w0_val == 64, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffbfffff;  op2val:0x00000040
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffbfffff, 0x00000040, x1, 264, x2)

inst_67:
// rs2_w0_val == 32, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffff;  op2val:0x00000020
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffff, 0x00000020, x1, 272, x2)

inst_68:
// rs2_w0_val == 16, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x3fffffff;  op2val:0x00000010
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x3fffffff, 0x00000010, x1, 280, x2)

inst_69:
// rs2_w0_val == 8, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000400;  op2val:0x00000008
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000400, 0x00000008, x1, 288, x2)

inst_70:
// rs2_w0_val == 2, rs1_w0_val == 524288
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00080000;  op2val:0x00000002
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00080000, 0x00000002, x1, 296, x2)

inst_71:
// rs2_w0_val == 1, rs1_w0_val == -257
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffeff;  op2val:0x00000001
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffeff, 0x00000001, x1, 304, x2)

inst_72:
// rs2_w0_val == 0, rs1_w0_val == -1025
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffbff;  op2val:0x00000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffbff, 0x00000000, x1, 312, x2)

inst_73:
// rs2_w0_val == -1, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000005;  op2val:0xffffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000005, 0xffffffff, x1, 320, x2)

inst_74:
// rs1_w0_val == 2147483647, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x7fffffff;  op2val:0xfeffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x7fffffff, 0xfeffffff, x1, 328, x2)

inst_75:
// rs1_w0_val == -1073741825, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xbfffffff;  op2val:0x00000002
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xbfffffff, 0x00000002, x1, 336, x2)

inst_76:
// rs1_w0_val == -536870913, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xdfffffff;  op2val:0xbfffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xdfffffff, 0xbfffffff, x1, 344, x2)

inst_77:
// rs1_w0_val == -16777217, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfeffffff;  op2val:0x00000400
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfeffffff, 0x00000400, x1, 352, x2)

inst_78:
// rs1_w0_val == -2097153, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffdfffff;  op2val:0x00000009
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffdfffff, 0x00000009, x1, 360, x2)

inst_79:
// rs1_w0_val == -524289, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfff7ffff;  op2val:0x01000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfff7ffff, 0x01000000, x1, 368, x2)

inst_80:
// rs1_w0_val == -262145, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffbffff;  op2val:0xfffffff8
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffbffff, 0xfffffff8, x1, 376, x2)

inst_81:
// rs1_w0_val == -65537, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffeffff;  op2val:0xefffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffeffff, 0xefffffff, x1, 384, x2)

inst_82:
// rs1_w0_val == -8193, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffdfff;  op2val:0x00000007
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffdfff, 0x00000007, x1, 392, x2)

inst_83:
// rs1_w0_val == -4097, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffefff;  op2val:0x00004000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffefff, 0x00004000, x1, 400, x2)

inst_84:
// rs1_w0_val == -513, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffdff;  op2val:0xffbfffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffdff, 0xffbfffff, x1, 408, x2)

inst_85:
// rs1_w0_val == -129, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffff7f;  op2val:0xffffffbf
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffff7f, 0xffffffbf, x1, 416, x2)

inst_86:
// rs1_w0_val == -33, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffdf;  op2val:0xf7ffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffdf, 0xf7ffffff, x1, 424, x2)

inst_87:
// rs1_w0_val == -17, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffef;  op2val:0x00000009
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffef, 0x00000009, x1, 432, x2)

inst_88:
// rs1_w0_val == -3, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffd;  op2val:0x00800000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffd, 0x00800000, x1, 440, x2)

inst_89:
// rs1_w0_val == -2, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffe;  op2val:0x3fffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffe, 0x3fffffff, x1, 448, x2)

inst_90:
// rs1_w0_val == 268435456, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x10000000;  op2val:0xfdffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x10000000, 0xfdffffff, x1, 456, x2)

inst_91:
// rs1_w0_val == 67108864, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x04000000;  op2val:0xff7fffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x04000000, 0xff7fffff, x1, 464, x2)

inst_92:
// rs1_w0_val == 8388608, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00800000;  op2val:0xfffffffb
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00800000, 0xfffffffb, x1, 472, x2)

inst_93:
// rs1_w0_val == 4194304, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00400000;  op2val:0x00000010
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00400000, 0x00000010, x1, 480, x2)

inst_94:
// rs1_w0_val == 1048576, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00100000;  op2val:0x00040000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00100000, 0x00040000, x1, 488, x2)

inst_95:
// rs1_w0_val == 262144, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00040000;  op2val:0x00000000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00040000, 0x00000000, x1, 496, x2)

inst_96:
// rs1_w0_val == 65536, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00010000;  op2val:0x00004000
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00010000, 0x00004000, x1, 504, x2)

inst_97:
// rs1_w0_val == 16384, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00004000;  op2val:0x00000006
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00004000, 0x00000006, x1, 512, x2)

inst_98:
// rs1_w0_val == 8192, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00002000;  op2val:0x00000005
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00002000, 0x00000005, x1, 520, x2)

inst_99:
// rs1_w0_val == rs2_w0_val, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffff6;  op2val:0xfffffff6
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffff6, 0xfffffff6, x1, 528, x2)

inst_100:
// rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 2097152, rs2_w0_val == -67108865
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00200000;  op2val:0xfbffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00200000, 0xfbffffff, x1, 536, x2)

inst_101:
// rs2_w0_val == -536870913, rs1_w0_val == 32
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000020;  op2val:0xdfffffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000020, 0xdfffffff, x1, 544, x2)

inst_102:
// rs2_w0_val == -262145, 
// opcode: smar64 ; op1:x31; op2:x29; dest:x30; op1val:0xff7fffff;  op2val:0xfffbffff
TEST_P64_PNN_OP(smar64, x30, x31, x31, x29, 0x00000000, 0, 0xff7fffff, 0xfffbffff, x1, 552, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 140*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
