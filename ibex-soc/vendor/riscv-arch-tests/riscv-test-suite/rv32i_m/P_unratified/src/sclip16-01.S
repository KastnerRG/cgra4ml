
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sclip16 instruction of the RISC-V RV32PZicsr extension for the sclip16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sclip16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x24, rd==x21, rs1_h0_val == -32768, imm_val == 15, rs1_h1_val == -16385
// opcode: sclip16 ; op1:x24; dest:x21; op1val:0xbfff8000;  immval:0xf
TEST_PKIMM_OP( sclip16, x21, x24, 0x00000000, 0xbfff8000, 0xf, x24, x1, 0, x6)

inst_1:
// rs1 == rd, rs1==x3, rd==x3, imm_val == 14, rs1_h1_val == 1024
// opcode: sclip16 ; op1:x3; dest:x3; op1val:0x400c000;  immval:0xe
TEST_PKIMM_OP( sclip16, x3, x3, 0x00000000, 0x400c000, 0xe, x3, x1, 8, x6)

inst_2:
// rs1==x10, rd==x26, imm_val == 13, rs1_h1_val == 16384, rs1_h0_val == -5
// opcode: sclip16 ; op1:x10; dest:x26; op1val:0x4000fffb;  immval:0xd
TEST_PKIMM_OP( sclip16, x26, x10, 0x00000000, 0x4000fffb, 0xd, x10, x1, 16, x6)

inst_3:
// rs1==x31, rd==x23, imm_val == 12, rs1_h0_val == -1
// opcode: sclip16 ; op1:x31; dest:x23; op1val:0x09ffff;  immval:0xc
TEST_PKIMM_OP( sclip16, x23, x31, 0x00000000, 0x09ffff, 0xc, x31, x1, 24, x6)

inst_4:
// rs1==x19, rd==x25, imm_val == 11, rs1_h0_val == 256
// opcode: sclip16 ; op1:x19; dest:x25; op1val:0x4000100;  immval:0xb
TEST_PKIMM_OP( sclip16, x25, x19, 0x00000000, 0x4000100, 0xb, x19, x1, 32, x6)

inst_5:
// rs1==x29, rd==x2, imm_val == 10, rs1_h0_val == -16385, rs1_h1_val == 1
// opcode: sclip16 ; op1:x29; dest:x2; op1val:0x01bfff;  immval:0xa
TEST_PKIMM_OP( sclip16, x2, x29, 0x00000000, 0x01bfff, 0xa, x29, x1, 40, x6)

inst_6:
// rs1==x21, rd==x15, imm_val == 9, rs1_h1_val == -2, rs1_h0_val == 2
// opcode: sclip16 ; op1:x21; dest:x15; op1val:0xfffe0002;  immval:0x9
TEST_PKIMM_OP( sclip16, x15, x21, 0x00000000, 0xfffe0002, 0x9, x21, x1, 48, x6)

inst_7:
// rs1==x30, rd==x24, imm_val == 8, rs1_h0_val == -8193
// opcode: sclip16 ; op1:x30; dest:x24; op1val:0x03dfff;  immval:0x8
TEST_PKIMM_OP( sclip16, x24, x30, 0x00000000, 0x03dfff, 0x8, x30, x1, 56, x6)

inst_8:
// rs1==x11, rd==x5, imm_val == 7, rs1_h1_val == -129, rs1_h0_val == -257
// opcode: sclip16 ; op1:x11; dest:x5; op1val:0xff7ffeff;  immval:0x7
TEST_PKIMM_OP( sclip16, x5, x11, 0x00000000, 0xff7ffeff, 0x7, x11, x1, 64, x6)

inst_9:
// rs1==x20, rd==x11, imm_val == 6, rs1_h1_val == -1025, rs1_h0_val == -1025
// opcode: sclip16 ; op1:x20; dest:x11; op1val:0xfbfffbff;  immval:0x6
TEST_PKIMM_OP( sclip16, x11, x20, 0x00000000, 0xfbfffbff, 0x6, x20, x1, 72, x6)

inst_10:
// rs1==x23, rd==x19, imm_val == 5, rs1_h0_val == 32, rs1_h1_val == 256
// opcode: sclip16 ; op1:x23; dest:x19; op1val:0x1000020;  immval:0x5
TEST_PKIMM_OP( sclip16, x19, x23, 0x00000000, 0x1000020, 0x5, x23, x1, 80, x6)

inst_11:
// rs1==x4, rd==x22, imm_val == 4, rs1_h1_val == 2, rs1_h0_val == 128
// opcode: sclip16 ; op1:x4; dest:x22; op1val:0x020080;  immval:0x4
TEST_PKIMM_OP( sclip16, x22, x4, 0x00000000, 0x020080, 0x4, x4, x1, 88, x6)

inst_12:
// rs1==x12, rd==x4, imm_val == 3, 
// opcode: sclip16 ; op1:x12; dest:x4; op1val:0x01fff8;  immval:0x3
TEST_PKIMM_OP( sclip16, x4, x12, 0x00000000, 0x01fff8, 0x3, x12, x1, 96, x6)

inst_13:
// rs1==x27, rd==x8, imm_val == 2, 
// opcode: sclip16 ; op1:x27; dest:x8; op1val:0xfffcfff8;  immval:0x2
TEST_PKIMM_OP( sclip16, x8, x27, 0x00000000, 0xfffcfff8, 0x2, x27, x1, 104, x6)

inst_14:
// rs1==x7, rd==x12, imm_val == 1, rs1_h0_val == -129
// opcode: sclip16 ; op1:x7; dest:x12; op1val:0xfff9ff7f;  immval:0x1
TEST_PKIMM_OP( sclip16, x12, x7, 0x00000000, 0xfff9ff7f, 0x1, x7, x1, 112, x6)

inst_15:
// rs1==x17, rd==x16, imm_val == 0, 
// opcode: sclip16 ; op1:x17; dest:x16; op1val:0xfff68000;  immval:0x0
TEST_PKIMM_OP( sclip16, x16, x17, 0x00000000, 0xfff68000, 0x0, x17, x1, 120, x6)

inst_16:
// rs1==x0, rd==x27, rs1_h1_val == -21846, 
// opcode: sclip16 ; op1:x0; dest:x27; op1val:0xaaaa0002;  immval:0xc
TEST_PKIMM_OP( sclip16, x27, x0, 0x00000000, 0xaaaa0002, 0xc, x0, x1, 128, x6)

inst_17:
// rs1==x8, rd==x18, rs1_h1_val == 21845, 
// opcode: sclip16 ; op1:x8; dest:x18; op1val:0x55550005;  immval:0x6
TEST_PKIMM_OP( sclip16, x18, x8, 0x00000000, 0x55550005, 0x6, x8, x1, 136, x6)

inst_18:
// rs1==x13, rd==x31, rs1_h1_val == 32767, 
// opcode: sclip16 ; op1:x13; dest:x31; op1val:0x7fff0002;  immval:0x2
TEST_PKIMM_OP( sclip16, x31, x13, 0x00000000, 0x7fff0002, 0x2, x13, x1, 144, x6)

inst_19:
// rs1==x25, rd==x10, rs1_h1_val == -8193, rs1_h0_val == 16
// opcode: sclip16 ; op1:x25; dest:x10; op1val:0xdfff0010;  immval:0x2
TEST_PKIMM_OP( sclip16, x10, x25, 0x00000000, 0xdfff0010, 0x2, x25, x1, 152, x6)

inst_20:
// rs1==x14, rd==x29, rs1_h1_val == -4097, 
// opcode: sclip16 ; op1:x14; dest:x29; op1val:0xeffffff9;  immval:0xf
TEST_PKIMM_OP( sclip16, x29, x14, 0x00000000, 0xeffffff9, 0xf, x14, x1, 160, x6)

inst_21:
// rs1==x6, rd==x30, rs1_h1_val == -2049, rs1_h0_val == -3
// opcode: sclip16 ; op1:x6; dest:x30; op1val:0xf7fffffd;  immval:0x3
TEST_PKIMM_OP( sclip16, x30, x6, 0x00000000, 0xf7fffffd, 0x3, x6, x1, 168, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_22:
// rs1==x15, rd==x28, rs1_h1_val == -513, rs1_h0_val == 1
// opcode: sclip16 ; op1:x15; dest:x28; op1val:0xfdff0001;  immval:0x0
TEST_PKIMM_OP( sclip16, x28, x15, 0x00000000, 0xfdff0001, 0x0, x15, x3, 0, x4)

inst_23:
// rs1==x5, rd==x14, rs1_h1_val == -257, rs1_h0_val == 8192
// opcode: sclip16 ; op1:x5; dest:x14; op1val:0xfeff2000;  immval:0x9
TEST_PKIMM_OP( sclip16, x14, x5, 0x00000000, 0xfeff2000, 0x9, x5, x3, 8, x4)

inst_24:
// rs1==x1, rd==x9, rs1_h1_val == -65, 
// opcode: sclip16 ; op1:x1; dest:x9; op1val:0xffbf0005;  immval:0x1
TEST_PKIMM_OP( sclip16, x9, x1, 0x00000000, 0xffbf0005, 0x1, x1, x3, 16, x4)

inst_25:
// rs1==x16, rd==x17, rs1_h1_val == -33, 
// opcode: sclip16 ; op1:x16; dest:x17; op1val:0xffdf0100;  immval:0x1
TEST_PKIMM_OP( sclip16, x17, x16, 0x00000000, 0xffdf0100, 0x1, x16, x3, 24, x4)

inst_26:
// rs1==x28, rd==x6, rs1_h1_val == -17, rs1_h0_val == -21846
// opcode: sclip16 ; op1:x28; dest:x6; op1val:0xffefaaaa;  immval:0xf
TEST_PKIMM_OP( sclip16, x6, x28, 0x00000000, 0xffefaaaa, 0xf, x28, x3, 32, x4)

inst_27:
// rs1==x26, rd==x1, rs1_h1_val == -9, rs1_h0_val == 32767
// opcode: sclip16 ; op1:x26; dest:x1; op1val:0xfff77fff;  immval:0xf
TEST_PKIMM_OP( sclip16, x1, x26, 0x00000000, 0xfff77fff, 0xf, x26, x3, 40, x4)

inst_28:
// rs1==x18, rd==x20, rs1_h1_val == -5, 
// opcode: sclip16 ; op1:x18; dest:x20; op1val:0xfffbfbff;  immval:0xd
TEST_PKIMM_OP( sclip16, x20, x18, 0x00000000, 0xfffbfbff, 0xd, x18, x3, 48, x4)

inst_29:
// rs1==x9, rd==x13, rs1_h1_val == -3, 
// opcode: sclip16 ; op1:x9; dest:x13; op1val:0xfffd0100;  immval:0xc
TEST_PKIMM_OP( sclip16, x13, x9, 0x00000000, 0xfffd0100, 0xc, x9, x3, 56, x4)

inst_30:
// rs1==x22, rd==x7, rs1_h0_val == -65, rs1_h1_val == 128
// opcode: sclip16 ; op1:x22; dest:x7; op1val:0x80ffbf;  immval:0x4
TEST_PKIMM_OP( sclip16, x7, x22, 0x00000000, 0x80ffbf, 0x4, x22, x3, 64, x4)

inst_31:
// rs1==x2, rd==x0, rs1_h0_val == -33, 
// opcode: sclip16 ; op1:x2; dest:x0; op1val:0x06ffdf;  immval:0xf
TEST_PKIMM_OP( sclip16, x0, x2, 0x00000000, 0x06ffdf, 0xf, x2, x3, 72, x4)

inst_32:
// rs1_h0_val == -17, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xefffffef;  immval:0x4
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xefffffef, 0x4, x30, x3, 80, x4)

inst_33:
// rs1_h0_val == -9, rs1_h1_val == 8192
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x2000fff7;  immval:0x2
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x2000fff7, 0x2, x30, x3, 88, x4)

inst_34:
// rs1_h0_val == -2, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xfff6fffe;  immval:0x5
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xfff6fffe, 0x5, x30, x3, 96, x4)

inst_35:
// rs1_h0_val == 16384, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xfffb4000;  immval:0xf
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xfffb4000, 0xf, x30, x3, 104, x4)

inst_36:
// rs1_h0_val == 4096, rs1_h1_val == 16
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x101000;  immval:0x4
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x101000, 0x4, x30, x3, 112, x4)

inst_37:
// rs1_h0_val == 2048, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xc0000800;  immval:0x7
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xc0000800, 0x7, x30, x3, 120, x4)

inst_38:
// rs1_h0_val == 1024, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xdfff0400;  immval:0x6
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xdfff0400, 0x6, x30, x3, 128, x4)

inst_39:
// rs1_h0_val == 512, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xc0000200;  immval:0x5
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xc0000200, 0x5, x30, x3, 136, x4)

inst_40:
// rs1_h0_val == 64, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xfdff0040;  immval:0xf
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xfdff0040, 0xf, x30, x3, 144, x4)

inst_41:
// rs1_h0_val == 8, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x090008;  immval:0x7
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x090008, 0x7, x30, x3, 152, x4)

inst_42:
// rs1_h0_val == 4, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x090004;  immval:0xd
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x090004, 0xd, x30, x3, 160, x4)

inst_43:
// rs1_h1_val == -32768, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x80000200;  immval:0xe
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x80000200, 0xe, x30, x3, 168, x4)

inst_44:
// rs1_h1_val == 4096, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x10000020;  immval:0xc
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x10000020, 0xc, x30, x3, 176, x4)

inst_45:
// rs1_h1_val == 2048, rs1_h0_val == -4097
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x800efff;  immval:0x6
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x800efff, 0x6, x30, x3, 184, x4)

inst_46:
// rs1_h1_val == 512, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x200fffa;  immval:0x8
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x200fffa, 0x8, x30, x3, 192, x4)

inst_47:
// rs1_h1_val == 64, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x400007;  immval:0x1
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x400007, 0x1, x30, x3, 200, x4)

inst_48:
// rs1_h1_val == 32, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x208000;  immval:0xc
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x208000, 0xc, x30, x3, 208, x4)

inst_49:
// rs1_h1_val == 8, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x08aaaa;  immval:0x1
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x08aaaa, 0x1, x30, x3, 216, x4)

inst_50:
// rs1_h1_val == 4, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x040100;  immval:0x5
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x040100, 0x5, x30, x3, 224, x4)

inst_51:
// rs1_h1_val == 0, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x00efff;  immval:0x7
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x00efff, 0x7, x30, x3, 232, x4)

inst_52:
// rs1_h1_val == -1, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xffff0040;  immval:0xc
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xffff0040, 0xc, x30, x3, 240, x4)

inst_53:
// rs1_h0_val == 21845, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xfff65555;  immval:0xd
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xfff65555, 0xd, x30, x3, 248, x4)

inst_54:
// rs1_h0_val == -2049, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xfff6f7ff;  immval:0xd
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xfff6f7ff, 0xd, x30, x3, 256, x4)

inst_55:
// rs1_h0_val == -513, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x7ffffdff;  immval:0x0
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x7ffffdff, 0x0, x30, x3, 264, x4)

inst_56:
// rs1_h0_val == 0, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xffef0000;  immval:0xf
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xffef0000, 0xf, x30, x3, 272, x4)

inst_57:
// rs1_h1_val == -21846, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0xaaaa0002;  immval:0xc
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0xaaaa0002, 0xc, x30, x3, 280, x4)

inst_58:
// rs1_h0_val == -33, 
// opcode: sclip16 ; op1:x30; dest:x31; op1val:0x06ffdf;  immval:0xf
TEST_PKIMM_OP( sclip16, x31, x30, 0x00000000, 0x06ffdf, 0xf, x30, x3, 288, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
