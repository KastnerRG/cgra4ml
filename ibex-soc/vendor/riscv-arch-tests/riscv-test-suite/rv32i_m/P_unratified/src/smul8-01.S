
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smul8 instruction of the RISC-V RV32PZicsr extension for the smul8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smul8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x22, rd==x4, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b3_val == 16
// opcode: smul8 ; op1:x19; op2:x22; dest:x4; op1val:0x10c00380;  op2val:0xf8c0f603
TEST_P64_PNN_OP(smul8, x4, x5, x19, x22, 0x00000000, 0, 0x10c00380, 0xf8c0f603, x1, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x28, rs1_b3_val == rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs2_b1_val == -17, rs1_b2_val == 32, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == -5
// opcode: smul8 ; op1:x17; op2:x17; dest:x28; op1val:0x0320fb03;  op2val:0x03f8ef07
TEST_P64_PNN_OP(smul8, x28, x29, x17, x17, 0x00000000, 0, 0x0320fb03, 0x03f8ef07, x1, 8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x29, rd==x2, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == -2, rs2_b3_val == 8, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b1_val == 4, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b2_val == 32, rs2_b0_val == -128
// opcode: smul8 ; op1:x2; op2:x29; dest:x2; op1val:0xf6fef93f;  op2val:0x08200480
TEST_P64_PNN_OP(smul8, x2, x3, x2, x29, 0x00000000, 0, 0xf6fef93f, 0x08200480, x1, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b3_val == -2, rs2_b0_val == 8, rs1_b2_val == -17, rs1_b3_val == -5, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 127, rs1_b0_val == 1
// opcode: smul8 ; op1:x30; op2:x30; dest:x30; op1val:0xfbef7f01;  op2val:0xfe050908
TEST_P64_PNN_OP(smul8, x30, x31, x30, x30, 0x00000000, 0, 0xfbef7f01, 0xfe050908, x1, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x18, rd==x18, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b0_val == 4, rs1_b1_val == -86, rs2_b3_val == 64, rs1_b2_val == 127
// opcode: smul8 ; op1:x13; op2:x18; dest:x18; op1val:0x037faaf9;  op2val:0x40090604
TEST_P64_PNN_OP(smul8, x18, x19, x13, x18, 0x00000000, 0, 0x037faaf9, 0x40090604, x1, 32, x8)

inst_5:
// rs1==x31, rs2==x0, rd==x16, rs1_b1_val == rs2_b1_val, rs1_b1_val == 0, rs1_b3_val == -65, rs1_b0_val == -2, rs1_b2_val == -1, rs2_b1_val == 0, rs2_b2_val == 8
// opcode: smul8 ; op1:x31; op2:x0; dest:x16; op1val:0xbfff00fe;  op2val:0xc008003f
TEST_P64_PNN_OP(smul8, x16, x17, x31, x0, 0x00000000, 0, 0xbfff00fe, 0xc008003f, x1, 40, x8)

inst_6:
// rs1==x27, rs2==x21, rd==x22, rs1_b0_val == rs2_b0_val, rs2_b2_val == 64, rs1_b1_val == 2, rs2_b3_val == 1, rs2_b1_val == -5
// opcode: smul8 ; op1:x27; op2:x21; dest:x22; op1val:0x03f90207;  op2val:0x0140fb07
TEST_P64_PNN_OP(smul8, x22, x23, x27, x21, 0x00000000, 0, 0x03f90207, 0x0140fb07, x1, 48, x8)

inst_7:
// rs1==x16, rs2==x28, rd==x24, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val == -65, rs2_b1_val == -3, rs2_b2_val == -17, rs2_b0_val == -86, rs2_b3_val == -9
// opcode: smul8 ; op1:x16; op2:x28; dest:x24; op1val:0xc0ef3fbf;  op2val:0xf7effdaa
TEST_P64_PNN_OP(smul8, x24, x25, x16, x28, 0x00000000, 0, 0xc0ef3fbf, 0xf7effdaa, x1, 56, x8)

inst_8:
// rs1==x3, rs2==x25, rd==x6, rs2_b3_val == -86, rs2_b2_val == -1, rs1_b3_val == -128, rs1_b2_val == 8
// opcode: smul8 ; op1:x3; op2:x25; dest:x6; op1val:0x80080003;  op2val:0xaafffc07
TEST_P64_PNN_OP(smul8, x6, x7, x3, x25, 0x00000000, 0, 0x80080003, 0xaafffc07, x1, 64, x8)

inst_9:
// rs1==x28, rs2==x26, rd==x20, rs2_b3_val == 85, rs1_b0_val == 8, rs2_b1_val == -9, rs2_b2_val == 0
// opcode: smul8 ; op1:x28; op2:x26; dest:x20; op1val:0xf908aa08;  op2val:0x5500f706
TEST_P64_PNN_OP(smul8, x20, x21, x28, x26, 0x00000000, 0, 0xf908aa08, 0x5500f706, x1, 72, x8)

inst_10:
// rs1==x0, rs2==x15, rd==x26, rs2_b3_val == 127, rs1_b2_val == -65, rs1_b3_val == -9, rs1_b0_val == 16, rs2_b0_val == 127, rs1_b1_val == -9, rs2_b2_val == 2
// opcode: smul8 ; op1:x0; op2:x15; dest:x26; op1val:0xf7bff710;  op2val:0x7f02f97f
TEST_P64_PNN_OP(smul8, x26, x27, x0, x15, 0x00000000, 0, 0xf7bff710, 0x7f02f97f, x1, 80, x8)

inst_11:
// rs1==x25, rs2==x12, rd==x14, rs2_b3_val == -65, 
// opcode: smul8 ; op1:x25; op2:x12; dest:x14; op1val:0x0609aa80;  op2val:0xbfc0c07f
TEST_P64_PNN_OP(smul8, x14, x15, x25, x12, 0x00000000, 0, 0x0609aa80, 0xbfc0c07f, x1, 88, x8)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_12:
// rs1==x11, rs2==x24, rd==x8, rs2_b3_val == -33, rs1_b2_val == -128
// opcode: smul8 ; op1:x11; op2:x24; dest:x8; op1val:0xf6803f03;  op2val:0xdf20fd07
TEST_P64_PNN_OP(smul8, x8, x9, x11, x24, 0x00000000, 0, 0xf6803f03, 0xdf20fd07, x15, 0, x17)

inst_13:
// rs1==x26, rs2==x16, rd==x10, rs2_b3_val == -17, rs1_b0_val == -33, rs2_b1_val == -128, rs1_b3_val == -3, rs2_b0_val == -33, rs2_b2_val == 4
// opcode: smul8 ; op1:x26; op2:x16; dest:x10; op1val:0xfdbff7df;  op2val:0xef0480df
TEST_P64_PNN_OP(smul8, x10, x11, x26, x16, 0x00000000, 0, 0xfdbff7df, 0xef0480df, x15, 8, x17)

inst_14:
// rs1==x8, rs2==x11, rd==x12, rs2_b3_val == -5, rs2_b0_val == 64
// opcode: smul8 ; op1:x8; op2:x11; dest:x12; op1val:0x0909f705;  op2val:0xfb050940
TEST_P64_PNN_OP(smul8, x12, x13, x8, x11, 0x00000000, 0, 0x0909f705, 0xfb050940, x15, 16, x17)

inst_15:
// rs1==x9, rs2==x3, rs2_b3_val == -3, rs1_b2_val == 64, rs1_b3_val == 85, rs2_b1_val == 64
// opcode: smul8 ; op1:x9; op2:x3; dest:x8; op1val:0x55400306;  op2val:0xfd054080
TEST_P64_PNN_OP(smul8, x8, x9, x9, x3, 0x00000000, 0, 0x55400306, 0xfd054080, x15, 24, x17)

inst_16:
// rs1==x1, rs2==x10, rs2_b3_val == -128, rs1_b1_val == -65, rs2_b0_val == -5, rs1_b3_val == -17
// opcode: smul8 ; op1:x1; op2:x10; dest:x2; op1val:0xeff9bfbf;  op2val:0x800003fb
TEST_P64_PNN_OP(smul8, x2, x3, x1, x10, 0x00000000, 0, 0xeff9bfbf, 0x800003fb, x15, 32, x17)

inst_17:
// rs1==x5, rs2==x9, rs2_b3_val == 32, rs2_b0_val == 32
// opcode: smul8 ; op1:x5; op2:x9; dest:x24; op1val:0x55bf053f;  op2val:0x2040ef20
TEST_P64_PNN_OP(smul8, x24, x25, x5, x9, 0x00000000, 0, 0x55bf053f, 0x2040ef20, x15, 40, x17)

inst_18:
// rs1==x20, rs2==x7, rs2_b3_val == 16, 
// opcode: smul8 ; op1:x20; op2:x7; dest:x28; op1val:0x05f9f6fc;  op2val:0x10040608
TEST_P64_PNN_OP(smul8, x28, x29, x20, x7, 0x00000000, 0, 0x05f9f6fc, 0x10040608, x15, 48, x17)

inst_19:
// rs1==x7, rs2==x5, rs2_b3_val == 4, rs1_b1_val == 4
// opcode: smul8 ; op1:x7; op2:x5; dest:x4; op1val:0x80050403;  op2val:0x040900df
TEST_P64_PNN_OP(smul8, x4, x5, x7, x5, 0x00000000, 0, 0x80050403, 0x040900df, x15, 56, x17)

inst_20:
// rs1==x24, rs2==x23, rs2_b3_val == 2, rs1_b3_val == -86, rs1_b1_val == -2, rs2_b0_val == -3
// opcode: smul8 ; op1:x24; op2:x23; dest:x10; op1val:0xaaf9fe10;  op2val:0x02c0fdfd
TEST_P64_PNN_OP(smul8, x10, x11, x24, x23, 0x00000000, 0, 0xaaf9fe10, 0x02c0fdfd, x15, 64, x17)

inst_21:
// rs1==x4, rs2==x20, rs2_b3_val == 0, rs1_b0_val == 4, rs1_b2_val == -3, rs1_b1_val == 32
// opcode: smul8 ; op1:x4; op2:x20; dest:x28; op1val:0xaafd2004;  op2val:0x0006c0f9
TEST_P64_PNN_OP(smul8, x28, x29, x4, x20, 0x00000000, 0, 0xaafd2004, 0x0006c0f9, x15, 72, x17)

inst_22:
// rs1==x10, rs2==x19, rs2_b3_val == -1, rs1_b2_val == 2
// opcode: smul8 ; op1:x10; op2:x19; dest:x26; op1val:0x1002aaf8;  op2val:0xff08f608
TEST_P64_PNN_OP(smul8, x26, x27, x10, x19, 0x00000000, 0, 0x1002aaf8, 0xff08f608, x15, 80, x17)

inst_23:
// rs1==x23, rs2==x6, rs2_b2_val == -86, rs2_b0_val == -17, rs1_b2_val == 1, rs1_b0_val == 127
// opcode: smul8 ; op1:x23; op2:x6; dest:x20; op1val:0x5501bf7f;  op2val:0x06aa03ef
TEST_P64_PNN_OP(smul8, x20, x21, x23, x6, 0x00000000, 0, 0x5501bf7f, 0x06aa03ef, x15, 88, x17)

inst_24:
// rs1==x14, rs2==x13, rs2_b2_val == 85, rs1_b1_val == 1, rs1_b2_val == 85, rs1_b3_val == 8
// opcode: smul8 ; op1:x14; op2:x13; dest:x8; op1val:0x0855013f;  op2val:0x1055fc3f
TEST_P64_PNN_OP(smul8, x8, x9, x14, x13, 0x00000000, 0, 0x0855013f, 0x1055fc3f, x15, 96, x17)

inst_25:
// rs1==x21, rs2==x14, rs2_b2_val == 127, rs1_b1_val == 16
// opcode: smul8 ; op1:x21; op2:x14; dest:x30; op1val:0x080210f8;  op2val:0xfb7f09fb
TEST_P64_PNN_OP(smul8, x30, x31, x21, x14, 0x00000000, 0, 0x080210f8, 0xfb7f09fb, x15, 104, x17)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_26:
// rs1==x22, rs2==x4, rs2_b2_val == -65, rs2_b0_val == -1, rs2_b1_val == 2, rs1_b2_val == -86
// opcode: smul8 ; op1:x22; op2:x4; dest:x18; op1val:0x80aaf87f;  op2val:0x05bf02ff
TEST_P64_PNN_OP(smul8, x18, x19, x22, x4, 0x00000000, 0, 0x80aaf87f, 0x05bf02ff, x3, 0, x5)

inst_27:
// rs1==x18, rs2==x27, rs2_b2_val == -33, rs1_b0_val == 32
// opcode: smul8 ; op1:x18; op2:x27; dest:x22; op1val:0x08fe0020;  op2val:0x04df0320
TEST_P64_PNN_OP(smul8, x22, x23, x18, x27, 0x00000000, 0, 0x08fe0020, 0x04df0320, x3, 8, x5)

inst_28:
// rs1==x29, rs2==x1, rs1_b2_val == -33, rs2_b1_val == -33
// opcode: smul8 ; op1:x29; op2:x1; dest:x26; op1val:0xf9dff703;  op2val:0xf905dff6
TEST_P64_PNN_OP(smul8, x26, x27, x29, x1, 0x00000000, 0, 0xf9dff703, 0xf905dff6, x3, 16, x5)

inst_29:
// rs1==x6, rs2==x2, rs1_b2_val == -9, rs1_b1_val == -3, rs2_b0_val == -9
// opcode: smul8 ; op1:x6; op2:x2; dest:x4; op1val:0x05f7fddf;  op2val:0xef55dff7
TEST_P64_PNN_OP(smul8, x4, x5, x6, x2, 0x00000000, 0, 0x05f7fddf, 0xef55dff7, x3, 24, x5)

inst_30:
// rs1==x12, rs2==x8, rs1_b2_val == -5, rs2_b1_val == -2, rs1_b0_val == -86
// opcode: smul8 ; op1:x12; op2:x8; dest:x16; op1val:0xfcfbf6aa;  op2val:0xfc05fe04
TEST_P64_PNN_OP(smul8, x16, x17, x12, x8, 0x00000000, 0, 0xfcfbf6aa, 0xfc05fe04, x3, 32, x5)

inst_31:
// rs1==x15, rs2==x31, rs1_b2_val == 16, 
// opcode: smul8 ; op1:x15; op2:x31; dest:x14; op1val:0x07100509;  op2val:0x2002033f
TEST_P64_PNN_OP(smul8, x14, x15, x15, x31, 0x00000000, 0, 0x07100509, 0x2002033f, x3, 40, x5)

inst_32:
// rs1_b2_val == 4, rs1_b0_val == 64
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xc004bf40;  op2val:0xffdf80df
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xc004bf40, 0xffdf80df, x3, 48, x5)

inst_33:
// rs1_b2_val == 0, rs2_b0_val == -2
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x3f00fe01;  op2val:0x01aaf7fe
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x3f00fe01, 0x01aaf7fe, x3, 56, x5)

inst_34:
// rs1_b1_val == 85, rs1_b3_val == 1, rs2_b0_val == 0
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x01aa5580;  op2val:0xfb03fb00
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x01aa5580, 0xfb03fb00, x3, 64, x5)

inst_35:
// rs1_b1_val == -33, rs1_b0_val == -17
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x55efdfef;  op2val:0x05fffa06
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x55efdfef, 0x05fffa06, x3, 72, x5)

inst_36:
// rs1_b1_val == -17, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf608ef3f;  op2val:0xdfc002f7
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf608ef3f, 0xdfc002f7, x3, 80, x5)

inst_37:
// rs1_b1_val == -128, rs1_b3_val == 2, rs2_b1_val == 127
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x02fb807f;  op2val:0x04fa7fdf
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x02fb807f, 0x04fa7fdf, x3, 88, x5)

inst_38:
// rs1_b1_val == 64, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfbf84005;  op2val:0x55f8ef08
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfbf84005, 0x55f8ef08, x3, 96, x5)

inst_39:
// rs1_b1_val == 8, rs1_b0_val == -9
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x060608f7;  op2val:0x20aafe04
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x060608f7, 0x20aafe04, x3, 104, x5)

inst_40:
// rs1_b1_val == -1, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xaa09ffef;  op2val:0xf8c0dffa
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xaa09ffef, 0xf8c0dffa, x3, 112, x5)

inst_41:
// rs1_b0_val == 85, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x80f80155;  op2val:0xf802fd3f
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x80f80155, 0xf802fd3f, x3, 120, x5)

inst_42:
// rs1_b0_val == -5, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0207fafb;  op2val:0x0420fb7f
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0207fafb, 0x0420fb7f, x3, 128, x5)

inst_43:
// rs1_b0_val == -3, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xaa55fdfd;  op2val:0xdf09ef06
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xaa55fdfd, 0xdf09ef06, x3, 136, x5)

inst_44:
// rs2_b1_val == -86, rs1_b3_val == -2, rs2_b2_val == -2
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfef9fe09;  op2val:0x06feaa08
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfef9fe09, 0x06feaa08, x3, 144, x5)

inst_45:
// rs2_b1_val == 85, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x03fb55df;  op2val:0x80f85504
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x03fb55df, 0x80f85504, x3, 152, x5)

inst_46:
// rs2_b1_val == -65, rs1_b3_val == -33
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xdf07efef;  op2val:0x03fcbf06
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xdf07efef, 0x03fcbf06, x3, 160, x5)

inst_47:
// rs2_b1_val == 32, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0209f906;  op2val:0x3f0420f7
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0209f906, 0x3f0420f7, x3, 168, x5)

inst_48:
// rs2_b1_val == 16, rs2_b0_val == -65
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf906bf3f;  op2val:0xaaf610bf
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf906bf3f, 0xaaf610bf, x3, 176, x5)

inst_49:
// rs2_b1_val == 8, rs2_b2_val == -9
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xdf3ffaf9;  op2val:0xfaf7083f
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xdf3ffaf9, 0xfaf7083f, x3, 184, x5)

inst_50:
// rs2_b1_val == 1, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7f6c0bf;  op2val:0xfaf70140
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf7f6c0bf, 0xfaf70140, x3, 192, x5)

inst_51:
// rs1_b3_val == 64, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x407ffc06;  op2val:0xf9aa0206
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x407ffc06, 0xf9aa0206, x3, 200, x5)

inst_52:
// rs2_b1_val == -1, rs1_b3_val == 4, rs1_b0_val == 2
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0404f802;  op2val:0xfd40ffc0
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0404f802, 0xfd40ffc0, x3, 208, x5)

inst_53:
// rs2_b2_val == -128, rs1_b3_val == -1
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xff400080;  op2val:0xff80df03
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xff400080, 0xff80df03, x3, 216, x5)

inst_54:
// rs2_b0_val == 16, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf709f906;  op2val:0xfd808010
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf709f906, 0xfd808010, x3, 224, x5)

inst_55:
// rs2_b0_val == 2, rs2_b2_val == 16
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfa5501f8;  op2val:0xf610c002
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfa5501f8, 0xf610c002, x3, 232, x5)

inst_56:
// rs2_b0_val == 1, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfc7f00fb;  op2val:0x55034001
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfc7f00fb, 0x55034001, x3, 240, x5)

inst_57:
// rs1_b3_val == 127, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x7ffb09c0;  op2val:0x05fe07c0
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x7ffb09c0, 0x05fe07c0, x3, 248, x5)

inst_58:
// rs2_b2_val == -5, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7200620;  op2val:0x40fbaa06
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf7200620, 0x40fbaa06, x3, 256, x5)

inst_59:
// rs1_b3_val == 32, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x20010055;  op2val:0x4010fcfd
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x20010055, 0x4010fcfd, x3, 264, x5)

inst_60:
// rs2_b2_val == -3, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfcfa03f7;  op2val:0xfffdaaef
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfcfa03f7, 0xfffdaaef, x3, 272, x5)

inst_61:
// rs2_b0_val == 85, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfc80fa55;  op2val:0xf7400155
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfc80fa55, 0xf7400155, x3, 280, x5)

inst_62:
// rs2_b2_val == 1, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xefc0bf40;  op2val:0x40010180
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xefc0bf40, 0x40010180, x3, 288, x5)

inst_63:
// rs1_b3_val == 0, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0002ef08;  op2val:0x55f7aa06
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0002ef08, 0x55f7aa06, x3, 296, x5)

inst_64:
// rs1_b0_val == 0, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0120f900;  op2val:0xbff840df
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0120f900, 0xbff840df, x3, 304, x5)

inst_65:
// rs1_b0_val == -1, 
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7fdfaff;  op2val:0x06aaeffc
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf7fdfaff, 0x06aaeffc, x3, 312, x5)

inst_66:
// rs1_b3_val == rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs2_b1_val == -17, rs1_b2_val == 32, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == -5
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0320fb03;  op2val:0x03f8ef07
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0x0320fb03, 0x03f8ef07, x3, 320, x5)

inst_67:
// rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b3_val == -2, rs2_b0_val == 8, rs1_b2_val == -17, rs1_b3_val == -5, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 127, rs1_b0_val == 1
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfbef7f01;  op2val:0xfe050908
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xfbef7f01, 0xfe050908, x3, 328, x5)

inst_68:
// rs1_b1_val == rs2_b1_val, rs1_b1_val == 0, rs1_b3_val == -65, rs1_b0_val == -2, rs1_b2_val == -1, rs2_b1_val == 0, rs2_b2_val == 8
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xbfff00fe;  op2val:0xc008003f
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xbfff00fe, 0xc008003f, x3, 336, x5)

inst_69:
// rs2_b3_val == 127, rs1_b2_val == -65, rs1_b3_val == -9, rs1_b0_val == 16, rs2_b0_val == 127, rs1_b1_val == -9, rs2_b2_val == 2
// opcode: smul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7bff710;  op2val:0x7f02f97f
TEST_P64_PNN_OP(smul8, x30, x31, x31, x29, 0x00000000, 0, 0xf7bff710, 0x7f02f97f, x3, 344, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 88*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
