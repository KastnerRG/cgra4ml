
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urstsa16 instruction of the RISC-V RV32PZicsr extension for the urstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x14, rd==x13, rs1_h0_val == 0, rs2_h0_val == 512, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 4
// opcode: urstsa16 ; op1:x24; op2:x14; dest:x13; op1val:0x0c0000;  op2val:0x040200
TEST_RR_OP(urstsa16, x13, x24, x14, 0x00000000, 0x0c0000, 0x040200, x1, 0, x10)

inst_1:// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x22, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 21845, rs1_h0_val == 64, rs1_h1_val == 21845, rs2_h0_val == 65471
// opcode: urstsa16 ; op1:x17; op2:x17; dest:x22; op1val:0x55550040;  op2val:0x5555ffbf
TEST_RR_OP(urstsa16, x22, x17, x17, 0x00000000, 0x55550040, 0x5555ffbf, x1, 4, x10)

inst_2:// rs1 == rd != rs2, rs1==x16, rs2==x2, rd==x16, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 65531, rs1_h0_val == 65531, rs1_h1_val == 65535
// opcode: urstsa16 ; op1:x16; op2:x2; dest:x16; op1val:0xfffffffb;  op2val:0x0ffffb
TEST_RR_OP(urstsa16, x16, x16, x2, 0x00000000, 0xfffffffb, 0x0ffffb, x1, 8, x10)

inst_3:// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs2_h1_val == 43690, rs1_h1_val == 65503, rs1_h0_val == 49151, rs2_h0_val == 8
// opcode: urstsa16 ; op1:x15; op2:x15; dest:x15; op1val:0xffdfbfff;  op2val:0xaaaa0008
TEST_RR_OP(urstsa16, x15, x15, x15, 0x00000000, 0xffdfbfff, 0xaaaa0008, x1, 12, x10)

inst_4:// rs2 == rd != rs1, rs1==x28, rs2==x27, rd==x27, rs2_h1_val == 32767, rs1_h0_val == 65023
// opcode: urstsa16 ; op1:x28; op2:x27; dest:x27; op1val:0x0cfdff;  op2val:0x7fff0011
TEST_RR_OP(urstsa16, x27, x28, x27, 0x00000000, 0x0cfdff, 0x7fff0011, x1, 16, x10)

inst_5:// rs1==x11, rs2==x6, rd==x14, rs2_h1_val == 49151, rs2_h0_val == 32768, rs1_h1_val == 1024, rs1_h0_val == 128
// opcode: urstsa16 ; op1:x11; op2:x6; dest:x14; op1val:0x4000080;  op2val:0xbfff8000
TEST_RR_OP(urstsa16, x14, x11, x6, 0x00000000, 0x4000080, 0xbfff8000, x1, 20, x10)

inst_6:// rs1==x2, rs2==x31, rd==x25, rs2_h1_val == 57343, 
// opcode: urstsa16 ; op1:x2; op2:x31; dest:x25; op1val:0x11000f;  op2val:0xdfff0005
TEST_RR_OP(urstsa16, x25, x2, x31, 0x00000000, 0x11000f, 0xdfff0005, x1, 24, x10)

inst_7:// rs1==x14, rs2==x16, rd==x6, rs2_h1_val == 61439, rs2_h0_val == 43690
// opcode: urstsa16 ; op1:x14; op2:x16; dest:x6; op1val:0x06000e;  op2val:0xefffaaaa
TEST_RR_OP(urstsa16, x6, x14, x16, 0x00000000, 0x06000e, 0xefffaaaa, x1, 28, x10)

inst_8:// rs1==x6, rs2==x3, rd==x29, rs2_h1_val == 63487, rs1_h1_val == 65519, rs1_h0_val == 65535
// opcode: urstsa16 ; op1:x6; op2:x3; dest:x29; op1val:0xffefffff;  op2val:0xf7ff0009
TEST_RR_OP(urstsa16, x29, x6, x3, 0x00000000, 0xffefffff, 0xf7ff0009, x1, 32, x10)

inst_9:// rs1==x25, rs2==x0, rd==x7, rs2_h1_val == 64511, rs1_h1_val == 64, rs2_h0_val == 16384
// opcode: urstsa16 ; op1:x25; op2:x0; dest:x7; op1val:0x400013;  op2val:0xfbff4000
TEST_RR_OP(urstsa16, x7, x25, x0, 0x00000000, 0x400013, 0xfbff4000, x1, 36, x10)

inst_10:// rs1==x9, rs2==x5, rd==x11, rs2_h1_val == 65023, rs2_h0_val == 65407, rs1_h1_val == 256
// opcode: urstsa16 ; op1:x9; op2:x5; dest:x11; op1val:0x1000007;  op2val:0xfdffff7f
TEST_RR_OP(urstsa16, x11, x9, x5, 0x00000000, 0x1000007, 0xfdffff7f, x1, 40, x10)

inst_11:// rs1==x19, rs2==x30, rd==x12, rs2_h1_val == 65279, rs1_h1_val == 49151, rs2_h0_val == 0, rs1_h0_val == 1024
// opcode: urstsa16 ; op1:x19; op2:x30; dest:x12; op1val:0xbfff0400;  op2val:0xfeff0000
TEST_RR_OP(urstsa16, x12, x19, x30, 0x00000000, 0xbfff0400, 0xfeff0000, x1, 44, x10)

inst_12:// rs1==x20, rs2==x11, rd==x8, rs2_h1_val == 65407, rs1_h1_val == 0, rs2_h0_val == 2, rs1_h0_val == 16384
// opcode: urstsa16 ; op1:x20; op2:x11; dest:x8; op1val:0x004000;  op2val:0xff7f0002
TEST_RR_OP(urstsa16, x8, x20, x11, 0x00000000, 0x004000, 0xff7f0002, x1, 48, x10)

inst_13:// rs1==x31, rs2==x12, rd==x5, rs2_h1_val == 65471, rs1_h0_val == 65533, rs2_h0_val == 65279, rs1_h1_val == 65407
// opcode: urstsa16 ; op1:x31; op2:x12; dest:x5; op1val:0xff7ffffd;  op2val:0xffbffeff
TEST_RR_OP(urstsa16, x5, x31, x12, 0x00000000, 0xff7ffffd, 0xffbffeff, x1, 52, x10)

inst_14:// rs1==x13, rs2==x21, rd==x9, rs2_h1_val == 65503, rs2_h0_val == 1, rs1_h1_val == 64511
// opcode: urstsa16 ; op1:x13; op2:x21; dest:x9; op1val:0xfbff000e;  op2val:0xffdf0001
TEST_RR_OP(urstsa16, x9, x13, x21, 0x00000000, 0xfbff000e, 0xffdf0001, x1, 56, x10)

inst_15:// rs1==x23, rs2==x22, rd==x4, rs2_h1_val == 65519, rs1_h1_val == 65534
// opcode: urstsa16 ; op1:x23; op2:x22; dest:x4; op1val:0xfffe0080;  op2val:0xffef000e
TEST_RR_OP(urstsa16, x4, x23, x22, 0x00000000, 0xfffe0080, 0xffef000e, x1, 60, x10)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:// rs1==x21, rs2==x28, rd==x2, rs2_h1_val == 65527, rs1_h1_val == 1, rs2_h0_val == 2048
// opcode: urstsa16 ; op1:x21; op2:x28; dest:x2; op1val:0x01fffb;  op2val:0xfff70800
TEST_RR_OP(urstsa16, x2, x21, x28, 0x00000000, 0x01fffb, 0xfff70800, x6, 0, x11)

inst_17:// rs1==x22, rs2==x13, rd==x17, rs2_h1_val == 65531, rs1_h0_val == 4096, rs2_h0_val == 16
// opcode: urstsa16 ; op1:x22; op2:x13; dest:x17; op1val:0xffff1000;  op2val:0xfffb0010
TEST_RR_OP(urstsa16, x17, x22, x13, 0x00000000, 0xffff1000, 0xfffb0010, x6, 4, x11)

inst_18:// rs1==x29, rs2==x10, rd==x24, rs2_h1_val == 65533, 
// opcode: urstsa16 ; op1:x29; op2:x10; dest:x24; op1val:0xffeffdff;  op2val:0xfffdff7f
TEST_RR_OP(urstsa16, x24, x29, x10, 0x00000000, 0xffeffdff, 0xfffdff7f, x6, 8, x11)

inst_19:// rs1==x18, rs2==x25, rd==x23, rs2_h1_val == 65534, rs2_h0_val == 57343, rs1_h0_val == 8192
// opcode: urstsa16 ; op1:x18; op2:x25; dest:x23; op1val:0x4002000;  op2val:0xfffedfff
TEST_RR_OP(urstsa16, x23, x18, x25, 0x00000000, 0x4002000, 0xfffedfff, x6, 12, x11)

inst_20:// rs1==x3, rs2==x18, rd==x31, rs2_h1_val == 32768, 
// opcode: urstsa16 ; op1:x3; op2:x18; dest:x31; op1val:0xff7f000f;  op2val:0x80000200
TEST_RR_OP(urstsa16, x31, x3, x18, 0x00000000, 0xff7f000f, 0x80000200, x6, 16, x11)

inst_21:// rs1==x5, rs2==x8, rd==x26, rs2_h1_val == 16384, rs1_h0_val == 57343
// opcode: urstsa16 ; op1:x5; op2:x8; dest:x26; op1val:0x400dfff;  op2val:0x4000dfff
TEST_RR_OP(urstsa16, x26, x5, x8, 0x00000000, 0x400dfff, 0x4000dfff, x6, 20, x11)

inst_22:// rs1==x12, rs2==x20, rd==x19, rs2_h1_val == 8192, rs1_h0_val == 256, rs1_h1_val == 32767
// opcode: urstsa16 ; op1:x12; op2:x20; dest:x19; op1val:0x7fff0100;  op2val:0x20004000
TEST_RR_OP(urstsa16, x19, x12, x20, 0x00000000, 0x7fff0100, 0x20004000, x6, 24, x11)

inst_23:// rs1==x7, rs2==x1, rd==x3, rs2_h1_val == 4096, rs1_h1_val == 61439
// opcode: urstsa16 ; op1:x7; op2:x1; dest:x3; op1val:0xefff0100;  op2val:0x10000006
TEST_RR_OP(urstsa16, x3, x7, x1, 0x00000000, 0xefff0100, 0x10000006, x6, 28, x11)

inst_24:// rs1==x10, rs2==x7, rd==x30, rs2_h1_val == 2048, rs2_h0_val == 49151
// opcode: urstsa16 ; op1:x10; op2:x7; dest:x30; op1val:0x7fff000e;  op2val:0x800bfff
TEST_RR_OP(urstsa16, x30, x10, x7, 0x00000000, 0x7fff000e, 0x800bfff, x6, 32, x11)

inst_25:// rs1==x30, rs2==x26, rd==x20, rs2_h1_val == 1024, rs2_h0_val == 65023, rs1_h1_val == 4
// opcode: urstsa16 ; op1:x30; op2:x26; dest:x20; op1val:0x040100;  op2val:0x400fdff
TEST_RR_OP(urstsa16, x20, x30, x26, 0x00000000, 0x040100, 0x400fdff, x6, 36, x11)

inst_26:// rs1==x1, rs2==x4, rd==x21, rs2_h1_val == 512, rs1_h1_val == 2, rs2_h0_val == 65519, rs1_h0_val == 63487
// opcode: urstsa16 ; op1:x1; op2:x4; dest:x21; op1val:0x02f7ff;  op2val:0x200ffef
TEST_RR_OP(urstsa16, x21, x1, x4, 0x00000000, 0x02f7ff, 0x200ffef, x6, 40, x11)

inst_27:// rs1==x27, rs2==x24, rd==x0, rs2_h1_val == 256, 
// opcode: urstsa16 ; op1:x27; op2:x24; dest:x0; op1val:0x110012;  op2val:0x1000000
TEST_RR_OP(urstsa16, x0, x27, x24, 0x00000000, 0x110012, 0x1000000, x6, 44, x11)

inst_28:// rs1==x4, rs2==x9, rd==x1, rs2_h1_val == 128, rs1_h1_val == 32
// opcode: urstsa16 ; op1:x4; op2:x9; dest:x1; op1val:0x20fffd;  op2val:0x80bfff
TEST_RR_OP(urstsa16, x1, x4, x9, 0x00000000, 0x20fffd, 0x80bfff, x6, 48, x11)

inst_29:// rs1==x8, rs2==x23, rd==x18, rs2_h1_val == 64, rs2_h0_val == 256
// opcode: urstsa16 ; op1:x8; op2:x23; dest:x18; op1val:0x4000007;  op2val:0x400100
TEST_RR_OP(urstsa16, x18, x8, x23, 0x00000000, 0x4000007, 0x400100, x6, 52, x1)

inst_30:// rs1==x26, rs2==x19, rd==x28, rs2_h1_val == 32, rs2_h0_val == 64511, rs1_h0_val == 65534
// opcode: urstsa16 ; op1:x26; op2:x19; dest:x28; op1val:0x20fffe;  op2val:0x20fbff
TEST_RR_OP(urstsa16, x28, x26, x19, 0x00000000, 0x20fffe, 0x20fbff, x6, 56, x1)

inst_31:// rs1==x0, rs2==x29, rd==x10, rs1_h0_val == 32768, 
// opcode: urstsa16 ; op1:x0; op2:x29; dest:x10; op1val:0x058000;  op2val:0x03000d
TEST_RR_OP(urstsa16, x10, x0, x29, 0x00000000, 0x058000, 0x03000d, x6, 60, x1)

inst_32:// rs1_h0_val == 2048, rs1_h1_val == 512
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000800;  op2val:0x0d4000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x2000800, 0x0d4000, x6, 64, x1)

inst_33:// rs1_h0_val == 512, rs2_h0_val == 64
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400200;  op2val:0x130040
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x400200, 0x130040, x6, 68, x1)

inst_34:// rs1_h0_val == 32, rs1_h1_val == 4096
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020;  op2val:0x0cffbf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x10000020, 0x0cffbf, x6, 72, x1)

inst_35:// rs1_h0_val == 16, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010;  op2val:0xefff000e
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xff7f0010, 0xefff000e, x6, 76, x1)

inst_36:// rs1_h0_val == 8, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008;  op2val:0x0ffffb
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfbff0008, 0x0ffffb, x6, 80, x1)

inst_37:// rs1_h0_val == 4, rs2_h1_val == 16, rs1_h1_val == 63487
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004;  op2val:0x100008
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xf7ff0004, 0x100008, x6, 84, x1)

inst_38:// rs1_h0_val == 2, rs2_h1_val == 0, rs2_h0_val == 21845
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0002;  op2val:0x005555
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xefff0002, 0x005555, x6, 88, x1)

inst_39:// rs1_h0_val == 1, rs2_h0_val == 63487
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x020001;  op2val:0xaaaaf7ff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x020001, 0xaaaaf7ff, x6, 92, x1)

inst_40:// rs2_h1_val == 8, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0400;  op2val:0x080040
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xffdf0400, 0x080040, x6, 96, x1)

inst_41:// rs2_h1_val == 2, rs2_h0_val == 32767
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000b;  op2val:0x027fff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x40000b, 0x027fff, x6, 100, x1)

inst_42:// rs2_h1_val == 1, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0080;  op2val:0x010002
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xbfff0080, 0x010002, x6, 104, x1)

inst_43:// rs2_h1_val == 65535, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550005;  op2val:0xffff0100
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x55550005, 0xffff0100, x6, 108, x1)

inst_44:// rs2_h0_val == 61439, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0008;  op2val:0x06efff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x0c0008, 0x06efff, x6, 112, x1)

inst_45:// rs2_h0_val == 65503, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030040;  op2val:0x20ffdf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x030040, 0x20ffdf, x6, 116, x1)

inst_46:// rs2_h0_val == 65527, rs1_h1_val == 16384
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000080;  op2val:0x13fff7
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x40000080, 0x13fff7, x6, 120, x1)

inst_47:// rs2_h0_val == 65533, rs1_h1_val == 16
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100008;  op2val:0x200fffd
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x100008, 0x200fffd, x6, 124, x1)

inst_48:// rs2_h0_val == 65534, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000c;  op2val:0x01fffe
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x100000c, 0x01fffe, x6, 128, x1)

inst_49:// rs2_h0_val == 1024, rs1_h0_val == 65503
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffdf;  op2val:0xffbf0400
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x09ffdf, 0xffbf0400, x6, 132, x1)

inst_50:// rs2_h0_val == 128, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff1000;  op2val:0xfff70080
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xffff1000, 0xfff70080, x6, 136, x1)

inst_51:// rs2_h0_val == 32, rs1_h1_val == 65279
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0020;  op2val:0x0b0020
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfeff0020, 0x0b0020, x6, 140, x1)

inst_52:// rs2_h0_val == 4, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000007;  op2val:0xaaaa0004
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x40000007, 0xaaaa0004, x6, 144, x1)

inst_53:// rs2_h0_val == 65535, rs1_h1_val == 65527
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020;  op2val:0x00ffff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfff70020, 0x00ffff, x6, 148, x1)

inst_54:// rs1_h1_val == 43690, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdf;  op2val:0x1000040
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xaaaaffdf, 0x1000040, x6, 152, x1)

inst_55:// rs1_h1_val == 57343, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb;  op2val:0x03aaaa
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xdffffffb, 0x03aaaa, x6, 156, x1)

inst_56:// rs1_h1_val == 65023, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0006;  op2val:0x030800
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfdff0006, 0x030800, x6, 160, x1)

inst_57:// rs1_h1_val == 65471, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000f;  op2val:0xaaaa0005
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xffbf000f, 0xaaaa0005, x6, 164, x1)

inst_58:// rs2_h0_val == 4096, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0009;  op2val:0x111000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x0a0009, 0x111000, x6, 168, x1)

inst_59:// rs1_h1_val == 65531, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfdff;  op2val:0xfffe0004
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfffbfdff, 0xfffe0004, x6, 172, x1)

inst_60:// rs1_h1_val == 65533, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbfff;  op2val:0x030020
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xfffdbfff, 0x030020, x6, 176, x1)

inst_61:// rs1_h1_val == 32768, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000bfff;  op2val:0x0f0006
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x8000bfff, 0x0f0006, x6, 180, x1)

inst_62:// rs1_h1_val == 8192, rs1_h0_val == 64511
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fbff;  op2val:0x80000020
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x2000fbff, 0x80000020, x6, 184, x1)

inst_63:// rs1_h1_val == 2048, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000013;  op2val:0x108000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x8000013, 0x108000, x6, 188, x1)

inst_64:// rs1_h1_val == 128, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffdf;  op2val:0x400011
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x80ffdf, 0x400011, x6, 192, x1)

inst_65:// rs1_h1_val == 8, rs2_h0_val == 8192
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffe;  op2val:0xf7ff2000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x08fffe, 0xf7ff2000, x6, 196, x1)

inst_66:// rs1_h0_val == 43690, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaa;  op2val:0xfdff0006
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xffdfaaaa, 0xfdff0006, x6, 200, x1)

inst_67:// rs1_h0_val == 21845, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80005555;  op2val:0x0f0010
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x80005555, 0x0f0010, x6, 204, x1)

inst_68:// rs1_h0_val == 32767, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff;  op2val:0x0a0004
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x8007fff, 0x0a0004, x6, 208, x1)

inst_69:// rs1_h0_val == 61439, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00efff;  op2val:0x40aaaa
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x00efff, 0x40aaaa, x6, 212, x1)

inst_70:// rs1_h0_val == 65279, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0x09ff7f
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xeffffeff, 0x09ff7f, x6, 216, x1)

inst_71:// rs1_h0_val == 65407, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaff7f;  op2val:0x0a1000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0xaaaaff7f, 0x0a1000, x6, 220, x1)

inst_72:// rs1_h0_val == 65471, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbf;  op2val:0x8000013
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x01ffbf, 0x8000013, x6, 224, x1)

inst_73:// rs1_h0_val == 65519, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x11ffef;  op2val:0x0dfff7
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x11ffef, 0x0dfff7, x6, 228, x1)

inst_74:// rs1_h0_val == 65527, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff7;  op2val:0x20000013
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x00fff7, 0x20000013, x6, 232, x1)

inst_75:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 21845, rs1_h0_val == 64, rs1_h1_val == 21845, rs2_h0_val == 65471
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0x5555ffbf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x55550040, 0x5555ffbf, x6, 236, x1)

inst_76:// rs2_h1_val == 64511, rs1_h1_val == 64, rs2_h0_val == 16384
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400013;  op2val:0xfbff4000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x400013, 0xfbff4000, x6, 240, x1)

inst_77:// rs1_h0_val == 32768, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x058000;  op2val:0x03000d
TEST_RR_OP(urstsa16, x31, x30, x29, 0x00000000, 0x058000, 0x03000d, x6, 244, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 62*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
