
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smul16 instruction of the RISC-V RV32PZicsr extension for the smul16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smul16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x8, rd==x16, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 0, rs2_h0_val == -513
// opcode: smul16 ; op1:x1; op2:x8; dest:x16; op1val:0xc0008000;  op2val:0x0000fdff
TEST_P64_PNN_OP(smul16, x16, x17, x1, x8, 0x00000000, 0, 0xc0008000, 0x0000fdff, x13, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x22, rs1_h1_val == rs2_h1_val, rs2_h0_val == -129, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: smul16 ; op1:x28; op2:x28; dest:x22; op1val:0x0007fffc;  op2val:0x0007ff7f
TEST_P64_PNN_OP(smul16, x22, x23, x28, x28, 0x00000000, 0, 0x0007fffc, 0x0007ff7f, x13, 8, x7)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x21, rd==x4, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 8192
// opcode: smul16 ; op1:x4; op2:x21; dest:x4; op1val:0xfffc2000;  op2val:0x1000ff7f
TEST_P64_PNN_OP(smul16, x4, x5, x4, x21, 0x00000000, 0, 0xfffc2000, 0x1000ff7f, x13, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -513, rs2_h0_val == 8
// opcode: smul16 ; op1:x10; op2:x10; dest:x10; op1val:0xfffffdff;  op2val:0xfffc0008
TEST_P64_PNN_OP(smul16, x10, x11, x10, x10, 0x00000000, 0, 0xfffffdff, 0xfffc0008, x13, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x6, rd==x6, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -65, rs1_h1_val == 16, rs2_h0_val == 128, rs1_h0_val == -1025
// opcode: smul16 ; op1:x17; op2:x6; dest:x6; op1val:0x0010fbff;  op2val:0xffbf0080
TEST_P64_PNN_OP(smul16, x6, x7, x17, x6, 0x00000000, 0, 0x0010fbff, 0xffbf0080, x13, 32, x7)

inst_5:
// rs1==x5, rs2==x27, rd==x2, rs1_h0_val == rs2_h0_val, rs2_h1_val == -33, rs2_h0_val == -65, rs1_h0_val == -65
// opcode: smul16 ; op1:x5; op2:x27; dest:x2; op1val:0xfffcffbf;  op2val:0xffdfffbf
TEST_P64_PNN_OP(smul16, x2, x3, x5, x27, 0x00000000, 0, 0xfffcffbf, 0xffdfffbf, x13, 40, x7)

inst_6:
// rs1==x8, rs2==x20, rd==x26, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h1_val == 21845
// opcode: smul16 ; op1:x8; op2:x20; dest:x26; op1val:0x00070800;  op2val:0x55550003
TEST_P64_PNN_OP(smul16, x26, x27, x8, x20, 0x00000000, 0, 0x00070800, 0x55550003, x13, 48, x7)

inst_7:
// rs1==x15, rs2==x18, rd==x14, rs2_h1_val == -21846, rs2_h0_val == 21845, rs1_h1_val == -32768
// opcode: smul16 ; op1:x15; op2:x18; dest:x14; op1val:0x8000fbff;  op2val:0xaaaa5555
TEST_P64_PNN_OP(smul16, x14, x15, x15, x18, 0x00000000, 0, 0x8000fbff, 0xaaaa5555, x13, 56, x7)

inst_8:
// rs1==x18, rs2==x0, rd==x24, rs2_h1_val == 32767, rs1_h1_val == 64, rs1_h0_val == 4
// opcode: smul16 ; op1:x18; op2:x0; dest:x24; op1val:0x00400004;  op2val:0x7fff0005
TEST_P64_PNN_OP(smul16, x24, x25, x18, x0, 0x00000000, 0, 0x00400004, 0x7fff0005, x13, 64, x7)

inst_9:
// rs1==x14, rs2==x12, rd==x20, rs2_h1_val == -16385, rs2_h0_val == -257, rs1_h0_val == -17
// opcode: smul16 ; op1:x14; op2:x12; dest:x20; op1val:0xc000ffef;  op2val:0xbffffeff
TEST_P64_PNN_OP(smul16, x20, x21, x14, x12, 0x00000000, 0, 0xc000ffef, 0xbffffeff, x13, 72, x7)

inst_10:
// rs1==x0, rs2==x9, rd==x30, rs2_h1_val == -8193, 
// opcode: smul16 ; op1:x0; op2:x9; dest:x30; op1val:0x8000ffef;  op2val:0xdffffff6
TEST_P64_PNN_OP(smul16, x30, x31, x0, x9, 0x00000000, 0, 0x8000ffef, 0xdffffff6, x13, 80, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_11:
// rs1==x2, rs2==x7, rd==x12, rs2_h1_val == -4097, rs1_h0_val == 1, rs1_h1_val == -2049
// opcode: smul16 ; op1:x2; op2:x7; dest:x12; op1val:0xf7ff0001;  op2val:0xefff0080
TEST_P64_PNN_OP(smul16, x12, x13, x2, x7, 0x00000000, 0, 0xf7ff0001, 0xefff0080, x1, 0, x3)

inst_12:
// rs1==x9, rs2==x23, rd==x28, rs2_h1_val == -2049, rs1_h0_val == 256, rs2_h0_val == 4096
// opcode: smul16 ; op1:x9; op2:x23; dest:x28; op1val:0x00090100;  op2val:0xf7ff1000
TEST_P64_PNN_OP(smul16, x28, x29, x9, x23, 0x00000000, 0, 0x00090100, 0xf7ff1000, x1, 8, x3)

inst_13:
// rs1==x23, rs2==x19, rd==x18, rs2_h1_val == -1025, rs1_h0_val == -129
// opcode: smul16 ; op1:x23; op2:x19; dest:x18; op1val:0x0040ff7f;  op2val:0xfbff3fff
TEST_P64_PNN_OP(smul16, x18, x19, x23, x19, 0x00000000, 0, 0x0040ff7f, 0xfbff3fff, x1, 16, x3)

inst_14:
// rs1==x21, rs2==x22, rd==x8, rs2_h1_val == -513, rs2_h0_val == -32768, rs1_h1_val == -21846
// opcode: smul16 ; op1:x21; op2:x22; dest:x8; op1val:0xaaaafff9;  op2val:0xfdff8000
TEST_P64_PNN_OP(smul16, x8, x9, x21, x22, 0x00000000, 0, 0xaaaafff9, 0xfdff8000, x1, 24, x3)

inst_15:
// rs1==x26, rs2==x15, rs2_h1_val == -257, rs1_h0_val == -33
// opcode: smul16 ; op1:x26; op2:x15; dest:x12; op1val:0x0009ffdf;  op2val:0xfeff0080
TEST_P64_PNN_OP(smul16, x12, x13, x26, x15, 0x00000000, 0, 0x0009ffdf, 0xfeff0080, x1, 32, x3)

inst_16:
// rs1==x20, rs2==x16, rs2_h1_val == -129, rs1_h0_val == -2, rs2_h0_val == 0, rs1_h1_val == 4
// opcode: smul16 ; op1:x20; op2:x16; dest:x18; op1val:0x0004fffe;  op2val:0xff7f0000
TEST_P64_PNN_OP(smul16, x18, x19, x20, x16, 0x00000000, 0, 0x0004fffe, 0xff7f0000, x1, 40, x3)

inst_17:
// rs1==x30, rs2==x11, rs2_h1_val == -17, rs2_h0_val == -1025, rs1_h0_val == 32767, rs1_h1_val == 256
// opcode: smul16 ; op1:x30; op2:x11; dest:x20; op1val:0x01007fff;  op2val:0xffeffbff
TEST_P64_PNN_OP(smul16, x20, x21, x30, x11, 0x00000000, 0, 0x01007fff, 0xffeffbff, x1, 48, x3)

inst_18:
// rs1==x29, rs2==x14, rs2_h1_val == -9, rs1_h1_val == -8193, rs2_h0_val == 32767, rs1_h0_val == -2049
// opcode: smul16 ; op1:x29; op2:x14; dest:x18; op1val:0xdffff7ff;  op2val:0xfff77fff
TEST_P64_PNN_OP(smul16, x18, x19, x29, x14, 0x00000000, 0, 0xdffff7ff, 0xfff77fff, x1, 56, x3)

inst_19:
// rs1==x24, rs2==x30, rs2_h1_val == -5, rs1_h0_val == -16385, rs2_h0_val == -33
// opcode: smul16 ; op1:x24; op2:x30; dest:x14; op1val:0x0004bfff;  op2val:0xfffbffdf
TEST_P64_PNN_OP(smul16, x14, x15, x24, x30, 0x00000000, 0, 0x0004bfff, 0xfffbffdf, x1, 64, x3)

inst_20:
// rs1==x25, rs2==x17, rs2_h1_val == -3, rs1_h1_val == -129
// opcode: smul16 ; op1:x25; op2:x17; dest:x4; op1val:0xff7ffff8;  op2val:0xfffdfff6
TEST_P64_PNN_OP(smul16, x4, x5, x25, x17, 0x00000000, 0, 0xff7ffff8, 0xfffdfff6, x1, 72, x3)

inst_21:
// rs1==x13, rs2==x29, rs2_h1_val == -2, rs1_h1_val == 2048, rs2_h0_val == 32
// opcode: smul16 ; op1:x13; op2:x29; dest:x18; op1val:0x08000004;  op2val:0xfffe0020
TEST_P64_PNN_OP(smul16, x18, x19, x13, x29, 0x00000000, 0, 0x08000004, 0xfffe0020, x1, 80, x8)

inst_22:
// rs1==x16, rs2==x2, rs2_h1_val == -32768, rs2_h0_val == -2, rs1_h0_val == 16
// opcode: smul16 ; op1:x16; op2:x2; dest:x24; op1val:0xff7f0010;  op2val:0x8000fffe
TEST_P64_PNN_OP(smul16, x24, x25, x16, x2, 0x00000000, 0, 0xff7f0010, 0x8000fffe, x1, 88, x8)

inst_23:
// rs1==x12, rs2==x31, rs2_h1_val == 16384, rs1_h1_val == 2
// opcode: smul16 ; op1:x12; op2:x31; dest:x16; op1val:0x00020004;  op2val:0x40003fff
TEST_P64_PNN_OP(smul16, x16, x17, x12, x31, 0x00000000, 0, 0x00020004, 0x40003fff, x1, 96, x8)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_24:
// rs1==x11, rs2==x1, rs2_h1_val == 8192, rs2_h0_val == 8192
// opcode: smul16 ; op1:x11; op2:x1; dest:x26; op1val:0xfffabfff;  op2val:0x20002000
TEST_P64_PNN_OP(smul16, x26, x27, x11, x1, 0x00000000, 0, 0xfffabfff, 0x20002000, x2, 0, x8)

inst_25:
// rs1==x6, rs2==x4, rs2_h1_val == 2048, rs1_h0_val == 16384, rs2_h0_val == -1, rs1_h1_val == 0
// opcode: smul16 ; op1:x6; op2:x4; dest:x30; op1val:0x00004000;  op2val:0x0800ffff
TEST_P64_PNN_OP(smul16, x30, x31, x6, x4, 0x00000000, 0, 0x00004000, 0x0800ffff, x2, 8, x8)

inst_26:
// rs1==x22, rs2==x26, rs2_h1_val == 1024, rs1_h1_val == -17, rs2_h0_val == 16
// opcode: smul16 ; op1:x22; op2:x26; dest:x14; op1val:0xffef0005;  op2val:0x04000010
TEST_P64_PNN_OP(smul16, x14, x15, x22, x26, 0x00000000, 0, 0xffef0005, 0x04000010, x2, 16, x8)

inst_27:
// rs1==x31, rs2==x3, rs2_h1_val == 512, rs2_h0_val == -16385, rs1_h1_val == 32767
// opcode: smul16 ; op1:x31; op2:x3; dest:x14; op1val:0x7fffffef;  op2val:0x0200bfff
TEST_P64_PNN_OP(smul16, x14, x15, x31, x3, 0x00000000, 0, 0x7fffffef, 0x0200bfff, x2, 24, x8)

inst_28:
// rs1==x27, rs2==x25, rs2_h1_val == 256, rs2_h0_val == -21846
// opcode: smul16 ; op1:x27; op2:x25; dest:x30; op1val:0xfff9fffe;  op2val:0x0100aaaa
TEST_P64_PNN_OP(smul16, x30, x31, x27, x25, 0x00000000, 0, 0xfff9fffe, 0x0100aaaa, x2, 32, x8)

inst_29:
// rs1==x7, rs2==x13, rs2_h1_val == 128, rs1_h1_val == -257, rs2_h0_val == -2049
// opcode: smul16 ; op1:x7; op2:x13; dest:x6; op1val:0xfeff8000;  op2val:0x0080f7ff
TEST_P64_PNN_OP(smul16, x6, x7, x7, x13, 0x00000000, 0, 0xfeff8000, 0x0080f7ff, x2, 40, x8)

inst_30:
// rs1==x3, rs2==x5, rs1_h0_val == -257, rs1_h1_val == -65, rs2_h0_val == -3
// opcode: smul16 ; op1:x3; op2:x5; dest:x24; op1val:0xffbffeff;  op2val:0x0200fffd
TEST_P64_PNN_OP(smul16, x24, x25, x3, x5, 0x00000000, 0, 0xffbffeff, 0x0200fffd, x2, 48, x8)

inst_31:
// rs1==x19, rs2==x24, rs1_h0_val == -9, rs2_h0_val == 2048
// opcode: smul16 ; op1:x19; op2:x24; dest:x14; op1val:0xffbffff7;  op2val:0xfffa0800
TEST_P64_PNN_OP(smul16, x14, x15, x19, x24, 0x00000000, 0, 0xffbffff7, 0xfffa0800, x2, 56, x8)

inst_32:
// rs1_h0_val == -5, rs1_h1_val == -4097, rs2_h0_val == -17
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xeffffffb;  op2val:0xfffcffef
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xeffffffb, 0xfffcffef, x2, 64, x8)

inst_33:
// rs1_h0_val == -3, rs1_h1_val == -2
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffefffd;  op2val:0xfffe1000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffefffd, 0xfffe1000, x2, 72, x8)

inst_34:
// rs1_h0_val == 4096, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffc1000;  op2val:0xfff91000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffc1000, 0xfff91000, x2, 80, x8)

inst_35:
// rs1_h0_val == 1024, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00050400;  op2val:0x0007fff6
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00050400, 0x0007fff6, x2, 88, x8)

inst_36:
// rs1_h0_val == 512, rs2_h0_val == -8193
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00400200;  op2val:0xffefdfff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00400200, 0xffefdfff, x2, 96, x8)

inst_37:
// rs1_h0_val == 128, rs1_h1_val == 8192
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x20000080;  op2val:0x55550009
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x20000080, 0x55550009, x2, 104, x8)

inst_38:
// rs1_h0_val == 64, rs1_h1_val == -16385
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xbfff0040;  op2val:0x4000ffbf
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xbfff0040, 0x4000ffbf, x2, 112, x8)

inst_39:
// rs1_h0_val == 32, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0020;  op2val:0xfbffdfff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0020, 0xfbffdfff, x2, 120, x8)

inst_40:
// rs1_h0_val == 8, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00100008;  op2val:0xfbff0800
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00100008, 0xfbff0800, x2, 128, x8)

inst_41:
// rs1_h0_val == 2, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00090002;  op2val:0xaaaa0000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00090002, 0xaaaa0000, x2, 136, x8)

inst_42:
// rs1_h0_val == 0, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00050000;  op2val:0xfffe0800
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00050000, 0xfffe0800, x2, 144, x8)

inst_43:
// rs1_h0_val == -1, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffbfffff;  op2val:0xaaaa0020
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xffbfffff, 0xaaaa0020, x2, 152, x8)

inst_44:
// rs2_h1_val == 64, rs2_h0_val == 512
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x8000ff7f;  op2val:0x00400200
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x8000ff7f, 0x00400200, x2, 160, x8)

inst_45:
// rs2_h1_val == 32, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0010fffc;  op2val:0x0020fffe
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0010fffc, 0x0020fffe, x2, 168, x8)

inst_46:
// rs2_h1_val == 16, rs2_h0_val == 1
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffcffff;  op2val:0x00100001
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffcffff, 0x00100001, x2, 176, x8)

inst_47:
// rs2_h1_val == 8, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0000;  op2val:0x00088000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0000, 0x00088000, x2, 184, x8)

inst_48:
// rs2_h1_val == 4, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0002fdff;  op2val:0x00040020
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0002fdff, 0x00040020, x2, 192, x8)

inst_49:
// rs2_h0_val == -5, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0002fffa;  op2val:0xfff6fffb
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0002fffa, 0xfff6fffb, x2, 200, x8)

inst_50:
// rs2_h0_val == 16384, rs1_h1_val == 128
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00800100;  op2val:0xdfff4000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00800100, 0xdfff4000, x2, 208, x8)

inst_51:
// rs2_h0_val == 1024, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xbffffffe;  op2val:0x3fff0400
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xbffffffe, 0x3fff0400, x2, 216, x8)

inst_52:
// rs2_h0_val == 256, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffafffe;  op2val:0xc0000100
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffafffe, 0xc0000100, x2, 224, x8)

inst_53:
// rs2_h0_val == 64, rs1_h1_val == 16384
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x4000fff9;  op2val:0xfffb0040
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x4000fff9, 0xfffb0040, x2, 232, x8)

inst_54:
// rs2_h0_val == 4, rs1_h1_val == -9
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfff73fff;  op2val:0x00060004
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfff73fff, 0x00060004, x2, 240, x8)

inst_55:
// rs2_h0_val == 2, rs1_h1_val == 4096
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x1000fbff;  op2val:0x01000002
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x1000fbff, 0x01000002, x2, 248, x8)

inst_56:
// rs1_h1_val == 21845, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x5555ffdf;  op2val:0x0080fff6
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x5555ffdf, 0x0080fff6, x2, 256, x8)

inst_57:
// rs1_h1_val == -1025, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfbffffdf;  op2val:0x55550001
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfbffffdf, 0x55550001, x2, 264, x8)

inst_58:
// rs1_h1_val == -513, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0005;  op2val:0xfff60100
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0005, 0xfff60100, x2, 272, x8)

inst_59:
// rs1_h1_val == -33, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0020;  op2val:0xfdfffffd
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0020, 0xfdfffffd, x2, 280, x8)

inst_60:
// rs1_h1_val == -5, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0200;  op2val:0xfdff0007
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0200, 0xfdff0007, x2, 288, x8)

inst_61:
// rs1_h1_val == -3, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffdfffd;  op2val:0x0080bfff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffdfffd, 0x0080bfff, x2, 296, x8)

inst_62:
// rs1_h1_val == 1024, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x04000100;  op2val:0xff7ffff8
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x04000100, 0xff7ffff8, x2, 304, x8)

inst_63:
// rs2_h1_val == 2, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0000ffbf;  op2val:0x00027fff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0000ffbf, 0x00027fff, x2, 312, x8)

inst_64:
// rs1_h1_val == 512, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0200ffbf;  op2val:0x00030009
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0200ffbf, 0x00030009, x2, 320, x8)

inst_65:
// rs2_h1_val == 1, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00040000;  op2val:0x00015555
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00040000, 0x00015555, x2, 328, x8)

inst_66:
// rs2_h1_val == -1, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffef4000;  op2val:0xfffffff6
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xffef4000, 0xfffffff6, x2, 336, x8)

inst_67:
// rs1_h1_val == 32, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00200007;  op2val:0x00800100
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00200007, 0x00800100, x2, 344, x8)

inst_68:
// rs1_h1_val == 8, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00083fff;  op2val:0xfbff0040
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00083fff, 0xfbff0040, x2, 352, x8)

inst_69:
// rs2_h0_val == -4097, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x8000fdff;  op2val:0xbfffefff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x8000fdff, 0xbfffefff, x2, 360, x8)

inst_70:
// rs1_h1_val == 1, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0001fdff;  op2val:0xffff0400
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x0001fdff, 0xffff0400, x2, 368, x8)

inst_71:
// rs1_h0_val == -21846, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffaaaa;  op2val:0xfffa0002
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffaaaa, 0xfffa0002, x2, 376, x8)

inst_72:
// rs1_h0_val == 21845, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffd5555;  op2val:0xffef8000
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffd5555, 0xffef8000, x2, 384, x8)

inst_73:
// rs1_h0_val == -8193, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffedfff;  op2val:0xffbf0100
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffedfff, 0xffbf0100, x2, 392, x8)

inst_74:
// rs1_h0_val == -4097, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffdfefff;  op2val:0xffdffdff
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xffdfefff, 0xffdffdff, x2, 400, x8)

inst_75:
// rs2_h0_val == -9, 
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x4000c000;  op2val:0x0005fff7
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x4000c000, 0x0005fff7, x2, 408, x8)

inst_76:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -513, rs2_h0_val == 8
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffdff;  op2val:0xfffc0008
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffffdff, 0xfffc0008, x2, 416, x8)

inst_77:
// rs2_h1_val == 32767, rs1_h1_val == 64, rs1_h0_val == 4
// opcode: smul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00400004;  op2val:0x7fff0005
TEST_P64_PNN_OP(smul16, x30, x31, x31, x29, 0x00000000, 0, 0x00400004, 0x7fff0005, x2, 424, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 108*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
