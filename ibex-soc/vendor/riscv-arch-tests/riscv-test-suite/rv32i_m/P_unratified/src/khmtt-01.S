
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmtt instruction of the RISC-V RV32PZicsr extension for the khmtt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmtt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x21, rd==x0, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 512
// opcode: khmtt ; op1:x18; op2:x21; dest:x0; op1val:0x2008000;  op2val:0xfff8fff8
TEST_PKRR_OP(khmtt, x0, x18, x21, 0x00000000, 0x2008000, 0xfff8fff8, x18, x11, 0, x19)

inst_1:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x5, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -2, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h0_val == -1, rs2_h1_val == -2
// opcode: khmtt ; op1:x8; op2:x8; dest:x5; op1val:0xfffeffff;  op2val:0xfffe0020
TEST_PKRR_OP(khmtt, x5, x8, x8, 0x00000000, 0xfffeffff, 0xfffe0020, x8, x11, 8, x19)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x30, rd==x16, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 128, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 2, rs1_h1_val == -129
// opcode: khmtt ; op1:x16; op2:x30; dest:x16; op1val:0xff7f0080;  op2val:0x02fff6
TEST_PKRR_OP(khmtt, x16, x16, x30, 0x00000000, 0xff7f0080, 0x02fff6, x16, x11, 16, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4096, rs2_h0_val == 8
// opcode: khmtt ; op1:x6; op2:x6; dest:x6; op1val:0x041000;  op2val:0x3fff0008
TEST_PKRR_OP(khmtt, x6, x6, x6, 0x00000000, 0x041000, 0x3fff0008, x6, x11, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x25, rd==x25, rs1_h0_val == rs2_h0_val, rs2_h1_val == 64, rs1_h1_val == -4097, rs2_h0_val == 0, rs1_h0_val == 0
// opcode: khmtt ; op1:x9; op2:x25; dest:x25; op1val:0xefff0000;  op2val:0x400000
TEST_PKRR_OP(khmtt, x25, x9, x25, 0x00000000, 0xefff0000, 0x400000, x9, x11, 32, x19)

inst_5:
// rs1==x30, rs2==x14, rd==x21, rs2_h1_val == -21846, rs1_h0_val == 8192, rs2_h0_val == 2048
// opcode: khmtt ; op1:x30; op2:x14; dest:x21; op1val:0xfffe2000;  op2val:0xaaaa0800
TEST_PKRR_OP(khmtt, x21, x30, x14, 0x00000000, 0xfffe2000, 0xaaaa0800, x30, x11, 40, x19)

inst_6:
// rs1==x29, rs2==x28, rd==x14, rs2_h1_val == 21845, rs1_h0_val == -5, rs2_h0_val == 1, rs1_h1_val == 4096
// opcode: khmtt ; op1:x29; op2:x28; dest:x14; op1val:0x1000fffb;  op2val:0x55550001
TEST_PKRR_OP(khmtt, x14, x29, x28, 0x00000000, 0x1000fffb, 0x55550001, x29, x11, 48, x19)

inst_7:
// rs1==x20, rs2==x9, rd==x10, rs2_h1_val == 32767, rs1_h0_val == -33, rs1_h1_val == 32767
// opcode: khmtt ; op1:x20; op2:x9; dest:x10; op1val:0x7fffffdf;  op2val:0x7fff0020
TEST_PKRR_OP(khmtt, x10, x20, x9, 0x00000000, 0x7fffffdf, 0x7fff0020, x20, x11, 56, x19)

inst_8:
// rs1==x12, rs2==x16, rd==x2, rs2_h1_val == -16385, rs2_h0_val == -1025, rs1_h0_val == 2
// opcode: khmtt ; op1:x12; op2:x16; dest:x2; op1val:0x090002;  op2val:0xbffffbff
TEST_PKRR_OP(khmtt, x2, x12, x16, 0x00000000, 0x090002, 0xbffffbff, x12, x11, 64, x19)

inst_9:
// rs1==x15, rs2==x24, rd==x29, rs2_h1_val == -8193, rs2_h0_val == -513
// opcode: khmtt ; op1:x15; op2:x24; dest:x29; op1val:0x3ffffff6;  op2val:0xdffffdff
TEST_PKRR_OP(khmtt, x29, x15, x24, 0x00000000, 0x3ffffff6, 0xdffffdff, x15, x11, 72, x19)

inst_10:
// rs1==x4, rs2==x7, rd==x17, rs2_h1_val == -4097, rs1_h1_val == -32768, rs2_h0_val == -2049
// opcode: khmtt ; op1:x4; op2:x7; dest:x17; op1val:0x80000007;  op2val:0xeffff7ff
TEST_PKRR_OP(khmtt, x17, x4, x7, 0x00000000, 0x80000007, 0xeffff7ff, x4, x11, 80, x19)

inst_11:
// rs1==x24, rs2==x1, rd==x26, rs2_h1_val == -2049, rs2_h0_val == 512
// opcode: khmtt ; op1:x24; op2:x1; dest:x26; op1val:0xff7ffffb;  op2val:0xf7ff0200
TEST_PKRR_OP(khmtt, x26, x24, x1, 0x00000000, 0xff7ffffb, 0xf7ff0200, x24, x11, 88, x19)

inst_12:
// rs1==x5, rs2==x26, rd==x8, rs2_h1_val == -1025, rs1_h1_val == 16, rs1_h0_val == -8193
// opcode: khmtt ; op1:x5; op2:x26; dest:x8; op1val:0x10dfff;  op2val:0xfbff0003
TEST_PKRR_OP(khmtt, x8, x5, x26, 0x00000000, 0x10dfff, 0xfbff0003, x5, x11, 96, x19)

inst_13:
// rs1==x17, rs2==x20, rd==x30, rs2_h1_val == -513, rs1_h0_val == 64
// opcode: khmtt ; op1:x17; op2:x20; dest:x30; op1val:0xfff80040;  op2val:0xfdfffff6
TEST_PKRR_OP(khmtt, x30, x17, x20, 0x00000000, 0xfff80040, 0xfdfffff6, x17, x11, 104, x19)

inst_14:
// rs1==x7, rs2==x13, rd==x27, rs2_h1_val == -257, rs2_h0_val == 64, rs1_h0_val == 8
// opcode: khmtt ; op1:x7; op2:x13; dest:x27; op1val:0x090008;  op2val:0xfeff0040
TEST_PKRR_OP(khmtt, x27, x7, x13, 0x00000000, 0x090008, 0xfeff0040, x7, x11, 112, x19)

inst_15:
// rs1==x3, rs2==x31, rd==x13, rs2_h1_val == -129, rs1_h1_val == 8, rs2_h0_val == -17
// opcode: khmtt ; op1:x3; op2:x31; dest:x13; op1val:0x080040;  op2val:0xff7fffef
TEST_PKRR_OP(khmtt, x13, x3, x31, 0x00000000, 0x080040, 0xff7fffef, x3, x11, 120, x19)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x0, rs2==x23, rd==x4, rs2_h1_val == -65, rs1_h1_val == 8192, rs2_h0_val == -4097
// opcode: khmtt ; op1:x0; op2:x23; dest:x4; op1val:0x2000fffc;  op2val:0xffbfefff
TEST_PKRR_OP(khmtt, x4, x0, x23, 0x00000000, 0x2000fffc, 0xffbfefff, x0, x6, 0, x7)

inst_17:
// rs1==x26, rs2==x27, rd==x23, rs2_h1_val == -33, rs1_h1_val == -8193, rs2_h0_val == 128, rs1_h0_val == 4
// opcode: khmtt ; op1:x26; op2:x27; dest:x23; op1val:0xdfff0004;  op2val:0xffdf0080
TEST_PKRR_OP(khmtt, x23, x26, x27, 0x00000000, 0xdfff0004, 0xffdf0080, x26, x6, 8, x7)

inst_18:
// rs1==x10, rs2==x17, rd==x22, rs2_h1_val == -17, rs1_h1_val == -5
// opcode: khmtt ; op1:x10; op2:x17; dest:x22; op1val:0xfffb0008;  op2val:0xffef0008
TEST_PKRR_OP(khmtt, x22, x10, x17, 0x00000000, 0xfffb0008, 0xffef0008, x10, x6, 16, x7)

inst_19:
// rs1==x14, rs2==x5, rd==x24, rs2_h1_val == -9, rs1_h0_val == 32
// opcode: khmtt ; op1:x14; op2:x5; dest:x24; op1val:0xefff0020;  op2val:0xfff7efff
TEST_PKRR_OP(khmtt, x24, x14, x5, 0x00000000, 0xefff0020, 0xfff7efff, x14, x6, 24, x7)

inst_20:
// rs1==x23, rs2==x4, rd==x1, rs2_h1_val == -5, rs2_h0_val == -32768
// opcode: khmtt ; op1:x23; op2:x4; dest:x1; op1val:0x09c000;  op2val:0xfffb8000
TEST_PKRR_OP(khmtt, x1, x23, x4, 0x00000000, 0x09c000, 0xfffb8000, x23, x6, 32, x7)

inst_21:
// rs1==x1, rs2==x0, rd==x12, rs2_h1_val == -3, rs2_h0_val == 4096, rs1_h0_val == 1024
// opcode: khmtt ; op1:x1; op2:x0; dest:x12; op1val:0xfff80400;  op2val:0xfffd1000
TEST_PKRR_OP(khmtt, x12, x1, x0, 0x00000000, 0xfff80400, 0xfffd1000, x1, x6, 40, x7)

inst_22:
// rs1==x27, rs2==x22, rd==x3, rs2_h1_val == -32768, 
// opcode: khmtt ; op1:x27; op2:x22; dest:x3; op1val:0x10fff6;  op2val:0x80001000
TEST_PKRR_OP(khmtt, x3, x27, x22, 0x00000000, 0x10fff6, 0x80001000, x27, x6, 48, x7)

inst_23:
// rs1==x25, rs2==x11, rd==x31, rs2_h1_val == 16384, rs2_h0_val == -3, rs1_h0_val == -257, rs1_h1_val == -9
// opcode: khmtt ; op1:x25; op2:x11; dest:x31; op1val:0xfff7feff;  op2val:0x4000fffd
TEST_PKRR_OP(khmtt, x31, x25, x11, 0x00000000, 0xfff7feff, 0x4000fffd, x25, x6, 56, x7)

inst_24:
// rs1==x13, rs2==x10, rd==x9, rs2_h1_val == 8192, 
// opcode: khmtt ; op1:x13; op2:x10; dest:x9; op1val:0xfffa0002;  op2val:0x2000fff6
TEST_PKRR_OP(khmtt, x9, x13, x10, 0x00000000, 0xfffa0002, 0x2000fff6, x13, x6, 64, x7)

inst_25:
// rs1==x21, rs2==x18, rd==x15, rs2_h1_val == 4096, 
// opcode: khmtt ; op1:x21; op2:x18; dest:x15; op1val:0xfff7fffb;  op2val:0x10001000
TEST_PKRR_OP(khmtt, x15, x21, x18, 0x00000000, 0xfff7fffb, 0x10001000, x21, x6, 72, x7)

inst_26:
// rs1==x22, rs2==x19, rd==x20, rs2_h1_val == 2048, rs1_h0_val == -513
// opcode: khmtt ; op1:x22; op2:x19; dest:x20; op1val:0xfffafdff;  op2val:0x8000020
TEST_PKRR_OP(khmtt, x20, x22, x19, 0x00000000, 0xfffafdff, 0x8000020, x22, x6, 80, x7)

inst_27:
// rs1==x11, rs2==x15, rd==x18, rs2_h1_val == 1024, rs1_h0_val == 16384, rs2_h0_val == -1
// opcode: khmtt ; op1:x11; op2:x15; dest:x18; op1val:0x7fff4000;  op2val:0x400ffff
TEST_PKRR_OP(khmtt, x18, x11, x15, 0x00000000, 0x7fff4000, 0x400ffff, x11, x6, 88, x7)

inst_28:
// rs1==x28, rs2==x3, rd==x11, rs2_h1_val == 512, rs1_h1_val == -1025
// opcode: khmtt ; op1:x28; op2:x3; dest:x11; op1val:0xfbffc000;  op2val:0x2000003
TEST_PKRR_OP(khmtt, x11, x28, x3, 0x00000000, 0xfbffc000, 0x2000003, x28, x6, 96, x7)

inst_29:
// rs1==x19, rs2==x29, rd==x28, rs2_h1_val == 256, rs1_h1_val == 0
// opcode: khmtt ; op1:x19; op2:x29; dest:x28; op1val:0x00fff8;  op2val:0x100f7ff
TEST_PKRR_OP(khmtt, x28, x19, x29, 0x00000000, 0x00fff8, 0x100f7ff, x19, x6, 104, x7)

inst_30:
// rs1==x2, rs2==x12, rd==x19, rs2_h1_val == 128, rs1_h1_val == -513
// opcode: khmtt ; op1:x2; op2:x12; dest:x19; op1val:0xfdfffeff;  op2val:0x80fffd
TEST_PKRR_OP(khmtt, x19, x2, x12, 0x00000000, 0xfdfffeff, 0x80fffd, x2, x6, 112, x7)

inst_31:
// rs1==x31, rs2==x2, rd==x7, rs2_h1_val == 32, rs1_h1_val == 16384, rs2_h0_val == -21846, rs1_h0_val == -2049
// opcode: khmtt ; op1:x31; op2:x2; dest:x7; op1val:0x4000f7ff;  op2val:0x20aaaa
TEST_PKRR_OP(khmtt, x7, x31, x2, 0x00000000, 0x4000f7ff, 0x20aaaa, x31, x6, 120, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs1_h0_val == -1025, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff;  op2val:0x1000f7ff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x4000fbff, 0x1000f7ff, x30, x1, 0, x3)

inst_33:
// rs1_h0_val == -129, rs1_h1_val == 21845
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f;  op2val:0xfffeefff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x5555ff7f, 0xfffeefff, x30, x1, 8, x3)

inst_34:
// rs1_h0_val == -65, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffbf;  op2val:0x06ffef
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xff7fffbf, 0x06ffef, x30, x1, 16, x3)

inst_35:
// rs1_h0_val == -17, rs1_h1_val == -2049
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffef;  op2val:0x40ffff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xf7ffffef, 0x40ffff, x30, x1, 24, x3)

inst_36:
// rs1_h0_val == -9, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff7;  op2val:0x55551000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xc000fff7, 0x55551000, x30, x1, 32, x3)

inst_37:
// rs1_h0_val == -3, rs1_h1_val == 32
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x20fffd;  op2val:0xffbffffd
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x20fffd, 0xffbffffd, x30, x1, 40, x3)

inst_38:
// rs1_h0_val == -2, rs2_h0_val == 4
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x00fffe;  op2val:0xfff90004
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x00fffe, 0xfff90004, x30, x1, 48, x3)

inst_39:
// rs1_h0_val == 2048, rs1_h1_val == -1
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffff0800;  op2val:0xefff0003
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xffff0800, 0xefff0003, x30, x1, 56, x3)

inst_40:
// rs1_h0_val == 512, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x40000200;  op2val:0xc000fdff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x40000200, 0xc000fdff, x30, x1, 64, x3)

inst_41:
// rs1_h0_val == 256, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100;  op2val:0x200040
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x7fff0100, 0x200040, x30, x1, 72, x3)

inst_42:
// rs1_h0_val == 16, rs1_h1_val == 64, rs2_h0_val == 16
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x400010;  op2val:0xfff90010
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x400010, 0xfff90010, x30, x1, 80, x3)

inst_43:
// rs1_h0_val == 1, rs1_h1_val == 2, rs2_h0_val == -9
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x020001;  op2val:0xff7ffff7
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x020001, 0xff7ffff7, x30, x1, 88, x3)

inst_44:
// rs2_h1_val == 16, rs1_h0_val == -16385
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x4000bfff;  op2val:0x10fff9
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x4000bfff, 0x10fff9, x30, x1, 96, x3)

inst_45:
// rs2_h1_val == 8, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x05fdff;  op2val:0x08c000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x05fdff, 0x08c000, x30, x1, 104, x3)

inst_46:
// rs2_h1_val == 4, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffb;  op2val:0x040006
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xc000fffb, 0x040006, x30, x1, 112, x3)

inst_47:
// rs2_h1_val == 1, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffbfff;  op2val:0x01efff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfdffbfff, 0x01efff, x30, x1, 120, x3)

inst_48:
// rs2_h1_val == 0, rs1_h0_val == 32767
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff67fff;  op2val:0x000008
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfff67fff, 0x000008, x30, x1, 128, x3)

inst_49:
// rs2_h1_val == -1, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf;  op2val:0xfffffff7
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x8000ffdf, 0xfffffff7, x30, x1, 136, x3)

inst_50:
// rs2_h0_val == -5, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0003;  op2val:0x09fffb
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfffa0003, 0x09fffb, x30, x1, 144, x3)

inst_51:
// rs2_h0_val == -2, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080;  op2val:0x800fffe
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xf7ff0080, 0x800fffe, x30, x1, 152, x3)

inst_52:
// rs2_h0_val == 16384, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff90000;  op2val:0xfdff4000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfff90000, 0xfdff4000, x30, x1, 160, x3)

inst_53:
// rs2_h0_val == 8192, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffbf;  op2val:0xfffa2000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfffcffbf, 0xfffa2000, x30, x1, 168, x3)

inst_54:
// rs2_h0_val == 1024, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff6;  op2val:0xfffd0400
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x4000fff6, 0xfffd0400, x30, x1, 176, x3)

inst_55:
// rs2_h0_val == 256, rs1_h1_val == -21846
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa4000;  op2val:0xfbff0100
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xaaaa4000, 0xfbff0100, x30, x1, 184, x3)

inst_56:
// rs2_h0_val == 2, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x040006;  op2val:0x10000002
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x040006, 0x10000002, x30, x1, 192, x3)

inst_57:
// rs1_h1_val == -16385, rs2_h0_val == 32767
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002;  op2val:0xfff67fff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xbfff0002, 0xfff67fff, x30, x1, 200, x3)

inst_58:
// rs1_h1_val == -257, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff8;  op2val:0x060006
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfefffff8, 0x060006, x30, x1, 208, x3)

inst_59:
// rs1_h1_val == -65, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0000;  op2val:0x4000ffff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xffbf0000, 0x4000ffff, x30, x1, 216, x3)

inst_60:
// rs1_h1_val == -33, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0010;  op2val:0xfbff0005
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xffdf0010, 0xfbff0005, x30, x1, 224, x3)

inst_61:
// rs1_h1_val == -17, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffef2000;  op2val:0xf7ff1000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xffef2000, 0xf7ff1000, x30, x1, 232, x3)

inst_62:
// rs1_h1_val == -3, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfeff;  op2val:0xfeff1000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfffdfeff, 0xfeff1000, x30, x1, 240, x3)

inst_63:
// rs2_h0_val == -257, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffc;  op2val:0x10feff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x7ffffffc, 0x10feff, x30, x1, 248, x3)

inst_64:
// rs1_h1_val == 2048, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7f;  op2val:0x407fff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x800ff7f, 0x407fff, x30, x1, 256, x3)

inst_65:
// rs1_h1_val == 1024, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x4000005;  op2val:0x7ffffff6
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x4000005, 0x7ffffff6, x30, x1, 264, x3)

inst_66:
// rs1_h1_val == 256, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6;  op2val:0x8000fff8
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x100fff6, 0x8000fff8, x30, x1, 272, x3)

inst_67:
// rs1_h1_val == 128, rs2_h0_val == -16385
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0x07bfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x800000, 0x07bfff, x30, x1, 280, x3)

inst_68:
// rs2_h0_val == 21845, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x025555
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x025555, x30, x1, 288, x3)

inst_69:
// rs2_h0_val == -8193, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0800;  op2val:0x400dfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x3fff0800, 0x400dfff, x30, x1, 296, x3)

inst_70:
// rs1_h1_val == 1, rs2_h0_val == -33
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x010005;  op2val:0x00ffdf
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x010005, 0x00ffdf, x30, x1, 304, x3)

inst_71:
// rs1_h0_val == -21846, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xefffaaaa;  op2val:0xdfff1000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xefffaaaa, 0xdfff1000, x30, x1, 312, x3)

inst_72:
// rs1_h0_val == 21845, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x2005555;  op2val:0x080400
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x2005555, 0x080400, x30, x1, 320, x3)

inst_73:
// rs2_h0_val == -129, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffdf;  op2val:0xfffaff7f
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x3fffffdf, 0xfffaff7f, x30, x1, 328, x3)

inst_74:
// rs2_h0_val == -65, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x10000003;  op2val:0xffdfffbf
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x10000003, 0xffdfffbf, x30, x1, 336, x3)

inst_75:
// rs1_h0_val == -4097, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbefff;  op2val:0x030002
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfffbefff, 0x030002, x30, x1, 344, x3)

inst_76:
// rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 512
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x2008000;  op2val:0xfff8fff8
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x2008000, 0xfff8fff8, x30, x1, 352, x3)

inst_77:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -2, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h0_val == -1, rs2_h1_val == -2
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xfffe0020
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfffeffff, 0xfffe0020, x30, x1, 360, x3)

inst_78:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4096, rs2_h0_val == 8
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0x3fff0008
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x041000, 0x3fff0008, x30, x1, 368, x3)

inst_79:
// rs2_h1_val == -65, rs1_h1_val == 8192, rs2_h0_val == -4097
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffc;  op2val:0xffbfefff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0x2000fffc, 0xffbfefff, x30, x1, 376, x3)

inst_80:
// rs2_h1_val == -3, rs2_h0_val == 4096, rs1_h0_val == 1024
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80400;  op2val:0xfffd1000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x00000000, 0xfff80400, 0xfffd1000, x30, x1, 384, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 98*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
