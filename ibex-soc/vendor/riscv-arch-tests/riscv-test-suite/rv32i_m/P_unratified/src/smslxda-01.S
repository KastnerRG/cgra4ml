
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smslxda instruction of the RISC-V RV32PZicsr extension for the smslxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smslxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x21, rd==x14, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 128, rs2_h1_val == -3
// opcode: smslxda ; op1:x1; op2:x21; dest:x14; op1val:0xfff78000;  op2val:0xfffd0080
TEST_P64_PNN_OP(smslxda, x14, x15, x1, x21, 0x00000000, 0, 0xfff78000, 0xfffd0080, x4, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x12, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -2, rs1_h0_val == -33, rs2_h1_val == -2
// opcode: smslxda ; op1:x0; op2:x0; dest:x12; op1val:0xfffeffdf;  op2val:0xfffefff6
TEST_P64_PNN_OP(smslxda, x12, x13, x0, x0, 0x00000000, 0, 0xfffeffdf, 0xfffefff6, x4, 8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x6, rd==x2, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048
// opcode: smslxda ; op1:x2; op2:x6; dest:x2; op1val:0xfff60800;  op2val:0x00070007
TEST_P64_PNN_OP(smslxda, x2, x3, x2, x6, 0x00000000, 0, 0xfff60800, 0x00070007, x4, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 1, rs1_h0_val == 1, rs2_h1_val == -32768
// opcode: smslxda ; op1:x18; op2:x18; dest:x18; op1val:0x00010001;  op2val:0x80008000
TEST_P64_PNN_OP(smslxda, x18, x19, x18, x18, 0x00000000, 0, 0x00010001, 0x80008000, x4, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x24, rd==x24, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 21845, rs2_h1_val == 2, rs2_h0_val == -4097
// opcode: smslxda ; op1:x5; op2:x24; dest:x24; op1val:0x55558000;  op2val:0x0002efff
TEST_P64_PNN_OP(smslxda, x24, x25, x5, x24, 0x00000000, 0, 0x55558000, 0x0002efff, x4, 32, x3)

inst_5:
// rs1==x28, rs2==x12, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h1_val == 64, rs1_h0_val == 16, rs2_h0_val == 16
// opcode: smslxda ; op1:x28; op2:x12; dest:x6; op1val:0x00400010;  op2val:0x00070010
TEST_P64_PNN_OP(smslxda, x6, x7, x28, x12, 0x00000000, 0, 0x00400010, 0x00070010, x4, 40, x3)

inst_6:
// rs1==x19, rs2==x9, rd==x20, rs2_h1_val == -21846, rs2_h0_val == -3, rs1_h0_val == 32, rs1_h1_val == 512
// opcode: smslxda ; op1:x19; op2:x9; dest:x20; op1val:0x02000020;  op2val:0xaaaafffd
TEST_P64_PNN_OP(smslxda, x20, x21, x19, x9, 0x00000000, 0, 0x02000020, 0xaaaafffd, x4, 48, x3)

inst_7:
// rs1==x9, rs2==x31, rd==x8, rs2_h1_val == 21845, rs1_h0_val == -8193
// opcode: smslxda ; op1:x9; op2:x31; dest:x8; op1val:0x5555dfff;  op2val:0x5555c000
TEST_P64_PNN_OP(smslxda, x8, x9, x9, x31, 0x00000000, 0, 0x5555dfff, 0x5555c000, x4, 56, x3)

inst_8:
// rs1==x31, rs2==x11, rd==x16, rs2_h1_val == 32767, rs1_h0_val == -1025, rs1_h1_val == -4097, rs2_h0_val == 64
// opcode: smslxda ; op1:x31; op2:x11; dest:x16; op1val:0xeffffbff;  op2val:0x7fff0040
TEST_P64_PNN_OP(smslxda, x16, x17, x31, x11, 0x00000000, 0, 0xeffffbff, 0x7fff0040, x4, 64, x3)

inst_9:
// rs1==x26, rs2==x25, rd==x28, rs2_h1_val == -16385, rs1_h0_val == -257, rs1_h1_val == -21846
// opcode: smslxda ; op1:x26; op2:x25; dest:x28; op1val:0xaaaafeff;  op2val:0xbfff8000
TEST_P64_PNN_OP(smslxda, x28, x29, x26, x25, 0x00000000, 0, 0xaaaafeff, 0xbfff8000, x4, 72, x3)

inst_10:
// rs1==x14, rs2==x1, rd==x22, rs2_h1_val == -8193, rs2_h0_val == 8
// opcode: smslxda ; op1:x14; op2:x1; dest:x22; op1val:0xeffffeff;  op2val:0xdfff0008
TEST_P64_PNN_OP(smslxda, x22, x23, x14, x1, 0x00000000, 0, 0xeffffeff, 0xdfff0008, x4, 80, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_11:
// rs1==x30, rs2==x13, rd==x4, rs2_h1_val == -4097, rs1_h1_val == -16385, rs2_h0_val == 8192
// opcode: smslxda ; op1:x30; op2:x13; dest:x4; op1val:0xbffffff6;  op2val:0xefff2000
TEST_P64_PNN_OP(smslxda, x4, x5, x30, x13, 0x00000000, 0, 0xbffffff6, 0xefff2000, x1, 0, x3)

inst_12:
// rs1==x23, rs2==x20, rd==x10, rs2_h1_val == -2049, 
// opcode: smslxda ; op1:x23; op2:x20; dest:x10; op1val:0xfffe0800;  op2val:0xf7fffff9
TEST_P64_PNN_OP(smslxda, x10, x11, x23, x20, 0x00000000, 0, 0xfffe0800, 0xf7fffff9, x1, 8, x8)

inst_13:
// rs1==x22, rs2==x15, rd==x26, rs2_h1_val == -1025, rs1_h0_val == 2, rs2_h0_val == -21846
// opcode: smslxda ; op1:x22; op2:x15; dest:x26; op1val:0x00070002;  op2val:0xfbffaaaa
TEST_P64_PNN_OP(smslxda, x26, x27, x22, x15, 0x00000000, 0, 0x00070002, 0xfbffaaaa, x1, 16, x8)

inst_14:
// rs1==x17, rs2==x26, rd==x30, rs2_h1_val == -513, rs1_h1_val == 8192, rs2_h0_val == 4096, rs1_h0_val == 1024
// opcode: smslxda ; op1:x17; op2:x26; dest:x30; op1val:0x20000400;  op2val:0xfdff1000
TEST_P64_PNN_OP(smslxda, x30, x31, x17, x26, 0x00000000, 0, 0x20000400, 0xfdff1000, x1, 24, x8)

inst_15:
// rs1==x24, rs2==x5, rs2_h1_val == -257, rs1_h0_val == 32767, rs1_h1_val == 1024
// opcode: smslxda ; op1:x24; op2:x5; dest:x18; op1val:0x04007fff;  op2val:0xfeff1000
TEST_P64_PNN_OP(smslxda, x18, x19, x24, x5, 0x00000000, 0, 0x04007fff, 0xfeff1000, x1, 32, x8)

inst_16:
// rs1==x21, rs2==x30, rs2_h1_val == -129, rs2_h0_val == 1024, rs1_h0_val == 512
// opcode: smslxda ; op1:x21; op2:x30; dest:x4; op1val:0x00010200;  op2val:0xff7f0400
TEST_P64_PNN_OP(smslxda, x4, x5, x21, x30, 0x00000000, 0, 0x00010200, 0xff7f0400, x1, 40, x8)

inst_17:
// rs1==x6, rs2==x14, rs2_h1_val == -65, rs1_h1_val == 0, rs2_h0_val == -9
// opcode: smslxda ; op1:x6; op2:x14; dest:x24; op1val:0x00000003;  op2val:0xffbffff7
TEST_P64_PNN_OP(smslxda, x24, x25, x6, x14, 0x00000000, 0, 0x00000003, 0xffbffff7, x1, 48, x8)

inst_18:
// rs1==x10, rs2==x22, rs2_h1_val == -33, rs2_h0_val == -1025, rs1_h0_val == 4096
// opcode: smslxda ; op1:x10; op2:x22; dest:x28; op1val:0x00091000;  op2val:0xffdffbff
TEST_P64_PNN_OP(smslxda, x28, x29, x10, x22, 0x00000000, 0, 0x00091000, 0xffdffbff, x1, 56, x8)

inst_19:
// rs1==x29, rs2==x7, rs2_h1_val == -17, rs1_h0_val == 8192
// opcode: smslxda ; op1:x29; op2:x7; dest:x30; op1val:0xefff2000;  op2val:0xffefaaaa
TEST_P64_PNN_OP(smslxda, x30, x31, x29, x7, 0x00000000, 0, 0xefff2000, 0xffefaaaa, x1, 64, x8)

inst_20:
// rs1==x13, rs2==x27, rs2_h1_val == -9, rs1_h1_val == -257
// opcode: smslxda ; op1:x13; op2:x27; dest:x2; op1val:0xfeff0020;  op2val:0xfff7fffc
TEST_P64_PNN_OP(smslxda, x2, x3, x13, x27, 0x00000000, 0, 0xfeff0020, 0xfff7fffc, x1, 72, x8)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21:
// rs1==x12, rs2==x3, rs2_h1_val == -5, rs2_h0_val == 32767, rs1_h1_val == 2
// opcode: smslxda ; op1:x12; op2:x3; dest:x20; op1val:0x00020020;  op2val:0xfffb7fff
TEST_P64_PNN_OP(smslxda, x20, x21, x12, x3, 0x00000000, 0, 0x00020020, 0xfffb7fff, x1, 0, x6)

inst_22:
// rs1==x8, rs2==x10, rs2_h1_val == 16384, rs1_h0_val == -65
// opcode: smslxda ; op1:x8; op2:x10; dest:x22; op1val:0x0400ffbf;  op2val:0x4000fff6
TEST_P64_PNN_OP(smslxda, x22, x23, x8, x10, 0x00000000, 0, 0x0400ffbf, 0x4000fff6, x1, 8, x6)

inst_23:
// rs1==x15, rs2==x2, rs2_h1_val == 8192, rs1_h0_val == 64
// opcode: smslxda ; op1:x15; op2:x2; dest:x4; op1val:0x00020040;  op2val:0x20008000
TEST_P64_PNN_OP(smslxda, x4, x5, x15, x2, 0x00000000, 0, 0x00020040, 0x20008000, x1, 16, x6)

inst_24:
// rs1==x7, rs2==x19, rs2_h1_val == 4096, rs1_h0_val == 256, rs1_h1_val == -32768
// opcode: smslxda ; op1:x7; op2:x19; dest:x20; op1val:0x80000100;  op2val:0x10003fff
TEST_P64_PNN_OP(smslxda, x20, x21, x7, x19, 0x00000000, 0, 0x80000100, 0x10003fff, x1, 24, x6)

inst_25:
// rs1==x3, rs2==x23, rs2_h1_val == 2048, rs2_h0_val == -5
// opcode: smslxda ; op1:x3; op2:x23; dest:x28; op1val:0xfeff3fff;  op2val:0x0800fffb
TEST_P64_PNN_OP(smslxda, x28, x29, x3, x23, 0x00000000, 0, 0xfeff3fff, 0x0800fffb, x1, 32, x6)

inst_26:
// rs1==x11, rs2==x28, rs2_h1_val == 1024, rs1_h1_val == -5
// opcode: smslxda ; op1:x11; op2:x28; dest:x16; op1val:0xfffbfff8;  op2val:0x04007fff
TEST_P64_PNN_OP(smslxda, x16, x17, x11, x28, 0x00000000, 0, 0xfffbfff8, 0x04007fff, x1, 40, x6)

inst_27:
// rs1==x27, rs2==x16, rs2_h1_val == 512, 
// opcode: smslxda ; op1:x27; op2:x16; dest:x4; op1val:0xfffe2000;  op2val:0x0200fffa
TEST_P64_PNN_OP(smslxda, x4, x5, x27, x16, 0x00000000, 0, 0xfffe2000, 0x0200fffa, x1, 48, x6)

inst_28:
// rs1==x4, rs2==x17, rs2_h1_val == 256, rs1_h1_val == -8193, rs2_h0_val == 16384
// opcode: smslxda ; op1:x4; op2:x17; dest:x8; op1val:0xdfff0006;  op2val:0x01004000
TEST_P64_PNN_OP(smslxda, x8, x9, x4, x17, 0x00000000, 0, 0xdfff0006, 0x01004000, x1, 56, x6)

inst_29:
// rs1==x25, rs2==x8, rs2_h1_val == 128, rs2_h0_val == -129, rs1_h0_val == 16384
// opcode: smslxda ; op1:x25; op2:x8; dest:x16; op1val:0x00054000;  op2val:0x0080ff7f
TEST_P64_PNN_OP(smslxda, x16, x17, x25, x8, 0x00000000, 0, 0x00054000, 0x0080ff7f, x1, 64, x6)

inst_30:
// rs1==x20, rs2==x4, rs2_h1_val == 64, rs2_h0_val == -257, rs1_h1_val == -3, rs1_h0_val == 128
// opcode: smslxda ; op1:x20; op2:x4; dest:x12; op1val:0xfffd0080;  op2val:0x0040feff
TEST_P64_PNN_OP(smslxda, x12, x13, x20, x4, 0x00000000, 0, 0xfffd0080, 0x0040feff, x1, 72, x6)

inst_31:
// rs1==x16, rs2==x29, rs1_h0_val == -513, rs1_h1_val == -65
// opcode: smslxda ; op1:x16; op2:x29; dest:x4; op1val:0xffbffdff;  op2val:0xfbff4000
TEST_P64_PNN_OP(smslxda, x4, x5, x16, x29, 0x00000000, 0, 0xffbffdff, 0xfbff4000, x1, 80, x6)

inst_32:
// rs1_h0_val == -129, rs2_h1_val == 1
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0006ff7f;  op2val:0x00010400
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0006ff7f, 0x00010400, x1, 88, x6)

inst_33:
// rs1_h0_val == -17, rs2_h1_val == 16, rs1_h1_val == 256
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0100ffef;  op2val:0x0010efff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0100ffef, 0x0010efff, x1, 96, x6)

inst_34:
// rs1_h0_val == -9, rs1_h1_val == 4
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0004fff7;  op2val:0xaaaa0010
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0004fff7, 0xaaaa0010, x1, 104, x6)

inst_35:
// rs1_h0_val == -5, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0003fffb;  op2val:0x55552000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0003fffb, 0x55552000, x1, 112, x6)

inst_36:
// rs1_h0_val == -3, rs2_h0_val == 512
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x2000fffd;  op2val:0x00060200
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x2000fffd, 0x00060200, x1, 120, x6)

inst_37:
// rs1_h0_val == -2, rs1_h1_val == 16
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0010fffe;  op2val:0x00014000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0010fffe, 0x00014000, x1, 128, x6)

inst_38:
// rs1_h0_val == 8, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff80008;  op2val:0xfff7fff7
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff80008, 0xfff7fff7, x1, 136, x6)

inst_39:
// rs1_h0_val == 4, rs1_h1_val == -513
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0004;  op2val:0x80000009
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0004, 0x80000009, x1, 144, x6)

inst_40:
// rs1_h0_val == 0, rs2_h0_val == 21845
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff60000;  op2val:0xfffb5555
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff60000, 0xfffb5555, x1, 152, x6)

inst_41:
// rs1_h0_val == -1, rs2_h1_val == 8
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0400ffff;  op2val:0x00084000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0400ffff, 0x00084000, x1, 160, x6)

inst_42:
// rs2_h1_val == 32, rs1_h1_val == 4096
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x1000ffff;  op2val:0x0020fff8
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x1000ffff, 0x0020fff8, x1, 168, x6)

inst_43:
// rs2_h1_val == 4, rs1_h1_val == 16384, rs2_h0_val == -2
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x4000fff8;  op2val:0x0004fffe
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x4000fff8, 0x0004fffe, x1, 176, x6)

inst_44:
// rs2_h1_val == 0, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x02000001;  op2val:0x00000010
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x02000001, 0x00000010, x1, 184, x6)

inst_45:
// rs2_h1_val == -1, rs1_h1_val == -17
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xffef3fff;  op2val:0xfffffeff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xffef3fff, 0xfffffeff, x1, 192, x6)

inst_46:
// rs2_h0_val == 2048, rs1_h0_val == -2049
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x1000f7ff;  op2val:0xfff70800
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x1000f7ff, 0xfff70800, x1, 200, x6)

inst_47:
// rs2_h0_val == 256, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffa0009;  op2val:0xaaaa0100
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffa0009, 0xaaaa0100, x1, 208, x6)

inst_48:
// rs2_h0_val == 32, rs1_h0_val == -21846, rs1_h1_val == 8
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0008aaaa;  op2val:0x00000020
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0008aaaa, 0x00000020, x1, 216, x6)

inst_49:
// rs2_h0_val == 4, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff8fffa;  op2val:0xfff60004
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff8fffa, 0xfff60004, x1, 224, x6)

inst_50:
// rs2_h0_val == 2, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffdffdf;  op2val:0xfffa0002
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffdffdf, 0xfffa0002, x1, 232, x6)

inst_51:
// rs2_h0_val == 1, rs1_h1_val == 32767
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x7fff0004;  op2val:0xfffe0001
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x7fff0004, 0xfffe0001, x1, 240, x6)

inst_52:
// rs2_h0_val == 0, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xaaaafdff;  op2val:0x04000000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xaaaafdff, 0x04000000, x1, 248, x6)

inst_53:
// rs2_h0_val == -1, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaaaaa;  op2val:0x0005ffff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaaaaa, 0x0005ffff, x1, 256, x6)

inst_54:
// rs1_h1_val == -2049, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffef;  op2val:0xffbf0007
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffef, 0xffbf0007, x1, 264, x6)

inst_55:
// rs2_h0_val == -17, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffdffef;  op2val:0xaaaaffef
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffdffef, 0xaaaaffef, x1, 272, x6)

inst_56:
// rs1_h1_val == -1025, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfbfff7ff;  op2val:0x7ffffff8
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfbfff7ff, 0x7ffffff8, x1, 280, x6)

inst_57:
// rs1_h1_val == -33, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0400;  op2val:0x1000fffa
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0400, 0x1000fffa, x1, 288, x6)

inst_58:
// rs1_h1_val == 2048, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x08000009;  op2val:0x5555ffef
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x08000009, 0x5555ffef, x1, 296, x6)

inst_59:
// rs2_h0_val == -65, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x4000dfff;  op2val:0xdfffffbf
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x4000dfff, 0xdfffffbf, x1, 304, x6)

inst_60:
// rs1_h1_val == 128, rs2_h0_val == -513
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x00800007;  op2val:0x0040fdff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x00800007, 0x0040fdff, x1, 312, x6)

inst_61:
// rs1_h1_val == 32, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x00201000;  op2val:0xfdfffff7
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x00201000, 0xfdfffff7, x1, 320, x6)

inst_62:
// rs2_h0_val == -16385, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff60800;  op2val:0xffffbfff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff60800, 0xffffbfff, x1, 328, x6)

inst_63:
// rs2_h0_val == -8193, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff70007;  op2val:0x0007dfff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff70007, 0x0007dfff, x1, 336, x6)

inst_64:
// rs2_h0_val == -2049, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffa0005;  op2val:0x0080f7ff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffa0005, 0x0080f7ff, x1, 344, x6)

inst_65:
// rs1_h1_val == -1, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xffff0400;  op2val:0xfefffdff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xffff0400, 0xfefffdff, x1, 352, x6)

inst_66:
// rs1_h0_val == 21845, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x80005555;  op2val:0xfeffdfff
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x80005555, 0xfeffdfff, x1, 360, x6)

inst_67:
// rs1_h0_val == -16385, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0040bfff;  op2val:0x00090008
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0040bfff, 0x00090008, x1, 368, x6)

inst_68:
// rs2_h0_val == -33, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xffefffbf;  op2val:0xfffaffdf
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xffefffbf, 0xfffaffdf, x1, 376, x6)

inst_69:
// rs1_h0_val == -4097, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0x0008efff;  op2val:0x00404000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0x0008efff, 0x00404000, x1, 384, x6)

inst_70:
// rs1_h1_val == -129, 
// opcode: smslxda ; op1:x31; op2:x29; dest:x30; op1val:0xff7f0007;  op2val:0x0007c000
TEST_P64_PNN_OP(smslxda, x30, x31, x31, x29, 0x00000000, 0, 0xff7f0007, 0x0007c000, x1, 392, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
