
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmwb instruction of the RISC-V RV32PZicsr extension for the smmwb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmwb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x10, rd==x24, rs1_w0_val == -2147483648, rs2_h1_val == 21845, rs2_h0_val == -1025
// opcode: smmwb ; op1:x19; op2:x10; dest:x24; op1val:0x80000000;  op2val:0x5555fbff
TEST_RR_OP(smmwb, x24, x19, x10, 0x00000000, 0x80000000, 0x5555fbff, x11, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x12, rs2_h1_val == -21846, rs1_w0_val == -3
// opcode: smmwb ; op1:x16; op2:x16; dest:x12; op1val:0xfffffffd;  op2val:0xaaaafff9
TEST_RR_OP(smmwb, x12, x16, x16, 0x00000000, 0xfffffffd, 0xaaaafff9, x11, 4, x13)

inst_2:
// rs1 == rd != rs2, rs1==x27, rs2==x7, rd==x27, rs2_h1_val == 32767, rs2_h0_val == -65, rs1_w0_val == -2049
// opcode: smmwb ; op1:x27; op2:x7; dest:x27; op1val:0xfffff7ff;  op2val:0x7fffffbf
TEST_RR_OP(smmwb, x27, x27, x7, 0x00000000, 0xfffff7ff, 0x7fffffbf, x11, 8, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_h1_val == -16385, rs1_w0_val == -65, rs2_h0_val == 0
// opcode: smmwb ; op1:x20; op2:x20; dest:x20; op1val:0xffffffbf;  op2val:0xbfff0000
TEST_RR_OP(smmwb, x20, x20, x20, 0x00000000, 0xffffffbf, 0xbfff0000, x11, 12, x13)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x0, rd==x0, rs2_h1_val == -8193, rs2_h0_val == -8193
// opcode: smmwb ; op1:x15; op2:x0; dest:x0; op1val:0x80000000;  op2val:0xdfffdfff
TEST_RR_OP(smmwb, x0, x15, x0, 0x00000000, 0x80000000, 0xdfffdfff, x11, 16, x13)

inst_5:
// rs1==x18, rs2==x30, rd==x15, rs2_h1_val == -4097, rs1_w0_val == 512, rs2_h0_val == 256
// opcode: smmwb ; op1:x18; op2:x30; dest:x15; op1val:0x000200;  op2val:0xefff0100
TEST_RR_OP(smmwb, x15, x18, x30, 0x00000000, 0x000200, 0xefff0100, x11, 20, x13)

inst_6:
// rs1==x1, rs2==x6, rd==x29, rs2_h1_val == -2049, 
// opcode: smmwb ; op1:x1; op2:x6; dest:x29; op1val:0xfffffff8;  op2val:0xf7fffffa
TEST_RR_OP(smmwb, x29, x1, x6, 0x00000000, 0xfffffff8, 0xf7fffffa, x11, 24, x13)

inst_7:
// rs1==x7, rs2==x17, rd==x10, rs2_h1_val == -1025, rs1_w0_val == 1024
// opcode: smmwb ; op1:x7; op2:x17; dest:x10; op1val:0x000400;  op2val:0xfbffffbf
TEST_RR_OP(smmwb, x10, x7, x17, 0x00000000, 0x000400, 0xfbffffbf, x11, 28, x13)

inst_8:
// rs1==x30, rs2==x4, rd==x1, rs2_h1_val == -513, rs1_w0_val == -2097153, rs2_h0_val == -129
// opcode: smmwb ; op1:x30; op2:x4; dest:x1; op1val:0xffdfffff;  op2val:0xfdffff7f
TEST_RR_OP(smmwb, x1, x30, x4, 0x00000000, 0xffdfffff, 0xfdffff7f, x11, 32, x13)

inst_9:
// rs1==x8, rs2==x14, rd==x2, rs2_h1_val == -257, rs2_h0_val == 1
// opcode: smmwb ; op1:x8; op2:x14; dest:x2; op1val:0xffdfffff;  op2val:0xfeff0001
TEST_RR_OP(smmwb, x2, x8, x14, 0x00000000, 0xffdfffff, 0xfeff0001, x11, 36, x13)

inst_10:
// rs1==x24, rs2==x5, rd==x8, rs2_h1_val == -129, rs1_w0_val == -16385
// opcode: smmwb ; op1:x24; op2:x5; dest:x8; op1val:0xffffbfff;  op2val:0xff7fc000
TEST_RR_OP(smmwb, x8, x24, x5, 0x00000000, 0xffffbfff, 0xff7fc000, x11, 40, x13)

inst_11:
// rs1==x10, rs2==x28, rd==x5, rs2_h1_val == -65, rs1_w0_val == -1048577, rs2_h0_val == 21845
// opcode: smmwb ; op1:x10; op2:x28; dest:x5; op1val:0xffefffff;  op2val:0xffbf5555
TEST_RR_OP(smmwb, x5, x10, x28, 0x00000000, 0xffefffff, 0xffbf5555, x11, 44, x13)

inst_12:
// rs1==x21, rs2==x25, rd==x30, rs2_h1_val == -33, rs1_w0_val == 32768, rs2_h0_val == 2
// opcode: smmwb ; op1:x21; op2:x25; dest:x30; op1val:0x008000;  op2val:0xffdf0002
TEST_RR_OP(smmwb, x30, x21, x25, 0x00000000, 0x008000, 0xffdf0002, x11, 48, x13)

inst_13:
// rs1==x12, rs2==x3, rd==x18, rs2_h1_val == -17, rs1_w0_val == 2048
// opcode: smmwb ; op1:x12; op2:x3; dest:x18; op1val:0x000800;  op2val:0xffef3fff
TEST_RR_OP(smmwb, x18, x12, x3, 0x00000000, 0x000800, 0xffef3fff, x11, 52, x13)

inst_14:
// rs1==x23, rs2==x9, rd==x28, rs2_h1_val == -9, rs1_w0_val == -67108865
// opcode: smmwb ; op1:x23; op2:x9; dest:x28; op1val:0xfbffffff;  op2val:0xfff70000
TEST_RR_OP(smmwb, x28, x23, x9, 0x00000000, 0xfbffffff, 0xfff70000, x11, 56, x13)

inst_15:
// rs1==x17, rs2==x1, rd==x31, rs2_h1_val == -5, rs2_h0_val == -3, rs1_w0_val == 67108864
// opcode: smmwb ; op1:x17; op2:x1; dest:x31; op1val:0x4000000;  op2val:0xfffbfffd
TEST_RR_OP(smmwb, x31, x17, x1, 0x00000000, 0x4000000, 0xfffbfffd, x11, 60, x10)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x11, rs2==x8, rd==x3, rs2_h1_val == -3, rs1_w0_val == -33, rs2_h0_val == -2
// opcode: smmwb ; op1:x11; op2:x8; dest:x3; op1val:0xffffffdf;  op2val:0xfffdfffe
TEST_RR_OP(smmwb, x3, x11, x8, 0x00000000, 0xffffffdf, 0xfffdfffe, x1, 0, x10)

inst_17:
// rs1==x6, rs2==x27, rd==x23, rs2_h1_val == -2, rs2_h0_val == 16, rs1_w0_val == 64
// opcode: smmwb ; op1:x6; op2:x27; dest:x23; op1val:0x000040;  op2val:0xfffe0010
TEST_RR_OP(smmwb, x23, x6, x27, 0x00000000, 0x000040, 0xfffe0010, x1, 4, x10)

inst_18:
// rs1==x31, rs2==x22, rd==x16, rs2_h1_val == -32768, rs1_w0_val == 2097152
// opcode: smmwb ; op1:x31; op2:x22; dest:x16; op1val:0x200000;  op2val:0x80000001
TEST_RR_OP(smmwb, x16, x31, x22, 0x00000000, 0x200000, 0x80000001, x1, 8, x10)

inst_19:
// rs1==x22, rs2==x29, rd==x25, rs2_h1_val == 16384, 
// opcode: smmwb ; op1:x22; op2:x29; dest:x25; op1val:0xfffffff8;  op2val:0x4000fffd
TEST_RR_OP(smmwb, x25, x22, x29, 0x00000000, 0xfffffff8, 0x4000fffd, x1, 12, x10)

inst_20:
// rs1==x3, rs2==x24, rd==x7, rs2_h1_val == 8192, rs1_w0_val == 524288
// opcode: smmwb ; op1:x3; op2:x24; dest:x7; op1val:0x080000;  op2val:0x2000c000
TEST_RR_OP(smmwb, x7, x3, x24, 0x00000000, 0x080000, 0x2000c000, x1, 16, x10)

inst_21:
// rs1==x0, rs2==x18, rd==x11, rs2_h1_val == 4096, rs2_h0_val == 1024, rs1_w0_val == 4
// opcode: smmwb ; op1:x0; op2:x18; dest:x11; op1val:0x000004;  op2val:0x10000400
TEST_RR_OP(smmwb, x11, x0, x18, 0x00000000, 0x000004, 0x10000400, x1, 20, x10)

inst_22:
// rs1==x13, rs2==x2, rd==x9, rs2_h1_val == 2048, rs1_w0_val == -1
// opcode: smmwb ; op1:x13; op2:x2; dest:x9; op1val:0xffffffff;  op2val:0x8000000
TEST_RR_OP(smmwb, x9, x13, x2, 0x00000000, 0xffffffff, 0x8000000, x1, 24, x10)

inst_23:
// rs1==x14, rs2==x26, rd==x4, rs2_h1_val == 1024, rs2_h0_val == -5
// opcode: smmwb ; op1:x14; op2:x26; dest:x4; op1val:0x80000000;  op2val:0x400fffb
TEST_RR_OP(smmwb, x4, x14, x26, 0x00000000, 0x80000000, 0x400fffb, x1, 28, x10)

inst_24:
// rs1==x28, rs2==x13, rd==x22, rs2_h1_val == 512, 
// opcode: smmwb ; op1:x28; op2:x13; dest:x22; op1val:0x80000000;  op2val:0x200fffa
TEST_RR_OP(smmwb, x22, x28, x13, 0x00000000, 0x80000000, 0x200fffa, x1, 32, x10)

inst_25:
// rs1==x25, rs2==x31, rd==x6, rs2_h1_val == 256, rs2_h0_val == -21846
// opcode: smmwb ; op1:x25; op2:x31; dest:x6; op1val:0xfffffffc;  op2val:0x100aaaa
TEST_RR_OP(smmwb, x6, x25, x31, 0x00000000, 0xfffffffc, 0x100aaaa, x1, 36, x10)

inst_26:
// rs1==x4, rs2==x12, rd==x17, rs2_h1_val == 128, rs1_w0_val == -536870913
// opcode: smmwb ; op1:x4; op2:x12; dest:x17; op1val:0xdfffffff;  op2val:0x80fff9
TEST_RR_OP(smmwb, x17, x4, x12, 0x00000000, 0xdfffffff, 0x80fff9, x1, 40, x10)

inst_27:
// rs1==x26, rs2==x11, rd==x13, rs2_h1_val == 64, 
// opcode: smmwb ; op1:x26; op2:x11; dest:x13; op1val:0x000400;  op2val:0x40aaaa
TEST_RR_OP(smmwb, x13, x26, x11, 0x00000000, 0x000400, 0x40aaaa, x1, 44, x10)

inst_28:
// rs1==x5, rs2==x15, rd==x19, rs2_h1_val == 32, rs2_h0_val == -16385
// opcode: smmwb ; op1:x5; op2:x15; dest:x19; op1val:0xdfffffff;  op2val:0x20bfff
TEST_RR_OP(smmwb, x19, x5, x15, 0x00000000, 0xdfffffff, 0x20bfff, x1, 48, x10)

inst_29:
// rs1==x29, rs2==x19, rd==x14, rs2_h1_val == 16, rs1_w0_val == 1
// opcode: smmwb ; op1:x29; op2:x19; dest:x14; op1val:0x000001;  op2val:0x10fffc
TEST_RR_OP(smmwb, x14, x29, x19, 0x00000000, 0x000001, 0x10fffc, x1, 52, x3)

inst_30:
// rs1==x9, rs2==x23, rd==x21, rs2_h1_val == 8, rs2_h0_val == 4096
// opcode: smmwb ; op1:x9; op2:x23; dest:x21; op1val:0xfffffff8;  op2val:0x081000
TEST_RR_OP(smmwb, x21, x9, x23, 0x00000000, 0xfffffff8, 0x081000, x1, 56, x3)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31:
// rs1==x2, rs2==x21, rd==x26, rs2_h1_val == 4, 
// opcode: smmwb ; op1:x2; op2:x21; dest:x26; op1val:0x3fffffff;  op2val:0x040009
TEST_RR_OP(smmwb, x26, x2, x21, 0x00000000, 0x3fffffff, 0x040009, x1, 0, x3)

inst_32:
// rs2_h1_val == 2, rs2_h0_val == 8192, rs1_w0_val == 1431655765
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x022000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x55555555, 0x022000, x1, 4, x3)

inst_33:
// rs2_h1_val == 1, rs1_w0_val == -1025
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff;  op2val:0x01aaaa
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffbff, 0x01aaaa, x1, 8, x3)

inst_34:
// rs2_h1_val == 0, rs1_w0_val == 33554432
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x00fff6
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x2000000, 0x00fff6, x1, 12, x3)

inst_35:
// rs2_h1_val == -1, rs1_w0_val == 8388608
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xfffffffa
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x800000, 0xfffffffa, x1, 16, x3)

inst_36:
// rs1_w0_val == 256, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000100;  op2val:0x07fff6
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000100, 0x07fff6, x1, 20, x3)

inst_37:
// rs1_w0_val == 128, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000080;  op2val:0xffefc000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000080, 0xffefc000, x1, 24, x3)

inst_38:
// rs1_w0_val == 32, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000020;  op2val:0x000009
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000020, 0x000009, x1, 28, x3)

inst_39:
// rs1_w0_val == 16, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0xf7ff0010
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000010, 0xf7ff0010, x1, 32, x3)

inst_40:
// rs1_w0_val == 8, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000008;  op2val:0xfbff0001
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000008, 0xfbff0001, x1, 36, x3)

inst_41:
// rs1_w0_val == 2, rs2_h0_val == 4
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000002;  op2val:0x400004
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000002, 0x400004, x1, 40, x3)

inst_42:
// rs1_w0_val == 0, rs2_h0_val == 2048
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000000;  op2val:0xfeff0800
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000000, 0xfeff0800, x1, 44, x3)

inst_43:
// rs2_h0_val == 32767, rs1_w0_val == 4194304
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0x007fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x400000, 0x007fff, x1, 48, x3)

inst_44:
// rs2_h0_val == -4097, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0x400efff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffdfffff, 0x400efff, x1, 52, x3)

inst_45:
// rs2_h0_val == -2049, rs1_w0_val == 2147483647
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0x10f7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x7fffffff, 0x10f7ff, x1, 56, x3)

inst_46:
// rs2_h0_val == -513, rs1_w0_val == -17
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0x08fdff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffffef, 0x08fdff, x1, 60, x3)

inst_47:
// rs2_h0_val == -257, rs1_w0_val == -1431655766
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xfbfffeff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xfbfffeff, x1, 64, x3)

inst_48:
// rs2_h0_val == -33, rs1_w0_val == 1048576
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xfffcffdf
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x100000, 0xfffcffdf, x1, 68, x3)

inst_49:
// rs2_h0_val == -17, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0x7fffffef
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000200, 0x7fffffef, x1, 72, x3)

inst_50:
// rs2_h0_val == -9, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0xfff8fff7
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffff6, 0xfff8fff7, x1, 76, x3)

inst_51:
// rs2_h0_val == -32768, rs1_w0_val == -4097
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0xbfff8000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffefff, 0xbfff8000, x1, 80, x3)

inst_52:
// rs2_h0_val == 16384, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0x104000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xdfffffff, 0x104000, x1, 84, x3)

inst_53:
// rs2_h0_val == 512, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x060200
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffffff, 0x060200, x1, 88, x3)

inst_54:
// rs2_h0_val == 128, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000007;  op2val:0xbfff0080
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000007, 0xbfff0080, x1, 92, x3)

inst_55:
// rs2_h0_val == 64, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xfff80040
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x200000, 0xfff80040, x1, 96, x3)

inst_56:
// rs2_h0_val == 32, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000001;  op2val:0x3fff0020
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000001, 0x3fff0020, x1, 100, x3)

inst_57:
// rs2_h0_val == 8, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x800008
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x2000000, 0x800008, x1, 104, x3)

inst_58:
// rs2_h0_val == -1, rs1_w0_val == 16384
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x004000;  op2val:0x3fffffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x004000, 0x3fffffff, x1, 108, x3)

inst_59:
// rs1_w0_val == -1073741825, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0xfbfffdff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xbfffffff, 0xfbfffdff, x1, 112, x3)

inst_60:
// rs1_w0_val == -268435457, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xdffffbff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xefffffff, 0xdffffbff, x1, 116, x3)

inst_61:
// rs1_w0_val == -134217729, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xffbffffc
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xffbffffc, x1, 120, x3)

inst_62:
// rs1_w0_val == -33554433, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0x083fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfdffffff, 0x083fff, x1, 124, x3)

inst_63:
// rs1_w0_val == -16777217, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xfffe0800
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfeffffff, 0xfffe0800, x1, 128, x3)

inst_64:
// rs1_w0_val == -8388609, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0x100dfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xff7fffff, 0x100dfff, x1, 132, x3)

inst_65:
// rs1_w0_val == -4194305, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0xffbf0004
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffbfffff, 0xffbf0004, x1, 136, x3)

inst_66:
// rs1_w0_val == -524289, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0xdffffeff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xdffffeff, x1, 140, x3)

inst_67:
// rs1_w0_val == -262145, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0x035555
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffbffff, 0x035555, x1, 144, x3)

inst_68:
// rs1_w0_val == -131073, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0x10fff9
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffdffff, 0x10fff9, x1, 148, x3)

inst_69:
// rs1_w0_val == -65537, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xfffdfff7
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffeffff, 0xfffdfff7, x1, 152, x3)

inst_70:
// rs1_w0_val == -32769, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xffdfff7f
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffff7fff, 0xffdfff7f, x1, 156, x3)

inst_71:
// rs1_w0_val == -8193, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xff7ff7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffdfff, 0xff7ff7ff, x1, 160, x3)

inst_72:
// rs1_w0_val == -513, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0x3ffffdff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffdff, 0x3ffffdff, x1, 164, x3)

inst_73:
// rs1_w0_val == -257, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0xbfff0040
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffeff, 0xbfff0040, x1, 168, x3)

inst_74:
// rs1_w0_val == -129, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0xbfffffbf
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffff7f, 0xbfffffbf, x1, 172, x3)

inst_75:
// rs1_w0_val == -9, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0x06ffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffff7, 0x06ffff, x1, 176, x3)

inst_76:
// rs1_w0_val == -5, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0x05fffb
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffffb, 0x05fffb, x1, 180, x3)

inst_77:
// rs1_w0_val == -2, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x55550002
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffffe, 0x55550002, x1, 184, x3)

inst_78:
// rs1_w0_val == 1073741824, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0xc000ffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x40000000, 0xc000ffff, x1, 188, x3)

inst_79:
// rs1_w0_val == 536870912, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xffdffffd
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x20000000, 0xffdffffd, x1, 192, x3)

inst_80:
// rs1_w0_val == 268435456, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xaaaa0008
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x10000000, 0xaaaa0008, x1, 196, x3)

inst_81:
// rs1_w0_val == 16777216, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xfff85555
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x1000000, 0xfff85555, x1, 200, x3)

inst_82:
// rs1_w0_val == 262144, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x040000;  op2val:0x2000006
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x040000, 0x2000006, x1, 204, x3)

inst_83:
// rs1_w0_val == 131072, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x020000;  op2val:0x10bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x020000, 0x10bfff, x1, 208, x3)

inst_84:
// rs1_w0_val == 65536, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0x80002000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x010000, 0x80002000, x1, 212, x3)

inst_85:
// rs1_w0_val == 8192, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0x8000dfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x002000, 0x8000dfff, x1, 216, x3)

inst_86:
// rs1_w0_val == 4096, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x001000;  op2val:0x400007
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x001000, 0x400007, x1, 220, x3)

inst_87:
// rs1_w0_val == 134217728, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xfdff0004
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x8000000, 0xfdff0004, x1, 224, x3)

inst_88:
// rs2_h1_val == -21846, rs1_w0_val == -3
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0xaaaafff9
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xfffffffd, 0xaaaafff9, x1, 228, x3)

inst_89:
// rs2_h1_val == -16385, rs1_w0_val == -65, rs2_h0_val == 0
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xbfff0000
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0xffffffbf, 0xbfff0000, x1, 232, x3)

inst_90:
// rs2_h1_val == 4096, rs2_h0_val == 1024, rs1_w0_val == 4
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0x10000400
TEST_RR_OP(smmwb, x31, x30, x29, 0x00000000, 0x000004, 0x10000400, x1, 236, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
