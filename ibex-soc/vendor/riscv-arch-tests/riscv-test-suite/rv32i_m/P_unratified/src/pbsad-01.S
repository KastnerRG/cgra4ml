
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pbsad instruction of the RISC-V RV32PZicsr extension for the pbsad covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pbsad)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x7, rd==x13, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 8, rs1_b1_val == 128, rs2_b2_val == 2, rs1_b2_val == 2
// opcode: pbsad ; op1:x25; op2:x7; dest:x13; op1val:0x8028000;  op2val:0xa020905
TEST_RR_OP(pbsad, x13, x25, x7, 0x00000000, 0x8028000, 0xa020905, x2, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x29, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b3_val == 32, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 4, rs2_b0_val == 16, rs1_b2_val == 247, rs2_b3_val == 32
// opcode: pbsad ; op1:x4; op2:x4; dest:x29; op1val:0x20f70407;  op2val:0x200d0910
TEST_RR_OP(pbsad, x29, x4, x4, 0x00000000, 0x20f70407, 0x200d0910, x2, 4, x8)

inst_2:
// rs1 == rd != rs2, rs1==x24, rs2==x16, rd==x24, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 85, rs1_b2_val == 253, rs2_b0_val == 1
// opcode: pbsad ; op1:x24; op2:x16; dest:x24; op1val:0x9fd0d0c;  op2val:0x55020d01
TEST_RR_OP(pbsad, x24, x24, x16, 0x00000000, 0x9fd0d0c, 0x55020d01, x2, 8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 191, rs1_b1_val == 253, rs1_b2_val == 254, rs1_b0_val == 191, rs1_b3_val == 191
// opcode: pbsad ; op1:x1; op2:x1; dest:x1; op1val:0xbffefdbf;  op2val:0x120c0ebf
TEST_RR_OP(pbsad, x1, x1, x1, 0x00000000, 0xbffefdbf, 0x120c0ebf, x2, 12, x8)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x26, rd==x26, rs2_b3_val == 170, rs2_b0_val == 64, rs1_b2_val == 32, rs2_b2_val == 4, rs1_b0_val == 128
// opcode: pbsad ; op1:x5; op2:x26; dest:x26; op1val:0x5200480;  op2val:0xaa040340
TEST_RR_OP(pbsad, x26, x5, x26, 0x00000000, 0x5200480, 0xaa040340, x2, 16, x8)

inst_5:
// rs1==x6, rs2==x24, rd==x20, rs2_b3_val == 127, rs1_b1_val == 0, rs2_b1_val == 247, rs2_b2_val == 127
// opcode: pbsad ; op1:x6; op2:x24; dest:x20; op1val:0xa11000a;  op2val:0x7f7ff706
TEST_RR_OP(pbsad, x20, x6, x24, 0x00000000, 0xa11000a, 0x7f7ff706, x2, 20, x8)

inst_6:
// rs1==x9, rs2==x3, rd==x5, rs2_b3_val == 191, rs2_b0_val == 85, rs2_b2_val == 128
// opcode: pbsad ; op1:x9; op2:x3; dest:x5; op1val:0x70b110f;  op2val:0xbf800a55
TEST_RR_OP(pbsad, x5, x9, x3, 0x00000000, 0x70b110f, 0xbf800a55, x2, 24, x8)

inst_7:
// rs1==x0, rs2==x18, rd==x16, rs2_b3_val == 223, rs1_b3_val == 253, rs2_b0_val == 239, rs1_b1_val == 8, rs1_b2_val == 223, rs2_b1_val == 32
// opcode: pbsad ; op1:x0; op2:x18; dest:x16; op1val:0xfddf080d;  op2val:0xdf0220ef
TEST_RR_OP(pbsad, x16, x0, x18, 0x00000000, 0xfddf080d, 0xdf0220ef, x2, 28, x8)

inst_8:
// rs1==x19, rs2==x31, rd==x7, rs2_b3_val == 239, rs2_b2_val == 191, rs1_b2_val == 4, rs2_b0_val == 170
// opcode: pbsad ; op1:x19; op2:x31; dest:x7; op1val:0xe04070f;  op2val:0xefbf09aa
TEST_RR_OP(pbsad, x7, x19, x31, 0x00000000, 0xe04070f, 0xefbf09aa, x2, 32, x8)

inst_9:
// rs1==x15, rs2==x23, rd==x12, rs2_b3_val == 247, rs1_b1_val == 251, rs1_b3_val == 2
// opcode: pbsad ; op1:x15; op2:x23; dest:x12; op1val:0x2fefb07;  op2val:0xf7060505
TEST_RR_OP(pbsad, x12, x15, x23, 0x00000000, 0x2fefb07, 0xf7060505, x2, 36, x8)

inst_10:
// rs1==x20, rs2==x15, rd==x10, rs2_b3_val == 251, rs1_b2_val == 191, rs2_b1_val == 0, rs2_b2_val == 255
// opcode: pbsad ; op1:x20; op2:x15; dest:x10; op1val:0x3bf0cbf;  op2val:0xfbff0005
TEST_RR_OP(pbsad, x10, x20, x15, 0x00000000, 0x3bf0cbf, 0xfbff0005, x2, 40, x8)

inst_11:
// rs1==x16, rs2==x20, rd==x25, rs2_b3_val == 253, rs2_b1_val == 255, rs2_b2_val == 170, rs1_b2_val == 85
// opcode: pbsad ; op1:x16; op2:x20; dest:x25; op1val:0x555070a;  op2val:0xfdaaff0c
TEST_RR_OP(pbsad, x25, x16, x20, 0x00000000, 0x555070a, 0xfdaaff0c, x2, 44, x8)

inst_12:
// rs1==x26, rs2==x28, rd==x23, rs2_b3_val == 254, rs2_b0_val == 223
// opcode: pbsad ; op1:x26; op2:x28; dest:x23; op1val:0xe02110b;  op2val:0xfe0fffdf
TEST_RR_OP(pbsad, x23, x26, x28, 0x00000000, 0xe02110b, 0xfe0fffdf, x2, 48, x8)

inst_13:
// rs1==x7, rs2==x27, rd==x0, rs2_b3_val == 128, rs1_b1_val == 170, rs1_b0_val == 32, rs2_b1_val == 16
// opcode: pbsad ; op1:x7; op2:x27; dest:x0; op1val:0xd13aa20;  op2val:0x800f1001
TEST_RR_OP(pbsad, x0, x7, x27, 0x00000000, 0xd13aa20, 0x800f1001, x2, 52, x8)

inst_14:
// rs1==x23, rs2==x29, rd==x22, rs2_b3_val == 64, rs2_b1_val == 239
// opcode: pbsad ; op1:x23; op2:x29; dest:x22; op1val:0xa060d00;  op2val:0x400fef10
TEST_RR_OP(pbsad, x22, x23, x29, 0x00000000, 0xa060d00, 0x400fef10, x2, 56, x8)

inst_15:
// rs1==x11, rs2==x25, rd==x9, rs2_b3_val == 16, rs1_b3_val == 255, rs1_b2_val == 255, rs2_b0_val == 127
// opcode: pbsad ; op1:x11; op2:x25; dest:x9; op1val:0xffff080b;  op2val:0x100d067f
TEST_RR_OP(pbsad, x9, x11, x25, 0x00000000, 0xffff080b, 0x100d067f, x2, 60, x8)

inst_16:
// rs1==x22, rs2==x17, rd==x21, rs2_b3_val == 8, rs2_b1_val == 253, rs2_b0_val == 251, rs1_b3_val == 223
// opcode: pbsad ; op1:x22; op2:x17; dest:x21; op1val:0xdff70b0c;  op2val:0x812fdfb
TEST_RR_OP(pbsad, x21, x22, x17, 0x00000000, 0xdff70b0c, 0x812fdfb, x2, 64, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x31, rs2==x21, rd==x28, rs2_b3_val == 4, rs2_b1_val == 191, rs1_b1_val == 239
// opcode: pbsad ; op1:x31; op2:x21; dest:x28; op1val:0x6feef05;  op2val:0x40bbf0d
TEST_RR_OP(pbsad, x28, x31, x21, 0x00000000, 0x6feef05, 0x40bbf0d, x1, 0, x7)

inst_18:
// rs1==x14, rs2==x22, rd==x2, rs2_b3_val == 2, rs2_b0_val == 0, rs1_b1_val == 254, rs1_b2_val == 128
// opcode: pbsad ; op1:x14; op2:x22; dest:x2; op1val:0x1180fe20;  op2val:0x20f1000
TEST_RR_OP(pbsad, x2, x14, x22, 0x00000000, 0x1180fe20, 0x20f1000, x1, 4, x7)

inst_19:
// rs1==x21, rs2==x2, rd==x15, rs2_b3_val == 1, rs2_b1_val == 254, rs2_b2_val == 8, rs2_b0_val == 4, rs1_b3_val == 239
// opcode: pbsad ; op1:x21; op2:x2; dest:x15; op1val:0xef118080;  op2val:0x108fe04
TEST_RR_OP(pbsad, x15, x21, x2, 0x00000000, 0xef118080, 0x108fe04, x1, 8, x7)

inst_20:
// rs1==x29, rs2==x8, rd==x18, rs2_b3_val == 255, rs1_b0_val == 8
// opcode: pbsad ; op1:x29; op2:x8; dest:x18; op1val:0x20ff0408;  op2val:0xff0a11fb
TEST_RR_OP(pbsad, x18, x29, x8, 0x00000000, 0x20ff0408, 0xff0a11fb, x1, 12, x7)

inst_21:
// rs1==x13, rs2==x11, rd==x17, rs2_b3_val == 0, rs2_b2_val == 16, rs1_b2_val == 251, rs2_b1_val == 8
// opcode: pbsad ; op1:x13; op2:x11; dest:x17; op1val:0xffb0680;  op2val:0x10087f
TEST_RR_OP(pbsad, x17, x13, x11, 0x00000000, 0xffb0680, 0x10087f, x1, 16, x7)

inst_22:
// rs1==x2, rs2==x12, rd==x27, rs2_b2_val == 85, rs1_b0_val == 170
// opcode: pbsad ; op1:x2; op2:x12; dest:x27; op1val:0x1220aaaa;  op2val:0x6550540
TEST_RR_OP(pbsad, x27, x2, x12, 0x00000000, 0x1220aaaa, 0x6550540, x1, 20, x7)

inst_23:
// rs1==x30, rs2==x10, rd==x4, rs2_b2_val == 223, rs2_b1_val == 4, rs1_b1_val == 16
// opcode: pbsad ; op1:x30; op2:x10; dest:x4; op1val:0xf02100b;  op2val:0xddf0403
TEST_RR_OP(pbsad, x4, x30, x10, 0x00000000, 0xf02100b, 0xddf0403, x1, 24, x7)

inst_24:
// rs1==x18, rs2==x13, rd==x3, rs2_b2_val == 239, 
// opcode: pbsad ; op1:x18; op2:x13; dest:x3; op1val:0x7030e0e;  op2val:0x9ef1013
TEST_RR_OP(pbsad, x3, x18, x13, 0x00000000, 0x7030e0e, 0x9ef1013, x1, 28, x7)

inst_25:
// rs1==x3, rs2==x19, rd==x30, rs2_b2_val == 247, rs1_b0_val == 239
// opcode: pbsad ; op1:x3; op2:x19; dest:x30; op1val:0xd1307ef;  op2val:0x3f70307
TEST_RR_OP(pbsad, x30, x3, x19, 0x00000000, 0xd1307ef, 0x3f70307, x1, 32, x7)

inst_26:
// rs1==x12, rs2==x6, rd==x14, rs2_b2_val == 251, rs1_b3_val == 254
// opcode: pbsad ; op1:x12; op2:x6; dest:x14; op1val:0xfe110d05;  op2val:0xbfb0507
TEST_RR_OP(pbsad, x14, x12, x6, 0x00000000, 0xfe110d05, 0xbfb0507, x1, 36, x7)

inst_27:
// rs1==x10, rs2==x5, rd==x8, rs2_b2_val == 253, 
// opcode: pbsad ; op1:x10; op2:x5; dest:x8; op1val:0x509080f;  op2val:0xbffdfd40
TEST_RR_OP(pbsad, x8, x10, x5, 0x00000000, 0x509080f, 0xbffdfd40, x1, 40, x7)

inst_28:
// rs1==x27, rs2==x0, rd==x19, rs2_b2_val == 254, 
// opcode: pbsad ; op1:x27; op2:x0; dest:x19; op1val:0xfd0f0ebf;  op2val:0xbfe0b0b
TEST_RR_OP(pbsad, x19, x27, x0, 0x00000000, 0xfd0f0ebf, 0xbfe0b0b, x1, 44, x7)

inst_29:
// rs1==x17, rs2==x9, rd==x6, rs1_b2_val == 0, 
// opcode: pbsad ; op1:x17; op2:x9; dest:x6; op1val:0xe000f0c;  op2val:0x57f0c0b
TEST_RR_OP(pbsad, x6, x17, x9, 0x00000000, 0xe000f0c, 0x57f0c0b, x1, 48, x7)

inst_30:
// rs1==x8, rs2==x14, rd==x11, rs1_b1_val == 85, 
// opcode: pbsad ; op1:x8; op2:x14; dest:x11; op1val:0x130d5513;  op2val:0xef070809
TEST_RR_OP(pbsad, x11, x8, x14, 0x00000000, 0x130d5513, 0xef070809, x1, 52, x7)

inst_31:
// rs1==x28, rs2==x30, rd==x31, rs1_b1_val == 127, rs1_b3_val == 1
// opcode: pbsad ; op1:x28; op2:x30; dest:x31; op1val:0x10c7f0f;  op2val:0x11130ffb
TEST_RR_OP(pbsad, x31, x28, x30, 0x00000000, 0x10c7f0f, 0x11130ffb, x1, 56, x7)

inst_32:
// rs1_b1_val == 191, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xd0fbf03;  op2val:0xf709040a
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xd0fbf03, 0xf709040a, x1, 60, x7)

inst_33:
// rs1_b1_val == 223, rs2_b2_val == 0, rs2_b0_val == 8, rs1_b3_val == 85, rs1_b2_val == 8, rs2_b1_val == 64
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x5508df0c;  op2val:0x2004008
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x5508df0c, 0x2004008, x1, 64, x7)

inst_34:
// rs1_b1_val == 247, rs2_b1_val == 128
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xb0af700;  op2val:0x800b8012
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xb0af700, 0x800b8012, x1, 68, x7)

inst_35:
// rs1_b1_val == 64, rs2_b1_val == 2
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xe134005;  op2val:0xf7070255
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xe134005, 0xf7070255, x1, 72, x7)

inst_36:
// rs1_b1_val == 32, rs1_b3_val == 170
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xaafb20aa;  op2val:0xf12ff0c
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xaafb20aa, 0xf12ff0c, x1, 76, x7)

inst_37:
// rs1_b1_val == 2, rs2_b0_val == 32, rs1_b0_val == 127
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x50f027f;  op2val:0x40120020
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x50f027f, 0x40120020, x1, 80, x7)

inst_38:
// rs1_b1_val == 1, rs1_b3_val == 64
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x4005017f;  op2val:0xfe02ef00
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x4005017f, 0xfe02ef00, x1, 84, x7)

inst_39:
// rs1_b1_val == 255, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x6fdff06;  op2val:0x200200d
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x6fdff06, 0x200200d, x1, 88, x7)

inst_40:
// rs1_b0_val == 85, rs2_b1_val == 127
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xfe06ef55;  op2val:0x40f77f00
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xfe06ef55, 0x40f77f00, x1, 92, x7)

inst_41:
// rs1_b0_val == 223, rs2_b1_val == 251, rs2_b0_val == 255
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xe047fdf;  op2val:0xbeffbff
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xe047fdf, 0xbeffbff, x1, 96, x7)

inst_42:
// rs1_b0_val == 247, rs2_b0_val == 247, rs1_b2_val == 170
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x2aa01f7;  op2val:0xb0a0cf7
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x2aa01f7, 0xb0a0cf7, x1, 100, x7)

inst_43:
// rs1_b0_val == 251, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x5fe0ffb;  op2val:0xc08bf01
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x5fe0ffb, 0xc08bf01, x1, 104, x7)

inst_44:
// rs2_b1_val == 1, rs1_b2_val == 239
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x12efdf0f;  op2val:0x5120108
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x12efdf0f, 0x5120108, x1, 108, x7)

inst_45:
// rs2_b0_val == 253, rs2_b1_val == 85
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xff087f07;  op2val:0xaabf55fd
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xff087f07, 0xaabf55fd, x1, 112, x7)

inst_46:
// rs2_b0_val == 254, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xbf0d1203;  op2val:0xb11fffe
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xbf0d1203, 0xb11fffe, x1, 116, x7)

inst_47:
// rs2_b0_val == 128, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xeffeef12;  op2val:0xfbf0580
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xeffeef12, 0xfbf0580, x1, 120, x7)

inst_48:
// rs2_b0_val == 2, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x2110d0b;  op2val:0x6550b02
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x2110d0b, 0x6550b02, x1, 124, x7)

inst_49:
// rs1_b3_val == 127, rs1_b0_val == 2
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x7ffe1302;  op2val:0x40100c0f
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x7ffe1302, 0x40100c0f, x1, 128, x7)

inst_50:
// rs1_b0_val == 253, rs1_b3_val == 128
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x800efdfd;  op2val:0x810bf11
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x800efdfd, 0x810bf11, x1, 132, x7)

inst_51:
// rs1_b0_val == 254, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x8050cfe;  op2val:0xffbf0655
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x8050cfe, 0xffbf0655, x1, 136, x7)

inst_52:
// rs1_b3_val == 247, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xf7080aaa;  op2val:0x80ff0f08
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xf7080aaa, 0x80ff0f08, x1, 140, x7)

inst_53:
// rs1_b0_val == 64, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x7f801340;  op2val:0x50d0407
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x7f801340, 0x50d0407, x1, 144, x7)

inst_54:
// rs1_b3_val == 251, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xfb0040aa;  op2val:0x13055555
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xfb0040aa, 0x13055555, x1, 148, x7)

inst_55:
// rs1_b0_val == 16, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x1255ef10;  op2val:0x55bf550c
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x1255ef10, 0x55bf550c, x1, 152, x7)

inst_56:
// rs1_b0_val == 4, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x10f1004;  op2val:0xff080f0e
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x10f1004, 0xff080f0e, x1, 156, x7)

inst_57:
// rs1_b0_val == 1, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x13fbf701;  op2val:0x8ef09fb
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x13fbf701, 0x8ef09fb, x1, 160, x7)

inst_58:
// rs1_b3_val == 16, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x10aa1100;  op2val:0xff130c
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x10aa1100, 0xff130c, x1, 164, x7)

inst_59:
// rs1_b0_val == 255, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xdef0eff;  op2val:0xfb09bf0e
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xdef0eff, 0xfb09bf0e, x1, 168, x7)

inst_60:
// rs2_b2_val == 64, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x20fe0f07;  op2val:0xa400855
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x20fe0f07, 0xa400855, x1, 172, x7)

inst_61:
// rs1_b3_val == 4, rs2_b1_val == 170
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x40509ff;  op2val:0x40caa0a
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x40509ff, 0x40caa0a, x1, 176, x7)

inst_62:
// rs2_b2_val == 32, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x1555500;  op2val:0xaa200f06
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x1555500, 0xaa200f06, x1, 180, x7)

inst_63:
// rs1_b2_val == 1, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xf01df55;  op2val:0x40111107
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xf01df55, 0x40111107, x1, 184, x7)

inst_64:
// rs2_b1_val == 223, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x13ff08fb;  op2val:0xfeefdffe
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x13ff08fb, 0xfeefdffe, x1, 188, x7)

inst_65:
// rs1_b2_val == 64, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xff40f709;  op2val:0xbf207ffe
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xff40f709, 0xbf207ffe, x1, 192, x7)

inst_66:
// rs1_b2_val == 16, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xef101012;  op2val:0x20b0002
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xef101012, 0x20b0002, x1, 196, x7)

inst_67:
// rs1_b3_val == 0, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x02fef7;  op2val:0xeefef0b
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x02fef7, 0xeefef0b, x1, 200, x7)

inst_68:
// rs2_b2_val == 1, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xafe0308;  op2val:0xff01aa06
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xafe0308, 0xff01aa06, x1, 204, x7)

inst_69:
// rs1_b2_val == 127, 
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x117fef0a;  op2val:0x5fe0c0f
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x117fef0a, 0x5fe0c0f, x1, 208, x7)

inst_70:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b3_val == 32, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 4, rs2_b0_val == 16, rs1_b2_val == 247, rs2_b3_val == 32
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0x20f70407;  op2val:0x200d0910
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0x20f70407, 0x200d0910, x1, 212, x7)

inst_71:
// rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 191, rs1_b1_val == 253, rs1_b2_val == 254, rs1_b0_val == 191, rs1_b3_val == 191
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xbffefdbf;  op2val:0x120c0ebf
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xbffefdbf, 0x120c0ebf, x1, 216, x7)

inst_72:
// rs2_b3_val == 223, rs1_b3_val == 253, rs2_b0_val == 239, rs1_b1_val == 8, rs1_b2_val == 223, rs2_b1_val == 32
// opcode: pbsad ; op1:x30; op2:x29; dest:x31; op1val:0xfddf080d;  op2val:0xdf0220ef
TEST_RR_OP(pbsad, x31, x30, x29, 0x00000000, 0xfddf080d, 0xdf0220ef, x1, 220, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
