
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmwb2.u instruction of the RISC-V RV32PZicsr extension for the kmmwb2.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmwb2.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x4, rd==x7, rs1_w0_val == -2147483648, rs2_h1_val == -32768
// opcode: kmmwb2.u ; op1:x10; op2:x4; dest:x7; op1val:0x80000000;  op2val:0x8000fff9
TEST_PKRR_OP(kmmwb2.u, x7, x10, x4, 0x00000000, 0x80000000, 0x8000fff9, x10, x2, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x14, rs2_h1_val == -21846, rs1_w0_val == 2097152, rs2_h0_val == -32768
// opcode: kmmwb2.u ; op1:x1; op2:x1; dest:x14; op1val:0x200000;  op2val:0xaaaa8000
TEST_PKRR_OP(kmmwb2.u, x14, x1, x1, 0x00000000, 0x200000, 0xaaaa8000, x1, x2, 8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x8, rd==x26, rs2_h1_val == 21845, rs2_h0_val == 8, rs1_w0_val == -2097153
// opcode: kmmwb2.u ; op1:x26; op2:x8; dest:x26; op1val:0xffdfffff;  op2val:0x55550008
TEST_PKRR_OP(kmmwb2.u, x26, x26, x8, 0x00000000, 0xffdfffff, 0x55550008, x26, x2, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs2_h1_val == 32767, rs1_w0_val == 131072, rs2_h0_val == -129
// opcode: kmmwb2.u ; op1:x15; op2:x15; dest:x15; op1val:0x020000;  op2val:0x7fffff7f
TEST_PKRR_OP(kmmwb2.u, x15, x15, x15, 0x00000000, 0x020000, 0x7fffff7f, x15, x2, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x29, rd==x29, rs2_h1_val == -16385, rs1_w0_val == 1073741824
// opcode: kmmwb2.u ; op1:x24; op2:x29; dest:x29; op1val:0x40000000;  op2val:0xbfff0009
TEST_PKRR_OP(kmmwb2.u, x29, x24, x29, 0x00000000, 0x40000000, 0xbfff0009, x24, x2, 32, x3)

inst_5:
// rs1==x27, rs2==x23, rd==x12, rs2_h1_val == -8193, rs1_w0_val == -257, rs2_h0_val == -3
// opcode: kmmwb2.u ; op1:x27; op2:x23; dest:x12; op1val:0xfffffeff;  op2val:0xdffffffd
TEST_PKRR_OP(kmmwb2.u, x12, x27, x23, 0x00000000, 0xfffffeff, 0xdffffffd, x27, x2, 40, x3)

inst_6:
// rs1==x18, rs2==x13, rd==x16, rs2_h1_val == -4097, rs1_w0_val == -4194305, rs2_h0_val == -2
// opcode: kmmwb2.u ; op1:x18; op2:x13; dest:x16; op1val:0xffbfffff;  op2val:0xeffffffe
TEST_PKRR_OP(kmmwb2.u, x16, x18, x13, 0x00000000, 0xffbfffff, 0xeffffffe, x18, x2, 48, x3)

inst_7:
// rs1==x21, rs2==x25, rd==x6, rs2_h1_val == -2049, rs2_h0_val == -33, rs1_w0_val == -3
// opcode: kmmwb2.u ; op1:x21; op2:x25; dest:x6; op1val:0xfffffffd;  op2val:0xf7ffffdf
TEST_PKRR_OP(kmmwb2.u, x6, x21, x25, 0x00000000, 0xfffffffd, 0xf7ffffdf, x21, x2, 56, x3)

inst_8:
// rs1==x25, rs2==x14, rd==x31, rs2_h1_val == -1025, 
// opcode: kmmwb2.u ; op1:x25; op2:x14; dest:x31; op1val:0xfffffff9;  op2val:0xfbff0008
TEST_PKRR_OP(kmmwb2.u, x31, x25, x14, 0x00000000, 0xfffffff9, 0xfbff0008, x25, x2, 64, x3)

inst_9:
// rs1==x29, rs2==x30, rd==x28, rs2_h1_val == -513, rs2_h0_val == -1, rs1_w0_val == -1431655766
// opcode: kmmwb2.u ; op1:x29; op2:x30; dest:x28; op1val:0xaaaaaaaa;  op2val:0xfdffffff
TEST_PKRR_OP(kmmwb2.u, x28, x29, x30, 0x00000000, 0xaaaaaaaa, 0xfdffffff, x29, x2, 72, x3)

inst_10:
// rs1==x9, rs2==x11, rd==x0, rs2_h1_val == -257, 
// opcode: kmmwb2.u ; op1:x9; op2:x11; dest:x0; op1val:0x020000;  op2val:0xfefffffa
TEST_PKRR_OP(kmmwb2.u, x0, x9, x11, 0x00000000, 0x020000, 0xfefffffa, x9, x2, 80, x3)

inst_11:
// rs1==x17, rs2==x28, rd==x18, rs2_h1_val == -129, rs1_w0_val == 256
// opcode: kmmwb2.u ; op1:x17; op2:x28; dest:x18; op1val:0x000100;  op2val:0xff7ffffd
TEST_PKRR_OP(kmmwb2.u, x18, x17, x28, 0x00000000, 0x000100, 0xff7ffffd, x17, x2, 88, x3)

inst_12:
// rs1==x23, rs2==x5, rd==x25, rs2_h1_val == -65, 
// opcode: kmmwb2.u ; op1:x23; op2:x5; dest:x25; op1val:0xc0000000;  op2val:0xffbfffdf
TEST_PKRR_OP(kmmwb2.u, x25, x23, x5, 0x00000000, 0xc0000000, 0xffbfffdf, x23, x2, 96, x3)

inst_13:
// rs1==x8, rs2==x31, rd==x9, rs2_h1_val == -33, rs2_h0_val == -16385
// opcode: kmmwb2.u ; op1:x8; op2:x31; dest:x9; op1val:0x000009;  op2val:0xffdfbfff
TEST_PKRR_OP(kmmwb2.u, x9, x8, x31, 0x00000000, 0x000009, 0xffdfbfff, x8, x2, 104, x15)

inst_14:
// rs1==x11, rs2==x17, rd==x4, rs2_h1_val == -17, rs1_w0_val == 1
// opcode: kmmwb2.u ; op1:x11; op2:x17; dest:x4; op1val:0x000001;  op2val:0xffefffdf
TEST_PKRR_OP(kmmwb2.u, x4, x11, x17, 0x00000000, 0x000001, 0xffefffdf, x11, x2, 112, x15)

inst_15:
// rs1==x22, rs2==x21, rd==x11, rs2_h1_val == -9, 
// opcode: kmmwb2.u ; op1:x22; op2:x21; dest:x11; op1val:0x000007;  op2val:0xfff70009
TEST_PKRR_OP(kmmwb2.u, x11, x22, x21, 0x00000000, 0x000007, 0xfff70009, x22, x2, 120, x15)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_16:
// rs1==x4, rs2==x2, rd==x10, rs2_h1_val == -5, rs1_w0_val == -9
// opcode: kmmwb2.u ; op1:x4; op2:x2; dest:x10; op1val:0xfffffff7;  op2val:0xfffbffdf
TEST_PKRR_OP(kmmwb2.u, x10, x4, x2, 0x00000000, 0xfffffff7, 0xfffbffdf, x4, x11, 0, x15)

inst_17:
// rs1==x7, rs2==x9, rd==x17, rs2_h1_val == -3, rs2_h0_val == -65, rs1_w0_val == -1073741825
// opcode: kmmwb2.u ; op1:x7; op2:x9; dest:x17; op1val:0xbfffffff;  op2val:0xfffdffbf
TEST_PKRR_OP(kmmwb2.u, x17, x7, x9, 0x00000000, 0xbfffffff, 0xfffdffbf, x7, x11, 8, x15)

inst_18:
// rs1==x16, rs2==x0, rd==x27, rs2_h1_val == -2, rs2_h0_val == -2049
// opcode: kmmwb2.u ; op1:x16; op2:x0; dest:x27; op1val:0x000007;  op2val:0xfffef7ff
TEST_PKRR_OP(kmmwb2.u, x27, x16, x0, 0x00000000, 0x000007, 0xfffef7ff, x16, x11, 16, x15)

inst_19:
// rs1==x12, rs2==x6, rd==x13, rs2_h1_val == 16384, rs1_w0_val == -65, rs2_h0_val == -5
// opcode: kmmwb2.u ; op1:x12; op2:x6; dest:x13; op1val:0xffffffbf;  op2val:0x4000fffb
TEST_PKRR_OP(kmmwb2.u, x13, x12, x6, 0x00000000, 0xffffffbf, 0x4000fffb, x12, x11, 24, x15)

inst_20:
// rs1==x0, rs2==x22, rd==x19, rs2_h1_val == 8192, 
// opcode: kmmwb2.u ; op1:x0; op2:x22; dest:x19; op1val:0xffbfffff;  op2val:0x2000fff6
TEST_PKRR_OP(kmmwb2.u, x19, x0, x22, 0x00000000, 0xffbfffff, 0x2000fff6, x0, x11, 32, x15)

inst_21:
// rs1==x30, rs2==x27, rd==x8, rs2_h1_val == 4096, rs1_w0_val == 2048
// opcode: kmmwb2.u ; op1:x30; op2:x27; dest:x8; op1val:0x000800;  op2val:0x1000ff7f
TEST_PKRR_OP(kmmwb2.u, x8, x30, x27, 0x00000000, 0x000800, 0x1000ff7f, x30, x11, 40, x15)

inst_22:
// rs1==x3, rs2==x18, rd==x2, rs2_h1_val == 2048, 
// opcode: kmmwb2.u ; op1:x3; op2:x18; dest:x2; op1val:0xfffffff7;  op2val:0x800fffd
TEST_PKRR_OP(kmmwb2.u, x2, x3, x18, 0x00000000, 0xfffffff7, 0x800fffd, x3, x11, 48, x15)

inst_23:
// rs1==x19, rs2==x3, rd==x30, rs2_h1_val == 1024, rs1_w0_val == 512, rs2_h0_val == -1025
// opcode: kmmwb2.u ; op1:x19; op2:x3; dest:x30; op1val:0x000200;  op2val:0x400fbff
TEST_PKRR_OP(kmmwb2.u, x30, x19, x3, 0x00000000, 0x000200, 0x400fbff, x19, x11, 56, x15)

inst_24:
// rs1==x31, rs2==x16, rd==x21, rs2_h1_val == 512, rs2_h0_val == -4097
// opcode: kmmwb2.u ; op1:x31; op2:x16; dest:x21; op1val:0x000006;  op2val:0x200efff
TEST_PKRR_OP(kmmwb2.u, x21, x31, x16, 0x00000000, 0x000006, 0x200efff, x31, x11, 64, x15)

inst_25:
// rs1==x28, rs2==x7, rd==x3, rs2_h1_val == 256, rs1_w0_val == 8388608, rs2_h0_val == 1
// opcode: kmmwb2.u ; op1:x28; op2:x7; dest:x3; op1val:0x800000;  op2val:0x1000001
TEST_PKRR_OP(kmmwb2.u, x3, x28, x7, 0x00000000, 0x800000, 0x1000001, x28, x11, 72, x15)

inst_26:
// rs1==x2, rs2==x12, rd==x1, rs2_h1_val == 128, rs1_w0_val == -513
// opcode: kmmwb2.u ; op1:x2; op2:x12; dest:x1; op1val:0xfffffdff;  op2val:0x80efff
TEST_PKRR_OP(kmmwb2.u, x1, x2, x12, 0x00000000, 0xfffffdff, 0x80efff, x2, x11, 80, x15)

inst_27:
// rs1==x13, rs2==x10, rd==x24, rs2_h1_val == 64, rs1_w0_val == -1025, rs2_h0_val == -8193
// opcode: kmmwb2.u ; op1:x13; op2:x10; dest:x24; op1val:0xfffffbff;  op2val:0x40dfff
TEST_PKRR_OP(kmmwb2.u, x24, x13, x10, 0x00000000, 0xfffffbff, 0x40dfff, x13, x11, 88, x15)

inst_28:
// rs1==x14, rs2==x26, rd==x20, rs2_h1_val == 32, rs1_w0_val == 16384
// opcode: kmmwb2.u ; op1:x14; op2:x26; dest:x20; op1val:0x004000;  op2val:0x20ff7f
TEST_PKRR_OP(kmmwb2.u, x20, x14, x26, 0x00000000, 0x004000, 0x20ff7f, x14, x11, 96, x15)

inst_29:
// rs1==x5, rs2==x19, rd==x22, rs2_h1_val == 16, rs1_w0_val == 8, rs2_h0_val == 256
// opcode: kmmwb2.u ; op1:x5; op2:x19; dest:x22; op1val:0x000008;  op2val:0x100100
TEST_PKRR_OP(kmmwb2.u, x22, x5, x19, 0x00000000, 0x000008, 0x100100, x5, x11, 104, x15)

inst_30:
// rs1==x6, rs2==x20, rd==x5, rs2_h1_val == 8, rs2_h0_val == 8192, rs1_w0_val == 4
// opcode: kmmwb2.u ; op1:x6; op2:x20; dest:x5; op1val:0x000004;  op2val:0x082000
TEST_PKRR_OP(kmmwb2.u, x5, x6, x20, 0x00000000, 0x000004, 0x082000, x6, x11, 112, x2)

inst_31:
// rs1==x20, rs2==x24, rd==x23, rs2_h1_val == 4, 
// opcode: kmmwb2.u ; op1:x20; op2:x24; dest:x23; op1val:0xfffffbff;  op2val:0x040100
TEST_PKRR_OP(kmmwb2.u, x23, x20, x24, 0x00000000, 0xfffffbff, 0x040100, x20, x11, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h1_val == 2, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0x02fffb
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xbfffffff, 0x02fffb, x30, x1, 0, x2)

inst_33:
// rs2_h1_val == 1, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa;  op2val:0x01ff7f
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffffffa, 0x01ff7f, x30, x1, 8, x2)

inst_34:
// rs2_h1_val == 0, rs1_w0_val == 32
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020;  op2val:0x00fff9
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000020, 0x00fff9, x30, x1, 16, x2)

inst_35:
// rs2_h1_val == -1, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xffff2000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffdfffff, 0xffff2000, x30, x1, 24, x2)

inst_36:
// rs2_h0_val == -21846, rs1_w0_val == -67108865
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0x03aaaa
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfbffffff, 0x03aaaa, x30, x1, 32, x2)

inst_37:
// rs1_w0_val == 128, rs2_h0_val == -9
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080;  op2val:0x8000fff7
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000080, 0x8000fff7, x30, x1, 40, x2)

inst_38:
// rs1_w0_val == 64, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040;  op2val:0xfdff3fff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000040, 0xfdff3fff, x30, x1, 48, x2)

inst_39:
// rs1_w0_val == 16, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0xefffffdf
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000010, 0xefffffdf, x30, x1, 56, x2)

inst_40:
// rs1_w0_val == 2, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000002;  op2val:0x3fffff7f
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000002, 0x3fffff7f, x30, x1, 64, x2)

inst_41:
// rs1_w0_val == 0, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000;  op2val:0xc000fff6
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000000, 0xc000fff6, x30, x1, 72, x2)

inst_42:
// rs1_w0_val == -1, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffcfffc
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffcfffc, x30, x1, 80, x2)

inst_43:
// rs2_h0_val == 21845, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020;  op2val:0xf7ff5555
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000020, 0xf7ff5555, x30, x1, 88, x2)

inst_44:
// rs2_h0_val == 32767, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100;  op2val:0xfeff7fff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000100, 0xfeff7fff, x30, x1, 96, x2)

inst_45:
// rs2_h0_val == -513, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0xf7fffdff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffffffd, 0xf7fffdff, x30, x1, 104, x2)

inst_46:
// rs2_h0_val == -257, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000003;  op2val:0xeffffeff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000003, 0xeffffeff, x30, x1, 112, x2)

inst_47:
// rs2_h0_val == -17, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000;  op2val:0xfeffffef
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x004000, 0xfeffffef, x30, x1, 120, x2)

inst_48:
// rs2_h0_val == 16384, rs1_w0_val == 1431655765
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xffdf4000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x55555555, 0xffdf4000, x30, x1, 128, x2)

inst_49:
// rs2_h0_val == 4096, rs1_w0_val == 268435456
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xfffc1000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x10000000, 0xfffc1000, x30, x1, 136, x2)

inst_50:
// rs2_h0_val == 2048, rs1_w0_val == -262145
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0x55550800
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffbffff, 0x55550800, x30, x1, 144, x2)

inst_51:
// rs2_h0_val == 1024, rs1_w0_val == -129
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0x010400
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffff7f, 0x010400, x30, x1, 152, x2)

inst_52:
// rs2_h0_val == 512, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xfffa0200
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xfffa0200, x30, x1, 160, x2)

inst_53:
// rs2_h0_val == 128, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x4000080
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x40000000, 0x4000080, x30, x1, 168, x2)

inst_54:
// rs2_h0_val == 64, rs1_w0_val == 33554432
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x100040
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x2000000, 0x100040, x30, x1, 176, x2)

inst_55:
// rs2_h0_val == 32, rs1_w0_val == 32768
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000;  op2val:0xaaaa0020
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x008000, 0xaaaa0020, x30, x1, 184, x2)

inst_56:
// rs2_h0_val == 16, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0xfff70010
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000004, 0xfff70010, x30, x1, 192, x2)

inst_57:
// rs2_h0_val == 4, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x10000004
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x55555555, 0x10000004, x30, x1, 200, x2)

inst_58:
// rs2_h0_val == 2, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100;  op2val:0x3fff0002
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000100, 0x3fff0002, x30, x1, 208, x2)

inst_59:
// rs2_h0_val == 0, rs1_w0_val == -4097
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0xff7f0000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffefff, 0xff7f0000, x30, x1, 216, x2)

inst_60:
// rs1_w0_val == 2147483647, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xdfffffdf
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x7fffffff, 0xdfffffdf, x30, x1, 224, x2)

inst_61:
// rs1_w0_val == -536870913, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0x100009
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xdfffffff, 0x100009, x30, x1, 232, x2)

inst_62:
// rs1_w0_val == -268435457, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xfdfffff9
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xefffffff, 0xfdfffff9, x30, x1, 240, x2)

inst_63:
// rs1_w0_val == -134217729, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0x3fffaaaa
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xf7ffffff, 0x3fffaaaa, x30, x1, 248, x2)

inst_64:
// rs1_w0_val == -33554433, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0x09fffc
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfdffffff, 0x09fffc, x30, x1, 256, x2)

inst_65:
// rs1_w0_val == -16777217, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0x7fffffff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfeffffff, 0x7fffffff, x30, x1, 264, x2)

inst_66:
// rs1_w0_val == -8388609, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0xaaaadfff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xff7fffff, 0xaaaadfff, x30, x1, 272, x2)

inst_67:
// rs1_w0_val == -1048577, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0xfff80800
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffefffff, 0xfff80800, x30, x1, 280, x2)

inst_68:
// rs1_w0_val == -524289, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0x8000efff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfff7ffff, 0x8000efff, x30, x1, 288, x2)

inst_69:
// rs1_w0_val == -131073, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0xefff0005
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffdffff, 0xefff0005, x30, x1, 296, x2)

inst_70:
// rs1_w0_val == -65537, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0x038000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffeffff, 0x038000, x30, x1, 304, x2)

inst_71:
// rs1_w0_val == -32769, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xfeff8000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffff7fff, 0xfeff8000, x30, x1, 312, x2)

inst_72:
// rs1_w0_val == -16385, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0x5555feff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffbfff, 0x5555feff, x30, x1, 320, x2)

inst_73:
// rs1_w0_val == -8193, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xbffffeff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffdfff, 0xbffffeff, x30, x1, 328, x2)

inst_74:
// rs1_w0_val == -2049, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:0xfff90800
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffff7ff, 0xfff90800, x30, x1, 336, x2)

inst_75:
// rs1_w0_val == -33, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x55550002
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffffdf, 0x55550002, x30, x1, 344, x2)

inst_76:
// rs1_w0_val == -17, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xbfff0000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffffffef, 0xbfff0000, x30, x1, 352, x2)

inst_77:
// rs1_w0_val == -5, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xfbff3fff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffffffb, 0xfbff3fff, x30, x1, 360, x2)

inst_78:
// rs1_w0_val == -2, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0xfbffffff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xfffffffe, 0xfbffffff, x30, x1, 368, x2)

inst_79:
// rs1_w0_val == 536870912, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x10f7ff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x20000000, 0x10f7ff, x30, x1, 376, x2)

inst_80:
// rs1_w0_val == 134217728, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffbfdfff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x8000000, 0xffbfdfff, x30, x1, 384, x2)

inst_81:
// rs1_w0_val == 67108864, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xc000ff7f
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x4000000, 0xc000ff7f, x30, x1, 392, x2)

inst_82:
// rs1_w0_val == 16777216, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0x805555
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x1000000, 0x805555, x30, x1, 400, x2)

inst_83:
// rs1_w0_val == 4194304, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0x200dfff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x400000, 0x200dfff, x30, x1, 408, x2)

inst_84:
// rs1_w0_val == 1048576, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xfffcffef
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x100000, 0xfffcffef, x30, x1, 416, x2)

inst_85:
// rs1_w0_val == 524288, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000;  op2val:0x7fff0100
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x080000, 0x7fff0100, x30, x1, 424, x2)

inst_86:
// rs1_w0_val == 262144, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000;  op2val:0xdffffffb
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x040000, 0xdffffffb, x30, x1, 432, x2)

inst_87:
// rs1_w0_val == 65536, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0x200fffd
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x010000, 0x200fffd, x30, x1, 440, x2)

inst_88:
// rs1_w0_val == 8192, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0x55554000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x002000, 0x55554000, x30, x1, 448, x2)

inst_89:
// rs1_w0_val == 4096, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000;  op2val:0xfdff7fff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x001000, 0xfdff7fff, x30, x1, 456, x2)

inst_90:
// rs1_w0_val == 1024, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000400;  op2val:0xdfffffbf
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000400, 0xdfffffbf, x30, x1, 464, x2)

inst_91:
// rs2_h1_val == -21846, rs1_w0_val == 2097152, rs2_h0_val == -32768
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xaaaa8000
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x200000, 0xaaaa8000, x30, x1, 472, x2)

inst_92:
// rs2_h1_val == 32767, rs1_w0_val == 131072, rs2_h0_val == -129
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000;  op2val:0x7fffff7f
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x020000, 0x7fffff7f, x30, x1, 480, x2)

inst_93:
// rs2_h1_val == -2, rs2_h0_val == -2049
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007;  op2val:0xfffef7ff
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0x000007, 0xfffef7ff, x30, x1, 488, x2)

inst_94:
// rs2_h1_val == 8192, 
// opcode: kmmwb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0x2000fff6
TEST_PKRR_OP(kmmwb2.u, x31, x30, x29, 0x00000000, 0xffbfffff, 0x2000fff6, x30, x1, 496, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 126*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
