
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll16 instruction of the RISC-V RV32PZicsr extension for the sll16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sll16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x18, rd==x19, rs2_val == 5, rs1_h0_val == 65471
// opcode: sll16 ; op1:x13; op2:x18; dest:x19; op1val:0x0effbf;  op2val:0x5
TEST_RR_OP(sll16, x19, x13, x18, 0x00000000, 0x0effbf, 0x5, x7, 0, x23)

inst_1:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x2, rs2_val == 7, rs1_h1_val == 0
// opcode: sll16 ; op1:x20; op2:x20; dest:x2; op1val:0x00000c;  op2val:0x7
TEST_RR_OP(sll16, x2, x20, x20, 0x00000000, 0x00000c, 0x7, x7, 4, x23)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x2, rd==x16, rs2_val == 11, rs1_h1_val == 64511, rs1_h0_val == 64
// opcode: sll16 ; op1:x16; op2:x2; dest:x16; op1val:0xfbff0040;  op2val:0xb
TEST_RR_OP(sll16, x16, x16, x2, 0x00000000, 0xfbff0040, 0xb, x7, 8, x23)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_val == 13, rs1_h0_val == 1, rs1_h1_val == 65527
// opcode: sll16 ; op1:x22; op2:x22; dest:x22; op1val:0xfff70001;  op2val:0xd
TEST_RR_OP(sll16, x22, x22, x22, 0x00000000, 0xfff70001, 0xd, x7, 12, x23)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x3, rd==x3, rs2_val == 14, rs1_h0_val == 65535
// opcode: sll16 ; op1:x11; op2:x3; dest:x3; op1val:0x00ffff;  op2val:0xe
TEST_RR_OP(sll16, x3, x11, x3, 0x00000000, 0x00ffff, 0xe, x7, 16, x23)

inst_5:
// rs1==x21, rs2==x30, rd==x9, rs2_val == 8, rs1_h0_val == 16
// opcode: sll16 ; op1:x21; op2:x30; dest:x9; op1val:0x000010;  op2val:0x8
TEST_RR_OP(sll16, x9, x21, x30, 0x00000000, 0x000010, 0x8, x7, 20, x23)

inst_6:
// rs1==x25, rs2==x21, rd==x15, rs2_val == 4, rs1_h1_val == 43690, rs1_h0_val == 256
// opcode: sll16 ; op1:x25; op2:x21; dest:x15; op1val:0xaaaa0100;  op2val:0x4
TEST_RR_OP(sll16, x15, x25, x21, 0x00000000, 0xaaaa0100, 0x4, x7, 24, x23)

inst_7:
// rs1==x15, rs2==x1, rd==x26, rs2_val == 2, rs1_h1_val == 8
// opcode: sll16 ; op1:x15; op2:x1; dest:x26; op1val:0x080005;  op2val:0x2
TEST_RR_OP(sll16, x26, x15, x1, 0x00000000, 0x080005, 0x2, x7, 28, x23)

inst_8:
// rs1==x10, rs2==x4, rd==x28, rs2_val == 1, 
// opcode: sll16 ; op1:x10; op2:x4; dest:x28; op1val:0xfbff0011;  op2val:0x1
TEST_RR_OP(sll16, x28, x10, x4, 0x00000000, 0xfbff0011, 0x1, x7, 32, x23)

inst_9:
// rs1==x31, rs2==x11, rd==x21, rs1_h1_val == 21845, 
// opcode: sll16 ; op1:x31; op2:x11; dest:x21; op1val:0x55550010;  op2val:0x12
TEST_RR_OP(sll16, x21, x31, x11, 0x00000000, 0x55550010, 0x12, x7, 36, x23)

inst_10:
// rs1==x26, rs2==x14, rd==x6, rs1_h1_val == 32767, 
// opcode: sll16 ; op1:x26; op2:x14; dest:x6; op1val:0x7fff0010;  op2val:0x3
TEST_RR_OP(sll16, x6, x26, x14, 0x00000000, 0x7fff0010, 0x3, x7, 40, x23)

inst_11:
// rs1==x4, rs2==x31, rd==x12, rs1_h1_val == 49151, 
// opcode: sll16 ; op1:x4; op2:x31; dest:x12; op1val:0xbfff0007;  op2val:0xe
TEST_RR_OP(sll16, x12, x4, x31, 0x00000000, 0xbfff0007, 0xe, x7, 44, x23)

inst_12:
// rs1==x18, rs2==x13, rd==x30, rs1_h1_val == 57343, 
// opcode: sll16 ; op1:x18; op2:x13; dest:x30; op1val:0xdfff0005;  op2val:0x3
TEST_RR_OP(sll16, x30, x18, x13, 0x00000000, 0xdfff0005, 0x3, x7, 48, x23)

inst_13:
// rs1==x17, rs2==x5, rd==x10, rs1_h1_val == 61439, rs1_h0_val == 65533
// opcode: sll16 ; op1:x17; op2:x5; dest:x10; op1val:0xeffffffd;  op2val:0xe
TEST_RR_OP(sll16, x10, x17, x5, 0x00000000, 0xeffffffd, 0xe, x7, 52, x23)

inst_14:
// rs1==x24, rs2==x10, rd==x8, rs1_h1_val == 63487, rs1_h0_val == 65531
// opcode: sll16 ; op1:x24; op2:x10; dest:x8; op1val:0xf7fffffb;  op2val:0xf
TEST_RR_OP(sll16, x8, x24, x10, 0x00000000, 0xf7fffffb, 0xf, x7, 56, x23)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_15:
// rs1==x2, rs2==x6, rd==x0, rs1_h1_val == 65023, rs1_h0_val == 65023
// opcode: sll16 ; op1:x2; op2:x6; dest:x0; op1val:0xfdfffdff;  op2val:0x7
TEST_RR_OP(sll16, x0, x2, x6, 0x00000000, 0xfdfffdff, 0x7, x10, 0, x13)

inst_16:
// rs1==x0, rs2==x16, rd==x14, rs1_h1_val == 65279, 
// opcode: sll16 ; op1:x0; op2:x16; dest:x14; op1val:0xfeff0007;  op2val:0x2
TEST_RR_OP(sll16, x14, x0, x16, 0x00000000, 0xfeff0007, 0x2, x10, 4, x13)

inst_17:
// rs1==x3, rs2==x28, rd==x24, rs1_h1_val == 65407, 
// opcode: sll16 ; op1:x3; op2:x28; dest:x24; op1val:0xff7ffdff;  op2val:0x11
TEST_RR_OP(sll16, x24, x3, x28, 0x00000000, 0xff7ffdff, 0x11, x10, 8, x13)

inst_18:
// rs1==x23, rs2==x26, rd==x11, rs1_h1_val == 65471, 
// opcode: sll16 ; op1:x23; op2:x26; dest:x11; op1val:0xffbffdff;  op2val:0x9
TEST_RR_OP(sll16, x11, x23, x26, 0x00000000, 0xffbffdff, 0x9, x10, 12, x13)

inst_19:
// rs1==x7, rs2==x23, rd==x1, rs1_h1_val == 65503, rs1_h0_val == 65279
// opcode: sll16 ; op1:x7; op2:x23; dest:x1; op1val:0xffdffeff;  op2val:0x7
TEST_RR_OP(sll16, x1, x7, x23, 0x00000000, 0xffdffeff, 0x7, x10, 16, x13)

inst_20:
// rs1==x19, rs2==x8, rd==x18, rs1_h1_val == 65519, 
// opcode: sll16 ; op1:x19; op2:x8; dest:x18; op1val:0xffeffffd;  op2val:0xb
TEST_RR_OP(sll16, x18, x19, x8, 0x00000000, 0xffeffffd, 0xb, x10, 20, x13)

inst_21:
// rs1==x27, rs2==x15, rd==x17, rs1_h1_val == 65531, 
// opcode: sll16 ; op1:x27; op2:x15; dest:x17; op1val:0xfffb0007;  op2val:0x1
TEST_RR_OP(sll16, x17, x27, x15, 0x00000000, 0xfffb0007, 0x1, x10, 24, x13)

inst_22:
// rs1==x8, rs2==x25, rd==x29, rs1_h1_val == 65533, 
// opcode: sll16 ; op1:x8; op2:x25; dest:x29; op1val:0xfffd000d;  op2val:0x5
TEST_RR_OP(sll16, x29, x8, x25, 0x00000000, 0xfffd000d, 0x5, x10, 28, x13)

inst_23:
// rs1==x9, rs2==x27, rd==x4, rs1_h1_val == 65534, 
// opcode: sll16 ; op1:x9; op2:x27; dest:x4; op1val:0xfffe000b;  op2val:0x5
TEST_RR_OP(sll16, x4, x9, x27, 0x00000000, 0xfffe000b, 0x5, x10, 32, x13)

inst_24:
// rs1==x28, rs2==x7, rd==x23, rs1_h1_val == 32768, rs1_h0_val == 57343
// opcode: sll16 ; op1:x28; op2:x7; dest:x23; op1val:0x8000dfff;  op2val:0x10
TEST_RR_OP(sll16, x23, x28, x7, 0x00000000, 0x8000dfff, 0x10, x10, 36, x13)

inst_25:
// rs1==x1, rs2==x24, rd==x5, rs1_h1_val == 16384, 
// opcode: sll16 ; op1:x1; op2:x24; dest:x5; op1val:0x40000001;  op2val:0xb
TEST_RR_OP(sll16, x5, x1, x24, 0x00000000, 0x40000001, 0xb, x10, 40, x13)

inst_26:
// rs1==x29, rs2==x17, rd==x25, rs1_h1_val == 8192, 
// opcode: sll16 ; op1:x29; op2:x17; dest:x25; op1val:0x20000005;  op2val:0x6
TEST_RR_OP(sll16, x25, x29, x17, 0x00000000, 0x20000005, 0x6, x10, 44, x13)

inst_27:
// rs1==x5, rs2==x9, rd==x7, rs1_h1_val == 4096, 
// opcode: sll16 ; op1:x5; op2:x9; dest:x7; op1val:0x1000fffb;  op2val:0x7
TEST_RR_OP(sll16, x7, x5, x9, 0x00000000, 0x1000fffb, 0x7, x10, 48, x13)

inst_28:
// rs1==x30, rs2==x12, rd==x20, rs1_h1_val == 2048, rs2_val == 10, rs1_h0_val == 1024
// opcode: sll16 ; op1:x30; op2:x12; dest:x20; op1val:0x8000400;  op2val:0xa
TEST_RR_OP(sll16, x20, x30, x12, 0x00000000, 0x8000400, 0xa, x10, 52, x13)

inst_29:
// rs1==x6, rs2==x29, rd==x27, rs1_h1_val == 1024, 
// opcode: sll16 ; op1:x6; op2:x29; dest:x27; op1val:0x400000a;  op2val:0xf
TEST_RR_OP(sll16, x27, x6, x29, 0x00000000, 0x400000a, 0xf, x10, 56, x2)

inst_30:
// rs1==x12, rs2==x0, rd==x13, rs1_h1_val == 512, rs1_h0_val == 65503
// opcode: sll16 ; op1:x12; op2:x0; dest:x13; op1val:0x200ffdf;  op2val:0x0
TEST_RR_OP(sll16, x13, x12, x0, 0x00000000, 0x200ffdf, 0x0, x10, 60, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x14, rs2==x19, rd==x31, rs1_h1_val == 256, 
// opcode: sll16 ; op1:x14; op2:x19; dest:x31; op1val:0x1000003;  op2val:0xd
TEST_RR_OP(sll16, x31, x14, x19, 0x00000000, 0x1000003, 0xd, x1, 0, x2)

inst_32:
// rs1_h0_val == 16384, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x004000;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x004000, 0xd, x1, 4, x2)

inst_33:
// rs1_h0_val == 8192, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff2000;  op2val:0x8
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xefff2000, 0x8, x1, 8, x2)

inst_34:
// rs1_h0_val == 4096, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff1000;  op2val:0xf
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xfdff1000, 0xf, x1, 12, x2)

inst_35:
// rs1_h0_val == 2048, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0800;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xf7ff0800, 0xd, x1, 16, x2)

inst_36:
// rs1_h0_val == 512, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0200;  op2val:0xa
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xfffd0200, 0xa, x1, 20, x2)

inst_37:
// rs1_h0_val == 128, rs1_h1_val == 32
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080;  op2val:0xc
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x200080, 0xc, x1, 24, x2)

inst_38:
// rs1_h0_val == 32, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000020;  op2val:0x0
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x40000020, 0x0, x1, 28, x2)

inst_39:
// rs1_h0_val == 8, rs1_h1_val == 1
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x010008;  op2val:0xb
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x010008, 0xb, x1, 32, x2)

inst_40:
// rs1_h0_val == 4, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0004;  op2val:0x12
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xaaaa0004, 0x12, x1, 36, x2)

inst_41:
// rs1_h0_val == 2, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002;  op2val:0x3
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xffbf0002, 0x3, x1, 40, x2)

inst_42:
// rs1_h0_val == 0, rs1_h1_val == 65535
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0000;  op2val:0x13
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xffff0000, 0x13, x1, 44, x2)

inst_43:
// rs1_h1_val == 128, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x800011;  op2val:0x10
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x800011, 0x10, x1, 48, x2)

inst_44:
// rs1_h1_val == 64, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000e;  op2val:0x3
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x40000e, 0x3, x1, 52, x2)

inst_45:
// rs1_h1_val == 16, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffff;  op2val:0x13
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x10ffff, 0x13, x1, 56, x2)

inst_46:
// rs1_h1_val == 4, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x040008;  op2val:0x7
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x040008, 0x7, x1, 60, x2)

inst_47:
// rs1_h1_val == 2, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x020012;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x020012, 0xd, x1, 64, x2)

inst_48:
// rs1_h0_val == 43690, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x100aaaa;  op2val:0x6
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x100aaaa, 0x6, x1, 68, x2)

inst_49:
// rs1_h0_val == 21845, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x085555;  op2val:0x8
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x085555, 0x8, x1, 72, x2)

inst_50:
// rs1_h0_val == 32767, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f7fff;  op2val:0xb
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x0f7fff, 0xb, x1, 76, x2)

inst_51:
// rs1_h0_val == 49151, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x12bfff;  op2val:0x1
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x12bfff, 0x1, x1, 80, x2)

inst_52:
// rs1_h0_val == 61439, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbefff;  op2val:0xe
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xfffbefff, 0xe, x1, 84, x2)

inst_53:
// rs1_h0_val == 63487, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0df7ff;  op2val:0xf
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x0df7ff, 0xf, x1, 88, x2)

inst_54:
// rs1_h0_val == 64511, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbff;  op2val:0x2
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xf7fffbff, 0x2, x1, 92, x2)

inst_55:
// rs1_h0_val == 65407, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7f;  op2val:0x7
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x4000ff7f, 0x7, x1, 96, x2)

inst_56:
// rs1_h0_val == 65519, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef;  op2val:0x10
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xffbfffef, 0x10, x1, 100, x2)

inst_57:
// rs1_h0_val == 65527, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff7;  op2val:0x9
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x7ffffff7, 0x9, x1, 104, x2)

inst_58:
// rs1_h0_val == 65534, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffe;  op2val:0x3
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xeffffffe, 0x3, x1, 108, x2)

inst_59:
// rs1_h0_val == 32768, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x098000;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x098000, 0x11, x1, 112, x2)

inst_60:
// rs2_val == 13, rs1_h0_val == 1, rs1_h1_val == 65527
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70001;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xfff70001, 0xd, x1, 116, x2)

inst_61:
// rs1_h1_val == 65279, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0007;  op2val:0x2
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0xfeff0007, 0x2, x1, 120, x2)

inst_62:
// rs1_h1_val == 512, rs1_h0_val == 65503
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdf;  op2val:0xf
TEST_RR_OP(sll16, x31, x30, x29, 0x00000000, 0x200ffdf, 0xf, x1, 124, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
