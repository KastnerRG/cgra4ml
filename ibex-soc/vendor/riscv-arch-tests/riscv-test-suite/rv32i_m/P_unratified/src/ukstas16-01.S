
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstas16 instruction of the RISC-V RV32PZicsr extension for the ukstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x16, rd==x28, rs1_h0_val == 0, rs1_h1_val == 57343, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16, rs2_h0_val == 21845
// opcode: ukstas16 ; op1:x7; op2:x16; dest:x28; op1val:0xdfff0000;  op2val:0x105555
TEST_RR_OP(ukstas16, x28, x7, x16, 0x00000000, 0xdfff0000, 0x105555, x2, 0, x6)

inst_1:// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x26, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 65023, rs2_h1_val == 65023
// opcode: ukstas16 ; op1:x31; op2:x31; dest:x26; op1val:0xfdff0007;  op2val:0xfdff2000
TEST_RR_OP(ukstas16, x26, x31, x31, 0x00000000, 0xfdff0007, 0xfdff2000, x2, 8, x6)

inst_2:// rs1 == rd != rs2, rs1==x19, rs2==x0, rd==x19, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == 61439, rs1_h0_val == 256
// opcode: ukstas16 ; op1:x19; op2:x0; dest:x19; op1val:0xefff0100;  op2val:0x0a0100
TEST_RR_OP(ukstas16, x19, x19, x0, 0x00000000, 0xefff0100, 0x0a0100, x2, 16, x6)

inst_3:// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs2_h1_val == 43690, rs2_h0_val == 2, rs1_h0_val == 4096, rs1_h1_val == 256
// opcode: ukstas16 ; op1:x14; op2:x14; dest:x14; op1val:0x1001000;  op2val:0xaaaa0002
TEST_RR_OP(ukstas16, x14, x14, x14, 0x00000000, 0x1001000, 0xaaaa0002, x2, 24, x6)

inst_4:// rs2 == rd != rs1, rs1==x25, rs2==x27, rd==x27, rs2_h1_val == 21845, rs2_h0_val == 65279, rs1_h1_val == 65279
// opcode: ukstas16 ; op1:x25; op2:x27; dest:x27; op1val:0xfeff0000;  op2val:0x5555feff
TEST_RR_OP(ukstas16, x27, x25, x27, 0x00000000, 0xfeff0000, 0x5555feff, x2, 32, x6)

inst_5:// rs1==x28, rs2==x26, rd==x18, rs2_h1_val == 32767, rs2_h0_val == 1, rs1_h0_val == 57343, rs1_h1_val == 43690
// opcode: ukstas16 ; op1:x28; op2:x26; dest:x18; op1val:0xaaaadfff;  op2val:0x7fff0001
TEST_RR_OP(ukstas16, x18, x28, x26, 0x00000000, 0xaaaadfff, 0x7fff0001, x2, 40, x6)

inst_6:// rs1==x29, rs2==x17, rd==x9, rs2_h1_val == 49151, rs1_h0_val == 65533, rs2_h0_val == 65519, rs1_h1_val == 65407
// opcode: ukstas16 ; op1:x29; op2:x17; dest:x9; op1val:0xff7ffffd;  op2val:0xbfffffef
TEST_RR_OP(ukstas16, x9, x29, x17, 0x00000000, 0xff7ffffd, 0xbfffffef, x2, 48, x6)

inst_7:// rs1==x1, rs2==x5, rd==x20, rs2_h1_val == 57343, rs1_h1_val == 512, rs2_h0_val == 4096
// opcode: ukstas16 ; op1:x1; op2:x5; dest:x20; op1val:0x200000c;  op2val:0xdfff1000
TEST_RR_OP(ukstas16, x20, x1, x5, 0x00000000, 0x200000c, 0xdfff1000, x2, 56, x6)

inst_8:// rs1==x0, rs2==x7, rd==x21, rs2_h1_val == 61439, rs2_h0_val == 65531, rs1_h1_val == 16384
// opcode: ukstas16 ; op1:x0; op2:x7; dest:x21; op1val:0x4000000f;  op2val:0xeffffffb
TEST_RR_OP(ukstas16, x21, x0, x7, 0x00000000, 0x4000000f, 0xeffffffb, x2, 64, x6)

inst_9:// rs1==x3, rs2==x8, rd==x4, rs2_h1_val == 63487, rs2_h0_val == 57343, rs1_h0_val == 65527
// opcode: ukstas16 ; op1:x3; op2:x8; dest:x4; op1val:0x07fff7;  op2val:0xf7ffdfff
TEST_RR_OP(ukstas16, x4, x3, x8, 0x00000000, 0x07fff7, 0xf7ffdfff, x2, 72, x6)

inst_10:// rs1==x23, rs2==x12, rd==x25, rs2_h1_val == 64511, rs2_h0_val == 65535, rs1_h1_val == 32767
// opcode: ukstas16 ; op1:x23; op2:x12; dest:x25; op1val:0x7fff0006;  op2val:0xfbffffff
TEST_RR_OP(ukstas16, x25, x23, x12, 0x00000000, 0x7fff0006, 0xfbffffff, x2, 80, x6)

inst_11:// rs1==x8, rs2==x10, rd==x17, rs2_h1_val == 65279, rs2_h0_val == 65407
// opcode: ukstas16 ; op1:x8; op2:x10; dest:x17; op1val:0x0bdfff;  op2val:0xfeffff7f
TEST_RR_OP(ukstas16, x17, x8, x10, 0x00000000, 0x0bdfff, 0xfeffff7f, x2, 88, x6)

inst_12:// rs1==x10, rs2==x22, rd==x11, rs2_h1_val == 65407, rs1_h0_val == 32767, rs1_h1_val == 4
// opcode: ukstas16 ; op1:x10; op2:x22; dest:x11; op1val:0x047fff;  op2val:0xff7fff7f
TEST_RR_OP(ukstas16, x11, x10, x22, 0x00000000, 0x047fff, 0xff7fff7f, x2, 96, x6)

inst_13:// rs1==x11, rs2==x1, rd==x15, rs2_h1_val == 65471, rs1_h0_val == 32768, rs2_h0_val == 64
// opcode: ukstas16 ; op1:x11; op2:x1; dest:x15; op1val:0x0e8000;  op2val:0xffbf0040
TEST_RR_OP(ukstas16, x15, x11, x1, 0x00000000, 0x0e8000, 0xffbf0040, x2, 104, x6)

inst_14:// rs1==x27, rs2==x18, rd==x0, rs2_h1_val == 65503, rs2_h0_val == 65534, rs1_h0_val == 61439
// opcode: ukstas16 ; op1:x27; op2:x18; dest:x0; op1val:0x0defff;  op2val:0xffdffffe
TEST_RR_OP(ukstas16, x0, x27, x18, 0x00000000, 0x0defff, 0xffdffffe, x2, 112, x1)

inst_15:// rs1==x22, rs2==x6, rd==x30, rs2_h1_val == 65519, rs1_h0_val == 4
// opcode: ukstas16 ; op1:x22; op2:x6; dest:x30; op1val:0xfeff0004;  op2val:0xffef0011
TEST_RR_OP(ukstas16, x30, x22, x6, 0x00000000, 0xfeff0004, 0xffef0011, x2, 120, x1)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_16:// rs1==x9, rs2==x25, rd==x23, rs2_h1_val == 65527, rs1_h0_val == 65519, rs1_h1_val == 65535
// opcode: ukstas16 ; op1:x9; op2:x25; dest:x23; op1val:0xffffffef;  op2val:0xfff75555
TEST_RR_OP(ukstas16, x23, x9, x25, 0x00000000, 0xffffffef, 0xfff75555, x11, 0, x1)

inst_17:// rs1==x20, rs2==x13, rd==x8, rs2_h1_val == 65531, rs1_h0_val == 65535
// opcode: ukstas16 ; op1:x20; op2:x13; dest:x8; op1val:0xff7fffff;  op2val:0xfffbff7f
TEST_RR_OP(ukstas16, x8, x20, x13, 0x00000000, 0xff7fffff, 0xfffbff7f, x11, 8, x1)

inst_18:// rs1==x26, rs2==x3, rd==x6, rs2_h1_val == 65533, 
// opcode: ukstas16 ; op1:x26; op2:x3; dest:x6; op1val:0x0b0009;  op2val:0xfffd0009
TEST_RR_OP(ukstas16, x6, x26, x3, 0x00000000, 0x0b0009, 0xfffd0009, x11, 16, x1)

inst_19:// rs1==x17, rs2==x21, rd==x12, rs2_h1_val == 65534, rs1_h1_val == 64
// opcode: ukstas16 ; op1:x17; op2:x21; dest:x12; op1val:0x40000d;  op2val:0xfffe000d
TEST_RR_OP(ukstas16, x12, x17, x21, 0x00000000, 0x40000d, 0xfffe000d, x11, 24, x1)

inst_20:// rs1==x2, rs2==x29, rd==x24, rs2_h1_val == 32768, 
// opcode: ukstas16 ; op1:x2; op2:x29; dest:x24; op1val:0x110003;  op2val:0x80000006
TEST_RR_OP(ukstas16, x24, x2, x29, 0x00000000, 0x110003, 0x80000006, x11, 32, x1)

inst_21:// rs1==x30, rs2==x23, rd==x7, rs2_h1_val == 16384, rs1_h0_val == 65023
// opcode: ukstas16 ; op1:x30; op2:x23; dest:x7; op1val:0xdffffdff;  op2val:0x40000013
TEST_RR_OP(ukstas16, x7, x30, x23, 0x00000000, 0xdffffdff, 0x40000013, x11, 40, x1)

inst_22:// rs1==x5, rs2==x19, rd==x10, rs2_h1_val == 8192, 
// opcode: ukstas16 ; op1:x5; op2:x19; dest:x10; op1val:0xdfff7fff;  op2val:0x2000000d
TEST_RR_OP(ukstas16, x10, x5, x19, 0x00000000, 0xdfff7fff, 0x2000000d, x11, 48, x1)

inst_23:// rs1==x13, rs2==x28, rd==x16, rs2_h1_val == 4096, rs1_h1_val == 21845
// opcode: ukstas16 ; op1:x13; op2:x28; dest:x16; op1val:0x55551000;  op2val:0x10000006
TEST_RR_OP(ukstas16, x16, x13, x28, 0x00000000, 0x55551000, 0x10000006, x11, 56, x1)

inst_24:// rs1==x24, rs2==x2, rd==x31, rs2_h1_val == 2048, rs1_h0_val == 43690, rs1_h1_val == 65519
// opcode: ukstas16 ; op1:x24; op2:x2; dest:x31; op1val:0xffefaaaa;  op2val:0x800fffe
TEST_RR_OP(ukstas16, x31, x24, x2, 0x00000000, 0xffefaaaa, 0x800fffe, x11, 64, x1)

inst_25:// rs1==x12, rs2==x15, rd==x29, rs2_h1_val == 1024, 
// opcode: ukstas16 ; op1:x12; op2:x15; dest:x29; op1val:0x07aaaa;  op2val:0x4000002
TEST_RR_OP(ukstas16, x29, x12, x15, 0x00000000, 0x07aaaa, 0x4000002, x11, 72, x7)

inst_26:// rs1==x15, rs2==x20, rd==x3, rs2_h1_val == 512, 
// opcode: ukstas16 ; op1:x15; op2:x20; dest:x3; op1val:0x55550007;  op2val:0x2000003
TEST_RR_OP(ukstas16, x3, x15, x20, 0x00000000, 0x55550007, 0x2000003, x11, 80, x7)

inst_27:// rs1==x21, rs2==x9, rd==x2, rs2_h1_val == 256, rs2_h0_val == 49151
// opcode: ukstas16 ; op1:x21; op2:x9; dest:x2; op1val:0x7fff000f;  op2val:0x100bfff
TEST_RR_OP(ukstas16, x2, x21, x9, 0x00000000, 0x7fff000f, 0x100bfff, x11, 88, x7)

inst_28:// rs1==x4, rs2==x24, rd==x22, rs2_h1_val == 128, rs1_h1_val == 32
// opcode: ukstas16 ; op1:x4; op2:x24; dest:x22; op1val:0x20ffef;  op2val:0x80dfff
TEST_RR_OP(ukstas16, x22, x4, x24, 0x00000000, 0x20ffef, 0x80dfff, x11, 96, x7)

inst_29:// rs1==x16, rs2==x30, rd==x1, rs2_h1_val == 64, rs1_h1_val == 0, rs2_h0_val == 512
// opcode: ukstas16 ; op1:x16; op2:x30; dest:x1; op1val:0x000000;  op2val:0x400200
TEST_RR_OP(ukstas16, x1, x16, x30, 0x00000000, 0x000000, 0x400200, x11, 104, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:// rs1==x6, rs2==x4, rd==x5, rs2_h1_val == 32, rs1_h0_val == 1024
// opcode: ukstas16 ; op1:x6; op2:x4; dest:x5; op1val:0x070400;  op2val:0x200013
TEST_RR_OP(ukstas16, x5, x6, x4, 0x00000000, 0x070400, 0x200013, x1, 0, x7)

inst_31:// rs1==x18, rs2==x11, rd==x13, rs2_h1_val == 8, 
// opcode: ukstas16 ; op1:x18; op2:x11; dest:x13; op1val:0x2000003;  op2val:0x080005
TEST_RR_OP(ukstas16, x13, x18, x11, 0x00000000, 0x2000003, 0x080005, x1, 8, x7)

inst_32:// rs2_h1_val == 4, rs1_h0_val == 1
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x130001;  op2val:0x04ffef
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x130001, 0x04ffef, x1, 16, x7)

inst_33:// rs2_h1_val == 2, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0001;  op2val:0x020001
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x0b0001, 0x020001, x1, 24, x7)

inst_34:// rs1_h0_val == 65531, rs1_h1_val == 2048
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffb;  op2val:0xfffb1000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x800fffb, 0xfffb1000, x1, 32, x7)

inst_35:// rs1_h0_val == 65534, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffe;  op2val:0x03feff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x40fffe, 0x03feff, x1, 40, x7)

inst_36:// rs1_h0_val == 16384, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff4000;  op2val:0x07000e
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xdfff4000, 0x07000e, x1, 48, x7)

inst_37:// rs1_h0_val == 8192, rs1_h1_val == 65503, rs2_h1_val == 65535
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf2000;  op2val:0xffff0200
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xffdf2000, 0xffff0200, x1, 56, x7)

inst_38:// rs1_h0_val == 2048, rs1_h1_val == 8192, rs2_h0_val == 32768
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000800;  op2val:0xfbff8000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x20000800, 0xfbff8000, x1, 64, x7)

inst_39:// rs1_h0_val == 512, rs2_h0_val == 128
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0200;  op2val:0xff7f0080
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xffff0200, 0xff7f0080, x1, 72, x7)

inst_40:// rs1_h0_val == 128, rs2_h0_val == 65527
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080;  op2val:0x1000fff7
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfdff0080, 0x1000fff7, x1, 80, x7)

inst_41:// rs1_h0_val == 64, rs2_h0_val == 65503, rs1_h1_val == 32768
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000040;  op2val:0x20ffdf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x80000040, 0x20ffdf, x1, 88, x7)

inst_42:// rs1_h0_val == 32, rs2_h0_val == 1024, rs2_h1_val == 1
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020;  op2val:0x010400
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x20000020, 0x010400, x1, 96, x7)

inst_43:// rs1_h0_val == 16, rs1_h1_val == 65527
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70010;  op2val:0x105555
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfff70010, 0x105555, x1, 104, x7)

inst_44:// rs1_h0_val == 8, rs2_h0_val == 65023, rs1_h1_val == 65534
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0xf7fffdff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfffe0008, 0xf7fffdff, x1, 112, x7)

inst_45:// rs1_h0_val == 2, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0002;  op2val:0x010400
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xffdf0002, 0x010400, x1, 120, x7)

inst_46:// rs2_h1_val == 0, rs2_h0_val == 16384
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0x004000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x7fff0400, 0x004000, x1, 128, x7)

inst_47:// rs2_h0_val == 43690, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0040;  op2val:0x0faaaa
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfdff0040, 0x0faaaa, x1, 136, x7)

inst_48:// rs2_h0_val == 32767, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x040004;  op2val:0x807fff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x040004, 0x807fff, x1, 144, x7)

inst_49:// rs2_h0_val == 61439, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000c;  op2val:0x01efff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x8000000c, 0x01efff, x1, 152, x7)

inst_50:// rs2_h0_val == 32, rs1_h1_val == 16
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000d;  op2val:0xf7ff0020
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x10000d, 0xf7ff0020, x1, 160, x7)

inst_51:// rs2_h0_val == 16, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x040004;  op2val:0x000010
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x040004, 0x000010, x1, 168, x7)

inst_52:// rs2_h0_val == 8, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002;  op2val:0x40000008
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x7fff0002, 0x40000008, x1, 176, x7)

inst_53:// rs2_h0_val == 4, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0400;  op2val:0xffef0004
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xefff0400, 0xffef0004, x1, 184, x7)

inst_54:// rs2_h0_val == 0, rs1_h0_val == 65407
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cff7f;  op2val:0x4000000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x0cff7f, 0x4000000, x1, 192, x7)

inst_55:// rs1_h1_val == 49151, rs1_h0_val == 65279
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffeff;  op2val:0xfbff0013
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xbffffeff, 0xfbff0013, x1, 200, x7)

inst_56:// rs1_h1_val == 63487, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff4000;  op2val:0x100003
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xf7ff4000, 0x100003, x1, 208, x7)

inst_57:// rs1_h1_val == 64511, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fff;  op2val:0x0bfffe
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfbff7fff, 0x0bfffe, x1, 216, x7)

inst_58:// rs1_h1_val == 65471, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0400;  op2val:0xffdf1000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xffbf0400, 0xffdf1000, x1, 224, x7)

inst_59:// rs1_h1_val == 65531, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000e;  op2val:0x080004
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfffb000e, 0x080004, x1, 232, x7)

inst_60:// rs1_h1_val == 65533, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0013;  op2val:0x400bfff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfffd0013, 0x400bfff, x1, 240, x7)

inst_61:// rs1_h1_val == 4096, rs1_h0_val == 49151
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff;  op2val:0x020001
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x1000bfff, 0x020001, x1, 248, x7)

inst_62:// rs1_h1_val == 1024, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000f;  op2val:0xbfff7fff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x400000f, 0xbfff7fff, x1, 256, x7)

inst_63:// rs1_h1_val == 128, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80feff;  op2val:0xfbfffeff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x80feff, 0xfbfffeff, x1, 264, x7)

inst_64:// rs1_h1_val == 8, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x080100;  op2val:0xff7f0400
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x080100, 0xff7f0400, x1, 272, x7)

inst_65:// rs1_h1_val == 2, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x020007;  op2val:0x0a7fff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x020007, 0x0a7fff, x1, 280, x7)

inst_66:// rs1_h1_val == 1, rs2_h0_val == 2048
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01000b;  op2val:0x8000800
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x01000b, 0x8000800, x1, 288, x7)

inst_67:// rs2_h0_val == 63487, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0400;  op2val:0x0ff7ff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xf7ff0400, 0x0ff7ff, x1, 296, x7)

inst_68:// rs2_h0_val == 64511, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffef;  op2val:0xfbfffbff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x05ffef, 0xfbfffbff, x1, 304, x7)

inst_69:// rs1_h0_val == 21845, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff75555;  op2val:0x1000005
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfff75555, 0x1000005, x1, 312, x7)

inst_70:// rs2_h0_val == 65471, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x082000;  op2val:0x200ffbf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x082000, 0x200ffbf, x1, 320, x7)

inst_71:// rs1_h0_val == 63487, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffff7ff;  op2val:0x030010
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x7ffff7ff, 0x030010, x1, 328, x7)

inst_72:// rs1_h0_val == 64511, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fbff;  op2val:0x2000fdff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x1000fbff, 0x2000fdff, x1, 336, x7)

inst_73:// rs2_h0_val == 65533, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x120000;  op2val:0x02fffd
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x120000, 0x02fffd, x1, 344, x7)

inst_74:// rs1_h0_val == 65471, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbf;  op2val:0x55550003
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xf7ffffbf, 0x55550003, x1, 352, x7)

inst_75:// rs1_h0_val == 65503, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdf;  op2val:0x08fffb
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfff7ffdf, 0x08fffb, x1, 360, x7)

inst_76:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 65023, rs2_h1_val == 65023
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0007;  op2val:0xfdff2000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xfdff0007, 0xfdff2000, x1, 368, x7)

inst_77:// rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == 61439, rs1_h0_val == 256
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100;  op2val:0x0a0100
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0xefff0100, 0x0a0100, x1, 376, x7)

inst_78:// rs2_h1_val == 43690, rs2_h0_val == 2, rs1_h0_val == 4096, rs1_h1_val == 256
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1001000;  op2val:0xaaaa0002
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x1001000, 0xaaaa0002, x1, 384, x7)

inst_79:// rs2_h1_val == 61439, rs2_h0_val == 65531, rs1_h1_val == 16384
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000f;  op2val:0xeffffffb
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x4000000f, 0xeffffffb, x1, 392, x7)

inst_80:// rs2_h1_val == 65503, rs2_h0_val == 65534, rs1_h0_val == 61439
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0defff;  op2val:0xffdffffe
TEST_RR_OP(ukstas16, x31, x30, x29, 0x00000000, 0x0defff, 0xffdffffe, x1, 400, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 102*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
