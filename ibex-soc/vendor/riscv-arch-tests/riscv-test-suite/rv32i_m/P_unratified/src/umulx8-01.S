
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umulx8 instruction of the RISC-V RV32PZicsr extension for the umulx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umulx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x8, rd==x4, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 128, rs2_b3_val == 239, rs2_b2_val == 0, rs1_b2_val == 254
// opcode: umulx8 ; op1:x25; op2:x8; dest:x4; op1val:0x0dfe8000;  op2val:0xef000509
TEST_P64_PNN_OP(umulx8, x4, x5, x25, x8, 0x00000000, 0, 0x0dfe8000, 0xef000509, x10, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x28, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == 223, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 239, rs1_b2_val == 85, rs1_b0_val == 85
// opcode: umulx8 ; op1:x1; op2:x1; dest:x28; op1val:0x05550a55;  op2val:0x05df0fef
TEST_P64_PNN_OP(umulx8, x28, x29, x1, x1, 0x00000000, 0, 0x05550a55, 0x05df0fef, x10, 8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x20, rs2==x7, rd==x20, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val == 64, rs2_b1_val == 1, rs1_b3_val == 16, rs1_b1_val == 253, rs2_b3_val == 255
// opcode: umulx8 ; op1:x20; op2:x7; dest:x20; op1val:0x100dfd40;  op2val:0xff0d0103
TEST_P64_PNN_OP(umulx8, x20, x21, x20, x7, 0x00000000, 0, 0x100dfd40, 0xff0d0103, x10, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, 
// opcode: umulx8 ; op1:x2; op2:x2; dest:x2; op1val:0x12120e12;  op2val:0x0e0b0e11
TEST_P64_PNN_OP(umulx8, x2, x3, x2, x2, 0x00000000, 0, 0x12120e12, 0x0e0b0e11, x10, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x30, rd==x30, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 4, rs2_b1_val == 255, rs1_b2_val == 64, rs1_b1_val == 127
// opcode: umulx8 ; op1:x23; op2:x30; dest:x30; op1val:0x06407f13;  op2val:0x0412ff13
TEST_P64_PNN_OP(umulx8, x30, x31, x23, x30, 0x00000000, 0, 0x06407f13, 0x0412ff13, x10, 32, x3)

inst_5:
// rs1==x27, rs2==x23, rd==x22, rs2_b3_val == 170, rs1_b1_val == 191, rs1_b3_val == 2, rs2_b2_val == 2, rs2_b0_val == 32, rs1_b0_val == 253
// opcode: umulx8 ; op1:x27; op2:x23; dest:x22; op1val:0x0206bffd;  op2val:0xaa020720
TEST_P64_PNN_OP(umulx8, x22, x23, x27, x23, 0x00000000, 0, 0x0206bffd, 0xaa020720, x10, 40, x3)

inst_6:
// rs1==x9, rs2==x18, rd==x26, rs2_b3_val == 85, rs1_b1_val == 170, rs2_b2_val == 32, rs2_b0_val == 8, rs1_b2_val == 253, rs2_b1_val == 32
// opcode: umulx8 ; op1:x9; op2:x18; dest:x26; op1val:0x12fdaa0c;  op2val:0x55202008
TEST_P64_PNN_OP(umulx8, x26, x27, x9, x18, 0x00000000, 0, 0x12fdaa0c, 0x55202008, x10, 48, x3)

inst_7:
// rs1==x6, rs2==x19, rd==x16, rs2_b3_val == 127, rs1_b3_val == 251, rs1_b1_val == 85, rs2_b1_val == 254, rs1_b0_val == 251, rs1_b2_val == 2
// opcode: umulx8 ; op1:x6; op2:x19; dest:x16; op1val:0xfb0255fb;  op2val:0x7f0dfe07
TEST_P64_PNN_OP(umulx8, x16, x17, x6, x19, 0x00000000, 0, 0xfb0255fb, 0x7f0dfe07, x10, 56, x3)

inst_8:
// rs1==x11, rs2==x15, rd==x12, rs2_b3_val == 191, rs2_b2_val == 191, rs2_b0_val == 16, rs1_b3_val == 0, rs1_b2_val == 128
// opcode: umulx8 ; op1:x11; op2:x15; dest:x12; op1val:0x0080120a;  op2val:0xbfbffe10
TEST_P64_PNN_OP(umulx8, x12, x13, x11, x15, 0x00000000, 0, 0x0080120a, 0xbfbffe10, x10, 64, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_9:
// rs1==x5, rs2==x21, rd==x14, rs2_b3_val == 223, rs2_b1_val == 0, rs1_b3_val == 247
// opcode: umulx8 ; op1:x5; op2:x21; dest:x14; op1val:0xf70b7f11;  op2val:0xdf07000f
TEST_P64_PNN_OP(umulx8, x14, x15, x5, x21, 0x00000000, 0, 0xf70b7f11, 0xdf07000f, x1, 0, x2)

inst_10:
// rs1==x15, rs2==x4, rd==x24, rs2_b3_val == 247, rs1_b2_val == 127, rs2_b1_val == 247, rs1_b0_val == 170, rs2_b2_val == 255
// opcode: umulx8 ; op1:x15; op2:x4; dest:x24; op1val:0x0d7fbfaa;  op2val:0xf7fff709
TEST_P64_PNN_OP(umulx8, x24, x25, x15, x4, 0x00000000, 0, 0x0d7fbfaa, 0xf7fff709, x1, 8, x2)

inst_11:
// rs1==x17, rs2==x14, rd==x6, rs2_b3_val == 251, rs2_b0_val == 64, rs1_b3_val == 170, rs1_b1_val == 64
// opcode: umulx8 ; op1:x17; op2:x14; dest:x6; op1val:0xaa0b4055;  op2val:0xfb02ff40
TEST_P64_PNN_OP(umulx8, x6, x7, x17, x14, 0x00000000, 0, 0xaa0b4055, 0xfb02ff40, x1, 16, x2)

inst_12:
// rs1==x24, rs2==x20, rd==x8, rs2_b3_val == 253, rs2_b0_val == 255
// opcode: umulx8 ; op1:x24; op2:x20; dest:x8; op1val:0x1012110a;  op2val:0xfd020aff
TEST_P64_PNN_OP(umulx8, x8, x9, x24, x20, 0x00000000, 0, 0x1012110a, 0xfd020aff, x1, 24, x2)

inst_13:
// rs1==x12, rs2==x10, rd==x18, rs2_b3_val == 254, rs2_b1_val == 127, rs2_b2_val == 254
// opcode: umulx8 ; op1:x12; op2:x10; dest:x18; op1val:0x1155090d;  op2val:0xfefe7f0b
TEST_P64_PNN_OP(umulx8, x18, x19, x12, x10, 0x00000000, 0, 0x1155090d, 0xfefe7f0b, x1, 32, x2)

inst_14:
// rs1==x0, rs2==x25, rd==x10, rs2_b3_val == 128, rs1_b0_val == 8, rs1_b2_val == 170, rs2_b0_val == 254
// opcode: umulx8 ; op1:x0; op2:x25; dest:x10; op1val:0x0aaa0f08;  op2val:0x80fe20fe
TEST_P64_PNN_OP(umulx8, x10, x11, x0, x25, 0x00000000, 0, 0x0aaa0f08, 0x80fe20fe, x1, 40, x2)

inst_15:
// rs1==x21, rs2==x17, rs2_b3_val == 64, rs2_b1_val == 170, rs2_b2_val == 247, rs1_b3_val == 32
// opcode: umulx8 ; op1:x21; op2:x17; dest:x24; op1val:0x20060f05;  op2val:0x40f7aa40
TEST_P64_PNN_OP(umulx8, x24, x25, x21, x17, 0x00000000, 0, 0x20060f05, 0x40f7aa40, x1, 48, x2)

inst_16:
// rs1==x7, rs2==x31, rs2_b3_val == 32, rs1_b2_val == 32, rs1_b3_val == 254, rs2_b0_val == 253
// opcode: umulx8 ; op1:x7; op2:x31; dest:x10; op1val:0xfe200a55;  op2val:0x201312fd
TEST_P64_PNN_OP(umulx8, x10, x11, x7, x31, 0x00000000, 0, 0xfe200a55, 0x201312fd, x1, 56, x2)

inst_17:
// rs1==x29, rs2==x12, rs2_b3_val == 16, rs1_b3_val == 127, rs2_b2_val == 85, rs1_b1_val == 247
// opcode: umulx8 ; op1:x29; op2:x12; dest:x20; op1val:0x7f0af7fb;  op2val:0x10550013
TEST_P64_PNN_OP(umulx8, x20, x21, x29, x12, 0x00000000, 0, 0x7f0af7fb, 0x10550013, x1, 64, x2)

inst_18:
// rs1==x26, rs2==x24, rs2_b3_val == 8, rs1_b0_val == 2, rs2_b2_val == 64, rs2_b0_val == 4, rs2_b1_val == 239, rs1_b3_val == 223, rs1_b2_val == 1
// opcode: umulx8 ; op1:x26; op2:x24; dest:x8; op1val:0xdf010602;  op2val:0x0840ef04
TEST_P64_PNN_OP(umulx8, x8, x9, x26, x24, 0x00000000, 0, 0xdf010602, 0x0840ef04, x1, 72, x2)

inst_19:
// rs1==x18, rs2==x22, rs2_b3_val == 2, rs1_b1_val == 0, rs2_b2_val == 127
// opcode: umulx8 ; op1:x18; op2:x22; dest:x10; op1val:0x0d0c0000;  op2val:0x027f03fe
TEST_P64_PNN_OP(umulx8, x10, x11, x18, x22, 0x00000000, 0, 0x0d0c0000, 0x027f03fe, x1, 80, x2)

inst_20:
// rs1==x30, rs2==x11, rs2_b3_val == 1, 
// opcode: umulx8 ; op1:x30; op2:x11; dest:x4; op1val:0x7f0f1213;  op2val:0x01060c0d
TEST_P64_PNN_OP(umulx8, x4, x5, x30, x11, 0x00000000, 0, 0x7f0f1213, 0x01060c0d, x1, 88, x2)

inst_21:
// rs1==x28, rs2==x9, rs2_b3_val == 0, rs1_b0_val == 223, rs1_b1_val == 239
// opcode: umulx8 ; op1:x28; op2:x9; dest:x14; op1val:0x1312efdf;  op2val:0x00000b04
TEST_P64_PNN_OP(umulx8, x14, x15, x28, x9, 0x00000000, 0, 0x1312efdf, 0x00000b04, x1, 96, x2)

inst_22:
// rs1==x19, rs2==x5, rs2_b2_val == 170, rs1_b2_val == 0, rs1_b0_val == 255
// opcode: umulx8 ; op1:x19; op2:x5; dest:x12; op1val:0x13000eff;  op2val:0x0caa130e
TEST_P64_PNN_OP(umulx8, x12, x13, x19, x5, 0x00000000, 0, 0x13000eff, 0x0caa130e, x1, 104, x2)

inst_23:
// rs1==x31, rs2==x29, rs2_b2_val == 239, rs1_b0_val == 191, rs2_b1_val == 253, rs2_b0_val == 170, rs1_b1_val == 223
// opcode: umulx8 ; op1:x31; op2:x29; dest:x18; op1val:0x0713dfbf;  op2val:0x0aeffdaa
TEST_P64_PNN_OP(umulx8, x18, x19, x31, x29, 0x00000000, 0, 0x0713dfbf, 0x0aeffdaa, x1, 112, x2)

inst_24:
// rs1==x13, rs2==x28, rs2_b2_val == 251, rs1_b1_val == 4, rs1_b2_val == 223, rs1_b3_val == 239
// opcode: umulx8 ; op1:x13; op2:x28; dest:x16; op1val:0xefdf0440;  op2val:0x09fb1340
TEST_P64_PNN_OP(umulx8, x16, x17, x13, x28, 0x00000000, 0, 0xefdf0440, 0x09fb1340, x1, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25:
// rs1==x22, rs2==x6, rs1_b1_val == 251, rs1_b3_val == 255
// opcode: umulx8 ; op1:x22; op2:x6; dest:x8; op1val:0xff20fbaa;  op2val:0x551209ef
TEST_P64_PNN_OP(umulx8, x8, x9, x22, x6, 0x00000000, 0, 0xff20fbaa, 0x551209ef, x1, 0, x2)

inst_26:
// rs1==x4, rs2==x26, rs1_b1_val == 254, rs1_b2_val == 191, rs1_b0_val == 1
// opcode: umulx8 ; op1:x4; op2:x26; dest:x24; op1val:0x12bffe01;  op2val:0x110620fd
TEST_P64_PNN_OP(umulx8, x24, x25, x4, x26, 0x00000000, 0, 0x12bffe01, 0x110620fd, x1, 8, x2)

inst_27:
// rs1==x14, rs2==x3, rs1_b1_val == 32, 
// opcode: umulx8 ; op1:x14; op2:x3; dest:x28; op1val:0x0a0b200b;  op2val:0x0b0d030c
TEST_P64_PNN_OP(umulx8, x28, x29, x14, x3, 0x00000000, 0, 0x0a0b200b, 0x0b0d030c, x1, 16, x2)

inst_28:
// rs1==x8, rs2==x13, rs1_b1_val == 16, rs1_b0_val == 4, rs2_b2_val == 253
// opcode: umulx8 ; op1:x8; op2:x13; dest:x28; op1val:0x0b001004;  op2val:0x10fdfeff
TEST_P64_PNN_OP(umulx8, x28, x29, x8, x13, 0x00000000, 0, 0x0b001004, 0x10fdfeff, x1, 24, x2)

inst_29:
// rs1==x10, rs2==x0, rs1_b1_val == 8, rs2_b0_val == 191, rs2_b2_val == 16, rs1_b3_val == 4
// opcode: umulx8 ; op1:x10; op2:x0; dest:x16; op1val:0x04000802;  op2val:0x09100ebf
TEST_P64_PNN_OP(umulx8, x16, x17, x10, x0, 0x00000000, 0, 0x04000802, 0x09100ebf, x1, 32, x2)

inst_30:
// rs1==x16, rs2==x27, rs1_b1_val == 2, 
// opcode: umulx8 ; op1:x16; op2:x27; dest:x14; op1val:0xff0e0211;  op2val:0xbf0b20aa
TEST_P64_PNN_OP(umulx8, x14, x15, x16, x27, 0x00000000, 0, 0xff0e0211, 0xbf0b20aa, x1, 40, x2)

inst_31:
// rs1==x3, rs2==x16, rs1_b1_val == 1, rs1_b0_val == 127
// opcode: umulx8 ; op1:x3; op2:x16; dest:x26; op1val:0x1155017f;  op2val:0xf70b1313
TEST_P64_PNN_OP(umulx8, x26, x27, x3, x16, 0x00000000, 0, 0x1155017f, 0xf70b1313, x1, 48, x2)

inst_32:
// rs1_b1_val == 255, rs2_b1_val == 128, rs2_b2_val == 128
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x7f13ff08;  op2val:0x7f808004
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x7f13ff08, 0x7f808004, x1, 56, x2)

inst_33:
// rs1_b0_val == 239, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x077f07ef;  op2val:0x0dfb0312
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x077f07ef, 0x0dfb0312, x1, 64, x2)

inst_34:
// rs1_b0_val == 247, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x7f0204f7;  op2val:0x0df7fe12
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x7f0204f7, 0x0df7fe12, x1, 72, x2)

inst_35:
// rs1_b0_val == 254, rs1_b2_val == 247, rs2_b2_val == 1
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x07f740fe;  op2val:0x0401ff03
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x07f740fe, 0x0401ff03, x1, 80, x2)

inst_36:
// rs1_b0_val == 128, rs2_b0_val == 85
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x11df0a80;  op2val:0x000fef55
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x11df0a80, 0x000fef55, x1, 88, x2)

inst_37:
// rs1_b0_val == 32, rs2_b0_val == 247
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x07120a20;  op2val:0x7f0beff7
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x07120a20, 0x7f0beff7, x1, 96, x2)

inst_38:
// rs1_b0_val == 16, rs2_b1_val == 2
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0c20aa10;  op2val:0xbf020210
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0c20aa10, 0xbf020210, x1, 104, x2)

inst_39:
// rs2_b1_val == 4, rs1_b3_val == 85
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x55090a7f;  op2val:0x05ff0409
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x55090a7f, 0x05ff0409, x1, 112, x2)

inst_40:
// rs2_b0_val == 127, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0e0e0500;  op2val:0x0f0e077f
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0e0e0500, 0x0f0e077f, x1, 120, x2)

inst_41:
// rs2_b0_val == 223, rs2_b1_val == 223
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xffbffe05;  op2val:0xfe12dfdf
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xffbffe05, 0xfe12dfdf, x1, 128, x2)

inst_42:
// rs2_b0_val == 251, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x02bf7ffd;  op2val:0x100303fb
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x02bf7ffd, 0x100303fb, x1, 136, x2)

inst_43:
// rs2_b0_val == 128, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x05df2080;  op2val:0xef0caa80
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x05df2080, 0xef0caa80, x1, 144, x2)

inst_44:
// rs2_b0_val == 2, rs1_b2_val == 239, rs2_b2_val == 8, rs2_b1_val == 191
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x09ef100e;  op2val:0xff08bf02
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x09ef100e, 0xff08bf02, x1, 152, x2)

inst_45:
// rs2_b0_val == 1, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xefdfff55;  op2val:0xef40ff01
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xefdfff55, 0xef40ff01, x1, 160, x2)

inst_46:
// rs2_b0_val == 0, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0a80ff02;  op2val:0x0c090200
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0a80ff02, 0x0c090200, x1, 168, x2)

inst_47:
// rs1_b3_val == 191, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xbfaaef0f;  op2val:0xff0c07fb
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xbfaaef0f, 0xff0c07fb, x1, 176, x2)

inst_48:
// rs1_b3_val == 253, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfd7ffefd;  op2val:0x55097f01
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfd7ffefd, 0x55097f01, x1, 184, x2)

inst_49:
// rs1_b3_val == 128, rs1_b2_val == 4, rs2_b1_val == 8
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x800440fd;  op2val:0x111108fd
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x800440fd, 0x111108fd, x1, 192, x2)

inst_50:
// rs1_b3_val == 64, rs2_b1_val == 16
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x401120ef;  op2val:0x200310fd
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x401120ef, 0x200310fd, x1, 200, x2)

inst_51:
// rs1_b3_val == 8, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x08011008;  op2val:0x0603feff
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x08011008, 0x0603feff, x1, 208, x2)

inst_52:
// rs1_b3_val == 1, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0120bf11;  op2val:0x05ff0f55
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0120bf11, 0x05ff0f55, x1, 216, x2)

inst_53:
// rs2_b2_val == 4, rs1_b2_val == 255
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x07ff0e0f;  op2val:0x0f040810
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x07ff0e0f, 0x0f040810, x1, 224, x2)

inst_54:
// rs2_b1_val == 85, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xdffd1012;  op2val:0x0810557f
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xdffd1012, 0x0810557f, x1, 232, x2)

inst_55:
// rs1_b2_val == 251, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xfdfb1101;  op2val:0x55081308
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xfdfb1101, 0x55081308, x1, 240, x2)

inst_56:
// rs2_b1_val == 251, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0xbf0702f7;  op2val:0x0e0ffb0b
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0xbf0702f7, 0x0e0ffb0b, x1, 248, x2)

inst_57:
// rs1_b2_val == 16, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0a10df04;  op2val:0x0a01ff03
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0a10df04, 0x0a01ff03, x1, 256, x2)

inst_58:
// rs1_b2_val == 8, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0208bf02;  op2val:0x10bf0c13
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0208bf02, 0x10bf0c13, x1, 264, x2)

inst_59:
// rs2_b1_val == 64, 
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x130e7f05;  op2val:0xfdff4003
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x130e7f05, 0xfdff4003, x1, 272, x2)

inst_60:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == 223, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 239, rs1_b2_val == 85, rs1_b0_val == 85
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x05550a55;  op2val:0x05df0fef
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x05550a55, 0x05df0fef, x1, 280, x2)

inst_61:
// rs2_b3_val == 128, rs1_b0_val == 8, rs1_b2_val == 170, rs2_b0_val == 254
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x0aaa0f08;  op2val:0x80fe20fe
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x0aaa0f08, 0x80fe20fe, x1, 288, x2)

inst_62:
// rs1_b1_val == 8, rs2_b0_val == 191, rs2_b2_val == 16, rs1_b3_val == 4
// opcode: umulx8 ; op1:x31; op2:x29; dest:x30; op1val:0x04000802;  op2val:0x09100ebf
TEST_P64_PNN_OP(umulx8, x30, x31, x31, x29, 0x00000000, 0, 0x04000802, 0x09100ebf, x1, 296, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
