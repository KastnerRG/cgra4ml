
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabs16 instruction of the RISC-V RV32PZicsr extension for the kabs16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabs16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x18, rd==x27, rs1_h0_val == -32768, rs1_h1_val == -65
// opcode: kabs16 ; op1:x18; dest:x27; op1val:0xffbf8000;
TEST_PKR_OP( kabs16, x27, x18, 0x00000000, 0xffbf8000, x18, x3, 0, x21)

inst_1:
// rs1==x19, rd==x29, rs1_h1_val == -21846, rs1_h0_val == 128
// opcode: kabs16 ; op1:x19; dest:x29; op1val:0xaaaa0080;
TEST_PKR_OP( kabs16, x29, x19, 0x00000000, 0xaaaa0080, x19, x3, 8, x21)

inst_2:
// rs1==x0, rd==x9, rs1_h1_val == 21845, rs1_h0_val == 32
// opcode: kabs16 ; op1:x0; dest:x9; op1val:0x55550020;
TEST_PKR_OP( kabs16, x9, x0, 0x00000000, 0x55550020, x0, x3, 16, x21)

inst_3:
// rs1==x6, rd==x5, rs1_h1_val == 32767, rs1_h0_val == 16384
// opcode: kabs16 ; op1:x6; dest:x5; op1val:0x7fff4000;
TEST_PKR_OP( kabs16, x5, x6, 0x00000000, 0x7fff4000, x6, x3, 24, x21)

inst_4:
// rs1==x12, rd==x4, rs1_h1_val == -16385, 
// opcode: kabs16 ; op1:x12; dest:x4; op1val:0xbfff8000;
TEST_PKR_OP( kabs16, x4, x12, 0x00000000, 0xbfff8000, x12, x3, 32, x21)

inst_5:
// rs1==x17, rd==x25, rs1_h1_val == -8193, rs1_h0_val == -3
// opcode: kabs16 ; op1:x17; dest:x25; op1val:0xdffffffd;
TEST_PKR_OP( kabs16, x25, x17, 0x00000000, 0xdffffffd, x17, x3, 40, x21)

inst_6:
// rs1==x2, rd==x16, rs1_h1_val == -4097, rs1_h0_val == -21846
// opcode: kabs16 ; op1:x2; dest:x16; op1val:0xefffaaaa;
TEST_PKR_OP( kabs16, x16, x2, 0x00000000, 0xefffaaaa, x2, x3, 48, x21)

inst_7:
// rs1==x28, rd==x19, rs1_h1_val == -2049, rs1_h0_val == -5
// opcode: kabs16 ; op1:x28; dest:x19; op1val:0xf7fffffb;
TEST_PKR_OP( kabs16, x19, x28, 0x00000000, 0xf7fffffb, x28, x3, 56, x21)

inst_8:
// rs1==x20, rd==x1, rs1_h1_val == -1025, 
// opcode: kabs16 ; op1:x20; dest:x1; op1val:0xfbfffff6;
TEST_PKR_OP( kabs16, x1, x20, 0x00000000, 0xfbfffff6, x20, x3, 64, x21)

inst_9:
// rs1==x29, rd==x24, rs1_h1_val == -513, rs1_h0_val == -2
// opcode: kabs16 ; op1:x29; dest:x24; op1val:0xfdfffffe;
TEST_PKR_OP( kabs16, x24, x29, 0x00000000, 0xfdfffffe, x29, x3, 72, x21)

inst_10:
// rs1==x11, rd==x8, rs1_h1_val == -257, 
// opcode: kabs16 ; op1:x11; dest:x8; op1val:0xfefffff6;
TEST_PKR_OP( kabs16, x8, x11, 0x00000000, 0xfefffff6, x11, x3, 80, x21)

inst_11:
// rs1==x16, rd==x15, rs1_h1_val == -129, rs1_h0_val == 512
// opcode: kabs16 ; op1:x16; dest:x15; op1val:0xff7f0200;
TEST_PKR_OP( kabs16, x15, x16, 0x00000000, 0xff7f0200, x16, x3, 88, x21)

inst_12:
// rs1==x7, rd==x20, rs1_h1_val == -33, rs1_h0_val == -9
// opcode: kabs16 ; op1:x7; dest:x20; op1val:0xffdffff7;
TEST_PKR_OP( kabs16, x20, x7, 0x00000000, 0xffdffff7, x7, x3, 96, x21)

inst_13:
// rs1==x14, rd==x26, rs1_h1_val == -17, 
// opcode: kabs16 ; op1:x14; dest:x26; op1val:0xffef0009;
TEST_PKR_OP( kabs16, x26, x14, 0x00000000, 0xffef0009, x14, x3, 104, x21)

inst_14:
// rs1==x25, rd==x12, rs1_h1_val == -9, rs1_h0_val == -16385
// opcode: kabs16 ; op1:x25; dest:x12; op1val:0xfff7bfff;
TEST_PKR_OP( kabs16, x12, x25, 0x00000000, 0xfff7bfff, x25, x3, 112, x21)

inst_15:
// rs1==x9, rd==x10, rs1_h1_val == -5, 
// opcode: kabs16 ; op1:x9; dest:x10; op1val:0xfffbfffd;
TEST_PKR_OP( kabs16, x10, x9, 0x00000000, 0xfffbfffd, x9, x3, 120, x21)

inst_16:
// rs1==x22, rd==x17, rs1_h1_val == -3, 
// opcode: kabs16 ; op1:x22; dest:x17; op1val:0xfffd0080;
TEST_PKR_OP( kabs16, x17, x22, 0x00000000, 0xfffd0080, x22, x3, 128, x21)

inst_17:
// rs1==x13, rd==x18, rs1_h1_val == -2, rs1_h0_val == -4097
// opcode: kabs16 ; op1:x13; dest:x18; op1val:0xfffeefff;
TEST_PKR_OP( kabs16, x18, x13, 0x00000000, 0xfffeefff, x13, x3, 136, x21)

inst_18:
// rs1==x10, rd==x0, rs1_h1_val == -32768, 
// opcode: kabs16 ; op1:x10; dest:x0; op1val:0x80000005;
TEST_PKR_OP( kabs16, x0, x10, 0x00000000, 0x80000005, x10, x3, 144, x21)

inst_19:
// rs1==x8, rd==x23, rs1_h1_val == 16384, 
// opcode: kabs16 ; op1:x8; dest:x23; op1val:0x4000fff7;
TEST_PKR_OP( kabs16, x23, x8, 0x00000000, 0x4000fff7, x8, x3, 152, x21)

inst_20:
// rs1==x21, rd==x31, rs1_h1_val == 8192, rs1_h0_val == 1024
// opcode: kabs16 ; op1:x21; dest:x31; op1val:0x20000400;
TEST_PKR_OP( kabs16, x31, x21, 0x00000000, 0x20000400, x21, x3, 160, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_21:
// rs1==x15, rd==x30, rs1_h1_val == 4096, rs1_h0_val == 256
// opcode: kabs16 ; op1:x15; dest:x30; op1val:0x10000100;
TEST_PKR_OP( kabs16, x30, x15, 0x00000000, 0x10000100, x15, x8, 0, x9)

inst_22:
// rs1==x26, rd==x21, rs1_h1_val == 2048, rs1_h0_val == 8192
// opcode: kabs16 ; op1:x26; dest:x21; op1val:0x8002000;
TEST_PKR_OP( kabs16, x21, x26, 0x00000000, 0x8002000, x26, x8, 8, x9)

inst_23:
// rs1==x1, rd==x28, rs1_h1_val == 1024, 
// opcode: kabs16 ; op1:x1; dest:x28; op1val:0x4000009;
TEST_PKR_OP( kabs16, x28, x1, 0x00000000, 0x4000009, x1, x8, 16, x9)

inst_24:
// rs1==x3, rd==x22, rs1_h1_val == 512, rs1_h0_val == 1
// opcode: kabs16 ; op1:x3; dest:x22; op1val:0x2000001;
TEST_PKR_OP( kabs16, x22, x3, 0x00000000, 0x2000001, x3, x8, 24, x9)

inst_25:
// rs1==x27, rd==x13, rs1_h1_val == 256, 
// opcode: kabs16 ; op1:x27; dest:x13; op1val:0x100fffa;
TEST_PKR_OP( kabs16, x13, x27, 0x00000000, 0x100fffa, x27, x8, 32, x9)

inst_26:
// rs1==x24, rd==x7, rs1_h0_val == 16, rs1_h1_val == 2
// opcode: kabs16 ; op1:x24; dest:x7; op1val:0x020010;
TEST_PKR_OP( kabs16, x7, x24, 0x00000000, 0x020010, x24, x8, 40, x9)

inst_27:
// rs1==x4, rd==x14, rs1_h0_val == 8, 
// opcode: kabs16 ; op1:x4; dest:x14; op1val:0xff7f0008;
TEST_PKR_OP( kabs16, x14, x4, 0x00000000, 0xff7f0008, x4, x8, 48, x9)

inst_28:
// rs1==x23, rd==x6, rs1_h0_val == 4, 
// opcode: kabs16 ; op1:x23; dest:x6; op1val:0xffef0004;
TEST_PKR_OP( kabs16, x6, x23, 0x00000000, 0xffef0004, x23, x8, 56, x9)

inst_29:
// rs1==x5, rd==x11, rs1_h0_val == 2, 
// opcode: kabs16 ; op1:x5; dest:x11; op1val:0xfbff0002;
TEST_PKR_OP( kabs16, x11, x5, 0x00000000, 0xfbff0002, x5, x8, 64, x9)

inst_30:
// rs1==x31, rd==x3, rs1_h0_val == 0, rs1_h1_val == 4
// opcode: kabs16 ; op1:x31; dest:x3; op1val:0x040000;
TEST_PKR_OP( kabs16, x3, x31, 0x00000000, 0x040000, x31, x8, 72, x9)

inst_31:
// rs1==x30, rd==x2, rs1_h0_val == -1, 
// opcode: kabs16 ; op1:x30; dest:x2; op1val:0x800ffff;
TEST_PKR_OP( kabs16, x2, x30, 0x00000000, 0x800ffff, x30, x8, 80, x9)

inst_32:
// rs1_h1_val == 128, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x80fffb;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x80fffb, x30, x8, 88, x9)

inst_33:
// rs1_h1_val == 64, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x400010;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x400010, x30, x8, 96, x9)

inst_34:
// rs1_h1_val == 32, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x20bfff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x20bfff, x30, x8, 104, x9)

inst_35:
// rs1_h1_val == 16, rs1_h0_val == -1025
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x10fbff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x10fbff, x30, x8, 112, x9)

inst_36:
// rs1_h1_val == 8, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x080008;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x080008, x30, x8, 120, x9)

inst_37:
// rs1_h1_val == 1, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x01fff7;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x01fff7, x30, x8, 128, x9)

inst_38:
// rs1_h1_val == 0, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x008000;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x008000, x30, x8, 136, x9)

inst_39:
// rs1_h1_val == -1, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffff0400;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xffff0400, x30, x8, 144, x9)

inst_40:
// rs1_h0_val == 21845, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffb5555;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xfffb5555, x30, x8, 152, x9)

inst_41:
// rs1_h0_val == 32767, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfdff7fff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xfdff7fff, x30, x8, 160, x9)

inst_42:
// rs1_h0_val == -8193, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x800dfff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x800dfff, x30, x8, 168, x9)

inst_43:
// rs1_h0_val == -2049, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x200f7ff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x200f7ff, x30, x8, 176, x9)

inst_44:
// rs1_h0_val == -513, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x02fdff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x02fdff, x30, x8, 184, x9)

inst_45:
// rs1_h0_val == -257, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x20feff;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x20feff, x30, x8, 192, x9)

inst_46:
// rs1_h0_val == -65, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xdfffffbf;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xdfffffbf, x30, x8, 200, x9)

inst_47:
// rs1_h0_val == -33, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x03ffdf;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x03ffdf, x30, x8, 208, x9)

inst_48:
// rs1_h0_val == -17, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xaaaaffef;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xaaaaffef, x30, x8, 216, x9)

inst_49:
// rs1_h0_val == 4096, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x801000;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x801000, x30, x8, 224, x9)

inst_50:
// rs1_h0_val == 2048, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffbf0800;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xffbf0800, x30, x8, 232, x9)

inst_51:
// rs1_h0_val == -129, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xefffff7f;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xefffff7f, x30, x8, 240, x9)

inst_52:
// rs1_h0_val == 64, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xc0000040;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0xc0000040, x30, x8, 248, x9)

inst_53:
// rs1_h1_val == 21845, rs1_h0_val == 32
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x55550020;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x55550020, x30, x8, 256, x9)

inst_54:
// rs1_h1_val == -32768, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x80000005;
TEST_PKR_OP( kabs16, x31, x30, 0x00000000, 0x80000005, x30, x8, 264, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
