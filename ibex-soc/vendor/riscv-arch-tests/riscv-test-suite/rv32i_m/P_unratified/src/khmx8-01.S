
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmx8 instruction of the RISC-V RV32PZicsr extension for the khmx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x7, rd==x12, rs1_b0_val == -128, rs1_b2_val == -65, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == -33, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -3
// opcode: khmx8 ; op1:x8; op2:x7; dest:x12; op1val:0x55bffd80;  op2val:0x9dffc03
TEST_PKRR_OP(khmx8, x12, x8, x7, 0x00000000, 0x55bffd80, 0x9dffc03, x8, x3, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x25, rs1_b3_val == rs2_b3_val, rs1_b0_val == 85, rs2_b1_val == -9, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 4, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 64
// opcode: khmx8 ; op1:x1; op2:x1; dest:x25; op1val:0x3f044055;  op2val:0x3ff9f709
TEST_PKRR_OP(khmx8, x25, x1, x1, 0x00000000, 0x3f044055, 0x3ff9f709, x1, x3, 8, x6)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x0, rd==x30, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 4, rs1_b3_val == -65, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 85, rs1_b2_val == -86, rs2_b2_val == 0
// opcode: khmx8 ; op1:x30; op2:x0; dest:x30; op1val:0xbfaa55f6;  op2val:0x3000504
TEST_PKRR_OP(khmx8, x30, x30, x0, 0x00000000, 0xbfaa55f6, 0x3000504, x30, x3, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b0_val == 64, rs2_b1_val == 64, rs2_b0_val == 0
// opcode: khmx8 ; op1:x11; op2:x11; dest:x11; op1val:0xf6bf5540;  op2val:0xfafc4000
TEST_PKRR_OP(khmx8, x11, x11, x11, 0x00000000, 0xf6bf5540, 0xfafc4000, x11, x3, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x2, rd==x2, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b2_val == -65, rs2_b1_val == 1, rs1_b1_val == 32
// opcode: khmx8 ; op1:x12; op2:x2; dest:x2; op1val:0x5fa2007;  op2val:0xf9bf0106
TEST_PKRR_OP(khmx8, x2, x12, x2, 0x00000000, 0x5fa2007, 0xf9bf0106, x12, x3, 32, x6)

inst_5:
// rs1==x31, rs2==x21, rd==x5, rs1_b2_val == rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 85, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b1_val == -5, rs2_b3_val == 85, rs1_b2_val == 85
// opcode: khmx8 ; op1:x31; op2:x21; dest:x5; op1val:0xf655fb03;  op2val:0x5555f9f8
TEST_PKRR_OP(khmx8, x5, x31, x21, 0x00000000, 0xf655fb03, 0x5555f9f8, x31, x3, 40, x6)

inst_6:
// rs1==x28, rs2==x12, rd==x31, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b1_val == -86, rs1_b2_val == -5, rs1_b0_val == 1, rs2_b3_val == -86, rs2_b2_val == 2, rs1_b1_val == 8
// opcode: khmx8 ; op1:x28; op2:x12; dest:x31; op1val:0x3fb0801;  op2val:0xaa02aaf6
TEST_PKRR_OP(khmx8, x31, x28, x12, 0x00000000, 0x3fb0801, 0xaa02aaf6, x28, x3, 48, x6)

inst_7:
// rs1==x23, rs2==x22, rd==x7, rs1_b1_val == rs2_b1_val, rs2_b0_val == -65, rs1_b2_val == 2, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val == -86
// opcode: khmx8 ; op1:x23; op2:x22; dest:x7; op1val:0xfc02f6aa;  op2val:0x5f8f6bf
TEST_PKRR_OP(khmx8, x7, x23, x22, 0x00000000, 0xfc02f6aa, 0x5f8f6bf, x23, x3, 56, x6)

inst_8:
// rs1==x22, rs2==x25, rd==x17, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b1_val == 2, rs2_b2_val == 32, rs2_b0_val == -17, rs1_b0_val == -9
// opcode: khmx8 ; op1:x22; op2:x25; dest:x17; op1val:0x304f9f7;  op2val:0xf92002ef
TEST_PKRR_OP(khmx8, x17, x22, x25, 0x00000000, 0x304f9f7, 0xf92002ef, x22, x3, 64, x6)

inst_9:
// rs1==x5, rs2==x15, rd==x1, rs1_b0_val == rs2_b0_val, rs1_b0_val == 4, rs1_b3_val == -128, rs2_b3_val == -33, rs2_b2_val == 127
// opcode: khmx8 ; op1:x5; op2:x15; dest:x1; op1val:0x80044004;  op2val:0xdf7f4004
TEST_PKRR_OP(khmx8, x1, x5, x15, 0x00000000, 0x80044004, 0xdf7f4004, x5, x3, 72, x6)

inst_10:
// rs1==x29, rs2==x10, rd==x14, rs2_b3_val == 127, rs2_b0_val == -9, rs1_b3_val == 32
// opcode: khmx8 ; op1:x29; op2:x10; dest:x14; op1val:0x20fbfd01;  op2val:0x7fbffcf7
TEST_PKRR_OP(khmx8, x14, x29, x10, 0x00000000, 0x20fbfd01, 0x7fbffcf7, x29, x3, 80, x6)

inst_11:
// rs1==x4, rs2==x19, rd==x20, rs2_b3_val == -65, rs2_b2_val == 8, rs2_b0_val == 1
// opcode: khmx8 ; op1:x4; op2:x19; dest:x20; op1val:0x60206fa;  op2val:0xbf08f701
TEST_PKRR_OP(khmx8, x20, x4, x19, 0x00000000, 0x60206fa, 0xbf08f701, x4, x3, 88, x6)

inst_12:
// rs1==x27, rs2==x20, rd==x26, rs2_b3_val == -17, rs1_b3_val == 4, rs2_b1_val == 0, rs1_b2_val == -9
// opcode: khmx8 ; op1:x27; op2:x20; dest:x26; op1val:0x4f7fd09;  op2val:0xef070009
TEST_PKRR_OP(khmx8, x26, x27, x20, 0x00000000, 0x4f7fd09, 0xef070009, x27, x3, 96, x6)

inst_13:
// rs1==x0, rs2==x16, rd==x9, rs2_b3_val == -9, rs2_b2_val == -1, rs2_b1_val == 127, rs1_b1_val == -33, rs1_b0_val == 32
// opcode: khmx8 ; op1:x0; op2:x16; dest:x9; op1val:0xf8fadf20;  op2val:0xf7ff7ff8
TEST_PKRR_OP(khmx8, x9, x0, x16, 0x00000000, 0xf8fadf20, 0xf7ff7ff8, x0, x3, 104, x6)

inst_14:
// rs1==x16, rs2==x6, rd==x29, rs2_b3_val == -5, rs2_b2_val == -86
// opcode: khmx8 ; op1:x16; op2:x6; dest:x29; op1val:0x20073f06;  op2val:0xfbaa09ef
TEST_PKRR_OP(khmx8, x29, x16, x6, 0x00000000, 0x20073f06, 0xfbaa09ef, x16, x3, 112, x11)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x2, rs2==x17, rd==x28, rs2_b3_val == -3, rs2_b2_val == -17, rs1_b1_val == -1, rs1_b2_val == 0
// opcode: khmx8 ; op1:x2; op2:x17; dest:x28; op1val:0x8000ff09;  op2val:0xfdeffa03
TEST_PKRR_OP(khmx8, x28, x2, x17, 0x00000000, 0x8000ff09, 0xfdeffa03, x2, x1, 0, x11)

inst_16:
// rs1==x3, rs2==x31, rd==x16, rs2_b3_val == -2, rs1_b0_val == -1, rs2_b0_val == -3, rs1_b3_val == 8
// opcode: khmx8 ; op1:x3; op2:x31; dest:x16; op1val:0x8f7f9ff;  op2val:0xfe007ffd
TEST_PKRR_OP(khmx8, x16, x3, x31, 0x00000000, 0x8f7f9ff, 0xfe007ffd, x3, x1, 8, x11)

inst_17:
// rs1==x26, rs2==x29, rd==x4, rs2_b3_val == -128, rs1_b2_val == 64, rs2_b2_val == -5, rs1_b0_val == 0
// opcode: khmx8 ; op1:x26; op2:x29; dest:x4; op1val:0x640fd00;  op2val:0x80fbf9f8
TEST_PKRR_OP(khmx8, x4, x26, x29, 0x00000000, 0x640fd00, 0x80fbf9f8, x26, x1, 16, x11)

inst_18:
// rs1==x21, rs2==x8, rd==x18, rs2_b3_val == 64, rs1_b2_val == 32, rs1_b0_val == 127
// opcode: khmx8 ; op1:x21; op2:x8; dest:x18; op1val:0xf920207f;  op2val:0x40207f04
TEST_PKRR_OP(khmx8, x18, x21, x8, 0x00000000, 0xf920207f, 0x40207f04, x21, x1, 24, x11)

inst_19:
// rs1==x13, rs2==x28, rd==x21, rs2_b3_val == 32, rs1_b3_val == 64, rs2_b1_val == -33
// opcode: khmx8 ; op1:x13; op2:x28; dest:x21; op1val:0x4002fd00;  op2val:0x20aadffd
TEST_PKRR_OP(khmx8, x21, x13, x28, 0x00000000, 0x4002fd00, 0x20aadffd, x13, x1, 32, x11)

inst_20:
// rs1==x20, rs2==x30, rd==x24, rs2_b3_val == 16, rs2_b2_val == 64, rs1_b1_val == -128
// opcode: khmx8 ; op1:x20; op2:x30; dest:x24; op1val:0x3408080;  op2val:0x1040aa3f
TEST_PKRR_OP(khmx8, x24, x20, x30, 0x00000000, 0x3408080, 0x1040aa3f, x20, x1, 40, x11)

inst_21:
// rs1==x10, rs2==x23, rd==x15, rs2_b3_val == 8, rs1_b3_val == 0, rs2_b0_val == -2
// opcode: khmx8 ; op1:x10; op2:x23; dest:x15; op1val:0x40c003;  op2val:0x8093ffe
TEST_PKRR_OP(khmx8, x15, x10, x23, 0x00000000, 0x40c003, 0x8093ffe, x10, x1, 48, x11)

inst_22:
// rs1==x19, rs2==x27, rd==x0, rs2_b3_val == 4, rs2_b0_val == 32, rs1_b3_val == -9
// opcode: khmx8 ; op1:x19; op2:x27; dest:x0; op1val:0xf755c001;  op2val:0x4bff620
TEST_PKRR_OP(khmx8, x0, x19, x27, 0x00000000, 0xf755c001, 0x4bff620, x19, x1, 56, x11)

inst_23:
// rs1==x17, rs2==x5, rd==x3, rs2_b3_val == 2, rs1_b3_val == 127, rs1_b0_val == -2, rs2_b1_val == 4, rs1_b2_val == -1, rs1_b1_val == -9
// opcode: khmx8 ; op1:x17; op2:x5; dest:x3; op1val:0x7ffff7fe;  op2val:0x20004bf
TEST_PKRR_OP(khmx8, x3, x17, x5, 0x00000000, 0x7ffff7fe, 0x20004bf, x17, x1, 64, x11)

inst_24:
// rs1==x6, rs2==x9, rd==x13, rs2_b3_val == 1, rs2_b1_val == -5, rs1_b0_val == 8
// opcode: khmx8 ; op1:x6; op2:x9; dest:x13; op1val:0xf7fb0708;  op2val:0x120fbf8
TEST_PKRR_OP(khmx8, x13, x6, x9, 0x00000000, 0xf7fb0708, 0x120fbf8, x6, x1, 72, x11)

inst_25:
// rs1==x18, rs2==x26, rd==x27, rs2_b3_val == 0, rs1_b0_val == 2
// opcode: khmx8 ; op1:x18; op2:x26; dest:x27; op1val:0xf9f7f602;  op2val:0xfb0301
TEST_PKRR_OP(khmx8, x27, x18, x26, 0x00000000, 0xf9f7f602, 0xfb0301, x18, x1, 80, x11)

inst_26:
// rs1==x7, rs2==x4, rd==x19, rs2_b3_val == -1, rs2_b0_val == 64, rs2_b1_val == 85, rs1_b1_val == 16
// opcode: khmx8 ; op1:x7; op2:x4; dest:x19; op1val:0xc0201007;  op2val:0xff405540
TEST_PKRR_OP(khmx8, x19, x7, x4, 0x00000000, 0xc0201007, 0xff405540, x7, x1, 88, x11)

inst_27:
// rs1==x9, rs2==x24, rd==x8, rs1_b2_val == -33, rs1_b1_val == -86, rs2_b2_val == -9
// opcode: khmx8 ; op1:x9; op2:x24; dest:x8; op1val:0xf6dfaa55;  op2val:0x7ff7fbfd
TEST_PKRR_OP(khmx8, x8, x9, x24, 0x00000000, 0xf6dfaa55, 0x7ff7fbfd, x9, x1, 96, x11)

inst_28:
// rs1==x15, rs2==x14, rd==x22, rs1_b2_val == -17, rs2_b2_val == 16, rs1_b1_val == -65, rs1_b0_val == -3, rs2_b0_val == 127
// opcode: khmx8 ; op1:x15; op2:x14; dest:x22; op1val:0x6efbffd;  op2val:0x910007f
TEST_PKRR_OP(khmx8, x22, x15, x14, 0x00000000, 0x6efbffd, 0x910007f, x15, x1, 104, x11)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29:
// rs1==x24, rs2==x18, rd==x23, rs1_b2_val == -3, 
// opcode: khmx8 ; op1:x24; op2:x18; dest:x23; op1val:0xfd55f8;  op2val:0xdf1040fa
TEST_PKRR_OP(khmx8, x23, x24, x18, 0x00000000, 0xfd55f8, 0xdf1040fa, x24, x1, 0, x2)

inst_30:
// rs1==x14, rs2==x3, rd==x10, rs1_b2_val == -2, 
// opcode: khmx8 ; op1:x14; op2:x3; dest:x10; op1val:0x4fefcc0;  op2val:0x102040ef
TEST_PKRR_OP(khmx8, x10, x14, x3, 0x00000000, 0x4fefcc0, 0x102040ef, x14, x1, 8, x2)

inst_31:
// rs1==x25, rs2==x13, rd==x6, rs1_b2_val == -128, rs2_b1_val == 8
// opcode: khmx8 ; op1:x25; op2:x13; dest:x6; op1val:0x80802055;  op2val:0xef550809
TEST_PKRR_OP(khmx8, x6, x25, x13, 0x00000000, 0x80802055, 0xef550809, x25, x1, 16, x2)

inst_32:
// rs1_b2_val == 16, rs1_b3_val == 1, rs2_b0_val == 8
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x11008f6;  op2val:0xdffafb08
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x11008f6, 0xdffafb08, x30, x1, 24, x2)

inst_33:
// rs1_b2_val == 8, rs1_b0_val == -65, rs2_b0_val == -33, rs2_b2_val == 4
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70810bf;  op2val:0xc00406df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf70810bf, 0xc00406df, x30, x1, 32, x2)

inst_34:
// rs1_b2_val == 1, rs2_b0_val == 16
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xc001ff80;  op2val:0x3090610
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xc001ff80, 0x3090610, x30, x1, 40, x2)

inst_35:
// rs1_b1_val == 127, rs1_b3_val == -3
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfb7ffc;  op2val:0x3f05f920
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfdfb7ffc, 0x3f05f920, x30, x1, 48, x2)

inst_36:
// rs1_b1_val == -17, rs1_b0_val == 16
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fcef10;  op2val:0x55f802fe
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x1fcef10, 0x55f802fe, x30, x1, 56, x2)

inst_37:
// rs1_b1_val == -2, rs1_b3_val == -2
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe01fe09;  op2val:0x8002f6fa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfe01fe09, 0x8002f6fa, x30, x1, 64, x2)

inst_38:
// rs1_b1_val == 4, rs1_b3_val == -5, rs2_b0_val == -5
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfd0400;  op2val:0x30901fb
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfbfd0400, 0x30901fb, x30, x1, 72, x2)

inst_39:
// rs1_b1_val == 2, rs1_b3_val == -86
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa8002f7;  op2val:0xc0090308
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xaa8002f7, 0xc0090308, x30, x1, 80, x2)

inst_40:
// rs2_b1_val == -65, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x9012003;  op2val:0x5510bff6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x9012003, 0x5510bff6, x30, x1, 88, x2)

inst_41:
// rs2_b1_val == -17, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x70610aa;  op2val:0x3bfef20
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x70610aa, 0x3bfef20, x30, x1, 96, x2)

inst_42:
// rs2_b1_val == -3, rs2_b0_val == -1, rs1_b2_val == 127
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77f3f00;  op2val:0x407fdff
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf77f3f00, 0x407fdff, x30, x1, 104, x2)

inst_43:
// rs2_b1_val == -2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9aaf800;  op2val:0x07fe40
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf9aaf800, 0x07fe40, x30, x1, 112, x2)

inst_44:
// rs2_b1_val == -128, rs2_b0_val == 85
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfec08006;  op2val:0x407f8055
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfec08006, 0x407f8055, x30, x1, 120, x2)

inst_45:
// rs2_b1_val == 32, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x35508f8;  op2val:0xfdfc2040
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x35508f8, 0xfdfc2040, x30, x1, 128, x2)

inst_46:
// rs2_b1_val == 16, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x20aa00;  op2val:0x20551009
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x20aa00, 0x20551009, x30, x1, 136, x2)

inst_47:
// rs2_b1_val == -1, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3085509;  op2val:0x07fff9
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x3085509, 0x07fff9, x30, x1, 144, x2)

inst_48:
// rs2_b0_val == -86, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ff0408;  op2val:0x4fb01aa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x5ff0408, 0x4fb01aa, x30, x1, 152, x2)

inst_49:
// rs2_b0_val == -128, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x1092005;  op2val:0x455f780
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x1092005, 0x455f780, x30, x1, 160, x2)

inst_50:
// rs1_b1_val == 1, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0155;  op2val:0x3ffafc06
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfb0155, 0x3ffafc06, x30, x1, 168, x2)

inst_51:
// rs1_b1_val == 0, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf60800bf;  op2val:0x3fef4040
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf60800bf, 0x3fef4040, x30, x1, 176, x2)

inst_52:
// rs2_b0_val == 2, rs1_b0_val == -33
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaf6df;  op2val:0xc0aa0202
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfaf6df, 0xc0aa0202, x30, x1, 184, x2)

inst_53:
// rs1_b0_val == -17, rs1_b3_val == -1
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb01ef;  op2val:0x5fa0555
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfffb01ef, 0x5fa0555, x30, x1, 192, x2)

inst_54:
// rs1_b0_val == -5, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7bf06fb;  op2val:0x8004ef01
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x7bf06fb, 0x8004ef01, x30, x1, 200, x2)

inst_55:
// rs1_b3_val == -33, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf55df07;  op2val:0xfc40c0aa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xdf55df07, 0xfc40c0aa, x30, x1, 208, x2)

inst_56:
// rs2_b2_val == 1, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x55ff107f;  op2val:0xaa01aafa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x55ff107f, 0xaa01aafa, x30, x1, 216, x2)

inst_57:
// rs2_b2_val == -3, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fcf8ef;  op2val:0xf7fd103f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x8fcf8ef, 0xf7fd103f, x30, x1, 224, x2)

inst_58:
// rs2_b2_val == -2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb083f04;  op2val:0xdffec07f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xfb083f04, 0xdffec07f, x30, x1, 232, x2)

inst_59:
// rs1_b3_val == 2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f8f9fd;  op2val:0x6bfaaf7
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x2f8f9fd, 0x6bfaaf7, x30, x1, 240, x2)

inst_60:
// rs1_b3_val == 16, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f7dfdf;  op2val:0x1fd80c0
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x10f7dfdf, 0x1fd80c0, x30, x1, 248, x2)

inst_61:
// rs1_b3_val == -17, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff7dfef;  op2val:0xf6f6f6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xeff7dfef, 0xf6f6f6, x30, x1, 256, x2)

inst_62:
// rs2_b2_val == -128, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0702fd;  op2val:0xdf80fafc
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x7f0702fd, 0xdf80fafc, x30, x1, 264, x2)

inst_63:
// rs1_b3_val == rs2_b3_val, rs1_b0_val == 85, rs2_b1_val == -9, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 4, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 64
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f044055;  op2val:0x3ff9f709
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0x3f044055, 0x3ff9f709, x30, x1, 272, x2)

inst_64:
// rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 4, rs1_b3_val == -65, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 85, rs1_b2_val == -86, rs2_b2_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfaa55f6;  op2val:0x3000504
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xbfaa55f6, 0x3000504, x30, x1, 280, x2)

inst_65:
// rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b0_val == 64, rs2_b1_val == 64, rs2_b0_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6bf5540;  op2val:0xfafc4000
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf6bf5540, 0xfafc4000, x30, x1, 288, x2)

inst_66:
// rs2_b3_val == -9, rs2_b2_val == -1, rs2_b1_val == 127, rs1_b1_val == -33, rs1_b0_val == 32
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fadf20;  op2val:0xf7ff7ff8
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x00000000, 0xf8fadf20, 0xf7ff7ff8, x30, x1, 296, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
