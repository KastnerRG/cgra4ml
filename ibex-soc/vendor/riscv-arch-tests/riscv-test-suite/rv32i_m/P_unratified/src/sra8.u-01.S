
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra8.u instruction of the RISC-V RV32PZicsr extension for the sra8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x12, rd==x11, rs2_val == 5, rs1_b1_val == 0, rs1_b0_val == -86, rs1_b2_val == -65
// opcode: sra8.u ; op1:x31; op2:x12; dest:x11; op1val:0x9bf00aa;  op2val:0x5
TEST_RR_OP(sra8.u, x11, x31, x12, 0x00000000, 0x9bf00aa, 0x5, x5, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x28, rs2_val == 3, rs1_b1_val == 64
// opcode: sra8.u ; op1:x3; op2:x3; dest:x28; op1val:0xf8f84007;  op2val:0x3
TEST_RR_OP(sra8.u, x28, x3, x3, 0x00000000, 0xf8f84007, 0x3, x5, 4, x7)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x25, rd==x18, rs2_val == 6, 
// opcode: sra8.u ; op1:x18; op2:x25; dest:x18; op1val:0xfc09f607;  op2val:0x6
TEST_RR_OP(sra8.u, x18, x18, x25, 0x00000000, 0xfc09f607, 0x6, x5, 8, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs2_val == 4, rs1_b1_val == 32, rs1_b2_val == 32, rs1_b3_val == 1
// opcode: sra8.u ; op1:x4; op2:x4; dest:x4; op1val:0x12020fa;  op2val:0x4
TEST_RR_OP(sra8.u, x4, x4, x4, 0x00000000, 0x12020fa, 0x4, x5, 12, x7)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x26, rd==x26, rs2_val == 2, rs1_b3_val == -65, rs1_b2_val == 85, rs1_b0_val == 127
// opcode: sra8.u ; op1:x22; op2:x26; dest:x26; op1val:0xbf553f7f;  op2val:0x2
TEST_RR_OP(sra8.u, x26, x22, x26, 0x00000000, 0xbf553f7f, 0x2, x5, 16, x7)

inst_5:
// rs1==x26, rs2==x19, rd==x20, rs2_val == 1, rs1_b3_val == -128, rs1_b2_val == 4, rs1_b1_val == -128
// opcode: sra8.u ; op1:x26; op2:x19; dest:x20; op1val:0x80048009;  op2val:0x1
TEST_RR_OP(sra8.u, x20, x26, x19, 0x00000000, 0x80048009, 0x1, x5, 20, x7)

inst_6:
// rs1==x27, rs2==x18, rd==x17, rs1_b3_val == -86, rs1_b2_val == 127
// opcode: sra8.u ; op1:x27; op2:x18; dest:x17; op1val:0xaa7f053f;  op2val:0x10
TEST_RR_OP(sra8.u, x17, x27, x18, 0x00000000, 0xaa7f053f, 0x10, x5, 24, x7)

inst_7:
// rs1==x20, rs2==x10, rd==x9, rs1_b3_val == 85, rs1_b2_val == 16
// opcode: sra8.u ; op1:x20; op2:x10; dest:x9; op1val:0x55103faa;  op2val:0x13
TEST_RR_OP(sra8.u, x9, x20, x10, 0x00000000, 0x55103faa, 0x13, x5, 28, x7)

inst_8:
// rs1==x0, rs2==x22, rd==x2, rs1_b3_val == 127, rs1_b0_val == 16
// opcode: sra8.u ; op1:x0; op2:x22; dest:x2; op1val:0x7f054010;  op2val:0x1
TEST_RR_OP(sra8.u, x2, x0, x22, 0x00000000, 0x7f054010, 0x1, x5, 32, x7)

inst_9:
// rs1==x30, rs2==x23, rd==x25, rs1_b3_val == -33, rs1_b0_val == 32
// opcode: sra8.u ; op1:x30; op2:x23; dest:x25; op1val:0xdf052020;  op2val:0x9
TEST_RR_OP(sra8.u, x25, x30, x23, 0x00000000, 0xdf052020, 0x9, x5, 36, x7)

inst_10:
// rs1==x24, rs2==x28, rd==x1, rs1_b3_val == -17, rs1_b2_val == 2
// opcode: sra8.u ; op1:x24; op2:x28; dest:x1; op1val:0xef02c07f;  op2val:0x8
TEST_RR_OP(sra8.u, x1, x24, x28, 0x00000000, 0xef02c07f, 0x8, x5, 40, x7)

inst_11:
// rs1==x15, rs2==x1, rd==x19, rs1_b3_val == -9, 
// opcode: sra8.u ; op1:x15; op2:x1; dest:x19; op1val:0xf7fa40aa;  op2val:0x0
TEST_RR_OP(sra8.u, x19, x15, x1, 0x00000000, 0xf7fa40aa, 0x0, x5, 44, x7)

inst_12:
// rs1==x6, rs2==x31, rd==x13, rs1_b3_val == -5, rs1_b0_val == 64, rs1_b2_val == 64
// opcode: sra8.u ; op1:x6; op2:x31; dest:x13; op1val:0xfb400540;  op2val:0x2
TEST_RR_OP(sra8.u, x13, x6, x31, 0x00000000, 0xfb400540, 0x2, x5, 48, x7)

inst_13:
// rs1==x12, rs2==x30, rd==x3, rs1_b3_val == -3, rs1_b0_val == -5
// opcode: sra8.u ; op1:x12; op2:x30; dest:x3; op1val:0xfdf809fb;  op2val:0x4
TEST_RR_OP(sra8.u, x3, x12, x30, 0x00000000, 0xfdf809fb, 0x4, x5, 52, x7)

inst_14:
// rs1==x28, rs2==x17, rd==x30, rs1_b3_val == -2, rs1_b2_val == -2
// opcode: sra8.u ; op1:x28; op2:x17; dest:x30; op1val:0xfefe0340;  op2val:0x2
TEST_RR_OP(sra8.u, x30, x28, x17, 0x00000000, 0xfefe0340, 0x2, x5, 56, x7)

inst_15:
// rs1==x8, rs2==x15, rd==x21, rs1_b3_val == 64, rs1_b1_val == -65
// opcode: sra8.u ; op1:x8; op2:x15; dest:x21; op1val:0x4006bf7f;  op2val:0x4
TEST_RR_OP(sra8.u, x21, x8, x15, 0x00000000, 0x4006bf7f, 0x4, x5, 60, x7)

inst_16:
// rs1==x11, rs2==x6, rd==x14, rs1_b3_val == 32, rs1_b0_val == 4
// opcode: sra8.u ; op1:x11; op2:x6; dest:x14; op1val:0x20f68004;  op2val:0x12
TEST_RR_OP(sra8.u, x14, x11, x6, 0x00000000, 0x20f68004, 0x12, x5, 64, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x1, rs2==x0, rd==x7, rs1_b3_val == 16, rs1_b2_val == -9
// opcode: sra8.u ; op1:x1; op2:x0; dest:x7; op1val:0x10f72020;  op2val:0x0
TEST_RR_OP(sra8.u, x7, x1, x0, 0x00000000, 0x10f72020, 0x0, x3, 0, x4)

inst_18:
// rs1==x25, rs2==x9, rd==x23, rs1_b3_val == 8, rs1_b2_val == -5
// opcode: sra8.u ; op1:x25; op2:x9; dest:x23; op1val:0x8fbfa7f;  op2val:0xf
TEST_RR_OP(sra8.u, x23, x25, x9, 0x00000000, 0x8fbfa7f, 0xf, x3, 4, x4)

inst_19:
// rs1==x5, rs2==x2, rd==x6, rs1_b3_val == 4, rs1_b0_val == -1
// opcode: sra8.u ; op1:x5; op2:x2; dest:x6; op1val:0x4f6f9ff;  op2val:0x8
TEST_RR_OP(sra8.u, x6, x5, x2, 0x00000000, 0x4f6f9ff, 0x8, x3, 8, x4)

inst_20:
// rs1==x17, rs2==x8, rd==x10, rs1_b3_val == 2, rs1_b0_val == -3
// opcode: sra8.u ; op1:x17; op2:x8; dest:x10; op1val:0x2fc09fd;  op2val:0x8
TEST_RR_OP(sra8.u, x10, x17, x8, 0x00000000, 0x2fc09fd, 0x8, x3, 12, x4)

inst_21:
// rs1==x29, rs2==x14, rd==x24, rs1_b3_val == 0, rs1_b2_val == 1
// opcode: sra8.u ; op1:x29; op2:x14; dest:x24; op1val:0x01bffd;  op2val:0x6
TEST_RR_OP(sra8.u, x24, x29, x14, 0x00000000, 0x01bffd, 0x6, x3, 16, x4)

inst_22:
// rs1==x10, rs2==x11, rd==x5, rs1_b3_val == -1, 
// opcode: sra8.u ; op1:x10; op2:x11; dest:x5; op1val:0xff2005c0;  op2val:0xa
TEST_RR_OP(sra8.u, x5, x10, x11, 0x00000000, 0xff2005c0, 0xa, x3, 20, x4)

inst_23:
// rs1==x19, rs2==x21, rd==x15, rs1_b2_val == -86, rs1_b1_val == 1
// opcode: sra8.u ; op1:x19; op2:x21; dest:x15; op1val:0xffaa01fb;  op2val:0x8
TEST_RR_OP(sra8.u, x15, x19, x21, 0x00000000, 0xffaa01fb, 0x8, x3, 24, x4)

inst_24:
// rs1==x21, rs2==x13, rd==x29, rs1_b2_val == -33, rs1_b0_val == 2
// opcode: sra8.u ; op1:x21; op2:x13; dest:x29; op1val:0x1dfbf02;  op2val:0xc
TEST_RR_OP(sra8.u, x29, x21, x13, 0x00000000, 0x1dfbf02, 0xc, x3, 28, x4)

inst_25:
// rs1==x7, rs2==x27, rd==x0, rs1_b1_val == -1, 
// opcode: sra8.u ; op1:x7; op2:x27; dest:x0; op1val:0x809ffaa;  op2val:0xd
TEST_RR_OP(sra8.u, x0, x7, x27, 0x00000000, 0x809ffaa, 0xd, x3, 32, x4)

inst_26:
// rs1==x9, rs2==x29, rd==x16, rs1_b0_val == 85, rs1_b1_val == -3
// opcode: sra8.u ; op1:x9; op2:x29; dest:x16; op1val:0xf720fd55;  op2val:0xb
TEST_RR_OP(sra8.u, x16, x9, x29, 0x00000000, 0xf720fd55, 0xb, x3, 36, x4)

inst_27:
// rs1==x23, rs2==x24, rd==x31, rs1_b0_val == -65, 
// opcode: sra8.u ; op1:x23; op2:x24; dest:x31; op1val:0x203f06bf;  op2val:0x7
TEST_RR_OP(sra8.u, x31, x23, x24, 0x00000000, 0x203f06bf, 0x7, x3, 40, x4)

inst_28:
// rs1==x14, rs2==x16, rd==x27, rs1_b0_val == -33, 
// opcode: sra8.u ; op1:x14; op2:x16; dest:x27; op1val:0xf84040df;  op2val:0x4
TEST_RR_OP(sra8.u, x27, x14, x16, 0x00000000, 0xf84040df, 0x4, x3, 44, x4)

inst_29:
// rs1==x2, rs2==x7, rd==x12, rs1_b0_val == -17, 
// opcode: sra8.u ; op1:x2; op2:x7; dest:x12; op1val:0xf62005ef;  op2val:0x7
TEST_RR_OP(sra8.u, x12, x2, x7, 0x00000000, 0xf62005ef, 0x7, x3, 48, x4)

inst_30:
// rs1==x13, rs2==x20, rd==x8, rs1_b0_val == -9, rs1_b1_val == -5
// opcode: sra8.u ; op1:x13; op2:x20; dest:x8; op1val:0xc0f9fbf7;  op2val:0x2
TEST_RR_OP(sra8.u, x8, x13, x20, 0x00000000, 0xc0f9fbf7, 0x2, x3, 52, x4)

inst_31:
// rs1==x16, rs2==x5, rd==x22, rs1_b0_val == -2, 
// opcode: sra8.u ; op1:x16; op2:x5; dest:x22; op1val:0x87f3ffe;  op2val:0x12
TEST_RR_OP(sra8.u, x22, x16, x5, 0x00000000, 0x87f3ffe, 0x12, x3, 56, x4)

inst_32:
// rs1_b0_val == -128, rs1_b1_val == 16
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf9201080;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xf9201080, 0x8, x3, 60, x4)

inst_33:
// rs1_b0_val == 8, rs1_b1_val == -2
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2004fe08;  op2val:0xe
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x2004fe08, 0xe, x3, 64, x1)

inst_34:
// rs1_b0_val == 1, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbf80301;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xfbf80301, 0x3, x3, 68, x1)

inst_35:
// rs1_b0_val == 0, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2020700;  op2val:0x12
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x2020700, 0x12, x3, 72, x1)

inst_36:
// rs1_b2_val == -3, rs1_b1_val == -17
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x20fdeff6;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x20fdeff6, 0x8, x3, 76, x1)

inst_37:
// rs1_b2_val == -128, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfd80c0fa;  op2val:0xa
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xfd80c0fa, 0xa, x3, 80, x1)

inst_38:
// rs1_b2_val == 8, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x80801ef;  op2val:0x0
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x80801ef, 0x0, x3, 84, x1)

inst_39:
// rs1_b2_val == 0, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf00fc07;  op2val:0x2
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xbf00fc07, 0x2, x3, 88, x1)

inst_40:
// rs1_b2_val == -1, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff9ef;  op2val:0x6
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x7fff9ef, 0x6, x3, 92, x1)

inst_41:
// rs1_b1_val == -86, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe03aa20;  op2val:0x11
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xfe03aa20, 0x11, x3, 96, x1)

inst_42:
// rs1_b1_val == 85, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x9fa55ff;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x9fa55ff, 0x3, x3, 100, x1)

inst_43:
// rs1_b1_val == 127, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfc017f10;  op2val:0xe
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xfc017f10, 0xe, x3, 104, x1)

inst_44:
// rs1_b1_val == -33, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf6fcdf09;  op2val:0x0
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xf6fcdf09, 0x0, x3, 108, x1)

inst_45:
// rs1_b1_val == -9, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x780f700;  op2val:0x10
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x780f700, 0x10, x3, 112, x1)

inst_46:
// rs1_b1_val == 8, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10070855;  op2val:0x12
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x10070855, 0x12, x3, 116, x1)

inst_47:
// rs1_b1_val == 4, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xc0fa04f6;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xc0fa04f6, 0x8, x3, 120, x1)

inst_48:
// rs1_b1_val == 2, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfcff02f6;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0xfcff02f6, 0x8, x3, 124, x1)

inst_49:
// rs1_b2_val == -17, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x3eff801;  op2val:0x7
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x3eff801, 0x7, x3, 128, x1)

inst_50:
// rs1_b3_val == 127, rs1_b0_val == 16
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7f054010;  op2val:0x1
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x7f054010, 0x1, x3, 132, x1)

inst_51:
// rs1_b3_val == 16, rs1_b2_val == -9
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10f72020;  op2val:0x12
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x10f72020, 0x12, x3, 136, x1)

inst_52:
// rs1_b1_val == -1, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x809ffaa;  op2val:0xd
TEST_RR_OP(sra8.u, x31, x30, x29, 0x00000000, 0x809ffaa, 0xd, x3, 140, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
