
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra8 instruction of the RISC-V RV32PZicsr extension for the kslra8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x1, rd==x20, rs2_val == 1431655765, rs1_b1_val == 16, rs1_b2_val == 127
// opcode: kslra8 ; op1:x31; op2:x1; dest:x20; op1val:0xfa7f1005;  op2val:0x55555555
TEST_PKRR_OP(kslra8, x20, x31, x1, 0x00000000, 0xfa7f1005, 0x55555555, x31, x3, 0, x16)

inst_1:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x12, rs2_val == 2147483647, rs1_b0_val == 4
// opcode: kslra8 ; op1:x2; op2:x2; dest:x12; op1val:0x3fc00504;  op2val:0x7fffffff
TEST_PKRR_OP(kslra8, x12, x2, x2, 0x00000000, 0x3fc00504, 0x7fffffff, x2, x3, 8, x16)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x29, rd==x18, rs2_val == -1073741825, rs1_b1_val == -86, rs1_b3_val == -9
// opcode: kslra8 ; op1:x18; op2:x29; dest:x18; op1val:0xf7faaafc;  op2val:0xbfffffff
TEST_PKRR_OP(kslra8, x18, x18, x29, 0x00000000, 0xf7faaafc, 0xbfffffff, x18, x3, 16, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_val == -536870913, rs1_b3_val == -3, rs1_b0_val == 16, rs1_b1_val == -128, rs1_b2_val == -128
// opcode: kslra8 ; op1:x11; op2:x11; dest:x11; op1val:0xfd808010;  op2val:0xdfffffff
TEST_PKRR_OP(kslra8, x11, x11, x11, 0x00000000, 0xfd808010, 0xdfffffff, x11, x3, 24, x16)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x14, rd==x14, rs2_val == -268435457, rs1_b3_val == -86, rs1_b1_val == -2, rs1_b0_val == 2
// opcode: kslra8 ; op1:x12; op2:x14; dest:x14; op1val:0xaa09fe02;  op2val:0xefffffff
TEST_PKRR_OP(kslra8, x14, x12, x14, 0x00000000, 0xaa09fe02, 0xefffffff, x12, x3, 32, x16)

inst_5:
// rs1==x8, rs2==x25, rd==x0, rs2_val == -134217729, rs1_b3_val == -5, rs1_b1_val == 4, rs1_b2_val == -3
// opcode: kslra8 ; op1:x8; op2:x25; dest:x0; op1val:0xfbfd04f8;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra8, x0, x8, x25, 0x00000000, 0xfbfd04f8, 0xf7ffffff, x8, x3, 40, x16)

inst_6:
// rs1==x13, rs2==x5, rd==x15, rs2_val == -67108865, 
// opcode: kslra8 ; op1:x13; op2:x5; dest:x15; op1val:0xaa06aa05;  op2val:0xfbffffff
TEST_PKRR_OP(kslra8, x15, x13, x5, 0x00000000, 0xaa06aa05, 0xfbffffff, x13, x3, 48, x16)

inst_7:
// rs1==x23, rs2==x30, rd==x21, rs2_val == -33554433, rs1_b1_val == -33, rs1_b2_val == 1
// opcode: kslra8 ; op1:x23; op2:x30; dest:x21; op1val:0xfd01dff8;  op2val:0xfdffffff
TEST_PKRR_OP(kslra8, x21, x23, x30, 0x00000000, 0xfd01dff8, 0xfdffffff, x23, x3, 56, x16)

inst_8:
// rs1==x6, rs2==x15, rd==x26, rs2_val == -16777217, 
// opcode: kslra8 ; op1:x6; op2:x15; dest:x26; op1val:0xfcc080fc;  op2val:0xfeffffff
TEST_PKRR_OP(kslra8, x26, x6, x15, 0x00000000, 0xfcc080fc, 0xfeffffff, x6, x3, 64, x16)

inst_9:
// rs1==x10, rs2==x7, rd==x31, rs2_val == -8388609, rs1_b0_val == 8
// opcode: kslra8 ; op1:x10; op2:x7; dest:x31; op1val:0xfc078008;  op2val:0xff7fffff
TEST_PKRR_OP(kslra8, x31, x10, x7, 0x00000000, 0xfc078008, 0xff7fffff, x10, x3, 72, x16)

inst_10:
// rs1==x15, rs2==x9, rd==x25, rs2_val == -4194305, rs1_b2_val == -1, rs1_b1_val == -65, rs1_b0_val == -2
// opcode: kslra8 ; op1:x15; op2:x9; dest:x25; op1val:0x9ffbffe;  op2val:0xffbfffff
TEST_PKRR_OP(kslra8, x25, x15, x9, 0x00000000, 0x9ffbffe, 0xffbfffff, x15, x3, 80, x16)

inst_11:
// rs1==x26, rs2==x27, rd==x24, rs2_val == -2097153, rs1_b0_val == -33, rs1_b3_val == 0, rs1_b2_val == 4
// opcode: kslra8 ; op1:x26; op2:x27; dest:x24; op1val:0x0410df;  op2val:0xffdfffff
TEST_PKRR_OP(kslra8, x24, x26, x27, 0x00000000, 0x0410df, 0xffdfffff, x26, x3, 88, x16)

inst_12:
// rs1==x20, rs2==x4, rd==x6, rs2_val == -1048577, rs1_b3_val == -128, rs1_b0_val == 1
// opcode: kslra8 ; op1:x20; op2:x4; dest:x6; op1val:0x80013f01;  op2val:0xffefffff
TEST_PKRR_OP(kslra8, x6, x20, x4, 0x00000000, 0x80013f01, 0xffefffff, x20, x3, 96, x16)

inst_13:
// rs1==x30, rs2==x31, rd==x22, rs2_val == -524289, rs1_b2_val == -33, rs1_b0_val == -9, rs1_b1_val == 32
// opcode: kslra8 ; op1:x30; op2:x31; dest:x22; op1val:0x6df20f7;  op2val:0xfff7ffff
TEST_PKRR_OP(kslra8, x22, x30, x31, 0x00000000, 0x6df20f7, 0xfff7ffff, x30, x3, 104, x16)

inst_14:
// rs1==x16, rs2==x19, rd==x13, rs2_val == -262145, rs1_b0_val == -65, rs1_b3_val == 85
// opcode: kslra8 ; op1:x16; op2:x19; dest:x13; op1val:0x55f607bf;  op2val:0xfffbffff
TEST_PKRR_OP(kslra8, x13, x16, x19, 0x00000000, 0x55f607bf, 0xfffbffff, x16, x3, 112, x6)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x21, rs2==x23, rd==x10, rs2_val == -131073, rs1_b0_val == -86
// opcode: kslra8 ; op1:x21; op2:x23; dest:x10; op1val:0xf7c080aa;  op2val:0xfffdffff
TEST_PKRR_OP(kslra8, x10, x21, x23, 0x00000000, 0xf7c080aa, 0xfffdffff, x21, x2, 0, x6)

inst_16:
// rs1==x29, rs2==x8, rd==x30, rs2_val == -65537, rs1_b1_val == 85
// opcode: kslra8 ; op1:x29; op2:x8; dest:x30; op1val:0x0355f9;  op2val:0xfffeffff
TEST_PKRR_OP(kslra8, x30, x29, x8, 0x00000000, 0x0355f9, 0xfffeffff, x29, x2, 8, x6)

inst_17:
// rs1==x28, rs2==x22, rd==x9, rs2_val == -32769, rs1_b2_val == 64, rs1_b3_val == -1
// opcode: kslra8 ; op1:x28; op2:x22; dest:x9; op1val:0xff4080bf;  op2val:0xffff7fff
TEST_PKRR_OP(kslra8, x9, x28, x22, 0x00000000, 0xff4080bf, 0xffff7fff, x28, x2, 16, x6)

inst_18:
// rs1==x3, rs2==x10, rd==x17, rs2_val == -16385, rs1_b2_val == -65, rs1_b0_val == -128, rs1_b3_val == 8
// opcode: kslra8 ; op1:x3; op2:x10; dest:x17; op1val:0x8bf1080;  op2val:0xffffbfff
TEST_PKRR_OP(kslra8, x17, x3, x10, 0x00000000, 0x8bf1080, 0xffffbfff, x3, x2, 24, x6)

inst_19:
// rs1==x25, rs2==x26, rd==x5, rs2_val == -8193, rs1_b0_val == 64, rs1_b2_val == 32, rs1_b3_val == -65
// opcode: kslra8 ; op1:x25; op2:x26; dest:x5; op1val:0xbf208040;  op2val:0xffffdfff
TEST_PKRR_OP(kslra8, x5, x25, x26, 0x00000000, 0xbf208040, 0xffffdfff, x25, x2, 32, x6)

inst_20:
// rs1==x0, rs2==x13, rd==x7, rs2_val == -4097, rs1_b0_val == -1, rs1_b1_val == -9
// opcode: kslra8 ; op1:x0; op2:x13; dest:x7; op1val:0xaaf9f7ff;  op2val:0xffffefff
TEST_PKRR_OP(kslra8, x7, x0, x13, 0x00000000, 0xaaf9f7ff, 0xffffefff, x0, x2, 40, x6)

inst_21:
// rs1==x19, rs2==x0, rd==x23, rs2_val == -2049, rs1_b2_val == -5
// opcode: kslra8 ; op1:x19; op2:x0; dest:x23; op1val:0xbffb8080;  op2val:0x0
TEST_PKRR_OP(kslra8, x23, x19, x0, 0x00000000, 0xbffb8080, 0x0, x19, x2, 48, x6)

inst_22:
// rs1==x17, rs2==x20, rd==x16, rs2_val == -1025, rs1_b1_val == 1, rs1_b0_val == -5, rs1_b2_val == 85
// opcode: kslra8 ; op1:x17; op2:x20; dest:x16; op1val:0x75501fb;  op2val:0xfffffbff
TEST_PKRR_OP(kslra8, x16, x17, x20, 0x00000000, 0x75501fb, 0xfffffbff, x17, x2, 56, x6)

inst_23:
// rs1==x7, rs2==x21, rd==x1, rs2_val == -513, rs1_b3_val == -33
// opcode: kslra8 ; op1:x7; op2:x21; dest:x1; op1val:0xdf060305;  op2val:0xfffffdff
TEST_PKRR_OP(kslra8, x1, x7, x21, 0x00000000, 0xdf060305, 0xfffffdff, x7, x2, 64, x6)

inst_24:
// rs1==x5, rs2==x12, rd==x8, rs2_val == -257, 
// opcode: kslra8 ; op1:x5; op2:x12; dest:x8; op1val:0xaabf1005;  op2val:0xfffffeff
TEST_PKRR_OP(kslra8, x8, x5, x12, 0x00000000, 0xaabf1005, 0xfffffeff, x5, x2, 72, x6)

inst_25:
// rs1==x14, rs2==x18, rd==x3, rs2_val == -129, rs1_b2_val == 8
// opcode: kslra8 ; op1:x14; op2:x18; dest:x3; op1val:0xdf08dffe;  op2val:0xffffff7f
TEST_PKRR_OP(kslra8, x3, x14, x18, 0x00000000, 0xdf08dffe, 0xffffff7f, x14, x2, 80, x6)

inst_26:
// rs1==x9, rs2==x28, rd==x27, rs2_val == -65, rs1_b3_val == 1
// opcode: kslra8 ; op1:x9; op2:x28; dest:x27; op1val:0x10755fc;  op2val:0xffffffbf
TEST_PKRR_OP(kslra8, x27, x9, x28, 0x00000000, 0x10755fc, 0xffffffbf, x9, x2, 88, x6)

inst_27:
// rs1==x27, rs2==x16, rd==x19, rs2_val == -33, rs1_b3_val == 4
// opcode: kslra8 ; op1:x27; op2:x16; dest:x19; op1val:0x4fdf607;  op2val:0xffffffdf
TEST_PKRR_OP(kslra8, x19, x27, x16, 0x00000000, 0x4fdf607, 0xffffffdf, x27, x2, 96, x6)

inst_28:
// rs1==x1, rs2==x24, rd==x29, rs2_val == -17, rs1_b3_val == 32
// opcode: kslra8 ; op1:x1; op2:x24; dest:x29; op1val:0x20bf07c0;  op2val:0xffffffef
TEST_PKRR_OP(kslra8, x29, x1, x24, 0x00000000, 0x20bf07c0, 0xffffffef, x1, x2, 104, x6)

inst_29:
// rs1==x4, rs2==x3, rd==x28, rs2_val == -9, 
// opcode: kslra8 ; op1:x4; op2:x3; dest:x28; op1val:0xbf0655fc;  op2val:0xfffffff7
TEST_PKRR_OP(kslra8, x28, x4, x3, 0x00000000, 0xbf0655fc, 0xfffffff7, x4, x2, 112, x6)

inst_30:
// rs1==x22, rs2==x6, rd==x4, rs2_val == -5, 
// opcode: kslra8 ; op1:x22; op2:x6; dest:x4; op1val:0xbffafa06;  op2val:0xfffffffb
TEST_PKRR_OP(kslra8, x4, x22, x6, 0x00000000, 0xbffafa06, 0xfffffffb, x22, x2, 120, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x24, rs2==x17, rd==x2, rs1_b0_val == -17, rs2_val == 536870912
// opcode: kslra8 ; op1:x24; op2:x17; dest:x2; op1val:0x6093fef;  op2val:0x20000000
TEST_PKRR_OP(kslra8, x2, x24, x17, 0x00000000, 0x6093fef, 0x20000000, x24, x1, 0, x3)

inst_32:
// rs1_b0_val == -3, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x60801fd;  op2val:0xffffffbf
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x60801fd, 0xffffffbf, x30, x1, 8, x3)

inst_33:
// rs1_b0_val == 32, rs2_val == 4
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf606fc20;  op2val:0x4
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf606fc20, 0x4, x30, x1, 16, x3)

inst_34:
// rs1_b0_val == 0, rs2_val == 2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fa0600;  op2val:0x2
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x9fa0600, 0x2, x30, x1, 24, x3)

inst_35:
// rs2_val == -1431655766, rs1_b1_val == 0, rs1_b3_val == 64
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40bf0010;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x40bf0010, 0xaaaaaaaa, x30, x1, 32, x3)

inst_36:
// rs2_val == -3, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x400300f6;  op2val:0xfffffffd
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x400300f6, 0xfffffffd, x30, x1, 40, x3)

inst_37:
// rs2_val == -2, rs1_b1_val == 2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40050204;  op2val:0xfffffffe
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x40050204, 0xfffffffe, x30, x1, 48, x3)

inst_38:
// rs2_val == -2147483648, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f8ff;  op2val:0x80000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x20f8ff, 0x80000000, x30, x1, 56, x3)

inst_39:
// rs2_val == 1073741824, rs1_b2_val == 16, rs1_b1_val == -1
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe;  op2val:0x40000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x10fffe, 0x40000000, x30, x1, 64, x3)

inst_40:
// rs2_val == 268435456, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff08;  op2val:0x10000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x20fbff08, 0x10000000, x30, x1, 72, x3)

inst_41:
// rs2_val == 134217728, rs1_b1_val == 8
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x50408f8;  op2val:0x8000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x50408f8, 0x8000000, x30, x1, 80, x3)

inst_42:
// rs2_val == 67108864, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3dffe03;  op2val:0x4000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3dffe03, 0x4000000, x30, x1, 88, x3)

inst_43:
// rs2_val == 33554432, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf75520fc;  op2val:0x2000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf75520fc, 0x2000000, x30, x1, 96, x3)

inst_44:
// rs2_val == 16777216, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9df0720;  op2val:0x1000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf9df0720, 0x1000000, x30, x1, 104, x3)

inst_45:
// rs2_val == 8388608, rs1_b1_val == -3, rs1_b2_val == -9
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7fdc0;  op2val:0x800000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x40f7fdc0, 0x800000, x30, x1, 112, x3)

inst_46:
// rs2_val == 4194304, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x920dfef;  op2val:0x400000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x920dfef, 0x400000, x30, x1, 120, x3)

inst_47:
// rs2_val == 2097152, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f810f9;  op2val:0x200000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3f810f9, 0x200000, x30, x1, 128, x3)

inst_48:
// rs2_val == 1048576, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x55ff20aa;  op2val:0x100000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x55ff20aa, 0x100000, x30, x1, 136, x3)

inst_49:
// rs2_val == 524288, rs1_b3_val == 127
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffbfc07;  op2val:0x80000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x7ffbfc07, 0x80000, x30, x1, 144, x3)

inst_50:
// rs2_val == 262144, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fa10aa;  op2val:0x40000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x4fa10aa, 0x40000, x30, x1, 152, x3)

inst_51:
// rs2_val == 1, rs1_b3_val == 16
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1009aa08;  op2val:0x1
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x1009aa08, 0x1, x30, x1, 160, x3)

inst_52:
// rs1_b3_val == -17, rs2_val == 65536
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffaf6ef;  op2val:0x10000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xeffaf6ef, 0x10000, x30, x1, 168, x3)

inst_53:
// rs1_b3_val == -2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef902fa;  op2val:0x10000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xfef902fa, 0x10000000, x30, x1, 176, x3)

inst_54:
// rs1_b3_val == 2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x204f709;  op2val:0x0
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x204f709, 0x0, x30, x1, 184, x3)

inst_55:
// rs1_b2_val == -86, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9aa0606;  op2val:0x7
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf9aa0606, 0x7, x30, x1, 192, x3)

inst_56:
// rs2_val == 8, rs1_b1_val == 127
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fdf7ffd;  op2val:0x8
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3fdf7ffd, 0x8, x30, x1, 200, x3)

inst_57:
// rs1_b2_val == -17, rs1_b1_val == -5
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3effb3f;  op2val:0xffffffbf
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3effb3f, 0xffffffbf, x30, x1, 208, x3)

inst_58:
// rs1_b2_val == -2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffe3ff8;  op2val:0xfffffffc
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xdffe3ff8, 0xfffffffc, x30, x1, 216, x3)

inst_59:
// rs1_b2_val == 2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x102f908;  op2val:0x100000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x102f908, 0x100000, x30, x1, 224, x3)

inst_60:
// rs1_b2_val == 0, rs1_b1_val == 64
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0004009;  op2val:0x5
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xc0004009, 0x5, x30, x1, 232, x3)

inst_61:
// rs1_b1_val == -17, rs2_val == 4096, rs1_b0_val == 127
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ffef7f;  op2val:0x1000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x5ffef7f, 0x1000, x30, x1, 240, x3)

inst_62:
// rs2_val == 131072, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2aaf9aa;  op2val:0x20000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x2aaf9aa, 0x20000, x30, x1, 248, x3)

inst_63:
// rs2_val == 32768, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fe0407;  op2val:0x8000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf8fe0407, 0x8000, x30, x1, 256, x3)

inst_64:
// rs2_val == 16384, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7040140;  op2val:0x4000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x7040140, 0x4000, x30, x1, 264, x3)

inst_65:
// rs2_val == 8192, rs1_b0_val == 85
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x02fa55;  op2val:0x2000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x02fa55, 0x2000, x30, x1, 272, x3)

inst_66:
// rs2_val == 2048, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf60880fc;  op2val:0x800
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xf60880fc, 0x800, x30, x1, 280, x3)

inst_67:
// rs2_val == 1024, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f0305fc;  op2val:0x400
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3f0305fc, 0x400, x30, x1, 288, x3)

inst_68:
// rs2_val == 512, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x55020902;  op2val:0x200
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x55020902, 0x200, x30, x1, 296, x3)

inst_69:
// rs2_val == 256, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd3ff7;  op2val:0x100
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xfd3ff7, 0x100, x30, x1, 304, x3)

inst_70:
// rs2_val == 128, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffc1008;  op2val:0x80
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x7ffc1008, 0x80, x30, x1, 312, x3)

inst_71:
// rs2_val == 64, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f5520bf;  op2val:0x40
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3f5520bf, 0x40, x30, x1, 320, x3)

inst_72:
// rs2_val == 32, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f7033f;  op2val:0x20
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x2f7033f, 0x20, x30, x1, 328, x3)

inst_73:
// rs2_val == 16, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fefbfbf;  op2val:0x10
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3fefbfbf, 0x10, x30, x1, 336, x3)

inst_74:
// rs2_val == 2147483647, rs1_b0_val == 4
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fc00504;  op2val:0x7fffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0x3fc00504, 0x7fffffff, x30, x1, 344, x3)

inst_75:
// rs2_val == -536870913, rs1_b3_val == -3, rs1_b0_val == 16, rs1_b1_val == -128, rs1_b2_val == -128
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd808010;  op2val:0xdfffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xfd808010, 0xdfffffff, x30, x1, 352, x3)

inst_76:
// rs2_val == -134217729, rs1_b3_val == -5, rs1_b1_val == 4, rs1_b2_val == -3
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfd04f8;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xfbfd04f8, 0xf7ffffff, x30, x1, 360, x3)

inst_77:
// rs2_val == -4097, rs1_b0_val == -1, rs1_b1_val == -9
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf9f7ff;  op2val:0xffffefff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xaaf9f7ff, 0xffffefff, x30, x1, 368, x3)

inst_78:
// rs2_val == -2049, rs1_b2_val == -5
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffb8080;  op2val:0xfffff7ff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x00000000, 0xbffb8080, 0xfffff7ff, x30, x1, 376, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
