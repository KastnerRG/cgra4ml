
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub8 instruction of the RISC-V RV32PZicsr extension for the uksub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x22,signature_x22_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x2, rd==x30, rs1_b0_val == 0, rs1_b3_val == 251, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 223, rs2_b3_val == 85, rs2_b0_val == 4, rs2_b1_val == 253, rs1_b2_val == 255
// opcode: uksub8 ; op1:x12; op2:x2; dest:x30; op1val:0xfbffdf00;  op2val:0x5509fd04
TEST_PKRR_OP(uksub8, x30, x12, x2, 0x00000000, 0xfbffdf00, 0x5509fd04, x12, x22, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x10, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 8, rs2_b3_val == 8, rs2_b2_val == 170, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: uksub8 ; op1:x7; op2:x7; dest:x10; op1val:0x80a0b06;  op2val:0x8aa030d
TEST_PKRR_OP(uksub8, x10, x7, x7, 0x00000000, 0x80a0b06, 0x8aa030d, x7, x22, 8, x11)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x29, rd==x9, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 64, rs1_b2_val == 64, rs1_b0_val == 253, rs1_b1_val == 16
// opcode: uksub8 ; op1:x9; op2:x29; dest:x9; op1val:0x124010fd;  op2val:0x8400d04
TEST_PKRR_OP(uksub8, x9, x9, x29, 0x00000000, 0x124010fd, 0x8400d04, x9, x22, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 4, rs1_b3_val == 254, rs2_b0_val == 255
// opcode: uksub8 ; op1:x13; op2:x13; dest:x13; op1val:0xfe030603;  op2val:0x40f06ff
TEST_PKRR_OP(uksub8, x13, x13, x13, 0x00000000, 0xfe030603, 0x40f06ff, x13, x22, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x20, rd==x20, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b2_val == 191, rs2_b0_val == 239, rs2_b2_val == 254, rs1_b0_val == 239
// opcode: uksub8 ; op1:x21; op2:x20; dest:x20; op1val:0x8bf13ef;  op2val:0xefe05ef
TEST_PKRR_OP(uksub8, x20, x21, x20, 0x00000000, 0x8bf13ef, 0xefe05ef, x21, x22, 32, x11)

inst_5:
// rs1==x31, rs2==x9, rd==x0, rs2_b3_val == 170, rs2_b2_val == 191, rs1_b0_val == 251, rs1_b2_val == 8, rs2_b1_val == 0
// opcode: uksub8 ; op1:x31; op2:x9; dest:x0; op1val:0xfe080ffb;  op2val:0xaabf00ff
TEST_PKRR_OP(uksub8, x0, x31, x9, 0x00000000, 0xfe080ffb, 0xaabf00ff, x31, x22, 40, x11)

inst_6:
// rs1==x17, rs2==x28, rd==x1, rs2_b3_val == 127, rs2_b0_val == 0, rs1_b1_val == 253
// opcode: uksub8 ; op1:x17; op2:x28; dest:x1; op1val:0xfe0dfdef;  op2val:0x7f0a1300
TEST_PKRR_OP(uksub8, x1, x17, x28, 0x00000000, 0xfe0dfdef, 0x7f0a1300, x17, x22, 48, x11)

inst_7:
// rs1==x3, rs2==x19, rd==x29, rs2_b3_val == 191, rs1_b3_val == 191, rs1_b2_val == 2, rs2_b0_val == 254, rs2_b1_val == 247
// opcode: uksub8 ; op1:x3; op2:x19; dest:x29; op1val:0xbf020dfd;  op2val:0xbf0df7fe
TEST_PKRR_OP(uksub8, x29, x3, x19, 0x00000000, 0xbf020dfd, 0xbf0df7fe, x3, x22, 56, x11)

inst_8:
// rs1==x18, rs2==x21, rd==x15, rs2_b3_val == 223, rs1_b3_val == 4, rs2_b2_val == 16, rs2_b1_val == 128, rs1_b0_val == 8
// opcode: uksub8 ; op1:x18; op2:x21; dest:x15; op1val:0x4130608;  op2val:0xdf108003
TEST_PKRR_OP(uksub8, x15, x18, x21, 0x00000000, 0x4130608, 0xdf108003, x18, x22, 64, x11)

inst_9:
// rs1==x28, rs2==x8, rd==x16, rs2_b3_val == 239, rs2_b0_val == 32, rs2_b1_val == 255, rs1_b3_val == 239
// opcode: uksub8 ; op1:x28; op2:x8; dest:x16; op1val:0xef0d0703;  op2val:0xef06ff20
TEST_PKRR_OP(uksub8, x16, x28, x8, 0x00000000, 0xef0d0703, 0xef06ff20, x28, x22, 72, x11)

inst_10:
// rs1==x5, rs2==x23, rd==x2, rs2_b3_val == 247, rs1_b1_val == 85, rs2_b0_val == 8, rs1_b2_val == 253, rs2_b1_val == 64, rs2_b2_val == 85
// opcode: uksub8 ; op1:x5; op2:x23; dest:x2; op1val:0x8fd5513;  op2val:0xf7554008
TEST_PKRR_OP(uksub8, x2, x5, x23, 0x00000000, 0x8fd5513, 0xf7554008, x5, x22, 80, x11)

inst_11:
// rs1==x4, rs2==x27, rd==x6, rs2_b3_val == 251, rs1_b0_val == 128, rs2_b1_val == 85, rs1_b2_val == 16, rs1_b1_val == 247
// opcode: uksub8 ; op1:x4; op2:x27; dest:x6; op1val:0xb10f780;  op2val:0xfb1055fe
TEST_PKRR_OP(uksub8, x6, x4, x27, 0x00000000, 0xb10f780, 0xfb1055fe, x4, x22, 88, x11)

inst_12:
// rs1==x14, rs2==x0, rd==x23, rs2_b3_val == 253, rs1_b0_val == 255, rs2_b1_val == 254, rs1_b1_val == 239, rs2_b2_val == 127
// opcode: uksub8 ; op1:x14; op2:x0; dest:x23; op1val:0xef02efff;  op2val:0xfd7ffe0b
TEST_PKRR_OP(uksub8, x23, x14, x0, 0x00000000, 0xef02efff, 0xfd7ffe0b, x14, x22, 96, x11)

inst_13:
// rs1==x6, rs2==x10, rd==x5, rs2_b3_val == 254, rs1_b0_val == 247, rs1_b2_val == 4
// opcode: uksub8 ; op1:x6; op2:x10; dest:x5; op1val:0x50455f7;  op2val:0xfebf0a05
TEST_PKRR_OP(uksub8, x5, x6, x10, 0x00000000, 0x50455f7, 0xfebf0a05, x6, x22, 104, x1)

inst_14:
// rs1==x11, rs2==x16, rd==x18, rs2_b3_val == 128, rs2_b1_val == 251, rs1_b3_val == 2, rs2_b2_val == 4, rs1_b2_val == 127
// opcode: uksub8 ; op1:x11; op2:x16; dest:x18; op1val:0x27f0c08;  op2val:0x8004fbff
TEST_PKRR_OP(uksub8, x18, x11, x16, 0x00000000, 0x27f0c08, 0x8004fbff, x11, x22, 112, x1)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:
// rs1==x29, rs2==x12, rd==x3, rs2_b3_val == 64, rs1_b3_val == 253, rs2_b1_val == 127, rs1_b2_val == 223, rs2_b2_val == 255
// opcode: uksub8 ; op1:x29; op2:x12; dest:x3; op1val:0xfddf0e0c;  op2val:0x40ff7fef
TEST_PKRR_OP(uksub8, x3, x29, x12, 0x00000000, 0xfddf0e0c, 0x40ff7fef, x29, x7, 0, x1)

inst_16:
// rs1==x20, rs2==x4, rd==x12, rs2_b3_val == 32, rs1_b0_val == 191, rs1_b1_val == 64
// opcode: uksub8 ; op1:x20; op2:x4; dest:x12; op1val:0xcdf40bf;  op2val:0x2005ff06
TEST_PKRR_OP(uksub8, x12, x20, x4, 0x00000000, 0xcdf40bf, 0x2005ff06, x20, x7, 8, x1)

inst_17:
// rs1==x23, rs2==x6, rd==x31, rs2_b3_val == 16, rs2_b2_val == 239
// opcode: uksub8 ; op1:x23; op2:x6; dest:x31; op1val:0xc0c400e;  op2val:0x10ef0b05
TEST_PKRR_OP(uksub8, x31, x23, x6, 0x00000000, 0xc0c400e, 0x10ef0b05, x23, x7, 16, x1)

inst_18:
// rs1==x2, rs2==x3, rd==x19, rs2_b3_val == 2, rs1_b0_val == 223
// opcode: uksub8 ; op1:x2; op2:x3; dest:x19; op1val:0x110812df;  op2val:0x20a0f0e
TEST_PKRR_OP(uksub8, x19, x2, x3, 0x00000000, 0x110812df, 0x20a0f0e, x2, x7, 24, x1)

inst_19:
// rs1==x24, rs2==x14, rd==x17, rs2_b3_val == 1, rs1_b3_val == 170, rs2_b2_val == 128
// opcode: uksub8 ; op1:x24; op2:x14; dest:x17; op1val:0xaa05050c;  op2val:0x18012ff
TEST_PKRR_OP(uksub8, x17, x24, x14, 0x00000000, 0xaa05050c, 0x18012ff, x24, x7, 32, x1)

inst_20:
// rs1==x26, rs2==x31, rd==x28, rs2_b3_val == 255, rs1_b0_val == 1
// opcode: uksub8 ; op1:x26; op2:x31; dest:x28; op1val:0xc0c1201;  op2val:0xff40fb0d
TEST_PKRR_OP(uksub8, x28, x26, x31, 0x00000000, 0xc0c1201, 0xff40fb0d, x26, x7, 40, x1)

inst_21:
// rs1==x8, rs2==x11, rd==x26, rs2_b3_val == 0, rs1_b2_val == 170, rs1_b3_val == 223
// opcode: uksub8 ; op1:x8; op2:x11; dest:x26; op1val:0xdfaa1206;  op2val:0x137f13
TEST_PKRR_OP(uksub8, x26, x8, x11, 0x00000000, 0xdfaa1206, 0x137f13, x8, x7, 48, x1)

inst_22:
// rs1==x30, rs2==x17, rd==x27, rs2_b2_val == 223, rs2_b0_val == 223, rs1_b3_val == 85, rs1_b0_val == 254, rs1_b1_val == 8
// opcode: uksub8 ; op1:x30; op2:x17; dest:x27; op1val:0x550c08fe;  op2val:0x40df00df
TEST_PKRR_OP(uksub8, x27, x30, x17, 0x00000000, 0x550c08fe, 0x40df00df, x30, x7, 56, x1)

inst_23:
// rs1==x27, rs2==x26, rd==x25, rs2_b2_val == 247, 
// opcode: uksub8 ; op1:x27; op2:x26; dest:x25; op1val:0xe11550d;  op2val:0xaaf7fb0d
TEST_PKRR_OP(uksub8, x25, x27, x26, 0x00000000, 0xe11550d, 0xaaf7fb0d, x27, x7, 64, x1)

inst_24:
// rs1==x19, rs2==x15, rd==x22, rs2_b2_val == 251, rs1_b1_val == 1, rs2_b1_val == 239
// opcode: uksub8 ; op1:x19; op2:x15; dest:x22; op1val:0x71101ef;  op2val:0xbfbef00
TEST_PKRR_OP(uksub8, x22, x19, x15, 0x00000000, 0x71101ef, 0xbfbef00, x19, x7, 72, x1)

inst_25:
// rs1==x0, rs2==x25, rd==x11, rs2_b2_val == 253, rs1_b2_val == 128
// opcode: uksub8 ; op1:x0; op2:x25; dest:x11; op1val:0xfe800c06;  op2val:0xf7fd8012
TEST_PKRR_OP(uksub8, x11, x0, x25, 0x00000000, 0xfe800c06, 0xf7fd8012, x0, x7, 80, x3)

inst_26:
// rs1==x15, rs2==x18, rd==x4, rs1_b2_val == 0, rs2_b0_val == 64, rs2_b2_val == 32, rs1_b1_val == 32, rs2_b1_val == 16
// opcode: uksub8 ; op1:x15; op2:x18; dest:x4; op1val:0x550020fe;  op2val:0xdf201040
TEST_PKRR_OP(uksub8, x4, x15, x18, 0x00000000, 0x550020fe, 0xdf201040, x15, x7, 88, x3)

inst_27:
// rs1==x1, rs2==x5, rd==x24, rs1_b1_val == 170, 
// opcode: uksub8 ; op1:x1; op2:x5; dest:x24; op1val:0x1205aafb;  op2val:0xe0d090f
TEST_PKRR_OP(uksub8, x24, x1, x5, 0x00000000, 0x1205aafb, 0xe0d090f, x1, x7, 96, x3)

inst_28:
// rs1==x10, rs2==x22, rd==x21, rs1_b1_val == 127, rs1_b3_val == 255, rs2_b0_val == 247
// opcode: uksub8 ; op1:x10; op2:x22; dest:x21; op1val:0xff0a7ffb;  op2val:0x4fffff7
TEST_PKRR_OP(uksub8, x21, x10, x22, 0x00000000, 0xff0a7ffb, 0x4fffff7, x10, x7, 104, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:
// rs1==x22, rs2==x30, rd==x14, rs1_b1_val == 191, rs2_b0_val == 253
// opcode: uksub8 ; op1:x22; op2:x30; dest:x14; op1val:0xfd00bf11;  op2val:0xdf0600fd
TEST_PKRR_OP(uksub8, x14, x22, x30, 0x00000000, 0xfd00bf11, 0xdf0600fd, x22, x2, 0, x3)

inst_30:
// rs1==x16, rs2==x1, rd==x8, rs1_b1_val == 251, rs1_b0_val == 2
// opcode: uksub8 ; op1:x16; op2:x1; dest:x8; op1val:0x280fb02;  op2val:0xefd0005
TEST_PKRR_OP(uksub8, x8, x16, x1, 0x00000000, 0x280fb02, 0xefd0005, x16, x2, 8, x3)

inst_31:
// rs1==x25, rs2==x24, rd==x7, rs1_b1_val == 254, 
// opcode: uksub8 ; op1:x25; op2:x24; dest:x7; op1val:0xff11fe0d;  op2val:0x513effe
TEST_PKRR_OP(uksub8, x7, x25, x24, 0x00000000, 0xff11fe0d, 0x513effe, x25, x2, 16, x3)

inst_32:
// rs1_b1_val == 128, rs1_b0_val == 32, rs1_b3_val == 64
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40058020;  op2val:0x11380ff
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x40058020, 0x11380ff, x30, x2, 24, x3)

inst_33:
// rs1_b1_val == 4, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xebf0412;  op2val:0x64006df
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xebf0412, 0x64006df, x30, x2, 32, x3)

inst_34:
// rs1_b1_val == 2, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xe0f020d;  op2val:0x704ff11
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xe0f020d, 0x704ff11, x30, x2, 40, x3)

inst_35:
// rs1_b1_val == 255, rs2_b0_val == 16, rs1_b3_val == 0, rs2_b2_val == 2
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x09ff06;  op2val:0xc021010
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x09ff06, 0xc021010, x30, x2, 48, x3)

inst_36:
// rs1_b1_val == 0, rs2_b1_val == 2
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x30d0007;  op2val:0x108002f7
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x30d0007, 0x108002f7, x30, x2, 56, x3)

inst_37:
// rs1_b0_val == 170, rs2_b2_val == 8, rs2_b1_val == 8
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x040daa;  op2val:0xa080813
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x040daa, 0xa080813, x30, x2, 64, x3)

inst_38:
// rs1_b0_val == 85, rs2_b0_val == 2, rs1_b2_val == 254
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x12fe0a55;  op2val:0xaa0b02
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x12fe0a55, 0xaa0b02, x30, x2, 72, x3)

inst_39:
// rs1_b0_val == 127, rs1_b3_val == 1
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x103107f;  op2val:0x200b02ef
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x103107f, 0x200b02ef, x30, x2, 80, x3)

inst_40:
// rs2_b1_val == 4, rs1_b2_val == 32
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x320df03;  op2val:0x3ef04fd
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x320df03, 0x3ef04fd, x30, x2, 88, x3)

inst_41:
// rs2_b1_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaff01fe;  op2val:0xa0b0140
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xaaff01fe, 0xa0b0140, x30, x2, 96, x3)

inst_42:
// rs2_b0_val == 170, rs2_b1_val == 191
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55030601;  op2val:0x10cbfaa
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x55030601, 0x10cbfaa, x30, x2, 104, x3)

inst_43:
// rs2_b0_val == 85, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4008efaa;  op2val:0xd200355
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x4008efaa, 0xd200355, x30, x2, 112, x3)

inst_44:
// rs2_b0_val == 127, rs1_b3_val == 32
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fdf705;  op2val:0x1011ff7f
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x20fdf705, 0x1011ff7f, x30, x2, 120, x3)

inst_45:
// rs2_b0_val == 191, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2040520;  op2val:0xcfe05bf
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x2040520, 0xcfe05bf, x30, x2, 128, x3)

inst_46:
// rs2_b0_val == 251, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x840f713;  op2val:0x9bf40fb
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x840f713, 0x9bf40fb, x30, x2, 136, x3)

inst_47:
// rs2_b0_val == 128, rs1_b2_val == 247
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6f7010b;  op2val:0x2051180
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x6f7010b, 0x2051180, x30, x2, 144, x3)

inst_48:
// rs2_b0_val == 1, rs1_b0_val == 64
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x70e1240;  op2val:0xef040001
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x70e1240, 0xef040001, x30, x2, 152, x3)

inst_49:
// rs1_b3_val == 127, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fbfaa03;  op2val:0x400f0820
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x7fbfaa03, 0x400f0820, x30, x2, 160, x3)

inst_50:
// rs1_b0_val == 16, rs2_b1_val == 223
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40030010;  op2val:0x12efdf40
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x40030010, 0x12efdf40, x30, x2, 168, x3)

inst_51:
// rs1_b3_val == 128, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdbf13;  op2val:0x130e137f
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x80fdbf13, 0x130e137f, x30, x2, 176, x3)

inst_52:
// rs1_b0_val == 4, rs1_b3_val == 16
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10050904;  op2val:0xc110813
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x10050904, 0xc110813, x30, x2, 184, x3)

inst_53:
// rs2_b2_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7f07;  op2val:0xa01dff7
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x40f7f07, 0xa01dff7, x30, x2, 192, x3)

inst_54:
// rs1_b2_val == 85, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x105507f7;  op2val:0x550c02f7
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x105507f7, 0x550c02f7, x30, x2, 200, x3)

inst_55:
// rs2_b2_val == 0, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7df550e;  op2val:0x9007ffe
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x7df550e, 0x9007ffe, x30, x2, 208, x3)

inst_56:
// rs2_b1_val == 170, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0c037f;  op2val:0x7f55aa08
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xd0c037f, 0x7f55aa08, x30, x2, 216, x3)

inst_57:
// rs1_b2_val == 239, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xcef0bfd;  op2val:0xc030601
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xcef0bfd, 0xc030601, x30, x2, 224, x3)

inst_58:
// rs1_b2_val == 251, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fb0100;  op2val:0x6110c02
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x80fb0100, 0x6110c02, x30, x2, 232, x3)

inst_59:
// rs2_b1_val == 32, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xcaadf04;  op2val:0xaaaa20fb
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xcaadf04, 0xaaaa20fb, x30, x2, 240, x3)

inst_60:
// rs1_b2_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x401fe0e;  op2val:0xf705ef03
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0x401fe0e, 0xf705ef03, x30, x2, 248, x3)

inst_61:
// rs1_b3_val == 247, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7040909;  op2val:0xd0f03fd
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xf7040909, 0xd0f03fd, x30, x2, 256, x3)

inst_62:
// rs2_b3_val == 253, rs1_b0_val == 255, rs2_b1_val == 254, rs1_b1_val == 239, rs2_b2_val == 127
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xef02efff;  op2val:0xfd7ffe0b
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x00000000, 0xef02efff, 0xfd7ffe0b, x30, x2, 264, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x22_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x22_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
