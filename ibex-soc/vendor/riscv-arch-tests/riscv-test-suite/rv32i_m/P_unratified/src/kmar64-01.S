
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmar64 instruction of the RISC-V RV32PZicsr extension for the kmar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x28,signature_x28_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x20, rd==x10, rs1_w0_val == -2147483648, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: kmar64 ; op1:x8; op2:x20; dest:x10; op1val:0x80000000;  op2val:0xc0000000
TEST_PK64_PNN_OP(kmar64, x10, x11, x8, x20, 0x00000000, 0, 0x80000000, 0xc0000000, x8, x28, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x22, rs1_w0_val == rs2_w0_val, rs2_w0_val == 2147483647, rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: kmar64 ; op1:x16; op2:x16; dest:x22; op1val:0x7fffffff;  op2val:0x7fffffff
TEST_PK64_PNN_OP(kmar64, x22, x23, x16, x16, 0x00000000, 0, 0x7fffffff, 0x7fffffff, x16, x28, 12, x7)

inst_2:
// rs1 == rd != rs2, rs1==x2, rs2==x23, rd==x2, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -32769
// opcode: kmar64 ; op1:x2; op2:x23; dest:x2; op1val:0xffff7fff;  op2val:0x3fffffff
TEST_PK64_PNN_OP(kmar64, x2, x3, x2, x23, 0x00000000, 0, 0xffff7fff, 0x3fffffff, x2, x28, 24, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 134217728, rs2_w0_val == -16385
// opcode: kmar64 ; op1:x12; op2:x12; dest:x12; op1val:0x08000000;  op2val:0xffffbfff
TEST_PK64_PNN_OP(kmar64, x12, x13, x12, x12, 0x00000000, 0, 0x08000000, 0xffffbfff, x12, x28, 36, x7)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x4, rd==x4, rs2_w0_val == -1431655766, rs1_w0_val == -129
// opcode: kmar64 ; op1:x3; op2:x4; dest:x4; op1val:0xffffff7f;  op2val:0xaaaaaaaa
TEST_PK64_PNN_OP(kmar64, x4, x5, x3, x4, 0x00000000, 0, 0xffffff7f, 0xaaaaaaaa, x3, x28, 48, x7)

inst_5:
// rs1==x10, rs2==x3, rd==x26, rs2_w0_val == 1431655765, rs1_w0_val == -1025
// opcode: kmar64 ; op1:x10; op2:x3; dest:x26; op1val:0xfffffbff;  op2val:0x55555555
TEST_PK64_PNN_OP(kmar64, x26, x27, x10, x3, 0x00000000, 0, 0xfffffbff, 0x55555555, x10, x28, 60, x7)

inst_6:
// rs1==x17, rs2==x5, rd==x16, rs2_w0_val == -1073741825, rs1_w0_val == 32768
// opcode: kmar64 ; op1:x17; op2:x5; dest:x16; op1val:0x00008000;  op2val:0xbfffffff
TEST_PK64_PNN_OP(kmar64, x16, x17, x17, x5, 0x00000000, 0, 0x00008000, 0xbfffffff, x17, x28, 72, x7)

inst_7:
// rs1==x26, rs2==x10, rd==x14, rs2_w0_val == -536870913, 
// opcode: kmar64 ; op1:x26; op2:x10; dest:x14; op1val:0xfffffff6;  op2val:0xdfffffff
TEST_PK64_PNN_OP(kmar64, x14, x15, x26, x10, 0x00000000, 0, 0xfffffff6, 0xdfffffff, x26, x28, 84, x7)

inst_8:
// rs1==x25, rs2==x6, rd==x8, rs2_w0_val == -268435457, rs1_w0_val == 128
// opcode: kmar64 ; op1:x25; op2:x6; dest:x8; op1val:0x00000080;  op2val:0xefffffff
TEST_PK64_PNN_OP(kmar64, x8, x9, x25, x6, 0x00000000, 0, 0x00000080, 0xefffffff, x25, x28, 96, x7)

inst_9:
// rs1==x11, rs2==x14, rd==x24, rs2_w0_val == -134217729, rs1_w0_val == -4097
// opcode: kmar64 ; op1:x11; op2:x14; dest:x24; op1val:0xffffefff;  op2val:0xf7ffffff
TEST_PK64_PNN_OP(kmar64, x24, x25, x11, x14, 0x00000000, 0, 0xffffefff, 0xf7ffffff, x11, x28, 108, x7)

inst_10:
// rs1==x13, rs2==x21, rd==x6, rs2_w0_val == -67108865, rs1_w0_val == -2097153
// opcode: kmar64 ; op1:x13; op2:x21; dest:x6; op1val:0xffdfffff;  op2val:0xfbffffff
TEST_PK64_PNN_OP(kmar64, x6, x7, x13, x21, 0x00000000, 0, 0xffdfffff, 0xfbffffff, x13, x28, 120, x7)

inst_11:
// rs1==x9, rs2==x1, rd==x18, rs2_w0_val == -33554433, rs1_w0_val == 1048576
// opcode: kmar64 ; op1:x9; op2:x1; dest:x18; op1val:0x00100000;  op2val:0xfdffffff
TEST_PK64_PNN_OP(kmar64, x18, x19, x9, x1, 0x00000000, 0, 0x00100000, 0xfdffffff, x9, x28, 132, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_12:
// rs1==x5, rs2==x9, rd==x28, rs2_w0_val == -16777217, rs1_w0_val == 4
// opcode: kmar64 ; op1:x5; op2:x9; dest:x28; op1val:0x00000004;  op2val:0xfeffffff
TEST_PK64_PNN_OP(kmar64, x28, x29, x5, x9, 0x00000000, 0, 0x00000004, 0xfeffffff, x5, x1, 0, x3)

inst_13:
// rs1==x22, rs2==x31, rd==x30, rs2_w0_val == -8388609, 
// opcode: kmar64 ; op1:x22; op2:x31; dest:x30; op1val:0xffffefff;  op2val:0xff7fffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x22, x31, 0x00000000, 0, 0xffffefff, 0xff7fffff, x22, x1, 12, x3)

inst_14:
// rs1==x21, rs2==x11, rd==x20, rs2_w0_val == -4194305, rs1_w0_val == -33
// opcode: kmar64 ; op1:x21; op2:x11; dest:x20; op1val:0xffffffdf;  op2val:0xffbfffff
TEST_PK64_PNN_OP(kmar64, x20, x21, x21, x11, 0x00000000, 0, 0xffffffdf, 0xffbfffff, x21, x1, 24, x3)

inst_15:
// rs1==x30, rs2==x0, rs2_w0_val == -2097153, rs1_w0_val == -33554433
// opcode: kmar64 ; op1:x30; op2:x0; dest:x24; op1val:0xfdffffff;  op2val:0xffdfffff
TEST_PK64_PNN_OP(kmar64, x24, x25, x30, x0, 0x00000000, 0, 0xfdffffff, 0xffdfffff, x30, x1, 36, x3)

inst_16:
// rs1==x6, rs2==x13, rs2_w0_val == -1048577, 
// opcode: kmar64 ; op1:x6; op2:x13; dest:x18; op1val:0xfffffffc;  op2val:0xffefffff
TEST_PK64_PNN_OP(kmar64, x18, x19, x6, x13, 0x00000000, 0, 0xfffffffc, 0xffefffff, x6, x1, 48, x3)

inst_17:
// rs1==x31, rs2==x15, rs2_w0_val == -524289, 
// opcode: kmar64 ; op1:x31; op2:x15; dest:x28; op1val:0x00000080;  op2val:0xfff7ffff
TEST_PK64_PNN_OP(kmar64, x28, x29, x31, x15, 0x00000000, 0, 0x00000080, 0xfff7ffff, x31, x1, 60, x3)

inst_18:
// rs1==x0, rs2==x7, rs2_w0_val == -262145, rs1_w0_val == -2049
// opcode: kmar64 ; op1:x0; op2:x7; dest:x18; op1val:0xfffff7ff;  op2val:0xfffbffff
TEST_PK64_PNN_OP(kmar64, x18, x19, x0, x7, 0x00000000, 0, 0xfffff7ff, 0xfffbffff, x0, x1, 72, x3)

inst_19:
// rs1==x23, rs2==x8, rs2_w0_val == -131073, 
// opcode: kmar64 ; op1:x23; op2:x8; dest:x28; op1val:0xfffff7ff;  op2val:0xfffdffff
TEST_PK64_PNN_OP(kmar64, x28, x29, x23, x8, 0x00000000, 0, 0xfffff7ff, 0xfffdffff, x23, x1, 84, x3)

inst_20:
// rs1==x7, rs2==x30, rs2_w0_val == -65537, rs1_w0_val == -536870913
// opcode: kmar64 ; op1:x7; op2:x30; dest:x22; op1val:0xdfffffff;  op2val:0xfffeffff
TEST_PK64_PNN_OP(kmar64, x22, x23, x7, x30, 0x00000000, 0, 0xdfffffff, 0xfffeffff, x7, x1, 96, x3)

inst_21:
// rs1==x29, rs2==x27, rs2_w0_val == -32769, 
// opcode: kmar64 ; op1:x29; op2:x27; dest:x14; op1val:0x00000005;  op2val:0xffff7fff
TEST_PK64_PNN_OP(kmar64, x14, x15, x29, x27, 0x00000000, 0, 0x00000005, 0xffff7fff, x29, x1, 108, x3)

inst_22:
// rs1==x4, rs2==x19, rs2_w0_val == -8193, 
// opcode: kmar64 ; op1:x4; op2:x19; dest:x30; op1val:0x80000000;  op2val:0xffffdfff
TEST_PK64_PNN_OP(kmar64, x30, x31, x4, x19, 0x00000000, 0, 0x80000000, 0xffffdfff, x4, x1, 120, x3)

inst_23:
// rs1==x24, rs2==x29, rs2_w0_val == -4097, rs1_w0_val == -3
// opcode: kmar64 ; op1:x24; op2:x29; dest:x26; op1val:0xfffffffd;  op2val:0xffffefff
TEST_PK64_PNN_OP(kmar64, x26, x27, x24, x29, 0x00000000, 0, 0xfffffffd, 0xffffefff, x24, x1, 132, x3)

inst_24:
// rs1==x19, rs2==x2, rs2_w0_val == -2049, rs1_w0_val == 1
// opcode: kmar64 ; op1:x19; op2:x2; dest:x22; op1val:0x00000001;  op2val:0xfffff7ff
TEST_PK64_PNN_OP(kmar64, x22, x23, x19, x2, 0x00000000, 0, 0x00000001, 0xfffff7ff, x19, x1, 144, x3)

inst_25:
// rs1==x20, rs2==x28, rs2_w0_val == -1025, 
// opcode: kmar64 ; op1:x20; op2:x28; dest:x30; op1val:0xfffffff9;  op2val:0xfffffbff
TEST_PK64_PNN_OP(kmar64, x30, x31, x20, x28, 0x00000000, 0, 0xfffffff9, 0xfffffbff, x20, x1, 156, x5)

inst_26:
// rs1==x28, rs2==x18, rs2_w0_val == -513, rs1_w0_val == 16384
// opcode: kmar64 ; op1:x28; op2:x18; dest:x14; op1val:0x00004000;  op2val:0xfffffdff
TEST_PK64_PNN_OP(kmar64, x14, x15, x28, x18, 0x00000000, 0, 0x00004000, 0xfffffdff, x28, x1, 168, x5)

inst_27:
// rs1==x15, rs2==x24, rs2_w0_val == -257, 
// opcode: kmar64 ; op1:x15; op2:x24; dest:x30; op1val:0xffdfffff;  op2val:0xfffffeff
TEST_PK64_PNN_OP(kmar64, x30, x31, x15, x24, 0x00000000, 0, 0xffdfffff, 0xfffffeff, x15, x1, 180, x5)

inst_28:
// rs1==x27, rs2==x22, rs2_w0_val == -129, 
// opcode: kmar64 ; op1:x27; op2:x22; dest:x12; op1val:0xfffffbff;  op2val:0xffffff7f
TEST_PK64_PNN_OP(kmar64, x12, x13, x27, x22, 0x00000000, 0, 0xfffffbff, 0xffffff7f, x27, x1, 192, x5)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_29:
// rs1==x18, rs2==x26, rs2_w0_val == -65, rs1_w0_val == -2
// opcode: kmar64 ; op1:x18; op2:x26; dest:x2; op1val:0xfffffffe;  op2val:0xffffffbf
TEST_PK64_PNN_OP(kmar64, x2, x3, x18, x26, 0x00000000, 0, 0xfffffffe, 0xffffffbf, x18, x4, 0, x5)

inst_30:
// rs1==x1, rs2==x25, rs2_w0_val == -33, rs1_w0_val == 262144
// opcode: kmar64 ; op1:x1; op2:x25; dest:x26; op1val:0x00040000;  op2val:0xffffffdf
TEST_PK64_PNN_OP(kmar64, x26, x27, x1, x25, 0x00000000, 0, 0x00040000, 0xffffffdf, x1, x4, 12, x5)

inst_31:
// rs1==x14, rs2==x17, rs2_w0_val == -17, 
// opcode: kmar64 ; op1:x14; op2:x17; dest:x22; op1val:0xfffffff9;  op2val:0xffffffef
TEST_PK64_PNN_OP(kmar64, x22, x23, x14, x17, 0x00000000, 0, 0xfffffff9, 0xffffffef, x14, x4, 24, x5)

inst_32:
// rs2_w0_val == -9, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffff8;  op2val:0xfffffff7
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffff8, 0xfffffff7, x31, x4, 36, x5)

inst_33:
// rs2_w0_val == -5, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000006;  op2val:0xfffffffb
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000006, 0xfffffffb, x31, x4, 48, x5)

inst_34:
// rs2_w0_val == -3, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00100000;  op2val:0xfffffffd
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00100000, 0xfffffffd, x31, x4, 60, x5)

inst_35:
// rs2_w0_val == -2, rs1_w0_val == 256
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000100;  op2val:0xfffffffe
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000100, 0xfffffffe, x31, x4, 72, x5)

inst_36:
// rs2_w0_val == -2147483648, rs1_w0_val == -17
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffef;  op2val:0x80000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffef, 0x80000000, x31, x4, 84, x5)

inst_37:
// rs2_w0_val == 1073741824, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffff7f;  op2val:0x40000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffff7f, 0x40000000, x31, x4, 96, x5)

inst_38:
// rs2_w0_val == 536870912, rs1_w0_val == 4096
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00001000;  op2val:0x20000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00001000, 0x20000000, x31, x4, 108, x5)

inst_39:
// rs2_w0_val == 268435456, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x80000000;  op2val:0x10000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x80000000, 0x10000000, x31, x4, 120, x5)

inst_40:
// rs2_w0_val == 134217728, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xdfffffff;  op2val:0x08000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xdfffffff, 0x08000000, x31, x4, 132, x5)

inst_41:
// rs2_w0_val == 67108864, rs1_w0_val == 8388608
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00800000;  op2val:0x04000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00800000, 0x04000000, x31, x4, 144, x5)

inst_42:
// rs2_w0_val == 33554432, rs1_w0_val == 65536
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00010000;  op2val:0x02000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00010000, 0x02000000, x31, x4, 156, x5)

inst_43:
// rs2_w0_val == 16777216, rs1_w0_val == -16777217
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfeffffff;  op2val:0x01000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfeffffff, 0x01000000, x31, x4, 168, x5)

inst_44:
// rs2_w0_val == 8388608, rs1_w0_val == 524288
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00080000;  op2val:0x00800000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00080000, 0x00800000, x31, x4, 180, x5)

inst_45:
// rs2_w0_val == 4194304, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00008000;  op2val:0x00400000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00008000, 0x00400000, x31, x4, 192, x5)

inst_46:
// rs2_w0_val == 2097152, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000006;  op2val:0x00200000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000006, 0x00200000, x31, x4, 204, x5)

inst_47:
// rs1_w0_val == 2048, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000800;  op2val:0x40000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000800, 0x40000000, x31, x4, 216, x5)

inst_48:
// rs1_w0_val == 1024, rs2_w0_val == 0
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000400;  op2val:0x00000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000400, 0x00000000, x31, x4, 228, x5)

inst_49:
// rs1_w0_val == 512, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000200;  op2val:0x80000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000200, 0x80000000, x31, x4, 240, x5)

inst_50:
// rs1_w0_val == 64, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000040;  op2val:0x00000005
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000040, 0x00000005, x31, x4, 252, x5)

inst_51:
// rs1_w0_val == 32, rs2_w0_val == 1
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000020;  op2val:0x00000001
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000020, 0x00000001, x31, x4, 264, x5)

inst_52:
// rs1_w0_val == 16, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000010;  op2val:0x00000006
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000010, 0x00000006, x31, x4, 276, x5)

inst_53:
// rs1_w0_val == 8, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000008;  op2val:0xc0000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000008, 0xc0000000, x31, x4, 288, x5)

inst_54:
// rs1_w0_val == 2, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000002;  op2val:0x00000007
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000002, 0x00000007, x31, x4, 300, x5)

inst_55:
// rs1_w0_val == 0, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000000;  op2val:0x40000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000000, 0x40000000, x31, x4, 312, x5)

inst_56:
// rs1_w0_val == -1, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffff;  op2val:0xffffbfff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffff, 0xffffbfff, x31, x4, 324, x5)

inst_57:
// rs2_w0_val == 1048576, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffff;  op2val:0x00100000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffff, 0x00100000, x31, x4, 336, x5)

inst_58:
// rs2_w0_val == 524288, rs1_w0_val == 2097152
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00200000;  op2val:0x00080000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00200000, 0x00080000, x31, x4, 348, x5)

inst_59:
// rs2_w0_val == 262144, rs1_w0_val == 4194304
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00400000;  op2val:0x00040000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00400000, 0x00040000, x31, x4, 360, x5)

inst_60:
// rs2_w0_val == 131072, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000080;  op2val:0x00020000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000080, 0x00020000, x31, x4, 372, x5)

inst_61:
// rs2_w0_val == 65536, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xc0000000;  op2val:0x00010000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xc0000000, 0x00010000, x31, x4, 384, x5)

inst_62:
// rs2_w0_val == 32768, rs1_w0_val == -513
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffdff;  op2val:0x00008000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffdff, 0x00008000, x31, x4, 396, x5)

inst_63:
// rs2_w0_val == 16384, rs1_w0_val == 16777216
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x01000000;  op2val:0x00004000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x01000000, 0x00004000, x31, x4, 408, x5)

inst_64:
// rs2_w0_val == 8192, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00200000;  op2val:0x00002000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00200000, 0x00002000, x31, x4, 420, x5)

inst_65:
// rs2_w0_val == 4096, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000005;  op2val:0x00001000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000005, 0x00001000, x31, x4, 432, x5)

inst_66:
// rs2_w0_val == 2048, rs1_w0_val == -262145
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffbffff;  op2val:0x00000800
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffbffff, 0x00000800, x31, x4, 444, x5)

inst_67:
// rs2_w0_val == 1024, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000005;  op2val:0x00000400
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000005, 0x00000400, x31, x4, 456, x5)

inst_68:
// rs2_w0_val == 512, rs1_w0_val == -268435457
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xefffffff;  op2val:0x00000200
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xefffffff, 0x00000200, x31, x4, 468, x5)

inst_69:
// rs2_w0_val == 256, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffff7f;  op2val:0x00000100
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffff7f, 0x00000100, x31, x4, 480, x5)

inst_70:
// rs2_w0_val == 128, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000003;  op2val:0x00000080
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000003, 0x00000080, x31, x4, 492, x5)

inst_71:
// rs2_w0_val == 64, rs1_w0_val == -65
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffffbf;  op2val:0x00000040
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffffbf, 0x00000040, x31, x4, 504, x5)

inst_72:
// rs2_w0_val == 32, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00040000;  op2val:0x00000020
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00040000, 0x00000020, x31, x4, 516, x5)

inst_73:
// rs2_w0_val == 16, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffff7fff;  op2val:0x00000010
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffff7fff, 0x00000010, x31, x4, 528, x5)

inst_74:
// rs2_w0_val == 8, rs1_w0_val == 131072
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00020000;  op2val:0x00000008
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00020000, 0x00000008, x31, x4, 540, x5)

inst_75:
// rs2_w0_val == 4, rs1_w0_val == -134217729
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ffffff;  op2val:0x00000004
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xf7ffffff, 0x00000004, x31, x4, 552, x5)

inst_76:
// rs2_w0_val == 2, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00000004;  op2val:0x00000002
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00000004, 0x00000002, x31, x4, 564, x5)

inst_77:
// rs2_w0_val == -1, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffdff;  op2val:0xffffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffdff, 0xffffffff, x31, x4, 576, x5)

inst_78:
// rs1_w0_val == -1431655766, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaaaaa;  op2val:0x00400000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaaaaa, 0x00400000, x31, x4, 588, x5)

inst_79:
// rs1_w0_val == 1431655765, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x55555555;  op2val:0x7fffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x55555555, 0x7fffffff, x31, x4, 600, x5)

inst_80:
// rs1_w0_val == -1073741825, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xbfffffff;  op2val:0x00000100
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xbfffffff, 0x00000100, x31, x4, 612, x5)

inst_81:
// rs1_w0_val == -67108865, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfbffffff;  op2val:0xfffeffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfbffffff, 0xfffeffff, x31, x4, 624, x5)

inst_82:
// rs1_w0_val == -8388609, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xff7fffff;  op2val:0x00010000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xff7fffff, 0x00010000, x31, x4, 636, x5)

inst_83:
// rs1_w0_val == -4194305, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffbfffff;  op2val:0xfbffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffbfffff, 0xfbffffff, x31, x4, 648, x5)

inst_84:
// rs1_w0_val == -257, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffeff;  op2val:0x00002000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffeff, 0x00002000, x31, x4, 660, x5)

inst_85:
// rs1_w0_val == -9, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffff7;  op2val:0xffffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffff7, 0xffffffff, x31, x4, 672, x5)

inst_86:
// rs1_w0_val == -5, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffb;  op2val:0x00000001
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffb, 0x00000001, x31, x4, 684, x5)

inst_87:
// rs1_w0_val == 1073741824, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x40000000;  op2val:0x00000003
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x40000000, 0x00000003, x31, x4, 696, x5)

inst_88:
// rs1_w0_val == 536870912, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x20000000;  op2val:0x80000000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x20000000, 0x80000000, x31, x4, 708, x5)

inst_89:
// rs1_w0_val == 268435456, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x10000000;  op2val:0xffffffbf
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x10000000, 0xffffffbf, x31, x4, 720, x5)

inst_90:
// rs1_w0_val == 67108864, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x04000000;  op2val:0x00010000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x04000000, 0x00010000, x31, x4, 732, x5)

inst_91:
// rs1_w0_val == 33554432, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x02000000;  op2val:0xfffdffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x02000000, 0xfffdffff, x31, x4, 744, x5)

inst_92:
// rs1_w0_val == -1048577, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffefffff;  op2val:0xf7ffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffefffff, 0xf7ffffff, x31, x4, 756, x5)

inst_93:
// rs1_w0_val == -16385, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffbfff;  op2val:0xffffffdf
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffbfff, 0xffffffdf, x31, x4, 768, x5)

inst_94:
// rs1_w0_val == -524289, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfff7ffff;  op2val:0xffffbfff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfff7ffff, 0xffffbfff, x31, x4, 780, x5)

inst_95:
// rs1_w0_val == -131073, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffdffff;  op2val:0x00004000
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffdffff, 0x00004000, x31, x4, 792, x5)

inst_96:
// rs1_w0_val == -65537, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffeffff;  op2val:0xfbffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffeffff, 0xfbffffff, x31, x4, 804, x5)

inst_97:
// rs1_w0_val == 8192, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x00002000;  op2val:0xfffffbff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x00002000, 0xfffffbff, x31, x4, 816, x5)

inst_98:
// rs1_w0_val == -8193, 
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xffffdfff;  op2val:0xfffffdff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xffffdfff, 0xfffffdff, x31, x4, 828, x5)

inst_99:
// rs1_w0_val == rs2_w0_val, rs2_w0_val == 2147483647, rs1_w0_val == 2147483647, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x7fffffff;  op2val:0x7fffffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x7fffffff, 0x7fffffff, x31, x4, 840, x5)

inst_100:
// rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 134217728, rs2_w0_val == -16385
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0x08000000;  op2val:0xffffbfff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0x08000000, 0xffffbfff, x31, x4, 852, x5)

inst_101:
// rs2_w0_val == -2097153, rs1_w0_val == -33554433
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfdffffff;  op2val:0xffdfffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfdffffff, 0xffdfffff, x31, x4, 864, x5)

inst_102:
// rs2_w0_val == -262145, rs1_w0_val == -2049
// opcode: kmar64 ; op1:x31; op2:x29; dest:x30; op1val:0xfffff7ff;  op2val:0xfffbffff
TEST_PK64_PNN_OP(kmar64, x30, x31, x31, x29, 0x00000000, 0, 0xfffff7ff, 0xfffbffff, x31, x4, 876, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x28_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x28_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 51*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 222*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
