
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmads instruction of the RISC-V RV32PZicsr extension for the kmads covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmads)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x15, rd==x20, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -2049, rs1_h1_val == 1
// opcode: kmads ; op1:x4; op2:x15; dest:x20; op1val:0x018000;  op2val:0xf7fffffc
TEST_PKRR_OP(kmads, x20, x4, x15, 0x00000000, 0x018000, 0xf7fffffc, x4, x5, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x3, rs1_h1_val == rs2_h1_val, rs1_h0_val == -1025, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs1_h1_val == 32
// opcode: kmads ; op1:x14; op2:x14; dest:x3; op1val:0x20fbff;  op2val:0x200009
TEST_PKRR_OP(kmads, x3, x14, x14, 0x00000000, 0x20fbff, 0x200009, x14, x5, 8, x8)

inst_2:
// rs1 == rd != rs2, rs1==x15, rs2==x9, rd==x15, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs1_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 2
// opcode: kmads ; op1:x15; op2:x9; dest:x15; op1val:0xfffd0007;  op2val:0x022000
TEST_PKRR_OP(kmads, x15, x15, x9, 0x00000000, 0xfffd0007, 0x022000, x15, x5, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -9, rs1_h0_val == 2048, rs2_h1_val == -129
// opcode: kmads ; op1:x24; op2:x24; dest:x24; op1val:0xfff70800;  op2val:0xff7f0003
TEST_PKRR_OP(kmads, x24, x24, x24, 0x00000000, 0xfff70800, 0xff7f0003, x24, x5, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x1, rd==x1, rs1_h0_val == rs2_h0_val, rs2_h1_val == -65, rs1_h1_val == -8193, rs1_h0_val == 8192
// opcode: kmads ; op1:x13; op2:x1; dest:x1; op1val:0xdfff2000;  op2val:0xffbf2000
TEST_PKRR_OP(kmads, x1, x13, x1, 0x00000000, 0xdfff2000, 0xffbf2000, x13, x5, 32, x8)

inst_5:
// rs1==x25, rs2==x18, rd==x6, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 8192, rs2_h0_val == -33
// opcode: kmads ; op1:x25; op2:x18; dest:x6; op1val:0x20000800;  op2val:0x3fffffdf
TEST_PKRR_OP(kmads, x6, x25, x18, 0x00000000, 0x20000800, 0x3fffffdf, x25, x5, 40, x8)

inst_6:
// rs1==x20, rs2==x31, rd==x16, rs2_h1_val == -21846, rs2_h0_val == -257, rs1_h0_val == -65, rs1_h1_val == 512
// opcode: kmads ; op1:x20; op2:x31; dest:x16; op1val:0x200ffbf;  op2val:0xaaaafeff
TEST_PKRR_OP(kmads, x16, x20, x31, 0x00000000, 0x200ffbf, 0xaaaafeff, x20, x5, 48, x8)

inst_7:
// rs1==x31, rs2==x21, rd==x17, rs2_h1_val == 21845, rs1_h0_val == 64
// opcode: kmads ; op1:x31; op2:x21; dest:x17; op1val:0x200040;  op2val:0x55550009
TEST_PKRR_OP(kmads, x17, x31, x21, 0x00000000, 0x200040, 0x55550009, x31, x5, 56, x8)

inst_8:
// rs1==x22, rs2==x3, rd==x14, rs2_h1_val == 32767, 
// opcode: kmads ; op1:x22; op2:x3; dest:x14; op1val:0x098000;  op2val:0x7ffffffa
TEST_PKRR_OP(kmads, x14, x22, x3, 0x00000000, 0x098000, 0x7ffffffa, x22, x5, 64, x8)

inst_9:
// rs1==x21, rs2==x27, rd==x28, rs2_h1_val == -16385, rs1_h0_val == 512, rs1_h1_val == -33
// opcode: kmads ; op1:x21; op2:x27; dest:x28; op1val:0xffdf0200;  op2val:0xbfff0007
TEST_PKRR_OP(kmads, x28, x21, x27, 0x00000000, 0xffdf0200, 0xbfff0007, x21, x5, 72, x8)

inst_10:
// rs1==x16, rs2==x10, rd==x7, rs2_h1_val == -8193, rs1_h1_val == 1024, rs2_h0_val == 4096
// opcode: kmads ; op1:x16; op2:x10; dest:x7; op1val:0x400fffa;  op2val:0xdfff1000
TEST_PKRR_OP(kmads, x7, x16, x10, 0x00000000, 0x400fffa, 0xdfff1000, x16, x5, 80, x8)

inst_11:
// rs1==x27, rs2==x28, rd==x23, rs2_h1_val == -4097, rs1_h0_val == -5, rs1_h1_val == 2, rs2_h0_val == -17
// opcode: kmads ; op1:x27; op2:x28; dest:x23; op1val:0x02fffb;  op2val:0xefffffef
TEST_PKRR_OP(kmads, x23, x27, x28, 0x00000000, 0x02fffb, 0xefffffef, x27, x5, 88, x8)

inst_12:
// rs1==x28, rs2==x25, rd==x13, rs2_h1_val == -1025, rs1_h0_val == -8193, rs2_h0_val == 64, rs1_h1_val == -513
// opcode: kmads ; op1:x28; op2:x25; dest:x13; op1val:0xfdffdfff;  op2val:0xfbff0040
TEST_PKRR_OP(kmads, x13, x28, x25, 0x00000000, 0xfdffdfff, 0xfbff0040, x28, x5, 96, x8)

inst_13:
// rs1==x3, rs2==x23, rd==x18, rs2_h1_val == -513, rs2_h0_val == -5, rs1_h1_val == 64, rs1_h0_val == 1024
// opcode: kmads ; op1:x3; op2:x23; dest:x18; op1val:0x400400;  op2val:0xfdfffffb
TEST_PKRR_OP(kmads, x18, x3, x23, 0x00000000, 0x400400, 0xfdfffffb, x3, x5, 104, x8)

inst_14:
// rs1==x7, rs2==x2, rd==x10, rs2_h1_val == -257, rs1_h1_val == 16384, rs2_h0_val == -2049
// opcode: kmads ; op1:x7; op2:x2; dest:x10; op1val:0x40008000;  op2val:0xfefff7ff
TEST_PKRR_OP(kmads, x10, x7, x2, 0x00000000, 0x40008000, 0xfefff7ff, x7, x5, 112, x8)

inst_15:
// rs1==x19, rs2==x13, rd==x31, rs2_h1_val == -33, rs1_h0_val == 32, rs1_h1_val == -4097, rs2_h0_val == -16385
// opcode: kmads ; op1:x19; op2:x13; dest:x31; op1val:0xefff0020;  op2val:0xffdfbfff
TEST_PKRR_OP(kmads, x31, x19, x13, 0x00000000, 0xefff0020, 0xffdfbfff, x19, x5, 120, x8)

inst_16:
// rs1==x1, rs2==x0, rd==x4, rs2_h1_val == -17, rs1_h0_val == -1, rs1_h1_val == -2
// opcode: kmads ; op1:x1; op2:x0; dest:x4; op1val:0xfffeffff;  op2val:0xffeffff9
TEST_PKRR_OP(kmads, x4, x1, x0, 0x00000000, 0xfffeffff, 0xffeffff9, x1, x5, 128, x8)

inst_17:
// rs1==x17, rs2==x12, rd==x11, rs2_h1_val == -9, rs1_h0_val == -129
// opcode: kmads ; op1:x17; op2:x12; dest:x11; op1val:0x2000ff7f;  op2val:0xfff7ffef
TEST_PKRR_OP(kmads, x11, x17, x12, 0x00000000, 0x2000ff7f, 0xfff7ffef, x17, x5, 136, x8)

inst_18:
// rs1==x26, rs2==x22, rd==x25, rs2_h1_val == -5, rs1_h1_val == -32768
// opcode: kmads ; op1:x26; op2:x22; dest:x25; op1val:0x80003fff;  op2val:0xfffbfffb
TEST_PKRR_OP(kmads, x25, x26, x22, 0x00000000, 0x80003fff, 0xfffbfffb, x26, x5, 144, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x30, rs2==x26, rd==x8, rs2_h1_val == -3, rs1_h1_val == -16385, rs2_h0_val == -513
// opcode: kmads ; op1:x30; op2:x26; dest:x8; op1val:0xbfffc000;  op2val:0xfffdfdff
TEST_PKRR_OP(kmads, x8, x30, x26, 0x00000000, 0xbfffc000, 0xfffdfdff, x30, x1, 0, x3)

inst_20:
// rs1==x12, rs2==x29, rd==x21, rs2_h1_val == -2, 
// opcode: kmads ; op1:x12; op2:x29; dest:x21; op1val:0xfffcffff;  op2val:0xfffe0040
TEST_PKRR_OP(kmads, x21, x12, x29, 0x00000000, 0xfffcffff, 0xfffe0040, x12, x1, 8, x3)

inst_21:
// rs1==x8, rs2==x11, rd==x26, rs2_h1_val == -32768, rs2_h0_val == 4, rs1_h1_val == -21846, rs1_h0_val == 16
// opcode: kmads ; op1:x8; op2:x11; dest:x26; op1val:0xaaaa0010;  op2val:0x80000004
TEST_PKRR_OP(kmads, x26, x8, x11, 0x00000000, 0xaaaa0010, 0x80000004, x8, x1, 16, x3)

inst_22:
// rs1==x9, rs2==x8, rd==x30, rs2_h1_val == 16384, rs1_h0_val == 1, rs1_h1_val == -17, rs2_h0_val == 0
// opcode: kmads ; op1:x9; op2:x8; dest:x30; op1val:0xffef0001;  op2val:0x40000000
TEST_PKRR_OP(kmads, x30, x9, x8, 0x00000000, 0xffef0001, 0x40000000, x9, x1, 24, x3)

inst_23:
// rs1==x23, rs2==x7, rd==x2, rs2_h1_val == 8192, rs2_h0_val == -32768
// opcode: kmads ; op1:x23; op2:x7; dest:x2; op1val:0x2000fffc;  op2val:0x20008000
TEST_PKRR_OP(kmads, x2, x23, x7, 0x00000000, 0x2000fffc, 0x20008000, x23, x1, 32, x3)

inst_24:
// rs1==x6, rs2==x19, rd==x12, rs2_h1_val == 4096, rs1_h0_val == 0
// opcode: kmads ; op1:x6; op2:x19; dest:x12; op1val:0xfffe0000;  op2val:0x1000f7ff
TEST_PKRR_OP(kmads, x12, x6, x19, 0x00000000, 0xfffe0000, 0x1000f7ff, x6, x1, 40, x3)

inst_25:
// rs1==x18, rs2==x5, rd==x9, rs2_h1_val == 2048, rs2_h0_val == 128
// opcode: kmads ; op1:x18; op2:x5; dest:x9; op1val:0xfdff0010;  op2val:0x8000080
TEST_PKRR_OP(kmads, x9, x18, x5, 0x00000000, 0xfdff0010, 0x8000080, x18, x1, 48, x3)

inst_26:
// rs1==x11, rs2==x4, rd==x27, rs2_h1_val == 1024, rs2_h0_val == 512, rs1_h0_val == 32767
// opcode: kmads ; op1:x11; op2:x4; dest:x27; op1val:0xbfff7fff;  op2val:0x4000200
TEST_PKRR_OP(kmads, x27, x11, x4, 0x00000000, 0xbfff7fff, 0x4000200, x11, x1, 56, x3)

inst_27:
// rs1==x0, rs2==x6, rd==x5, rs2_h1_val == 512, rs2_h0_val == -3, rs1_h0_val == 256
// opcode: kmads ; op1:x0; op2:x6; dest:x5; op1val:0x20000100;  op2val:0x200fffd
TEST_PKRR_OP(kmads, x5, x0, x6, 0x00000000, 0x20000100, 0x200fffd, x0, x1, 64, x3)

inst_28:
// rs1==x2, rs2==x20, rd==x29, rs2_h1_val == 256, rs1_h0_val == 4
// opcode: kmads ; op1:x2; op2:x20; dest:x29; op1val:0x050004;  op2val:0x1000007
TEST_PKRR_OP(kmads, x29, x2, x20, 0x00000000, 0x050004, 0x1000007, x2, x1, 72, x3)

inst_29:
// rs1==x29, rs2==x17, rd==x19, rs1_h0_val == -513, rs2_h0_val == 16
// opcode: kmads ; op1:x29; op2:x17; dest:x19; op1val:0xffeffdff;  op2val:0x10000010
TEST_PKRR_OP(kmads, x19, x29, x17, 0x00000000, 0xffeffdff, 0x10000010, x29, x1, 80, x3)

inst_30:
// rs1==x5, rs2==x16, rd==x0, rs1_h0_val == -257, rs1_h1_val == 8
// opcode: kmads ; op1:x5; op2:x16; dest:x0; op1val:0x08feff;  op2val:0xaaaaf7ff
TEST_PKRR_OP(kmads, x0, x5, x16, 0x00000000, 0x08feff, 0xaaaaf7ff, x5, x1, 88, x3)

inst_31:
// rs1==x10, rs2==x30, rd==x22, rs1_h0_val == -33, rs1_h1_val == 32767
// opcode: kmads ; op1:x10; op2:x30; dest:x22; op1val:0x7fffffdf;  op2val:0xfff8ffdf
TEST_PKRR_OP(kmads, x22, x10, x30, 0x00000000, 0x7fffffdf, 0xfff8ffdf, x10, x1, 96, x3)

inst_32:
// rs1_h0_val == -17, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffef;  op2val:0xffeffffb
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfffdffef, 0xffeffffb, x30, x1, 104, x3)

inst_33:
// rs1_h0_val == -9, rs1_h1_val == -2049
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7;  op2val:0x03fffd
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xf7fffff7, 0x03fffd, x30, x1, 112, x3)

inst_34:
// rs1_h0_val == -3, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffd;  op2val:0x020010
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfff8fffd, 0x020010, x30, x1, 120, x3)

inst_35:
// rs1_h0_val == -2, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x02fffe;  op2val:0xffef0009
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x02fffe, 0xffef0009, x30, x1, 128, x3)

inst_36:
// rs1_h0_val == 16384, rs1_h1_val == -129
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xff7f4000;  op2val:0xfffbfffd
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xff7f4000, 0xfffbfffd, x30, x1, 136, x3)

inst_37:
// rs1_h0_val == 4096, rs2_h1_val == 8
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x2001000;  op2val:0x08fdff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x2001000, 0x08fdff, x30, x1, 144, x3)

inst_38:
// rs1_h0_val == 128, rs1_h1_val == -65, rs2_h0_val == -2, rs2_h1_val == 0
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080;  op2val:0x00fffe
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xffbf0080, 0x00fffe, x30, x1, 152, x3)

inst_39:
// rs1_h0_val == 8, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0008;  op2val:0xffbffff6
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xff7f0008, 0xffbffff6, x30, x1, 160, x3)

inst_40:
// rs1_h0_val == 2, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002;  op2val:0x7fff0005
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xaaaa0002, 0x7fff0005, x30, x1, 168, x3)

inst_41:
// rs2_h1_val == 128, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0009;  op2val:0x80fffa
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfffe0009, 0x80fffa, x30, x1, 176, x3)

inst_42:
// rs2_h1_val == 64, rs2_h0_val == 256, rs1_h1_val == 16
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x10fdff;  op2val:0x400100
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x10fdff, 0x400100, x30, x1, 184, x3)

inst_43:
// rs2_h1_val == 16, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x07dfff;  op2val:0x10fffe
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x07dfff, 0x10fffe, x30, x1, 192, x3)

inst_44:
// rs2_h1_val == 4, rs1_h0_val == 21845, rs2_h0_val == -9
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x015555;  op2val:0x04fff7
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x015555, 0x04fff7, x30, x1, 200, x3)

inst_45:
// rs2_h1_val == 1, rs1_h1_val == 4
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x042000;  op2val:0x01ffdf
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x042000, 0x01ffdf, x30, x1, 208, x3)

inst_46:
// rs2_h1_val == -1, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff88000;  op2val:0xffff8000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfff88000, 0xffff8000, x30, x1, 216, x3)

inst_47:
// rs2_h0_val == 16384, rs1_h1_val == -257
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffef;  op2val:0xbfff4000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfeffffef, 0xbfff4000, x30, x1, 224, x3)

inst_48:
// rs2_h0_val == 2048, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0100;  op2val:0xfffa0800
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xf7ff0100, 0xfffa0800, x30, x1, 232, x3)

inst_49:
// rs2_h0_val == 1024, rs1_h1_val == 128
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x80fffc;  op2val:0xc0000400
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x80fffc, 0xc0000400, x30, x1, 240, x3)

inst_50:
// rs2_h0_val == 32, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffec000;  op2val:0x050020
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfffec000, 0x050020, x30, x1, 248, x3)

inst_51:
// rs2_h0_val == 8, rs1_h0_val == -4097
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0x55550008
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x4000efff, 0x55550008, x30, x1, 256, x3)

inst_52:
// rs2_h0_val == 2, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005;  op2val:0x020002
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xdfff0005, 0x020002, x30, x1, 264, x3)

inst_53:
// rs2_h0_val == 1, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x09fffb;  op2val:0x000001
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x09fffb, 0x000001, x30, x1, 272, x3)

inst_54:
// rs2_h0_val == -1, rs1_h0_val == -2049
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7ff;  op2val:0xfffeffff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xffeff7ff, 0xfffeffff, x30, x1, 280, x3)

inst_55:
// rs1_h1_val == 21845, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x55554000;  op2val:0xfffd8000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x55554000, 0xfffd8000, x30, x1, 288, x3)

inst_56:
// rs2_h0_val == -1025, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x802000;  op2val:0xff7ffbff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x802000, 0xff7ffbff, x30, x1, 296, x3)

inst_57:
// rs1_h1_val == -1025, rs2_h0_val == 21845
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff8;  op2val:0xfffa5555
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfbfffff8, 0xfffa5555, x30, x1, 304, x3)

inst_58:
// rs1_h1_val == -5, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffb8000;  op2val:0x05fff7
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfffb8000, 0x05fff7, x30, x1, 312, x3)

inst_59:
// rs1_h1_val == 4096, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffe;  op2val:0x800004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x1000fffe, 0x800004, x30, x1, 320, x3)

inst_60:
// rs1_h1_val == 2048, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf;  op2val:0xfffb0006
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x800ffbf, 0xfffb0006, x30, x1, 328, x3)

inst_61:
// rs1_h1_val == 256, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x1000007;  op2val:0x800004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x1000007, 0x800004, x30, x1, 336, x3)

inst_62:
// rs2_h0_val == -65, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080;  op2val:0x100ffbf
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xefff0080, 0x100ffbf, x30, x1, 344, x3)

inst_63:
// rs2_h0_val == -21846, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x1000008;  op2val:0x5555aaaa
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x1000008, 0x5555aaaa, x30, x1, 352, x3)

inst_64:
// rs2_h0_val == 32767, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x20000100;  op2val:0x037fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x20000100, 0x037fff, x30, x1, 360, x3)

inst_65:
// rs2_h0_val == -8193, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0xfffddfff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x7fff0400, 0xfffddfff, x30, x1, 368, x3)

inst_66:
// rs2_h0_val == -4097, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005;  op2val:0x2000efff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfbff0005, 0x2000efff, x30, x1, 376, x3)

inst_67:
// rs1_h1_val == 0, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0x200ffff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x000200, 0x200ffff, x30, x1, 384, x3)

inst_68:
// rs1_h1_val == -1, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffff2000;  op2val:0xfffd7fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xffff2000, 0xfffd7fff, x30, x1, 392, x3)

inst_69:
// rs1_h0_val == -21846, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaa;  op2val:0x10ffbf
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x40aaaa, 0x10ffbf, x30, x1, 400, x3)

inst_70:
// rs2_h0_val == -129, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffa;  op2val:0xffefff7f
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfffefffa, 0xffefff7f, x30, x1, 408, x3)

inst_71:
// rs1_h0_val == -16385, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x80bfff;  op2val:0x010008
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x80bfff, 0x010008, x30, x1, 416, x3)

inst_72:
// rs1_h1_val == rs2_h1_val, rs1_h0_val == -1025, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs1_h1_val == 32
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff;  op2val:0x200009
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x20fbff, 0x200009, x30, x1, 424, x3)

inst_73:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -9, rs1_h0_val == 2048, rs2_h1_val == -129
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff70800;  op2val:0xff7f0003
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0xfff70800, 0xff7f0003, x30, x1, 432, x3)

inst_74:
// rs1_h0_val == -257, rs1_h1_val == 8
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x08feff;  op2val:0xaaaaf7ff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x00000000, 0x08feff, 0xaaaaf7ff, x30, x1, 440, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
