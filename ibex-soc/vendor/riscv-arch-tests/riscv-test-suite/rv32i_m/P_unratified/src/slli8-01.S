
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli8 instruction of the RISC-V RV32PZicsr extension for the slli8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",slli8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rd, rs1==x1, rd==x31, rs1_b0_val == 0, rs1_b3_val == 1, rs1_b1_val == 127, imm_val == 4
// opcode: slli8 ; op1:x1; dest:x31; op1val:0x1067f00;  immval:0x4
TEST_IMM_OP( slli8, x31, x1, 0x00000000, 0x1067f00, 0x4, x3, 0, x7)

inst_1:
// rs1 == rd, rs1==x22, rd==x22, imm_val == 7, rs1_b2_val == 64, rs1_b1_val == 85, rs1_b3_val == 64, rs1_b0_val == 254
// opcode: slli8 ; op1:x22; dest:x22; op1val:0x404055fe;  immval:0x7
TEST_IMM_OP( slli8, x22, x22, 0x00000000, 0x404055fe, 0x7, x3, 4, x7)

inst_2:
// rs1==x19, rd==x9, imm_val == 6, rs1_b1_val == 251, rs1_b0_val == 239
// opcode: slli8 ; op1:x19; dest:x9; op1val:0x913fbef;  immval:0x6
TEST_IMM_OP( slli8, x9, x19, 0x00000000, 0x913fbef, 0x6, x3, 8, x7)

inst_3:
// rs1==x12, rd==x10, imm_val == 5, rs1_b0_val == 191, rs1_b1_val == 2, rs1_b3_val == 8
// opcode: slli8 ; op1:x12; dest:x10; op1val:0x80902bf;  immval:0x5
TEST_IMM_OP( slli8, x10, x12, 0x00000000, 0x80902bf, 0x5, x3, 12, x7)

inst_4:
// rs1==x29, rd==x30, imm_val == 3, rs1_b0_val == 247, rs1_b1_val == 247
// opcode: slli8 ; op1:x29; dest:x30; op1val:0x311f7f7;  immval:0x3
TEST_IMM_OP( slli8, x30, x29, 0x00000000, 0x311f7f7, 0x3, x3, 16, x7)

inst_5:
// rs1==x2, rd==x20, imm_val == 2, rs1_b3_val == 127
// opcode: slli8 ; op1:x2; dest:x20; op1val:0x7f0a0ef7;  immval:0x2
TEST_IMM_OP( slli8, x20, x2, 0x00000000, 0x7f0a0ef7, 0x2, x3, 20, x7)

inst_6:
// rs1==x18, rd==x26, imm_val == 1, rs1_b1_val == 4, rs1_b2_val == 4
// opcode: slli8 ; op1:x18; dest:x26; op1val:0x7f04040d;  immval:0x1
TEST_IMM_OP( slli8, x26, x18, 0x00000000, 0x7f04040d, 0x1, x3, 24, x7)

inst_7:
// rs1==x8, rd==x28, imm_val == 0, rs1_b1_val == 255, rs1_b3_val == 239
// opcode: slli8 ; op1:x8; dest:x28; op1val:0xef13fff7;  immval:0x0
TEST_IMM_OP( slli8, x28, x8, 0x00000000, 0xef13fff7, 0x0, x3, 28, x7)

inst_8:
// rs1==x28, rd==x2, rs1_b3_val == 170, rs1_b2_val == 191, rs1_b0_val == 32, rs1_b1_val == 32
// opcode: slli8 ; op1:x28; dest:x2; op1val:0xaabf2020;  immval:0x4
TEST_IMM_OP( slli8, x2, x28, 0x00000000, 0xaabf2020, 0x4, x3, 32, x7)

inst_9:
// rs1==x9, rd==x15, rs1_b3_val == 85, rs1_b0_val == 4
// opcode: slli8 ; op1:x9; dest:x15; op1val:0x550c5504;  immval:0x3
TEST_IMM_OP( slli8, x15, x9, 0x00000000, 0x550c5504, 0x3, x3, 36, x7)

inst_10:
// rs1==x27, rd==x17, rs1_b3_val == 191, rs1_b1_val == 64, rs1_b2_val == 127
// opcode: slli8 ; op1:x27; dest:x17; op1val:0xbf7f40f7;  immval:0x6
TEST_IMM_OP( slli8, x17, x27, 0x00000000, 0xbf7f40f7, 0x6, x3, 40, x7)

inst_11:
// rs1==x25, rd==x1, rs1_b3_val == 223, rs1_b1_val == 239
// opcode: slli8 ; op1:x25; dest:x1; op1val:0xdf0ceffe;  immval:0x5
TEST_IMM_OP( slli8, x1, x25, 0x00000000, 0xdf0ceffe, 0x5, x3, 44, x7)

inst_12:
// rs1==x31, rd==x8, rs1_b3_val == 247, rs1_b2_val == 0, rs1_b0_val == 255
// opcode: slli8 ; op1:x31; dest:x8; op1val:0xf7000bff;  immval:0x6
TEST_IMM_OP( slli8, x8, x31, 0x00000000, 0xf7000bff, 0x6, x3, 48, x7)

inst_13:
// rs1==x10, rd==x16, rs1_b3_val == 251, rs1_b2_val == 170
// opcode: slli8 ; op1:x10; dest:x16; op1val:0xfbaa200e;  immval:0x1
TEST_IMM_OP( slli8, x16, x10, 0x00000000, 0xfbaa200e, 0x1, x3, 52, x7)

inst_14:
// rs1==x15, rd==x0, rs1_b3_val == 253, 
// opcode: slli8 ; op1:x15; dest:x0; op1val:0xfd0f0b12;  immval:0x3
TEST_IMM_OP( slli8, x0, x15, 0x00000000, 0xfd0f0b12, 0x3, x3, 56, x7)

inst_15:
// rs1==x30, rd==x24, rs1_b3_val == 254, 
// opcode: slli8 ; op1:x30; dest:x24; op1val:0xfe12070b;  immval:0x2
TEST_IMM_OP( slli8, x24, x30, 0x00000000, 0xfe12070b, 0x2, x3, 60, x7)

inst_16:
// rs1==x20, rd==x6, rs1_b3_val == 128, rs1_b1_val == 128, rs1_b2_val == 255
// opcode: slli8 ; op1:x20; dest:x6; op1val:0x80ff800b;  immval:0x2
TEST_IMM_OP( slli8, x6, x20, 0x00000000, 0x80ff800b, 0x2, x3, 64, x7)

inst_17:
// rs1==x0, rd==x29, rs1_b3_val == 32, rs1_b2_val == 8
// opcode: slli8 ; op1:x0; dest:x29; op1val:0x2008110a;  immval:0x5
TEST_IMM_OP( slli8, x29, x0, 0x00000000, 0x2008110a, 0x5, x3, 68, x7)

inst_18:
// rs1==x16, rd==x27, rs1_b3_val == 16, 
// opcode: slli8 ; op1:x16; dest:x27; op1val:0x10094013;  immval:0x3
TEST_IMM_OP( slli8, x27, x16, 0x00000000, 0x10094013, 0x3, x3, 72, x7)

inst_19:
// rs1==x13, rd==x5, rs1_b3_val == 4, 
// opcode: slli8 ; op1:x13; dest:x5; op1val:0x47f0f09;  immval:0x1
TEST_IMM_OP( slli8, x5, x13, 0x00000000, 0x47f0f09, 0x1, x3, 76, x7)

inst_20:
// rs1==x4, rd==x23, rs1_b3_val == 2, 
// opcode: slli8 ; op1:x4; dest:x23; op1val:0x2120605;  immval:0x4
TEST_IMM_OP( slli8, x23, x4, 0x00000000, 0x2120605, 0x4, x3, 80, x7)

inst_21:
// rs1==x26, rd==x25, rs1_b3_val == 255, rs1_b2_val == 223, rs1_b1_val == 191
// opcode: slli8 ; op1:x26; dest:x25; op1val:0xffdfbf11;  immval:0x7
TEST_IMM_OP( slli8, x25, x26, 0x00000000, 0xffdfbf11, 0x7, x3, 84, x7)

inst_22:
// rs1==x21, rd==x4, rs1_b3_val == 0, 
// opcode: slli8 ; op1:x21; dest:x4; op1val:0x00bf13;  immval:0x4
TEST_IMM_OP( slli8, x4, x21, 0x00000000, 0x00bf13, 0x4, x3, 88, x7)

inst_23:
// rs1==x17, rd==x7, rs1_b1_val == 1, rs1_b0_val == 16
// opcode: slli8 ; op1:x17; dest:x7; op1val:0xfbdf0110;  immval:0x0
TEST_IMM_OP( slli8, x7, x17, 0x00000000, 0xfbdf0110, 0x0, x3, 92, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_24:
// rs1==x5, rd==x14, rs1_b1_val == 0, rs1_b0_val == 1
// opcode: slli8 ; op1:x5; dest:x14; op1val:0x550c0001;  immval:0x6
TEST_IMM_OP( slli8, x14, x5, 0x00000000, 0x550c0001, 0x6, x1, 0, x2)

inst_25:
// rs1==x3, rd==x18, rs1_b0_val == 170, 
// opcode: slli8 ; op1:x3; dest:x18; op1val:0xf0c55aa;  immval:0x0
TEST_IMM_OP( slli8, x18, x3, 0x00000000, 0xf0c55aa, 0x0, x1, 4, x2)

inst_26:
// rs1==x24, rd==x3, rs1_b0_val == 85, 
// opcode: slli8 ; op1:x24; dest:x3; op1val:0xc07fb55;  immval:0x4
TEST_IMM_OP( slli8, x3, x24, 0x00000000, 0xc07fb55, 0x4, x1, 8, x2)

inst_27:
// rs1==x11, rd==x19, rs1_b0_val == 127, 
// opcode: slli8 ; op1:x11; dest:x19; op1val:0xff00f77f;  immval:0x0
TEST_IMM_OP( slli8, x19, x11, 0x00000000, 0xff00f77f, 0x0, x1, 12, x2)

inst_28:
// rs1==x6, rd==x21, rs1_b0_val == 223, 
// opcode: slli8 ; op1:x6; dest:x21; op1val:0x110d80df;  immval:0x6
TEST_IMM_OP( slli8, x21, x6, 0x00000000, 0x110d80df, 0x6, x1, 16, x2)

inst_29:
// rs1==x14, rd==x12, rs1_b0_val == 251, 
// opcode: slli8 ; op1:x14; dest:x12; op1val:0x60f0cfb;  immval:0x1
TEST_IMM_OP( slli8, x12, x14, 0x00000000, 0x60f0cfb, 0x1, x1, 20, x2)

inst_30:
// rs1==x23, rd==x13, rs1_b0_val == 253, 
// opcode: slli8 ; op1:x23; dest:x13; op1val:0xf1155fd;  immval:0x0
TEST_IMM_OP( slli8, x13, x23, 0x00000000, 0xf1155fd, 0x0, x1, 24, x2)

inst_31:
// rs1==x7, rd==x11, rs1_b0_val == 128, rs1_b2_val == 253, rs1_b1_val == 8
// opcode: slli8 ; op1:x7; dest:x11; op1val:0xffd0880;  immval:0x6
TEST_IMM_OP( slli8, x11, x7, 0x00000000, 0xffd0880, 0x6, x1, 28, x2)

inst_32:
// rs1_b0_val == 64, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x1305ff40;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x1305ff40, 0x6, x1, 32, x2)

inst_33:
// rs1_b0_val == 8, rs1_b2_val == 254
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x2fe0708;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x2fe0708, 0x7, x1, 36, x2)

inst_34:
// rs1_b0_val == 2, rs1_b2_val == 32
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x12200002;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x12200002, 0x6, x1, 40, x2)

inst_35:
// rs1_b2_val == 239, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x40ef400d;  immval:0x4
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x40ef400d, 0x4, x1, 44, x2)

inst_36:
// rs1_b2_val == 247, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xaf7800b;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xaf7800b, 0x6, x1, 48, x2)

inst_37:
// rs1_b2_val == 251, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xffbef04;  immval:0x3
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xffbef04, 0x3, x1, 52, x2)

inst_38:
// rs1_b2_val == 128, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x13800706;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x13800706, 0x5, x1, 56, x2)

inst_39:
// rs1_b2_val == 16, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x12100d0c;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x12100d0c, 0x6, x1, 60, x2)

inst_40:
// rs1_b2_val == 2, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xff027f02;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xff027f02, 0x0, x1, 64, x2)

inst_41:
// rs1_b1_val == 170, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x10ffaa06;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x10ffaa06, 0x0, x1, 68, x2)

inst_42:
// rs1_b1_val == 223, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xdbfdfaa;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xdbfdfaa, 0x7, x1, 72, x2)

inst_43:
// rs1_b2_val == 85, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x8550808;  immval:0x3
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x8550808, 0x3, x1, 76, x2)

inst_44:
// rs1_b2_val == 1, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x8001120a;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x8001120a, 0x6, x1, 80, x2)

inst_45:
// rs1_b1_val == 253, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xaa20fd06;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xaa20fd06, 0x5, x1, 84, x2)

inst_46:
// rs1_b1_val == 254, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x55f7fe05;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x55f7fe05, 0x1, x1, 88, x2)

inst_47:
// rs1_b1_val == 16, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x550d1055;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x550d1055, 0x1, x1, 92, x2)

inst_48:
// rs1_b3_val == 253, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfd0f0b12;  immval:0x3
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0xfd0f0b12, 0x3, x1, 96, x2)

inst_49:
// rs1_b3_val == 32, rs1_b2_val == 8
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x2008110a;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x00000000, 0x2008110a, 0x5, x1, 100, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
