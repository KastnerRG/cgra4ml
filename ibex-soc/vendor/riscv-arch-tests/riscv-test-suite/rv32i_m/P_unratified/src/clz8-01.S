
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clz8 instruction of the RISC-V RV32PZicsr extension for the clz8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clz8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1==x16, rd==x1, rs1_b0_val == 0, rs1_b1_val == 254, rs1_b3_val == 127, rs1_b2_val == 170
// opcode: clz8 ; op1:x16; dest:x1; op1val:0x7faafe00;
TEST_RD_OP( clz8, x1, x16, 0x00000000, 0x7faafe00, x7, 0, x18)

inst_1:
// rs1==x19, rd==x9, rs1_b3_val == 170, 
// opcode: clz8 ; op1:x19; dest:x9; op1val:0xaa0d0a0a;
TEST_RD_OP( clz8, x9, x19, 0x00000000, 0xaa0d0a0a, x7, 4, x18)

inst_2:
// rs1==x25, rd==x23, rs1_b3_val == 85, rs1_b1_val == 2, rs1_b2_val == 254
// opcode: clz8 ; op1:x25; dest:x23; op1val:0x55fe0207;
TEST_RD_OP( clz8, x23, x25, 0x00000000, 0x55fe0207, x7, 8, x18)

inst_3:
// rs1==x15, rd==x24, rs1_b3_val == 191, rs1_b2_val == 0, rs1_b0_val == 191, rs1_b1_val == 255
// opcode: clz8 ; op1:x15; dest:x24; op1val:0xbf00ffbf;
TEST_RD_OP( clz8, x24, x15, 0x00000000, 0xbf00ffbf, x7, 12, x18)

inst_4:
// rs1==x20, rd==x5, rs1_b3_val == 223, 
// opcode: clz8 ; op1:x20; dest:x5; op1val:0xdf03070b;
TEST_RD_OP( clz8, x5, x20, 0x00000000, 0xdf03070b, x7, 16, x18)

inst_5:
// rs1==x4, rd==x3, rs1_b3_val == 239, rs1_b0_val == 2
// opcode: clz8 ; op1:x4; dest:x3; op1val:0xef06ff02;
TEST_RD_OP( clz8, x3, x4, 0x00000000, 0xef06ff02, x7, 20, x18)

inst_6:
// rs1==x23, rd==x10, rs1_b3_val == 247, 
// opcode: clz8 ; op1:x23; dest:x10; op1val:0xf7090a13;
TEST_RD_OP( clz8, x10, x23, 0x00000000, 0xf7090a13, x7, 24, x18)

inst_7:
// rs1==x3, rd==x2, rs1_b3_val == 251, rs1_b0_val == 4, rs1_b1_val == 32
// opcode: clz8 ; op1:x3; dest:x2; op1val:0xfb0f2004;
TEST_RD_OP( clz8, x2, x3, 0x00000000, 0xfb0f2004, x7, 28, x18)

inst_8:
// rs1==x11, rd==x12, rs1_b3_val == 253, 
// opcode: clz8 ; op1:x11; dest:x12; op1val:0xfd130d0c;
TEST_RD_OP( clz8, x12, x11, 0x00000000, 0xfd130d0c, x7, 32, x18)

inst_9:
// rs1==x31, rd==x15, rs1_b3_val == 254, rs1_b2_val == 191, rs1_b0_val == 85
// opcode: clz8 ; op1:x31; dest:x15; op1val:0xfebf1155;
TEST_RD_OP( clz8, x15, x31, 0x00000000, 0xfebf1155, x7, 36, x18)

inst_10:
// rs1==x28, rd==x17, rs1_b3_val == 128, rs1_b0_val == 253, rs1_b1_val == 8
// opcode: clz8 ; op1:x28; dest:x17; op1val:0x800308fd;
TEST_RD_OP( clz8, x17, x28, 0x00000000, 0x800308fd, x7, 40, x18)

inst_11:
// rs1==x12, rd==x16, rs1_b3_val == 64, rs1_b1_val == 4, rs1_b0_val == 223
// opcode: clz8 ; op1:x12; dest:x16; op1val:0x400c04df;
TEST_RD_OP( clz8, x16, x12, 0x00000000, 0x400c04df, x7, 44, x18)

inst_12:
// rs1==x9, rd==x29, rs1_b3_val == 32, rs1_b2_val == 251, rs1_b1_val == 223
// opcode: clz8 ; op1:x9; dest:x29; op1val:0x20fbdf02;
TEST_RD_OP( clz8, x29, x9, 0x00000000, 0x20fbdf02, x7, 48, x18)

inst_13:
// rs1==x13, rd==x26, rs1_b3_val == 16, rs1_b0_val == 64
// opcode: clz8 ; op1:x13; dest:x26; op1val:0x1005fe40;
TEST_RD_OP( clz8, x26, x13, 0x00000000, 0x1005fe40, x7, 52, x18)

inst_14:
// rs1==x26, rd==x0, rs1_b3_val == 8, rs1_b1_val == 239
// opcode: clz8 ; op1:x26; dest:x0; op1val:0x813ef06;
TEST_RD_OP( clz8, x0, x26, 0x00000000, 0x813ef06, x7, 56, x18)

inst_15:
// rs1==x30, rd==x6, rs1_b3_val == 4, rs1_b0_val == 251
// opcode: clz8 ; op1:x30; dest:x6; op1val:0x40306fb;
TEST_RD_OP( clz8, x6, x30, 0x00000000, 0x40306fb, x7, 60, x18)

inst_16:
// rs1==x27, rd==x25, rs1_b3_val == 2, 
// opcode: clz8 ; op1:x27; dest:x25; op1val:0x20fef04;
TEST_RD_OP( clz8, x25, x27, 0x00000000, 0x20fef04, x7, 64, x18)

inst_17:
// rs1==x10, rd==x30, rs1_b3_val == 1, rs1_b2_val == 16
// opcode: clz8 ; op1:x10; dest:x30; op1val:0x110ef11;
TEST_RD_OP( clz8, x30, x10, 0x00000000, 0x110ef11, x7, 68, x18)

inst_18:
// rs1==x17, rd==x8, rs1_b3_val == 255, rs1_b1_val == 191
// opcode: clz8 ; op1:x17; dest:x8; op1val:0xffaabf09;
TEST_RD_OP( clz8, x8, x17, 0x00000000, 0xffaabf09, x7, 72, x18)

inst_19:
// rs1==x24, rd==x4, rs1_b3_val == 0, rs1_b0_val == 1
// opcode: clz8 ; op1:x24; dest:x4; op1val:0x0b2001;
TEST_RD_OP( clz8, x4, x24, 0x00000000, 0x0b2001, x7, 76, x18)

inst_20:
// rs1==x14, rd==x11, rs1_b2_val == 85, rs1_b0_val == 16
// opcode: clz8 ; op1:x14; dest:x11; op1val:0xc550610;
TEST_RD_OP( clz8, x11, x14, 0x00000000, 0xc550610, x7, 80, x18)

inst_21:
// rs1==x18, rd==x22, rs1_b2_val == 127, rs1_b1_val == 128
// opcode: clz8 ; op1:x18; dest:x22; op1val:0x557f800f;
TEST_RD_OP( clz8, x22, x18, 0x00000000, 0x557f800f, x7, 84, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_22:
// rs1==x7, rd==x27, rs1_b2_val == 223, 
// opcode: clz8 ; op1:x7; dest:x27; op1val:0xcdf110a;
TEST_RD_OP( clz8, x27, x7, 0x00000000, 0xcdf110a, x3, 0, x4)

inst_23:
// rs1==x8, rd==x19, rs1_b0_val == 239, rs1_b2_val == 247
// opcode: clz8 ; op1:x8; dest:x19; op1val:0xcf70fef;
TEST_RD_OP( clz8, x19, x8, 0x00000000, 0xcf70fef, x3, 4, x4)

inst_24:
// rs1==x5, rd==x14, rs1_b0_val == 247, rs1_b1_val == 64
// opcode: clz8 ; op1:x5; dest:x14; op1val:0x111040f7;
TEST_RD_OP( clz8, x14, x5, 0x00000000, 0x111040f7, x3, 8, x4)

inst_25:
// rs1==x21, rd==x7, rs1_b0_val == 254, rs1_b2_val == 253
// opcode: clz8 ; op1:x21; dest:x7; op1val:0xdfd12fe;
TEST_RD_OP( clz8, x7, x21, 0x00000000, 0xdfd12fe, x3, 12, x4)

inst_26:
// rs1==x22, rd==x31, rs1_b0_val == 128, 
// opcode: clz8 ; op1:x22; dest:x31; op1val:0xaa06fe80;
TEST_RD_OP( clz8, x31, x22, 0x00000000, 0xaa06fe80, x3, 16, x4)

inst_27:
// rs1==x29, rd==x13, rs1_b0_val == 32, 
// opcode: clz8 ; op1:x29; dest:x13; op1val:0x2bf0a20;
TEST_RD_OP( clz8, x13, x29, 0x00000000, 0x2bf0a20, x3, 20, x4)

inst_28:
// rs1==x2, rd==x18, rs1_b0_val == 8, 
// opcode: clz8 ; op1:x2; dest:x18; op1val:0x7dfef08;
TEST_RD_OP( clz8, x18, x2, 0x00000000, 0x7dfef08, x3, 24, x4)

inst_29:
// rs1==x0, rd==x28, rs1_b0_val == 255, 
// opcode: clz8 ; op1:x0; dest:x28; op1val:0xa0305ff;
TEST_RD_OP( clz8, x28, x0, 0x00000000, 0xa0305ff, x3, 28, x4)

inst_30:
// rs1==x1, rd==x20, rs1_b2_val == 239, 
// opcode: clz8 ; op1:x1; dest:x20; op1val:0xbfeffe05;
TEST_RD_OP( clz8, x20, x1, 0x00000000, 0xbfeffe05, x3, 32, x4)

inst_31:
// rs1==x6, rd==x21, rs1_b2_val == 128, 
// opcode: clz8 ; op1:x6; dest:x21; op1val:0xf80080c;
TEST_RD_OP( clz8, x21, x6, 0x00000000, 0xf80080c, x3, 36, x4)

inst_32:
// rs1_b2_val == 64, rs1_b1_val == 170
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfe40aa07;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xfe40aa07, x3, 40, x4)

inst_33:
// rs1_b2_val == 32, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfb20ef20;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xfb20ef20, x3, 44, x4)

inst_34:
// rs1_b2_val == 8, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xef081380;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xef081380, x3, 48, x4)

inst_35:
// rs1_b2_val == 4, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xe040420;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xe040420, x3, 52, x4)

inst_36:
// rs1_b2_val == 2, rs1_b1_val == 85
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xdf0255fd;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xdf0255fd, x3, 56, x4)

inst_37:
// rs1_b2_val == 1, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfb010a04;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xfb010a04, x3, 60, x4)

inst_38:
// rs1_b2_val == 255, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xeff0203;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xeff0203, x3, 64, x4)

inst_39:
// rs1_b1_val == 127, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x130c7f07;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0x130c7f07, x3, 68, x4)

inst_40:
// rs1_b1_val == 247, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfd80f707;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xfd80f707, x3, 72, x4)

inst_41:
// rs1_b1_val == 251, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xb02fb0e;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xb02fb0e, x3, 76, x4)

inst_42:
// rs1_b1_val == 253, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xeff7fd09;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xeff7fd09, x3, 80, x4)

inst_43:
// rs1_b1_val == 16, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x1201012;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0x1201012, x3, 84, x4)

inst_44:
// rs1_b1_val == 1, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xef100120;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xef100120, x3, 88, x4)

inst_45:
// rs1_b1_val == 0, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfaa00f7;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xfaa00f7, x3, 92, x4)

inst_46:
// rs1_b0_val == 170, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xafdfeaa;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xafdfeaa, x3, 96, x4)

inst_47:
// rs1_b0_val == 127, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xf710807f;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xf710807f, x3, 100, x4)

inst_48:
// rs1_b3_val == 8, rs1_b1_val == 239
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x813ef06;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0x813ef06, x3, 104, x4)

inst_49:
// rs1_b0_val == 255, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xa0305ff;
TEST_RD_OP( clz8, x31, x30, 0x00000000, 0xa0305ff, x3, 108, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
