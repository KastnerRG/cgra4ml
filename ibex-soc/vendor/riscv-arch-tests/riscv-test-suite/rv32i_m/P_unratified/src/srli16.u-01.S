
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli16.u instruction of the RISC-V RV32PZicsr extension for the srli16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 != rd, rs1==x18, rd==x23, rs1_h0_val == 0, imm_val == 0
// opcode: srli16.u ; op1:x18; dest:x23; op1val:0x0e0000;  immval:0x0
TEST_IMM_OP( srli16.u, x23, x18, 0x00000000, 0x0e0000, 0x0, x9, 0, x13)

inst_1:
// rs1 == rd, rs1==x6, rd==x6, imm_val == 15, rs1_h0_val == 65407
// opcode: srli16.u ; op1:x6; dest:x6; op1val:0x07ff7f;  immval:0xf
TEST_IMM_OP( srli16.u, x6, x6, 0x00000000, 0x07ff7f, 0xf, x9, 4, x13)

inst_2:
// rs1==x23, rd==x7, imm_val == 14, 
// opcode: srli16.u ; op1:x23; dest:x7; op1val:0x0a0012;  immval:0xe
TEST_IMM_OP( srli16.u, x7, x23, 0x00000000, 0x0a0012, 0xe, x9, 8, x13)

inst_3:
// rs1==x24, rd==x21, imm_val == 13, rs1_h1_val == 21845, rs1_h0_val == 21845
// opcode: srli16.u ; op1:x24; dest:x21; op1val:0x55555555;  immval:0xd
TEST_IMM_OP( srli16.u, x21, x24, 0x00000000, 0x55555555, 0xd, x9, 12, x13)

inst_4:
// rs1==x1, rd==x17, imm_val == 12, rs1_h0_val == 65519
// opcode: srli16.u ; op1:x1; dest:x17; op1val:0x13ffef;  immval:0xc
TEST_IMM_OP( srli16.u, x17, x1, 0x00000000, 0x13ffef, 0xc, x9, 16, x13)

inst_5:
// rs1==x17, rd==x30, imm_val == 11, rs1_h1_val == 64, rs1_h0_val == 256
// opcode: srli16.u ; op1:x17; dest:x30; op1val:0x400100;  immval:0xb
TEST_IMM_OP( srli16.u, x30, x17, 0x00000000, 0x400100, 0xb, x9, 20, x13)

inst_6:
// rs1==x4, rd==x26, imm_val == 10, rs1_h1_val == 65471, rs1_h0_val == 65533
// opcode: srli16.u ; op1:x4; dest:x26; op1val:0xffbffffd;  immval:0xa
TEST_IMM_OP( srli16.u, x26, x4, 0x00000000, 0xffbffffd, 0xa, x9, 24, x13)

inst_7:
// rs1==x11, rd==x10, imm_val == 9, rs1_h1_val == 43690
// opcode: srli16.u ; op1:x11; dest:x10; op1val:0xaaaaff7f;  immval:0x9
TEST_IMM_OP( srli16.u, x10, x11, 0x00000000, 0xaaaaff7f, 0x9, x9, 28, x13)

inst_8:
// rs1==x22, rd==x12, imm_val == 8, rs1_h0_val == 64, rs1_h1_val == 65407
// opcode: srli16.u ; op1:x22; dest:x12; op1val:0xff7f0040;  immval:0x8
TEST_IMM_OP( srli16.u, x12, x22, 0x00000000, 0xff7f0040, 0x8, x9, 32, x13)

inst_9:
// rs1==x25, rd==x2, imm_val == 7, rs1_h1_val == 2, rs1_h0_val == 512
// opcode: srli16.u ; op1:x25; dest:x2; op1val:0x020200;  immval:0x7
TEST_IMM_OP( srli16.u, x2, x25, 0x00000000, 0x020200, 0x7, x9, 36, x13)

inst_10:
// rs1==x20, rd==x8, imm_val == 6, rs1_h0_val == 64511, rs1_h1_val == 57343
// opcode: srli16.u ; op1:x20; dest:x8; op1val:0xdffffbff;  immval:0x6
TEST_IMM_OP( srli16.u, x8, x20, 0x00000000, 0xdffffbff, 0x6, x9, 40, x13)

inst_11:
// rs1==x3, rd==x0, imm_val == 5, rs1_h0_val == 8192, rs1_h1_val == 4096
// opcode: srli16.u ; op1:x3; dest:x0; op1val:0x10002000;  immval:0x5
TEST_IMM_OP( srli16.u, x0, x3, 0x00000000, 0x10002000, 0x5, x9, 44, x13)

inst_12:
// rs1==x27, rd==x14, imm_val == 4, rs1_h1_val == 65534
// opcode: srli16.u ; op1:x27; dest:x14; op1val:0xfffe0003;  immval:0x4
TEST_IMM_OP( srli16.u, x14, x27, 0x00000000, 0xfffe0003, 0x4, x9, 48, x13)

inst_13:
// rs1==x7, rd==x31, imm_val == 3, rs1_h0_val == 57343, rs1_h1_val == 65503
// opcode: srli16.u ; op1:x7; dest:x31; op1val:0xffdfdfff;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x7, 0x00000000, 0xffdfdfff, 0x3, x9, 52, x13)

inst_14:
// rs1==x29, rd==x5, imm_val == 2, rs1_h0_val == 65023
// opcode: srli16.u ; op1:x29; dest:x5; op1val:0xaaaafdff;  immval:0x2
TEST_IMM_OP( srli16.u, x5, x29, 0x00000000, 0xaaaafdff, 0x2, x9, 56, x13)

inst_15:
// rs1==x12, rd==x19, imm_val == 1, rs1_h1_val == 65023
// opcode: srli16.u ; op1:x12; dest:x19; op1val:0xfdff0009;  immval:0x1
TEST_IMM_OP( srli16.u, x19, x12, 0x00000000, 0xfdff0009, 0x1, x9, 60, x13)

inst_16:
// rs1==x19, rd==x1, rs1_h1_val == 32767, 
// opcode: srli16.u ; op1:x19; dest:x1; op1val:0x7fffff7f;  immval:0x6
TEST_IMM_OP( srli16.u, x1, x19, 0x00000000, 0x7fffff7f, 0x6, x9, 64, x13)

inst_17:
// rs1==x31, rd==x11, rs1_h1_val == 49151, 
// opcode: srli16.u ; op1:x31; dest:x11; op1val:0xbffffdff;  immval:0xd
TEST_IMM_OP( srli16.u, x11, x31, 0x00000000, 0xbffffdff, 0xd, x9, 68, x13)

inst_18:
// rs1==x5, rd==x18, rs1_h1_val == 61439, 
// opcode: srli16.u ; op1:x5; dest:x18; op1val:0xefff0000;  immval:0xc
TEST_IMM_OP( srli16.u, x18, x5, 0x00000000, 0xefff0000, 0xc, x9, 72, x13)

inst_19:
// rs1==x2, rd==x27, rs1_h1_val == 63487, rs1_h0_val == 4
// opcode: srli16.u ; op1:x2; dest:x27; op1val:0xf7ff0004;  immval:0x7
TEST_IMM_OP( srli16.u, x27, x2, 0x00000000, 0xf7ff0004, 0x7, x9, 76, x13)

inst_20:
// rs1==x8, rd==x24, rs1_h1_val == 64511, rs1_h0_val == 65527
// opcode: srli16.u ; op1:x8; dest:x24; op1val:0xfbfffff7;  immval:0x1
TEST_IMM_OP( srli16.u, x24, x8, 0x00000000, 0xfbfffff7, 0x1, x9, 80, x13)

inst_21:
// rs1==x28, rd==x15, rs1_h1_val == 65279, rs1_h0_val == 4096
// opcode: srli16.u ; op1:x28; dest:x15; op1val:0xfeff1000;  immval:0xf
TEST_IMM_OP( srli16.u, x15, x28, 0x00000000, 0xfeff1000, 0xf, x9, 84, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x26, rd==x29, rs1_h1_val == 65519, 
// opcode: srli16.u ; op1:x26; dest:x29; op1val:0xffef000c;  immval:0x1
TEST_IMM_OP( srli16.u, x29, x26, 0x00000000, 0xffef000c, 0x1, x1, 0, x2)

inst_23:
// rs1==x21, rd==x9, rs1_h1_val == 65527, 
// opcode: srli16.u ; op1:x21; dest:x9; op1val:0xfff70005;  immval:0x3
TEST_IMM_OP( srli16.u, x9, x21, 0x00000000, 0xfff70005, 0x3, x1, 4, x2)

inst_24:
// rs1==x30, rd==x28, rs1_h1_val == 65531, 
// opcode: srli16.u ; op1:x30; dest:x28; op1val:0xfffb000a;  immval:0xd
TEST_IMM_OP( srli16.u, x28, x30, 0x00000000, 0xfffb000a, 0xd, x1, 8, x2)

inst_25:
// rs1==x16, rd==x25, rs1_h1_val == 65533, 
// opcode: srli16.u ; op1:x16; dest:x25; op1val:0xfffd0006;  immval:0xa
TEST_IMM_OP( srli16.u, x25, x16, 0x00000000, 0xfffd0006, 0xa, x1, 12, x2)

inst_26:
// rs1==x0, rd==x13, rs1_h1_val == 32768, rs1_h0_val == 61439
// opcode: srli16.u ; op1:x0; dest:x13; op1val:0x8000efff;  immval:0xd
TEST_IMM_OP( srli16.u, x13, x0, 0x00000000, 0x8000efff, 0xd, x1, 16, x2)

inst_27:
// rs1==x14, rd==x20, rs1_h1_val == 16384, rs1_h0_val == 128
// opcode: srli16.u ; op1:x14; dest:x20; op1val:0x40000080;  immval:0xd
TEST_IMM_OP( srli16.u, x20, x14, 0x00000000, 0x40000080, 0xd, x1, 20, x2)

inst_28:
// rs1==x9, rd==x3, rs1_h1_val == 8192, rs1_h0_val == 1
// opcode: srli16.u ; op1:x9; dest:x3; op1val:0x20000001;  immval:0xc
TEST_IMM_OP( srli16.u, x3, x9, 0x00000000, 0x20000001, 0xc, x1, 24, x2)

inst_29:
// rs1==x10, rd==x4, rs1_h0_val == 65471, 
// opcode: srli16.u ; op1:x10; dest:x4; op1val:0x1000ffbf;  immval:0xc
TEST_IMM_OP( srli16.u, x4, x10, 0x00000000, 0x1000ffbf, 0xc, x1, 28, x2)

inst_30:
// rs1==x13, rd==x16, rs1_h0_val == 65503, 
// opcode: srli16.u ; op1:x13; dest:x16; op1val:0x12ffdf;  immval:0x3
TEST_IMM_OP( srli16.u, x16, x13, 0x00000000, 0x12ffdf, 0x3, x1, 32, x2)

inst_31:
// rs1==x15, rd==x22, rs1_h0_val == 65531, rs1_h1_val == 32
// opcode: srli16.u ; op1:x15; dest:x22; op1val:0x20fffb;  immval:0x3
TEST_IMM_OP( srli16.u, x22, x15, 0x00000000, 0x20fffb, 0x3, x1, 36, x2)

inst_32:
// rs1_h0_val == 65534, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x1000fffe;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x1000fffe, 0x3, x1, 40, x2)

inst_33:
// rs1_h0_val == 32768, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffb8000;  immval:0x2
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0xfffb8000, 0x2, x1, 44, x2)

inst_34:
// rs1_h0_val == 16384, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x054000;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x054000, 0xd, x1, 48, x2)

inst_35:
// rs1_h0_val == 2048, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x070800;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x070800, 0xd, x1, 52, x2)

inst_36:
// rs1_h0_val == 1024, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0c0400;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x0c0400, 0x8, x1, 56, x2)

inst_37:
// rs1_h0_val == 32, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x060020;  immval:0xe
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x060020, 0xe, x1, 60, x2)

inst_38:
// rs1_h0_val == 16, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xbfff0010;  immval:0x1
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0xbfff0010, 0x1, x1, 64, x2)

inst_39:
// rs1_h0_val == 8, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x070008;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x070008, 0xa, x1, 68, x2)

inst_40:
// rs1_h0_val == 2, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x050002;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x050002, 0x7, x1, 72, x2)

inst_41:
// rs1_h0_val == 65535, rs1_h1_val == 128
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x80ffff;  immval:0xc
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x80ffff, 0xc, x1, 76, x2)

inst_42:
// rs1_h1_val == 2048, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x8000100;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x8000100, 0x5, x1, 80, x2)

inst_43:
// rs1_h1_val == 1024, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x4000012;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x4000012, 0x0, x1, 84, x2)

inst_44:
// rs1_h1_val == 512, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x2000400;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x2000400, 0x5, x1, 88, x2)

inst_45:
// rs1_h1_val == 256, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x1004000;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x1004000, 0xf, x1, 92, x2)

inst_46:
// rs1_h1_val == 16, rs1_h0_val == 65279
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x10feff;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x10feff, 0x5, x1, 96, x2)

inst_47:
// rs1_h1_val == 8, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x080013;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x080013, 0x5, x1, 100, x2)

inst_48:
// rs1_h1_val == 4, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x040008;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x040008, 0xd, x1, 104, x2)

inst_49:
// rs1_h1_val == 1, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x01000a;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x01000a, 0x0, x1, 108, x2)

inst_50:
// rs1_h1_val == 65535, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xffff0003;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0xffff0003, 0x5, x1, 112, x2)

inst_51:
// rs1_h1_val == 0, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x002000;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x002000, 0x7, x1, 116, x2)

inst_52:
// rs1_h0_val == 49151, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x7fffbfff;  immval:0x9
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x7fffbfff, 0x9, x1, 120, x2)

inst_53:
// rs1_h0_val == 63487, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x02f7ff;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x02f7ff, 0xd, x1, 124, x2)

inst_54:
// rs1_h0_val == 43690, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x8000aaaa;  immval:0x2
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x8000aaaa, 0x2, x1, 128, x2)

inst_55:
// rs1_h0_val == 32767, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x2007fff;  immval:0x2
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x2007fff, 0x2, x1, 132, x2)

inst_56:
// rs1_h1_val == 32768, rs1_h0_val == 61439
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x8000efff;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x00000000, 0x8000efff, 0xd, x1, 136, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 35*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
