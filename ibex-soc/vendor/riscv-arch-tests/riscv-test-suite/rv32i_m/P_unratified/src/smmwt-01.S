
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmwt instruction of the RISC-V RV32PZicsr extension for the smmwt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmwt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x12, rd==x22, rs1_w0_val == -2147483648, rs2_h1_val == -1025
// opcode: smmwt ; op1:x10; op2:x12; dest:x22; op1val:0x80000000;  op2val:0xfbff3fff
TEST_RR_OP(smmwt, x22, x10, x12, 0x00000000, 0x80000000, 0xfbff3fff, x3, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x12, rs2_h1_val == -21846, rs2_h0_val == 16384, rs1_w0_val == 8
// opcode: smmwt ; op1:x2; op2:x2; dest:x12; op1val:0x000008;  op2val:0xaaaa4000
TEST_RR_OP(smmwt, x12, x2, x2, 0x00000000, 0x000008, 0xaaaa4000, x3, 4, x13)

inst_2:
// rs1 == rd != rs2, rs1==x14, rs2==x23, rd==x14, rs2_h1_val == 21845, rs2_h0_val == 64, rs1_w0_val == 1
// opcode: smmwt ; op1:x14; op2:x23; dest:x14; op1val:0x000001;  op2val:0x55550040
TEST_RR_OP(smmwt, x14, x14, x23, 0x00000000, 0x000001, 0x55550040, x3, 8, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs2_h1_val == 32767, rs1_w0_val == 0
// opcode: smmwt ; op1:x21; op2:x21; dest:x21; op1val:0x000000;  op2val:0x7fffc000
TEST_RR_OP(smmwt, x21, x21, x21, 0x00000000, 0x000000, 0x7fffc000, x3, 12, x13)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x19, rd==x19, rs2_h1_val == -16385, rs1_w0_val == -524289
// opcode: smmwt ; op1:x23; op2:x19; dest:x19; op1val:0xfff7ffff;  op2val:0xbfff0040
TEST_RR_OP(smmwt, x19, x23, x19, 0x00000000, 0xfff7ffff, 0xbfff0040, x3, 16, x13)

inst_5:
// rs1==x6, rs2==x27, rd==x1, rs2_h1_val == -8193, rs1_w0_val == -1073741825, rs2_h0_val == -257
// opcode: smmwt ; op1:x6; op2:x27; dest:x1; op1val:0xbfffffff;  op2val:0xdffffeff
TEST_RR_OP(smmwt, x1, x6, x27, 0x00000000, 0xbfffffff, 0xdffffeff, x3, 20, x13)

inst_6:
// rs1==x28, rs2==x0, rd==x10, rs2_h1_val == -4097, rs2_h0_val == -33, rs1_w0_val == -513
// opcode: smmwt ; op1:x28; op2:x0; dest:x10; op1val:0xfffffdff;  op2val:0xefffffdf
TEST_RR_OP(smmwt, x10, x28, x0, 0x00000000, 0xfffffdff, 0xefffffdf, x3, 24, x13)

inst_7:
// rs1==x5, rs2==x17, rd==x26, rs2_h1_val == -2049, rs1_w0_val == 1073741824, rs2_h0_val == -9
// opcode: smmwt ; op1:x5; op2:x17; dest:x26; op1val:0x40000000;  op2val:0xf7fffff7
TEST_RR_OP(smmwt, x26, x5, x17, 0x00000000, 0x40000000, 0xf7fffff7, x3, 28, x13)

inst_8:
// rs1==x9, rs2==x30, rd==x27, rs2_h1_val == -513, rs1_w0_val == -67108865, rs2_h0_val == 2
// opcode: smmwt ; op1:x9; op2:x30; dest:x27; op1val:0xfbffffff;  op2val:0xfdff0002
TEST_RR_OP(smmwt, x27, x9, x30, 0x00000000, 0xfbffffff, 0xfdff0002, x3, 32, x13)

inst_9:
// rs1==x30, rs2==x25, rd==x9, rs2_h1_val == -257, rs1_w0_val == 16777216, rs2_h0_val == 1
// opcode: smmwt ; op1:x30; op2:x25; dest:x9; op1val:0x1000000;  op2val:0xfeff0001
TEST_RR_OP(smmwt, x9, x30, x25, 0x00000000, 0x1000000, 0xfeff0001, x3, 36, x13)

inst_10:
// rs1==x12, rs2==x22, rd==x31, rs2_h1_val == -129, 
// opcode: smmwt ; op1:x12; op2:x22; dest:x31; op1val:0x80000000;  op2val:0xff7f0006
TEST_RR_OP(smmwt, x31, x12, x22, 0x00000000, 0x80000000, 0xff7f0006, x3, 40, x13)

inst_11:
// rs1==x24, rs2==x10, rd==x7, rs2_h1_val == -65, 
// opcode: smmwt ; op1:x24; op2:x10; dest:x7; op1val:0x000001;  op2val:0xffbf0007
TEST_RR_OP(smmwt, x7, x24, x10, 0x00000000, 0x000001, 0xffbf0007, x3, 44, x13)

inst_12:
// rs1==x4, rs2==x29, rd==x8, rs2_h1_val == -33, 
// opcode: smmwt ; op1:x4; op2:x29; dest:x8; op1val:0xfffffff8;  op2val:0xffdffff9
TEST_RR_OP(smmwt, x8, x4, x29, 0x00000000, 0xfffffff8, 0xffdffff9, x3, 48, x13)

inst_13:
// rs1==x1, rs2==x7, rd==x11, rs2_h1_val == -17, rs2_h0_val == -8193, rs1_w0_val == 536870912
// opcode: smmwt ; op1:x1; op2:x7; dest:x11; op1val:0x20000000;  op2val:0xffefdfff
TEST_RR_OP(smmwt, x11, x1, x7, 0x00000000, 0x20000000, 0xffefdfff, x3, 52, x13)

inst_14:
// rs1==x26, rs2==x9, rd==x18, rs2_h1_val == -9, rs1_w0_val == -4194305, rs2_h0_val == -21846
// opcode: smmwt ; op1:x26; op2:x9; dest:x18; op1val:0xffbfffff;  op2val:0xfff7aaaa
TEST_RR_OP(smmwt, x18, x26, x9, 0x00000000, 0xffbfffff, 0xfff7aaaa, x3, 56, x13)

inst_15:
// rs1==x0, rs2==x15, rd==x29, rs2_h1_val == -5, rs2_h0_val == -1, rs1_w0_val == 131072
// opcode: smmwt ; op1:x0; op2:x15; dest:x29; op1val:0x020000;  op2val:0xfffbffff
TEST_RR_OP(smmwt, x29, x0, x15, 0x00000000, 0x020000, 0xfffbffff, x3, 60, x10)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x20, rs2==x26, rd==x4, rs2_h1_val == -3, rs1_w0_val == 32768, rs2_h0_val == 21845
// opcode: smmwt ; op1:x20; op2:x26; dest:x4; op1val:0x008000;  op2val:0xfffd5555
TEST_RR_OP(smmwt, x4, x20, x26, 0x00000000, 0x008000, 0xfffd5555, x9, 0, x10)

inst_17:
// rs1==x27, rs2==x24, rd==x2, rs2_h1_val == -2, rs1_w0_val == 4194304, rs2_h0_val == -5
// opcode: smmwt ; op1:x27; op2:x24; dest:x2; op1val:0x400000;  op2val:0xfffefffb
TEST_RR_OP(smmwt, x2, x27, x24, 0x00000000, 0x400000, 0xfffefffb, x9, 4, x10)

inst_18:
// rs1==x7, rs2==x11, rd==x23, rs2_h1_val == -32768, rs1_w0_val == 33554432
// opcode: smmwt ; op1:x7; op2:x11; dest:x23; op1val:0x2000000;  op2val:0x8000feff
TEST_RR_OP(smmwt, x23, x7, x11, 0x00000000, 0x2000000, 0x8000feff, x9, 8, x10)

inst_19:
// rs1==x8, rs2==x18, rd==x16, rs2_h1_val == 16384, rs2_h0_val == -17
// opcode: smmwt ; op1:x8; op2:x18; dest:x16; op1val:0xfffffffc;  op2val:0x4000ffef
TEST_RR_OP(smmwt, x16, x8, x18, 0x00000000, 0xfffffffc, 0x4000ffef, x9, 12, x10)

inst_20:
// rs1==x31, rs2==x3, rd==x17, rs2_h1_val == 8192, rs1_w0_val == 1048576, rs2_h0_val == -513
// opcode: smmwt ; op1:x31; op2:x3; dest:x17; op1val:0x100000;  op2val:0x2000fdff
TEST_RR_OP(smmwt, x17, x31, x3, 0x00000000, 0x100000, 0x2000fdff, x9, 16, x10)

inst_21:
// rs1==x29, rs2==x16, rd==x20, rs2_h1_val == 4096, rs1_w0_val == 8388608
// opcode: smmwt ; op1:x29; op2:x16; dest:x20; op1val:0x800000;  op2val:0x1000fffc
TEST_RR_OP(smmwt, x20, x29, x16, 0x00000000, 0x800000, 0x1000fffc, x9, 20, x10)

inst_22:
// rs1==x15, rs2==x5, rd==x30, rs2_h1_val == 2048, 
// opcode: smmwt ; op1:x15; op2:x5; dest:x30; op1val:0xfffffdff;  op2val:0x800fdff
TEST_RR_OP(smmwt, x30, x15, x5, 0x00000000, 0xfffffdff, 0x800fdff, x9, 24, x10)

inst_23:
// rs1==x22, rs2==x6, rd==x28, rs2_h1_val == 1024, rs1_w0_val == -8388609
// opcode: smmwt ; op1:x22; op2:x6; dest:x28; op1val:0xff7fffff;  op2val:0x400fffb
TEST_RR_OP(smmwt, x28, x22, x6, 0x00000000, 0xff7fffff, 0x400fffb, x9, 28, x10)

inst_24:
// rs1==x3, rs2==x1, rd==x15, rs2_h1_val == 512, 
// opcode: smmwt ; op1:x3; op2:x1; dest:x15; op1val:0x400000;  op2val:0x200ffff
TEST_RR_OP(smmwt, x15, x3, x1, 0x00000000, 0x400000, 0x200ffff, x9, 32, x10)

inst_25:
// rs1==x17, rs2==x28, rd==x6, rs2_h1_val == 256, rs1_w0_val == 32
// opcode: smmwt ; op1:x17; op2:x28; dest:x6; op1val:0x000020;  op2val:0x100fffb
TEST_RR_OP(smmwt, x6, x17, x28, 0x00000000, 0x000020, 0x100fffb, x9, 36, x10)

inst_26:
// rs1==x19, rs2==x31, rd==x0, rs2_h1_val == 128, 
// opcode: smmwt ; op1:x19; op2:x31; dest:x0; op1val:0xfffffff6;  op2val:0x800003
TEST_RR_OP(smmwt, x0, x19, x31, 0x00000000, 0xfffffff6, 0x800003, x9, 40, x10)

inst_27:
// rs1==x25, rs2==x20, rd==x5, rs2_h1_val == 64, rs1_w0_val == 64, rs2_h0_val == 4
// opcode: smmwt ; op1:x25; op2:x20; dest:x5; op1val:0x000040;  op2val:0x400004
TEST_RR_OP(smmwt, x5, x25, x20, 0x00000000, 0x000040, 0x400004, x9, 44, x10)

inst_28:
// rs1==x13, rs2==x4, rd==x25, rs2_h1_val == 32, rs1_w0_val == -1025
// opcode: smmwt ; op1:x13; op2:x4; dest:x25; op1val:0xfffffbff;  op2val:0x20c000
TEST_RR_OP(smmwt, x25, x13, x4, 0x00000000, 0xfffffbff, 0x20c000, x9, 48, x10)

inst_29:
// rs1==x11, rs2==x14, rd==x3, rs2_h1_val == 16, rs1_w0_val == 2
// opcode: smmwt ; op1:x11; op2:x14; dest:x3; op1val:0x000002;  op2val:0x105555
TEST_RR_OP(smmwt, x3, x11, x14, 0x00000000, 0x000002, 0x105555, x9, 52, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_30:
// rs1==x16, rs2==x8, rd==x24, rs2_h1_val == 8, rs1_w0_val == 256, rs2_h0_val == 4096
// opcode: smmwt ; op1:x16; op2:x8; dest:x24; op1val:0x000100;  op2val:0x081000
TEST_RR_OP(smmwt, x24, x16, x8, 0x00000000, 0x000100, 0x081000, x2, 0, x4)

inst_31:
// rs1==x18, rs2_h1_val == 4, rs1_w0_val == 262144, rs2_h0_val == 32767
// opcode: smmwt ; op1:x18; op2:x30; dest:x1; op1val:0x040000;  op2val:0x047fff
TEST_RR_OP(smmwt, x1, x18, x30, 0x00000000, 0x040000, 0x047fff, x2, 4, x4)

inst_32:
// rs2==x13, rs2_h1_val == 2, rs1_w0_val == 8192
// opcode: smmwt ; op1:x7; op2:x13; dest:x30; op1val:0x002000;  op2val:0x020040
TEST_RR_OP(smmwt, x30, x7, x13, 0x00000000, 0x002000, 0x020040, x2, 8, x4)

inst_33:
// rd==x13, rs2_h1_val == 1, rs2_h0_val == 128
// opcode: smmwt ; op1:x3; op2:x1; dest:x13; op1val:0xfbffffff;  op2val:0x010080
TEST_RR_OP(smmwt, x13, x3, x1, 0x00000000, 0xfbffffff, 0x010080, x2, 12, x4)

inst_34:
// rs1_w0_val == 512, rs2_h1_val == 0
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0x000004
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000200, 0x000004, x2, 16, x4)

inst_35:
// rs1_w0_val == 128, rs2_h0_val == 32
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000080;  op2val:0xfffc0020
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000080, 0xfffc0020, x2, 20, x4)

inst_36:
// rs1_w0_val == 16, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0x10ffdf
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000010, 0x10ffdf, x2, 24, x4)

inst_37:
// rs1_w0_val == 4, rs2_h0_val == -32768
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0x55558000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000004, 0x55558000, x2, 28, x4)

inst_38:
// rs1_w0_val == -1, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfbff0040
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffffff, 0xfbff0040, x2, 32, x4)

inst_39:
// rs2_h1_val == -1, rs2_h0_val == 2048, rs1_w0_val == -16385
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0xffff0800
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffbfff, 0xffff0800, x2, 36, x4)

inst_40:
// rs2_h0_val == -16385, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0xfffbbfff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xfffbbfff, x2, 40, x4)

inst_41:
// rs2_h0_val == -4097, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000002;  op2val:0xfff7efff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000002, 0xfff7efff, x2, 44, x4)

inst_42:
// rs2_h0_val == -2049, rs1_w0_val == -65
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0x8000f7ff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffffbf, 0x8000f7ff, x2, 48, x4)

inst_43:
// rs2_h0_val == -1025, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa;  op2val:0xfffbfbff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffffa, 0xfffbfbff, x2, 52, x4)

inst_44:
// rs2_h0_val == -129, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xfff7ff7f
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x800000, 0xfff7ff7f, x2, 56, x4)

inst_45:
// rs2_h0_val == -65, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xfff7ffbf
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffffbf, 0xfff7ffbf, x2, 60, x4)

inst_46:
// rs2_h0_val == -3, rs1_w0_val == 1431655765
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xff7ffffd
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x55555555, 0xff7ffffd, x2, 64, x4)

inst_47:
// rs2_h0_val == -2, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x020000;  op2val:0x10fffe
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x020000, 0x10fffe, x2, 68, x4)

inst_48:
// rs2_h0_val == 8192, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000;  op2val:0x55552000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xc0000000, 0x55552000, x2, 72, x4)

inst_49:
// rs2_h0_val == 1024, rs1_w0_val == -134217729
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xff7f0400
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xff7f0400, x2, 76, x4)

inst_50:
// rs2_h0_val == 512, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000008;  op2val:0xefff0200
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000008, 0xefff0200, x2, 80, x4)

inst_51:
// rs2_h0_val == 256, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000003;  op2val:0xfdff0100
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000003, 0xfdff0100, x2, 84, x4)

inst_52:
// rs2_h0_val == 16, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8;  op2val:0xfeff0010
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffff8, 0xfeff0010, x2, 88, x4)

inst_53:
// rs2_h0_val == 8, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0x050008
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfff7ffff, 0x050008, x2, 92, x4)

inst_54:
// rs2_h0_val == 0, rs1_w0_val == -5
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xc0000000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffffb, 0xc0000000, x2, 96, x4)

inst_55:
// rs1_w0_val == -1431655766, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xff7ffffc
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xff7ffffc, x2, 100, x4)

inst_56:
// rs1_w0_val == 2147483647, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0x7fff5555
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x7fffffff, 0x7fff5555, x2, 104, x4)

inst_57:
// rs1_w0_val == -536870913, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0xfff6fffe
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xdfffffff, 0xfff6fffe, x2, 108, x4)

inst_58:
// rs1_w0_val == -268435457, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xdffffffd
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xefffffff, 0xdffffffd, x2, 112, x4)

inst_59:
// rs1_w0_val == -33554433, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0xc000efff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfdffffff, 0xc000efff, x2, 116, x4)

inst_60:
// rs1_w0_val == -16777217, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xfffcaaaa
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfeffffff, 0xfffcaaaa, x2, 120, x4)

inst_61:
// rs1_w0_val == -2097153, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xffbf0400
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffdfffff, 0xffbf0400, x2, 124, x4)

inst_62:
// rs1_w0_val == -1048577, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0xffbf0001
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffefffff, 0xffbf0001, x2, 128, x4)

inst_63:
// rs1_w0_val == -262145, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0xfffcffbf
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffbffff, 0xfffcffbf, x2, 132, x4)

inst_64:
// rs1_w0_val == -131073, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0x2000ffef
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffdffff, 0x2000ffef, x2, 136, x4)

inst_65:
// rs1_w0_val == -65537, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xfffefffe
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffeffff, 0xfffefffe, x2, 140, x4)

inst_66:
// rs1_w0_val == -32769, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xf7ff8000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffff7fff, 0xf7ff8000, x2, 144, x4)

inst_67:
// rs1_w0_val == -8193, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0x050009
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffdfff, 0x050009, x2, 148, x4)

inst_68:
// rs1_w0_val == -4097, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0xffffffbf
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffefff, 0xffffffbf, x2, 152, x4)

inst_69:
// rs1_w0_val == -2049, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:0x40000020
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffff7ff, 0x40000020, x2, 156, x4)

inst_70:
// rs1_w0_val == -257, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x010010
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffeff, 0x010010, x2, 160, x4)

inst_71:
// rs1_w0_val == -129, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0x07fffa
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffff7f, 0x07fffa, x2, 164, x4)

inst_72:
// rs1_w0_val == -33, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xff7f0009
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffffdf, 0xff7f0009, x2, 168, x4)

inst_73:
// rs1_w0_val == -17, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xfff7ffbf
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xffffffef, 0xfff7ffbf, x2, 172, x4)

inst_74:
// rs1_w0_val == -9, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0xdfffffef
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffff7, 0xdfffffef, x2, 176, x4)

inst_75:
// rs1_w0_val == -3, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0x103fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffffd, 0x103fff, x2, 180, x4)

inst_76:
// rs1_w0_val == -2, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x20002000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffffe, 0x20002000, x2, 184, x4)

inst_77:
// rs1_w0_val == 268435456, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xfffdfffe
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x10000000, 0xfffdfffe, x2, 188, x4)

inst_78:
// rs1_w0_val == 134217728, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xdffff7ff
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x8000000, 0xdffff7ff, x2, 192, x4)

inst_79:
// rs1_w0_val == 67108864, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xbffffff9
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x4000000, 0xbffffff9, x2, 196, x4)

inst_80:
// rs1_w0_val == 2097152, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xffbf0002
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x200000, 0xffbf0002, x2, 200, x4)

inst_81:
// rs1_w0_val == 524288, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x080000;  op2val:0x10000100
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x080000, 0x10000100, x2, 204, x4)

inst_82:
// rs1_w0_val == 65536, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0x7ffffff7
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x010000, 0x7ffffff7, x2, 208, x4)

inst_83:
// rs1_w0_val == 16384, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x004000;  op2val:0xc0000020
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x004000, 0xc0000020, x2, 212, x4)

inst_84:
// rs1_w0_val == 4096, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x001000;  op2val:0x020003
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x001000, 0x020003, x2, 216, x4)

inst_85:
// rs1_w0_val == 2048, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000800;  op2val:0x10000080
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000800, 0x10000080, x2, 220, x4)

inst_86:
// rs1_w0_val == 1024, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000400;  op2val:0xfffb0200
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000400, 0xfffb0200, x2, 224, x4)

inst_87:
// rs2_h1_val == -21846, rs2_h0_val == 16384, rs1_w0_val == 8
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000008;  op2val:0xaaaa4000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000008, 0xaaaa4000, x2, 228, x4)

inst_88:
// rs2_h1_val == 32767, rs1_w0_val == 0
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000000;  op2val:0x7fffc000
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0x000000, 0x7fffc000, x2, 232, x4)

inst_89:
// rs2_h1_val == 128, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0x800003
TEST_RR_OP(smmwt, x31, x30, x29, 0x00000000, 0xfffffff6, 0x800003, x2, 236, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
