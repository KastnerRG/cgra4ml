
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmplt8 instruction of the RISC-V RV32PZicsr extension for the ucmplt8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmplt8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x12, rd==x13, rs1_b0_val == 0, rs1_b3_val == 251, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val == 127, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 32, rs1_b2_val == 253
// opcode: ucmplt8 ; op1:x22; op2:x12; dest:x13; op1val:0xfbfd7f00;  op2val:0x200c0d0a
TEST_RR_OP(ucmplt8, x13, x22, x12, 0x00000000, 0xfbfd7f00, 0x200c0d0a, x4, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x1, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 64, rs1_b0_val == 2, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 247, rs2_b3_val == 64, rs1_b2_val == 2
// opcode: ucmplt8 ; op1:x19; op2:x19; dest:x1; op1val:0x40021202;  op2val:0x40030ef7
TEST_RR_OP(ucmplt8, x1, x19, x19, 0x00000000, 0x40021202, 0x40030ef7, x4, 4, x10)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x21, rd==x16, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b0_val == 64, rs2_b2_val == 223, rs1_b2_val == 223, rs1_b3_val == 8
// opcode: ucmplt8 ; op1:x16; op2:x21; dest:x16; op1val:0x8df0e02;  op2val:0x3df1140
TEST_RR_OP(ucmplt8, x16, x16, x21, 0x00000000, 0x8df0e02, 0x3df1140, x4, 8, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 127, rs2_b3_val == 223
// opcode: ucmplt8 ; op1:x9; op2:x9; dest:x9; op1val:0x7f071309;  op2val:0xdf11130c
TEST_RR_OP(ucmplt8, x9, x9, x9, 0x00000000, 0x7f071309, 0xdf11130c, x4, 12, x10)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x6, rd==x6, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 253, rs1_b3_val == 85, rs2_b1_val == 32, rs2_b2_val == 127
// opcode: ucmplt8 ; op1:x2; op2:x6; dest:x6; op1val:0x5502fd07;  op2val:0x97f2007
TEST_RR_OP(ucmplt8, x6, x2, x6, 0x00000000, 0x5502fd07, 0x97f2007, x4, 16, x10)

inst_5:
// rs1==x23, rs2==x2, rd==x27, rs2_b3_val == 170, rs1_b0_val == 16, rs2_b0_val == 191, rs1_b3_val == 0, rs2_b2_val == 2, rs1_b1_val == 0, rs2_b1_val == 254
// opcode: ucmplt8 ; op1:x23; op2:x2; dest:x27; op1val:0x030010;  op2val:0xaa02febf
TEST_RR_OP(ucmplt8, x27, x23, x2, 0x00000000, 0x030010, 0xaa02febf, x4, 20, x10)

inst_6:
// rs1==x8, rs2==x7, rd==x22, rs2_b3_val == 85, rs2_b2_val == 247, rs1_b1_val == 251, rs2_b1_val == 223, rs1_b0_val == 239, rs1_b2_val == 4
// opcode: ucmplt8 ; op1:x8; op2:x7; dest:x22; op1val:0x304fbef;  op2val:0x55f7df07
TEST_RR_OP(ucmplt8, x22, x8, x7, 0x00000000, 0x304fbef, 0x55f7df07, x4, 24, x10)

inst_7:
// rs1==x18, rs2==x27, rd==x0, rs2_b3_val == 127, rs1_b3_val == 254, rs2_b2_val == 8, rs1_b1_val == 85, rs1_b2_val == 255
// opcode: ucmplt8 ; op1:x18; op2:x27; dest:x0; op1val:0xfeff5513;  op2val:0x7f080af7
TEST_RR_OP(ucmplt8, x0, x18, x27, 0x00000000, 0xfeff5513, 0x7f080af7, x4, 28, x10)

inst_8:
// rs1==x26, rs2==x11, rd==x7, rs2_b3_val == 191, rs2_b1_val == 1, rs1_b3_val == 1, rs2_b2_val == 4, rs1_b2_val == 127, rs1_b1_val == 4
// opcode: ucmplt8 ; op1:x26; op2:x11; dest:x7; op1val:0x17f0410;  op2val:0xbf040140
TEST_RR_OP(ucmplt8, x7, x26, x11, 0x00000000, 0x17f0410, 0xbf040140, x4, 32, x10)

inst_9:
// rs1==x20, rs2==x5, rd==x11, rs2_b3_val == 239, rs1_b2_val == 239, rs1_b0_val == 254, rs2_b0_val == 2, rs1_b1_val == 32
// opcode: ucmplt8 ; op1:x20; op2:x5; dest:x11; op1val:0x1ef20fe;  op2val:0xef130702
TEST_RR_OP(ucmplt8, x11, x20, x5, 0x00000000, 0x1ef20fe, 0xef130702, x4, 36, x10)

inst_10:
// rs1==x0, rs2==x16, rd==x5, rs2_b3_val == 247, rs2_b2_val == 170
// opcode: ucmplt8 ; op1:x0; op2:x16; dest:x5; op1val:0x802fb0b;  op2val:0xf7aa0c06
TEST_RR_OP(ucmplt8, x5, x0, x16, 0x00000000, 0x802fb0b, 0xf7aa0c06, x4, 40, x10)

inst_11:
// rs1==x21, rs2==x28, rd==x8, rs2_b3_val == 251, rs1_b2_val == 0
// opcode: ucmplt8 ; op1:x21; op2:x28; dest:x8; op1val:0xfe000513;  op2val:0xfb0fdf0f
TEST_RR_OP(ucmplt8, x8, x21, x28, 0x00000000, 0xfe000513, 0xfb0fdf0f, x4, 44, x10)

inst_12:
// rs1==x24, rs2==x25, rd==x12, rs2_b3_val == 253, rs2_b2_val == 254, rs1_b1_val == 254, rs2_b0_val == 253, rs1_b0_val == 127, rs2_b1_val == 64
// opcode: ucmplt8 ; op1:x24; op2:x25; dest:x12; op1val:0x80ffe7f;  op2val:0xfdfe40fd
TEST_RR_OP(ucmplt8, x12, x24, x25, 0x00000000, 0x80ffe7f, 0xfdfe40fd, x4, 48, x10)

inst_13:
// rs1==x11, rs2==x18, rd==x3, rs2_b3_val == 254, rs2_b1_val == 2, rs2_b2_val == 251, rs1_b3_val == 253
// opcode: ucmplt8 ; op1:x11; op2:x18; dest:x3; op1val:0xfd060009;  op2val:0xfefb0203
TEST_RR_OP(ucmplt8, x3, x11, x18, 0x00000000, 0xfd060009, 0xfefb0203, x4, 52, x10)

inst_14:
// rs1==x17, rs2==x0, rd==x28, rs2_b3_val == 128, rs1_b2_val == 64, rs2_b0_val == 32, rs2_b2_val == 239
// opcode: ucmplt8 ; op1:x17; op2:x0; dest:x28; op1val:0x7f40000f;  op2val:0x80ef0920
TEST_RR_OP(ucmplt8, x28, x17, x0, 0x00000000, 0x7f40000f, 0x80ef0920, x4, 56, x10)

inst_15:
// rs1==x12, rs2==x30, rd==x14, rs2_b3_val == 16, rs2_b2_val == 191, rs1_b3_val == 247
// opcode: ucmplt8 ; op1:x12; op2:x30; dest:x14; op1val:0xf70703fe;  op2val:0x10bf0d06
TEST_RR_OP(ucmplt8, x14, x12, x30, 0x00000000, 0xf70703fe, 0x10bf0d06, x4, 60, x10)

inst_16:
// rs1==x6, rs2==x29, rd==x31, rs2_b3_val == 8, 
// opcode: ucmplt8 ; op1:x6; op2:x29; dest:x31; op1val:0x1240fe09;  op2val:0x81220fd
TEST_RR_OP(ucmplt8, x31, x6, x29, 0x00000000, 0x1240fe09, 0x81220fd, x4, 64, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x4, rs2==x31, rd==x25, rs2_b3_val == 4, rs1_b1_val == 64, rs1_b3_val == 191, rs2_b1_val == 16
// opcode: ucmplt8 ; op1:x4; op2:x31; dest:x25; op1val:0xbfff4013;  op2val:0x4081040
TEST_RR_OP(ucmplt8, x25, x4, x31, 0x00000000, 0xbfff4013, 0x4081040, x6, 0, x9)

inst_18:
// rs1==x5, rs2==x8, rd==x20, rs2_b3_val == 2, rs1_b2_val == 1, rs2_b1_val == 8, rs2_b0_val == 128, rs2_b2_val == 255
// opcode: ucmplt8 ; op1:x5; op2:x8; dest:x20; op1val:0x101fd7f;  op2val:0x2ff0880
TEST_RR_OP(ucmplt8, x20, x5, x8, 0x00000000, 0x101fd7f, 0x2ff0880, x6, 4, x9)

inst_19:
// rs1==x31, rs2==x17, rd==x23, rs2_b3_val == 1, rs1_b2_val == 191, rs2_b0_val == 8, rs2_b1_val == 128, rs1_b1_val == 8
// opcode: ucmplt8 ; op1:x31; op2:x17; dest:x23; op1val:0x11bf0812;  op2val:0x10e8008
TEST_RR_OP(ucmplt8, x23, x31, x17, 0x00000000, 0x11bf0812, 0x10e8008, x6, 8, x9)

inst_20:
// rs1==x13, rs2==x24, rd==x2, rs2_b3_val == 255, rs2_b2_val == 0, rs2_b0_val == 251, rs1_b0_val == 170
// opcode: ucmplt8 ; op1:x13; op2:x24; dest:x2; op1val:0xe0511aa;  op2val:0xff0080fb
TEST_RR_OP(ucmplt8, x2, x13, x24, 0x00000000, 0xe0511aa, 0xff0080fb, x6, 12, x9)

inst_21:
// rs1==x25, rs2==x14, rd==x24, rs2_b3_val == 0, rs1_b2_val == 32, rs1_b3_val == 16
// opcode: ucmplt8 ; op1:x25; op2:x14; dest:x24; op1val:0x1020120d;  op2val:0x132005
TEST_RR_OP(ucmplt8, x24, x25, x14, 0x00000000, 0x1020120d, 0x132005, x6, 16, x9)

inst_22:
// rs1==x1, rs2==x4, rd==x17, rs2_b2_val == 85, rs2_b0_val == 223, rs1_b0_val == 4, rs1_b1_val == 239, rs2_b1_val == 247
// opcode: ucmplt8 ; op1:x1; op2:x4; dest:x17; op1val:0xbf09ef04;  op2val:0xb55f7df
TEST_RR_OP(ucmplt8, x17, x1, x4, 0x00000000, 0xbf09ef04, 0xb55f7df, x6, 20, x9)

inst_23:
// rs1==x28, rs2==x22, rd==x4, rs2_b2_val == 253, rs1_b0_val == 247, rs2_b1_val == 191
// opcode: ucmplt8 ; op1:x28; op2:x22; dest:x4; op1val:0x80003f7;  op2val:0xaafdbf80
TEST_RR_OP(ucmplt8, x4, x28, x22, 0x00000000, 0x80003f7, 0xaafdbf80, x6, 24, x9)

inst_24:
// rs1==x27, rs2==x23, rd==x15, rs1_b1_val == 170, rs2_b1_val == 251
// opcode: ucmplt8 ; op1:x27; op2:x23; dest:x15; op1val:0xd0faa06;  op2val:0xbf02fb11
TEST_RR_OP(ucmplt8, x15, x27, x23, 0x00000000, 0xd0faa06, 0xbf02fb11, x6, 28, x9)

inst_25:
// rs1==x15, rs2==x26, rd==x29, rs1_b1_val == 191, rs1_b3_val == 239
// opcode: ucmplt8 ; op1:x15; op2:x26; dest:x29; op1val:0xef0dbf10;  op2val:0xbfff060e
TEST_RR_OP(ucmplt8, x29, x15, x26, 0x00000000, 0xef0dbf10, 0xbfff060e, x6, 32, x9)

inst_26:
// rs1==x3, rs2==x13, rd==x18, rs1_b1_val == 223, rs1_b3_val == 4
// opcode: ucmplt8 ; op1:x3; op2:x13; dest:x18; op1val:0x4dfdf0a;  op2val:0xffef0d09
TEST_RR_OP(ucmplt8, x18, x3, x13, 0x00000000, 0x4dfdf0a, 0xffef0d09, x6, 36, x9)

inst_27:
// rs1==x10, rs2==x15, rd==x30, rs1_b1_val == 247, rs2_b1_val == 239, rs2_b0_val == 0, rs1_b0_val == 85
// opcode: ucmplt8 ; op1:x10; op2:x15; dest:x30; op1val:0x550af755;  op2val:0xbfffef00
TEST_RR_OP(ucmplt8, x30, x10, x15, 0x00000000, 0x550af755, 0xbfffef00, x6, 40, x9)

inst_28:
// rs1==x14, rs2==x1, rd==x19, rs1_b1_val == 128, rs1_b2_val == 8, rs2_b2_val == 1
// opcode: ucmplt8 ; op1:x14; op2:x1; dest:x19; op1val:0xd08807f;  op2val:0x3010c07
TEST_RR_OP(ucmplt8, x19, x14, x1, 0x00000000, 0xd08807f, 0x3010c07, x6, 44, x9)

inst_29:
// rs1==x30, rs2==x3, rd==x10, rs1_b1_val == 16, 
// opcode: ucmplt8 ; op1:x30; op2:x3; dest:x10; op1val:0xef100e;  op2val:0x4fd020e
TEST_RR_OP(ucmplt8, x10, x30, x3, 0x00000000, 0xef100e, 0x4fd020e, x6, 48, x9)

inst_30:
// rs1==x29, rs2==x20, rd==x21, rs1_b1_val == 2, rs2_b1_val == 253, rs2_b0_val == 255
// opcode: ucmplt8 ; op1:x29; op2:x20; dest:x21; op1val:0x60d02f7;  op2val:0x550bfdff
TEST_RR_OP(ucmplt8, x21, x29, x20, 0x00000000, 0x60d02f7, 0x550bfdff, x6, 52, x9)

inst_31:
// rs1==x7, rs2==x10, rd==x26, rs1_b1_val == 1, rs2_b0_val == 254
// opcode: ucmplt8 ; op1:x7; op2:x10; dest:x26; op1val:0xf000109;  op2val:0xb1303fe
TEST_RR_OP(ucmplt8, x26, x7, x10, 0x00000000, 0xf000109, 0xb1303fe, x6, 56, x9)

inst_32:
// rs1_b1_val == 255, rs1_b0_val == 223
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x920ffdf;  op2val:0x7ffb02df
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x920ffdf, 0x7ffb02df, x6, 60, x1)

inst_33:
// rs1_b0_val == 191, rs1_b3_val == 223
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfefffbf;  op2val:0x40c0afe
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xdfefffbf, 0x40c0afe, x6, 64, x1)

inst_34:
// rs1_b0_val == 251, rs1_b2_val == 128
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xd80aafb;  op2val:0xd050120
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xd80aafb, 0xd050120, x6, 68, x1)

inst_35:
// rs1_b0_val == 253, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x110e0efd;  op2val:0x1ff060e
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x110e0efd, 0x1ff060e, x6, 72, x1)

inst_36:
// rs1_b0_val == 128, rs1_b2_val == 16, rs2_b0_val == 4
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x9104080;  op2val:0xcefef04
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x9104080, 0xcefef04, x6, 76, x1)

inst_37:
// rs1_b0_val == 64, rs2_b2_val == 64
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fd0a40;  op2val:0x7f4003f7
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x10fd0a40, 0x7f4003f7, x6, 80, x1)

inst_38:
// rs2_b1_val == 4, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x13ff55aa;  op2val:0x12110405
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x13ff55aa, 0x12110405, x6, 84, x1)

inst_39:
// rs2_b1_val == 255, rs1_b3_val == 2, rs1_b2_val == 254
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fe7f0f;  op2val:0x1006ff03
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x2fe7f0f, 0x1006ff03, x6, 88, x1)

inst_40:
// rs2_b1_val == 0, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x130e020f;  op2val:0x54000bf
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x130e020f, 0x54000bf, x6, 92, x1)

inst_41:
// rs2_b0_val == 170, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x77f550f;  op2val:0x7fdf04aa
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x77f550f, 0x7fdf04aa, x6, 96, x1)

inst_42:
// rs2_b0_val == 85, rs1_b2_val == 247
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x12f70004;  op2val:0x80d0355
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x12f70004, 0x80d0355, x6, 100, x1)

inst_43:
// rs2_b0_val == 127, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x12090902;  op2val:0x308807f
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x12090902, 0x308807f, x6, 104, x1)

inst_44:
// rs2_b0_val == 239, rs1_b2_val == 251, rs1_b0_val == 1
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x11fb1001;  op2val:0x84080ef
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x11fb1001, 0x84080ef, x6, 108, x1)

inst_45:
// rs2_b0_val == 16, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x27f0df7;  op2val:0x550dfd10
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x27f0df7, 0x550dfd10, x6, 112, x1)

inst_46:
// rs2_b0_val == 1, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeef0d02;  op2val:0x137fdf01
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xfeef0d02, 0x137fdf01, x6, 116, x1)

inst_47:
// rs1_b0_val == 32, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x13fd1320;  op2val:0xdf080d02
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x13fd1320, 0xdf080d02, x6, 120, x1)

inst_48:
// rs1_b0_val == 8, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fd0708;  op2val:0xf7080013
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x9fd0708, 0xf7080013, x6, 124, x1)

inst_49:
// rs1_b3_val == 128, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x8001df03;  op2val:0xbf07fe
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x8001df03, 0xbf07fe, x6, 128, x1)

inst_50:
// rs1_b3_val == 32, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x200abf20;  op2val:0xbf12090f
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x200abf20, 0xbf12090f, x6, 132, x1)

inst_51:
// rs2_b2_val == 128, rs2_b1_val == 85
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x1111312;  op2val:0x38055fd
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x1111312, 0x38055fd, x6, 136, x1)

inst_52:
// rs1_b0_val == 255, rs2_b1_val == 170
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70f00ff;  op2val:0x1112aa55
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xf70f00ff, 0x1112aa55, x6, 140, x1)

inst_53:
// rs2_b2_val == 32, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2007fe03;  op2val:0xff2009fb
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x2007fe03, 0xff2009fb, x6, 144, x1)

inst_54:
// rs2_b1_val == 127, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x611047f;  op2val:0xfdfb7fbf
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x611047f, 0xfdfb7fbf, x6, 148, x1)

inst_55:
// rs1_b3_val == 170, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafd1110;  op2val:0x10128012
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xaafd1110, 0x10128012, x6, 152, x1)

inst_56:
// rs2_b2_val == 16, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x408100f;  op2val:0x2010fe20
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x408100f, 0x2010fe20, x6, 156, x1)

inst_57:
// rs1_b3_val == 255, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0903;  op2val:0x7f70605
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0xfffb0903, 0x7f70605, x6, 160, x1)

inst_58:
// rs1_b2_val == 170, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x40aa0213;  op2val:0xbfe0f09
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x40aa0213, 0xbfe0f09, x6, 164, x1)

inst_59:
// rs1_b2_val == 85, 
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x1355df0a;  op2val:0xef20aa80
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x1355df0a, 0xef20aa80, x6, 168, x1)

inst_60:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 64, rs1_b0_val == 2, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 247, rs2_b3_val == 64, rs1_b2_val == 2
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x40021202;  op2val:0x40030ef7
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x40021202, 0x40030ef7, x6, 172, x1)

inst_61:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 127, rs2_b3_val == 223
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f071309;  op2val:0xdf11130c
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x7f071309, 0xdf11130c, x6, 176, x1)

inst_62:
// rs2_b3_val == 247, rs2_b2_val == 170
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x802fb0b;  op2val:0xf7aa0c06
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x802fb0b, 0xf7aa0c06, x6, 180, x1)

inst_63:
// rs2_b3_val == 128, rs1_b2_val == 64, rs2_b0_val == 32, rs2_b2_val == 239
// opcode: ucmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f40000f;  op2val:0x80ef0920
TEST_RR_OP(ucmplt8, x31, x30, x29, 0x00000000, 0x7f40000f, 0x80ef0920, x6, 184, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 47*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
