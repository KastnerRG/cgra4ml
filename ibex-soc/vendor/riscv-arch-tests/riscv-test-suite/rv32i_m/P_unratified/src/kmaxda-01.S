
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmaxda instruction of the RISC-V RV32PZicsr extension for the kmaxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmaxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x1, rd==x27, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == 2, rs2_h1_val == -17
// opcode: kmaxda ; op1:x28; op2:x1; dest:x27; op1val:0x028000;  op2val:0xffef0100
TEST_PKRR_OP(kmaxda, x27, x28, x1, 0x00000000, 0x028000, 0xffef0100, x28, x12, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x11, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -129, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -2049
// opcode: kmaxda ; op1:x13; op2:x13; dest:x11; op1val:0x05ff7f;  op2val:0x05f7ff
TEST_PKRR_OP(kmaxda, x11, x13, x13, 0x00000000, 0x05ff7f, 0x05f7ff, x13, x12, 8, x14)

inst_2:
// rs1 == rd != rs2, rs1==x22, rs2==x8, rd==x22, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -8193, rs2_h0_val == 0, rs2_h1_val == 2048
// opcode: kmaxda ; op1:x22; op2:x8; dest:x22; op1val:0xdfff0007;  op2val:0x8000000
TEST_PKRR_OP(kmaxda, x22, x22, x8, 0x00000000, 0xdfff0007, 0x8000000, x22, x12, 16, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -2
// opcode: kmaxda ; op1:x30; op2:x30; dest:x30; op1val:0xfffe0009;  op2val:0xffef0007
TEST_PKRR_OP(kmaxda, x30, x30, x30, 0x00000000, 0xfffe0009, 0xffef0007, x30, x12, 24, x14)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x2, rd==x2, rs1_h0_val == rs2_h0_val, rs1_h1_val == -129
// opcode: kmaxda ; op1:x11; op2:x2; dest:x2; op1val:0xff7f3fff;  op2val:0xfffc3fff
TEST_PKRR_OP(kmaxda, x2, x11, x2, 0x00000000, 0xff7f3fff, 0xfffc3fff, x11, x12, 32, x14)

inst_5:
// rs1==x8, rs2==x26, rd==x9, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -9, rs2_h1_val == -4097, rs2_h0_val == -32768, rs1_h0_val == 8192
// opcode: kmaxda ; op1:x8; op2:x26; dest:x9; op1val:0xfff72000;  op2val:0xefff8000
TEST_PKRR_OP(kmaxda, x9, x8, x26, 0x00000000, 0xfff72000, 0xefff8000, x8, x12, 40, x14)

inst_6:
// rs1==x15, rs2==x17, rd==x26, rs2_h1_val == -21846, rs1_h1_val == -2049, rs2_h0_val == 32, rs1_h0_val == -4097
// opcode: kmaxda ; op1:x15; op2:x17; dest:x26; op1val:0xf7ffefff;  op2val:0xaaaa0020
TEST_PKRR_OP(kmaxda, x26, x15, x17, 0x00000000, 0xf7ffefff, 0xaaaa0020, x15, x12, 48, x14)

inst_7:
// rs1==x2, rs2==x7, rd==x19, rs2_h1_val == 21845, rs2_h0_val == -4097, rs1_h1_val == -32768
// opcode: kmaxda ; op1:x2; op2:x7; dest:x19; op1val:0x80003fff;  op2val:0x5555efff
TEST_PKRR_OP(kmaxda, x19, x2, x7, 0x00000000, 0x80003fff, 0x5555efff, x2, x12, 56, x14)

inst_8:
// rs1==x0, rs2==x24, rd==x3, rs2_h1_val == 32767, rs1_h1_val == -17, rs2_h0_val == -9
// opcode: kmaxda ; op1:x0; op2:x24; dest:x3; op1val:0xffefff7f;  op2val:0x7ffffff7
TEST_PKRR_OP(kmaxda, x3, x0, x24, 0x00000000, 0xffefff7f, 0x7ffffff7, x0, x12, 64, x14)

inst_9:
// rs1==x19, rs2==x28, rd==x7, rs2_h1_val == -16385, rs1_h1_val == 4, rs2_h0_val == 8192
// opcode: kmaxda ; op1:x19; op2:x28; dest:x7; op1val:0x04fffc;  op2val:0xbfff2000
TEST_PKRR_OP(kmaxda, x7, x19, x28, 0x00000000, 0x04fffc, 0xbfff2000, x19, x12, 72, x14)

inst_10:
// rs1==x31, rs2==x6, rd==x0, rs2_h1_val == -8193, rs1_h1_val == -33, rs1_h0_val == 0
// opcode: kmaxda ; op1:x31; op2:x6; dest:x0; op1val:0xffdf0000;  op2val:0xdfff0000
TEST_PKRR_OP(kmaxda, x0, x31, x6, 0x00000000, 0xffdf0000, 0xdfff0000, x31, x12, 80, x14)

inst_11:
// rs1==x27, rs2==x9, rd==x10, rs2_h1_val == -2049, rs1_h0_val == -2049
// opcode: kmaxda ; op1:x27; op2:x9; dest:x10; op1val:0xf7fff7ff;  op2val:0xf7fffffa
TEST_PKRR_OP(kmaxda, x10, x27, x9, 0x00000000, 0xf7fff7ff, 0xf7fffffa, x27, x12, 88, x14)

inst_12:
// rs1==x17, rs2==x25, rd==x1, rs2_h1_val == -1025, rs2_h0_val == 21845, rs1_h1_val == -5
// opcode: kmaxda ; op1:x17; op2:x25; dest:x1; op1val:0xfffbfffa;  op2val:0xfbff5555
TEST_PKRR_OP(kmaxda, x1, x17, x25, 0x00000000, 0xfffbfffa, 0xfbff5555, x17, x12, 96, x14)

inst_13:
// rs1==x3, rs2==x0, rd==x18, rs2_h1_val == -513, rs2_h0_val == -2, rs1_h1_val == -513
// opcode: kmaxda ; op1:x3; op2:x0; dest:x18; op1val:0xfdff0006;  op2val:0xfdfffffe
TEST_PKRR_OP(kmaxda, x18, x3, x0, 0x00000000, 0xfdff0006, 0xfdfffffe, x3, x12, 104, x14)

inst_14:
// rs1==x7, rs2==x21, rd==x5, rs2_h1_val == -257, rs1_h0_val == -513, rs2_h0_val == -33
// opcode: kmaxda ; op1:x7; op2:x21; dest:x5; op1val:0xc000fdff;  op2val:0xfeffffdf
TEST_PKRR_OP(kmaxda, x5, x7, x21, 0x00000000, 0xc000fdff, 0xfeffffdf, x7, x12, 112, x14)

inst_15:
// rs1==x9, rs2==x31, rd==x15, rs2_h1_val == -129, rs1_h1_val == -1, rs1_h0_val == -1025, rs2_h0_val == 2048
// opcode: kmaxda ; op1:x9; op2:x31; dest:x15; op1val:0xfffffbff;  op2val:0xff7f0800
TEST_PKRR_OP(kmaxda, x15, x9, x31, 0x00000000, 0xfffffbff, 0xff7f0800, x9, x12, 120, x14)

inst_16:
// rs1==x6, rs2==x20, rd==x4, rs2_h1_val == -65, rs1_h0_val == -5, rs1_h1_val == -3, rs2_h0_val == -17
// opcode: kmaxda ; op1:x6; op2:x20; dest:x4; op1val:0xfffdfffb;  op2val:0xffbfffef
TEST_PKRR_OP(kmaxda, x4, x6, x20, 0x00000000, 0xfffdfffb, 0xffbfffef, x6, x12, 128, x14)

inst_17:
// rs1==x1, rs2==x23, rd==x14, rs2_h1_val == -33, rs2_h0_val == 2
// opcode: kmaxda ; op1:x1; op2:x23; dest:x14; op1val:0x052000;  op2val:0xffdf0002
TEST_PKRR_OP(kmaxda, x14, x1, x23, 0x00000000, 0x052000, 0xffdf0002, x1, x12, 136, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x25, rs2==x18, rd==x6, rs2_h1_val == -9, rs2_h0_val == -16385
// opcode: kmaxda ; op1:x25; op2:x18; dest:x6; op1val:0xffff0003;  op2val:0xfff7bfff
TEST_PKRR_OP(kmaxda, x6, x25, x18, 0x00000000, 0xffff0003, 0xfff7bfff, x25, x1, 0, x2)

inst_19:
// rs1==x18, rs2==x4, rd==x23, rs2_h1_val == -5, rs1_h1_val == 2048, rs2_h0_val == 32767
// opcode: kmaxda ; op1:x18; op2:x4; dest:x23; op1val:0x8000007;  op2val:0xfffb7fff
TEST_PKRR_OP(kmaxda, x23, x18, x4, 0x00000000, 0x8000007, 0xfffb7fff, x18, x1, 8, x2)

inst_20:
// rs1==x5, rs2==x12, rd==x28, rs2_h1_val == -3, rs1_h1_val == -4097, rs2_h0_val == 16384, rs1_h0_val == -257
// opcode: kmaxda ; op1:x5; op2:x12; dest:x28; op1val:0xeffffeff;  op2val:0xfffd4000
TEST_PKRR_OP(kmaxda, x28, x5, x12, 0x00000000, 0xeffffeff, 0xfffd4000, x5, x1, 16, x2)

inst_21:
// rs1==x23, rs2==x29, rd==x13, rs2_h1_val == -2, rs1_h1_val == -257, rs1_h0_val == 4
// opcode: kmaxda ; op1:x23; op2:x29; dest:x13; op1val:0xfeff0004;  op2val:0xfffefffa
TEST_PKRR_OP(kmaxda, x13, x23, x29, 0x00000000, 0xfeff0004, 0xfffefffa, x23, x1, 24, x2)

inst_22:
// rs1==x4, rs2==x5, rd==x21, rs2_h1_val == -32768, rs1_h1_val == 512
// opcode: kmaxda ; op1:x4; op2:x5; dest:x21; op1val:0x2000007;  op2val:0x8000ffdf
TEST_PKRR_OP(kmaxda, x21, x4, x5, 0x00000000, 0x2000007, 0x8000ffdf, x4, x1, 32, x2)

inst_23:
// rs1==x16, rs2==x10, rd==x20, rs2_h1_val == 16384, rs1_h1_val == -65, rs1_h0_val == -3, rs2_h0_val == -129
// opcode: kmaxda ; op1:x16; op2:x10; dest:x20; op1val:0xffbffffd;  op2val:0x4000ff7f
TEST_PKRR_OP(kmaxda, x20, x16, x10, 0x00000000, 0xffbffffd, 0x4000ff7f, x16, x1, 40, x2)

inst_24:
// rs1==x21, rs2==x3, rd==x24, rs2_h1_val == 8192, rs2_h0_val == -1, rs1_h0_val == 4096
// opcode: kmaxda ; op1:x21; op2:x3; dest:x24; op1val:0xfff91000;  op2val:0x2000ffff
TEST_PKRR_OP(kmaxda, x24, x21, x3, 0x00000000, 0xfff91000, 0x2000ffff, x21, x1, 48, x2)

inst_25:
// rs1==x29, rs2==x22, rd==x25, rs2_h1_val == 4096, rs1_h0_val == 8
// opcode: kmaxda ; op1:x29; op2:x22; dest:x25; op1val:0xfff90008;  op2val:0x10004000
TEST_PKRR_OP(kmaxda, x25, x29, x22, 0x00000000, 0xfff90008, 0x10004000, x29, x1, 56, x2)

inst_26:
// rs1==x12, rs2==x27, rd==x29, rs2_h1_val == 1024, rs1_h1_val == 16384
// opcode: kmaxda ; op1:x12; op2:x27; dest:x29; op1val:0x4000fffd;  op2val:0x4008000
TEST_PKRR_OP(kmaxda, x29, x12, x27, 0x00000000, 0x4000fffd, 0x4008000, x12, x1, 64, x2)

inst_27:
// rs1==x10, rs2==x11, rd==x8, rs2_h1_val == 512, rs2_h0_val == -3, rs1_h0_val == -2
// opcode: kmaxda ; op1:x10; op2:x11; dest:x8; op1val:0xfefffffe;  op2val:0x200fffd
TEST_PKRR_OP(kmaxda, x8, x10, x11, 0x00000000, 0xfefffffe, 0x200fffd, x10, x1, 72, x2)

inst_28:
// rs1==x24, rs2==x15, rd==x31, rs2_h1_val == 256, rs1_h1_val == 32, rs1_h0_val == -17
// opcode: kmaxda ; op1:x24; op2:x15; dest:x31; op1val:0x20ffef;  op2val:0x100fff8
TEST_PKRR_OP(kmaxda, x31, x24, x15, 0x00000000, 0x20ffef, 0x100fff8, x24, x1, 80, x2)

inst_29:
// rs1==x20, rs2==x14, rd==x16, rs1_h0_val == -65, rs2_h0_val == -8193
// opcode: kmaxda ; op1:x20; op2:x14; dest:x16; op1val:0x8000ffbf;  op2val:0x1000dfff
TEST_PKRR_OP(kmaxda, x16, x20, x14, 0x00000000, 0x8000ffbf, 0x1000dfff, x20, x1, 88, x2)

inst_30:
// rs1==x26, rs2==x19, rd==x12, rs1_h0_val == -33, 
// opcode: kmaxda ; op1:x26; op2:x19; dest:x12; op1val:0xfeffffdf;  op2val:0xfff8ffdf
TEST_PKRR_OP(kmaxda, x12, x26, x19, 0x00000000, 0xfeffffdf, 0xfff8ffdf, x26, x1, 96, x2)

inst_31:
// rs1==x14, rs2==x16, rd==x17, rs1_h0_val == -9, 
// opcode: kmaxda ; op1:x14; op2:x16; dest:x17; op1val:0xffbffff7;  op2val:0x09fffd
TEST_PKRR_OP(kmaxda, x17, x14, x16, 0x00000000, 0xffbffff7, 0x09fffd, x14, x1, 104, x2)

inst_32:
// rs1_h0_val == 16384, rs2_h0_val == -5
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0xdffffffb
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xffdf4000, 0xdffffffb, x30, x1, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs1_h0_val == 2048, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0800;  op2val:0xfffdfff9
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffe0800, 0xfffdfff9, x30, x1, 0, x2)

inst_34:
// rs1_h0_val == 1024, rs2_h1_val == 16
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xc0000400;  op2val:0x100002
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xc0000400, 0x100002, x30, x1, 8, x2)

inst_35:
// rs1_h0_val == 512, rs2_h1_val == 0
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0200;  op2val:0x00f7ff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffa0200, 0x00f7ff, x30, x1, 16, x2)

inst_36:
// rs1_h0_val == 256, rs1_h1_val == 8192
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x20000100;  op2val:0xfff8efff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x20000100, 0xfff8efff, x30, x1, 24, x2)

inst_37:
// rs1_h0_val == 128, rs1_h1_val == -16385
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0080;  op2val:0x070009
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xbfff0080, 0x070009, x30, x1, 32, x2)

inst_38:
// rs1_h0_val == 64, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff60040;  op2val:0xfbfff7ff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfff60040, 0xfbfff7ff, x30, x1, 40, x2)

inst_39:
// rs1_h0_val == 32, rs2_h0_val == 8
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0020;  op2val:0x7fff0008
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xdfff0020, 0x7fff0008, x30, x1, 48, x2)

inst_40:
// rs1_h0_val == 16, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010;  op2val:0x09fffa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffb0010, 0x09fffa, x30, x1, 56, x2)

inst_41:
// rs1_h0_val == 2, rs2_h0_val == -513
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0002;  op2val:0x1000fdff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfdff0002, 0x1000fdff, x30, x1, 64, x2)

inst_42:
// rs1_h0_val == 1, rs2_h0_val == -21846, rs1_h1_val == 21845
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x55550001;  op2val:0x8000aaaa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x55550001, 0x8000aaaa, x30, x1, 72, x2)

inst_43:
// rs1_h0_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff;  op2val:0x2000fff7
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x5555ffff, 0x2000fff7, x30, x1, 80, x2)

inst_44:
// rs2_h1_val == 128, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xefff0002;  op2val:0x80ffdf
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xefff0002, 0x80ffdf, x30, x1, 88, x2)

inst_45:
// rs2_h1_val == 64, rs1_h1_val == -21846
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0007;  op2val:0x407fff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xaaaa0007, 0x407fff, x30, x1, 96, x2)

inst_46:
// rs2_h1_val == 32, rs1_h0_val == 32767, rs1_h1_val == 256
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x1007fff;  op2val:0x20fffe
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x1007fff, 0x20fffe, x30, x1, 104, x2)

inst_47:
// rs2_h1_val == 8, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffff0020;  op2val:0x08fffc
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xffff0020, 0x08fffc, x30, x1, 112, x2)

inst_48:
// rs2_h0_val == 4096, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff8;  op2val:0xfffc1000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffdfff8, 0xfffc1000, x30, x1, 120, x2)

inst_49:
// rs2_h0_val == 1024, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x8000009;  op2val:0x80000400
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x8000009, 0x80000400, x30, x1, 128, x2)

inst_50:
// rs2_h0_val == 512, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff;  op2val:0x800200
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xdffffeff, 0x800200, x30, x1, 136, x2)

inst_51:
// rs2_h0_val == 128, rs1_h1_val == 16
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x100400;  op2val:0xfffc0080
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x100400, 0xfffc0080, x30, x1, 144, x2)

inst_52:
// rs2_h0_val == 64, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x028000;  op2val:0x070040
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x028000, 0x070040, x30, x1, 152, x2)

inst_53:
// rs2_h0_val == 16, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x55550000;  op2val:0x050010
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x55550000, 0x050010, x30, x1, 160, x2)

inst_54:
// rs2_h0_val == 4, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0000;  op2val:0x20000004
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xff7f0000, 0x20000004, x30, x1, 168, x2)

inst_55:
// rs2_h0_val == 1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff6;  op2val:0xfeff0001
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffafff6, 0xfeff0001, x30, x1, 176, x2)

inst_56:
// rs1_h1_val == 32767, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff1000;  op2val:0x100000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x7fff1000, 0x100000, x30, x1, 184, x2)

inst_57:
// rs1_h1_val == -1025, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff9;  op2val:0xfffe0000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfbfffff9, 0xfffe0000, x30, x1, 192, x2)

inst_58:
// rs1_h0_val == 21845, rs1_h1_val == 128
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x805555;  op2val:0xc000fff8
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x805555, 0xc000fff8, x30, x1, 200, x2)

inst_59:
// rs1_h1_val == 4096, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x10000010;  op2val:0x5555fffd
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x10000010, 0x5555fffd, x30, x1, 208, x2)

inst_60:
// rs2_h1_val == 4, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff9;  op2val:0x04fdff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x5555fff9, 0x04fdff, x30, x1, 216, x2)

inst_61:
// rs1_h1_val == 1024, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x400fffb;  op2val:0x090000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x400fffb, 0x090000, x30, x1, 224, x2)

inst_62:
// rs2_h1_val == 2, rs1_h1_val == 64
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x40ffff;  op2val:0x020007
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x40ffff, 0x020007, x30, x1, 232, x2)

inst_63:
// rs2_h1_val == 1, rs1_h1_val == 1
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x01fffe;  op2val:0x01ffef
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x01fffe, 0x01ffef, x30, x1, 240, x2)

inst_64:
// rs2_h1_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x400080;  op2val:0xffff0003
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x400080, 0xffff0003, x30, x1, 248, x2)

inst_65:
// rs2_h0_val == -65, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x090007;  op2val:0xfdffffbf
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x090007, 0xfdffffbf, x30, x1, 256, x2)

inst_66:
// rs1_h1_val == 8, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff;  op2val:0x40000000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x08fdff, 0x40000000, x30, x1, 264, x2)

inst_67:
// rs1_h1_val == 0, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0x1000c000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x002000, 0x1000c000, x30, x1, 272, x2)

inst_68:
// rs2_h0_val == -1025, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0xfff9fbff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfff77fff, 0xfff9fbff, x30, x1, 280, x2)

inst_69:
// rs1_h0_val == -21846, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa;  op2val:0x08fbff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x8000aaaa, 0x08fbff, x30, x1, 288, x2)

inst_70:
// rs2_h0_val == -257, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x20000001;  op2val:0xbffffeff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x20000001, 0xbffffeff, x30, x1, 296, x2)

inst_71:
// rs1_h0_val == -16385, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff;  op2val:0x010010
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x2000bfff, 0x010010, x30, x1, 304, x2)

inst_72:
// rs1_h0_val == -8193, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcdfff;  op2val:0x050005
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xfffcdfff, 0x050005, x30, x1, 312, x2)

inst_73:
// rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -129, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -2049
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x05ff7f;  op2val:0x05f7ff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0x05ff7f, 0x05f7ff, x30, x1, 320, x2)

inst_74:
// rs2_h1_val == 32767, rs1_h1_val == -17, rs2_h0_val == -9
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffefff7f;  op2val:0x7ffffff7
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x00000000, 0xffefff7f, 0x7ffffff7, x30, x1, 328, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 84*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
