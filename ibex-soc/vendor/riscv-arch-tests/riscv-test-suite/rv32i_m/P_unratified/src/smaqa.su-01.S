
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaqa.su instruction of the RISC-V RV32PZicsr extension for the smaqa.su covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaqa.su)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x19, rd==x31, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == -65, rs1_b0_val != rs2_b0_val, rs2_b1_val == 0, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b0_val == 127, rs2_b3_val == -33
// opcode: smaqa.su ; op1:x16; op2:x19; dest:x31; op1val:0x3f3f0980;  op2val:0xdfbf007f
TEST_RR_OP(smaqa.su, x31, x16, x19, 0x00000000, 0x3f3f0980, 0xdfbf007f, x4, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x30, rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b1_val == -3, rs1_b3_val == -86, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == -33, rs1_b0_val == 0, rs2_b3_val == -86
// opcode: smaqa.su ; op1:x0; op2:x0; dest:x30; op1val:0xaa03f800;  op2val:0xaadffd7f
TEST_RR_OP(smaqa.su, x30, x0, x0, 0x00000000, 0xaa03f800, 0xaadffd7f, x4, 4, x6)

inst_2:
// rs1 == rd != rs2, rs1==x7, rs2==x2, rd==x7, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == -5, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b0_val == -17, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b3_val == -3, rs2_b2_val == -3, rs2_b0_val == 85
// opcode: smaqa.su ; op1:x7; op2:x2; dest:x7; op1val:0xfdfbfcef;  op2val:0x6fd0555
TEST_RR_OP(smaqa.su, x7, x7, x2, 0x00000000, 0xfdfbfcef, 0x6fd0555, x4, 8, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 64, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 8, rs2_b2_val == 16, rs1_b2_val == -86
// opcode: smaqa.su ; op1:x11; op2:x11; dest:x11; op1val:0x8aaf680;  op2val:0x3f103f40
TEST_RR_OP(smaqa.su, x11, x11, x11, 0x00000000, 0x8aaf680, 0x3f103f40, x4, 12, x6)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x1, rd==x1, rs1_b2_val == rs2_b2_val, rs2_b1_val == -86, rs1_b0_val == -9, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 85, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b3_val == 32, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b2_val == 85, rs1_b1_val == 16, rs2_b0_val == -2
// opcode: smaqa.su ; op1:x13; op2:x1; dest:x1; op1val:0x205510f7;  op2val:0x3f55aafe
TEST_RR_OP(smaqa.su, x1, x13, x1, 0x00000000, 0x205510f7, 0x3f55aafe, x4, 16, x6)

inst_5:
// rs1==x3, rs2==x10, rd==x24, rs1_b1_val == rs2_b1_val, rs2_b1_val == -5, rs1_b2_val == 4, rs1_b1_val == -5, rs2_b0_val == -17, rs2_b2_val == 4, rs2_b3_val == -17
// opcode: smaqa.su ; op1:x3; op2:x10; dest:x24; op1val:0x704fbf7;  op2val:0xef04fbef
TEST_RR_OP(smaqa.su, x24, x3, x10, 0x00000000, 0x704fbf7, 0xef04fbef, x4, 20, x6)

inst_6:
// rs1==x20, rs2==x5, rd==x21, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 127, rs2_b3_val == -128, rs1_b3_val == 85, rs1_b2_val == 0, rs2_b2_val == -128
// opcode: smaqa.su ; op1:x20; op2:x5; dest:x21; op1val:0x55003ff8;  op2val:0x80807fef
TEST_RR_OP(smaqa.su, x21, x20, x5, 0x00000000, 0x55003ff8, 0x80807fef, x4, 24, x6)

inst_7:
// rs1==x27, rs2==x29, rd==x5, rs1_b0_val == rs2_b0_val, rs2_b1_val == 8, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 2, rs2_b2_val == 64, rs1_b1_val == 32
// opcode: smaqa.su ; op1:x27; op2:x29; dest:x5; op1val:0x2fc2009;  op2val:0xef400809
TEST_RR_OP(smaqa.su, x5, x27, x29, 0x00000000, 0x2fc2009, 0xef400809, x4, 28, x6)

inst_8:
// rs1==x18, rs2==x28, rd==x23, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b1_val == -2, rs1_b2_val == 2, rs1_b0_val == 32, rs2_b0_val == -9, rs2_b3_val == -9
// opcode: smaqa.su ; op1:x18; op2:x28; dest:x23; op1val:0x55021020;  op2val:0xf710fef7
TEST_RR_OP(smaqa.su, x23, x18, x28, 0x00000000, 0x55021020, 0xf710fef7, x4, 32, x6)

inst_9:
// rs1==x8, rs2==x16, rd==x25, rs2_b3_val == 85, rs2_b2_val == -17, rs1_b1_val == -9
// opcode: smaqa.su ; op1:x8; op2:x16; dest:x25; op1val:0xfd04f705;  op2val:0x55effbf8
TEST_RR_OP(smaqa.su, x25, x8, x16, 0x00000000, 0xfd04f705, 0x55effbf8, x4, 36, x6)

inst_10:
// rs1==x23, rs2==x14, rd==x8, rs2_b3_val == 127, rs1_b1_val == -33
// opcode: smaqa.su ; op1:x23; op2:x14; dest:x8; op1val:0x902dffc;  op2val:0x7ffaaa03
TEST_RR_OP(smaqa.su, x8, x23, x14, 0x00000000, 0x902dffc, 0x7ffaaa03, x4, 40, x6)

inst_11:
// rs1==x28, rs2==x21, rd==x15, rs2_b3_val == -65, rs1_b3_val == -5, rs1_b2_val == 64
// opcode: smaqa.su ; op1:x28; op2:x21; dest:x15; op1val:0xfb40f9f7;  op2val:0xbf100840
TEST_RR_OP(smaqa.su, x15, x28, x21, 0x00000000, 0xfb40f9f7, 0xbf100840, x4, 44, x6)

inst_12:
// rs1==x9, rs2==x27, rd==x10, rs2_b3_val == -5, rs1_b0_val == 4
// opcode: smaqa.su ; op1:x9; op2:x27; dest:x10; op1val:0x33ffc04;  op2val:0xfbfafa40
TEST_RR_OP(smaqa.su, x10, x9, x27, 0x00000000, 0x33ffc04, 0xfbfafa40, x4, 48, x6)

inst_13:
// rs1==x17, rs2==x3, rd==x26, rs2_b3_val == -3, rs1_b0_val == 8, rs2_b0_val == 8, rs1_b2_val == -128
// opcode: smaqa.su ; op1:x17; op2:x3; dest:x26; op1val:0xfc800508;  op2val:0xfdf6f908
TEST_RR_OP(smaqa.su, x26, x17, x3, 0x00000000, 0xfc800508, 0xfdf6f908, x4, 52, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:
// rs1==x14, rs2==x15, rd==x2, rs2_b3_val == -2, rs2_b1_val == 4
// opcode: smaqa.su ; op1:x14; op2:x15; dest:x2; op1val:0x307fcf8;  op2val:0xfe100440
TEST_RR_OP(smaqa.su, x2, x14, x15, 0x00000000, 0x307fcf8, 0xfe100440, x3, 0, x7)

inst_15:
// rs1==x2, rs2==x4, rd==x9, rs2_b3_val == 64, rs2_b0_val == 32, rs2_b1_val == -128, rs1_b2_val == 127
// opcode: smaqa.su ; op1:x2; op2:x4; dest:x9; op1val:0xf87ffa3f;  op2val:0x40098020
TEST_RR_OP(smaqa.su, x9, x2, x4, 0x00000000, 0xf87ffa3f, 0x40098020, x3, 4, x7)

inst_16:
// rs1==x29, rs2==x22, rd==x4, rs2_b3_val == 32, rs1_b0_val == -5, rs2_b1_val == -65, rs2_b2_val == -2
// opcode: smaqa.su ; op1:x29; op2:x22; dest:x4; op1val:0xf9fbdffb;  op2val:0x20febff8
TEST_RR_OP(smaqa.su, x4, x29, x22, 0x00000000, 0xf9fbdffb, 0x20febff8, x3, 8, x7)

inst_17:
// rs1==x15, rs2==x30, rd==x18, rs2_b3_val == 16, rs2_b0_val == -1, rs1_b2_val == 16, rs2_b2_val == 2
// opcode: smaqa.su ; op1:x15; op2:x30; dest:x18; op1val:0x6100704;  op2val:0x10027fff
TEST_RR_OP(smaqa.su, x18, x15, x30, 0x00000000, 0x6100704, 0x10027fff, x3, 12, x7)

inst_18:
// rs1==x25, rs2==x31, rd==x14, rs2_b3_val == 8, rs2_b0_val == -5
// opcode: smaqa.su ; op1:x25; op2:x31; dest:x14; op1val:0x840dff8;  op2val:0x810bffb
TEST_RR_OP(smaqa.su, x14, x25, x31, 0x00000000, 0x840dff8, 0x810bffb, x3, 16, x7)

inst_19:
// rs1==x24, rs2==x20, rd==x16, rs2_b3_val == 4, rs1_b1_val == 4, rs1_b0_val == 64, rs1_b3_val == 127, rs2_b2_val == 127
// opcode: smaqa.su ; op1:x24; op2:x20; dest:x16; op1val:0x7ff90440;  op2val:0x47f07f6
TEST_RR_OP(smaqa.su, x16, x24, x20, 0x00000000, 0x7ff90440, 0x47f07f6, x3, 20, x7)

inst_20:
// rs1==x10, rs2==x9, rd==x12, rs2_b3_val == 2, rs1_b1_val == 64, rs2_b2_val == 1
// opcode: smaqa.su ; op1:x10; op2:x9; dest:x12; op1val:0xaaf84007;  op2val:0x201007f
TEST_RR_OP(smaqa.su, x12, x10, x9, 0x00000000, 0xaaf84007, 0x201007f, x3, 24, x7)

inst_21:
// rs1==x19, rs2==x8, rd==x22, rs2_b3_val == 1, rs2_b2_val == 8, rs1_b0_val == -86
// opcode: smaqa.su ; op1:x19; op2:x8; dest:x22; op1val:0x60304aa;  op2val:0x108f855
TEST_RR_OP(smaqa.su, x22, x19, x8, 0x00000000, 0x60304aa, 0x108f855, x3, 28, x7)

inst_22:
// rs1==x21, rs2==x18, rd==x17, rs2_b3_val == 0, rs1_b2_val == -17, rs1_b0_val == 127, rs1_b3_val == -33, rs1_b1_val == -2, rs2_b2_val == 0
// opcode: smaqa.su ; op1:x21; op2:x18; dest:x17; op1val:0xdfeffe7f;  op2val:0x00fd08
TEST_RR_OP(smaqa.su, x17, x21, x18, 0x00000000, 0xdfeffe7f, 0x00fd08, x3, 32, x7)

inst_23:
// rs1==x1, rs2==x23, rd==x27, rs2_b3_val == -1, rs1_b1_val == 127
// opcode: smaqa.su ; op1:x1; op2:x23; dest:x27; op1val:0x5067f04;  op2val:0xfff808f6
TEST_RR_OP(smaqa.su, x27, x1, x23, 0x00000000, 0x5067f04, 0xfff808f6, x3, 36, x7)

inst_24:
// rs1==x30, rs2==x6, rd==x0, rs2_b2_val == -86, rs1_b2_val == -2
// opcode: smaqa.su ; op1:x30; op2:x6; dest:x0; op1val:0xfdfe05fc;  op2val:0x8aafe09
TEST_RR_OP(smaqa.su, x0, x30, x6, 0x00000000, 0xfdfe05fc, 0x8aafe09, x3, 40, x7)

inst_25:
// rs1==x5, rs2==x24, rd==x6, rs2_b2_val == -9, rs1_b3_val == -128, rs1_b0_val == 85, rs1_b2_val == 1
// opcode: smaqa.su ; op1:x5; op2:x24; dest:x6; op1val:0x8001f655;  op2val:0x7ff709fc
TEST_RR_OP(smaqa.su, x6, x5, x24, 0x00000000, 0x8001f655, 0x7ff709fc, x3, 44, x7)

inst_26:
// rs1==x31, rs2==x12, rd==x29, rs1_b2_val == -65, rs1_b0_val == -2
// opcode: smaqa.su ; op1:x31; op2:x12; dest:x29; op1val:0x20bf03fe;  op2val:0xff100555
TEST_RR_OP(smaqa.su, x29, x31, x12, 0x00000000, 0x20bf03fe, 0xff100555, x3, 48, x7)

inst_27:
// rs1==x12, rs2==x25, rd==x13, rs1_b2_val == -33, rs1_b1_val == -86, rs1_b3_val == -2
// opcode: smaqa.su ; op1:x12; op2:x25; dest:x13; op1val:0xfedfaaf9;  op2val:0x10380fb
TEST_RR_OP(smaqa.su, x13, x12, x25, 0x00000000, 0xfedfaaf9, 0x10380fb, x3, 52, x7)

inst_28:
// rs1==x4, rs2==x26, rd==x20, rs1_b2_val == -9, 
// opcode: smaqa.su ; op1:x4; op2:x26; dest:x20; op1val:0x9f7f6c0;  op2val:0xf8fe0855
TEST_RR_OP(smaqa.su, x20, x4, x26, 0x00000000, 0x9f7f6c0, 0xf8fe0855, x3, 56, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x6, rs2==x17, rd==x3, rs1_b2_val == -3, rs1_b1_val == -17
// opcode: smaqa.su ; op1:x6; op2:x17; dest:x3; op1val:0xc0fdeffa;  op2val:0x940aafb
TEST_RR_OP(smaqa.su, x3, x6, x17, 0x00000000, 0xc0fdeffa, 0x940aafb, x1, 0, x2)

inst_30:
// rs1==x22, rs2==x7, rd==x19, rs1_b2_val == 32, rs1_b0_val == -33, rs1_b3_val == 64, rs2_b1_val == -9
// opcode: smaqa.su ; op1:x22; op2:x7; dest:x19; op1val:0x402004df;  op2val:0x802f7c0
TEST_RR_OP(smaqa.su, x19, x22, x7, 0x00000000, 0x402004df, 0x802f7c0, x1, 4, x2)

inst_31:
// rs1==x26, rs2==x13, rd==x28, rs1_b2_val == 8, rs2_b2_val == 32
// opcode: smaqa.su ; op1:x26; op2:x13; dest:x28; op1val:0x5508f806;  op2val:0x2020f8f7
TEST_RR_OP(smaqa.su, x28, x26, x13, 0x00000000, 0x5508f806, 0x2020f8f7, x1, 8, x2)

inst_32:
// rs1_b2_val == -1, rs1_b1_val == 0
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x55ff0055;  op2val:0x3203f03
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x55ff0055, 0x3203f03, x1, 12, x2)

inst_33:
// rs1_b1_val == 85, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x20f755fb;  op2val:0xfb00fb06
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x20f755fb, 0xfb00fb06, x1, 16, x2)

inst_34:
// rs1_b1_val == -65, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfebfbf20;  op2val:0x9040540
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfebfbf20, 0x9040540, x1, 20, x2)

inst_35:
// rs1_b1_val == -3, rs2_b0_val == -33, rs2_b1_val == 32, rs1_b0_val == 1
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfb10fd01;  op2val:0x60620df
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfb10fd01, 0x60620df, x1, 24, x2)

inst_36:
// rs1_b1_val == -128, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xf67f80f7;  op2val:0xfb0506c0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xf67f80f7, 0xfb0506c0, x1, 28, x2)

inst_37:
// rs1_b1_val == 8, rs2_b1_val == 1
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xaa3f0803;  op2val:0xff400155
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xaa3f0803, 0xff400155, x1, 32, x2)

inst_38:
// rs1_b1_val == 2, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfc060204;  op2val:0xfddffdef
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfc060204, 0xfddffdef, x1, 36, x2)

inst_39:
// rs1_b1_val == 1, rs1_b3_val == -1, rs2_b0_val == -128
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfffd01aa;  op2val:0xff023f80
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfffd01aa, 0xff023f80, x1, 40, x2)

inst_40:
// rs1_b1_val == -1, rs2_b1_val == 16
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfdfcff80;  op2val:0x30810fe
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfdfcff80, 0x30810fe, x1, 44, x2)

inst_41:
// rs2_b2_val == -1, rs2_b0_val == 4, rs1_b3_val == -9
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xf7bfeff7;  op2val:0xfefff904
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xf7bfeff7, 0xfefff904, x1, 48, x2)

inst_42:
// rs2_b1_val == 85, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xaafe01aa;  op2val:0xfd095504
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xaafe01aa, 0xfd095504, x1, 52, x2)

inst_43:
// rs2_b1_val == -33, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xdffa0220;  op2val:0xaaf6df09
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xdffa0220, 0xaaf6df09, x1, 56, x2)

inst_44:
// rs2_b1_val == -17, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xf8bf007f;  op2val:0x5bfef03
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xf8bf007f, 0x5bfef03, x1, 60, x2)

inst_45:
// rs2_b1_val == 64, rs2_b0_val == -65, rs1_b0_val == 2
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x3ffd0702;  op2val:0xfffd40bf
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x3ffd0702, 0xfffd40bf, x1, 64, x2)

inst_46:
// rs2_b1_val == 2, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfbc020f8;  op2val:0xef000240
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xfbc020f8, 0xef000240, x1, 68, x2)

inst_47:
// rs2_b1_val == -1, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x80fbfcc0;  op2val:0x5feff07
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x80fbfcc0, 0x5feff07, x1, 72, x2)

inst_48:
// rs2_b0_val == -86, rs1_b3_val == -65
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xbf00c0fa;  op2val:0xff06fcaa
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xbf00c0fa, 0xff06fcaa, x1, 76, x2)

inst_49:
// rs2_b0_val == -3, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x5fdf7ef;  op2val:0xf8fefafd
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x5fdf7ef, 0xf8fefafd, x1, 80, x2)

inst_50:
// rs2_b0_val == 16, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xf6ef04aa;  op2val:0xff55f610
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xf6ef04aa, 0xff55f610, x1, 84, x2)

inst_51:
// rs2_b0_val == 2, rs1_b0_val == 16
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xbf030710;  op2val:0xf9fa8002
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xbf030710, 0xf9fa8002, x1, 88, x2)

inst_52:
// rs2_b0_val == 1, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xdf0104c0;  op2val:0x904ff01
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xdf0104c0, 0x904ff01, x1, 92, x2)

inst_53:
// rs2_b0_val == 0, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xaadffff7;  op2val:0x7f04bf00
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xaadffff7, 0x7f04bf00, x1, 96, x2)

inst_54:
// rs1_b0_val == -65, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x920fabf;  op2val:0x3fdfc10
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x920fabf, 0x3fdfc10, x1, 100, x2)

inst_55:
// rs1_b0_val == -3, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xf9df55fd;  op2val:0x809df05
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xf9df55fd, 0x809df05, x1, 104, x2)

inst_56:
// rs2_b2_val == -5, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x55fc0409;  op2val:0xfefbfa05
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x55fc0409, 0xfefbfa05, x1, 108, x2)

inst_57:
// rs1_b3_val == 16, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x103f02ef;  op2val:0xaaaa04fc
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x103f02ef, 0xaaaa04fc, x1, 112, x2)

inst_58:
// rs1_b0_val == -1, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x5003fff;  op2val:0xf9045502
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x5003fff, 0xf9045502, x1, 116, x2)

inst_59:
// rs1_b3_val == 4, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x404f9ff;  op2val:0xef200910
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x404f9ff, 0xef200910, x1, 120, x2)

inst_60:
// rs1_b3_val == 1, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x1df557f;  op2val:0xfc0507fb
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x1df557f, 0xfc0507fb, x1, 124, x2)

inst_61:
// rs1_b3_val == 0, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x042002;  op2val:0x120ffdf
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x042002, 0x120ffdf, x1, 128, x2)

inst_62:
// rs1_b3_val == -17, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xef0602ff;  op2val:0xf7400101
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xef0602ff, 0xf7400101, x1, 132, x2)

inst_63:
// rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b1_val == -3, rs1_b3_val == -86, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == -33, rs1_b0_val == 0, rs2_b3_val == -86
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xaa03f800;  op2val:0xaadffd7f
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0xaa03f800, 0xaadffd7f, x1, 136, x2)

inst_64:
// rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 64, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b3_val == 8, rs2_b2_val == 16, rs1_b2_val == -86
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x8aaf680;  op2val:0x3f103f40
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x00000000, 0x8aaf680, 0x3f103f40, x1, 140, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
