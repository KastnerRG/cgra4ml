
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursub8 instruction of the RISC-V RV32PZicsr extension for the ursub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x27, rd==x4, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == 239, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 254, rs1_b2_val == 251, rs2_b1_val == 128
// opcode: ursub8 ; op1:x26; op2:x27; dest:x4; op1val:0x5fb0900;  op2val:0x3ef80fe
TEST_RR_OP(ursub8, x4, x26, x27, 0x00000000, 0x5fb0900, 0x3ef80fe, x2, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x31, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 223, rs1_b2_val == 85, rs2_b2_val == 0, rs2_b1_val == 191
// opcode: ursub8 ; op1:x9; op2:x9; dest:x31; op1val:0xf550f01;  op2val:0xf00bfdf
TEST_RR_OP(ursub8, x31, x9, x9, 0x00000000, 0xf550f01, 0xf00bfdf, x2, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x13, rs2==x24, rd==x13, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val == 8, rs1_b2_val == 170, rs1_b3_val == 170, rs2_b3_val == 0, rs2_b2_val == 170, rs2_b1_val == 8
// opcode: ursub8 ; op1:x13; op2:x24; dest:x13; op1val:0xaaaa0f08;  op2val:0xaa0811
TEST_RR_OP(ursub8, x13, x13, x24, 0x00000000, 0xaaaa0f08, 0xaa0811, x2, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 253, rs2_b0_val == 239, rs1_b1_val == 254, rs2_b3_val == 32, rs1_b0_val == 127, rs2_b1_val == 254, rs1_b3_val == 191
// opcode: ursub8 ; op1:x0; op2:x0; dest:x0; op1val:0xbf07fe7f;  op2val:0x20fdfeef
TEST_RR_OP(ursub8, x0, x0, x0, 0x00000000, 0xbf07fe7f, 0x20fdfeef, x2, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x25, rd==x25, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 254, rs1_b2_val == 255
// opcode: ursub8 ; op1:x1; op2:x25; dest:x25; op1val:0xaff0e0b;  op2val:0x7fe070b
TEST_RR_OP(ursub8, x25, x1, x25, 0x00000000, 0xaff0e0b, 0x7fe070b, x2, 16, x5)

inst_5:
// rs1==x29, rs2==x8, rd==x6, rs2_b3_val == 170, rs1_b1_val == 1, rs2_b0_val == 127
// opcode: ursub8 ; op1:x29; op2:x8; dest:x6; op1val:0x509017f;  op2val:0xaa0f057f
TEST_RR_OP(ursub8, x6, x29, x8, 0x00000000, 0x509017f, 0xaa0f057f, x2, 20, x5)

inst_6:
// rs1==x12, rs2==x19, rd==x18, rs2_b3_val == 85, rs2_b1_val == 4, rs1_b1_val == 85, rs2_b0_val == 191, rs2_b2_val == 32, rs1_b2_val == 128
// opcode: ursub8 ; op1:x12; op2:x19; dest:x18; op1val:0x11805507;  op2val:0x552004bf
TEST_RR_OP(ursub8, x18, x12, x19, 0x00000000, 0x11805507, 0x552004bf, x2, 24, x5)

inst_7:
// rs1==x20, rs2==x3, rd==x9, rs2_b3_val == 127, rs1_b0_val == 64, rs2_b1_val == 170, rs1_b2_val == 16
// opcode: ursub8 ; op1:x20; op2:x3; dest:x9; op1val:0xd100b40;  op2val:0x7f0faa0f
TEST_RR_OP(ursub8, x9, x20, x3, 0x00000000, 0xd100b40, 0x7f0faa0f, x2, 28, x5)

inst_8:
// rs1==x31, rs2==x16, rd==x12, rs2_b3_val == 191, rs1_b2_val == 191, rs1_b1_val == 170, rs2_b1_val == 85, rs1_b3_val == 127
// opcode: ursub8 ; op1:x31; op2:x16; dest:x12; op1val:0x7fbfaa09;  op2val:0xbf075509
TEST_RR_OP(ursub8, x12, x31, x16, 0x00000000, 0x7fbfaa09, 0xbf075509, x2, 32, x5)

inst_9:
// rs1==x28, rs2==x12, rd==x1, rs2_b3_val == 223, rs2_b1_val == 127, rs2_b0_val == 4
// opcode: ursub8 ; op1:x28; op2:x12; dest:x1; op1val:0x7f130608;  op2val:0xdf0f7f04
TEST_RR_OP(ursub8, x1, x28, x12, 0x00000000, 0x7f130608, 0xdf0f7f04, x2, 36, x5)

inst_10:
// rs1==x27, rs2==x21, rd==x30, rs2_b3_val == 239, rs1_b3_val == 251, rs2_b0_val == 8, rs1_b1_val == 191
// opcode: ursub8 ; op1:x27; op2:x21; dest:x30; op1val:0xfb0ebf0f;  op2val:0xef0a1208
TEST_RR_OP(ursub8, x30, x27, x21, 0x00000000, 0xfb0ebf0f, 0xef0a1208, x2, 40, x5)

inst_11:
// rs1==x21, rs2==x17, rd==x23, rs2_b3_val == 247, rs1_b2_val == 239, rs2_b2_val == 8
// opcode: ursub8 ; op1:x21; op2:x17; dest:x23; op1val:0x12efbf11;  op2val:0xf7080c05
TEST_RR_OP(ursub8, x23, x21, x17, 0x00000000, 0x12efbf11, 0xf7080c05, x2, 44, x5)

inst_12:
// rs1==x19, rs2==x26, rd==x17, rs2_b3_val == 251, rs1_b3_val == 85
// opcode: ursub8 ; op1:x19; op2:x26; dest:x17; op1val:0x55110c0e;  op2val:0xfb0805bf
TEST_RR_OP(ursub8, x17, x19, x26, 0x00000000, 0x55110c0e, 0xfb0805bf, x2, 48, x5)

inst_13:
// rs1==x11, rs2==x22, rd==x19, rs2_b3_val == 253, rs2_b1_val == 2, rs1_b1_val == 239
// opcode: ursub8 ; op1:x11; op2:x22; dest:x19; op1val:0x907ef11;  op2val:0xfd0e0203
TEST_RR_OP(ursub8, x19, x11, x22, 0x00000000, 0x907ef11, 0xfd0e0203, x2, 52, x5)

inst_14:
// rs1==x10, rs2==x29, rd==x21, rs2_b3_val == 254, rs2_b0_val == 0, rs2_b1_val == 64
// opcode: ursub8 ; op1:x10; op2:x29; dest:x21; op1val:0x7f050940;  op2val:0xfe054000
TEST_RR_OP(ursub8, x21, x10, x29, 0x00000000, 0x7f050940, 0xfe054000, x2, 56, x5)

inst_15:
// rs1==x3, rs2==x7, rd==x20, rs2_b3_val == 128, rs2_b0_val == 247
// opcode: ursub8 ; op1:x3; op2:x7; dest:x20; op1val:0x9050a0f;  op2val:0x80ef07f7
TEST_RR_OP(ursub8, x20, x3, x7, 0x00000000, 0x9050a0f, 0x80ef07f7, x2, 60, x12)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x16, rs2==x20, rd==x26, rs2_b3_val == 64, rs1_b1_val == 255, rs1_b3_val == 223, rs1_b2_val == 254, rs2_b0_val == 255, rs1_b0_val == 253
// opcode: ursub8 ; op1:x16; op2:x20; dest:x26; op1val:0xdffefffd;  op2val:0x401102ff
TEST_RR_OP(ursub8, x26, x16, x20, 0x00000000, 0xdffefffd, 0x401102ff, x9, 0, x12)

inst_17:
// rs1==x17, rs2==x18, rd==x10, rs2_b3_val == 16, rs2_b2_val == 64, rs1_b0_val == 32, rs1_b3_val == 16, rs2_b1_val == 239
// opcode: ursub8 ; op1:x17; op2:x18; dest:x10; op1val:0x10bf1120;  op2val:0x1040efff
TEST_RR_OP(ursub8, x10, x17, x18, 0x00000000, 0x10bf1120, 0x1040efff, x9, 4, x12)

inst_18:
// rs1==x24, rs2==x1, rd==x7, rs2_b3_val == 8, rs1_b3_val == 254, rs2_b0_val == 85
// opcode: ursub8 ; op1:x24; op2:x1; dest:x7; op1val:0xfe551205;  op2val:0x8130355
TEST_RR_OP(ursub8, x7, x24, x1, 0x00000000, 0xfe551205, 0x8130355, x9, 8, x12)

inst_19:
// rs1==x8, rs2==x5, rd==x22, rs2_b3_val == 4, rs1_b0_val == 191, rs1_b1_val == 2, rs2_b0_val == 1, rs1_b3_val == 8
// opcode: ursub8 ; op1:x8; op2:x5; dest:x22; op1val:0x80d02bf;  op2val:0x4051101
TEST_RR_OP(ursub8, x22, x8, x5, 0x00000000, 0x80d02bf, 0x4051101, x9, 12, x12)

inst_20:
// rs1==x18, rs2==x31, rd==x8, rs2_b3_val == 2, rs1_b3_val == 2, rs1_b2_val == 223
// opcode: ursub8 ; op1:x18; op2:x31; dest:x8; op1val:0x2df0a0c;  op2val:0x2200d04
TEST_RR_OP(ursub8, x8, x18, x31, 0x00000000, 0x2df0a0c, 0x2200d04, x9, 16, x12)

inst_21:
// rs1==x23, rs2==x15, rd==x3, rs2_b3_val == 1, rs1_b0_val == 170, rs1_b1_val == 247
// opcode: ursub8 ; op1:x23; op2:x15; dest:x3; op1val:0xdfaaf7aa;  op2val:0x100bf13
TEST_RR_OP(ursub8, x3, x23, x15, 0x00000000, 0xdfaaf7aa, 0x100bf13, x9, 20, x12)

inst_22:
// rs1==x14, rs2==x28, rd==x2, rs2_b3_val == 255, rs1_b2_val == 4, rs1_b0_val == 254, rs1_b3_val == 247
// opcode: ursub8 ; op1:x14; op2:x28; dest:x2; op1val:0xf704bffe;  op2val:0xffaa5500
TEST_RR_OP(ursub8, x2, x14, x28, 0x00000000, 0xf704bffe, 0xffaa5500, x9, 24, x12)

inst_23:
// rs1==x25, rs2==x4, rd==x29, rs2_b2_val == 85, rs2_b1_val == 251
// opcode: ursub8 ; op1:x25; op2:x4; dest:x29; op1val:0x8ef0a0b;  op2val:0xff55fbff
TEST_RR_OP(ursub8, x29, x25, x4, 0x00000000, 0x8ef0a0b, 0xff55fbff, x9, 28, x12)

inst_24:
// rs1==x7, rs2==x13, rd==x16, rs2_b2_val == 127, rs1_b3_val == 64
// opcode: ursub8 ; op1:x7; op2:x13; dest:x16; op1val:0x40bf130d;  op2val:0xb7f1307
TEST_RR_OP(ursub8, x16, x7, x13, 0x00000000, 0x40bf130d, 0xb7f1307, x9, 32, x12)

inst_25:
// rs1==x4, rs2==x14, rd==x5, rs2_b2_val == 191, rs1_b1_val == 223
// opcode: ursub8 ; op1:x4; op2:x14; dest:x5; op1val:0x6ffdf0e;  op2val:0x6bf080e
TEST_RR_OP(ursub8, x5, x4, x14, 0x00000000, 0x6ffdf0e, 0x6bf080e, x9, 36, x12)

inst_26:
// rs1==x30, rs2==x10, rd==x27, rs1_b2_val == 0, rs2_b1_val == 16
// opcode: ursub8 ; op1:x30; op2:x10; dest:x27; op1val:0xe00bf20;  op2val:0x200310fe
TEST_RR_OP(ursub8, x27, x30, x10, 0x00000000, 0xe00bf20, 0x200310fe, x9, 40, x12)

inst_27:
// rs1==x5, rs2==x2, rd==x24, rs1_b1_val == 127, rs2_b2_val == 16, rs1_b0_val == 128
// opcode: ursub8 ; op1:x5; op2:x2; dest:x24; op1val:0xdfb7f80;  op2val:0xe100c0a
TEST_RR_OP(ursub8, x24, x5, x2, 0x00000000, 0xdfb7f80, 0xe100c0a, x9, 44, x12)

inst_28:
// rs1==x15, rs2==x6, rd==x11, rs1_b1_val == 251, rs2_b0_val == 170
// opcode: ursub8 ; op1:x15; op2:x6; dest:x11; op1val:0xaafffb0f;  op2val:0x7f127faa
TEST_RR_OP(ursub8, x11, x15, x6, 0x00000000, 0xaafffb0f, 0x7f127faa, x9, 48, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x2, rs2==x11, rd==x14, rs1_b1_val == 253, 
// opcode: ursub8 ; op1:x2; op2:x11; dest:x14; op1val:0xfe11fd05;  op2val:0x400efe0c
TEST_RR_OP(ursub8, x14, x2, x11, 0x00000000, 0xfe11fd05, 0x400efe0c, x1, 0, x3)

inst_30:
// rs1==x22, rs2==x23, rd==x28, rs1_b1_val == 128, rs1_b0_val == 247, rs2_b0_val == 251
// opcode: ursub8 ; op1:x22; op2:x23; dest:x28; op1val:0xfff80f7;  op2val:0xdf0603fb
TEST_RR_OP(ursub8, x28, x22, x23, 0x00000000, 0xfff80f7, 0xdf0603fb, x1, 4, x3)

inst_31:
// rs1==x6, rs2==x30, rd==x15, rs1_b1_val == 64, rs1_b0_val == 16, rs2_b2_val == 251, rs2_b0_val == 253
// opcode: ursub8 ; op1:x6; op2:x30; dest:x15; op1val:0xaa554010;  op2val:0x2fb0ffd
TEST_RR_OP(ursub8, x15, x6, x30, 0x00000000, 0xaa554010, 0x2fb0ffd, x1, 8, x3)

inst_32:
// rs1_b1_val == 32, rs1_b2_val == 253
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fd200a;  op2val:0x130a0212
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x3fd200a, 0x130a0212, x1, 12, x3)

inst_33:
// rs1_b1_val == 16, rs1_b2_val == 247, rs1_b0_val == 255
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f710ff;  op2val:0xb08efff
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x2f710ff, 0xb08efff, x1, 16, x3)

inst_34:
// rs1_b1_val == 8, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55040840;  op2val:0xefef0b12
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x55040840, 0xefef0b12, x1, 20, x3)

inst_35:
// rs1_b1_val == 4, rs1_b0_val == 4
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xafb0404;  op2val:0x5511aaaa
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xafb0404, 0x5511aaaa, x1, 24, x3)

inst_36:
// rs1_b1_val == 0, rs1_b3_val == 32
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20130010;  op2val:0x40d1212
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x20130010, 0x40d1212, x1, 28, x3)

inst_37:
// rs1_b0_val == 85, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ffbf55;  op2val:0x7ffdbffd
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x5ffbf55, 0x7ffdbffd, x1, 32, x3)

inst_38:
// rs1_b0_val == 223, rs2_b1_val == 255, rs2_b2_val == 1
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x13fb0ddf;  op2val:0xc01ff12
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x13fb0ddf, 0xc01ff12, x1, 36, x3)

inst_39:
// rs1_b0_val == 239, rs2_b0_val == 64, rs1_b2_val == 127
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb7f55ef;  op2val:0xbf070440
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xb7f55ef, 0xbf070440, x1, 40, x3)

inst_40:
// rs1_b0_val == 251, rs2_b0_val == 16, rs2_b2_val == 4
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x11bfbffb;  op2val:0xc04bf10
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x11bfbffb, 0xc04bf10, x1, 44, x3)

inst_41:
// rs2_b1_val == 1, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x50d7f0b;  op2val:0xbf050109
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x50d7f0b, 0xbf050109, x1, 48, x3)

inst_42:
// rs2_b1_val == 0, rs1_b3_val == 253
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd7faa00;  op2val:0xa20000b
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xfd7faa00, 0xa20000b, x1, 52, x3)

inst_43:
// rs2_b0_val == 128, rs2_b1_val == 32
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70a0ffd;  op2val:0xa0f2080
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xf70a0ffd, 0xa0f2080, x1, 56, x3)

inst_44:
// rs2_b0_val == 32, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55060c80;  op2val:0x9040c20
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x55060c80, 0x9040c20, x1, 60, x3)

inst_45:
// rs2_b0_val == 2, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x306030b;  op2val:0x6070002
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x306030b, 0x6070002, x1, 64, x3)

inst_46:
// rs1_b3_val == 239, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xef1107df;  op2val:0x03fe07
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xef1107df, 0x03fe07, x1, 68, x3)

inst_47:
// rs2_b2_val == 223, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0308;  op2val:0xedf400c
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xdfff0308, 0xedf400c, x1, 72, x3)

inst_48:
// rs2_b1_val == 253, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xcfdff12;  op2val:0x111fdef
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xcfdff12, 0x111fdef, x1, 76, x3)

inst_49:
// rs2_b2_val == 247, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0380;  op2val:0xaaf7050f
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x7fff0380, 0xaaf7050f, x1, 80, x3)

inst_50:
// rs1_b3_val == 128, rs1_b0_val == 2
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80000a02;  op2val:0xfb0e400c
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x80000a02, 0xfb0e400c, x1, 84, x3)

inst_51:
// rs2_b2_val == 128, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8003080f;  op2val:0xef80fb09
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x8003080f, 0xef80fb09, x1, 88, x3)

inst_52:
// rs1_b3_val == 4, rs1_b2_val == 1
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4017f80;  op2val:0xfe0e087f
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x4017f80, 0xfe0e087f, x1, 92, x3)

inst_53:
// rs1_b3_val == 1, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1124002;  op2val:0xe07effd
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x1124002, 0xe07effd, x1, 96, x3)

inst_54:
// rs1_b3_val == 255, rs2_b1_val == 223
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff55aafd;  op2val:0xaa06df20
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xff55aafd, 0xaa06df20, x1, 100, x3)

inst_55:
// rs1_b3_val == 0, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x060709;  op2val:0x11808010
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x060709, 0x11808010, x1, 104, x3)

inst_56:
// rs1_b2_val == 2, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10020440;  op2val:0xb12df05
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x10020440, 0xb12df05, x1, 108, x3)

inst_57:
// rs2_b1_val == 247, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x807f0d0e;  op2val:0x5bff77f
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x807f0d0e, 0x5bff77f, x1, 112, x3)

inst_58:
// rs1_b2_val == 64, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x940fb11;  op2val:0x9bf0e0b
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x940fb11, 0x9bf0e0b, x1, 116, x3)

inst_59:
// rs1_b2_val == 32, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5520fe40;  op2val:0x55ef0312
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x5520fe40, 0x55ef0312, x1, 120, x3)

inst_60:
// rs1_b2_val == 8, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3080409;  op2val:0x3fef709
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x3080409, 0x3fef709, x1, 124, x3)

inst_61:
// rs2_b2_val == 2, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x70e1307;  op2val:0x8020104
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0x70e1307, 0x8020104, x1, 128, x3)

inst_62:
// rs2_b2_val == 255, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaef050f;  op2val:0xaff0d00
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xaef050f, 0xaff0d00, x1, 132, x3)

inst_63:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 223, rs1_b2_val == 85, rs2_b2_val == 0, rs2_b1_val == 191
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf550f01;  op2val:0xf00bfdf
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xf550f01, 0xf00bfdf, x1, 136, x3)

inst_64:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 253, rs2_b0_val == 239, rs1_b1_val == 254, rs2_b3_val == 32, rs1_b0_val == 127, rs2_b1_val == 254, rs1_b3_val == 191
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf07fe7f;  op2val:0x20fdfeef
TEST_RR_OP(ursub8, x31, x30, x29, 0x00000000, 0xbf07fe7f, 0x20fdfeef, x1, 140, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
