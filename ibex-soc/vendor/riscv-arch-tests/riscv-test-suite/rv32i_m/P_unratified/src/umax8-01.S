
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umax8 instruction of the RISC-V RV32PZicsr extension for the umax8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umax8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x2, rd==x16, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 223, rs2_b1_val == 85, rs1_b2_val == 64
// opcode: umax8 ; op1:x23; op2:x2; dest:x16; op1val:0x640df00;  op2val:0x120a5509
TEST_RR_OP(umax8, x16, x23, x2, 0x00000000, 0x640df00, 0x120a5509, x5, 0, x8)

inst_1:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x21, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == 0, rs1_b3_val == 239, rs2_b3_val == 239, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: umax8 ; op1:x30; op2:x30; dest:x21; op1val:0xef001105;  op2val:0xef135506
TEST_RR_OP(umax8, x21, x30, x30, 0x00000000, 0xef001105, 0xef135506, x5, 4, x8)

inst_2:
// rs1 == rd != rs2, rs1==x6, rs2==x16, rd==x6, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b3_val == 1, rs2_b0_val == 253
// opcode: umax8 ; op1:x6; op2:x16; dest:x6; op1val:0x9070e07;  op2val:0x10712fd
TEST_RR_OP(umax8, x6, x6, x16, 0x00000000, 0x9070e07, 0x10712fd, x5, 8, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 4, rs1_b0_val == 223, rs1_b3_val == 32
// opcode: umax8 ; op1:x19; op2:x19; dest:x19; op1val:0x201206df;  op2val:0x40c060b
TEST_RR_OP(umax8, x19, x19, x19, 0x00000000, 0x201206df, 0x40c060b, x5, 12, x8)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x9, rd==x9, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b2_val == 191, rs2_b2_val == 239, rs1_b3_val == 191
// opcode: umax8 ; op1:x24; op2:x9; dest:x9; op1val:0xbfbf120c;  op2val:0xbef060c
TEST_RR_OP(umax8, x9, x24, x9, 0x00000000, 0xbfbf120c, 0xbef060c, x5, 16, x8)

inst_5:
// rs1==x27, rs2==x14, rd==x22, rs2_b3_val == 170, rs1_b1_val == 170, rs2_b1_val == 128, rs2_b0_val == 2, rs1_b0_val == 2
// opcode: umax8 ; op1:x27; op2:x14; dest:x22; op1val:0xe09aa02;  op2val:0xaa068002
TEST_RR_OP(umax8, x22, x27, x14, 0x00000000, 0xe09aa02, 0xaa068002, x5, 20, x8)

inst_6:
// rs1==x13, rs2==x15, rd==x30, rs2_b3_val == 85, rs2_b0_val == 8, rs2_b1_val == 191, rs1_b0_val == 254
// opcode: umax8 ; op1:x13; op2:x15; dest:x30; op1val:0xbf0012fe;  op2val:0x550fbf08
TEST_RR_OP(umax8, x30, x13, x15, 0x00000000, 0xbf0012fe, 0x550fbf08, x5, 24, x8)

inst_7:
// rs1==x25, rs2==x7, rd==x10, rs2_b3_val == 127, rs2_b2_val == 64, rs1_b1_val == 85, rs2_b1_val == 127, rs1_b0_val == 8
// opcode: umax8 ; op1:x25; op2:x7; dest:x10; op1val:0xa065508;  op2val:0x7f407f0c
TEST_RR_OP(umax8, x10, x25, x7, 0x00000000, 0xa065508, 0x7f407f0c, x5, 28, x8)

inst_8:
// rs1==x16, rs2==x22, rd==x7, rs2_b3_val == 191, rs2_b0_val == 223, rs1_b0_val == 16, rs2_b1_val == 0
// opcode: umax8 ; op1:x16; op2:x22; dest:x7; op1val:0xbf12df10;  op2val:0xbfef00df
TEST_RR_OP(umax8, x7, x16, x22, 0x00000000, 0xbf12df10, 0xbfef00df, x5, 32, x8)

inst_9:
// rs1==x1, rs2==x13, rd==x18, rs2_b3_val == 223, rs1_b2_val == 253, rs2_b2_val == 2, rs1_b0_val == 1, rs1_b1_val == 8
// opcode: umax8 ; op1:x1; op2:x13; dest:x18; op1val:0xbfd0801;  op2val:0xdf020b03
TEST_RR_OP(umax8, x18, x1, x13, 0x00000000, 0xbfd0801, 0xdf020b03, x5, 36, x8)

inst_10:
// rs1==x11, rs2==x1, rd==x31, rs2_b3_val == 247, rs2_b2_val == 251
// opcode: umax8 ; op1:x11; op2:x1; dest:x31; op1val:0xffd0607;  op2val:0xf7fb0308
TEST_RR_OP(umax8, x31, x11, x1, 0x00000000, 0xffd0607, 0xf7fb0308, x5, 40, x8)

inst_11:
// rs1==x18, rs2==x4, rd==x23, rs2_b3_val == 251, rs1_b2_val == 223, rs1_b3_val == 85, rs2_b2_val == 128
// opcode: umax8 ; op1:x18; op2:x4; dest:x23; op1val:0x55df1207;  op2val:0xfb8003fd
TEST_RR_OP(umax8, x23, x18, x4, 0x00000000, 0x55df1207, 0xfb8003fd, x5, 44, x8)

inst_12:
// rs1==x3, rs2==x23, rd==x25, rs2_b3_val == 253, rs1_b3_val == 64, rs1_b2_val == 128
// opcode: umax8 ; op1:x3; op2:x23; dest:x25; op1val:0x40800d03;  op2val:0xfd0d0edf
TEST_RR_OP(umax8, x25, x3, x23, 0x00000000, 0x40800d03, 0xfd0d0edf, x5, 48, x8)

inst_13:
// rs1==x15, rs2==x17, rd==x14, rs2_b3_val == 254, rs1_b1_val == 255, rs1_b2_val == 2, rs1_b3_val == 16, rs2_b0_val == 255
// opcode: umax8 ; op1:x15; op2:x17; dest:x14; op1val:0x1002ffdf;  op2val:0xfe8000ff
TEST_RR_OP(umax8, x14, x15, x17, 0x00000000, 0x1002ffdf, 0xfe8000ff, x5, 52, x8)

inst_14:
// rs1==x12, rs2==x28, rd==x26, rs2_b3_val == 128, rs2_b0_val == 64, rs1_b1_val == 254
// opcode: umax8 ; op1:x12; op2:x28; dest:x26; op1val:0xa07fe10;  op2val:0x800f1340
TEST_RR_OP(umax8, x26, x12, x28, 0x00000000, 0xa07fe10, 0x800f1340, x5, 56, x8)
RVTEST_SIGBASE(x16,signature_x16_0)

inst_15:
// rs1==x5, rs2==x27, rd==x4, rs2_b3_val == 64, rs2_b1_val == 2, rs2_b0_val == 16, rs1_b2_val == 16, rs1_b1_val == 1
// opcode: umax8 ; op1:x5; op2:x27; dest:x4; op1val:0xb10010f;  op2val:0x40030210
TEST_RR_OP(umax8, x4, x5, x27, 0x00000000, 0xb10010f, 0x40030210, x16, 0, x19)

inst_16:
// rs1==x17, rs2==x24, rd==x13, rs2_b3_val == 32, rs2_b1_val == 4, rs2_b0_val == 0, rs1_b2_val == 254
// opcode: umax8 ; op1:x17; op2:x24; dest:x13; op1val:0xafe050f;  op2val:0x20800400
TEST_RR_OP(umax8, x13, x17, x24, 0x00000000, 0xafe050f, 0x20800400, x16, 4, x19)

inst_17:
// rs1==x22, rs2==x8, rd==x2, rs2_b3_val == 16, rs1_b0_val == 191, rs1_b3_val == 254, rs1_b1_val == 247
// opcode: umax8 ; op1:x22; op2:x8; dest:x2; op1val:0xfe0ff7bf;  op2val:0x10030310
TEST_RR_OP(umax8, x2, x22, x8, 0x00000000, 0xfe0ff7bf, 0x10030310, x16, 8, x19)

inst_18:
// rs1==x10, rs2==x18, rd==x0, rs2_b3_val == 8, rs1_b3_val == 4, rs2_b1_val == 16
// opcode: umax8 ; op1:x10; op2:x18; dest:x0; op1val:0x40e0c02;  op2val:0x8091013
TEST_RR_OP(umax8, x0, x10, x18, 0x00000000, 0x40e0c02, 0x8091013, x16, 12, x19)

inst_19:
// rs1==x26, rs2==x0, rd==x28, rs2_b3_val == 2, rs2_b2_val == 191, rs2_b0_val == 247, rs1_b0_val == 127
// opcode: umax8 ; op1:x26; op2:x0; dest:x28; op1val:0x1340127f;  op2val:0x2bf07f7
TEST_RR_OP(umax8, x28, x26, x0, 0x00000000, 0x1340127f, 0x2bf07f7, x16, 16, x19)

inst_20:
// rs1==x28, rs2==x31, rd==x15, rs2_b3_val == 255, rs1_b0_val == 128, rs2_b2_val == 85, rs1_b2_val == 127
// opcode: umax8 ; op1:x28; op2:x31; dest:x15; op1val:0x97f0f80;  op2val:0xff5555fd
TEST_RR_OP(umax8, x15, x28, x31, 0x00000000, 0x97f0f80, 0xff5555fd, x16, 20, x19)

inst_21:
// rs1==x4, rs2==x3, rd==x27, rs2_b3_val == 0, rs1_b3_val == 127, rs1_b0_val == 4, rs1_b2_val == 255
// opcode: umax8 ; op1:x4; op2:x3; dest:x27; op1val:0x7fff0f04;  op2val:0x0f060f
TEST_RR_OP(umax8, x27, x4, x3, 0x00000000, 0x7fff0f04, 0x0f060f, x16, 24, x19)

inst_22:
// rs1==x14, rs2==x10, rd==x3, rs2_b2_val == 170, rs1_b1_val == 253, rs1_b0_val == 253
// opcode: umax8 ; op1:x14; op2:x10; dest:x3; op1val:0xe10fdfd;  op2val:0x8aa1313
TEST_RR_OP(umax8, x3, x14, x10, 0x00000000, 0xe10fdfd, 0x8aa1313, x16, 28, x19)

inst_23:
// rs1==x8, rs2==x25, rd==x5, rs2_b2_val == 127, rs2_b1_val == 170, rs1_b2_val == 247, rs1_b0_val == 170, rs1_b3_val == 8
// opcode: umax8 ; op1:x8; op2:x25; dest:x5; op1val:0x8f70aaa;  op2val:0x7faa40
TEST_RR_OP(umax8, x5, x8, x25, 0x00000000, 0x8f70aaa, 0x7faa40, x16, 32, x19)

inst_24:
// rs1==x21, rs2==x11, rd==x20, rs2_b2_val == 223, rs1_b0_val == 251, rs2_b0_val == 85
// opcode: umax8 ; op1:x21; op2:x11; dest:x20; op1val:0xdbf11fb;  op2val:0x9df5555
TEST_RR_OP(umax8, x20, x21, x11, 0x00000000, 0xdbf11fb, 0x9df5555, x16, 36, x19)

inst_25:
// rs1==x7, rs2==x6, rd==x8, rs2_b2_val == 247, rs1_b1_val == 4, rs2_b0_val == 4
// opcode: umax8 ; op1:x7; op2:x6; dest:x8; op1val:0xd10040a;  op2val:0xfbf70e04
TEST_RR_OP(umax8, x8, x7, x6, 0x00000000, 0xd10040a, 0xfbf70e04, x16, 40, x19)

inst_26:
// rs1==x31, rs2==x20, rd==x24, rs2_b2_val == 253, rs2_b0_val == 170
// opcode: umax8 ; op1:x31; op2:x20; dest:x24; op1val:0xefff0909;  op2val:0x9fd0aaa
TEST_RR_OP(umax8, x24, x31, x20, 0x00000000, 0xefff0909, 0x9fd0aaa, x16, 44, x19)

inst_27:
// rs1==x9, rs2==x21, rd==x12, rs1_b1_val == 127, rs2_b2_val == 16
// opcode: umax8 ; op1:x9; op2:x21; dest:x12; op1val:0xa0a7f80;  op2val:0x4100610
TEST_RR_OP(umax8, x12, x9, x21, 0x00000000, 0xa0a7f80, 0x4100610, x16, 48, x19)

inst_28:
// rs1==x20, rs2==x29, rd==x1, rs1_b1_val == 191, rs1_b0_val == 64
// opcode: umax8 ; op1:x20; op2:x29; dest:x1; op1val:0xc0abf40;  op2val:0x13550d
TEST_RR_OP(umax8, x1, x20, x29, 0x00000000, 0xc0abf40, 0x13550d, x16, 52, x19)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x29, rs2==x12, rd==x17, rs1_b1_val == 239, rs2_b2_val == 0
// opcode: umax8 ; op1:x29; op2:x12; dest:x17; op1val:0xbf80ef06;  op2val:0xfd000411
TEST_RR_OP(umax8, x17, x29, x12, 0x00000000, 0xbf80ef06, 0xfd000411, x1, 0, x3)

inst_30:
// rs1==x2, rs2==x5, rd==x29, rs1_b1_val == 251, rs2_b0_val == 191, rs1_b3_val == 0
// opcode: umax8 ; op1:x2; op2:x5; dest:x29; op1val:0x07fb11;  op2val:0x80b0dbf
TEST_RR_OP(umax8, x29, x2, x5, 0x00000000, 0x07fb11, 0x80b0dbf, x1, 4, x3)

inst_31:
// rs1==x0, rs2==x26, rd==x11, rs1_b1_val == 128, rs2_b1_val == 254
// opcode: umax8 ; op1:x0; op2:x26; dest:x11; op1val:0x3df8012;  op2val:0x355fe03
TEST_RR_OP(umax8, x11, x0, x26, 0x00000000, 0x3df8012, 0x355fe03, x1, 8, x3)

inst_32:
// rs1_b1_val == 64, rs2_b1_val == 251
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fe4002;  op2val:0x55bffbbf
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x20fe4002, 0x55bffbbf, x1, 12, x3)

inst_33:
// rs1_b1_val == 32, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x50d2004;  op2val:0xe0cfe13
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x50d2004, 0xe0cfe13, x1, 16, x3)

inst_34:
// rs1_b1_val == 16, rs2_b1_val == 1
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffe10aa;  op2val:0x20050112
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xeffe10aa, 0x20050112, x1, 20, x3)

inst_35:
// rs1_b1_val == 2, rs1_b3_val == 128
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x8080020c;  op2val:0xf7020206
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x8080020c, 0xf7020206, x1, 24, x3)

inst_36:
// rs1_b1_val == 0, rs2_b2_val == 32, rs2_b0_val == 251, rs2_b1_val == 253
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20df0001;  op2val:0xb20fdfb
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x20df0001, 0xb20fdfb, x1, 28, x3)

inst_37:
// rs1_b0_val == 85, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0d1055;  op2val:0xcbf07df
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xb0d1055, 0xcbf07df, x1, 32, x3)

inst_38:
// rs1_b0_val == 239, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x4010fdef;  op2val:0xbbf1311
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x4010fdef, 0xbbf1311, x1, 36, x3)

inst_39:
// rs1_b0_val == 247, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x800f02f7;  op2val:0x200efd02
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x800f02f7, 0x200efd02, x1, 40, x3)

inst_40:
// rs1_b0_val == 32, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5df1120;  op2val:0xff0a1005
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x5df1120, 0xff0a1005, x1, 44, x3)

inst_41:
// rs2_b2_val == 254, rs1_b3_val == 251
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb7f1311;  op2val:0xfdfe0f04
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xfb7f1311, 0xfdfe0f04, x1, 48, x3)

inst_42:
// rs1_b0_val == 255, rs1_b2_val == 1
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xe010fff;  op2val:0x125506bf
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xe010fff, 0x125506bf, x1, 52, x3)

inst_43:
// rs2_b2_val == 8, rs2_b0_val == 254
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x80020ddf;  op2val:0x1208bffe
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x80020ddf, 0x1208bffe, x1, 56, x3)

inst_44:
// rs2_b1_val == 255, rs2_b0_val == 32
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0b130b;  op2val:0x1380ff20
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xd0b130b, 0x1380ff20, x1, 60, x3)

inst_45:
// rs2_b0_val == 127, rs1_b2_val == 4, rs2_b1_val == 223
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xd04fd02;  op2val:0x10fddf7f
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xd04fd02, 0x10fddf7f, x1, 64, x3)

inst_46:
// rs2_b0_val == 239, rs1_b2_val == 32
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x720fffb;  op2val:0xd2009ef
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x720fffb, 0xd2009ef, x1, 68, x3)

inst_47:
// rs2_b0_val == 128, rs1_b2_val == 8
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf081007;  op2val:0xf713ff80
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xbf081007, 0xf713ff80, x1, 72, x3)

inst_48:
// rs2_b0_val == 1, rs1_b2_val == 239
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef40aa;  op2val:0x100c0301
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xfef40aa, 0x100c0301, x1, 76, x3)

inst_49:
// rs1_b3_val == 170, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa06040a;  op2val:0x27f09bf
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xaa06040a, 0x27f09bf, x1, 80, x3)

inst_50:
// rs1_b3_val == 223, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffe7f80;  op2val:0xfe0707fd
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xdffe7f80, 0xfe0707fd, x1, 84, x3)

inst_51:
// rs1_b3_val == 247, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf720200e;  op2val:0x1309bffe
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xf720200e, 0x1309bffe, x1, 88, x3)

inst_52:
// rs1_b3_val == 253, rs2_b2_val == 1
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd130aaa;  op2val:0x6011080
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xfd130aaa, 0x6011080, x1, 92, x3)

inst_53:
// rs1_b3_val == 2, rs2_b1_val == 64
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x2100604;  op2val:0xfe0a4004
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x2100604, 0xfe0a4004, x1, 96, x3)

inst_54:
// rs1_b3_val == 1, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x109ef04;  op2val:0x12f706aa
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x109ef04, 0x12f706aa, x1, 100, x3)

inst_55:
// rs1_b3_val == 255, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff040155;  op2val:0xe060a7f
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xff040155, 0xe060a7f, x1, 104, x3)

inst_56:
// rs2_b2_val == 4, rs2_b1_val == 247
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x55060abf;  op2val:0xd04f702
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x55060abf, 0xd04f702, x1, 108, x3)

inst_57:
// rs1_b2_val == 170, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20aa0d02;  op2val:0x200b1207
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x20aa0d02, 0x200b1207, x1, 112, x3)

inst_58:
// rs2_b1_val == 8, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x40000c0f;  op2val:0xff800802
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x40000c0f, 0xff800802, x1, 116, x3)

inst_59:
// rs1_b2_val == 251, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xffb08df;  op2val:0xfd05f755
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xffb08df, 0xfd05f755, x1, 120, x3)

inst_60:
// rs1_b2_val == 85, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7550e0c;  op2val:0xef0e0202
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xf7550e0c, 0xef0e0202, x1, 124, x3)

inst_61:
// rs2_b1_val == 32, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffef12;  op2val:0xff112010
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xfdffef12, 0xff112010, x1, 128, x3)

inst_62:
// rs2_b1_val == 239, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd050505;  op2val:0x8055efef
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xfd050505, 0x8055efef, x1, 132, x3)

inst_63:
// rs2_b2_val == 255, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xb805580;  op2val:0x9ffaa02
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0xb805580, 0x9ffaa02, x1, 136, x3)

inst_64:
// rs2_b3_val == 8, rs1_b3_val == 4, rs2_b1_val == 16
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x40e0c02;  op2val:0x8091013
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x40e0c02, 0x8091013, x1, 140, x3)

inst_65:
// rs2_b3_val == 2, rs2_b2_val == 191, rs2_b0_val == 247, rs1_b0_val == 127
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1340127f;  op2val:0x2bf07f7
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x1340127f, 0x2bf07f7, x1, 144, x3)

inst_66:
// rs1_b1_val == 128, rs2_b1_val == 254
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x3df8012;  op2val:0x355fe03
TEST_RR_OP(umax8, x31, x30, x29, 0x00000000, 0x3df8012, 0x355fe03, x1, 148, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x16_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 38*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
