
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksubh instruction of the RISC-V RV32PZicsr extension for the ksubh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksubh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x9, rd==x30, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -1, rs1_h1_val == -129
// opcode: ksubh ; op1:x3; op2:x9; dest:x30; op1val:0xff7f8000;  op2val:0xfffffff6
TEST_PKRR_OP(ksubh, x30, x3, x9, 0x00000000, 0xff7f8000, 0xfffffff6, x3, x12, 0, x25)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x1, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs2_h0_val == 128, rs1_h0_val == -3, rs1_h1_val == 32
// opcode: ksubh ; op1:x7; op2:x7; dest:x1; op1val:0x20fffd;  op2val:0x200080
TEST_PKRR_OP(ksubh, x1, x7, x7, 0x00000000, 0x20fffd, 0x200080, x7, x12, 8, x25)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x24, rd==x8, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -5, rs2_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 1024
// opcode: ksubh ; op1:x8; op2:x24; dest:x8; op1val:0xfffb0400;  op2val:0x075555
TEST_PKRR_OP(ksubh, x8, x8, x24, 0x00000000, 0xfffb0400, 0x075555, x8, x12, 16, x25)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -1025, rs1_h1_val == 2
// opcode: ksubh ; op1:x15; op2:x15; dest:x15; op1val:0x020003;  op2val:0xfbfffff9
TEST_PKRR_OP(ksubh, x15, x15, x15, 0x00000000, 0x020003, 0xfbfffff9, x15, x12, 24, x25)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x13, rd==x13, rs1_h0_val == rs2_h0_val, rs1_h0_val == 1, rs2_h0_val == 1, rs2_h1_val == 2, rs1_h1_val == 1
// opcode: ksubh ; op1:x4; op2:x13; dest:x13; op1val:0x010001;  op2val:0x020001
TEST_PKRR_OP(ksubh, x13, x4, x13, 0x00000000, 0x010001, 0x020001, x4, x12, 32, x25)

inst_5:
// rs1==x14, rs2==x0, rd==x7, rs2_h1_val == -21846, rs1_h1_val == -8193, rs2_h0_val == 4096
// opcode: ksubh ; op1:x14; op2:x0; dest:x7; op1val:0xdfff0009;  op2val:0xaaaa1000
TEST_PKRR_OP(ksubh, x7, x14, x0, 0x00000000, 0xdfff0009, 0xaaaa1000, x14, x12, 40, x25)

inst_6:
// rs1==x21, rs2==x18, rd==x10, rs2_h1_val == 21845, rs1_h0_val == 8, rs1_h1_val == -32768
// opcode: ksubh ; op1:x21; op2:x18; dest:x10; op1val:0x80000008;  op2val:0x55550009
TEST_PKRR_OP(ksubh, x10, x21, x18, 0x00000000, 0x80000008, 0x55550009, x21, x12, 48, x25)

inst_7:
// rs1==x2, rs2==x27, rd==x19, rs2_h1_val == 32767, rs1_h1_val == -33, rs2_h0_val == -2049
// opcode: ksubh ; op1:x2; op2:x27; dest:x19; op1val:0xffdf0001;  op2val:0x7ffff7ff
TEST_PKRR_OP(ksubh, x19, x2, x27, 0x00000000, 0xffdf0001, 0x7ffff7ff, x2, x12, 56, x25)

inst_8:
// rs1==x0, rs2==x17, rd==x22, rs2_h1_val == -16385, rs1_h0_val == 64
// opcode: ksubh ; op1:x0; op2:x17; dest:x22; op1val:0xc0000040;  op2val:0xbffffff9
TEST_PKRR_OP(ksubh, x22, x0, x17, 0x00000000, 0xc0000040, 0xbffffff9, x0, x12, 64, x25)

inst_9:
// rs1==x6, rs2==x20, rd==x11, rs2_h1_val == -8193, rs2_h0_val == 256, rs1_h0_val == -1
// opcode: ksubh ; op1:x6; op2:x20; dest:x11; op1val:0xfff8ffff;  op2val:0xdfff0100
TEST_PKRR_OP(ksubh, x11, x6, x20, 0x00000000, 0xfff8ffff, 0xdfff0100, x6, x12, 72, x25)

inst_10:
// rs1==x10, rs2==x14, rd==x21, rs2_h1_val == -4097, rs1_h0_val == 8192, rs1_h1_val == -1025
// opcode: ksubh ; op1:x10; op2:x14; dest:x21; op1val:0xfbff2000;  op2val:0xefff3fff
TEST_PKRR_OP(ksubh, x21, x10, x14, 0x00000000, 0xfbff2000, 0xefff3fff, x10, x12, 80, x25)

inst_11:
// rs1==x1, rs2==x29, rd==x9, rs2_h1_val == -2049, rs1_h0_val == -16385, rs2_h0_val == 64, rs1_h1_val == -257
// opcode: ksubh ; op1:x1; op2:x29; dest:x9; op1val:0xfeffbfff;  op2val:0xf7ff0040
TEST_PKRR_OP(ksubh, x9, x1, x29, 0x00000000, 0xfeffbfff, 0xf7ff0040, x1, x12, 88, x25)

inst_12:
// rs1==x23, rs2==x2, rd==x20, rs2_h1_val == -513, rs2_h0_val == -8193, rs1_h0_val == 4096
// opcode: ksubh ; op1:x23; op2:x2; dest:x20; op1val:0x80001000;  op2val:0xfdffdfff
TEST_PKRR_OP(ksubh, x20, x23, x2, 0x00000000, 0x80001000, 0xfdffdfff, x23, x12, 96, x25)

inst_13:
// rs1==x5, rs2==x3, rd==x4, rs2_h1_val == -257, rs2_h0_val == -21846, rs1_h1_val == 256
// opcode: ksubh ; op1:x5; op2:x3; dest:x4; op1val:0x1000006;  op2val:0xfeffaaaa
TEST_PKRR_OP(ksubh, x4, x5, x3, 0x00000000, 0x1000006, 0xfeffaaaa, x5, x12, 104, x25)

inst_14:
// rs1==x22, rs2==x8, rd==x5, rs2_h1_val == -129, rs1_h1_val == 512
// opcode: ksubh ; op1:x22; op2:x8; dest:x5; op1val:0x200c000;  op2val:0xff7f0100
TEST_PKRR_OP(ksubh, x5, x22, x8, 0x00000000, 0x200c000, 0xff7f0100, x22, x12, 112, x25)

inst_15:
// rs1==x18, rs2==x1, rd==x6, rs2_h1_val == -65, rs1_h0_val == -17, rs1_h1_val == 0
// opcode: ksubh ; op1:x18; op2:x1; dest:x6; op1val:0x00ffef;  op2val:0xffbffffa
TEST_PKRR_OP(ksubh, x6, x18, x1, 0x00000000, 0x00ffef, 0xffbffffa, x18, x12, 120, x25)

inst_16:
// rs1==x16, rs2==x11, rd==x23, rs2_h1_val == -33, rs1_h1_val == 4096, rs2_h0_val == 0, rs1_h0_val == -4097
// opcode: ksubh ; op1:x16; op2:x11; dest:x23; op1val:0x1000efff;  op2val:0xffdf0000
TEST_PKRR_OP(ksubh, x23, x16, x11, 0x00000000, 0x1000efff, 0xffdf0000, x16, x12, 128, x25)

inst_17:
// rs1==x27, rs2==x5, rd==x28, rs2_h1_val == -17, rs1_h1_val == -513
// opcode: ksubh ; op1:x27; op2:x5; dest:x28; op1val:0xfdff0003;  op2val:0xffef0006
TEST_PKRR_OP(ksubh, x28, x27, x5, 0x00000000, 0xfdff0003, 0xffef0006, x27, x12, 136, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x11, rs2==x21, rd==x31, rs2_h1_val == -9, 
// opcode: ksubh ; op1:x11; op2:x21; dest:x31; op1val:0x090006;  op2val:0xfff7fff6
TEST_PKRR_OP(ksubh, x31, x11, x21, 0x00000000, 0x090006, 0xfff7fff6, x11, x1, 0, x7)

inst_19:
// rs1==x9, rs2==x31, rd==x12, rs2_h1_val == -5, rs2_h0_val == 16384, rs1_h0_val == -2049
// opcode: ksubh ; op1:x9; op2:x31; dest:x12; op1val:0x05f7ff;  op2val:0xfffb4000
TEST_PKRR_OP(ksubh, x12, x9, x31, 0x00000000, 0x05f7ff, 0xfffb4000, x9, x1, 8, x7)

inst_20:
// rs1==x25, rs2==x16, rd==x27, rs2_h1_val == -3, rs1_h0_val == -257
// opcode: ksubh ; op1:x25; op2:x16; dest:x27; op1val:0x00feff;  op2val:0xfffd1000
TEST_PKRR_OP(ksubh, x27, x25, x16, 0x00000000, 0x00feff, 0xfffd1000, x25, x1, 16, x7)

inst_21:
// rs1==x19, rs2==x6, rd==x29, rs2_h1_val == -2, rs2_h0_val == -129, rs1_h0_val == 2048
// opcode: ksubh ; op1:x19; op2:x6; dest:x29; op1val:0x1000800;  op2val:0xfffeff7f
TEST_PKRR_OP(ksubh, x29, x19, x6, 0x00000000, 0x1000800, 0xfffeff7f, x19, x1, 24, x7)

inst_22:
// rs1==x30, rs2==x19, rd==x26, rs2_h1_val == -32768, rs1_h1_val == -4097
// opcode: ksubh ; op1:x30; op2:x19; dest:x26; op1val:0xefffc000;  op2val:0x80000009
TEST_PKRR_OP(ksubh, x26, x30, x19, 0x00000000, 0xefffc000, 0x80000009, x30, x1, 32, x7)

inst_23:
// rs1==x13, rs2==x12, rd==x3, rs2_h1_val == 16384, rs1_h1_val == -3, rs1_h0_val == -33
// opcode: ksubh ; op1:x13; op2:x12; dest:x3; op1val:0xfffdffdf;  op2val:0x40000006
TEST_PKRR_OP(ksubh, x3, x13, x12, 0x00000000, 0xfffdffdf, 0x40000006, x13, x1, 40, x7)

inst_24:
// rs1==x29, rs2==x4, rd==x25, rs2_h1_val == 8192, rs1_h0_val == 0, rs2_h0_val == -65
// opcode: ksubh ; op1:x29; op2:x4; dest:x25; op1val:0x090000;  op2val:0x2000ffbf
TEST_PKRR_OP(ksubh, x25, x29, x4, 0x00000000, 0x090000, 0x2000ffbf, x29, x1, 48, x7)

inst_25:
// rs1==x26, rs2==x28, rd==x14, rs2_h1_val == 4096, rs2_h0_val == 2, rs1_h1_val == 8
// opcode: ksubh ; op1:x26; op2:x28; dest:x14; op1val:0x080800;  op2val:0x10000002
TEST_PKRR_OP(ksubh, x14, x26, x28, 0x00000000, 0x080800, 0x10000002, x26, x1, 56, x7)

inst_26:
// rs1==x17, rs2==x23, rd==x2, rs2_h1_val == 2048, rs1_h0_val == -5, rs2_h0_val == 2048
// opcode: ksubh ; op1:x17; op2:x23; dest:x2; op1val:0xc000fffb;  op2val:0x8000800
TEST_PKRR_OP(ksubh, x2, x17, x23, 0x00000000, 0xc000fffb, 0x8000800, x17, x1, 64, x7)

inst_27:
// rs1==x24, rs2==x10, rd==x17, rs2_h1_val == 1024, 
// opcode: ksubh ; op1:x24; op2:x10; dest:x17; op1val:0xfdfffffd;  op2val:0x400dfff
TEST_PKRR_OP(ksubh, x17, x24, x10, 0x00000000, 0xfdfffffd, 0x400dfff, x24, x1, 72, x7)

inst_28:
// rs1==x28, rs2==x26, rd==x18, rs2_h1_val == 512, rs1_h0_val == 21845, rs1_h1_val == 1024
// opcode: ksubh ; op1:x28; op2:x26; dest:x18; op1val:0x4005555;  op2val:0x2000006
TEST_PKRR_OP(ksubh, x18, x28, x26, 0x00000000, 0x4005555, 0x2000006, x28, x1, 80, x7)

inst_29:
// rs1==x31, rs2==x30, rd==x0, rs2_h1_val == 256, rs1_h1_val == 2048
// opcode: ksubh ; op1:x31; op2:x30; dest:x0; op1val:0x800efff;  op2val:0x1000005
TEST_PKRR_OP(ksubh, x0, x31, x30, 0x00000000, 0x800efff, 0x1000005, x31, x1, 88, x7)

inst_30:
// rs1==x20, rs2==x25, rd==x16, rs1_h0_val == -1025, 
// opcode: ksubh ; op1:x20; op2:x25; dest:x16; op1val:0xfffafbff;  op2val:0x4000080
TEST_PKRR_OP(ksubh, x16, x20, x25, 0x00000000, 0xfffafbff, 0x4000080, x20, x1, 96, x7)

inst_31:
// rs1==x12, rs2==x22, rd==x24, rs1_h0_val == -513, 
// opcode: ksubh ; op1:x12; op2:x22; dest:x24; op1val:0x08fdff;  op2val:0x10000003
TEST_PKRR_OP(ksubh, x24, x12, x22, 0x00000000, 0x08fdff, 0x10000003, x12, x1, 104, x2)

inst_32:
// rs1_h0_val == -129, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x07ff7f;  op2val:0xefff5555
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x07ff7f, 0xefff5555, x30, x1, 112, x2)

inst_33:
// rs1_h0_val == -65, rs1_h1_val == 4
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf;  op2val:0x2000002
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x04ffbf, 0x2000002, x30, x1, 120, x2)

inst_34:
// rs1_h0_val == -9, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff7;  op2val:0xfffe0800
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffcfff7, 0xfffe0800, x30, x1, 128, x2)

inst_35:
// rs1_h0_val == -2, rs1_h1_val == 64
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x40fffe;  op2val:0xff7ffffa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x40fffe, 0xff7ffffa, x30, x1, 136, x2)

inst_36:
// rs1_h0_val == 16384, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff4000;  op2val:0x8004000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xdfff4000, 0x8004000, x30, x1, 144, x2)

inst_37:
// rs1_h0_val == 512, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0200;  op2val:0x201000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfbff0200, 0x201000, x30, x1, 152, x2)

inst_38:
// rs1_h0_val == 256, rs2_h0_val == -2
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xc0000100;  op2val:0x5555fffe
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xc0000100, 0x5555fffe, x30, x1, 160, x2)

inst_39:
// rs1_h0_val == 128, rs2_h0_val == 4, rs1_h1_val == -2049
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080;  op2val:0xfffa0004
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xf7ff0080, 0xfffa0004, x30, x1, 168, x2)

inst_40:
// rs1_h0_val == 32, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x040020;  op2val:0xfeff1000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x040020, 0xfeff1000, x30, x1, 176, x2)

inst_41:
// rs1_h0_val == 16, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010;  op2val:0xffbffff8
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xf7ff0010, 0xffbffff8, x30, x1, 184, x2)

inst_42:
// rs1_h0_val == 4, rs1_h1_val == -21846
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0004;  op2val:0xaaaa0004
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xaaaa0004, 0xaaaa0004, x30, x1, 192, x2)

inst_43:
// rs1_h0_val == 2, rs2_h1_val == 64, rs1_h1_val == 8192
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20000002;  op2val:0x40ff7f
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x20000002, 0x40ff7f, x30, x1, 200, x2)

inst_44:
// rs2_h1_val == 128, rs1_h1_val == -16385
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0x80fffc
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xbfffffff, 0x80fffc, x30, x1, 208, x2)

inst_45:
// rs2_h1_val == 16, rs1_h0_val == 32767
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4007fff;  op2val:0x100009
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x4007fff, 0x100009, x30, x1, 216, x2)

inst_46:
// rs2_h1_val == 8, rs2_h0_val == -32768
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xc000efff;  op2val:0x088000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xc000efff, 0x088000, x30, x1, 224, x2)

inst_47:
// rs2_h1_val == 4, rs2_h0_val == 8192
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x020010;  op2val:0x042000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x020010, 0x042000, x30, x1, 232, x2)

inst_48:
// rs2_h1_val == 1, rs1_h1_val == 16384, rs2_h0_val == -9
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7ff;  op2val:0x01fff7
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x4000f7ff, 0x01fff7, x30, x1, 240, x2)

inst_49:
// rs2_h0_val == -5, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffa7fff;  op2val:0x800fffb
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffa7fff, 0x800fffb, x30, x1, 248, x2)

inst_50:
// rs2_h0_val == -3, rs1_h1_val == 128
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x80ffdf;  op2val:0xff7ffffd
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x80ffdf, 0xff7ffffd, x30, x1, 256, x2)

inst_51:
// rs2_h0_val == 1024, rs1_h1_val == 21845
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7;  op2val:0x030400
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x5555fff7, 0x030400, x30, x1, 264, x2)

inst_52:
// rs2_h0_val == 512, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08ffff;  op2val:0xff7f0200
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x08ffff, 0xff7f0200, x30, x1, 272, x2)

inst_53:
// rs2_h0_val == 32, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff7;  op2val:0x200020
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffbfff7, 0x200020, x30, x1, 280, x2)

inst_54:
// rs2_h0_val == 16, rs1_h0_val == -21846
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000aaaa;  op2val:0xfffb0010
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x2000aaaa, 0xfffb0010, x30, x1, 288, x2)

inst_55:
// rs2_h0_val == 8, rs1_h1_val == -65
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0008;  op2val:0x8000008
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xffbf0008, 0x8000008, x30, x1, 296, x2)

inst_56:
// rs2_h0_val == -1, rs1_h1_val == -9
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff6;  op2val:0x100ffff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfff7fff6, 0x100ffff, x30, x1, 304, x2)

inst_57:
// rs1_h1_val == 32767, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffc000;  op2val:0xfeff0007
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x7fffc000, 0xfeff0007, x30, x1, 312, x2)

inst_58:
// rs1_h1_val == -17, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffef0040;  op2val:0xfffcfff7
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xffef0040, 0xfffcfff7, x30, x1, 320, x2)

inst_59:
// rs2_h0_val == -1025, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x40fdff;  op2val:0x800fbff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x40fdff, 0x800fbff, x30, x1, 328, x2)

inst_60:
// rs1_h1_val == -2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffd;  op2val:0x3fff0003
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffefffd, 0x3fff0003, x30, x1, 336, x2)

inst_61:
// rs2_h1_val == 0, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0002;  op2val:0x00fff8
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffc0002, 0x00fff8, x30, x1, 344, x2)

inst_62:
// rs1_h1_val == 16, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x10feff;  op2val:0xfbff0200
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x10feff, 0xfbff0200, x30, x1, 352, x2)

inst_63:
// rs2_h0_val == 32767, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf;  op2val:0x017fff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x06ffbf, 0x017fff, x30, x1, 360, x2)

inst_64:
// rs2_h0_val == -33, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffa;  op2val:0xaaaaffdf
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x8000fffa, 0xaaaaffdf, x30, x1, 368, x2)

inst_65:
// rs2_h0_val == -16385, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf;  op2val:0xfeffbfff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x07ffdf, 0xfeffbfff, x30, x1, 376, x2)

inst_66:
// rs2_h0_val == -4097, rs1_h1_val == -1
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x800efff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfffffffe, 0x800efff, x30, x1, 384, x2)

inst_67:
// rs2_h0_val == -513, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7;  op2val:0xc000fdff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x5555fff7, 0xc000fdff, x30, x1, 392, x2)

inst_68:
// rs2_h0_val == -257, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x070020;  op2val:0x2000feff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x070020, 0x2000feff, x30, x1, 400, x2)

inst_69:
// rs1_h0_val == -8193, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0x09feff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xffffdfff, 0x09feff, x30, x1, 408, x2)

inst_70:
// rs2_h0_val == -17, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff;  op2val:0x7fffffef
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xfff9fdff, 0x7fffffef, x30, x1, 416, x2)

inst_71:
// rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 32, rs2_h0_val == 128, rs1_h0_val == -3, rs1_h1_val == 32
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20fffd;  op2val:0x200080
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x20fffd, 0x200080, x30, x1, 424, x2)

inst_72:
// rs2_h1_val == -16385, rs1_h0_val == 64
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xc0000040;  op2val:0xbffffff9
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0xc0000040, 0xbffffff9, x30, x1, 432, x2)

inst_73:
// rs2_h1_val == 256, rs1_h1_val == 2048
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x800efff;  op2val:0x1000005
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x00000000, 0x800efff, 0x1000005, x30, x1, 440, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
