
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmatt instruction of the RISC-V RV32PZicsr extension for the kmatt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmatt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x9, rd==x5, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 4096
// opcode: kmatt ; op1:x8; op2:x9; dest:x5; op1val:0x10008000;  op2val:0xfffcfffa
TEST_PKRR_OP(kmatt, x5, x8, x9, 0x00000000, 0x10008000, 0xfffcfffa, x8, x2, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x28, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 32, rs2_h1_val == -32768
// opcode: kmatt ; op1:x14; op2:x14; dest:x28; op1val:0x80000020;  op2val:0x8000fff8
TEST_PKRR_OP(kmatt, x28, x14, x14, 0x00000000, 0x80000020, 0x8000fff8, x14, x2, 8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x11, rs2==x28, rd==x11, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -1025, rs1_h1_val == -16385, rs2_h1_val == 32767
// opcode: kmatt ; op1:x11; op2:x28; dest:x11; op1val:0xbffffff9;  op2val:0x7ffffbff
TEST_PKRR_OP(kmatt, x11, x11, x28, 0x00000000, 0xbffffff9, 0x7ffffbff, x11, x2, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 256, rs1_h0_val == 4
// opcode: kmatt ; op1:x1; op2:x1; dest:x1; op1val:0x1000004;  op2val:0x40000005
TEST_PKRR_OP(kmatt, x1, x1, x1, 0x00000000, 0x1000004, 0x40000005, x1, x2, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x6, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h1_val == 128
// opcode: kmatt ; op1:x19; op2:x6; dest:x6; op1val:0x1000fff9;  op2val:0x80fff9
TEST_PKRR_OP(kmatt, x6, x19, x6, 0x00000000, 0x1000fff9, 0x80fff9, x19, x2, 32, x3)

inst_5:
// rs1==x17, rs2==x20, rd==x7, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -257, rs1_h1_val == 512
// opcode: kmatt ; op1:x17; op2:x20; dest:x7; op1val:0x200feff;  op2val:0x800006
TEST_PKRR_OP(kmatt, x7, x17, x20, 0x00000000, 0x200feff, 0x800006, x17, x2, 40, x3)

inst_6:
// rs1==x5, rs2==x11, rd==x0, rs2_h1_val == -21846, rs2_h0_val == 32767
// opcode: kmatt ; op1:x5; op2:x11; dest:x0; op1val:0xfff9fffa;  op2val:0xaaaa7fff
TEST_PKRR_OP(kmatt, x0, x5, x11, 0x00000000, 0xfff9fffa, 0xaaaa7fff, x5, x2, 48, x3)

inst_7:
// rs1==x9, rs2==x8, rd==x18, rs2_h1_val == 21845, rs2_h0_val == 1024, rs1_h1_val == 8192, rs1_h0_val == -33
// opcode: kmatt ; op1:x9; op2:x8; dest:x18; op1val:0x2000ffdf;  op2val:0x55550400
TEST_PKRR_OP(kmatt, x18, x9, x8, 0x00000000, 0x2000ffdf, 0x55550400, x9, x2, 56, x3)

inst_8:
// rs1==x12, rs2==x7, rd==x25, rs2_h1_val == -16385, rs2_h0_val == -5, rs1_h0_val == -3
// opcode: kmatt ; op1:x12; op2:x7; dest:x25; op1val:0xfffafffd;  op2val:0xbffffffb
TEST_PKRR_OP(kmatt, x25, x12, x7, 0x00000000, 0xfffafffd, 0xbffffffb, x12, x2, 64, x3)

inst_9:
// rs1==x30, rs2==x18, rd==x10, rs2_h1_val == -8193, rs1_h0_val == 32767, rs2_h0_val == 8192, rs1_h1_val == -257
// opcode: kmatt ; op1:x30; op2:x18; dest:x10; op1val:0xfeff7fff;  op2val:0xdfff2000
TEST_PKRR_OP(kmatt, x10, x30, x18, 0x00000000, 0xfeff7fff, 0xdfff2000, x30, x2, 72, x3)

inst_10:
// rs1==x16, rs2==x22, rd==x26, rs2_h1_val == -4097, rs1_h0_val == -17, rs1_h1_val == 0
// opcode: kmatt ; op1:x16; op2:x22; dest:x26; op1val:0x00ffef;  op2val:0xefff0007
TEST_PKRR_OP(kmatt, x26, x16, x22, 0x00000000, 0x00ffef, 0xefff0007, x16, x2, 80, x3)

inst_11:
// rs1==x7, rs2==x24, rd==x16, rs2_h1_val == -2049, rs1_h0_val == 8192, rs2_h0_val == 2048
// opcode: kmatt ; op1:x7; op2:x24; dest:x16; op1val:0xfff62000;  op2val:0xf7ff0800
TEST_PKRR_OP(kmatt, x16, x7, x24, 0x00000000, 0xfff62000, 0xf7ff0800, x7, x2, 88, x3)

inst_12:
// rs1==x18, rs2==x31, rd==x17, rs2_h1_val == -1025, rs1_h1_val == -21846
// opcode: kmatt ; op1:x18; op2:x31; dest:x17; op1val:0xaaaaffef;  op2val:0xfbfffff6
TEST_PKRR_OP(kmatt, x17, x18, x31, 0x00000000, 0xaaaaffef, 0xfbfffff6, x18, x2, 96, x3)

inst_13:
// rs1==x23, rs2==x29, rd==x4, rs2_h1_val == -513, rs2_h0_val == -32768, rs1_h0_val == -8193
// opcode: kmatt ; op1:x23; op2:x29; dest:x4; op1val:0x05dfff;  op2val:0xfdff8000
TEST_PKRR_OP(kmatt, x4, x23, x29, 0x00000000, 0x05dfff, 0xfdff8000, x23, x2, 104, x3)

inst_14:
// rs1==x29, rs2==x30, rd==x12, rs2_h1_val == -257, rs1_h0_val == -5, rs2_h0_val == -3
// opcode: kmatt ; op1:x29; op2:x30; dest:x12; op1val:0x09fffb;  op2val:0xfefffffd
TEST_PKRR_OP(kmatt, x12, x29, x30, 0x00000000, 0x09fffb, 0xfefffffd, x29, x2, 112, x3)

inst_15:
// rs1==x25, rs2==x21, rd==x31, rs2_h1_val == -129, rs2_h0_val == -9
// opcode: kmatt ; op1:x25; op2:x21; dest:x31; op1val:0xbfff0009;  op2val:0xff7ffff7
TEST_PKRR_OP(kmatt, x31, x25, x21, 0x00000000, 0xbfff0009, 0xff7ffff7, x25, x2, 120, x3)

inst_16:
// rs1==x3, rs2==x15, rd==x19, rs2_h1_val == -65, rs1_h1_val == -17
// opcode: kmatt ; op1:x3; op2:x15; dest:x19; op1val:0xffefffdf;  op2val:0xffbf0003
TEST_PKRR_OP(kmatt, x19, x3, x15, 0x00000000, 0xffefffdf, 0xffbf0003, x3, x2, 128, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x6, rs2==x19, rd==x23, rs2_h1_val == -33, rs1_h1_val == -33, rs1_h0_val == -129, rs2_h0_val == 32
// opcode: kmatt ; op1:x6; op2:x19; dest:x23; op1val:0xffdfff7f;  op2val:0xffdf0020
TEST_PKRR_OP(kmatt, x23, x6, x19, 0x00000000, 0xffdfff7f, 0xffdf0020, x6, x1, 0, x7)

inst_18:
// rs1==x13, rs2==x25, rd==x29, rs2_h1_val == -17, rs1_h0_val == 21845
// opcode: kmatt ; op1:x13; op2:x25; dest:x29; op1val:0x095555;  op2val:0xffeffff7
TEST_PKRR_OP(kmatt, x29, x13, x25, 0x00000000, 0x095555, 0xffeffff7, x13, x1, 8, x7)

inst_19:
// rs1==x31, rs2==x26, rd==x13, rs2_h1_val == -9, rs2_h0_val == 1, rs1_h1_val == -1025, rs1_h0_val == -2
// opcode: kmatt ; op1:x31; op2:x26; dest:x13; op1val:0xfbfffffe;  op2val:0xfff70001
TEST_PKRR_OP(kmatt, x13, x31, x26, 0x00000000, 0xfbfffffe, 0xfff70001, x31, x1, 16, x7)

inst_20:
// rs1==x24, rs2==x13, rd==x27, rs2_h1_val == -5, rs1_h0_val == 2
// opcode: kmatt ; op1:x24; op2:x13; dest:x27; op1val:0xfff90002;  op2val:0xfffbfbff
TEST_PKRR_OP(kmatt, x27, x24, x13, 0x00000000, 0xfff90002, 0xfffbfbff, x24, x1, 24, x7)

inst_21:
// rs1==x15, rs2==x16, rd==x22, rs2_h1_val == -3, 
// opcode: kmatt ; op1:x15; op2:x16; dest:x22; op1val:0xfff60020;  op2val:0xfffd0007
TEST_PKRR_OP(kmatt, x22, x15, x16, 0x00000000, 0xfff60020, 0xfffd0007, x15, x1, 32, x7)

inst_22:
// rs1==x28, rs2==x4, rd==x20, rs2_h1_val == -2, rs1_h1_val == 64
// opcode: kmatt ; op1:x28; op2:x4; dest:x20; op1val:0x405555;  op2val:0xfffe0400
TEST_PKRR_OP(kmatt, x20, x28, x4, 0x00000000, 0x405555, 0xfffe0400, x28, x1, 40, x7)

inst_23:
// rs1==x22, rs2==x23, rd==x8, rs2_h1_val == 8192, rs2_h0_val == 4, rs1_h1_val == -8193, rs1_h0_val == 2048
// opcode: kmatt ; op1:x22; op2:x23; dest:x8; op1val:0xdfff0800;  op2val:0x20000004
TEST_PKRR_OP(kmatt, x8, x22, x23, 0x00000000, 0xdfff0800, 0x20000004, x22, x1, 48, x7)

inst_24:
// rs1==x21, rs2==x3, rd==x24, rs2_h1_val == 4096, rs2_h0_val == 2, rs1_h0_val == 1024
// opcode: kmatt ; op1:x21; op2:x3; dest:x24; op1val:0x030400;  op2val:0x10000002
TEST_PKRR_OP(kmatt, x24, x21, x3, 0x00000000, 0x030400, 0x10000002, x21, x1, 56, x7)

inst_25:
// rs1==x27, rs2==x0, rd==x21, rs2_h1_val == 2048, rs1_h0_val == -21846, rs1_h1_val == 32767
// opcode: kmatt ; op1:x27; op2:x0; dest:x21; op1val:0x7fffaaaa;  op2val:0x8000009
TEST_PKRR_OP(kmatt, x21, x27, x0, 0x00000000, 0x7fffaaaa, 0x8000009, x27, x1, 64, x7)

inst_26:
// rs1==x0, rs2==x2, rd==x30, rs2_h1_val == 1024, rs1_h0_val == 256, rs2_h0_val == -16385
// opcode: kmatt ; op1:x0; op2:x2; dest:x30; op1val:0x7fff0100;  op2val:0x400bfff
TEST_PKRR_OP(kmatt, x30, x0, x2, 0x00000000, 0x7fff0100, 0x400bfff, x0, x1, 72, x7)

inst_27:
// rs1==x26, rs2==x5, rd==x2, rs2_h1_val == 512, rs2_h0_val == 21845, rs1_h1_val == -5
// opcode: kmatt ; op1:x26; op2:x5; dest:x2; op1val:0xfffbfff9;  op2val:0x2005555
TEST_PKRR_OP(kmatt, x2, x26, x5, 0x00000000, 0xfffbfff9, 0x2005555, x26, x1, 80, x7)

inst_28:
// rs1==x10, rs2==x12, rd==x9, rs2_h1_val == 256, rs1_h1_val == 21845
// opcode: kmatt ; op1:x10; op2:x12; dest:x9; op1val:0x5555fffe;  op2val:0x100fffd
TEST_PKRR_OP(kmatt, x9, x10, x12, 0x00000000, 0x5555fffe, 0x100fffd, x10, x1, 88, x7)

inst_29:
// rs1==x4, rs2==x17, rd==x3, rs2_h1_val == 64, rs2_h0_val == -2, rs1_h0_val == -16385
// opcode: kmatt ; op1:x4; op2:x17; dest:x3; op1val:0xfeffbfff;  op2val:0x40fffe
TEST_PKRR_OP(kmatt, x3, x4, x17, 0x00000000, 0xfeffbfff, 0x40fffe, x4, x1, 96, x7)

inst_30:
// rs1==x2, rs2==x27, rd==x15, rs2_h1_val == 32, rs1_h1_val == 1024, rs2_h0_val == 64
// opcode: kmatt ; op1:x2; op2:x27; dest:x15; op1val:0x4000100;  op2val:0x200040
TEST_PKRR_OP(kmatt, x15, x2, x27, 0x00000000, 0x4000100, 0x200040, x2, x1, 104, x3)

inst_31:
// rs1==x20, rs2==x10, rd==x14, rs1_h0_val == -1025, 
// opcode: kmatt ; op1:x20; op2:x10; dest:x14; op1val:0xaaaafbff;  op2val:0xfffa0004
TEST_PKRR_OP(kmatt, x14, x20, x10, 0x00000000, 0xaaaafbff, 0xfffa0004, x20, x1, 112, x3)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == -513, rs2_h0_val == -33
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0xfff7ffdf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfdfffdff, 0xfff7ffdf, x30, x1, 0, x3)

inst_33:
// rs1_h0_val == -65, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffbf;  op2val:0xbfff0007
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfff6ffbf, 0xbfff0007, x30, x1, 8, x3)

inst_34:
// rs1_h0_val == -9, rs1_h1_val == -2049
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7;  op2val:0xfbff0002
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xf7fffff7, 0xfbff0002, x30, x1, 16, x3)

inst_35:
// rs1_h0_val == 16384, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff4000;  op2val:0x80007fff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xbfff4000, 0x80007fff, x30, x1, 24, x3)

inst_36:
// rs1_h0_val == 4096, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff61000;  op2val:0xc000fffe
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfff61000, 0xc000fffe, x30, x1, 32, x3)

inst_37:
// rs1_h0_val == 512, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0200;  op2val:0xffbffff8
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xf7ff0200, 0xffbffff8, x30, x1, 40, x3)

inst_38:
// rs1_h0_val == 128, rs2_h0_val == -4097
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x20000080;  op2val:0xfff7efff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x20000080, 0xfff7efff, x30, x1, 48, x3)

inst_39:
// rs1_h0_val == 64, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffef0040;  op2val:0x3fffbfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xffef0040, 0x3fffbfff, x30, x1, 56, x3)

inst_40:
// rs1_h0_val == 16, rs1_h1_val == 16384, rs2_h0_val == -17
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40000010;  op2val:0xfff7ffef
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x40000010, 0xfff7ffef, x30, x1, 64, x3)

inst_41:
// rs1_h0_val == 8, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x400008;  op2val:0x1000fffa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x400008, 0x1000fffa, x30, x1, 72, x3)

inst_42:
// rs1_h0_val == 1, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xc0000001;  op2val:0x2000800
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xc0000001, 0x2000800, x30, x1, 80, x3)

inst_43:
// rs1_h0_val == 0, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000;  op2val:0xfffc5555
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfbff0000, 0xfffc5555, x30, x1, 88, x3)

inst_44:
// rs1_h0_val == -1, rs1_h1_val == -129
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0xfff70006
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xff7fffff, 0xfff70006, x30, x1, 96, x3)

inst_45:
// rs2_h1_val == 16, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff8;  op2val:0x10fffd
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xffdffff8, 0x10fffd, x30, x1, 104, x3)

inst_46:
// rs2_h1_val == 8, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x55550020;  op2val:0x088000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x55550020, 0x088000, x30, x1, 112, x3)

inst_47:
// rs2_h1_val == 4, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x200feff;  op2val:0x043fff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x200feff, 0x043fff, x30, x1, 120, x3)

inst_48:
// rs2_h1_val == 2, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x02fff6
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x40000000, 0x02fff6, x30, x1, 128, x3)

inst_49:
// rs2_h1_val == 1, rs1_h1_val == -65
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0x010001
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xffbfffff, 0x010001, x30, x1, 136, x3)

inst_50:
// rs2_h1_val == 0, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x001000;  op2val:0x00fffd
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x001000, 0x00fffd, x30, x1, 144, x3)

inst_51:
// rs2_h1_val == -1, rs2_h0_val == -129
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff9;  op2val:0xffffff7f
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x3ffffff9, 0xffffff7f, x30, x1, 152, x3)

inst_52:
// rs2_h0_val == 16384, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000020;  op2val:0x404000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x2000020, 0x404000, x30, x1, 160, x3)

inst_53:
// rs2_h0_val == 4096, rs1_h1_val == 1
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x012000;  op2val:0x7fff1000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x012000, 0x7fff1000, x30, x1, 168, x3)

inst_54:
// rs2_h0_val == 512, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0003;  op2val:0x050200
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xffbf0003, 0x050200, x30, x1, 176, x3)

inst_55:
// rs2_h0_val == 256, rs1_h1_val == 2
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x02fff7;  op2val:0x020100
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x02fff7, 0x020100, x30, x1, 184, x3)

inst_56:
// rs2_h0_val == 128, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x000100;  op2val:0xfff90080
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x000100, 0xfff90080, x30, x1, 192, x3)

inst_57:
// rs2_h0_val == 16, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff7;  op2val:0xfff90010
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfff8fff7, 0xfff90010, x30, x1, 200, x3)

inst_58:
// rs2_h0_val == 8, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x100ffef;  op2val:0x8000008
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x100ffef, 0x8000008, x30, x1, 208, x3)

inst_59:
// rs2_h0_val == 0, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffeff;  op2val:0xfffa0000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x3ffffeff, 0xfffa0000, x30, x1, 216, x3)

inst_60:
// rs2_h0_val == -1, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffefdfff;  op2val:0xc000ffff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xffefdfff, 0xc000ffff, x30, x1, 224, x3)

inst_61:
// rs1_h1_val == -4097, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555;  op2val:0xfeff0800
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xefff5555, 0xfeff0800, x30, x1, 232, x3)

inst_62:
// rs1_h1_val == -9, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70001;  op2val:0x8000400
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfff70001, 0x8000400, x30, x1, 240, x3)

inst_63:
// rs1_h1_val == -3, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff9;  op2val:0x200ffef
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfffdfff9, 0x200ffef, x30, x1, 248, x3)

inst_64:
// rs1_h1_val == -2, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffd;  op2val:0x800ffef
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfffefffd, 0x800ffef, x30, x1, 256, x3)

inst_65:
// rs1_h1_val == 2048, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef;  op2val:0x10fff7
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x800ffef, 0x10fff7, x30, x1, 264, x3)

inst_66:
// rs1_h1_val == 128, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0xc000fbff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x800200, 0xc000fbff, x30, x1, 272, x3)

inst_67:
// rs2_h0_val == -21846, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x008000;  op2val:0x02aaaa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x008000, 0x02aaaa, x30, x1, 280, x3)

inst_68:
// rs1_h1_val == 32, rs2_h0_val == -513
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaa;  op2val:0x08fdff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x20aaaa, 0x08fdff, x30, x1, 288, x3)

inst_69:
// rs1_h1_val == 16, rs2_h0_val == -257, rs1_h0_val == -2049
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff;  op2val:0xfffafeff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x10f7ff, 0xfffafeff, x30, x1, 296, x3)

inst_70:
// rs1_h1_val == 8, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x08fffb;  op2val:0x2001000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x08fffb, 0x2001000, x30, x1, 304, x3)

inst_71:
// rs1_h1_val == 4, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x040010;  op2val:0xdfff0008
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x040010, 0xdfff0008, x30, x1, 312, x3)

inst_72:
// rs2_h0_val == -8193, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0007;  op2val:0x01dfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfeff0007, 0x01dfff, x30, x1, 320, x3)

inst_73:
// rs1_h1_val == -1, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0xbfff0080
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfffffdff, 0xbfff0080, x30, x1, 328, x3)

inst_74:
// rs2_h0_val == -65, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa3fff;  op2val:0x01ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xaaaa3fff, 0x01ffbf, x30, x1, 336, x3)

inst_75:
// rs1_h0_val == -4097, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff;  op2val:0x04ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfbffefff, 0x04ffbf, x30, x1, 344, x3)

inst_76:
// rs2_h0_val == -2049, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbff;  op2val:0xaaaaf7ff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0xfffbfbff, 0xaaaaf7ff, x30, x1, 352, x3)

inst_77:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 32, rs2_h1_val == -32768
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80000020;  op2val:0x8000fff8
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x80000020, 0x8000fff8, x30, x1, 360, x3)

inst_78:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 256, rs1_h0_val == 4
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000004;  op2val:0x40000005
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x1000004, 0x40000005, x30, x1, 368, x3)

inst_79:
// rs2_h1_val == 2048, rs1_h0_val == -21846, rs1_h1_val == 32767
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa;  op2val:0x8000009
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x7fffaaaa, 0x8000009, x30, x1, 376, x3)

inst_80:
// rs2_h1_val == 1024, rs1_h0_val == 256, rs2_h0_val == -16385
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100;  op2val:0x400bfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x00000000, 0x7fff0100, 0x400bfff, x30, x1, 384, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 98*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
