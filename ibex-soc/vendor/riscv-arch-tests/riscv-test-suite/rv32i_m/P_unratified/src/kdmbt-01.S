
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmbt instruction of the RISC-V RV32PZicsr extension for the kdmbt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmbt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x25, rd==x2, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 21845, rs2_h0_val == -1025, rs1_h1_val == -129
// opcode: kdmbt ; op1:x20; op2:x25; dest:x2; op1val:0xff7f8000;  op2val:0x5555fbff
TEST_PKRR_OP(kdmbt, x2, x20, x25, 0x00000000, 0xff7f8000, 0x5555fbff, x20, x15, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x22, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 1024, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -5, rs2_h1_val == 8, rs1_h1_val == 8
// opcode: kdmbt ; op1:x27; op2:x27; dest:x22; op1val:0x08fffb;  op2val:0x080400
TEST_PKRR_OP(kdmbt, x22, x27, x27, 0x00000000, 0x08fffb, 0x080400, x27, x15, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x19, rs2==x26, rd==x19, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmbt ; op1:x19; op2:x26; dest:x19; op1val:0xfff90009;  op2val:0xfffc0004
TEST_PKRR_OP(kdmbt, x19, x19, x26, 0x00000000, 0xfff90009, 0xfffc0004, x19, x15, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h0_val == 0, rs2_h1_val == -2049
// opcode: kdmbt ; op1:x7; op2:x7; dest:x7; op1val:0x20c000;  op2val:0xf7ff0000
TEST_PKRR_OP(kdmbt, x7, x7, x7, 0x00000000, 0x20c000, 0xf7ff0000, x7, x15, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x17, rd==x17, rs1_h0_val == rs2_h0_val, rs1_h0_val == -9, rs1_h1_val == -3, rs2_h0_val == -9
// opcode: kdmbt ; op1:x29; op2:x17; dest:x17; op1val:0xfffdfff7;  op2val:0xfff9fff7
TEST_PKRR_OP(kdmbt, x17, x29, x17, 0x00000000, 0xfffdfff7, 0xfff9fff7, x29, x15, 32, x13)

inst_5:
// rs1==x6, rs2==x14, rd==x10, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 4096
// opcode: kdmbt ; op1:x6; op2:x14; dest:x10; op1val:0xfff60003;  op2val:0x1000fffa
TEST_PKRR_OP(kdmbt, x10, x6, x14, 0x00000000, 0xfff60003, 0x1000fffa, x6, x15, 40, x13)

inst_6:
// rs1==x8, rs2==x30, rd==x20, rs2_h1_val == -21846, rs1_h0_val == -17, rs2_h0_val == -17
// opcode: kdmbt ; op1:x8; op2:x30; dest:x20; op1val:0x3fffffef;  op2val:0xaaaaffef
TEST_PKRR_OP(kdmbt, x20, x8, x30, 0x00000000, 0x3fffffef, 0xaaaaffef, x8, x15, 48, x13)

inst_7:
// rs1==x30, rs2==x31, rd==x12, rs2_h1_val == 32767, rs1_h1_val == 1024, rs2_h0_val == 8192, rs1_h0_val == -4097
// opcode: kdmbt ; op1:x30; op2:x31; dest:x12; op1val:0x400efff;  op2val:0x7fff2000
TEST_PKRR_OP(kdmbt, x12, x30, x31, 0x00000000, 0x400efff, 0x7fff2000, x30, x15, 56, x13)

inst_8:
// rs1==x0, rs2==x28, rd==x8, rs2_h1_val == -16385, rs1_h0_val == -2049, rs2_h0_val == -2049
// opcode: kdmbt ; op1:x0; op2:x28; dest:x8; op1val:0x07f7ff;  op2val:0xbffff7ff
TEST_PKRR_OP(kdmbt, x8, x0, x28, 0x00000000, 0x07f7ff, 0xbffff7ff, x0, x15, 64, x13)

inst_9:
// rs1==x31, rs2==x2, rd==x6, rs2_h1_val == -8193, rs2_h0_val == 256, rs1_h0_val == 8, rs1_h1_val == 256
// opcode: kdmbt ; op1:x31; op2:x2; dest:x6; op1val:0x1000008;  op2val:0xdfff0100
TEST_PKRR_OP(kdmbt, x6, x31, x2, 0x00000000, 0x1000008, 0xdfff0100, x31, x15, 72, x13)

inst_10:
// rs1==x24, rs2==x4, rd==x29, rs2_h1_val == -4097, rs1_h0_val == 32767, rs2_h0_val == 32767, rs1_h1_val == -21846
// opcode: kdmbt ; op1:x24; op2:x4; dest:x29; op1val:0xaaaa7fff;  op2val:0xefff7fff
TEST_PKRR_OP(kdmbt, x29, x24, x4, 0x00000000, 0xaaaa7fff, 0xefff7fff, x24, x15, 80, x13)

inst_11:
// rs1==x14, rs2==x19, rd==x1, rs2_h1_val == -1025, rs2_h0_val == 8
// opcode: kdmbt ; op1:x14; op2:x19; dest:x1; op1val:0x100ffef;  op2val:0xfbff0008
TEST_PKRR_OP(kdmbt, x1, x14, x19, 0x00000000, 0x100ffef, 0xfbff0008, x14, x15, 88, x13)

inst_12:
// rs1==x4, rs2==x24, rd==x31, rs2_h1_val == -513, rs1_h0_val == 256, rs2_h0_val == -129, rs1_h1_val == 21845
// opcode: kdmbt ; op1:x4; op2:x24; dest:x31; op1val:0x55550100;  op2val:0xfdffff7f
TEST_PKRR_OP(kdmbt, x31, x4, x24, 0x00000000, 0x55550100, 0xfdffff7f, x4, x15, 96, x13)

inst_13:
// rs1==x23, rs2==x8, rd==x27, rs2_h1_val == -257, rs1_h1_val == 16384, rs1_h0_val == -65
// opcode: kdmbt ; op1:x23; op2:x8; dest:x27; op1val:0x4000ffbf;  op2val:0xfeff0004
TEST_PKRR_OP(kdmbt, x27, x23, x8, 0x00000000, 0x4000ffbf, 0xfeff0004, x23, x15, 104, x13)

inst_14:
// rs1==x11, rs2==x0, rd==x24, rs2_h1_val == -129, 
// opcode: kdmbt ; op1:x11; op2:x0; dest:x24; op1val:0xfffcfffa;  op2val:0xff7f0009
TEST_PKRR_OP(kdmbt, x24, x11, x0, 0x00000000, 0xfffcfffa, 0xff7f0009, x11, x15, 112, x13)

inst_15:
// rs1==x10, rs2==x3, rd==x9, rs2_h1_val == -65, rs2_h0_val == -513, rs1_h1_val == -2
// opcode: kdmbt ; op1:x10; op2:x3; dest:x9; op1val:0xfffeefff;  op2val:0xffbffdff
TEST_PKRR_OP(kdmbt, x9, x10, x3, 0x00000000, 0xfffeefff, 0xffbffdff, x10, x15, 120, x13)

inst_16:
// rs1==x26, rs2==x1, rd==x5, rs2_h1_val == -33, rs1_h1_val == -4097, rs1_h0_val == -257
// opcode: kdmbt ; op1:x26; op2:x1; dest:x5; op1val:0xeffffeff;  op2val:0xffdf0400
TEST_PKRR_OP(kdmbt, x5, x26, x1, 0x00000000, 0xeffffeff, 0xffdf0400, x26, x15, 128, x13)

inst_17:
// rs1==x2, rs2==x6, rd==x13, rs2_h1_val == -17, rs2_h0_val == -5, rs1_h0_val == -16385, rs1_h1_val == -32768
// opcode: kdmbt ; op1:x2; op2:x6; dest:x13; op1val:0x8000bfff;  op2val:0xffeffffb
TEST_PKRR_OP(kdmbt, x13, x2, x6, 0x00000000, 0x8000bfff, 0xffeffffb, x2, x15, 136, x7)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_18:
// rs1==x25, rs2==x22, rd==x0, rs2_h1_val == -9, 
// opcode: kdmbt ; op1:x25; op2:x22; dest:x0; op1val:0x030100;  op2val:0xfff70006
TEST_PKRR_OP(kdmbt, x0, x25, x22, 0x00000000, 0x030100, 0xfff70006, x25, x2, 0, x7)

inst_19:
// rs1==x3, rs2==x5, rd==x26, rs2_h1_val == -5, rs1_h0_val == 1, rs1_h1_val == 16
// opcode: kdmbt ; op1:x3; op2:x5; dest:x26; op1val:0x100001;  op2val:0xfffb0003
TEST_PKRR_OP(kdmbt, x26, x3, x5, 0x00000000, 0x100001, 0xfffb0003, x3, x2, 8, x7)

inst_20:
// rs1==x5, rs2==x12, rd==x16, rs2_h1_val == -3, rs1_h0_val == 0, rs2_h0_val == -32768, rs1_h1_val == -257
// opcode: kdmbt ; op1:x5; op2:x12; dest:x16; op1val:0xfeff0000;  op2val:0xfffd8000
TEST_PKRR_OP(kdmbt, x16, x5, x12, 0x00000000, 0xfeff0000, 0xfffd8000, x5, x2, 16, x7)

inst_21:
// rs1==x15, rs2==x29, rd==x28, rs2_h1_val == -2, rs1_h0_val == 32, rs2_h0_val == 64
// opcode: kdmbt ; op1:x15; op2:x29; dest:x28; op1val:0x100020;  op2val:0xfffe0040
TEST_PKRR_OP(kdmbt, x28, x15, x29, 0x00000000, 0x100020, 0xfffe0040, x15, x2, 24, x7)

inst_22:
// rs1==x18, rs2==x15, rd==x23, rs2_h1_val == -32768, rs2_h0_val == -8193
// opcode: kdmbt ; op1:x18; op2:x15; dest:x23; op1val:0x07fffb;  op2val:0x8000dfff
TEST_PKRR_OP(kdmbt, x23, x18, x15, 0x00000000, 0x07fffb, 0x8000dfff, x18, x2, 32, x7)

inst_23:
// rs1==x16, rs2==x21, rd==x14, rs2_h1_val == 16384, rs2_h0_val == 128, rs1_h0_val == 2048
// opcode: kdmbt ; op1:x16; op2:x21; dest:x14; op1val:0x200800;  op2val:0x40000080
TEST_PKRR_OP(kdmbt, x14, x16, x21, 0x00000000, 0x200800, 0x40000080, x16, x2, 40, x7)

inst_24:
// rs1==x13, rs2==x11, rd==x30, rs2_h1_val == 8192, rs1_h1_val == -65, rs2_h0_val == -1
// opcode: kdmbt ; op1:x13; op2:x11; dest:x30; op1val:0xffbfffef;  op2val:0x2000ffff
TEST_PKRR_OP(kdmbt, x30, x13, x11, 0x00000000, 0xffbfffef, 0x2000ffff, x13, x2, 48, x7)

inst_25:
// rs1==x1, rs2==x23, rd==x11, rs2_h1_val == 2048, rs1_h0_val == -33
// opcode: kdmbt ; op1:x1; op2:x23; dest:x11; op1val:0xffbfffdf;  op2val:0x8000100
TEST_PKRR_OP(kdmbt, x11, x1, x23, 0x00000000, 0xffbfffdf, 0x8000100, x1, x2, 56, x7)

inst_26:
// rs1==x21, rs2==x13, rd==x18, rs2_h1_val == 1024, 
// opcode: kdmbt ; op1:x21; op2:x13; dest:x18; op1val:0x100fff8;  op2val:0x400ffff
TEST_PKRR_OP(kdmbt, x18, x21, x13, 0x00000000, 0x100fff8, 0x400ffff, x21, x2, 64, x7)

inst_27:
// rs1==x12, rs2==x9, rd==x15, rs2_h1_val == 512, 
// opcode: kdmbt ; op1:x12; op2:x9; dest:x15; op1val:0x3fff3fff;  op2val:0x2000004
TEST_PKRR_OP(kdmbt, x15, x12, x9, 0x00000000, 0x3fff3fff, 0x2000004, x12, x2, 72, x7)

inst_28:
// rs1==x9, rs2==x20, rd==x3, rs2_h1_val == 256, rs1_h1_val == -8193
// opcode: kdmbt ; op1:x9; op2:x20; dest:x3; op1val:0xdfff0009;  op2val:0x1008000
TEST_PKRR_OP(kdmbt, x3, x9, x20, 0x00000000, 0xdfff0009, 0x1008000, x9, x2, 80, x7)

inst_29:
// rs1==x28, rs2==x18, rd==x4, rs2_h1_val == 128, rs1_h0_val == -3
// opcode: kdmbt ; op1:x28; op2:x18; dest:x4; op1val:0x20fffd;  op2val:0x80dfff
TEST_PKRR_OP(kdmbt, x4, x28, x18, 0x00000000, 0x20fffd, 0x80dfff, x28, x2, 88, x7)

inst_30:
// rs1==x17, rs2==x16, rd==x25, rs2_h1_val == 64, 
// opcode: kdmbt ; op1:x17; op2:x16; dest:x25; op1val:0x3fff0001;  op2val:0x40c000
TEST_PKRR_OP(kdmbt, x25, x17, x16, 0x00000000, 0x3fff0001, 0x40c000, x17, x2, 96, x7)

inst_31:
// rs1==x22, rs2==x10, rd==x21, rs1_h0_val == -1025, 
// opcode: kdmbt ; op1:x22; op2:x10; dest:x21; op1val:0x05fbff;  op2val:0xc0008000
TEST_PKRR_OP(kdmbt, x21, x22, x10, 0x00000000, 0x05fbff, 0xc0008000, x22, x2, 104, x7)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == 1
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff;  op2val:0xfff7ff7f
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x01fdff, 0xfff7ff7f, x30, x2, 112, x7)

inst_33:
// rs1_h0_val == -129, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x08ff7f;  op2val:0x200ff7f
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x08ff7f, 0x200ff7f, x30, x2, 120, x7)

inst_34:
// rs1_h0_val == -2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe;  op2val:0xfdff0008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x100fffe, 0xfdff0008, x30, x2, 128, x7)

inst_35:
// rs1_h0_val == 16384, rs1_h1_val == -17
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffef4000;  op2val:0xfdff7fff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xffef4000, 0xfdff7fff, x30, x2, 136, x7)

inst_36:
// rs1_h0_val == 8192, rs1_h1_val == -1025
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000;  op2val:0x55550008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfbff2000, 0x55550008, x30, x2, 144, x7)

inst_37:
// rs1_h0_val == 4096, rs2_h0_val == -4097
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x031000;  op2val:0xdfffefff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x031000, 0xdfffefff, x30, x2, 152, x7)

inst_38:
// rs1_h0_val == 1024, rs1_h1_val == 32767
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0xfdff2000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x7fff0400, 0xfdff2000, x30, x2, 160, x7)

inst_39:
// rs1_h0_val == 512, rs1_h1_val == 4096
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x10000200;  op2val:0x8000fbff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x10000200, 0x8000fbff, x30, x2, 168, x7)

inst_40:
// rs1_h0_val == 128, rs2_h1_val == -1
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0080;  op2val:0xffffc000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfeff0080, 0xffffc000, x30, x2, 176, x7)

inst_41:
// rs1_h0_val == 64, rs1_h1_val == 8192
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20000040;  op2val:0xfeff0000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x20000040, 0xfeff0000, x30, x2, 184, x7)

inst_42:
// rs1_h0_val == 16, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x10000010;  op2val:0xffbffff7
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x10000010, 0xffbffff7, x30, x2, 192, x7)

inst_43:
// rs1_h0_val == 4, rs1_h1_val == -2049
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004;  op2val:0xffff0008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xf7ff0004, 0xffff0008, x30, x2, 200, x7)

inst_44:
// rs1_h0_val == 2, rs2_h0_val == 2
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x050002;  op2val:0x7fff0002
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x050002, 0x7fff0002, x30, x2, 208, x7)

inst_45:
// rs1_h0_val == -1, rs2_h0_val == 32
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0x55550020
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xdfffffff, 0x55550020, x30, x2, 216, x7)

inst_46:
// rs2_h1_val == 32, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff6;  op2val:0x200005
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfff9fff6, 0x200005, x30, x2, 224, x7)

inst_47:
// rs2_h1_val == 16, rs2_h0_val == -65
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff63fff;  op2val:0x10ffbf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfff63fff, 0x10ffbf, x30, x2, 232, x7)

inst_48:
// rs2_h1_val == 4, rs2_h0_val == 21845
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f;  op2val:0x045555
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfbffff7f, 0x045555, x30, x2, 240, x7)

inst_49:
// rs2_h1_val == 2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf;  op2val:0x020007
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfeffffbf, 0x020007, x30, x2, 248, x7)

inst_50:
// rs2_h0_val == -3, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x100100;  op2val:0xfdfffffd
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x100100, 0xfdfffffd, x30, x2, 256, x7)

inst_51:
// rs2_h0_val == -2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x400fff7;  op2val:0x20fffe
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x400fff7, 0x20fffe, x30, x2, 264, x7)

inst_52:
// rs2_h0_val == 16384, rs2_h1_val == 0
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0000;  op2val:0x004000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xffbf0000, 0x004000, x30, x2, 272, x7)

inst_53:
// rs2_h0_val == 4096, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0040;  op2val:0x55551000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfbff0040, 0x55551000, x30, x2, 280, x7)

inst_54:
// rs2_h0_val == 2048, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x070004;  op2val:0xfff60800
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x070004, 0xfff60800, x30, x2, 288, x7)

inst_55:
// rs2_h0_val == 512, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0008;  op2val:0xfffa0200
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfffd0008, 0xfffa0200, x30, x2, 296, x7)

inst_56:
// rs2_h0_val == 16, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x10000010;  op2val:0x080010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x10000010, 0x080010, x30, x2, 304, x7)

inst_57:
// rs2_h0_val == 1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x080003;  op2val:0xaaaa0001
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x080003, 0xaaaa0001, x30, x2, 312, x7)

inst_58:
// rs1_h1_val == -16385, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7;  op2val:0xbfffffbf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xbffffff7, 0xbfffffbf, x30, x2, 320, x7)

inst_59:
// rs1_h1_val == -513, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffa;  op2val:0xfff70040
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfdfffffa, 0xfff70040, x30, x2, 328, x7)

inst_60:
// rs1_h1_val == -33, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffef;  op2val:0xaaaa0040
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xffdfffef, 0xaaaa0040, x30, x2, 336, x7)

inst_61:
// rs1_h1_val == -9, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020;  op2val:0x40000100
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfff70020, 0x40000100, x30, x2, 344, x7)

inst_62:
// rs1_h1_val == -5, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbff7f;  op2val:0x08fff7
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfffbff7f, 0x08fff7, x30, x2, 352, x7)

inst_63:
// rs2_h0_val == -257, rs1_h1_val == 2
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x020040;  op2val:0x8000feff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x020040, 0x8000feff, x30, x2, 360, x7)

inst_64:
// rs1_h1_val == 2048, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x8000003;  op2val:0x2000002
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x8000003, 0x2000002, x30, x2, 368, x7)

inst_65:
// rs1_h1_val == 512, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x200ffff;  op2val:0x02fffc
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x200ffff, 0x02fffc, x30, x2, 376, x7)

inst_66:
// rs2_h1_val == 1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x10000004;  op2val:0x01ff7f
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x10000004, 0x01ff7f, x30, x2, 384, x7)

inst_67:
// rs1_h1_val == 128, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x80efff;  op2val:0xfffcff7f
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x80efff, 0xfffcff7f, x30, x2, 392, x7)

inst_68:
// rs1_h1_val == 64, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x40ffff;  op2val:0xffdf0020
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x40ffff, 0xffdf0020, x30, x2, 400, x7)

inst_69:
// rs2_h0_val == -21846, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffaefff;  op2val:0xff7faaaa
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfffaefff, 0xff7faaaa, x30, x2, 408, x7)

inst_70:
// rs2_h0_val == -16385, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x010001;  op2val:0xdfffbfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x010001, 0xdfffbfff, x30, x2, 416, x7)

inst_71:
// rs2_h0_val == -33, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x010007;  op2val:0x200ffdf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x010007, 0x200ffdf, x30, x2, 424, x7)

inst_72:
// rs1_h1_val == 4, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0xfff8c000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x04ffef, 0xfff8c000, x30, x2, 432, x7)

inst_73:
// rs1_h1_val == 0, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x00fff9;  op2val:0x20f7ff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x00fff9, 0x20f7ff, x30, x2, 440, x7)

inst_74:
// rs1_h1_val == -1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0x02dfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xfffffff6, 0x02dfff, x30, x2, 448, x7)

inst_75:
// rs1_h0_val == -21846, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa;  op2val:0x020010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x7fffaaaa, 0x020010, x30, x2, 456, x7)

inst_76:
// rs1_h0_val == 21845, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf5555;  op2val:0xfffa0800
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0xffdf5555, 0xfffa0800, x30, x2, 464, x7)

inst_77:
// rs1_h0_val == -8193, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff;  op2val:0xfff90010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x4000dfff, 0xfff90010, x30, x2, 472, x7)

inst_78:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 32, rs2_h0_val == 0, rs2_h1_val == -2049
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20c000;  op2val:0xf7ff0000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x20c000, 0xf7ff0000, x30, x2, 480, x7)

inst_79:
// rs2_h1_val == -16385, rs1_h0_val == -2049, rs2_h0_val == -2049
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x07f7ff;  op2val:0xbffff7ff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x00000000, 0x07f7ff, 0xbffff7ff, x30, x2, 488, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 124*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
