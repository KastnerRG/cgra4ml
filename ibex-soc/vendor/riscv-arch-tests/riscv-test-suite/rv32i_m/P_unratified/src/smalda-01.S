
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalda instruction of the RISC-V RV32PZicsr extension for the smalda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x18, rd==x10, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -129
// opcode: smalda ; op1:x2; op2:x18; dest:x10; op1val:0xfff98000;  op2val:0xff7f3fff
TEST_P64_PNN_OP(smalda, x10, x11, x2, x18, 0x00000000, 0, 0xfff98000, 0xff7f3fff, x12, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x20, rs1_h1_val == rs2_h1_val, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -129, rs2_h0_val == 8
// opcode: smalda ; op1:x5; op2:x5; dest:x20; op1val:0xff7f0004;  op2val:0xff7f0008
TEST_P64_PNN_OP(smalda, x20, x21, x5, x5, 0x00000000, 0, 0xff7f0004, 0xff7f0008, x12, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x14, rs2==x28, rd==x14, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -16385, rs2_h1_val == 2
// opcode: smalda ; op1:x14; op2:x28; dest:x14; op1val:0xc0007fff;  op2val:0x0002bfff
TEST_P64_PNN_OP(smalda, x14, x15, x14, x28, 0x00000000, 0, 0xc0007fff, 0x0002bfff, x12, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -4097, rs1_h1_val == 2048, rs2_h0_val == -2, rs1_h0_val == 0
// opcode: smalda ; op1:x4; op2:x4; dest:x4; op1val:0x08000000;  op2val:0xeffffffe
TEST_P64_PNN_OP(smalda, x4, x5, x4, x4, 0x00000000, 0, 0x08000000, 0xeffffffe, x12, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x22, rd==x22, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -129, rs2_h1_val == 4096, rs1_h1_val == 4096
// opcode: smalda ; op1:x26; op2:x22; dest:x22; op1val:0x1000ff7f;  op2val:0x1000fff8
TEST_P64_PNN_OP(smalda, x22, x23, x26, x22, 0x00000000, 0, 0x1000ff7f, 0x1000fff8, x12, 32, x13)

inst_5:
// rs1==x1, rs2==x27, rd==x2, rs1_h0_val == rs2_h0_val, rs2_h0_val == 1024, rs1_h1_val == -1025, rs2_h1_val == -257, rs1_h0_val == 1024
// opcode: smalda ; op1:x1; op2:x27; dest:x2; op1val:0xfbff0400;  op2val:0xfeff0400
TEST_P64_PNN_OP(smalda, x2, x3, x1, x27, 0x00000000, 0, 0xfbff0400, 0xfeff0400, x12, 40, x13)

inst_6:
// rs1==x18, rs2==x9, rd==x26, rs2_h1_val == -21846, rs1_h1_val == 21845
// opcode: smalda ; op1:x18; op2:x9; dest:x26; op1val:0x55558000;  op2val:0xaaaafff9
TEST_P64_PNN_OP(smalda, x26, x27, x18, x9, 0x00000000, 0, 0x55558000, 0xaaaafff9, x12, 48, x13)

inst_7:
// rs1==x0, rs2==x19, rd==x30, rs2_h1_val == 21845, rs1_h1_val == 8192, rs2_h0_val == -257, rs1_h0_val == 8192
// opcode: smalda ; op1:x0; op2:x19; dest:x30; op1val:0x20002000;  op2val:0x5555feff
TEST_P64_PNN_OP(smalda, x30, x31, x0, x19, 0x00000000, 0, 0x20002000, 0x5555feff, x12, 56, x13)

inst_8:
// rs1==x31, rs2==x26, rd==x18, rs2_h1_val == 32767, rs2_h0_val == 512
// opcode: smalda ; op1:x31; op2:x26; dest:x18; op1val:0x0800ff7f;  op2val:0x7fff0200
TEST_P64_PNN_OP(smalda, x18, x19, x31, x26, 0x00000000, 0, 0x0800ff7f, 0x7fff0200, x12, 64, x13)

inst_9:
// rs1==x21, rs2==x3, rd==x6, rs2_h1_val == -16385, rs1_h0_val == 4096, rs1_h1_val == 0
// opcode: smalda ; op1:x21; op2:x3; dest:x6; op1val:0x00001000;  op2val:0xbfff0400
TEST_P64_PNN_OP(smalda, x6, x7, x21, x3, 0x00000000, 0, 0x00001000, 0xbfff0400, x12, 72, x13)

inst_10:
// rs1==x8, rs2==x29, rd==x16, rs2_h1_val == -8193, rs1_h1_val == -65, rs2_h0_val == -3
// opcode: smalda ; op1:x8; op2:x29; dest:x16; op1val:0xffbfff7f;  op2val:0xdffffffd
TEST_P64_PNN_OP(smalda, x16, x17, x8, x29, 0x00000000, 0, 0xffbfff7f, 0xdffffffd, x12, 80, x13)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_11:
// rs1==x29, rs2==x15, rd==x24, rs2_h1_val == -2049, rs1_h1_val == -4097, rs2_h0_val == 16384, rs1_h0_val == 128
// opcode: smalda ; op1:x29; op2:x15; dest:x24; op1val:0xefff0080;  op2val:0xf7ff4000
TEST_P64_PNN_OP(smalda, x24, x25, x29, x15, 0x00000000, 0, 0xefff0080, 0xf7ff4000, x4, 0, x5)

inst_12:
// rs1==x30, rs2==x8, rd==x12, rs2_h1_val == -1025, rs2_h0_val == -5, rs1_h0_val == -1, rs1_h1_val == 32767
// opcode: smalda ; op1:x30; op2:x8; dest:x12; op1val:0x7fffffff;  op2val:0xfbfffffb
TEST_P64_PNN_OP(smalda, x12, x13, x30, x8, 0x00000000, 0, 0x7fffffff, 0xfbfffffb, x4, 8, x5)

inst_13:
// rs1==x28, rs2==x23, rd==x8, rs2_h1_val == -513, rs1_h0_val == 2, rs2_h0_val == -17
// opcode: smalda ; op1:x28; op2:x23; dest:x8; op1val:0xfffa0002;  op2val:0xfdffffef
TEST_P64_PNN_OP(smalda, x8, x9, x28, x23, 0x00000000, 0, 0xfffa0002, 0xfdffffef, x4, 16, x5)

inst_14:
// rs1==x12, rs2==x25, rd==x28, rs2_h1_val == -65, rs1_h0_val == -16385, rs2_h0_val == -1
// opcode: smalda ; op1:x12; op2:x25; dest:x28; op1val:0x0009bfff;  op2val:0xffbfffff
TEST_P64_PNN_OP(smalda, x28, x29, x12, x25, 0x00000000, 0, 0x0009bfff, 0xffbfffff, x4, 24, x5)

inst_15:
// rs1==x11, rs2==x6, rs2_h1_val == -33, rs1_h0_val == -33
// opcode: smalda ; op1:x11; op2:x6; dest:x30; op1val:0x7fffffdf;  op2val:0xffdf0007
TEST_P64_PNN_OP(smalda, x30, x31, x11, x6, 0x00000000, 0, 0x7fffffdf, 0xffdf0007, x4, 32, x5)

inst_16:
// rs1==x23, rs2==x21, rs2_h1_val == -17, rs1_h0_val == -65
// opcode: smalda ; op1:x23; op2:x21; dest:x10; op1val:0x0007ffbf;  op2val:0xffef0009
TEST_P64_PNN_OP(smalda, x10, x11, x23, x21, 0x00000000, 0, 0x0007ffbf, 0xffef0009, x4, 40, x5)

inst_17:
// rs1==x20, rs2==x30, rs2_h1_val == -9, rs2_h0_val == -4097
// opcode: smalda ; op1:x20; op2:x30; dest:x16; op1val:0xfff60002;  op2val:0xfff7efff
TEST_P64_PNN_OP(smalda, x16, x17, x20, x30, 0x00000000, 0, 0xfff60002, 0xfff7efff, x4, 48, x5)

inst_18:
// rs1==x3, rs2==x20, rs2_h1_val == -5, rs1_h1_val == 16384
// opcode: smalda ; op1:x3; op2:x20; dest:x18; op1val:0x4000c000;  op2val:0xfffbfff6
TEST_P64_PNN_OP(smalda, x18, x19, x3, x20, 0x00000000, 0, 0x4000c000, 0xfffbfff6, x4, 56, x5)

inst_19:
// rs1==x6, rs2==x11, rs2_h1_val == -3, rs1_h0_val == -3, rs1_h1_val == -17
// opcode: smalda ; op1:x6; op2:x11; dest:x10; op1val:0xffeffffd;  op2val:0xfffd4000
TEST_P64_PNN_OP(smalda, x10, x11, x6, x11, 0x00000000, 0, 0xffeffffd, 0xfffd4000, x4, 64, x5)

inst_20:
// rs1==x17, rs2==x1, rs2_h1_val == -2, rs2_h0_val == 16
// opcode: smalda ; op1:x17; op2:x1; dest:x2; op1val:0xffef7fff;  op2val:0xfffe0010
TEST_P64_PNN_OP(smalda, x2, x3, x17, x1, 0x00000000, 0, 0xffef7fff, 0xfffe0010, x4, 72, x5)

inst_21:
// rs1==x22, rs2==x16, rs2_h1_val == -32768, rs1_h1_val == -8193
// opcode: smalda ; op1:x22; op2:x16; dest:x10; op1val:0xdfff0000;  op2val:0x80000006
TEST_P64_PNN_OP(smalda, x10, x11, x22, x16, 0x00000000, 0, 0xdfff0000, 0x80000006, x4, 80, x5)

inst_22:
// rs1==x16, rs2==x13, rs2_h1_val == 16384, rs1_h0_val == -1025, rs2_h0_val == 8192
// opcode: smalda ; op1:x16; op2:x13; dest:x10; op1val:0x0800fbff;  op2val:0x40002000
TEST_P64_PNN_OP(smalda, x10, x11, x16, x13, 0x00000000, 0, 0x0800fbff, 0x40002000, x4, 88, x5)

inst_23:
// rs1==x25, rs2==x10, rs2_h1_val == 8192, 
// opcode: smalda ; op1:x25; op2:x10; dest:x30; op1val:0x1000fffc;  op2val:0x2000efff
TEST_P64_PNN_OP(smalda, x30, x31, x25, x10, 0x00000000, 0, 0x1000fffc, 0x2000efff, x4, 96, x5)

inst_24:
// rs1==x7, rs2==x0, rs2_h1_val == 2048, rs2_h0_val == -9
// opcode: smalda ; op1:x7; op2:x0; dest:x16; op1val:0x00052000;  op2val:0x0800fff7
TEST_P64_PNN_OP(smalda, x16, x17, x7, x0, 0x00000000, 0, 0x00052000, 0x0800fff7, x4, 104, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_25:
// rs1==x15, rs2==x17, rs2_h1_val == 1024, 
// opcode: smalda ; op1:x15; op2:x17; dest:x28; op1val:0xfff80000;  op2val:0x04000200
TEST_P64_PNN_OP(smalda, x28, x29, x15, x17, 0x00000000, 0, 0xfff80000, 0x04000200, x1, 0, x5)

inst_26:
// rs1==x13, rs2==x2, rs2_h1_val == 512, rs1_h1_val == 512
// opcode: smalda ; op1:x13; op2:x2; dest:x26; op1val:0x02001000;  op2val:0x0200ffef
TEST_P64_PNN_OP(smalda, x26, x27, x13, x2, 0x00000000, 0, 0x02001000, 0x0200ffef, x1, 8, x5)

inst_27:
// rs1==x10, rs2==x31, rs2_h1_val == 256, 
// opcode: smalda ; op1:x10; op2:x31; dest:x14; op1val:0xfbffbfff;  op2val:0x0100ffef
TEST_P64_PNN_OP(smalda, x14, x15, x10, x31, 0x00000000, 0, 0xfbffbfff, 0x0100ffef, x1, 16, x4)

inst_28:
// rs1==x19, rs2==x24, rs2_h1_val == 128, 
// opcode: smalda ; op1:x19; op2:x24; dest:x2; op1val:0x0200ff7f;  op2val:0x0080fffb
TEST_P64_PNN_OP(smalda, x2, x3, x19, x24, 0x00000000, 0, 0x0200ff7f, 0x0080fffb, x1, 24, x4)

inst_29:
// rs1==x27, rs2==x7, rs2_h1_val == 64, rs2_h0_val == -21846, rs1_h0_val == 21845
// opcode: smalda ; op1:x27; op2:x7; dest:x24; op1val:0x08005555;  op2val:0x0040aaaa
TEST_P64_PNN_OP(smalda, x24, x25, x27, x7, 0x00000000, 0, 0x08005555, 0x0040aaaa, x1, 32, x4)

inst_30:
// rs1==x24, rs2==x14, rs2_h1_val == 32, 
// opcode: smalda ; op1:x24; op2:x14; dest:x2; op1val:0xdfff5555;  op2val:0x00200008
TEST_P64_PNN_OP(smalda, x2, x3, x24, x14, 0x00000000, 0, 0xdfff5555, 0x00200008, x1, 40, x4)

inst_31:
// rs1==x9, rs2==x12, rs2_h1_val == 16, rs1_h0_val == 512
// opcode: smalda ; op1:x9; op2:x12; dest:x28; op1val:0x20000200;  op2val:0x00100006
TEST_P64_PNN_OP(smalda, x28, x29, x9, x12, 0x00000000, 0, 0x20000200, 0x00100006, x1, 48, x4)

inst_32:
// rs2_h1_val == 8, rs1_h1_val == 16, rs1_h0_val == 16384, rs2_h0_val == -65
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00104000;  op2val:0x0008ffbf
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00104000, 0x0008ffbf, x1, 56, x4)

inst_33:
// rs2_h1_val == 4, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x2000c000;  op2val:0x0004fffc
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x2000c000, 0x0004fffc, x1, 64, x4)

inst_34:
// rs1_h0_val == -513, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0010fdff;  op2val:0x0080fffb
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0010fdff, 0x0080fffb, x1, 72, x4)

inst_35:
// rs1_h0_val == -257, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0200feff;  op2val:0x00100010
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0200feff, 0x00100010, x1, 80, x4)

inst_36:
// rs1_h0_val == -17, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0800ffef;  op2val:0xfeffbfff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0800ffef, 0xfeffbfff, x1, 88, x4)

inst_37:
// rs1_h0_val == -9, rs1_h1_val == 1
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0001fff7;  op2val:0x4000fffb
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0001fff7, 0x4000fffb, x1, 96, x4)

inst_38:
// rs1_h0_val == -5, rs2_h0_val == 4
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfff9fffb;  op2val:0xc0000004
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfff9fffb, 0xc0000004, x1, 104, x4)

inst_39:
// rs1_h0_val == -2, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffcfffe;  op2val:0xfffafff7
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffcfffe, 0xfffafff7, x1, 112, x4)

inst_40:
// rs1_h0_val == 2048, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0800;  op2val:0x00074000
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0800, 0x00074000, x1, 120, x4)

inst_41:
// rs1_h0_val == 256, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00090100;  op2val:0x7ffffffd
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00090100, 0x7ffffffd, x1, 128, x4)

inst_42:
// rs1_h0_val == 64, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00050040;  op2val:0xefff0004
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00050040, 0xefff0004, x1, 136, x4)

inst_43:
// rs1_h0_val == 32, rs1_h1_val == -5
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0020;  op2val:0xff7fefff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0020, 0xff7fefff, x1, 144, x4)

inst_44:
// rs1_h0_val == 16, rs2_h0_val == 21845
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00090010;  op2val:0xfff75555
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00090010, 0xfff75555, x1, 152, x4)

inst_45:
// rs1_h0_val == 8, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffef0008;  op2val:0x0400feff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffef0008, 0x0400feff, x1, 160, x4)

inst_46:
// rs1_h0_val == 1, rs1_h1_val == 256, rs2_h0_val == 4096
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x01000001;  op2val:0x00101000
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x01000001, 0x00101000, x1, 168, x4)

inst_47:
// rs2_h1_val == 1, rs1_h1_val == 128
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0080fff7;  op2val:0x00013fff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0080fff7, 0x00013fff, x1, 176, x4)

inst_48:
// rs2_h1_val == 0, rs2_h0_val == -129
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffc0001;  op2val:0x0000ff7f
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffc0001, 0x0000ff7f, x1, 184, x4)

inst_49:
// rs2_h1_val == -1, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00100080;  op2val:0xfffffff9
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00100080, 0xfffffff9, x1, 192, x4)

inst_50:
// rs2_h0_val == 32767, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xdfff0007;  op2val:0x40007fff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xdfff0007, 0x40007fff, x1, 200, x4)

inst_51:
// rs2_h0_val == -8193, rs1_h1_val == -21846
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xaaaafdff;  op2val:0x0008dfff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xaaaafdff, 0x0008dfff, x1, 208, x4)

inst_52:
// rs2_h0_val == -2049, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x7ffffdff;  op2val:0x1000f7ff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x7ffffdff, 0x1000f7ff, x1, 216, x4)

inst_53:
// rs2_h0_val == -1025, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0007fffa;  op2val:0xf7fffbff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0007fffa, 0xf7fffbff, x1, 224, x4)

inst_54:
// rs2_h0_val == -32768, rs1_h1_val == 32
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00208000;  op2val:0x02008000
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00208000, 0x02008000, x1, 232, x4)

inst_55:
// rs2_h0_val == 2048, rs1_h1_val == 4
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0004ffff;  op2val:0xfbff0800
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0004ffff, 0xfbff0800, x1, 240, x4)

inst_56:
// rs2_h0_val == 256, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffbf8000;  op2val:0x08000100
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffbf8000, 0x08000100, x1, 248, x4)

inst_57:
// rs2_h0_val == 128, rs1_h1_val == -16385
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xbfff3fff;  op2val:0xefff0080
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xbfff3fff, 0xefff0080, x1, 256, x4)

inst_58:
// rs2_h0_val == 64, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xdffffff9;  op2val:0xfdff0040
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xdffffff9, 0xfdff0040, x1, 264, x4)

inst_59:
// rs2_h0_val == 32, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00073fff;  op2val:0xefff0020
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00073fff, 0xefff0020, x1, 272, x4)

inst_60:
// rs2_h0_val == 2, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00040002;  op2val:0x08000002
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00040002, 0x08000002, x1, 280, x4)

inst_61:
// rs2_h0_val == 1, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffeffbff;  op2val:0x55550001
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffeffbff, 0x55550001, x1, 288, x4)

inst_62:
// rs2_h0_val == 0, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffa0000;  op2val:0x00080000
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffa0000, 0x00080000, x1, 296, x4)

inst_63:
// rs1_h1_val == -2049, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xf7fffdff;  op2val:0x00030010
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xf7fffdff, 0x00030010, x1, 304, x4)

inst_64:
// rs1_h1_val == -513, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0007;  op2val:0xff7faaaa
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0007, 0xff7faaaa, x1, 312, x4)

inst_65:
// rs1_h1_val == -257, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfeffffff;  op2val:0x10000001
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfeffffff, 0x10000001, x1, 320, x4)

inst_66:
// rs1_h1_val == -33, rs2_h0_val == -513
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffdf1000;  op2val:0x0040fdff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffdf1000, 0x0040fdff, x1, 328, x4)

inst_67:
// rs1_h1_val == -9, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfff7bfff;  op2val:0x0009dfff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfff7bfff, 0x0009dfff, x1, 336, x4)

inst_68:
// rs1_h1_val == -3, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffd0040;  op2val:0xffbffdff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffd0040, 0xffbffdff, x1, 344, x4)

inst_69:
// rs1_h1_val == -2, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xfffe0800;  op2val:0x20000200
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xfffe0800, 0x20000200, x1, 352, x4)

inst_70:
// rs1_h1_val == -32768, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x80000004;  op2val:0xfffbffbf
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x80000004, 0xfffbffbf, x1, 360, x4)

inst_71:
// rs1_h1_val == 1024, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0400fffb;  op2val:0x0080dfff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0400fffb, 0x0080dfff, x1, 368, x4)

inst_72:
// rs1_h1_val == 64, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00400010;  op2val:0xfff80040
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00400010, 0xfff80040, x1, 376, x4)

inst_73:
// rs1_h1_val == 8, rs1_h0_val == -8193
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0008dfff;  op2val:0xfffafbff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0008dfff, 0xfffafbff, x1, 384, x4)

inst_74:
// rs1_h1_val == 2, rs1_h0_val == -4097
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x0002efff;  op2val:0xefff0002
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x0002efff, 0xefff0002, x1, 392, x4)

inst_75:
// rs1_h1_val == -1, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xffff0009;  op2val:0x7ffffeff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xffff0009, 0x7ffffeff, x1, 400, x4)

inst_76:
// rs1_h0_val == -21846, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x8000aaaa;  op2val:0x00802000
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x8000aaaa, 0x00802000, x1, 408, x4)

inst_77:
// rs2_h0_val == -33, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x00060003;  op2val:0x0020ffdf
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x00060003, 0x0020ffdf, x1, 416, x4)

inst_78:
// rs1_h0_val == -2049, 
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x7ffff7ff;  op2val:0xfffb0001
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x7ffff7ff, 0xfffb0001, x1, 424, x4)

inst_79:
// rs1_h1_val == rs2_h1_val, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -129, rs2_h0_val == 8
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0xff7f0004;  op2val:0xff7f0008
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0xff7f0004, 0xff7f0008, x1, 432, x4)

inst_80:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -4097, rs1_h1_val == 2048, rs2_h0_val == -2, rs1_h0_val == 0
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x08000000;  op2val:0xeffffffe
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x08000000, 0xeffffffe, x1, 440, x4)

inst_81:
// rs2_h1_val == 21845, rs1_h1_val == 8192, rs2_h0_val == -257, rs1_h0_val == 8192
// opcode: smalda ; op1:x31; op2:x29; dest:x30; op1val:0x20002000;  op2val:0x5555feff
TEST_P64_PNN_OP(smalda, x30, x31, x31, x29, 0x00000000, 0, 0x20002000, 0x5555feff, x1, 448, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 114*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
