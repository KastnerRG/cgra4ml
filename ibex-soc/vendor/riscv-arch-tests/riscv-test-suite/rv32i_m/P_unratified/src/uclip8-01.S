
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uclip8 instruction of the RISC-V RV32PZicsr extension for the uclip8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uclip8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 != rd, rs1==x9, rd==x3, rs1_b0_val == 0, imm_val == 6, rs1_b2_val == 253, rs1_b3_val == 8
// opcode: uclip8 ; op1:x9; dest:x3; op1val:0x8fd0500;  immval:0x6
TEST_PKIMM_OP( uclip8, x3, x9, 0x00000000, 0x8fd0500, 0x6, x9, x6, 0, x7)

inst_1:
// rs1 == rd, rs1==x24, rd==x24, imm_val == 7, rs1_b0_val == 8, rs1_b3_val == 128
// opcode: uclip8 ; op1:x24; dest:x24; op1val:0x80090c08;  immval:0x7
TEST_PKIMM_OP( uclip8, x24, x24, 0x00000000, 0x80090c08, 0x7, x24, x6, 8, x7)

inst_2:
// rs1==x31, rd==x13, imm_val == 5, rs1_b1_val == 170, rs1_b0_val == 255
// opcode: uclip8 ; op1:x31; dest:x13; op1val:0x512aaff;  immval:0x5
TEST_PKIMM_OP( uclip8, x13, x31, 0x00000000, 0x512aaff, 0x5, x31, x6, 16, x7)

inst_3:
// rs1==x29, rd==x1, imm_val == 4, rs1_b2_val == 32, rs1_b3_val == 223
// opcode: uclip8 ; op1:x29; dest:x1; op1val:0xdf200f0a;  immval:0x4
TEST_PKIMM_OP( uclip8, x1, x29, 0x00000000, 0xdf200f0a, 0x4, x29, x6, 24, x7)

inst_4:
// rs1==x5, rd==x14, imm_val == 3, rs1_b1_val == 64, rs1_b0_val == 4
// opcode: uclip8 ; op1:x5; dest:x14; op1val:0x30a4004;  immval:0x3
TEST_PKIMM_OP( uclip8, x14, x5, 0x00000000, 0x30a4004, 0x3, x5, x6, 32, x7)

inst_5:
// rs1==x21, rd==x17, imm_val == 2, rs1_b1_val == 254, rs1_b2_val == 170, rs1_b3_val == 239
// opcode: uclip8 ; op1:x21; dest:x17; op1val:0xefaafe04;  immval:0x2
TEST_PKIMM_OP( uclip8, x17, x21, 0x00000000, 0xefaafe04, 0x2, x21, x6, 40, x7)

inst_6:
// rs1==x1, rd==x15, imm_val == 1, 
// opcode: uclip8 ; op1:x1; dest:x15; op1val:0x7121206;  immval:0x1
TEST_PKIMM_OP( uclip8, x15, x1, 0x00000000, 0x7121206, 0x1, x1, x6, 48, x7)

inst_7:
// rs1==x10, rd==x26, imm_val == 0, rs1_b2_val == 0, rs1_b3_val == 127, rs1_b0_val == 254, rs1_b1_val == 8
// opcode: uclip8 ; op1:x10; dest:x26; op1val:0x7f0008fe;  immval:0x0
TEST_PKIMM_OP( uclip8, x26, x10, 0x00000000, 0x7f0008fe, 0x0, x10, x6, 56, x7)

inst_8:
// rs1==x14, rd==x27, rs1_b3_val == 170, 
// opcode: uclip8 ; op1:x14; dest:x27; op1val:0xaa1103fe;  immval:0x0
TEST_PKIMM_OP( uclip8, x27, x14, 0x00000000, 0xaa1103fe, 0x0, x14, x6, 64, x7)

inst_9:
// rs1==x12, rd==x30, rs1_b3_val == 85, rs1_b0_val == 16
// opcode: uclip8 ; op1:x12; dest:x30; op1val:0x55050b10;  immval:0x7
TEST_PKIMM_OP( uclip8, x30, x12, 0x00000000, 0x55050b10, 0x7, x12, x6, 72, x7)

inst_10:
// rs1==x3, rd==x28, rs1_b3_val == 191, rs1_b1_val == 2, rs1_b2_val == 85
// opcode: uclip8 ; op1:x3; dest:x28; op1val:0xbf550209;  immval:0x4
TEST_PKIMM_OP( uclip8, x28, x3, 0x00000000, 0xbf550209, 0x4, x3, x6, 80, x7)

inst_11:
// rs1==x4, rd==x2, rs1_b3_val == 247, rs1_b0_val == 2, rs1_b2_val == 1
// opcode: uclip8 ; op1:x4; dest:x2; op1val:0xf7010802;  immval:0x2
TEST_PKIMM_OP( uclip8, x2, x4, 0x00000000, 0xf7010802, 0x2, x4, x6, 88, x7)

inst_12:
// rs1==x11, rd==x18, rs1_b3_val == 251, rs1_b0_val == 191, rs1_b2_val == 2
// opcode: uclip8 ; op1:x11; dest:x18; op1val:0xfb02aabf;  immval:0x0
TEST_PKIMM_OP( uclip8, x18, x11, 0x00000000, 0xfb02aabf, 0x0, x11, x6, 96, x7)

inst_13:
// rs1==x19, rd==x22, rs1_b3_val == 253, 
// opcode: uclip8 ; op1:x19; dest:x22; op1val:0xfd050a09;  immval:0x2
TEST_PKIMM_OP( uclip8, x22, x19, 0x00000000, 0xfd050a09, 0x2, x19, x6, 104, x7)

inst_14:
// rs1==x16, rd==x8, rs1_b3_val == 254, rs1_b2_val == 251
// opcode: uclip8 ; op1:x16; dest:x8; op1val:0xfefb0c0a;  immval:0x2
TEST_PKIMM_OP( uclip8, x8, x16, 0x00000000, 0xfefb0c0a, 0x2, x16, x6, 112, x7)

inst_15:
// rs1==x20, rd==x25, rs1_b3_val == 64, rs1_b1_val == 251
// opcode: uclip8 ; op1:x20; dest:x25; op1val:0x400cfb00;  immval:0x2
TEST_PKIMM_OP( uclip8, x25, x20, 0x00000000, 0x400cfb00, 0x2, x20, x6, 120, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x8, rd==x29, rs1_b3_val == 32, rs1_b2_val == 64
// opcode: uclip8 ; op1:x8; dest:x29; op1val:0x20400903;  immval:0x0
TEST_PKIMM_OP( uclip8, x29, x8, 0x00000000, 0x20400903, 0x0, x8, x1, 0, x3)

inst_17:
// rs1==x30, rd==x16, rs1_b3_val == 16, rs1_b1_val == 127, rs1_b0_val == 1
// opcode: uclip8 ; op1:x30; dest:x16; op1val:0x100a7f01;  immval:0x1
TEST_PKIMM_OP( uclip8, x16, x30, 0x00000000, 0x100a7f01, 0x1, x30, x1, 8, x3)

inst_18:
// rs1==x17, rd==x21, rs1_b3_val == 4, rs1_b0_val == 239
// opcode: uclip8 ; op1:x17; dest:x21; op1val:0x40309ef;  immval:0x5
TEST_PKIMM_OP( uclip8, x21, x17, 0x00000000, 0x40309ef, 0x5, x17, x1, 16, x3)

inst_19:
// rs1==x18, rd==x4, rs1_b3_val == 2, rs1_b2_val == 8
// opcode: uclip8 ; op1:x18; dest:x4; op1val:0x208fe04;  immval:0x1
TEST_PKIMM_OP( uclip8, x4, x18, 0x00000000, 0x208fe04, 0x1, x18, x1, 24, x3)

inst_20:
// rs1==x2, rd==x5, rs1_b3_val == 1, rs1_b1_val == 255
// opcode: uclip8 ; op1:x2; dest:x5; op1val:0x109ff0a;  immval:0x4
TEST_PKIMM_OP( uclip8, x5, x2, 0x00000000, 0x109ff0a, 0x4, x2, x1, 32, x3)

inst_21:
// rs1==x0, rd==x9, rs1_b3_val == 255, 
// opcode: uclip8 ; op1:x0; dest:x9; op1val:0xff0c0b07;  immval:0x0
TEST_PKIMM_OP( uclip8, x9, x0, 0x00000000, 0xff0c0b07, 0x0, x0, x1, 40, x3)

inst_22:
// rs1==x6, rd==x12, rs1_b3_val == 0, rs1_b1_val == 32, rs1_b2_val == 255
// opcode: uclip8 ; op1:x6; dest:x12; op1val:0xff200c;  immval:0x3
TEST_PKIMM_OP( uclip8, x12, x6, 0x00000000, 0xff200c, 0x3, x6, x1, 48, x3)

inst_23:
// rs1==x27, rd==x0, rs1_b2_val == 127, rs1_b1_val == 4
// opcode: uclip8 ; op1:x27; dest:x0; op1val:0x17f04fe;  immval:0x3
TEST_PKIMM_OP( uclip8, x0, x27, 0x00000000, 0x17f04fe, 0x3, x27, x1, 56, x3)

inst_24:
// rs1==x22, rd==x6, rs1_b1_val == 1, 
// opcode: uclip8 ; op1:x22; dest:x6; op1val:0x20a010f;  immval:0x6
TEST_PKIMM_OP( uclip8, x6, x22, 0x00000000, 0x20a010f, 0x6, x22, x1, 64, x3)

inst_25:
// rs1==x23, rd==x19, rs1_b1_val == 0, 
// opcode: uclip8 ; op1:x23; dest:x19; op1val:0xcff00fe;  immval:0x2
TEST_PKIMM_OP( uclip8, x19, x23, 0x00000000, 0xcff00fe, 0x2, x23, x1, 72, x3)

inst_26:
// rs1==x13, rd==x7, rs1_b0_val == 170, 
// opcode: uclip8 ; op1:x13; dest:x7; op1val:0xd20feaa;  immval:0x2
TEST_PKIMM_OP( uclip8, x7, x13, 0x00000000, 0xd20feaa, 0x2, x13, x1, 80, x3)

inst_27:
// rs1==x28, rd==x11, rs1_b0_val == 85, rs1_b1_val == 247
// opcode: uclip8 ; op1:x28; dest:x11; op1val:0xd11f755;  immval:0x7
TEST_PKIMM_OP( uclip8, x11, x28, 0x00000000, 0xd11f755, 0x7, x28, x1, 88, x3)

inst_28:
// rs1==x25, rd==x31, rs1_b0_val == 127, rs1_b1_val == 223
// opcode: uclip8 ; op1:x25; dest:x31; op1val:0x70bdf7f;  immval:0x0
TEST_PKIMM_OP( uclip8, x31, x25, 0x00000000, 0x70bdf7f, 0x0, x25, x1, 96, x3)

inst_29:
// rs1==x15, rd==x23, rs1_b0_val == 223, rs1_b1_val == 253
// opcode: uclip8 ; op1:x15; dest:x23; op1val:0x7f02fddf;  immval:0x4
TEST_PKIMM_OP( uclip8, x23, x15, 0x00000000, 0x7f02fddf, 0x4, x15, x1, 104, x3)

inst_30:
// rs1==x7, rd==x20, rs1_b0_val == 247, 
// opcode: uclip8 ; op1:x7; dest:x20; op1val:0x11213f7;  immval:0x6
TEST_PKIMM_OP( uclip8, x20, x7, 0x00000000, 0x11213f7, 0x6, x7, x1, 112, x3)

inst_31:
// rs1==x26, rd==x10, rs1_b0_val == 251, rs1_b2_val == 128
// opcode: uclip8 ; op1:x26; dest:x10; op1val:0x180fdfb;  immval:0x5
TEST_PKIMM_OP( uclip8, x10, x26, 0x00000000, 0x180fdfb, 0x5, x26, x1, 120, x3)

inst_32:
// rs1_b0_val == 253, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xd010cfd;  immval:0x5
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xd010cfd, 0x5, x30, x1, 128, x2)

inst_33:
// rs1_b2_val == 191, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x80bf0d11;  immval:0x5
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x80bf0d11, 0x5, x30, x1, 136, x2)

inst_34:
// rs1_b2_val == 223, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x7fdf037f;  immval:0x3
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x7fdf037f, 0x3, x30, x1, 144, x2)

inst_35:
// rs1_b2_val == 239, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xf7ef0702;  immval:0x6
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xf7ef0702, 0x6, x30, x1, 152, x2)

inst_36:
// rs1_b2_val == 247, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x6f70afd;  immval:0x2
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x6f70afd, 0x2, x30, x1, 160, x2)

inst_37:
// rs1_b2_val == 254, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x80fe0601;  immval:0x1
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x80fe0601, 0x1, x30, x1, 168, x2)

inst_38:
// rs1_b2_val == 16, rs1_b0_val == 64
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x1100b40;  immval:0x6
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x1100b40, 0x6, x30, x1, 176, x2)

inst_39:
// rs1_b2_val == 4, rs1_b1_val == 191
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xfd04bf11;  immval:0x5
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xfd04bf11, 0x5, x30, x1, 184, x2)

inst_40:
// rs1_b0_val == 128, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x3067f80;  immval:0x4
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x3067f80, 0x4, x30, x1, 192, x2)

inst_41:
// rs1_b0_val == 32, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xbf0b0820;  immval:0x7
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xbf0b0820, 0x7, x30, x1, 200, x2)

inst_42:
// rs1_b1_val == 16, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x401310df;  immval:0x4
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x401310df, 0x4, x30, x1, 208, x2)

inst_43:
// rs1_b1_val == 85, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xfe550f;  immval:0x6
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xfe550f, 0x6, x30, x1, 216, x2)

inst_44:
// rs1_b1_val == 128, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xa07800d;  immval:0x1
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xa07800d, 0x1, x30, x1, 224, x2)

inst_45:
// rs1_b1_val == 239, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xe0cef0d;  immval:0x1
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xe0cef0d, 0x1, x30, x1, 232, x2)

inst_46:
// rs1_b3_val == 255, 
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0xff0c0b07;  immval:0x0
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0xff0c0b07, 0x0, x30, x1, 240, x2)

inst_47:
// rs1_b2_val == 127, rs1_b1_val == 4
// opcode: uclip8 ; op1:x30; dest:x31; op1val:0x17f04fe;  immval:0x3
TEST_PKIMM_OP( uclip8, x31, x30, 0x00000000, 0x17f04fe, 0x3, x30, x1, 248, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
