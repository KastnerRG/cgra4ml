
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcras16 instruction of the RISC-V RV32PZicsr extension for the kcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x13, rd==x26, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == 1024, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2
// opcode: kcras16 ; op1:x31; op2:x13; dest:x26; op1val:0x3fff8000;  op2val:0x020400
TEST_RR_OP(kcras16, x26, x31, x13, 0x00000000, 0x3fff8000, 0x020400, x4, 0, x6)

inst_1:// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x28, rs1_h1_val == rs2_h1_val, rs2_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kcras16 ; op1:x19; op2:x19; dest:x28; op1val:0x050003;  op2val:0x050001
TEST_RR_OP(kcras16, x28, x19, x19, 0x00000000, 0x050003, 0x050001, x4, 8, x6)

inst_2:// rs1 == rd != rs2, rs1==x17, rs2==x1, rd==x17, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 8192, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 4096, rs1_h1_val == -8193, rs2_h0_val == -17
// opcode: kcras16 ; op1:x17; op2:x1; dest:x17; op1val:0xdfff1000;  op2val:0x2000ffef
TEST_RR_OP(kcras16, x17, x17, x1, 0x00000000, 0xdfff1000, 0x2000ffef, x4, 16, x6)

inst_3:// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -16385, rs1_h0_val == -33
// opcode: kcras16 ; op1:x9; op2:x9; dest:x9; op1val:0xfff8ffdf;  op2val:0xfff6bfff
TEST_RR_OP(kcras16, x9, x9, x9, 0x00000000, 0xfff8ffdf, 0xfff6bfff, x4, 24, x6)

inst_4:// rs2 == rd != rs1, rs1==x8, rs2==x11, rd==x11, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs2_h1_val == -5, rs1_h1_val == 128
// opcode: kcras16 ; op1:x8; op2:x11; dest:x11; op1val:0x802000;  op2val:0xfffbfffc
TEST_RR_OP(kcras16, x11, x8, x11, 0x00000000, 0x802000, 0xfffbfffc, x4, 32, x6)

inst_5:// rs1==x5, rs2==x24, rd==x25, rs1_h0_val == rs2_h0_val, rs1_h1_val == -33
// opcode: kcras16 ; op1:x5; op2:x24; dest:x25; op1val:0xffdffff8;  op2val:0xfffafff8
TEST_RR_OP(kcras16, x25, x5, x24, 0x00000000, 0xffdffff8, 0xfffafff8, x4, 40, x6)

inst_6:// rs1==x18, rs2==x10, rd==x12, rs2_h1_val == -21846, rs1_h1_val == -5, rs1_h0_val == 1024
// opcode: kcras16 ; op1:x18; op2:x10; dest:x12; op1val:0xfffb0400;  op2val:0xaaaac000
TEST_RR_OP(kcras16, x12, x18, x10, 0x00000000, 0xfffb0400, 0xaaaac000, x4, 48, x6)

inst_7:// rs1==x2, rs2==x28, rd==x10, rs2_h1_val == 21845, rs1_h1_val == 32, rs1_h0_val == 16384
// opcode: kcras16 ; op1:x2; op2:x28; dest:x10; op1val:0x204000;  op2val:0x55550007
TEST_RR_OP(kcras16, x10, x2, x28, 0x00000000, 0x204000, 0x55550007, x4, 56, x6)

inst_8:// rs1==x22, rs2==x27, rd==x24, rs2_h1_val == 32767, rs1_h1_val == -65, rs2_h0_val == 2048
// opcode: kcras16 ; op1:x22; op2:x27; dest:x24; op1val:0xffbfc000;  op2val:0x7fff0800
TEST_RR_OP(kcras16, x24, x22, x27, 0x00000000, 0xffbfc000, 0x7fff0800, x4, 64, x6)

inst_9:// rs1==x13, rs2==x12, rd==x15, rs2_h1_val == -16385, rs1_h1_val == 512
// opcode: kcras16 ; op1:x13; op2:x12; dest:x15; op1val:0x2001000;  op2val:0xbffffff8
TEST_RR_OP(kcras16, x15, x13, x12, 0x00000000, 0x2001000, 0xbffffff8, x4, 72, x6)

inst_10:// rs1==x11, rs2==x18, rd==x19, rs2_h1_val == -8193, rs1_h0_val == -2, rs2_h0_val == 0, rs1_h1_val == 0
// opcode: kcras16 ; op1:x11; op2:x18; dest:x19; op1val:0x00fffe;  op2val:0xdfff0000
TEST_RR_OP(kcras16, x19, x11, x18, 0x00000000, 0x00fffe, 0xdfff0000, x4, 80, x6)

inst_11:// rs1==x26, rs2==x30, rd==x5, rs2_h1_val == -4097, rs2_h0_val == -5, rs1_h0_val == -8193
// opcode: kcras16 ; op1:x26; op2:x30; dest:x5; op1val:0x20dfff;  op2val:0xeffffffb
TEST_RR_OP(kcras16, x5, x26, x30, 0x00000000, 0x20dfff, 0xeffffffb, x4, 88, x6)

inst_12:// rs1==x7, rs2==x21, rd==x3, rs2_h1_val == -2049, rs2_h0_val == 128, rs1_h0_val == -9
// opcode: kcras16 ; op1:x7; op2:x21; dest:x3; op1val:0xfffafff7;  op2val:0xf7ff0080
TEST_RR_OP(kcras16, x3, x7, x21, 0x00000000, 0xfffafff7, 0xf7ff0080, x4, 96, x6)

inst_13:// rs1==x14, rs2==x7, rd==x23, rs2_h1_val == -1025, rs2_h0_val == 4, rs1_h0_val == -21846, rs1_h1_val == -9
// opcode: kcras16 ; op1:x14; op2:x7; dest:x23; op1val:0xfff7aaaa;  op2val:0xfbff0004
TEST_RR_OP(kcras16, x23, x14, x7, 0x00000000, 0xfff7aaaa, 0xfbff0004, x4, 104, x6)

inst_14:// rs1==x30, rs2==x16, rd==x31, rs2_h1_val == -513, rs1_h0_val == 1
// opcode: kcras16 ; op1:x30; op2:x16; dest:x31; op1val:0xfffb0001;  op2val:0xfdff3fff
TEST_RR_OP(kcras16, x31, x30, x16, 0x00000000, 0xfffb0001, 0xfdff3fff, x4, 112, x11)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_15:// rs1==x4, rs2==x17, rd==x8, rs2_h1_val == -257, rs2_h0_val == 64, rs1_h0_val == -2049
// opcode: kcras16 ; op1:x4; op2:x17; dest:x8; op1val:0x20f7ff;  op2val:0xfeff0040
TEST_RR_OP(kcras16, x8, x4, x17, 0x00000000, 0x20f7ff, 0xfeff0040, x9, 0, x11)

inst_16:// rs1==x23, rs2==x20, rd==x21, rs2_h1_val == -129, rs1_h1_val == 16, rs1_h0_val == 4
// opcode: kcras16 ; op1:x23; op2:x20; dest:x21; op1val:0x100004;  op2val:0xff7f0007
TEST_RR_OP(kcras16, x21, x23, x20, 0x00000000, 0x100004, 0xff7f0007, x9, 8, x11)

inst_17:// rs1==x29, rs2==x2, rd==x7, rs2_h1_val == -65, rs1_h1_val == 16384
// opcode: kcras16 ; op1:x29; op2:x2; dest:x7; op1val:0x4000aaaa;  op2val:0xffbfffef
TEST_RR_OP(kcras16, x7, x29, x2, 0x00000000, 0x4000aaaa, 0xffbfffef, x9, 16, x11)

inst_18:// rs1==x1, rs2==x8, rd==x29, rs2_h1_val == -33, 
// opcode: kcras16 ; op1:x1; op2:x8; dest:x29; op1val:0xfff8fffe;  op2val:0xffdf0001
TEST_RR_OP(kcras16, x29, x1, x8, 0x00000000, 0xfff8fffe, 0xffdf0001, x9, 24, x11)

inst_19:// rs1==x20, rs2==x4, rd==x22, rs2_h1_val == -17, rs2_h0_val == -129, rs1_h0_val == -129, rs1_h1_val == -32768
// opcode: kcras16 ; op1:x20; op2:x4; dest:x22; op1val:0x8000ff7f;  op2val:0xffefff7f
TEST_RR_OP(kcras16, x22, x20, x4, 0x00000000, 0x8000ff7f, 0xffefff7f, x9, 32, x11)

inst_20:// rs1==x12, rs2==x22, rd==x20, rs2_h1_val == -9, rs1_h0_val == -3, rs1_h1_val == -129
// opcode: kcras16 ; op1:x12; op2:x22; dest:x20; op1val:0xff7ffffd;  op2val:0xfff70006
TEST_RR_OP(kcras16, x20, x12, x22, 0x00000000, 0xff7ffffd, 0xfff70006, x9, 40, x11)

inst_21:// rs1==x27, rs2==x25, rd==x30, rs2_h1_val == -3, rs1_h0_val == -17, rs1_h1_val == 32767, rs2_h0_val == -9
// opcode: kcras16 ; op1:x27; op2:x25; dest:x30; op1val:0x7fffffef;  op2val:0xfffdfff7
TEST_RR_OP(kcras16, x30, x27, x25, 0x00000000, 0x7fffffef, 0xfffdfff7, x9, 48, x11)

inst_22:// rs1==x10, rs2==x5, rd==x13, rs2_h1_val == -2, rs2_h0_val == 21845
// opcode: kcras16 ; op1:x10; op2:x5; dest:x13; op1val:0xffdffffc;  op2val:0xfffe5555
TEST_RR_OP(kcras16, x13, x10, x5, 0x00000000, 0xffdffffc, 0xfffe5555, x9, 56, x11)

inst_23:// rs1==x0, rs2==x3, rd==x16, rs2_h1_val == -32768, rs2_h0_val == -65, rs1_h0_val == 2048
// opcode: kcras16 ; op1:x0; op2:x3; dest:x16; op1val:0x40000800;  op2val:0x8000ffbf
TEST_RR_OP(kcras16, x16, x0, x3, 0x00000000, 0x40000800, 0x8000ffbf, x9, 64, x11)

inst_24:// rs1==x6, rs2==x26, rd==x18, rs2_h1_val == 16384, rs1_h0_val == 32, rs2_h0_val == 16384
// opcode: kcras16 ; op1:x6; op2:x26; dest:x18; op1val:0xfff90020;  op2val:0x40004000
TEST_RR_OP(kcras16, x18, x6, x26, 0x00000000, 0xfff90020, 0x40004000, x9, 72, x11)

inst_25:// rs1==x25, rs2==x31, rd==x4, rs2_h1_val == 4096, rs1_h0_val == -5
// opcode: kcras16 ; op1:x25; op2:x31; dest:x4; op1val:0xfff7fffb;  op2val:0x10000007
TEST_RR_OP(kcras16, x4, x25, x31, 0x00000000, 0xfff7fffb, 0x10000007, x9, 80, x11)

inst_26:// rs1==x28, rs2==x15, rd==x1, rs2_h1_val == 2048, rs1_h0_val == 21845, rs1_h1_val == 8, rs2_h0_val == 8192
// opcode: kcras16 ; op1:x28; op2:x15; dest:x1; op1val:0x085555;  op2val:0x8002000
TEST_RR_OP(kcras16, x1, x28, x15, 0x00000000, 0x085555, 0x8002000, x9, 88, x11)

inst_27:// rs1==x21, rs2==x0, rd==x27, rs2_h1_val == 1024, 
// opcode: kcras16 ; op1:x21; op2:x0; dest:x27; op1val:0x20fff7;  op2val:0x400c000
TEST_RR_OP(kcras16, x27, x21, x0, 0x00000000, 0x20fff7, 0x400c000, x9, 96, x4)

inst_28:// rs1==x16, rs2==x6, rd==x0, rs2_h1_val == 512, 
// opcode: kcras16 ; op1:x16; op2:x6; dest:x0; op1val:0x804000;  op2val:0x2000009
TEST_RR_OP(kcras16, x0, x16, x6, 0x00000000, 0x804000, 0x2000009, x9, 104, x4)

inst_29:// rs1==x15, rs2==x29, rd==x6, rs2_h1_val == 256, rs1_h1_val == 8192, rs2_h0_val == -257
// opcode: kcras16 ; op1:x15; op2:x29; dest:x6; op1val:0x20000020;  op2val:0x100feff
TEST_RR_OP(kcras16, x6, x15, x29, 0x00000000, 0x20000020, 0x100feff, x9, 112, x4)

inst_30:// rs1==x3, rs2==x23, rd==x2, rs2_h1_val == 128, rs2_h0_val == -2, rs1_h1_val == -2
// opcode: kcras16 ; op1:x3; op2:x23; dest:x2; op1val:0xfffe4000;  op2val:0x80fffe
TEST_RR_OP(kcras16, x2, x3, x23, 0x00000000, 0xfffe4000, 0x80fffe, x9, 120, x4)

inst_31:// rs1==x24, rs1_h0_val == -1025, rs1_h1_val == -4097, rs2_h0_val == 16
// opcode: kcras16 ; op1:x24; op2:x7; dest:x15; op1val:0xeffffbff;  op2val:0xfff90010
TEST_RR_OP(kcras16, x15, x24, x7, 0x00000000, 0xeffffbff, 0xfff90010, x9, 128, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:// rs2==x14, rs1_h0_val == -513, 
// opcode: kcras16 ; op1:x6; op2:x14; dest:x21; op1val:0x00fdff;  op2val:0xc000fffc
TEST_RR_OP(kcras16, x21, x6, x14, 0x00000000, 0x00fdff, 0xc000fffc, x1, 0, x4)

inst_33:// rd==x14, rs1_h0_val == -257, rs2_h0_val == -1025, rs1_h1_val == 2048
// opcode: kcras16 ; op1:x13; op2:x3; dest:x14; op1val:0x800feff;  op2val:0xffeffbff
TEST_RR_OP(kcras16, x14, x13, x3, 0x00000000, 0x800feff, 0xffeffbff, x1, 8, x4)

inst_34:// rs1_h0_val == -65, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffbf;  op2val:0xfeffbfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfff9ffbf, 0xfeffbfff, x1, 16, x4)

inst_35:// rs1_h0_val == 512, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x030200;  op2val:0xfff9ff7f
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x030200, 0xfff9ff7f, x1, 24, x4)

inst_36:// rs1_h0_val == 256, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000100;  op2val:0x55550006
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x40000100, 0x55550006, x1, 32, x4)

inst_37:// rs1_h0_val == 128, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080;  op2val:0xfffe3fff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffbf0080, 0xfffe3fff, x1, 40, x4)

inst_38:// rs1_h0_val == 64, rs1_h1_val == 21845
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0xfffdfffa
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x55550040, 0xfffdfffa, x1, 48, x4)

inst_39:// rs1_h0_val == 16, rs1_h1_val == -17
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0010;  op2val:0x10000000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffef0010, 0x10000000, x1, 56, x4)

inst_40:// rs1_h0_val == 8, rs1_h1_val == 1024
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000008;  op2val:0xfeff0800
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x4000008, 0xfeff0800, x1, 64, x4)

inst_41:// rs1_h0_val == 2, rs1_h1_val == -16385
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002;  op2val:0xff7fc000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xbfff0002, 0xff7fc000, x1, 72, x4)

inst_42:// rs1_h0_val == 0, rs2_h0_val == -513, rs2_h1_val == 1
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x060000;  op2val:0x01fdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x060000, 0x01fdff, x1, 80, x4)

inst_43:// rs1_h0_val == -1, rs2_h0_val == 32767
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0x10007fff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xefffffff, 0x10007fff, x1, 88, x4)

inst_44:// rs2_h1_val == 64, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2008000;  op2val:0x40fffc
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x2008000, 0x40fffc, x1, 96, x4)

inst_45:// rs2_h1_val == 32, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80009;  op2val:0x200040
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfff80009, 0x200040, x1, 104, x4)

inst_46:// rs2_h1_val == 16, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7;  op2val:0x10ffef
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffdffff7, 0x10ffef, x1, 112, x4)

inst_47:// rs2_h1_val == 8, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0080;  op2val:0x080007
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffa0080, 0x080007, x1, 120, x4)

inst_48:// rs2_h1_val == 4, rs2_h0_val == 8
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0005;  op2val:0x040008
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x7fff0005, 0x040008, x1, 128, x4)

inst_49:// rs2_h1_val == 0, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffc;  op2val:0x00c000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffdffffc, 0x00c000, x1, 136, x4)

inst_50:// rs2_h0_val == -3, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0006;  op2val:0x7ffffffd
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffb0006, 0x7ffffffd, x1, 144, x4)

inst_51:// rs2_h0_val == -32768, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaff7f;  op2val:0xfff68000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffaff7f, 0xfff68000, x1, 152, x4)

inst_52:// rs2_h0_val == 4096, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x058000;  op2val:0xbfff1000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x058000, 0xbfff1000, x1, 160, x4)

inst_53:// rs2_h0_val == 512, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x000200
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x000200, x1, 168, x4)

inst_54:// rs2_h0_val == 256, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef;  op2val:0x070100
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffefffef, 0x070100, x1, 176, x4)

inst_55:// rs2_h0_val == 32, rs1_h1_val == -3
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffa;  op2val:0xfffb0020
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffdfffa, 0xfffb0020, x1, 184, x4)

inst_56:// rs2_h0_val == 2, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0xfffd0002
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffd0800, 0xfffd0002, x1, 192, x4)

inst_57:// rs2_h0_val == -1, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffff;  op2val:0xff7fffff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfff8ffff, 0xff7fffff, x1, 200, x4)

inst_58:// rs1_h1_val == -21846, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdf;  op2val:0x200001
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xaaaaffdf, 0x200001, x1, 208, x4)

inst_59:// rs1_h1_val == -2049, rs2_h0_val == -2049
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0040;  op2val:0x08f7ff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xf7ff0040, 0x08f7ff, x1, 216, x4)

inst_60:// rs1_h1_val == -1025, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaa;  op2val:0x20000000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfbffaaaa, 0x20000000, x1, 224, x4)

inst_61:// rs1_h1_val == -513, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf;  op2val:0xfffe0009
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfdffffdf, 0xfffe0009, x1, 232, x4)

inst_62:// rs1_h1_val == -257, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0040;  op2val:0x050100
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfeff0040, 0x050100, x1, 240, x4)

inst_63:// rs1_h1_val == 4096, rs1_h0_val == -4097
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000efff;  op2val:0xfffdffef
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x1000efff, 0xfffdffef, x1, 248, x4)

inst_64:// rs1_h1_val == 256, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffa;  op2val:0x060009
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x100fffa, 0x060009, x1, 256, x4)

inst_65:// rs2_h1_val == -1, rs2_h0_val == -8193
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90004;  op2val:0xffffdfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfff90004, 0xffffdfff, x1, 264, x4)

inst_66:// rs1_h1_val == 64, rs2_h0_val == -33
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fff8;  op2val:0x200ffdf
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x40fff8, 0x200ffdf, x1, 272, x4)

inst_67:// rs2_h0_val == -21846, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0xefffaaaa
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffdf4000, 0xefffaaaa, x1, 280, x4)

inst_68:// rs1_h1_val == 4, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ff7f;  op2val:0xaaaafff9
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x04ff7f, 0xaaaafff9, x1, 288, x4)

inst_69:// rs1_h1_val == 2, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ff7f;  op2val:0x40005555
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x02ff7f, 0x40005555, x1, 296, x4)

inst_70:// rs2_h0_val == -4097, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeff7f;  op2val:0xdfffefff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xfffeff7f, 0xdfffefff, x1, 304, x4)

inst_71:// rs1_h1_val == -1, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff2000;  op2val:0xfffd0003
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffff2000, 0xfffd0003, x1, 312, x4)

inst_72:// rs1_h0_val == 32767, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf7fff;  op2val:0xdffffdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0xffdf7fff, 0xdffffdff, x1, 320, x4)

inst_73:// rs1_h0_val == -16385, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400bfff;  op2val:0x050400
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x400bfff, 0x050400, x1, 328, x4)

inst_74:// rs1_h1_val == 1, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x010020;  op2val:0x090800
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x010020, 0x090800, x1, 336, x4)

inst_75:// rs2_h1_val == -32768, rs2_h0_val == -65, rs1_h0_val == 2048
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000800;  op2val:0x8000ffbf
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x40000800, 0x8000ffbf, x1, 344, x4)

inst_76:// rs2_h1_val == 1024, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff7;  op2val:0x400c000
TEST_RR_OP(kcras16, x31, x30, x29, 0x00000000, 0x20fff7, 0x400c000, x1, 352, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 90*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
