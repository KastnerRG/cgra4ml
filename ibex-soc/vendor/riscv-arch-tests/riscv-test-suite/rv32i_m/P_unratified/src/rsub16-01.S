
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsub16 instruction of the RISC-V RV32PZicsr extension for the rsub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x7, rd==x10, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == 2048, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 32, rs2_h1_val == -2
// opcode: rsub16 ; op1:x0; op2:x7; dest:x10; op1val:0x208000;  op2val:0xfffe0800
TEST_RR_OP(rsub16, x10, x0, x7, 0x00000000, 0x208000, 0xfffe0800, x1, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x3, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 21845, rs2_h1_val == -32768
// opcode: rsub16 ; op1:x31; op2:x31; dest:x3; op1val:0x80005555;  op2val:0x80000003
TEST_RR_OP(rsub16, x3, x31, x31, 0x00000000, 0x80005555, 0x80000003, x1, 4, x6)

inst_2:
// rs1 == rd != rs2, rs1==x11, rs2==x27, rd==x11, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 0, rs2_h1_val == 2048, rs2_h0_val == -17, rs1_h1_val == -129
// opcode: rsub16 ; op1:x11; op2:x27; dest:x11; op1val:0xff7f0000;  op2val:0x800ffef
TEST_RR_OP(rsub16, x11, x11, x27, 0x00000000, 0xff7f0000, 0x800ffef, x1, 8, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 2, rs1_h1_val == 16, rs2_h0_val == 0, rs2_h1_val == 256
// opcode: rsub16 ; op1:x19; op2:x19; dest:x19; op1val:0x100002;  op2val:0x1000000
TEST_RR_OP(rsub16, x19, x19, x19, 0x00000000, 0x100002, 0x1000000, x1, 12, x6)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x13, rd==x13, rs1_h0_val == rs2_h0_val, rs1_h1_val == -17, rs2_h1_val == -1025, rs1_h0_val == 8, rs2_h0_val == 8
// opcode: rsub16 ; op1:x28; op2:x13; dest:x13; op1val:0xffef0008;  op2val:0xfbff0008
TEST_RR_OP(rsub16, x13, x28, x13, 0x00000000, 0xffef0008, 0xfbff0008, x1, 16, x6)

inst_5:
// rs1==x14, rs2==x24, rd==x20, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -513, rs1_h1_val == 1, rs1_h0_val == -2049
// opcode: rsub16 ; op1:x14; op2:x24; dest:x20; op1val:0x01f7ff;  op2val:0xfffafdff
TEST_RR_OP(rsub16, x20, x14, x24, 0x00000000, 0x01f7ff, 0xfffafdff, x1, 20, x6)

inst_6:
// rs1==x26, rs2==x17, rd==x28, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -1025, rs2_h1_val == -5, rs1_h1_val == 128
// opcode: rsub16 ; op1:x26; op2:x17; dest:x28; op1val:0x800009;  op2val:0xfffbfbff
TEST_RR_OP(rsub16, x28, x26, x17, 0x00000000, 0x800009, 0xfffbfbff, x1, 24, x6)

inst_7:
// rs1==x15, rs2==x30, rd==x22, rs2_h1_val == -21846, rs2_h0_val == -5, rs1_h1_val == 2048
// opcode: rsub16 ; op1:x15; op2:x30; dest:x22; op1val:0x8003fff;  op2val:0xaaaafffb
TEST_RR_OP(rsub16, x22, x15, x30, 0x00000000, 0x8003fff, 0xaaaafffb, x1, 28, x6)

inst_8:
// rs1==x20, rs2==x26, rd==x7, rs2_h1_val == 21845, rs1_h0_val == 16
// opcode: rsub16 ; op1:x20; op2:x26; dest:x7; op1val:0x800010;  op2val:0x5555c000
TEST_RR_OP(rsub16, x7, x20, x26, 0x00000000, 0x800010, 0x5555c000, x1, 32, x6)

inst_9:
// rs1==x17, rs2==x10, rd==x16, rs2_h1_val == 32767, rs1_h0_val == 32, rs2_h0_val == -65, rs1_h1_val == -513
// opcode: rsub16 ; op1:x17; op2:x10; dest:x16; op1val:0xfdff0020;  op2val:0x7fffffbf
TEST_RR_OP(rsub16, x16, x17, x10, 0x00000000, 0xfdff0020, 0x7fffffbf, x1, 36, x6)

inst_10:
// rs1==x24, rs2==x22, rd==x5, rs2_h1_val == -16385, 
// opcode: rsub16 ; op1:x24; op2:x22; dest:x5; op1val:0xffeffff9;  op2val:0xbffffff8
TEST_RR_OP(rsub16, x5, x24, x22, 0x00000000, 0xffeffff9, 0xbffffff8, x1, 40, x6)

inst_11:
// rs1==x27, rs2==x20, rd==x30, rs2_h1_val == -8193, 
// opcode: rsub16 ; op1:x27; op2:x20; dest:x30; op1val:0xfff8f7ff;  op2val:0xdfff0009
TEST_RR_OP(rsub16, x30, x27, x20, 0x00000000, 0xfff8f7ff, 0xdfff0009, x1, 44, x6)

inst_12:
// rs1==x13, rs2==x23, rd==x12, rs2_h1_val == -4097, rs1_h0_val == 128
// opcode: rsub16 ; op1:x13; op2:x23; dest:x12; op1val:0xff7f0080;  op2val:0xefff0007
TEST_RR_OP(rsub16, x12, x13, x23, 0x00000000, 0xff7f0080, 0xefff0007, x1, 48, x6)

inst_13:
// rs1==x18, rs2==x2, rd==x24, rs2_h1_val == -2049, rs1_h1_val == -1, rs2_h0_val == 256
// opcode: rsub16 ; op1:x18; op2:x2; dest:x24; op1val:0xffff0020;  op2val:0xf7ff0100
TEST_RR_OP(rsub16, x24, x18, x2, 0x00000000, 0xffff0020, 0xf7ff0100, x1, 52, x6)

inst_14:
// rs1==x30, rs2==x21, rd==x8, rs2_h1_val == -513, rs2_h0_val == 16
// opcode: rsub16 ; op1:x30; op2:x21; dest:x8; op1val:0xfff6c000;  op2val:0xfdff0010
TEST_RR_OP(rsub16, x8, x30, x21, 0x00000000, 0xfff6c000, 0xfdff0010, x1, 56, x6)

inst_15:
// rs1==x4, rs2==x11, rd==x2, rs2_h1_val == -257, rs2_h0_val == -33
// opcode: rsub16 ; op1:x4; op2:x11; dest:x2; op1val:0x80000009;  op2val:0xfeffffdf
TEST_RR_OP(rsub16, x2, x4, x11, 0x00000000, 0x80000009, 0xfeffffdf, x1, 60, x6)

inst_16:
// rs1==x5, rs2==x15, rd==x21, rs2_h1_val == -129, rs2_h0_val == 4, rs1_h1_val == -21846
// opcode: rsub16 ; op1:x5; op2:x15; dest:x21; op1val:0xaaaa0020;  op2val:0xff7f0004
TEST_RR_OP(rsub16, x21, x5, x15, 0x00000000, 0xaaaa0020, 0xff7f0004, x1, 64, x11)

inst_17:
// rs1==x10, rs2==x16, rd==x25, rs2_h1_val == -65, rs1_h1_val == -2049, rs2_h0_val == -4097, rs1_h0_val == 1024
// opcode: rsub16 ; op1:x10; op2:x16; dest:x25; op1val:0xf7ff0400;  op2val:0xffbfefff
TEST_RR_OP(rsub16, x25, x10, x16, 0x00000000, 0xf7ff0400, 0xffbfefff, x1, 68, x11)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_18:
// rs1==x23, rs2==x18, rd==x17, rs2_h1_val == -33, rs1_h0_val == 8192
// opcode: rsub16 ; op1:x23; op2:x18; dest:x17; op1val:0x80002000;  op2val:0xffdf0003
TEST_RR_OP(rsub16, x17, x23, x18, 0x00000000, 0x80002000, 0xffdf0003, x10, 0, x11)

inst_19:
// rs1==x29, rs2==x28, rd==x18, rs2_h1_val == -17, rs2_h0_val == 64, rs1_h1_val == 21845
// opcode: rsub16 ; op1:x29; op2:x28; dest:x18; op1val:0x55558000;  op2val:0xffef0040
TEST_RR_OP(rsub16, x18, x29, x28, 0x00000000, 0x55558000, 0xffef0040, x10, 4, x11)

inst_20:
// rs1==x21, rs2==x8, rd==x0, rs2_h1_val == -9, rs1_h0_val == -21846, rs2_h0_val == 8192
// opcode: rsub16 ; op1:x21; op2:x8; dest:x0; op1val:0x05aaaa;  op2val:0xfff72000
TEST_RR_OP(rsub16, x0, x21, x8, 0x00000000, 0x05aaaa, 0xfff72000, x10, 8, x11)

inst_21:
// rs1==x1, rs2==x12, rd==x23, rs2_h1_val == -3, rs2_h0_val == -2, rs1_h0_val == -9
// opcode: rsub16 ; op1:x1; op2:x12; dest:x23; op1val:0xaaaafff7;  op2val:0xfffdfffe
TEST_RR_OP(rsub16, x23, x1, x12, 0x00000000, 0xaaaafff7, 0xfffdfffe, x10, 12, x11)

inst_22:
// rs1==x22, rs2==x5, rd==x9, rs2_h1_val == 16384, rs2_h0_val == 21845, rs1_h1_val == -3
// opcode: rsub16 ; op1:x22; op2:x5; dest:x9; op1val:0xfffdfff7;  op2val:0x40005555
TEST_RR_OP(rsub16, x9, x22, x5, 0x00000000, 0xfffdfff7, 0x40005555, x10, 16, x11)

inst_23:
// rs1==x25, rs2==x14, rd==x4, rs2_h1_val == 8192, 
// opcode: rsub16 ; op1:x25; op2:x14; dest:x4; op1val:0xf7fff7ff;  op2val:0x2000fff9
TEST_RR_OP(rsub16, x4, x25, x14, 0x00000000, 0xf7fff7ff, 0x2000fff9, x10, 20, x11)

inst_24:
// rs1==x6, rs2==x25, rd==x14, rs2_h1_val == 4096, rs2_h0_val == -9
// opcode: rsub16 ; op1:x6; op2:x25; dest:x14; op1val:0xaaaa8000;  op2val:0x1000fff7
TEST_RR_OP(rsub16, x14, x6, x25, 0x00000000, 0xaaaa8000, 0x1000fff7, x10, 24, x11)

inst_25:
// rs1==x16, rs2==x9, rd==x6, rs2_h1_val == 1024, rs1_h0_val == 64
// opcode: rsub16 ; op1:x16; op2:x9; dest:x6; op1val:0x3fff0040;  op2val:0x4000008
TEST_RR_OP(rsub16, x6, x16, x9, 0x00000000, 0x3fff0040, 0x4000008, x10, 28, x11)

inst_26:
// rs1==x2, rs2==x6, rd==x26, rs2_h1_val == 512, rs1_h0_val == -1
// opcode: rsub16 ; op1:x2; op2:x6; dest:x26; op1val:0xfffdffff;  op2val:0x2000008
TEST_RR_OP(rsub16, x26, x2, x6, 0x00000000, 0xfffdffff, 0x2000008, x10, 32, x11)

inst_27:
// rs1==x8, rs2==x3, rd==x1, rs2_h1_val == 128, 
// opcode: rsub16 ; op1:x8; op2:x3; dest:x1; op1val:0xfffafff9;  op2val:0x80fffa
TEST_RR_OP(rsub16, x1, x8, x3, 0x00000000, 0xfffafff9, 0x80fffa, x10, 36, x11)

inst_28:
// rs1==x3, rs2==x0, rd==x31, rs2_h1_val == 64, rs1_h1_val == -16385, rs2_h0_val == -32768, rs1_h0_val == 4
// opcode: rsub16 ; op1:x3; op2:x0; dest:x31; op1val:0xbfff0004;  op2val:0x408000
TEST_RR_OP(rsub16, x31, x3, x0, 0x00000000, 0xbfff0004, 0x408000, x10, 40, x11)

inst_29:
// rs1==x12, rs2==x4, rd==x27, rs2_h1_val == 32, rs1_h0_val == 512
// opcode: rsub16 ; op1:x12; op2:x4; dest:x27; op1val:0x800200;  op2val:0x200008
TEST_RR_OP(rsub16, x27, x12, x4, 0x00000000, 0x800200, 0x200008, x10, 44, x11)

inst_30:
// rs1==x9, rs2==x1, rd==x29, rs2_h1_val == 16, rs2_h0_val == 1, rs1_h0_val == 16384
// opcode: rsub16 ; op1:x9; op2:x1; dest:x29; op1val:0x064000;  op2val:0x100001
TEST_RR_OP(rsub16, x29, x9, x1, 0x00000000, 0x064000, 0x100001, x10, 48, x11)

inst_31:
// rs1==x7, rs2==x29, rd==x15, rs1_h0_val == -1025, 
// opcode: rsub16 ; op1:x7; op2:x29; dest:x15; op1val:0x3ffffbff;  op2val:0xfffd0040
TEST_RR_OP(rsub16, x15, x7, x29, 0x00000000, 0x3ffffbff, 0xfffd0040, x10, 52, x11)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == 64, rs2_h0_val == -129
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fdff;  op2val:0xff7fff7f
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x40fdff, 0xff7fff7f, x10, 56, x11)

inst_33:
// rs1_h0_val == -257, rs1_h1_val == -4097
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0xfff6c000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xeffffeff, 0xfff6c000, x10, 60, x11)

inst_34:
// rs1_h0_val == -129, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ff7f;  op2val:0xffdffffe
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xc000ff7f, 0xffdffffe, x10, 64, x11)

inst_35:
// rs1_h0_val == -65, rs2_h1_val == -1
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffbf;  op2val:0xffff0100
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfdffffbf, 0xffff0100, x10, 68, x11)

inst_36:
// rs1_h0_val == -33, rs1_h1_val == -257
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffdf;  op2val:0xfff8fffa
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfeffffdf, 0xfff8fffa, x10, 72, x11)

inst_37:
// rs1_h0_val == -17, rs1_h1_val == 2
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffef;  op2val:0x030008
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x02ffef, 0x030008, x10, 76, x11)

inst_38:
// rs1_h0_val == -5, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffb;  op2val:0x55550001
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x03fffb, 0x55550001, x10, 80, x11)

inst_39:
// rs1_h0_val == -3, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffd;  op2val:0xf7ffffef
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x09fffd, 0xf7ffffef, x10, 84, x11)

inst_40:
// rs1_h0_val == -2, rs1_h1_val == 16384, rs2_h0_val == -21846
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffe;  op2val:0xdfffaaaa
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x4000fffe, 0xdfffaaaa, x10, 88, x11)

inst_41:
// rs1_h0_val == 4096, rs2_h1_val == 0
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef1000;  op2val:0x00fffe
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xffef1000, 0x00fffe, x10, 92, x11)

inst_42:
// rs1_h0_val == 2048, rs2_h0_val == 128
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0800;  op2val:0xfff60080
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xffff0800, 0xfff60080, x10, 96, x11)

inst_43:
// rs1_h0_val == 256, rs1_h1_val == -5
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0100;  op2val:0xffbffbff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfffb0100, 0xffbffbff, x10, 100, x11)

inst_44:
// rs1_h0_val == 1, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001;  op2val:0xffdf2000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfffb0001, 0xffdf2000, x10, 104, x11)

inst_45:
// rs2_h1_val == 8, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x050020;  op2val:0x088000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x050020, 0x088000, x10, 108, x11)

inst_46:
// rs2_h1_val == 4, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ff;  op2val:0x04fff9
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfff8f7ff, 0x04fff9, x10, 112, x11)

inst_47:
// rs2_h1_val == 2, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0005;  op2val:0x02c000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x3fff0005, 0x02c000, x10, 116, x11)

inst_48:
// rs2_h1_val == 1, rs1_h1_val == 256
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffef;  op2val:0x010009
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x100ffef, 0x010009, x10, 120, x11)

inst_49:
// rs2_h0_val == 32767, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe;  op2val:0x40007fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x07fffe, 0x40007fff, x10, 124, x11)

inst_50:
// rs2_h0_val == -3, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffc;  op2val:0x5555fffd
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x3ffffffc, 0x5555fffd, x10, 128, x11)

inst_51:
// rs2_h0_val == 16384, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0xfff94000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0xfff94000, x10, 132, x11)

inst_52:
// rs2_h0_val == 4096, rs1_h1_val == -2
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffc;  op2val:0x20001000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfffefffc, 0x20001000, x10, 136, x11)

inst_53:
// rs2_h0_val == 1024, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffb;  op2val:0xffbf0400
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfffbfffb, 0xffbf0400, x10, 140, x11)

inst_54:
// rs2_h0_val == 512, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fff6;  op2val:0x200200
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x02fff6, 0x200200, x10, 144, x11)

inst_55:
// rs2_h0_val == 32, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaa;  op2val:0xaaaa0020
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x06aaaa, 0xaaaa0020, x10, 148, x11)

inst_56:
// rs2_h0_val == 2, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0003;  op2val:0xfdff0002
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfdff0003, 0xfdff0002, x10, 152, x11)

inst_57:
// rs2_h0_val == -1, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000002;  op2val:0xff7fffff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x1000002, 0xff7fffff, x10, 156, x11)

inst_58:
// rs1_h1_val == 32767, rs1_h0_val == -4097
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff;  op2val:0xffbf0200
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x7fffefff, 0xffbf0200, x10, 160, x11)

inst_59:
// rs2_h0_val == -2049, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x05efff;  op2val:0x01f7ff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x05efff, 0x01f7ff, x10, 164, x11)

inst_60:
// rs1_h1_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa;  op2val:0x08fffd
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xdfffaaaa, 0x08fffd, x10, 168, x11)

inst_61:
// rs1_h1_val == -1025, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff;  op2val:0x805555
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfbffefff, 0x805555, x10, 172, x11)

inst_62:
// rs1_h1_val == -65, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdff;  op2val:0x400efff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xffbffdff, 0x400efff, x10, 176, x11)

inst_63:
// rs1_h1_val == -33, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040;  op2val:0x400fffb
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xffdf0040, 0x400fffb, x10, 180, x11)

inst_64:
// rs1_h1_val == -9, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70006;  op2val:0x5555ff7f
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfff70006, 0x5555ff7f, x10, 184, x11)

inst_65:
// rs1_h1_val == 8192, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000100;  op2val:0x4000ffbf
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x20000100, 0x4000ffbf, x10, 188, x11)

inst_66:
// rs1_h1_val == 4096, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000100;  op2val:0x100200
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x10000100, 0x100200, x10, 192, x11)

inst_67:
// rs1_h1_val == 1024, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffef;  op2val:0xfffe7fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x400ffef, 0xfffe7fff, x10, 196, x11)

inst_68:
// rs1_h1_val == 512, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff;  op2val:0xf7ff0200
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x200fdff, 0xf7ff0200, x10, 200, x11)

inst_69:
// rs1_h1_val == 8, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff;  op2val:0x10c000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x08fdff, 0x10c000, x10, 204, x11)

inst_70:
// rs2_h0_val == -16385, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0004;  op2val:0x00bfff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfbff0004, 0x00bfff, x10, 208, x11)

inst_71:
// rs1_h1_val == 4, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf;  op2val:0x4000001
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x04ffbf, 0x4000001, x10, 212, x11)

inst_72:
// rs2_h0_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200040;  op2val:0x5555dfff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x200040, 0x5555dfff, x10, 216, x11)

inst_73:
// rs1_h1_val == 0, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff8;  op2val:0xaaaa7fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x00fff8, 0xaaaa7fff, x10, 220, x11)

inst_74:
// rs2_h0_val == -257, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffd;  op2val:0x800feff
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xffdffffd, 0x800feff, x10, 224, x11)

inst_75:
// rs1_h0_val == 32767, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7fff;  op2val:0xfffbfffd
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfffd7fff, 0xfffbfffd, x10, 228, x11)

inst_76:
// rs1_h0_val == -16385, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000bfff;  op2val:0x01fffc
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x4000bfff, 0x01fffc, x10, 232, x11)

inst_77:
// rs1_h0_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7dfff;  op2val:0x3fff8000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xfff7dfff, 0x3fff8000, x10, 236, x11)

inst_78:
// rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == 2048, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 32, rs2_h1_val == -2
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x208000;  op2val:0xfffe0800
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x208000, 0xfffe0800, x10, 240, x11)

inst_79:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 21845, rs2_h1_val == -32768
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80005555;  op2val:0x80000003
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x80005555, 0x80000003, x10, 244, x11)

inst_80:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 2, rs1_h1_val == 16, rs2_h0_val == 0, rs2_h1_val == 256
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002;  op2val:0x1000000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x100002, 0x1000000, x10, 248, x11)

inst_81:
// rs2_h1_val == -9, rs1_h0_val == -21846, rs2_h0_val == 8192
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x05aaaa;  op2val:0xfff72000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0x05aaaa, 0xfff72000, x10, 252, x11)

inst_82:
// rs2_h1_val == 64, rs1_h1_val == -16385, rs2_h0_val == -32768, rs1_h0_val == 4
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0004;  op2val:0x408000
TEST_RR_OP(rsub16, x31, x30, x29, 0x00000000, 0xbfff0004, 0x408000, x10, 256, x11)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 65*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
