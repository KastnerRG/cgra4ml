
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksll8 instruction of the RISC-V RV32PZicsr extension for the ksll8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksll8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x23, rd==x27, rs2_val == 5, rs1_b2_val == 2, rs1_b1_val == -9, rs1_b3_val == 4
// opcode: ksll8 ; op1:x3; op2:x23; dest:x27; op1val:0x402f707;  op2val:0x5
TEST_PKRR_OP(ksll8, x27, x3, x23, 0x00000000, 0x402f707, 0x5, x3, x7, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x26, rs2_val == 3, rs1_b2_val == -9, rs1_b0_val == -5, rs1_b1_val == 127, rs1_b3_val == -2
// opcode: ksll8 ; op1:x16; op2:x16; dest:x26; op1val:0xfef77ffb;  op2val:0x3
TEST_PKRR_OP(ksll8, x26, x16, x16, 0x00000000, 0xfef77ffb, 0x3, x16, x7, 8, x11)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x0, rd==x18, rs2_val == 6, rs1_b1_val == 64, rs1_b2_val == 85, rs1_b0_val == -65
// opcode: ksll8 ; op1:x18; op2:x0; dest:x18; op1val:0xf85540bf;  op2val:0x0
TEST_PKRR_OP(ksll8, x18, x18, x0, 0x00000000, 0xf85540bf, 0x0, x18, x7, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_val == 4, rs1_b3_val == -33
// opcode: ksll8 ; op1:x20; op2:x20; dest:x20; op1val:0xdffcf7bf;  op2val:0x4
TEST_PKRR_OP(ksll8, x20, x20, x20, 0x00000000, 0xdffcf7bf, 0x4, x20, x7, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x13, rd==x13, rs2_val == 2, rs1_b3_val == -17, rs1_b0_val == 0, rs1_b1_val == -5
// opcode: ksll8 ; op1:x19; op2:x13; dest:x13; op1val:0xeff7fb00;  op2val:0x2
TEST_PKRR_OP(ksll8, x13, x19, x13, 0x00000000, 0xeff7fb00, 0x2, x19, x7, 32, x11)

inst_5:
// rs1==x13, rs2==x6, rd==x30, rs2_val == 1, rs1_b2_val == -5, rs1_b0_val == 85
// opcode: ksll8 ; op1:x13; op2:x6; dest:x30; op1val:0xf6fbfc55;  op2val:0x1
TEST_PKRR_OP(ksll8, x30, x13, x6, 0x00000000, 0xf6fbfc55, 0x1, x13, x7, 40, x11)

inst_6:
// rs1==x30, rs2==x28, rd==x14, rs1_b3_val == -86, 
// opcode: ksll8 ; op1:x30; op2:x28; dest:x14; op1val:0xaafcc007;  op2val:0x8
TEST_PKRR_OP(ksll8, x14, x30, x28, 0x00000000, 0xaafcc007, 0x8, x30, x7, 48, x11)

inst_7:
// rs1==x0, rs2==x22, rd==x21, rs1_b3_val == 85, rs1_b0_val == -128
// opcode: ksll8 ; op1:x0; op2:x22; dest:x21; op1val:0x55fcfb80;  op2val:0x13
TEST_PKRR_OP(ksll8, x21, x0, x22, 0x00000000, 0x55fcfb80, 0x13, x0, x7, 56, x11)

inst_8:
// rs1==x8, rs2==x18, rd==x1, rs1_b3_val == 127, rs1_b2_val == 8, rs1_b1_val == -33, rs1_b0_val == 127
// opcode: ksll8 ; op1:x8; op2:x18; dest:x1; op1val:0x7f08df7f;  op2val:0x10
TEST_PKRR_OP(ksll8, x1, x8, x18, 0x00000000, 0x7f08df7f, 0x10, x8, x7, 64, x11)

inst_9:
// rs1==x9, rs2==x26, rd==x15, rs1_b3_val == -65, rs1_b2_val == 1
// opcode: ksll8 ; op1:x9; op2:x26; dest:x15; op1val:0xbf010606;  op2val:0x5
TEST_PKRR_OP(ksll8, x15, x9, x26, 0x00000000, 0xbf010606, 0x5, x9, x7, 72, x11)

inst_10:
// rs1==x12, rs2==x1, rd==x5, rs1_b3_val == -9, rs1_b1_val == -1, rs1_b2_val == -33
// opcode: ksll8 ; op1:x12; op2:x1; dest:x5; op1val:0xf7dfff06;  op2val:0x11
TEST_PKRR_OP(ksll8, x5, x12, x1, 0x00000000, 0xf7dfff06, 0x11, x12, x7, 80, x11)

inst_11:
// rs1==x14, rs2==x2, rd==x10, rs1_b3_val == -5, rs1_b1_val == -3
// opcode: ksll8 ; op1:x14; op2:x2; dest:x10; op1val:0xfbfcfd3f;  op2val:0x4
TEST_PKRR_OP(ksll8, x10, x14, x2, 0x00000000, 0xfbfcfd3f, 0x4, x14, x7, 88, x11)

inst_12:
// rs1==x5, rs2==x27, rd==x22, rs1_b3_val == -3, rs1_b0_val == -3
// opcode: ksll8 ; op1:x5; op2:x27; dest:x22; op1val:0xfd5505fd;  op2val:0xa
TEST_PKRR_OP(ksll8, x22, x5, x27, 0x00000000, 0xfd5505fd, 0xa, x5, x7, 96, x11)

inst_13:
// rs1==x21, rs2==x17, rd==x8, rs1_b3_val == -128, 
// opcode: ksll8 ; op1:x21; op2:x17; dest:x8; op1val:0x8003c0fc;  op2val:0x0
TEST_PKRR_OP(ksll8, x8, x21, x17, 0x00000000, 0x8003c0fc, 0x0, x21, x7, 104, x11)

inst_14:
// rs1==x15, rs2==x4, rd==x16, rs1_b3_val == 64, rs1_b1_val == -86
// opcode: ksll8 ; op1:x15; op2:x4; dest:x16; op1val:0x4055aa55;  op2val:0x5
TEST_PKRR_OP(ksll8, x16, x15, x4, 0x00000000, 0x4055aa55, 0x5, x15, x7, 112, x11)

inst_15:
// rs1==x10, rs2==x14, rd==x25, rs1_b3_val == 32, rs1_b1_val == 4, rs1_b2_val == 64
// opcode: ksll8 ; op1:x10; op2:x14; dest:x25; op1val:0x20400407;  op2val:0xe
TEST_PKRR_OP(ksll8, x25, x10, x14, 0x00000000, 0x20400407, 0xe, x10, x7, 120, x11)

inst_16:
// rs1==x11, rs2==x12, rd==x9, rs1_b3_val == 16, rs1_b0_val == 32
// opcode: ksll8 ; op1:x11; op2:x12; dest:x9; op1val:0x103f7f20;  op2val:0x2
TEST_PKRR_OP(ksll8, x9, x11, x12, 0x00000000, 0x103f7f20, 0x2, x11, x7, 128, x14)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_17:
// rs1==x1, rs2==x25, rd==x31, rs1_b3_val == 8, 
// opcode: ksll8 ; op1:x1; op2:x25; dest:x31; op1val:0x80905c0;  op2val:0x3
TEST_PKRR_OP(ksll8, x31, x1, x25, 0x00000000, 0x80905c0, 0x3, x1, x13, 0, x14)

inst_18:
// rs1==x26, rs2==x31, rd==x6, rs1_b3_val == 2, rs1_b0_val == 16
// opcode: ksll8 ; op1:x26; op2:x31; dest:x6; op1val:0x2fb0510;  op2val:0x13
TEST_PKRR_OP(ksll8, x6, x26, x31, 0x00000000, 0x2fb0510, 0x13, x26, x13, 8, x14)

inst_19:
// rs1==x24, rs2==x30, rd==x28, rs1_b3_val == 1, rs1_b2_val == -2, rs1_b1_val == 1
// opcode: ksll8 ; op1:x24; op2:x30; dest:x28; op1val:0x1fe01c0;  op2val:0x3
TEST_PKRR_OP(ksll8, x28, x24, x30, 0x00000000, 0x1fe01c0, 0x3, x24, x13, 16, x14)

inst_20:
// rs1==x29, rs2==x24, rd==x11, rs1_b3_val == 0, 
// opcode: ksll8 ; op1:x29; op2:x24; dest:x11; op1val:0xfaaa7f;  op2val:0x11
TEST_PKRR_OP(ksll8, x11, x29, x24, 0x00000000, 0xfaaa7f, 0x11, x29, x13, 24, x14)

inst_21:
// rs1==x17, rs2==x7, rd==x19, rs1_b3_val == -1, rs1_b1_val == -2
// opcode: ksll8 ; op1:x17; op2:x7; dest:x19; op1val:0xff05fe05;  op2val:0x10
TEST_PKRR_OP(ksll8, x19, x17, x7, 0x00000000, 0xff05fe05, 0x10, x17, x13, 32, x14)

inst_22:
// rs1==x4, rs2==x10, rd==x24, rs1_b2_val == -86, rs1_b1_val == 2
// opcode: ksll8 ; op1:x4; op2:x10; dest:x24; op1val:0x3faa02fd;  op2val:0x8
TEST_PKRR_OP(ksll8, x24, x4, x10, 0x00000000, 0x3faa02fd, 0x8, x4, x13, 40, x14)

inst_23:
// rs1==x31, rs2==x19, rd==x12, rs1_b1_val == 0, rs1_b0_val == 2
// opcode: ksll8 ; op1:x31; op2:x19; dest:x12; op1val:0x5f80002;  op2val:0x9
TEST_PKRR_OP(ksll8, x12, x31, x19, 0x00000000, 0x5f80002, 0x9, x31, x13, 48, x14)

inst_24:
// rs1==x7, rs2==x3, rd==x29, rs1_b0_val == -86, rs1_b2_val == 127
// opcode: ksll8 ; op1:x7; op2:x3; dest:x29; op1val:0xfa7f3faa;  op2val:0x2
TEST_PKRR_OP(ksll8, x29, x7, x3, 0x00000000, 0xfa7f3faa, 0x2, x7, x13, 56, x14)

inst_25:
// rs1==x2, rs2==x15, rd==x3, rs1_b0_val == -33, 
// opcode: ksll8 ; op1:x2; op2:x15; dest:x3; op1val:0x509f7df;  op2val:0x1
TEST_PKRR_OP(ksll8, x3, x2, x15, 0x00000000, 0x509f7df, 0x1, x2, x13, 64, x14)

inst_26:
// rs1==x25, rs2==x8, rd==x4, rs1_b0_val == -17, 
// opcode: ksll8 ; op1:x25; op2:x8; dest:x4; op1val:0x2002aaef;  op2val:0x0
TEST_PKRR_OP(ksll8, x4, x25, x8, 0x00000000, 0x2002aaef, 0x0, x25, x13, 72, x14)

inst_27:
// rs1==x28, rs2==x29, rd==x17, rs1_b0_val == -9, rs1_b2_val == 32
// opcode: ksll8 ; op1:x28; op2:x29; dest:x17; op1val:0x5520fdf7;  op2val:0xe
TEST_PKRR_OP(ksll8, x17, x28, x29, 0x00000000, 0x5520fdf7, 0xe, x28, x13, 80, x14)

inst_28:
// rs1==x27, rs2==x9, rd==x0, rs1_b0_val == -2, 
// opcode: ksll8 ; op1:x27; op2:x9; dest:x0; op1val:0xbf0701fe;  op2val:0xa
TEST_PKRR_OP(ksll8, x0, x27, x9, 0x00000000, 0xbf0701fe, 0xa, x27, x13, 88, x14)

inst_29:
// rs1==x22, rs2==x21, rd==x2, rs1_b0_val == 64, 
// opcode: ksll8 ; op1:x22; op2:x21; dest:x2; op1val:0x455fc40;  op2val:0x0
TEST_PKRR_OP(ksll8, x2, x22, x21, 0x00000000, 0x455fc40, 0x0, x22, x13, 96, x14)

inst_30:
// rs1==x6, rs2==x5, rd==x7, rs1_b0_val == 8, rs1_b2_val == -128, rs1_b1_val == 8
// opcode: ksll8 ; op1:x6; op2:x5; dest:x7; op1val:0x3800808;  op2val:0x13
TEST_PKRR_OP(ksll8, x7, x6, x5, 0x00000000, 0x3800808, 0x13, x6, x13, 104, x14)

inst_31:
// rs1==x23, rs1_b0_val == 4, 
// opcode: ksll8 ; op1:x23; op2:x26; dest:x7; op1val:0xfbf8fd04;  op2val:0x2
TEST_PKRR_OP(ksll8, x7, x23, x26, 0x00000000, 0xfbf8fd04, 0x2, x23, x13, 112, x14)

inst_32:
// rs2==x11, rs1_b2_val == -3, 
// opcode: ksll8 ; op1:x24; op2:x11; dest:x6; op1val:0xc0fd0555;  op2val:0x11
TEST_PKRR_OP(ksll8, x6, x24, x11, 0x00000000, 0xc0fd0555, 0x11, x24, x13, 120, x1)

inst_33:
// rd==x23, rs1_b2_val == 16, 
// opcode: ksll8 ; op1:x24; op2:x4; dest:x23; op1val:0x7100009;  op2val:0x13
TEST_PKRR_OP(ksll8, x23, x24, x4, 0x00000000, 0x7100009, 0x13, x24, x13, 128, x1)

inst_34:
// rs1_b2_val == 4, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f04fa10;  op2val:0x11
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x3f04fa10, 0x11, x30, x13, 136, x1)

inst_35:
// rs1_b2_val == 0, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x2000aa06;  op2val:0x13
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x2000aa06, 0x13, x30, x13, 144, x1)

inst_36:
// rs1_b2_val == -1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9fffefa;  op2val:0xe
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xf9fffefa, 0xe, x30, x13, 152, x1)

inst_37:
// rs1_b1_val == 85, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x32055ef;  op2val:0x1
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x32055ef, 0x1, x30, x13, 160, x1)

inst_38:
// rs1_b1_val == -65, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x8dfbff9;  op2val:0x8
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x8dfbff9, 0x8, x30, x13, 168, x1)

inst_39:
// rs1_b0_val == 1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf05fb01;  op2val:0xa
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xbf05fb01, 0xa, x30, x13, 176, x1)

inst_40:
// rs1_b1_val == -17, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f20ef07;  op2val:0x9
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x7f20ef07, 0x9, x30, x13, 184, x1)

inst_41:
// rs1_b0_val == -1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x900efff;  op2val:0x9
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x900efff, 0x9, x30, x13, 192, x1)

inst_42:
// rs1_b1_val == -128, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef88009;  op2val:0x5
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xfef88009, 0x5, x30, x13, 200, x1)

inst_43:
// rs1_b1_val == 32, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0320f7;  op2val:0x2
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xfd0320f7, 0x2, x30, x13, 208, x1)

inst_44:
// rs1_b1_val == 16, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x98010c0;  op2val:0x4
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x98010c0, 0x4, x30, x13, 216, x1)

inst_45:
// rs1_b2_val == -65, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x10bf01fb;  op2val:0xf
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x10bf01fb, 0xf, x30, x13, 224, x1)

inst_46:
// rs1_b2_val == -17, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ef03f9;  op2val:0x0
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x1ef03f9, 0x0, x30, x13, 232, x1)

inst_47:
// rs2_val == 6, rs1_b1_val == 64, rs1_b2_val == 85, rs1_b0_val == -65
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf85540bf;  op2val:0x6
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xf85540bf, 0x6, x30, x13, 240, x1)

inst_48:
// rs2_val == 4, rs1_b3_val == -33
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffcf7bf;  op2val:0x4
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xdffcf7bf, 0x4, x30, x13, 248, x1)

inst_49:
// rs1_b3_val == 85, rs1_b0_val == -128
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fcfb80;  op2val:0x13
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0x55fcfb80, 0x13, x30, x13, 256, x1)

inst_50:
// rs1_b0_val == -2, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0701fe;  op2val:0xa
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x00000000, 0xbf0701fe, 0xa, x30, x13, 264, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
