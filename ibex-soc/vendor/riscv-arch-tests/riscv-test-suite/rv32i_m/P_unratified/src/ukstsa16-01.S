
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstsa16 instruction of the RISC-V RV32PZicsr extension for the ukstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x23, rd==x29, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 8, rs2_h0_val == 65527, rs2_h1_val == 128
// opcode: ukstsa16 ; op1:x30; op2:x23; dest:x29; op1val:0x080000;  op2val:0x80fff7
TEST_RR_OP(ukstsa16, x29, x30, x23, 0x00000000, 0x080000, 0x80fff7, x4, 0, x8)

inst_1:// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x20, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 57343, rs2_h1_val == 57343, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: ukstsa16 ; op1:x6; op2:x6; dest:x20; op1val:0xdfff000c;  op2val:0xdfff0006
TEST_RR_OP(ukstsa16, x20, x6, x6, 0x00000000, 0xdfff000c, 0xdfff0006, x4, 8, x8)

inst_2:// rs1 == rd != rs2, rs1==x12, rs2==x16, rd==x12, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 2
// opcode: ukstsa16 ; op1:x12; op2:x16; dest:x12; op1val:0x0c000b;  op2val:0x02000b
TEST_RR_OP(ukstsa16, x12, x12, x16, 0x00000000, 0x0c000b, 0x02000b, x4, 16, x8)

inst_3:// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs2_h1_val == 43690, rs1_h0_val == 64511, rs2_h0_val == 43690
// opcode: ukstsa16 ; op1:x1; op2:x1; dest:x1; op1val:0x03fbff;  op2val:0xaaaaaaaa
TEST_RR_OP(ukstsa16, x1, x1, x1, 0x00000000, 0x03fbff, 0xaaaaaaaa, x4, 24, x8)

inst_4:// rs2 == rd != rs1, rs1==x19, rs2==x2, rd==x2, rs2_h1_val == 21845, rs2_h0_val == 1024, rs1_h1_val == 32, rs1_h0_val == 16384
// opcode: ukstsa16 ; op1:x19; op2:x2; dest:x2; op1val:0x204000;  op2val:0x55550400
TEST_RR_OP(ukstsa16, x2, x19, x2, 0x00000000, 0x204000, 0x55550400, x4, 32, x8)

inst_5:// rs1==x22, rs2==x17, rd==x23, rs2_h1_val == 32767, rs2_h0_val == 64511, rs1_h0_val == 65527
// opcode: ukstsa16 ; op1:x22; op2:x17; dest:x23; op1val:0x08fff7;  op2val:0x7ffffbff
TEST_RR_OP(ukstsa16, x23, x22, x17, 0x00000000, 0x08fff7, 0x7ffffbff, x4, 40, x8)

inst_6:// rs1==x31, rs2==x24, rd==x6, rs2_h1_val == 49151, rs2_h0_val == 16384, rs1_h1_val == 43690
// opcode: ukstsa16 ; op1:x31; op2:x24; dest:x6; op1val:0xaaaa000d;  op2val:0xbfff4000
TEST_RR_OP(ukstsa16, x6, x31, x24, 0x00000000, 0xaaaa000d, 0xbfff4000, x4, 48, x8)

inst_7:// rs1==x16, rs2==x26, rd==x31, rs2_h1_val == 61439, rs1_h1_val == 2048, rs2_h0_val == 65535, rs1_h0_val == 8
// opcode: ukstsa16 ; op1:x16; op2:x26; dest:x31; op1val:0x8000008;  op2val:0xefffffff
TEST_RR_OP(ukstsa16, x31, x16, x26, 0x00000000, 0x8000008, 0xefffffff, x4, 56, x8)

inst_8:// rs1==x0, rs2==x9, rd==x26, rs2_h1_val == 63487, rs1_h0_val == 1024, rs2_h0_val == 65533, rs1_h1_val == 128
// opcode: ukstsa16 ; op1:x0; op2:x9; dest:x26; op1val:0x800400;  op2val:0xf7fffffd
TEST_RR_OP(ukstsa16, x26, x0, x9, 0x00000000, 0x800400, 0xf7fffffd, x4, 64, x8)

inst_9:// rs1==x9, rs2==x14, rd==x30, rs2_h1_val == 64511, rs1_h1_val == 4, rs1_h0_val == 49151, rs2_h0_val == 0
// opcode: ukstsa16 ; op1:x9; op2:x14; dest:x30; op1val:0x04bfff;  op2val:0xfbff0000
TEST_RR_OP(ukstsa16, x30, x9, x14, 0x00000000, 0x04bfff, 0xfbff0000, x4, 72, x8)

inst_10:// rs1==x24, rs2==x11, rd==x17, rs2_h1_val == 65023, rs2_h0_val == 65534, rs1_h0_val == 65519, rs1_h1_val == 65534
// opcode: ukstsa16 ; op1:x24; op2:x11; dest:x17; op1val:0xfffeffef;  op2val:0xfdfffffe
TEST_RR_OP(ukstsa16, x17, x24, x11, 0x00000000, 0xfffeffef, 0xfdfffffe, x4, 80, x8)

inst_11:// rs1==x20, rs2==x21, rd==x19, rs2_h1_val == 65279, 
// opcode: ukstsa16 ; op1:x20; op2:x21; dest:x19; op1val:0x080400;  op2val:0xfeff0009
TEST_RR_OP(ukstsa16, x19, x20, x21, 0x00000000, 0x080400, 0xfeff0009, x4, 88, x8)

inst_12:// rs1==x7, rs2==x10, rd==x13, rs2_h1_val == 65407, rs1_h1_val == 49151
// opcode: ukstsa16 ; op1:x7; op2:x10; dest:x13; op1val:0xbffffff7;  op2val:0xff7f0400
TEST_RR_OP(ukstsa16, x13, x7, x10, 0x00000000, 0xbffffff7, 0xff7f0400, x4, 96, x8)

inst_13:// rs1==x2, rs2==x3, rd==x27, rs2_h1_val == 65471, rs1_h1_val == 0, rs2_h0_val == 65407, rs1_h0_val == 57343
// opcode: ukstsa16 ; op1:x2; op2:x3; dest:x27; op1val:0x00dfff;  op2val:0xffbfff7f
TEST_RR_OP(ukstsa16, x27, x2, x3, 0x00000000, 0x00dfff, 0xffbfff7f, x4, 104, x8)

inst_14:// rs1==x25, rs2==x5, rd==x28, rs2_h1_val == 65503, rs1_h0_val == 65279, rs1_h1_val == 512
// opcode: ukstsa16 ; op1:x25; op2:x5; dest:x28; op1val:0x200feff;  op2val:0xffdf4000
TEST_RR_OP(ukstsa16, x28, x25, x5, 0x00000000, 0x200feff, 0xffdf4000, x4, 112, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:// rs1==x23, rs2==x19, rd==x7, rs2_h1_val == 65519, rs1_h0_val == 512
// opcode: ukstsa16 ; op1:x23; op2:x19; dest:x7; op1val:0x0c0200;  op2val:0xffef0011
TEST_RR_OP(ukstsa16, x7, x23, x19, 0x00000000, 0x0c0200, 0xffef0011, x1, 0, x2)

inst_16:// rs1==x27, rs2==x28, rd==x10, rs2_h1_val == 65527, rs1_h0_val == 2
// opcode: ukstsa16 ; op1:x27; op2:x28; dest:x10; op1val:0x200002;  op2val:0xfff70009
TEST_RR_OP(ukstsa16, x10, x27, x28, 0x00000000, 0x200002, 0xfff70009, x1, 8, x2)

inst_17:// rs1==x13, rs2==x4, rd==x11, rs2_h1_val == 65531, rs2_h0_val == 65531, rs1_h0_val == 8192
// opcode: ukstsa16 ; op1:x13; op2:x4; dest:x11; op1val:0x042000;  op2val:0xfffbfffb
TEST_RR_OP(ukstsa16, x11, x13, x4, 0x00000000, 0x042000, 0xfffbfffb, x1, 16, x2)

inst_18:// rs1==x18, rs2==x29, rd==x21, rs2_h1_val == 65533, rs2_h0_val == 21845
// opcode: ukstsa16 ; op1:x18; op2:x29; dest:x21; op1val:0x0d0009;  op2val:0xfffd5555
TEST_RR_OP(ukstsa16, x21, x18, x29, 0x00000000, 0x0d0009, 0xfffd5555, x1, 24, x2)

inst_19:// rs1==x10, rs2==x12, rd==x25, rs2_h1_val == 65534, rs1_h1_val == 61439, rs1_h0_val == 21845
// opcode: ukstsa16 ; op1:x10; op2:x12; dest:x25; op1val:0xefff5555;  op2val:0xfffefff7
TEST_RR_OP(ukstsa16, x25, x10, x12, 0x00000000, 0xefff5555, 0xfffefff7, x1, 32, x2)

inst_20:// rs1==x3, rs2==x13, rd==x24, rs2_h1_val == 32768, rs1_h1_val == 16
// opcode: ukstsa16 ; op1:x3; op2:x13; dest:x24; op1val:0x100000;  op2val:0x8000000b
TEST_RR_OP(ukstsa16, x24, x3, x13, 0x00000000, 0x100000, 0x8000000b, x1, 40, x2)

inst_21:// rs1==x11, rs2==x22, rd==x16, rs2_h1_val == 16384, rs2_h0_val == 57343
// opcode: ukstsa16 ; op1:x11; op2:x22; dest:x16; op1val:0x04fbff;  op2val:0x4000dfff
TEST_RR_OP(ukstsa16, x16, x11, x22, 0x00000000, 0x04fbff, 0x4000dfff, x1, 48, x2)

inst_22:// rs1==x17, rs2==x0, rd==x3, rs2_h1_val == 8192, rs2_h0_val == 2, rs1_h1_val == 1
// opcode: ukstsa16 ; op1:x17; op2:x0; dest:x3; op1val:0x01fff7;  op2val:0x20000002
TEST_RR_OP(ukstsa16, x3, x17, x0, 0x00000000, 0x01fff7, 0x20000002, x1, 56, x2)

inst_23:// rs1==x14, rs2==x27, rd==x9, rs2_h1_val == 4096, rs2_h0_val == 65023, rs1_h1_val == 63487
// opcode: ukstsa16 ; op1:x14; op2:x27; dest:x9; op1val:0xf7ffffef;  op2val:0x1000fdff
TEST_RR_OP(ukstsa16, x9, x14, x27, 0x00000000, 0xf7ffffef, 0x1000fdff, x1, 64, x2)

inst_24:// rs1==x4, rs2==x31, rd==x8, rs2_h1_val == 2048, rs1_h1_val == 32768
// opcode: ukstsa16 ; op1:x4; op2:x31; dest:x8; op1val:0x80000400;  op2val:0x8000009
TEST_RR_OP(ukstsa16, x8, x4, x31, 0x00000000, 0x80000400, 0x8000009, x1, 72, x2)

inst_25:// rs1==x29, rs2==x25, rd==x15, rs2_h1_val == 1024, 
// opcode: ukstsa16 ; op1:x29; op2:x25; dest:x15; op1val:0x0c0002;  op2val:0x4000005
TEST_RR_OP(ukstsa16, x15, x29, x25, 0x00000000, 0x0c0002, 0x4000005, x1, 80, x2)

inst_26:// rs1==x26, rs2==x30, rd==x5, rs2_h1_val == 512, rs2_h0_val == 512
// opcode: ukstsa16 ; op1:x26; op2:x30; dest:x5; op1val:0x052000;  op2val:0x2000200
TEST_RR_OP(ukstsa16, x5, x26, x30, 0x00000000, 0x052000, 0x2000200, x1, 88, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27:// rs1==x21, rs2==x7, rd==x22, rs2_h1_val == 256, rs1_h0_val == 4, rs1_h1_val == 65527, rs2_h0_val == 49151
// opcode: ukstsa16 ; op1:x21; op2:x7; dest:x22; op1val:0xfff70004;  op2val:0x100bfff
TEST_RR_OP(ukstsa16, x22, x21, x7, 0x00000000, 0xfff70004, 0x100bfff, x1, 0, x2)

inst_28:// rs1==x5, rs2==x8, rd==x0, rs2_h1_val == 64, rs1_h0_val == 128, rs2_h0_val == 65519
// opcode: ukstsa16 ; op1:x5; op2:x8; dest:x0; op1val:0x010080;  op2val:0x40ffef
TEST_RR_OP(ukstsa16, x0, x5, x8, 0x00000000, 0x010080, 0x40ffef, x1, 8, x2)

inst_29:// rs1==x15, rs2==x20, rd==x18, rs2_h1_val == 32, rs1_h0_val == 4096
// opcode: ukstsa16 ; op1:x15; op2:x20; dest:x18; op1val:0x0c1000;  op2val:0x20aaaa
TEST_RR_OP(ukstsa16, x18, x15, x20, 0x00000000, 0x0c1000, 0x20aaaa, x1, 16, x2)

inst_30:// rs1==x28, rs2==x18, rd==x4, rs1_h0_val == 65531, 
// opcode: ukstsa16 ; op1:x28; op2:x18; dest:x4; op1val:0x0cfffb;  op2val:0x7ffffbff
TEST_RR_OP(ukstsa16, x4, x28, x18, 0x00000000, 0x0cfffb, 0x7ffffbff, x1, 24, x2)

inst_31:// rs1==x8, rs2==x15, rd==x14, rs1_h0_val == 65533, rs2_h0_val == 4, rs1_h1_val == 65279
// opcode: ukstsa16 ; op1:x8; op2:x15; dest:x14; op1val:0xfefffffd;  op2val:0x120004
TEST_RR_OP(ukstsa16, x14, x8, x15, 0x00000000, 0xfefffffd, 0x120004, x1, 32, x2)

inst_32:// rs1_h0_val == 65534, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffe;  op2val:0x0a000d
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x05fffe, 0x0a000d, x1, 40, x2)

inst_33:// rs1_h0_val == 32768, rs1_h1_val == 16384
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40008000;  op2val:0x4000009
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x40008000, 0x4000009, x1, 48, x2)

inst_34:// rs1_h0_val == 2048, rs1_h1_val == 65519, rs2_h0_val == 65503
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0800;  op2val:0x13ffdf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xffef0800, 0x13ffdf, x1, 56, x2)

inst_35:// rs1_h0_val == 256, rs2_h0_val == 65471
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040100;  op2val:0xffefffbf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x040100, 0xffefffbf, x1, 64, x2)

inst_36:// rs1_h0_val == 64, rs1_h1_val == 8192, rs2_h0_val == 256
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000040;  op2val:0x40000100
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x20000040, 0x40000100, x1, 72, x2)

inst_37:// rs1_h0_val == 32, rs1_h1_val == 21845
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550020;  op2val:0x0f0006
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x55550020, 0x0f0006, x1, 80, x2)

inst_38:// rs1_h0_val == 16, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x070010;  op2val:0xbfff0013
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x070010, 0xbfff0013, x1, 88, x2)

inst_39:// rs1_h0_val == 1, rs2_h0_val == 8
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x080001;  op2val:0xff7f0008
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x080001, 0xff7f0008, x1, 96, x2)

inst_40:// rs1_h0_val == 65535, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0affff;  op2val:0xf7ffffbf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x0affff, 0xf7ffffbf, x1, 104, x2)

inst_41:// rs2_h1_val == 16, rs1_h1_val == 65471, rs1_h0_val == 43690
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa;  op2val:0x10ffdf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xffbfaaaa, 0x10ffdf, x1, 112, x2)

inst_42:// rs2_h1_val == 8, rs1_h1_val == 65535
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff8000;  op2val:0x08000c
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xffff8000, 0x08000c, x1, 120, x2)

inst_43:// rs2_h1_val == 4, rs2_h0_val == 16
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090010;  op2val:0x040010
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x090010, 0x040010, x1, 128, x2)

inst_44:// rs2_h1_val == 1, rs2_h0_val == 32767, rs1_h0_val == 65503, rs1_h1_val == 32767
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf;  op2val:0x017fff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x7fffffdf, 0x017fff, x1, 136, x2)

inst_45:// rs2_h1_val == 65535, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x130010;  op2val:0xffff0011
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x130010, 0xffff0011, x1, 144, x2)

inst_46:// rs2_h0_val == 128, rs2_h1_val == 0
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000d;  op2val:0x000080
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x07000d, 0x000080, x1, 152, x2)

inst_47:// rs2_h0_val == 64, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e5555;  op2val:0x0b0040
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x0e5555, 0x0b0040, x1, 160, x2)

inst_48:// rs2_h0_val == 32, rs1_h1_val == 64511
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009;  op2val:0x110020
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfbff0009, 0x110020, x1, 168, x2)

inst_49:// rs2_h0_val == 1, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0x090001
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x55550040, 0x090001, x1, 176, x2)

inst_50:// rs1_h1_val == 65023, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080;  op2val:0x0f7fff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfdff0080, 0x0f7fff, x1, 184, x2)

inst_51:// rs1_h1_val == 65407, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0001;  op2val:0x00fff7
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xff7f0001, 0x00fff7, x1, 192, x2)

inst_52:// rs1_h1_val == 65503, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040;  op2val:0x0c0400
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xffdf0040, 0x0c0400, x1, 200, x2)

inst_53:// rs1_h1_val == 65531, rs2_h0_val == 63487
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000a;  op2val:0x10f7ff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfffb000a, 0x10f7ff, x1, 208, x2)

inst_54:// rs1_h1_val == 65533, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0001;  op2val:0x010007
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfffd0001, 0x010007, x1, 216, x2)

inst_55:// rs1_h1_val == 4096, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000a;  op2val:0x080009
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x1000000a, 0x080009, x1, 224, x2)

inst_56:// rs1_h1_val == 1024, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000008;  op2val:0x054000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x4000008, 0x054000, x1, 232, x2)

inst_57:// rs1_h1_val == 256, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000005;  op2val:0x1000020
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x1000005, 0x1000020, x1, 240, x2)

inst_58:// rs1_h1_val == 64, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000f;  op2val:0xfdffffef
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x40000f, 0xfdffffef, x1, 248, x2)

inst_59:// rs2_h0_val == 32768, rs1_h0_val == 61439
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06efff;  op2val:0x8008000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x06efff, 0x8008000, x1, 256, x2)

inst_60:// rs1_h1_val == 2, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x021000;  op2val:0xff7fdfff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x021000, 0xff7fdfff, x1, 264, x2)

inst_61:// rs2_h0_val == 61439, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafeff;  op2val:0xfbffefff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xaaaafeff, 0xfbffefff, x1, 272, x2)

inst_62:// rs2_h0_val == 65279, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000a;  op2val:0x80feff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x02000a, 0x80feff, x1, 280, x2)

inst_63:// rs1_h0_val == 32767, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x067fff;  op2val:0x2000001
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x067fff, 0x2000001, x1, 288, x2)

inst_64:// rs1_h0_val == 63487, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ff;  op2val:0x00000e
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xffdff7ff, 0x00000e, x1, 296, x2)

inst_65:// rs1_h0_val == 65023, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cfdff;  op2val:0x400aaaa
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x0cfdff, 0x400aaaa, x1, 304, x2)

inst_66:// rs1_h0_val == 65407, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbff7f;  op2val:0x110004
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfffbff7f, 0x110004, x1, 312, x2)

inst_67:// rs1_h0_val == 65471, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf;  op2val:0x800012
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfeffffbf, 0x800012, x1, 320, x2)

inst_68:// rs2_h0_val == 8192, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff;  op2val:0x042000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xfbfff7ff, 0x042000, x1, 328, x2)

inst_69:// rs2_h0_val == 4096, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03bfff;  op2val:0x021000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x03bfff, 0x021000, x1, 336, x2)

inst_70:// rs2_h0_val == 2048, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff;  op2val:0x0b0800
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x02fdff, 0x0b0800, x1, 344, x2)

inst_71:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 57343, rs2_h1_val == 57343, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000c;  op2val:0xdfff0006
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0xdfff000c, 0xdfff0006, x1, 352, x2)

inst_72:// rs2_h1_val == 43690, rs1_h0_val == 64511, rs2_h0_val == 43690
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fbff;  op2val:0xaaaaaaaa
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x03fbff, 0xaaaaaaaa, x1, 360, x2)

inst_73:// rs2_h1_val == 63487, rs1_h0_val == 1024, rs2_h0_val == 65533, rs1_h1_val == 128
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800400;  op2val:0xf7fffffd
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x800400, 0xf7fffffd, x1, 368, x2)

inst_74:// rs2_h1_val == 8192, rs2_h0_val == 2, rs1_h1_val == 1
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff7;  op2val:0x20000002
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x01fff7, 0x20000002, x1, 376, x2)

inst_75:// rs2_h1_val == 64, rs1_h0_val == 128, rs2_h0_val == 65519
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010080;  op2val:0x40ffef
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x00000000, 0x010080, 0x40ffef, x1, 384, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 98*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
