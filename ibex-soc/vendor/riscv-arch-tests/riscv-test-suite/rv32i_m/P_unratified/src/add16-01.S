
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add16 instruction of the RISC-V RV32PZicsr extension for the add16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",add16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x26, rd==x22, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -1, rs2_h0_val == -33
// opcode: add16 ; op1:x3; op2:x26; dest:x22; op1val:0xffff8000;  op2val:0xfffcffdf
TEST_RR_OP(add16, x22, x3, x26, 0x00000000, 0xffff8000, 0xfffcffdf, x7, 0, x18)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x12, rs1_h1_val == rs2_h1_val, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -8193, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: add16 ; op1:x31; op2:x31; dest:x12; op1val:0x030006;  op2val:0x03dfff
TEST_RR_OP(add16, x12, x31, x31, 0x00000000, 0x030006, 0x03dfff, x7, 4, x18)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x4, rd==x30, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -8193, rs2_h0_val == -3, rs1_h0_val == 0
// opcode: add16 ; op1:x30; op2:x4; dest:x30; op1val:0xdfff0000;  op2val:0x05fffd
TEST_RR_OP(add16, x30, x30, x4, 0x00000000, 0xdfff0000, 0x05fffd, x7, 8, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -1025, rs2_h1_val == -1025, rs1_h1_val == 64
// opcode: add16 ; op1:x17; op2:x17; dest:x17; op1val:0x400006;  op2val:0xfbfffbff
TEST_RR_OP(add16, x17, x17, x17, 0x00000000, 0x400006, 0xfbfffbff, x7, 12, x18)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x6, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h0_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h1_val == -2049, rs1_h1_val == -16385
// opcode: add16 ; op1:x25; op2:x6; dest:x6; op1val:0xbfff0800;  op2val:0xf7ff0800
TEST_RR_OP(add16, x6, x25, x6, 0x00000000, 0xbfff0800, 0xf7ff0800, x7, 16, x18)

inst_5:
// rs1==x10, rs2==x19, rd==x29, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -3, rs2_h0_val == 16
// opcode: add16 ; op1:x10; op2:x19; dest:x29; op1val:0xfffdfffc;  op2val:0xfff80010
TEST_RR_OP(add16, x29, x10, x19, 0x00000000, 0xfffdfffc, 0xfff80010, x7, 20, x18)

inst_6:
// rs1==x23, rs2==x27, rd==x26, rs2_h1_val == -21846, rs1_h1_val == -65, rs2_h0_val == 2, rs1_h0_val == 21845
// opcode: add16 ; op1:x23; op2:x27; dest:x26; op1val:0xffbf5555;  op2val:0xaaaa0002
TEST_RR_OP(add16, x26, x23, x27, 0x00000000, 0xffbf5555, 0xaaaa0002, x7, 24, x18)

inst_7:
// rs1==x1, rs2==x0, rd==x10, rs2_h1_val == 21845, rs2_h0_val == -17
// opcode: add16 ; op1:x1; op2:x0; dest:x10; op1val:0x3ffffff8;  op2val:0x5555ffef
TEST_RR_OP(add16, x10, x1, x0, 0x00000000, 0x3ffffff8, 0x5555ffef, x7, 28, x18)

inst_8:
// rs1==x27, rs2==x10, rd==x13, rs2_h1_val == 32767, rs2_h0_val == 32767, rs1_h0_val == 64
// opcode: add16 ; op1:x27; op2:x10; dest:x13; op1val:0x090040;  op2val:0x7fff7fff
TEST_RR_OP(add16, x13, x27, x10, 0x00000000, 0x090040, 0x7fff7fff, x7, 32, x18)

inst_9:
// rs1==x19, rs2==x12, rd==x3, rs2_h1_val == -16385, rs1_h1_val == -257
// opcode: add16 ; op1:x19; op2:x12; dest:x3; op1val:0xfeff3fff;  op2val:0xbfff0009
TEST_RR_OP(add16, x3, x19, x12, 0x00000000, 0xfeff3fff, 0xbfff0009, x7, 36, x18)

inst_10:
// rs1==x26, rs2==x11, rd==x9, rs2_h1_val == -8193, rs1_h1_val == -2049, rs2_h0_val == 16384
// opcode: add16 ; op1:x26; op2:x11; dest:x9; op1val:0xf7ff0800;  op2val:0xdfff4000
TEST_RR_OP(add16, x9, x26, x11, 0x00000000, 0xf7ff0800, 0xdfff4000, x7, 40, x18)

inst_11:
// rs1==x2, rs2==x5, rd==x8, rs2_h1_val == -4097, rs1_h0_val == 16384, rs1_h1_val == -21846, rs2_h0_val == 8
// opcode: add16 ; op1:x2; op2:x5; dest:x8; op1val:0xaaaa4000;  op2val:0xefff0008
TEST_RR_OP(add16, x8, x2, x5, 0x00000000, 0xaaaa4000, 0xefff0008, x7, 44, x18)

inst_12:
// rs1==x0, rs2==x13, rd==x15, rs2_h1_val == -513, 
// opcode: add16 ; op1:x0; op2:x13; dest:x15; op1val:0x090005;  op2val:0xfdff3fff
TEST_RR_OP(add16, x15, x0, x13, 0x00000000, 0x090005, 0xfdff3fff, x7, 48, x18)

inst_13:
// rs1==x11, rs2==x23, rd==x27, rs2_h1_val == -257, 
// opcode: add16 ; op1:x11; op2:x23; dest:x27; op1val:0xfff8c000;  op2val:0xfeffffdf
TEST_RR_OP(add16, x27, x11, x23, 0x00000000, 0xfff8c000, 0xfeffffdf, x7, 52, x18)

inst_14:
// rs1==x29, rs2==x15, rd==x16, rs2_h1_val == -129, rs1_h0_val == 8192, rs1_h1_val == -129
// opcode: add16 ; op1:x29; op2:x15; dest:x16; op1val:0xff7f2000;  op2val:0xff7f0007
TEST_RR_OP(add16, x16, x29, x15, 0x00000000, 0xff7f2000, 0xff7f0007, x7, 56, x18)

inst_15:
// rs1==x14, rs2==x28, rd==x31, rs2_h1_val == -65, rs2_h0_val == -129
// opcode: add16 ; op1:x14; op2:x28; dest:x31; op1val:0xffffc000;  op2val:0xffbfff7f
TEST_RR_OP(add16, x31, x14, x28, 0x00000000, 0xffffc000, 0xffbfff7f, x7, 60, x18)

inst_16:
// rs1==x6, rs2==x20, rd==x0, rs2_h1_val == -33, rs1_h0_val == -513, rs1_h1_val == -17
// opcode: add16 ; op1:x6; op2:x20; dest:x0; op1val:0xffeffdff;  op2val:0xffdffff8
TEST_RR_OP(add16, x0, x6, x20, 0x00000000, 0xffeffdff, 0xffdffff8, x7, 64, x10)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x20, rs2==x25, rd==x1, rs2_h1_val == -17, rs2_h0_val == -21846, rs1_h0_val == 4
// opcode: add16 ; op1:x20; op2:x25; dest:x1; op1val:0xfff90004;  op2val:0xffefaaaa
TEST_RR_OP(add16, x1, x20, x25, 0x00000000, 0xfff90004, 0xffefaaaa, x6, 0, x10)

inst_18:
// rs1==x12, rs2==x30, rd==x11, rs2_h1_val == -9, rs1_h0_val == 1, rs1_h1_val == 8
// opcode: add16 ; op1:x12; op2:x30; dest:x11; op1val:0x080001;  op2val:0xfff70008
TEST_RR_OP(add16, x11, x12, x30, 0x00000000, 0x080001, 0xfff70008, x6, 4, x10)

inst_19:
// rs1==x21, rs2==x1, rd==x7, rs2_h1_val == -5, rs1_h1_val == 32, rs2_h0_val == 64
// opcode: add16 ; op1:x21; op2:x1; dest:x7; op1val:0x20fffc;  op2val:0xfffb0040
TEST_RR_OP(add16, x7, x21, x1, 0x00000000, 0x20fffc, 0xfffb0040, x6, 8, x10)

inst_20:
// rs1==x22, rs2==x24, rd==x18, rs2_h1_val == -3, rs1_h1_val == 2
// opcode: add16 ; op1:x22; op2:x24; dest:x18; op1val:0x020003;  op2val:0xfffdfffc
TEST_RR_OP(add16, x18, x22, x24, 0x00000000, 0x020003, 0xfffdfffc, x6, 12, x10)

inst_21:
// rs1==x18, rs2==x22, rd==x20, rs2_h1_val == -2, rs2_h0_val == 1, rs1_h0_val == 8, rs1_h1_val == 21845
// opcode: add16 ; op1:x18; op2:x22; dest:x20; op1val:0x55550008;  op2val:0xfffe0001
TEST_RR_OP(add16, x20, x18, x22, 0x00000000, 0x55550008, 0xfffe0001, x6, 16, x10)

inst_22:
// rs1==x7, rs2==x29, rd==x2, rs2_h1_val == -32768, 
// opcode: add16 ; op1:x7; op2:x29; dest:x2; op1val:0xfffc0008;  op2val:0x8000fff8
TEST_RR_OP(add16, x2, x7, x29, 0x00000000, 0xfffc0008, 0x8000fff8, x6, 20, x10)

inst_23:
// rs1==x4, rs2==x3, rd==x19, rs2_h1_val == 16384, rs1_h1_val == 0
// opcode: add16 ; op1:x4; op2:x3; dest:x19; op1val:0x00c000;  op2val:0x4000dfff
TEST_RR_OP(add16, x19, x4, x3, 0x00000000, 0x00c000, 0x4000dfff, x6, 24, x10)

inst_24:
// rs1==x15, rs2==x16, rd==x4, rs2_h1_val == 8192, rs1_h0_val == -2049
// opcode: add16 ; op1:x15; op2:x16; dest:x4; op1val:0xfefff7ff;  op2val:0x20000005
TEST_RR_OP(add16, x4, x15, x16, 0x00000000, 0xfefff7ff, 0x20000005, x6, 28, x10)

inst_25:
// rs1==x28, rs2==x21, rd==x24, rs2_h1_val == 4096, 
// opcode: add16 ; op1:x28; op2:x21; dest:x24; op1val:0x55558000;  op2val:0x10000007
TEST_RR_OP(add16, x24, x28, x21, 0x00000000, 0x55558000, 0x10000007, x6, 32, x10)

inst_26:
// rs1==x16, rs2==x14, rd==x5, rs2_h1_val == 2048, 
// opcode: add16 ; op1:x16; op2:x14; dest:x5; op1val:0x55550006;  op2val:0x8000005
TEST_RR_OP(add16, x5, x16, x14, 0x00000000, 0x55550006, 0x8000005, x6, 36, x10)

inst_27:
// rs1==x5, rs2==x2, rd==x21, rs2_h1_val == 1024, rs1_h0_val == 1024
// opcode: add16 ; op1:x5; op2:x2; dest:x21; op1val:0xffef0400;  op2val:0x400fffa
TEST_RR_OP(add16, x21, x5, x2, 0x00000000, 0xffef0400, 0x400fffa, x6, 40, x10)

inst_28:
// rs1==x9, rs2==x8, rd==x14, rs2_h1_val == 512, rs1_h0_val == 128
// opcode: add16 ; op1:x9; op2:x8; dest:x14; op1val:0xffff0080;  op2val:0x2000008
TEST_RR_OP(add16, x14, x9, x8, 0x00000000, 0xffff0080, 0x2000008, x6, 44, x10)

inst_29:
// rs1==x8, rs2==x7, rd==x28, rs2_h1_val == 256, rs1_h0_val == -2, rs2_h0_val == -1, rs1_h1_val == 1
// opcode: add16 ; op1:x8; op2:x7; dest:x28; op1val:0x01fffe;  op2val:0x100ffff
TEST_RR_OP(add16, x28, x8, x7, 0x00000000, 0x01fffe, 0x100ffff, x6, 48, x10)

inst_30:
// rs1==x24, rs2==x9, rd==x25, rs2_h1_val == 128, rs2_h0_val == -5, rs1_h1_val == -513
// opcode: add16 ; op1:x24; op2:x9; dest:x25; op1val:0xfdfffff6;  op2val:0x80fffb
TEST_RR_OP(add16, x25, x24, x9, 0x00000000, 0xfdfffff6, 0x80fffb, x6, 52, x10)

inst_31:
// rs1==x13, rs2==x18, rd==x23, rs2_h1_val == 64, rs2_h0_val == 512
// opcode: add16 ; op1:x13; op2:x18; dest:x23; op1val:0xc000c000;  op2val:0x400200
TEST_RR_OP(add16, x23, x13, x18, 0x00000000, 0xc000c000, 0x400200, x6, 56, x10)

inst_32:
// rs2_h1_val == 32, rs1_h0_val == -1025
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff;  op2val:0x200005
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x20fbff, 0x200005, x6, 60, x10)

inst_33:
// rs2_h1_val == 16, rs1_h1_val == -33, rs1_h0_val == 256
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0100;  op2val:0x100001
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xffdf0100, 0x100001, x6, 64, x1)

inst_34:
// rs1_h0_val == -257, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8feff;  op2val:0xfffa0007
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfff8feff, 0xfffa0007, x6, 68, x1)

inst_35:
// rs1_h0_val == -129, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ff7f;  op2val:0xffef0002
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x03ff7f, 0xffef0002, x6, 72, x1)

inst_36:
// rs1_h0_val == -65, rs2_h0_val == -513, rs1_h1_val == 16
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffbf;  op2val:0xfefffdff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x10ffbf, 0xfefffdff, x6, 76, x1)

inst_37:
// rs1_h0_val == -33, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdf;  op2val:0xff7ffff9
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfff6ffdf, 0xff7ffff9, x6, 80, x1)

inst_38:
// rs1_h0_val == -17, rs1_h1_val == 4
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0x200fff9
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x04ffef, 0x200fff9, x6, 84, x1)

inst_39:
// rs1_h0_val == -9, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff7;  op2val:0x40000200
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xffbffff7, 0x40000200, x6, 88, x1)

inst_40:
// rs1_h0_val == -5, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb;  op2val:0xfffefbff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfff6fffb, 0xfffefbff, x6, 92, x1)

inst_41:
// rs1_h0_val == -3, rs2_h0_val == -16385
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffd;  op2val:0x80bfff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xc000fffd, 0x80bfff, x6, 96, x1)

inst_42:
// rs1_h0_val == 4096, rs2_h1_val == 2
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff1000;  op2val:0x02ffdf
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xdfff1000, 0x02ffdf, x6, 100, x1)

inst_43:
// rs1_h0_val == 512, rs2_h0_val == -4097, rs2_h1_val == 1
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x010200;  op2val:0x01efff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x010200, 0x01efff, x6, 104, x1)

inst_44:
// rs1_h0_val == 32, rs1_h1_val == -2
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0020;  op2val:0x030800
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfffe0020, 0x030800, x6, 108, x1)

inst_45:
// rs1_h0_val == 16, rs1_h1_val == -9
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70010;  op2val:0xfffaffdf
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfff70010, 0xfffaffdf, x6, 112, x1)

inst_46:
// rs1_h0_val == 2, rs2_h0_val == 256
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0002;  op2val:0x40000100
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfffa0002, 0x40000100, x6, 116, x1)

inst_47:
// rs1_h0_val == -1, rs2_h0_val == -257
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffff;  op2val:0xdffffeff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x20ffff, 0xdffffeff, x6, 120, x1)

inst_48:
// rs2_h1_val == 8, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0100;  op2val:0x08fffd
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xff7f0100, 0x08fffd, x6, 124, x1)

inst_49:
// rs2_h1_val == 4, rs1_h1_val == -4097, rs2_h0_val == -2049
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffdff;  op2val:0x04f7ff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xeffffdff, 0x04f7ff, x6, 128, x1)

inst_50:
// rs2_h1_val == 0, rs2_h0_val == 4
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff85555;  op2val:0x000004
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfff85555, 0x000004, x6, 132, x1)

inst_51:
// rs2_h0_val == -2, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff8;  op2val:0xfffbfffe
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x06fff8, 0xfffbfffe, x6, 136, x1)

inst_52:
// rs2_h0_val == -32768, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x062000;  op2val:0xfff68000
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x062000, 0xfff68000, x6, 140, x1)

inst_53:
// rs2_h0_val == 8192, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x060007;  op2val:0x55552000
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x060007, 0x55552000, x6, 144, x1)

inst_54:
// rs2_h0_val == 4096, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555;  op2val:0xf7ff1000
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xefff5555, 0xf7ff1000, x6, 148, x1)

inst_55:
// rs2_h0_val == 1024, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffc;  op2val:0x800400
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xdffffffc, 0x800400, x6, 152, x1)

inst_56:
// rs2_h0_val == 128, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0400;  op2val:0x060080
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xffdf0400, 0x060080, x6, 156, x1)

inst_57:
// rs2_h0_val == 32, rs2_h1_val == -1, rs1_h0_val == 32767
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x107fff;  op2val:0xffff0020
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x107fff, 0xffff0020, x6, 160, x1)

inst_58:
// rs2_h0_val == 0, rs1_h1_val == 1024
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800;  op2val:0x090000
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x4000800, 0x090000, x6, 164, x1)

inst_59:
// rs1_h1_val == 32767, rs2_h0_val == -9
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff8000;  op2val:0xffbffff7
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x7fff8000, 0xffbffff7, x6, 168, x1)

inst_60:
// rs1_h1_val == -1025, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff;  op2val:0xfbfffffe
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfbfff7ff, 0xfbfffffe, x6, 172, x1)

inst_61:
// rs1_h1_val == -5, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004;  op2val:0xfff7fff8
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xfffb0004, 0xfff7fff8, x6, 176, x1)

inst_62:
// rs1_h1_val == -32768, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe;  op2val:0x000007
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x8000fffe, 0x000007, x6, 180, x1)

inst_63:
// rs1_h1_val == 16384, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x40003fff;  op2val:0xffeffffe
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x40003fff, 0xffeffffe, x6, 184, x1)

inst_64:
// rs1_h1_val == 8192, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000006;  op2val:0xdffffff8
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x20000006, 0xdffffff8, x6, 188, x1)

inst_65:
// rs1_h1_val == 4096, rs2_h0_val == 21845
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000c000;  op2val:0xffdf5555
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x1000c000, 0xffdf5555, x6, 192, x1)

inst_66:
// rs1_h1_val == 2048, rs2_h0_val == -65
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000040;  op2val:0x7fffffbf
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x8000040, 0x7fffffbf, x6, 196, x1)

inst_67:
// rs1_h1_val == 512, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff6;  op2val:0x200ffbf
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x200fff6, 0x200ffbf, x6, 200, x1)

inst_68:
// rs1_h0_val == -21846, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaa;  op2val:0x100feff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0xffefaaaa, 0x100feff, x6, 204, x1)

inst_69:
// rs1_h1_val == 256, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe;  op2val:0x400002
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x100fffe, 0x400002, x6, 208, x1)

inst_70:
// rs1_h0_val == -16385, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bfff;  op2val:0x4007fff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x00bfff, 0x4007fff, x6, 212, x1)

inst_71:
// rs1_h0_val == -8193, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffdfff;  op2val:0xfffcffff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x3fffdfff, 0xfffcffff, x6, 216, x1)

inst_72:
// rs1_h0_val == -4097, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff;  op2val:0x09fffe
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x7fffefff, 0x09fffe, x6, 220, x1)

inst_73:
// rs1_h1_val == 128, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffbf;  op2val:0x40000200
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x80ffbf, 0x40000200, x6, 224, x1)

inst_74:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -1025, rs2_h1_val == -1025, rs1_h1_val == 64
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x400006;  op2val:0xfbfffbff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x400006, 0xfbfffbff, x6, 228, x1)

inst_75:
// rs2_h1_val == 21845, rs2_h0_val == -17
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff8;  op2val:0x5555ffef
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x3ffffff8, 0x5555ffef, x6, 232, x1)

inst_76:
// rs2_h1_val == -513, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x090005;  op2val:0xfdff3fff
TEST_RR_OP(add16, x31, x30, x29, 0x00000000, 0x090005, 0xfdff3fff, x6, 236, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
