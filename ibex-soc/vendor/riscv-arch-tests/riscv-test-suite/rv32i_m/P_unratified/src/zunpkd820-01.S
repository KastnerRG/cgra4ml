
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd820 instruction of the RISC-V RV32PZicsr extension for the zunpkd820 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd820)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x15, rd==x25, rs1_b0_val == 0, rs1_b2_val == 223, rs1_b3_val == 254, rs1_b1_val == 32
// opcode: zunpkd820 ; op1:x15; dest:x25; op1val:0xfedf2000;
TEST_RD_OP( zunpkd820, x25, x15, 0x00000000, 0xfedf2000, x3, 0, x9)

inst_1:
// rs1==x30, rd==x21, rs1_b3_val == 170, rs1_b1_val == 251, rs1_b2_val == 128
// opcode: zunpkd820 ; op1:x30; dest:x21; op1val:0xaa80fb09;
TEST_RD_OP( zunpkd820, x21, x30, 0x00000000, 0xaa80fb09, x3, 4, x9)

inst_2:
// rs1==x18, rd==x23, rs1_b3_val == 85, rs1_b0_val == 16, rs1_b1_val == 8
// opcode: zunpkd820 ; op1:x18; dest:x23; op1val:0x55060810;
TEST_RD_OP( zunpkd820, x23, x18, 0x00000000, 0x55060810, x3, 8, x9)

inst_3:
// rs1==x8, rd==x29, rs1_b3_val == 127, rs1_b0_val == 170, rs1_b2_val == 2
// opcode: zunpkd820 ; op1:x8; dest:x29; op1val:0x7f0206aa;
TEST_RD_OP( zunpkd820, x29, x8, 0x00000000, 0x7f0206aa, x3, 12, x9)

inst_4:
// rs1==x10, rd==x1, rs1_b3_val == 191, rs1_b1_val == 253
// opcode: zunpkd820 ; op1:x10; dest:x1; op1val:0xbf0bfd10;
TEST_RD_OP( zunpkd820, x1, x10, 0x00000000, 0xbf0bfd10, x3, 16, x9)

inst_5:
// rs1==x26, rd==x22, rs1_b3_val == 223, rs1_b0_val == 191, rs1_b2_val == 8, rs1_b1_val == 0
// opcode: zunpkd820 ; op1:x26; dest:x22; op1val:0xdf0800bf;
TEST_RD_OP( zunpkd820, x22, x26, 0x00000000, 0xdf0800bf, x3, 20, x9)

inst_6:
// rs1==x1, rd==x17, rs1_b3_val == 239, rs1_b1_val == 254, rs1_b0_val == 239, rs1_b2_val == 254
// opcode: zunpkd820 ; op1:x1; dest:x17; op1val:0xeffefeef;
TEST_RD_OP( zunpkd820, x17, x1, 0x00000000, 0xeffefeef, x3, 24, x9)

inst_7:
// rs1==x22, rd==x19, rs1_b3_val == 247, rs1_b1_val == 85, rs1_b0_val == 1
// opcode: zunpkd820 ; op1:x22; dest:x19; op1val:0xf7fe5501;
TEST_RD_OP( zunpkd820, x19, x22, 0x00000000, 0xf7fe5501, x3, 28, x9)

inst_8:
// rs1==x24, rd==x7, rs1_b3_val == 251, rs1_b0_val == 127
// opcode: zunpkd820 ; op1:x24; dest:x7; op1val:0xfb110a7f;
TEST_RD_OP( zunpkd820, x7, x24, 0x00000000, 0xfb110a7f, x3, 32, x9)

inst_9:
// rs1==x7, rd==x18, rs1_b3_val == 253, rs1_b2_val == 251, rs1_b0_val == 85
// opcode: zunpkd820 ; op1:x7; dest:x18; op1val:0xfdfb2055;
TEST_RD_OP( zunpkd820, x18, x7, 0x00000000, 0xfdfb2055, x3, 36, x9)

inst_10:
// rs1==x23, rd==x10, rs1_b3_val == 128, rs1_b1_val == 64
// opcode: zunpkd820 ; op1:x23; dest:x10; op1val:0x800940aa;
TEST_RD_OP( zunpkd820, x10, x23, 0x00000000, 0x800940aa, x3, 40, x9)

inst_11:
// rs1==x0, rd==x16, rs1_b3_val == 64, rs1_b1_val == 127
// opcode: zunpkd820 ; op1:x0; dest:x16; op1val:0x400f7f0c;
TEST_RD_OP( zunpkd820, x16, x0, 0x00000000, 0x400f7f0c, x3, 44, x9)

inst_12:
// rs1==x5, rd==x20, rs1_b3_val == 32, rs1_b2_val == 127
// opcode: zunpkd820 ; op1:x5; dest:x20; op1val:0x207ffe10;
TEST_RD_OP( zunpkd820, x20, x5, 0x00000000, 0x207ffe10, x3, 48, x9)

inst_13:
// rs1==x20, rd==x6, rs1_b3_val == 16, 
// opcode: zunpkd820 ; op1:x20; dest:x6; op1val:0x10115555;
TEST_RD_OP( zunpkd820, x6, x20, 0x00000000, 0x10115555, x3, 52, x9)

inst_14:
// rs1==x2, rd==x31, rs1_b3_val == 8, 
// opcode: zunpkd820 ; op1:x2; dest:x31; op1val:0x8080709;
TEST_RD_OP( zunpkd820, x31, x2, 0x00000000, 0x8080709, x3, 56, x9)

inst_15:
// rs1==x28, rd==x27, rs1_b3_val == 4, rs1_b0_val == 247
// opcode: zunpkd820 ; op1:x28; dest:x27; op1val:0x40f03f7;
TEST_RD_OP( zunpkd820, x27, x28, 0x00000000, 0x40f03f7, x3, 60, x9)

inst_16:
// rs1==x4, rd==x24, rs1_b3_val == 2, rs1_b2_val == 255
// opcode: zunpkd820 ; op1:x4; dest:x24; op1val:0x2fffd0e;
TEST_RD_OP( zunpkd820, x24, x4, 0x00000000, 0x2fffd0e, x3, 64, x9)

inst_17:
// rs1==x16, rd==x12, rs1_b3_val == 1, 
// opcode: zunpkd820 ; op1:x16; dest:x12; op1val:0x1ff0d0c;
TEST_RD_OP( zunpkd820, x12, x16, 0x00000000, 0x1ff0d0c, x3, 68, x9)

inst_18:
// rs1==x29, rd==x8, rs1_b3_val == 255, 
// opcode: zunpkd820 ; op1:x29; dest:x8; op1val:0xff0d0ef7;
TEST_RD_OP( zunpkd820, x8, x29, 0x00000000, 0xff0d0ef7, x3, 72, x9)

inst_19:
// rs1==x6, rd==x4, rs1_b3_val == 0, 
// opcode: zunpkd820 ; op1:x6; dest:x4; op1val:0x031307;
TEST_RD_OP( zunpkd820, x4, x6, 0x00000000, 0x031307, x3, 76, x9)

inst_20:
// rs1==x11, rd==x13, rs1_b2_val == 170, rs1_b0_val == 64
// opcode: zunpkd820 ; op1:x11; dest:x13; op1val:0x7faa0740;
TEST_RD_OP( zunpkd820, x13, x11, 0x00000000, 0x7faa0740, x3, 80, x9)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:
// rs1==x21, rd==x14, rs1_b2_val == 85, 
// opcode: zunpkd820 ; op1:x21; dest:x14; op1val:0xe550305;
TEST_RD_OP( zunpkd820, x14, x21, 0x00000000, 0xe550305, x1, 0, x4)

inst_22:
// rs1==x25, rd==x15, rs1_b0_val == 223, 
// opcode: zunpkd820 ; op1:x25; dest:x15; op1val:0xe0707df;
TEST_RD_OP( zunpkd820, x15, x25, 0x00000000, 0xe0707df, x1, 4, x4)

inst_23:
// rs1==x12, rd==x5, rs1_b0_val == 251, 
// opcode: zunpkd820 ; op1:x12; dest:x5; op1val:0xfbdf06fb;
TEST_RD_OP( zunpkd820, x5, x12, 0x00000000, 0xfbdf06fb, x1, 8, x4)

inst_24:
// rs1==x9, rd==x30, rs1_b0_val == 253, rs1_b1_val == 2
// opcode: zunpkd820 ; op1:x9; dest:x30; op1val:0x31202fd;
TEST_RD_OP( zunpkd820, x30, x9, 0x00000000, 0x31202fd, x1, 12, x4)

inst_25:
// rs1==x31, rd==x2, rs1_b0_val == 254, 
// opcode: zunpkd820 ; op1:x31; dest:x2; op1val:0x95509fe;
TEST_RD_OP( zunpkd820, x2, x31, 0x00000000, 0x95509fe, x1, 16, x4)

inst_26:
// rs1==x27, rd==x26, rs1_b0_val == 128, 
// opcode: zunpkd820 ; op1:x27; dest:x26; op1val:0x7ffb0c80;
TEST_RD_OP( zunpkd820, x26, x27, 0x00000000, 0x7ffb0c80, x1, 20, x4)

inst_27:
// rs1==x3, rd==x28, rs1_b0_val == 32, rs1_b1_val == 247
// opcode: zunpkd820 ; op1:x3; dest:x28; op1val:0x137ff720;
TEST_RD_OP( zunpkd820, x28, x3, 0x00000000, 0x137ff720, x1, 24, x4)

inst_28:
// rs1==x19, rd==x3, rs1_b0_val == 8, rs1_b1_val == 191
// opcode: zunpkd820 ; op1:x19; dest:x3; op1val:0xf70ebf08;
TEST_RD_OP( zunpkd820, x3, x19, 0x00000000, 0xf70ebf08, x1, 28, x4)

inst_29:
// rs1==x13, rd==x0, rs1_b0_val == 4, rs1_b1_val == 170, rs1_b2_val == 16
// opcode: zunpkd820 ; op1:x13; dest:x0; op1val:0xb10aa04;
TEST_RD_OP( zunpkd820, x0, x13, 0x00000000, 0xb10aa04, x1, 32, x4)

inst_30:
// rs1==x17, rd==x9, rs1_b0_val == 2, 
// opcode: zunpkd820 ; op1:x17; dest:x9; op1val:0xfe0b02;
TEST_RD_OP( zunpkd820, x9, x17, 0x00000000, 0xfe0b02, x1, 36, x4)

inst_31:
// rs1==x14, rd==x11, rs1_b0_val == 255, 
// opcode: zunpkd820 ; op1:x14; dest:x11; op1val:0x130d05ff;
TEST_RD_OP( zunpkd820, x11, x14, 0x00000000, 0x130d05ff, x1, 40, x4)

inst_32:
// rs1_b2_val == 191, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x3bfbf04;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x3bfbf04, x1, 44, x4)

inst_33:
// rs1_b2_val == 64, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xaa40000d;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0xaa40000d, x1, 48, x4)

inst_34:
// rs1_b2_val == 32, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x204002;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x204002, x1, 52, x4)

inst_35:
// rs1_b2_val == 4, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x5504f706;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x5504f706, x1, 56, x4)

inst_36:
// rs1_b2_val == 239, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x5effb02;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x5effb02, x1, 60, x4)

inst_37:
// rs1_b2_val == 1, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xef0108fe;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0xef0108fe, x1, 64, x4)

inst_38:
// rs1_b2_val == 0, rs1_b1_val == 1
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x1000109;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x1000109, x1, 68, x4)

inst_39:
// rs1_b1_val == 255, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x20cff02;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x20cff02, x1, 72, x4)

inst_40:
// rs1_b2_val == 253, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xfffd080c;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0xfffd080c, x1, 76, x4)

inst_41:
// rs1_b1_val == 128, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x121280bf;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x121280bf, x1, 80, x4)

inst_42:
// rs1_b1_val == 16, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xc0d10ef;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0xc0d10ef, x1, 84, x4)

inst_43:
// rs1_b1_val == 4, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x200e0440;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x200e0440, x1, 88, x4)

inst_44:
// rs1_b2_val == 247, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x80f7060f;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x80f7060f, x1, 92, x4)

inst_45:
// rs1_b1_val == 223, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x105dffd;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x105dffd, x1, 96, x4)

inst_46:
// rs1_b1_val == 239, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x90eeffb;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x90eeffb, x1, 100, x4)

inst_47:
// rs1_b3_val == 64, rs1_b1_val == 127
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x400f7f0c;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0x400f7f0c, x1, 104, x4)

inst_48:
// rs1_b0_val == 4, rs1_b1_val == 170, rs1_b2_val == 16
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xb10aa04;
TEST_RD_OP( zunpkd820, x31, x30, 0x00000000, 0xb10aa04, x1, 108, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
