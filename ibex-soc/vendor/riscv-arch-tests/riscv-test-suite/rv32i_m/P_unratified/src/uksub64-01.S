
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub64 instruction of the RISC-V RV32PZicsr extension for the uksub64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x8, rd==x2, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs1_val > 0 and rs2_val > 0, rs2_val == 68719476736, rs1_val == 18446744073709551607
// opcode: uksub64 ; op1:x14; op2:x8; dest:x2; op1val:0xfffffffffffffff7;  op2val:0x0000001000000000;
TEST_PK64_PPP_OP(uksub64, x2, x3, x14, x15, x8, x9, 0x00000000, 0, 0xfffffff7, 0xffffffff, 0x00000000, 0x00000010, x14, x1, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x4, rs2_val == 9223372036854775807, 
// opcode: uksub64 ; op1:x12; op2:x12; dest:x4; op1val:0x0000000000000012;  op2val:0x0000000000000012;
TEST_PK64_PPP_OP(uksub64, x4, x5, x12, x13, x12, x13, 0x00000000, 0, 0x00000012, 0x00000000, 0x00000012, 0x00000000, x12, x1, 12, x10)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x6, rd==x30, rs2_val == 13835058055282163711, rs1_val == 12297829382473034410
// opcode: uksub64 ; op1:x30; op2:x6; dest:x30; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xbfffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x30, x31, x6, x7, 0x00000000, 0, 0xaaaaaaaa, 0xaaaaaaaa, 0xffffffff, 0xbfffffff, x30, x1, 24, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_val == 16140901064495857663, rs1_val == 18446744065119617023
// opcode: uksub64 ; op1:x16; op2:x16; dest:x16; op1val:0xfffffffdffffffff;  op2val:0xfffffffdffffffff;
TEST_PK64_PPP_OP(uksub64, x16, x17, x16, x17, x16, x17, 0x00000000, 0, 0xffffffff, 0xfffffffd, 0xffffffff, 0xfffffffd, x16, x1, 36, x10)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x26, rd==x26, rs2_val == 17293822569102704639, 
// opcode: uksub64 ; op1:x24; op2:x26; dest:x26; op1val:0x000000000000000a;  op2val:0xefffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x26, x27, x24, x25, x26, x27, 0x00000000, 0, 0x0000000a, 0x00000000, 0xffffffff, 0xefffffff, x24, x1, 48, x10)

inst_5:
// rs1==x4, rs2==x20, rd==x28, rs2_val == 17870283321406128127, rs1_val == 18446744073709551487
// opcode: uksub64 ; op1:x4; op2:x20; dest:x28; op1val:0xffffffffffffff7f;  op2val:0xf7ffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x28, x29, x4, x5, x20, x21, 0x00000000, 0, 0xffffff7f, 0xffffffff, 0xffffffff, 0xf7ffffff, x4, x1, 60, x10)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_6:
// rs1==x8, rs2==x18, rd==x20, rs2_val == 18158513697557839871, rs1_val == 18446708889337462783
// opcode: uksub64 ; op1:x8; op2:x18; dest:x20; op1val:0xffffdfffffffffff;  op2val:0xfbffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x20, x21, x8, x9, x18, x19, 0x00000000, 0, 0xffffffff, 0xffffdfff, 0xffffffff, 0xfbffffff, x8, x1, 0, x16)

inst_7:
// rs1==x6, rs2==x28, rd==x24, rs2_val == 18302628885633695743, rs1_val == 18446744073707454463
// opcode: uksub64 ; op1:x6; op2:x28; dest:x24; op1val:0xffffffffffdfffff;  op2val:0xfdffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x24, x25, x6, x7, x28, x29, 0x00000000, 0, 0xffdfffff, 0xffffffff, 0xffffffff, 0xfdffffff, x6, x1, 12, x16)

inst_8:
// rs1==x20, rs2==x24, rd==x10, rs2_val == 18374686479671623679, rs1_val == 18446744073709027327
// opcode: uksub64 ; op1:x20; op2:x24; dest:x10; op1val:0xfffffffffff7ffff;  op2val:0xfeffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x10, x11, x20, x21, x24, x25, 0x00000000, 0, 0xfff7ffff, 0xffffffff, 0xffffffff, 0xfeffffff, x20, x1, 24, x16)

inst_9:
// rs1==x28, rs2==x4, rd==x8, rs2_val == 18410715276690587647, rs1_val == 18446744073575333887
// opcode: uksub64 ; op1:x28; op2:x4; dest:x8; op1val:0xfffffffff7ffffff;  op2val:0xff7fffffffffffff;
TEST_PK64_PPP_OP(uksub64, x8, x9, x28, x29, x4, x5, 0x00000000, 0, 0xf7ffffff, 0xffffffff, 0xffffffff, 0xff7fffff, x28, x1, 36, x16)

inst_10:
// rs1==x18, rs2==x10, rd==x14, rs2_val == 18428729675200069631, rs1_val == 18446744073709550591
// opcode: uksub64 ; op1:x18; op2:x10; dest:x14; op1val:0xfffffffffffffbff;  op2val:0xffbfffffffffffff;
TEST_PK64_PPP_OP(uksub64, x14, x15, x18, x19, x10, x11, 0x00000000, 0, 0xfffffbff, 0xffffffff, 0xffffffff, 0xffbfffff, x18, x1, 48, x16)

inst_11:
// rs1==x10, rs2==x14, rd==x12, rs2_val == 18437736874454810623, rs1_val == 576460752303423488
// opcode: uksub64 ; op1:x10; op2:x14; dest:x12; op1val:0x0800000000000000;  op2val:0xffdfffffffffffff;
TEST_PK64_PPP_OP(uksub64, x12, x13, x10, x11, x14, x15, 0x00000000, 0, 0x00000000, 0x08000000, 0xffffffff, 0xffdfffff, x10, x1, 60, x16)

inst_12:
// rs1==x2, rs2==x30, rd==x22, rs2_val == 18442240474082181119, rs1_val == 1125899906842624
// opcode: uksub64 ; op1:x2; op2:x30; dest:x22; op1val:0x0004000000000000;  op2val:0xffefffffffffffff;
TEST_PK64_PPP_OP(uksub64, x22, x23, x2, x3, x30, x31, 0x00000000, 0, 0x00000000, 0x00040000, 0xffffffff, 0xffefffff, x2, x1, 72, x16)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_13:
// rs1==x22, rs2==x2, rd==x6, rs2_val == 18444492273895866367, rs1_val == 137438953472
// opcode: uksub64 ; op1:x22; op2:x2; dest:x6; op1val:0x0000002000000000;  op2val:0xfff7ffffffffffff;
TEST_PK64_PPP_OP(uksub64, x6, x7, x22, x23, x2, x3, 0x00000000, 0, 0x00000000, 0x00000020, 0xffffffff, 0xfff7ffff, x22, x1, 0, x4)

inst_14:
// rs1==x26, rs2==x22, rd==x18, rs2_val == 18445618173802708991, rs1_val == 18446603336221196287
// opcode: uksub64 ; op1:x26; op2:x22; dest:x18; op1val:0xffff7fffffffffff;  op2val:0xfffbffffffffffff;
TEST_PK64_PPP_OP(uksub64, x18, x19, x26, x27, x22, x23, 0x00000000, 0, 0xffffffff, 0xffff7fff, 0xffffffff, 0xfffbffff, x26, x1, 12, x4)

inst_15:
// rs2_val == 18446181123756130303, rs1_val == 288230376151711744
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0400000000000000;  op2val:0xfffdffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x04000000, 0xffffffff, 0xfffdffff, x28, x1, 24, x4)

inst_16:
// rs2_val == 18446462598732840959, rs1_val == 16140901064495857663
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xdfffffffffffffff;  op2val:0xfffeffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xdfffffff, 0xffffffff, 0xfffeffff, x28, x1, 36, x4)

inst_17:
// rs2_val == 18446603336221196287, rs1_val == 2251799813685248
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0008000000000000;  op2val:0xffff7fffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00080000, 0xffffffff, 0xffff7fff, x28, x1, 48, x4)

inst_18:
// rs2_val == 18446673704965373951, rs1_val == 9223372036854775808
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x8000000000000000;  op2val:0xffffbfffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x80000000, 0xffffffff, 0xffffbfff, x28, x1, 60, x4)

inst_19:
// rs2_val == 18446708889337462783, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0800000000000000;  op2val:0xffffdfffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x08000000, 0xffffffff, 0xffffdfff, x28, x1, 72, x4)

inst_20:
// rs2_val == 18446726481523507199, rs1_val == 18410715276690587647
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xff7fffffffffffff;  op2val:0xffffefffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xff7fffff, 0xffffffff, 0xffffefff, x28, x1, 84, x4)

inst_21:
// rs2_val == 18446735277616529407, rs1_val == 16777216
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000001000000;  op2val:0xfffff7ffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x01000000, 0x00000000, 0xffffffff, 0xfffff7ff, x28, x1, 96, x4)

inst_22:
// rs2_val == 18446739675663040511, rs1_val == 18446744004990074879
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffefffffffff;  op2val:0xfffffbffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffffef, 0xffffffff, 0xfffffbff, x28, x1, 108, x4)

inst_23:
// rs2_val == 18446741874686296063, rs1_val == 18446744073709551613
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffd;  op2val:0xfffffdffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffd, 0xffffffff, 0xffffffff, 0xfffffdff, x28, x1, 120, x4)

inst_24:
// rs2_val == 18446742974197923839, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000013;  op2val:0xfffffeffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000013, 0x00000000, 0xffffffff, 0xfffffeff, x28, x1, 132, x4)

inst_25:
// rs2_val == 18446743523953737727, rs1_val == 2199023255552
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000020000000000;  op2val:0xffffff7fffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000200, 0xffffffff, 0xffffff7f, x28, x1, 144, x4)

inst_26:
// rs2_val == 18446743798831644671, rs1_val == 18446744056529682431
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffbffffffff;  op2val:0xffffffbfffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffffb, 0xffffffff, 0xffffffbf, x28, x1, 156, x4)

inst_27:
// rs2_val == 18446743936270598143, rs1_val == 524288
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000080000;  op2val:0xffffffdfffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00080000, 0x00000000, 0xffffffff, 0xffffffdf, x28, x1, 168, x4)

inst_28:
// rs2_val == 18446744004990074879, rs1_val == 18446744073692774399
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffeffffff;  op2val:0xffffffefffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfeffffff, 0xffffffff, 0xffffffff, 0xffffffef, x28, x1, 180, x4)

inst_29:
// rs2_val == 18446744039349813247, rs1_val == 1099511627776
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000010000000000;  op2val:0xfffffff7ffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000100, 0xffffffff, 0xfffffff7, x28, x1, 192, x4)

inst_30:
// rs2_val == 18446744056529682431, rs1_val == 18446744073705357311
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffbfffff;  op2val:0xfffffffbffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffbfffff, 0xffffffff, 0xffffffff, 0xfffffffb, x28, x1, 204, x4)

inst_31:
// rs2_val == 18446744065119617023, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffff7;  op2val:0xfffffffdffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffff7, 0xffffffff, 0xffffffff, 0xfffffffd, x28, x1, 216, x4)

inst_32:
// rs2_val == 18446744069414584319, rs1_val == 36028797018963968
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0080000000000000;  op2val:0xfffffffeffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00800000, 0xffffffff, 0xfffffffe, x28, x1, 228, x4)

inst_33:
// rs2_val == 18446744071562067967, rs1_val == 256
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000100;  op2val:0xffffffff7fffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000100, 0x00000000, 0x7fffffff, 0xffffffff, x28, x1, 240, x4)

inst_34:
// rs2_val == 18446744072635809791, rs1_val == 1073741824
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000040000000;  op2val:0xffffffffbfffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x40000000, 0x00000000, 0xbfffffff, 0xffffffff, x28, x1, 252, x4)

inst_35:
// rs2_val == 18446744073172680703, rs1_val == 18444492273895866367
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfff7ffffffffffff;  op2val:0xffffffffdfffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfff7ffff, 0xdfffffff, 0xffffffff, x28, x1, 264, x4)

inst_36:
// rs2_val == 18446744073441116159, rs1_val == 18446744073709551583
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffdf;  op2val:0xffffffffefffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffdf, 0xffffffff, 0xefffffff, 0xffffffff, x28, x1, 276, x4)

inst_37:
// rs2_val == 18446744073575333887, rs1_val == 18446744072635809791
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffbfffffff;  op2val:0xfffffffff7ffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xbfffffff, 0xffffffff, 0xf7ffffff, 0xffffffff, x28, x1, 288, x4)

inst_38:
// rs2_val == 18446744073642442751, rs1_val == 18446741874686296063
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffdffffffffff;  op2val:0xfffffffffbffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffdff, 0xfbffffff, 0xffffffff, x28, x1, 300, x4)

inst_39:
// rs2_val == 18446744073675997183, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffdffffffffff;  op2val:0xfffffffffdffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffdff, 0xfdffffff, 0xffffffff, x28, x1, 312, x4)

inst_40:
// rs2_val == 18446744073692774399, rs1_val == 18446744073709535231
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffbfff;  op2val:0xfffffffffeffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffbfff, 0xffffffff, 0xfeffffff, 0xffffffff, x28, x1, 324, x4)

inst_41:
// rs2_val == 18446744073701163007, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x000000000000000b;  op2val:0xffffffffff7fffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x0000000b, 0x00000000, 0xff7fffff, 0xffffffff, x28, x1, 336, x4)

inst_42:
// rs2_val == 18446744073705357311, rs1_val == 18442240474082181119
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffefffffffffffff;  op2val:0xffffffffffbfffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffefffff, 0xffbfffff, 0xffffffff, x28, x1, 348, x4)

inst_43:
// rs2_val == 18446744073707454463, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffd;  op2val:0xffffffffffdfffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffd, 0xffffffff, 0xffdfffff, 0xffffffff, x28, x1, 360, x4)

inst_44:
// rs2_val == 18446744073708503039, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000040000000;  op2val:0xffffffffffefffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x40000000, 0x00000000, 0xffefffff, 0xffffffff, x28, x1, 372, x4)

inst_45:
// rs2_val == 18446744073709027327, rs1_val == 8796093022208
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000080000000000;  op2val:0xfffffffffff7ffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000800, 0xfff7ffff, 0xffffffff, x28, x1, 384, x4)

inst_46:
// rs2_val == 18446744073709289471, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffefffffffffffff;  op2val:0xfffffffffffbffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffefffff, 0xfffbffff, 0xffffffff, x28, x1, 396, x4)

inst_47:
// rs2_val == 18446744073709420543, rs1_val == 72057594037927936
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0100000000000000;  op2val:0xfffffffffffdffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x01000000, 0xfffdffff, 0xffffffff, x28, x1, 408, x4)

inst_48:
// rs2_val == 18446744073709486079, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x000000000000000e;  op2val:0xfffffffffffeffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x0000000e, 0x00000000, 0xfffeffff, 0xffffffff, x28, x1, 420, x4)

inst_49:
// rs2_val == 18446744073709518847, rs1_val == 65536
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000010000;  op2val:0xffffffffffff7fff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00010000, 0x00000000, 0xffff7fff, 0xffffffff, x28, x1, 432, x4)

inst_50:
// rs2_val == 18446744073709535231, rs1_val == 4
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000004;  op2val:0xffffffffffffbfff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000004, 0x00000000, 0xffffbfff, 0xffffffff, x28, x1, 444, x4)

inst_51:
// rs2_val == 18446744073709543423, rs1_val == 18446744073709289471
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffbffff;  op2val:0xffffffffffffdfff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffbffff, 0xffffffff, 0xffffdfff, 0xffffffff, x28, x1, 456, x4)

inst_52:
// rs2_val == 18446744073709547519, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000013;  op2val:0xffffffffffffefff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000013, 0x00000000, 0xffffefff, 0xffffffff, x28, x1, 468, x4)

inst_53:
// rs2_val == 18446744073709549567, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000040000000;  op2val:0xfffffffffffff7ff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x40000000, 0x00000000, 0xfffff7ff, 0xffffffff, x28, x1, 480, x4)

inst_54:
// rs2_val == 18446744073709550591, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffbfffffff;  op2val:0xfffffffffffffbff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xbfffffff, 0xffffffff, 0xfffffbff, 0xffffffff, x28, x1, 492, x4)

inst_55:
// rs2_val == 18446744073709551103, rs1_val == 18446744073709551359
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffeff;  op2val:0xfffffffffffffdff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffeff, 0xffffffff, 0xfffffdff, 0xffffffff, x28, x1, 504, x4)

inst_56:
// rs2_val == 18446744073709551359, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000010000000000;  op2val:0xfffffffffffffeff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000100, 0xfffffeff, 0xffffffff, x28, x1, 516, x4)

inst_57:
// rs2_val == 18446744073709551487, rs1_val == 18446744073709518847
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffff7fff;  op2val:0xffffffffffffff7f;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffff7fff, 0xffffffff, 0xffffff7f, 0xffffffff, x28, x1, 528, x4)

inst_58:
// rs2_val == 18446744073709551551, rs1_val == 18446744073675997183
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffdffffff;  op2val:0xffffffffffffffbf;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfdffffff, 0xffffffff, 0xffffffbf, 0xffffffff, x28, x1, 540, x4)

inst_59:
// rs2_val == 18446744073709551583, rs1_val == 18446744073709486079
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffeffff;  op2val:0xffffffffffffffdf;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffeffff, 0xffffffff, 0xffffffdf, 0xffffffff, x28, x1, 552, x4)

inst_60:
// rs2_val == 18446744073709551599, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffff7fff;  op2val:0xffffffffffffffef;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffff7fff, 0xffffffff, 0xffffffef, 0xffffffff, x28, x1, 564, x4)

inst_61:
// rs2_val == 18446744073709551607, rs1_val == 18446744073709551614
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffe;  op2val:0xfffffffffffffff7;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffe, 0xffffffff, 0xfffffff7, 0xffffffff, x28, x1, 576, x4)

inst_62:
// rs2_val == 18446744073709551611, rs1_val == 67108864
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000004000000;  op2val:0xfffffffffffffffb;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x04000000, 0x00000000, 0xfffffffb, 0xffffffff, x28, x1, 588, x4)

inst_63:
// rs2_val == 18446744073709551613, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffbfffffff;  op2val:0xfffffffffffffffd;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xbfffffff, 0xffffffff, 0xfffffffd, 0xffffffff, x28, x1, 600, x4)

inst_64:
// rs2_val == 18446744073709551614, rs1_val == 18446744073709551611
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffb;  op2val:0xfffffffffffffffe;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffb, 0xffffffff, 0xfffffffe, 0xffffffff, x28, x1, 612, x4)

inst_65:
// rs1_val == 9223372036854775807, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x7fffffffffffffff;  op2val:0xffffffffffffff7f;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0x7fffffff, 0xffffff7f, 0xffffffff, x28, x1, 624, x4)

inst_66:
// rs1_val == 13835058055282163711, rs2_val == 134217728
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xbfffffffffffffff;  op2val:0x0000000008000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xbfffffff, 0x08000000, 0x00000000, x28, x1, 636, x4)

inst_67:
// rs1_val == 17293822569102704639, rs2_val == 8
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xefffffffffffffff;  op2val:0x0000000000000008;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xefffffff, 0x00000008, 0x00000000, x28, x1, 648, x4)

inst_68:
// rs1_val == 17870283321406128127, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xf7ffffffffffffff;  op2val:0xffffffffffdfffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xf7ffffff, 0xffdfffff, 0xffffffff, x28, x1, 660, x4)

inst_69:
// rs1_val == 18158513697557839871, rs2_val == 9007199254740992
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfbffffffffffffff;  op2val:0x0020000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfbffffff, 0x00000000, 0x00200000, x28, x1, 672, x4)

inst_70:
// rs1_val == 18302628885633695743, rs2_val == 34359738368
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfdffffffffffffff;  op2val:0x0000000800000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfdffffff, 0x00000000, 0x00000008, x28, x1, 684, x4)

inst_71:
// rs1_val == 18374686479671623679, rs2_val == 288230376151711744
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfeffffffffffffff;  op2val:0x0400000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfeffffff, 0x00000000, 0x04000000, x28, x1, 696, x4)

inst_72:
// rs1_val == 18428729675200069631, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffbfffffffffffff;  op2val:0xfffffffffffbffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffbfffff, 0xfffbffff, 0xffffffff, x28, x1, 708, x4)

inst_73:
// rs1_val == 18437736874454810623, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffdfffffffffffff;  op2val:0xfffffffff7ffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffdfffff, 0xf7ffffff, 0xffffffff, x28, x1, 720, x4)

inst_74:
// rs1_val == 18445618173802708991, rs2_val == 4398046511104
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffbffffffffffff;  op2val:0x0000040000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffbffff, 0x00000000, 0x00000400, x28, x1, 732, x4)

inst_75:
// rs1_val == 18446181123756130303, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffdffffffffffff;  op2val:0xffffffff7fffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffdffff, 0x7fffffff, 0xffffffff, x28, x1, 744, x4)

inst_76:
// rs1_val == 18446462598732840959, rs2_val == 72057594037927936
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffeffffffffffff;  op2val:0x0100000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffeffff, 0x00000000, 0x01000000, x28, x1, 756, x4)

inst_77:
// rs1_val == 18446673704965373951, rs2_val == 2048
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffbfffffffffff;  op2val:0x0000000000000800;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffbfff, 0x00000800, 0x00000000, x28, x1, 768, x4)

inst_78:
// rs1_val == 18446726481523507199, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffefffffffffff;  op2val:0xffffffffff7fffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffefff, 0xff7fffff, 0xffffffff, x28, x1, 780, x4)

inst_79:
// rs1_val == 18446735277616529407, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffff7ffffffffff;  op2val:0xffff7fffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffff7ff, 0xffffffff, 0xffff7fff, x28, x1, 792, x4)

inst_80:
// rs1_val == 18446739675663040511, rs2_val == 16777216
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffbffffffffff;  op2val:0x0000000001000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffbff, 0x01000000, 0x00000000, x28, x1, 804, x4)

inst_81:
// rs1_val == 18446742974197923839, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffeffffffffff;  op2val:0x0000000000000800;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffeff, 0x00000800, 0x00000000, x28, x1, 816, x4)

inst_82:
// rs1_val == 1, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000001;  op2val:0x0000000001000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000001, 0x00000000, 0x01000000, 0x00000000, x28, x1, 828, x4)

inst_83:
// rs2_val == 12297829382473034410, rs1_val == 8589934592
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000200000000;  op2val:0xaaaaaaaaaaaaaaaa;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000002, 0xaaaaaaaa, 0xaaaaaaaa, x28, x1, 840, x4)

inst_84:
// rs2_val == 6148914691236517205, rs1_val == 18446744073701163007
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffff7fffff;  op2val:0x5555555555555555;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xff7fffff, 0xffffffff, 0x55555555, 0x55555555, x28, x1, 852, x4)

inst_85:
// rs1_val == 6148914691236517205, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x5555555555555555;  op2val:0xfffeffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x55555555, 0x55555555, 0xffffffff, 0xfffeffff, x28, x1, 864, x4)

inst_86:
// rs1_val == (2**64-1), rs2_val == 9223372036854775808
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffff;  op2val:0x8000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffffff, 0x00000000, 0x80000000, x28, x1, 876, x4)

inst_87:
// rs1_val == 0, rs2_val == 16
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000000;  op2val:0x0000000000000010;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000000, 0x00000010, 0x00000000, x28, x1, 888, x4)

inst_88:
// rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffeffffffffffff;  op2val:0xfffeffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffeffff, 0xffffffff, 0xfffeffff, x28, x1, 900, x4)

inst_89:
// rs2_val == (2**64-1), 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000005;  op2val:0xffffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000005, 0x00000000, 0xffffffff, 0xffffffff, x28, x1, 912, x4)

inst_90:
// rs2_val == 0, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffbfffffffffffff;  op2val:0x0000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffbfffff, 0x00000000, 0x00000000, x28, x1, 924, x4)

inst_91:
// rs1_val == 18446743523953737727, rs2_val == 131072
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffff7fffffffff;  op2val:0x0000000000020000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffff7f, 0x00020000, 0x00000000, x28, x1, 936, x4)

inst_92:
// rs1_val == 18446743798831644671, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffbfffffffff;  op2val:0xffffbfffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffffbf, 0xffffffff, 0xffffbfff, x28, x1, 948, x4)

inst_93:
// rs1_val == 18446743936270598143, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffdfffffffff;  op2val:0xffbfffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffffdf, 0xffffffff, 0xffbfffff, x28, x1, 960, x4)

inst_94:
// rs1_val == 18446744039349813247, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffff7ffffffff;  op2val:0x0000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffff7, 0x00000000, 0x00000000, x28, x1, 972, x4)

inst_95:
// rs1_val == 18446744069414584319, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffeffffffff;  op2val:0xdfffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffffe, 0xffffffff, 0xdfffffff, x28, x1, 984, x4)

inst_96:
// rs1_val == 18446744071562067967, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffff7fffffff;  op2val:0xffffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x7fffffff, 0xffffffff, 0xffffffff, 0xffffffff, x28, x1, 996, x4)

inst_97:
// rs1_val == 18446744073172680703, rs2_val == 2
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffdfffffff;  op2val:0x0000000000000002;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xdfffffff, 0xffffffff, 0x00000002, 0x00000000, x28, x1, 1008, x4)

inst_98:
// rs1_val == 18446744073441116159, rs2_val == 2199023255552
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffefffffff;  op2val:0x0000020000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xefffffff, 0xffffffff, 0x00000000, 0x00000200, x28, x1, 1020, x4)

inst_99:
// rs1_val == 18446744073642442751, rs2_val == 1048576
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffbffffff;  op2val:0x0000000000100000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfbffffff, 0xffffffff, 0x00100000, 0x00000000, x28, x1, 1032, x4)

inst_100:
// rs1_val == 18446744073708503039, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffefffff;  op2val:0x0000000800000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffefffff, 0xffffffff, 0x00000000, 0x00000008, x28, x1, 1044, x4)

inst_101:
// rs1_val == 18446744073709420543, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffdffff;  op2val:0xfffffff7ffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffdffff, 0xffffffff, 0xffffffff, 0xfffffff7, x28, x1, 1056, x4)

inst_102:
// rs1_val == 18446744073709543423, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffdfff;  op2val:0xfbffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffdfff, 0xffffffff, 0xffffffff, 0xfbffffff, x28, x1, 1068, x4)

inst_103:
// rs1_val == 18446744073709547519, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffefff;  op2val:0xfffffffffffffff7;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffefff, 0xffffffff, 0xfffffff7, 0xffffffff, x28, x1, 1080, x4)

inst_104:
// rs1_val == 18446744073709549567, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffff7ff;  op2val:0xff7fffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffff7ff, 0xffffffff, 0xffffffff, 0xff7fffff, x28, x1, 1092, x4)

inst_105:
// rs1_val == 18446744073709551103, rs2_val == 65536
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffdff;  op2val:0x0000000000010000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffdff, 0xffffffff, 0x00010000, 0x00000000, x28, x1, 1104, x4)

inst_106:
// rs1_val == 18446744073709551551, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffbf;  op2val:0xffdfffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffbf, 0xffffffff, 0xffffffff, 0xffdfffff, x28, x1, 1116, x4)

inst_107:
// rs1_val == 18446744073709551599, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffef;  op2val:0xfffffffffffdffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffef, 0xffffffff, 0xfffdffff, 0xffffffff, x28, x1, 1128, x4)

inst_108:
// rs2_val == 4611686018427387904, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000100;  op2val:0x4000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000100, 0x00000000, 0x00000000, 0x40000000, x28, x1, 1140, x4)

inst_109:
// rs2_val == 2305843009213693952, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffff7fff;  op2val:0x2000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffff7fff, 0xffffffff, 0x00000000, 0x20000000, x28, x1, 1152, x4)

inst_110:
// rs2_val == 1152921504606846976, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000010000;  op2val:0x1000000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00010000, 0x00000000, 0x00000000, 0x10000000, x28, x1, 1164, x4)

inst_111:
// rs2_val == 576460752303423488, rs1_val == 281474976710656
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0001000000000000;  op2val:0x0800000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00010000, 0x00000000, 0x08000000, x28, x1, 1176, x4)

inst_112:
// rs2_val == 144115188075855872, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000040000000;  op2val:0x0200000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x40000000, 0x00000000, 0x00000000, 0x02000000, x28, x1, 1188, x4)

inst_113:
// rs2_val == 36028797018963968, rs1_val == 4398046511104
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000040000000000;  op2val:0x0080000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000400, 0x00000000, 0x00800000, x28, x1, 1200, x4)

inst_114:
// rs2_val == 18014398509481984, rs1_val == 4096
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000001000;  op2val:0x0040000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00001000, 0x00000000, 0x00000000, 0x00400000, x28, x1, 1212, x4)

inst_115:
// rs2_val == 4503599627370496, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffff7fffffffff;  op2val:0x0010000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffff7f, 0x00000000, 0x00100000, x28, x1, 1224, x4)

inst_116:
// rs2_val == 2251799813685248, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000004;  op2val:0x0008000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000004, 0x00000000, 0x00000000, 0x00080000, x28, x1, 1236, x4)

inst_117:
// rs2_val == 1125899906842624, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffe;  op2val:0x0004000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffe, 0xffffffff, 0x00000000, 0x00040000, x28, x1, 1248, x4)

inst_118:
// rs2_val == 562949953421312, rs1_val == 512
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000200;  op2val:0x0002000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000200, 0x00000000, 0x00000000, 0x00020000, x28, x1, 1260, x4)

inst_119:
// rs2_val == 281474976710656, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffff7fff;  op2val:0x0001000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffff7fff, 0xffffffff, 0x00000000, 0x00010000, x28, x1, 1272, x4)

inst_120:
// rs2_val == 140737488355328, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000010000000000;  op2val:0x0000800000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000100, 0x00000000, 0x00008000, x28, x1, 1284, x4)

inst_121:
// rs2_val == 70368744177664, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0800000000000000;  op2val:0x0000400000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x08000000, 0x00000000, 0x00004000, x28, x1, 1296, x4)

inst_122:
// rs2_val == 35184372088832, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffbfffffff;  op2val:0x0000200000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xbfffffff, 0xffffffff, 0x00000000, 0x00002000, x28, x1, 1308, x4)

inst_123:
// rs2_val == 17592186044416, rs1_val == 16
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000010;  op2val:0x0000100000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000010, 0x00000000, 0x00000000, 0x00001000, x28, x1, 1320, x4)

inst_124:
// rs2_val == 8796093022208, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfdffffffffffffff;  op2val:0x0000080000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfdffffff, 0x00000000, 0x00000800, x28, x1, 1332, x4)

inst_125:
// rs2_val == 1099511627776, rs1_val == 8
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000008;  op2val:0x0000010000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000008, 0x00000000, 0x00000000, 0x00000100, x28, x1, 1344, x4)

inst_126:
// rs2_val == 549755813888, rs1_val == 536870912
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000020000000;  op2val:0x0000008000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x20000000, 0x00000000, 0x00000000, 0x00000080, x28, x1, 1356, x4)

inst_127:
// rs2_val == 274877906944, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffff7ffff;  op2val:0x0000004000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfff7ffff, 0xffffffff, 0x00000000, 0x00000040, x28, x1, 1368, x4)

inst_128:
// rs2_val == 137438953472, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffff7fffffff;  op2val:0x0000002000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x7fffffff, 0xffffffff, 0x00000000, 0x00000020, x28, x1, 1380, x4)

inst_129:
// rs2_val == 17179869184, rs1_val == 2147483648
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000080000000;  op2val:0x0000000400000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x80000000, 0x00000000, 0x00000000, 0x00000004, x28, x1, 1392, x4)

inst_130:
// rs2_val == 8589934592, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000200;  op2val:0x0000000200000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000200, 0x00000000, 0x00000000, 0x00000002, x28, x1, 1404, x4)

inst_131:
// rs2_val == 4294967296, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffbff;  op2val:0x0000000100000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffbff, 0xffffffff, 0x00000000, 0x00000001, x28, x1, 1416, x4)

inst_132:
// rs2_val == 2147483648, rs1_val == 262144
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000040000;  op2val:0x0000000080000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00040000, 0x00000000, 0x80000000, 0x00000000, x28, x1, 1428, x4)

inst_133:
// rs2_val == 1073741824, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffe;  op2val:0x0000000040000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffe, 0xffffffff, 0x40000000, 0x00000000, x28, x1, 1440, x4)

inst_134:
// rs2_val == 536870912, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000007;  op2val:0x0000000020000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000007, 0x00000000, 0x20000000, 0x00000000, x28, x1, 1452, x4)

inst_135:
// rs2_val == 268435456, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffdf;  op2val:0x0000000010000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffdf, 0xffffffff, 0x10000000, 0x00000000, x28, x1, 1464, x4)

inst_136:
// rs2_val == 67108864, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x000000000000000b;  op2val:0x0000000004000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x0000000b, 0x00000000, 0x04000000, 0x00000000, x28, x1, 1476, x4)

inst_137:
// rs2_val == 33554432, rs1_val == 4611686018427387904
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x4000000000000000;  op2val:0x0000000002000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x40000000, 0x02000000, 0x00000000, x28, x1, 1488, x4)

inst_138:
// rs2_val == 8388608, rs1_val == 274877906944
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000004000000000;  op2val:0x0000000000800000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000040, 0x00800000, 0x00000000, x28, x1, 1500, x4)

inst_139:
// rs2_val == 4194304, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffdfffff;  op2val:0x0000000000400000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffdfffff, 0xffffffff, 0x00400000, 0x00000000, x28, x1, 1512, x4)

inst_140:
// rs2_val == 2097152, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffdffff;  op2val:0x0000000000200000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffdffff, 0xffffffff, 0x00200000, 0x00000000, x28, x1, 1524, x4)

inst_141:
// rs2_val == 524288, rs1_val == 8192
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000002000;  op2val:0x0000000000080000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00002000, 0x00000000, 0x00080000, 0x00000000, x28, x1, 1536, x4)

inst_142:
// rs2_val == 262144, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffffffffff;  op2val:0x0000000000040000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffffffff, 0x00040000, 0x00000000, x28, x1, 1548, x4)

inst_143:
// rs2_val == 32768, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0004000000000000;  op2val:0x0000000000008000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00040000, 0x00008000, 0x00000000, x28, x1, 1560, x4)

inst_144:
// rs2_val == 16384, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffeffffffff;  op2val:0x0000000000004000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffffe, 0x00004000, 0x00000000, x28, x1, 1572, x4)

inst_145:
// rs2_val == 8192, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffff7ff;  op2val:0x0000000000002000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffff7ff, 0xffffffff, 0x00002000, 0x00000000, x28, x1, 1584, x4)

inst_146:
// rs2_val == 4096, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x8000000000000000;  op2val:0x0000000000001000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x80000000, 0x00001000, 0x00000000, x28, x1, 1596, x4)

inst_147:
// rs2_val == 1024, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffdffffffff;  op2val:0x0000000000000400;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffffd, 0x00000400, 0x00000000, x28, x1, 1608, x4)

inst_148:
// rs2_val == 512, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000080000;  op2val:0x0000000000000200;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00080000, 0x00000000, 0x00000200, 0x00000000, x28, x1, 1620, x4)

inst_149:
// rs2_val == 256, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffffffffefffffff;  op2val:0x0000000000000100;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xefffffff, 0xffffffff, 0x00000100, 0x00000000, x28, x1, 1632, x4)

inst_150:
// rs2_val == 128, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xffefffffffffffff;  op2val:0x0000000000000080;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xffefffff, 0x00000080, 0x00000000, x28, x1, 1644, x4)

inst_151:
// rs2_val == 64, rs1_val == 2
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000002;  op2val:0x0000000000000040;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000002, 0x00000000, 0x00000040, 0x00000000, x28, x1, 1656, x4)

inst_152:
// rs2_val == 32, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000080000;  op2val:0x0000000000000020;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00080000, 0x00000000, 0x00000020, 0x00000000, x28, x1, 1668, x4)

inst_153:
// rs2_val == 4, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffffffffffffd;  op2val:0x0000000000000004;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xfffffffd, 0xffffffff, 0x00000004, 0x00000000, x28, x1, 1680, x4)

inst_154:
// rs2_val == 1, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0xfffffdffffffffff;  op2val:0x0000000000000001;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0xffffffff, 0xfffffdff, 0x00000001, 0x00000000, x28, x1, 1692, x4)

inst_155:
// rs1_val == 2305843009213693952, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x2000000000000000;  op2val:0xfffffffffffeffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x20000000, 0xfffeffff, 0xffffffff, x28, x1, 1704, x4)

inst_156:
// rs1_val == 1152921504606846976, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x1000000000000000;  op2val:0x0000001000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x10000000, 0x00000000, 0x00000010, x28, x1, 1716, x4)

inst_157:
// rs1_val == 144115188075855872, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0200000000000000;  op2val:0x0000100000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x02000000, 0x00000000, 0x00001000, x28, x1, 1728, x4)

inst_158:
// rs1_val == 18014398509481984, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0040000000000000;  op2val:0x0000000000000013;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00400000, 0x00000013, 0x00000000, x28, x1, 1740, x4)

inst_159:
// rs1_val == 9007199254740992, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0020000000000000;  op2val:0x0002000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00200000, 0x00000000, 0x00020000, x28, x1, 1752, x4)

inst_160:
// rs1_val == 4503599627370496, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0010000000000000;  op2val:0xefffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00100000, 0xffffffff, 0xefffffff, x28, x1, 1764, x4)

inst_161:
// rs1_val == 562949953421312, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0002000000000000;  op2val:0xffffefffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00020000, 0xffffffff, 0xffffefff, x28, x1, 1776, x4)

inst_162:
// rs1_val == 140737488355328, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000800000000000;  op2val:0xffffffffbfffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00008000, 0xbfffffff, 0xffffffff, x28, x1, 1788, x4)

inst_163:
// rs1_val == 70368744177664, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000400000000000;  op2val:0xffffffffffffefff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00004000, 0xffffefff, 0xffffffff, x28, x1, 1800, x4)

inst_164:
// rs1_val == 35184372088832, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000200000000000;  op2val:0xffffdfffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00002000, 0xffffffff, 0xffffdfff, x28, x1, 1812, x4)

inst_165:
// rs1_val == 17592186044416, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000100000000000;  op2val:0x5555555555555555;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00001000, 0x55555555, 0x55555555, x28, x1, 1824, x4)

inst_166:
// rs1_val == 549755813888, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000008000000000;  op2val:0x0000000400000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000080, 0x00000000, 0x00000004, x28, x1, 1836, x4)

inst_167:
// rs1_val == 68719476736, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000001000000000;  op2val:0xffbfffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000010, 0xffffffff, 0xffbfffff, x28, x1, 1848, x4)

inst_168:
// rs1_val == 34359738368, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000800000000;  op2val:0x000000000000000c;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000008, 0x0000000c, 0x00000000, x28, x1, 1860, x4)

inst_169:
// rs1_val == 17179869184, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000400000000;  op2val:0xffffbfffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000004, 0xffffffff, 0xffffbfff, x28, x1, 1872, x4)

inst_170:
// rs1_val == 4294967296, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000100000000;  op2val:0x0000000010000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000000, 0x00000001, 0x10000000, 0x00000000, x28, x1, 1884, x4)

inst_171:
// rs1_val == 268435456, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000010000000;  op2val:0x0040000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x10000000, 0x00000000, 0x00000000, 0x00400000, x28, x1, 1896, x4)

inst_172:
// rs1_val == 134217728, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000008000000;  op2val:0xfffff7ffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x08000000, 0x00000000, 0xffffffff, 0xfffff7ff, x28, x1, 1908, x4)

inst_173:
// rs1_val == 33554432, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000002000000;  op2val:0x0000000000000007;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x02000000, 0x00000000, 0x00000007, 0x00000000, x28, x1, 1920, x4)

inst_174:
// rs1_val == 8388608, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000800000;  op2val:0x000000000000000e;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00800000, 0x00000000, 0x0000000e, 0x00000000, x28, x1, 1932, x4)

inst_175:
// rs1_val == 4194304, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000400000;  op2val:0x0000000000010000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00400000, 0x00000000, 0x00010000, 0x00000000, x28, x1, 1944, x4)

inst_176:
// rs1_val == 2097152, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000200000;  op2val:0xfffffffffdffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00200000, 0x00000000, 0xfdffffff, 0xffffffff, x28, x1, 1956, x4)

inst_177:
// rs1_val == 1048576, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000100000;  op2val:0x0008000000000000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00100000, 0x00000000, 0x00000000, 0x00080000, x28, x1, 1968, x4)

inst_178:
// rs1_val == 131072, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000020000;  op2val:0xfffffffffdffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00020000, 0x00000000, 0xfdffffff, 0xffffffff, x28, x1, 1980, x4)

inst_179:
// rs1_val == 32768, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000008000;  op2val:0xffffffffdfffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00008000, 0x00000000, 0xdfffffff, 0xffffffff, x28, x1, 1992, x4)

inst_180:
// rs1_val == 16384, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000004000;  op2val:0x0000000000000004;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00004000, 0x00000000, 0x00000004, 0x00000000, x28, x1, 2004, x4)

inst_181:
// rs1_val == 2048, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000800;  op2val:0xff7fffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000800, 0x00000000, 0xffffffff, 0xff7fffff, x28, x1, 2016, x4)

inst_182:
// rs1_val == 128, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000080;  op2val:0x0000000000000200;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000080, 0x00000000, 0x00000200, 0x00000000, x28, x1, 2028, x4)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_183:
// rs1_val == 64, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000040;  op2val:0x0000000000001000;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000040, 0x00000000, 0x00001000, 0x00000000, x28, x1, 0, x4)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_184:
// rs1_val == 32, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000020;  op2val:0x000000000000000a;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000020, 0x00000000, 0x0000000a, 0x00000000, x28, x1, 0, x4)

inst_185:
// rs1_val == 1024, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000400;  op2val:0xfffffffffffffdff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000400, 0x00000000, 0xfffffdff, 0xffffffff, x28, x1, 12, x4)

inst_186:
// rs2_val == 9223372036854775807, 
// opcode: uksub64 ; op1:x28; op2:x26; dest:x30; op1val:0x0000000000000012;  op2val:0x7fffffffffffffff;
TEST_PK64_PPP_OP(uksub64, x30, x31, x28, x29, x26, x27, 0x00000000, 0, 0x00000012, 0x00000000, 0xffffffff, 0x7fffffff, x28, x1, 24, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 510*(XLEN/32),4,0xdeadbeef


signature_x1_4:
    .fill 3*(XLEN/32),4,0xdeadbeef


signature_x1_5:
    .fill 9*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
