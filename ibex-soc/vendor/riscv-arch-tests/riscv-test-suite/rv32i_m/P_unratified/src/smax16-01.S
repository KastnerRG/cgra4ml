
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smax16 instruction of the RISC-V RV32PZicsr extension for the smax16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smax16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x20, rd==x4, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 1, rs2_h1_val == -257, rs1_h1_val == 1
// opcode: smax16 ; op1:x14; op2:x20; dest:x4; op1val:0x018000;  op2val:0xfeff0001
TEST_RR_OP(smax16, x4, x14, x20, 0x00000000, 0x018000, 0xfeff0001, x9, 0, x15)

inst_1:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x27, rs1_h1_val == rs2_h1_val, rs2_h0_val == 8192, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smax16 ; op1:x31; op2:x31; dest:x27; op1val:0xfff80007;  op2val:0xfff82000
TEST_RR_OP(smax16, x27, x31, x31, 0x00000000, 0xfff80007, 0xfff82000, x9, 4, x15)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x19, rd==x16, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -513, rs2_h0_val == -8193
// opcode: smax16 ; op1:x16; op2:x19; dest:x16; op1val:0xfdfffff9;  op2val:0x3fffdfff
TEST_RR_OP(smax16, x16, x16, x19, 0x00000000, 0xfdfffff9, 0x3fffdfff, x9, 8, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 8192, rs1_h1_val == 64, rs2_h0_val == -9
// opcode: smax16 ; op1:x7; op2:x7; dest:x7; op1val:0x402000;  op2val:0x800fff7
TEST_RR_OP(smax16, x7, x7, x7, 0x00000000, 0x402000, 0x800fff7, x9, 12, x15)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h1_val == 16, rs1_h0_val == 16384, rs2_h0_val == 16384, rs2_h1_val == -2
// opcode: smax16 ; op1:x13; op2:x12; dest:x12; op1val:0x104000;  op2val:0xfffe4000
TEST_RR_OP(smax16, x12, x13, x12, 0x00000000, 0x104000, 0xfffe4000, x9, 16, x15)

inst_5:
// rs1==x10, rs2==x17, rd==x5, rs2_h1_val == -21846, rs1_h0_val == -1025, rs1_h1_val == -4097, rs2_h0_val == 8
// opcode: smax16 ; op1:x10; op2:x17; dest:x5; op1val:0xeffffbff;  op2val:0xaaaa0008
TEST_RR_OP(smax16, x5, x10, x17, 0x00000000, 0xeffffbff, 0xaaaa0008, x9, 20, x15)

inst_6:
// rs1==x30, rs2==x25, rd==x0, rs2_h1_val == 21845, rs1_h1_val == 16384, rs2_h0_val == -21846, rs1_h0_val == -257
// opcode: smax16 ; op1:x30; op2:x25; dest:x0; op1val:0x4000feff;  op2val:0x5555aaaa
TEST_RR_OP(smax16, x0, x30, x25, 0x00000000, 0x4000feff, 0x5555aaaa, x9, 24, x15)

inst_7:
// rs1==x0, rs2==x3, rd==x18, rs2_h1_val == 32767, rs1_h1_val == -21846
// opcode: smax16 ; op1:x0; op2:x3; dest:x18; op1val:0xaaaafbff;  op2val:0x7fffaaaa
TEST_RR_OP(smax16, x18, x0, x3, 0x00000000, 0xaaaafbff, 0x7fffaaaa, x9, 28, x15)

inst_8:
// rs1==x5, rs2==x16, rd==x3, rs2_h1_val == -16385, rs1_h0_val == -2049
// opcode: smax16 ; op1:x5; op2:x16; dest:x3; op1val:0x09f7ff;  op2val:0xbffffff8
TEST_RR_OP(smax16, x3, x5, x16, 0x00000000, 0x09f7ff, 0xbffffff8, x9, 32, x15)

inst_9:
// rs1==x3, rs2==x0, rd==x8, rs2_h1_val == -8193, rs1_h0_val == -1, rs2_h0_val == 64, rs1_h1_val == -257
// opcode: smax16 ; op1:x3; op2:x0; dest:x8; op1val:0xfeffffff;  op2val:0xdfff0040
TEST_RR_OP(smax16, x8, x3, x0, 0x00000000, 0xfeffffff, 0xdfff0040, x9, 36, x15)

inst_10:
// rs1==x6, rs2==x13, rd==x23, rs2_h1_val == -4097, rs2_h0_val == -2
// opcode: smax16 ; op1:x6; op2:x13; dest:x23; op1val:0x3fff4000;  op2val:0xeffffffe
TEST_RR_OP(smax16, x23, x6, x13, 0x00000000, 0x3fff4000, 0xeffffffe, x9, 40, x15)

inst_11:
// rs1==x17, rs2==x5, rd==x1, rs2_h1_val == -2049, rs1_h0_val == -2
// opcode: smax16 ; op1:x17; op2:x5; dest:x1; op1val:0x07fffe;  op2val:0xf7fffff8
TEST_RR_OP(smax16, x1, x17, x5, 0x00000000, 0x07fffe, 0xf7fffff8, x9, 44, x15)

inst_12:
// rs1==x20, rs2==x24, rd==x10, rs2_h1_val == -1025, 
// opcode: smax16 ; op1:x20; op2:x24; dest:x10; op1val:0x06feff;  op2val:0xfbff0003
TEST_RR_OP(smax16, x10, x20, x24, 0x00000000, 0x06feff, 0xfbff0003, x9, 48, x15)

inst_13:
// rs1==x23, rs2==x26, rd==x17, rs2_h1_val == -513, rs1_h0_val == 64
// opcode: smax16 ; op1:x23; op2:x26; dest:x17; op1val:0x070040;  op2val:0xfdfffffc
TEST_RR_OP(smax16, x17, x23, x26, 0x00000000, 0x070040, 0xfdfffffc, x9, 52, x15)

inst_14:
// rs1==x1, rs2==x21, rd==x2, rs2_h1_val == -129, rs1_h0_val == 512
// opcode: smax16 ; op1:x1; op2:x21; dest:x2; op1val:0x100200;  op2val:0xff7ffffe
TEST_RR_OP(smax16, x2, x1, x21, 0x00000000, 0x100200, 0xff7ffffe, x9, 56, x15)

inst_15:
// rs1==x27, rs2==x30, rd==x6, rs2_h1_val == -65, rs1_h1_val == -33, rs2_h0_val == 21845, rs1_h0_val == -8193
// opcode: smax16 ; op1:x27; op2:x30; dest:x6; op1val:0xffdfdfff;  op2val:0xffbf5555
TEST_RR_OP(smax16, x6, x27, x30, 0x00000000, 0xffdfdfff, 0xffbf5555, x9, 60, x15)

inst_16:
// rs1==x19, rs2==x4, rd==x11, rs2_h1_val == -33, rs2_h0_val == -5
// opcode: smax16 ; op1:x19; op2:x4; dest:x11; op1val:0x010006;  op2val:0xffdffffb
TEST_RR_OP(smax16, x11, x19, x4, 0x00000000, 0x010006, 0xffdffffb, x9, 64, x15)

inst_17:
// rs1==x8, rs2==x23, rd==x22, rs2_h1_val == -17, 
// opcode: smax16 ; op1:x8; op2:x23; dest:x22; op1val:0x03fff9;  op2val:0xffefc000
TEST_RR_OP(smax16, x22, x8, x23, 0x00000000, 0x03fff9, 0xffefc000, x9, 68, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:
// rs1==x24, rs2==x9, rd==x29, rs2_h1_val == -9, rs1_h1_val == 512
// opcode: smax16 ; op1:x24; op2:x9; dest:x29; op1val:0x200c000;  op2val:0xfff70007
TEST_RR_OP(smax16, x29, x24, x9, 0x00000000, 0x200c000, 0xfff70007, x3, 0, x5)

inst_19:
// rs1==x26, rs2==x18, rd==x20, rs2_h1_val == -5, rs1_h0_val == -4097, rs2_h0_val == 16
// opcode: smax16 ; op1:x26; op2:x18; dest:x20; op1val:0xffdfefff;  op2val:0xfffb0010
TEST_RR_OP(smax16, x20, x26, x18, 0x00000000, 0xffdfefff, 0xfffb0010, x3, 4, x5)

inst_20:
// rs1==x4, rs2==x29, rd==x31, rs2_h1_val == -3, rs2_h0_val == 256, rs1_h0_val == 32
// opcode: smax16 ; op1:x4; op2:x29; dest:x31; op1val:0x030020;  op2val:0xfffd0100
TEST_RR_OP(smax16, x31, x4, x29, 0x00000000, 0x030020, 0xfffd0100, x3, 8, x5)

inst_21:
// rs1==x28, rs2==x2, rd==x19, rs2_h1_val == -32768, 
// opcode: smax16 ; op1:x28; op2:x2; dest:x19; op1val:0xfff8fff8;  op2val:0x80000009
TEST_RR_OP(smax16, x19, x28, x2, 0x00000000, 0xfff8fff8, 0x80000009, x3, 12, x5)

inst_22:
// rs1==x18, rs2==x10, rd==x14, rs2_h1_val == 16384, rs2_h0_val == 1024, rs1_h0_val == 128
// opcode: smax16 ; op1:x18; op2:x10; dest:x14; op1val:0xfff90080;  op2val:0x40000400
TEST_RR_OP(smax16, x14, x18, x10, 0x00000000, 0xfff90080, 0x40000400, x3, 16, x5)

inst_23:
// rs1==x25, rs2==x15, rd==x21, rs2_h1_val == 8192, rs1_h0_val == 21845
// opcode: smax16 ; op1:x25; op2:x15; dest:x21; op1val:0x055555;  op2val:0x20004000
TEST_RR_OP(smax16, x21, x25, x15, 0x00000000, 0x055555, 0x20004000, x3, 20, x5)

inst_24:
// rs1==x15, rs2==x6, rd==x25, rs2_h1_val == 4096, rs1_h1_val == -16385, rs1_h0_val == 4
// opcode: smax16 ; op1:x15; op2:x6; dest:x25; op1val:0xbfff0004;  op2val:0x1000fff8
TEST_RR_OP(smax16, x25, x15, x6, 0x00000000, 0xbfff0004, 0x1000fff8, x3, 24, x5)

inst_25:
// rs1==x9, rs2==x11, rd==x28, rs2_h1_val == 1024, rs1_h0_val == -16385, rs1_h1_val == -2
// opcode: smax16 ; op1:x9; op2:x11; dest:x28; op1val:0xfffebfff;  op2val:0x4004000
TEST_RR_OP(smax16, x28, x9, x11, 0x00000000, 0xfffebfff, 0x4004000, x3, 28, x5)

inst_26:
// rs1==x12, rs2==x27, rd==x30, rs2_h1_val == 512, rs1_h1_val == -8193
// opcode: smax16 ; op1:x12; op2:x27; dest:x30; op1val:0xdfff5555;  op2val:0x2000008
TEST_RR_OP(smax16, x30, x12, x27, 0x00000000, 0xdfff5555, 0x2000008, x3, 32, x5)

inst_27:
// rs1==x21, rs2==x14, rd==x24, rs2_h1_val == 256, 
// opcode: smax16 ; op1:x21; op2:x14; dest:x24; op1val:0x4000fffe;  op2val:0x100fffa
TEST_RR_OP(smax16, x24, x21, x14, 0x00000000, 0x4000fffe, 0x100fffa, x3, 36, x5)

inst_28:
// rs1==x22, rs2==x1, rd==x9, rs2_h1_val == 128, rs2_h0_val == -1025, rs1_h1_val == 0
// opcode: smax16 ; op1:x22; op2:x1; dest:x9; op1val:0x003fff;  op2val:0x80fbff
TEST_RR_OP(smax16, x9, x22, x1, 0x00000000, 0x003fff, 0x80fbff, x3, 40, x5)

inst_29:
// rs1==x11, rs2==x22, rd==x26, rs2_h1_val == 64, rs2_h0_val == 4096
// opcode: smax16 ; op1:x11; op2:x22; dest:x26; op1val:0x010080;  op2val:0x401000
TEST_RR_OP(smax16, x26, x11, x22, 0x00000000, 0x010080, 0x401000, x3, 44, x5)

inst_30:
// rs1==x29, rs2==x28, rd==x15, rs2_h1_val == 32, rs1_h1_val == 8192
// opcode: smax16 ; op1:x29; op2:x28; dest:x15; op1val:0x20000040;  op2val:0x205555
TEST_RR_OP(smax16, x15, x29, x28, 0x00000000, 0x20000040, 0x205555, x3, 48, x5)

inst_31:
// rs1==x2, rs2==x8, rd==x13, rs2_h1_val == 16, 
// opcode: smax16 ; op1:x2; op2:x8; dest:x13; op1val:0x40000200;  op2val:0x10fffc
TEST_RR_OP(smax16, x13, x2, x8, 0x00000000, 0x40000200, 0x10fffc, x3, 52, x5)

inst_32:
// rs2_h1_val == 8, rs1_h1_val == -2049, rs1_h0_val == 4096
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff1000;  op2val:0x083fff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xf7ff1000, 0x083fff, x3, 56, x1)

inst_33:
// rs2_h1_val == 4, rs2_h0_val == -3, rs1_h1_val == -5
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbff;  op2val:0x04fffd
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfffbfbff, 0x04fffd, x3, 60, x1)

inst_34:
// rs1_h0_val == -513, rs1_h1_val == -1025, rs2_h0_val == 2048
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffdff;  op2val:0x3fff0800
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfbfffdff, 0x3fff0800, x3, 64, x1)

inst_35:
// rs1_h0_val == -129, rs1_h1_val == 8, rs2_h0_val == -2049
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ff7f;  op2val:0x20f7ff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x08ff7f, 0x20f7ff, x3, 68, x1)

inst_36:
// rs1_h0_val == -65, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffbf;  op2val:0xfbfffff7
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x3fffffbf, 0xfbfffff7, x3, 72, x1)

inst_37:
// rs1_h0_val == -33, rs2_h0_val == -65
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffdf;  op2val:0x4000ffbf
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfffbffdf, 0x4000ffbf, x3, 76, x1)

inst_38:
// rs1_h0_val == -17, rs1_h1_val == 128
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffef;  op2val:0xfefffbff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x80ffef, 0xfefffbff, x3, 80, x1)

inst_39:
// rs1_h0_val == -9, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7;  op2val:0xffbfffbf
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xf7fffff7, 0xffbfffbf, x3, 84, x1)

inst_40:
// rs1_h0_val == -5, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb;  op2val:0xfffdfffa
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xaaaafffb, 0xfffdfffa, x3, 88, x1)

inst_41:
// rs1_h0_val == -3, rs2_h0_val == -17
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffd;  op2val:0x04ffef
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x200fffd, 0x04ffef, x3, 92, x1)

inst_42:
// rs1_h0_val == 2048, rs1_h1_val == -129
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0800;  op2val:0x400fff8
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xff7f0800, 0x400fff8, x3, 96, x1)

inst_43:
// rs1_h0_val == 1024, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x050400;  op2val:0x40000009
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x050400, 0x40000009, x3, 100, x1)

inst_44:
// rs1_h0_val == 256, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000100;  op2val:0x090010
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xc0000100, 0x090010, x3, 104, x1)

inst_45:
// rs1_h0_val == 16, rs2_h1_val == -1, rs1_h1_val == -9, rs2_h0_val == -1
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70010;  op2val:0xffffffff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfff70010, 0xffffffff, x3, 108, x1)

inst_46:
// rs1_h0_val == 8, rs2_h0_val == 32767
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0008;  op2val:0x3fff7fff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfffc0008, 0x3fff7fff, x3, 112, x1)

inst_47:
// rs1_h0_val == 2, rs1_h1_val == -65, rs2_h0_val == 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002;  op2val:0x80000000
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xffbf0002, 0x80000000, x3, 116, x1)

inst_48:
// rs1_h0_val == 1, rs1_h1_val == 2
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x020001;  op2val:0xeffffffe
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x020001, 0xeffffffe, x3, 120, x1)

inst_49:
// rs2_h0_val == -32768, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800;  op2val:0x088000
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfff80800, 0x088000, x3, 124, x1)

inst_50:
// rs2_h0_val == 512, rs1_h1_val == -3
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000;  op2val:0x030200
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfffd1000, 0x030200, x3, 128, x1)

inst_51:
// rs2_h0_val == 128, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff6;  op2val:0xfffc0080
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x06fff6, 0xfffc0080, x3, 132, x1)

inst_52:
// rs2_h0_val == 32, rs1_h0_val == -21846
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaa;  op2val:0xfffa0020
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x00aaaa, 0xfffa0020, x3, 136, x1)

inst_53:
// rs2_h0_val == 4, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffdff;  op2val:0xfff60004
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfbfffdff, 0xfff60004, x3, 140, x1)

inst_54:
// rs2_h0_val == 2, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6c000;  op2val:0xaaaa0002
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfff6c000, 0xaaaa0002, x3, 144, x1)

inst_55:
// rs1_h1_val == 21845, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f;  op2val:0x80fffd
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x5555ff7f, 0x80fffd, x3, 148, x1)

inst_56:
// rs1_h1_val == 32767, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0200;  op2val:0x2007fff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x7fff0200, 0x2007fff, x3, 152, x1)

inst_57:
// rs1_h0_val == 0, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x020000;  op2val:0x080020
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x020000, 0x080020, x3, 156, x1)

inst_58:
// rs1_h1_val == -17, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef3fff;  op2val:0xc0000080
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xffef3fff, 0xc0000080, x3, 160, x1)

inst_59:
// rs1_h1_val == -32768, rs2_h0_val == -129
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000dfff;  op2val:0xfffbff7f
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x8000dfff, 0xfffbff7f, x3, 164, x1)

inst_60:
// rs1_h1_val == 4096, rs2_h0_val == -16385
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fdff;  op2val:0xfff9bfff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x1000fdff, 0xfff9bfff, x3, 168, x1)

inst_61:
// rs1_h1_val == 2048, rs2_h1_val == 2
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000400;  op2val:0x020200
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x8000400, 0x020200, x3, 172, x1)

inst_62:
// rs1_h1_val == 1024, rs2_h1_val == 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fdff;  op2val:0x000010
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x400fdff, 0x000010, x3, 176, x1)

inst_63:
// rs2_h1_val == 1, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff7;  op2val:0x01fffd
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x01fff7, 0x01fffd, x3, 180, x1)

inst_64:
// rs1_h1_val == 256, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff9;  op2val:0x000020
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x100fff9, 0x000020, x3, 184, x1)

inst_65:
// rs1_h1_val == 32, rs2_h0_val == -33
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffbf;  op2val:0xfffeffdf
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x20ffbf, 0xfffeffdf, x3, 188, x1)

inst_66:
// rs1_h1_val == 4, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x040020;  op2val:0xffbfffef
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x040020, 0xffbfffef, x3, 192, x1)

inst_67:
// rs2_h0_val == -4097, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3fff;  op2val:0x2000efff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xffbf3fff, 0x2000efff, x3, 196, x1)

inst_68:
// rs1_h1_val == -1, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0800;  op2val:0x081000
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xffff0800, 0x081000, x3, 200, x1)

inst_69:
// rs2_h0_val == -513, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffe;  op2val:0x06fdff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfff9fffe, 0x06fdff, x3, 204, x1)

inst_70:
// rs2_h0_val == -257, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x090006;  op2val:0xfff6feff
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x090006, 0xfff6feff, x3, 208, x1)

inst_71:
// rs1_h0_val == 32767, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff;  op2val:0xaaaafffe
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xdfff7fff, 0xaaaafffe, x3, 212, x1)

inst_72:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == 8192, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80007;  op2val:0xfff82000
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfff80007, 0xfff82000, x3, 216, x1)

inst_73:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 8192, rs1_h1_val == 64, rs2_h0_val == -9
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x402000;  op2val:0x800fff7
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x402000, 0x800fff7, x3, 220, x1)

inst_74:
// rs2_h1_val == 21845, rs1_h1_val == 16384, rs2_h0_val == -21846, rs1_h0_val == -257
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000feff;  op2val:0x5555aaaa
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0x4000feff, 0x5555aaaa, x3, 224, x1)

inst_75:
// rs2_h1_val == 32767, rs1_h1_val == -21846
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x7fffaaaa
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x7fffaaaa, x3, 228, x1)

inst_76:
// rs2_h1_val == -8193, rs1_h0_val == -1, rs2_h0_val == 64, rs1_h1_val == -257
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xdfff0040
TEST_RR_OP(smax16, x31, x30, x29, 0x00000000, 0xfeffffff, 0xdfff0040, x3, 232, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 59*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
