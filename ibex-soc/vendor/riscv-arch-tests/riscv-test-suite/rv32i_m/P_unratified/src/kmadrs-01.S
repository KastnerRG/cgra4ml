
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmadrs instruction of the RISC-V RV32PZicsr extension for the kmadrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmadrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x14, rd==x13, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -16385, rs2_h0_val == -16385
// opcode: kmadrs ; op1:x1; op2:x14; dest:x13; op1val:0x038000;  op2val:0xbfffbfff
TEST_PKRR_OP(kmadrs, x13, x1, x14, 0x00000000, 0x038000, 0xbfffbfff, x1, x10, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x1, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 4, rs2_h0_val == 8, rs1_h1_val == 4
// opcode: kmadrs ; op1:x21; op2:x21; dest:x1; op1val:0x04fffb;  op2val:0x040008
TEST_PKRR_OP(kmadrs, x1, x21, x21, 0x00000000, 0x04fffb, 0x040008, x21, x10, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x30, rs2==x17, rd==x30, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs2_h0_val == 8192, rs1_h0_val == -2049
// opcode: kmadrs ; op1:x30; op2:x17; dest:x30; op1val:0xfff9f7ff;  op2val:0x4002000
TEST_PKRR_OP(kmadrs, x30, x30, x17, 0x00000000, 0xfff9f7ff, 0x4002000, x30, x10, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -5, rs1_h1_val == -16385, rs1_h0_val == -33, rs2_h1_val == -129
// opcode: kmadrs ; op1:x26; op2:x26; dest:x26; op1val:0xbfffffdf;  op2val:0xff7ffffb
TEST_PKRR_OP(kmadrs, x26, x26, x26, 0x00000000, 0xbfffffdf, 0xff7ffffb, x26, x10, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x25, rd==x25, rs1_h0_val == rs2_h0_val, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs2_h1_val == -513, rs1_h0_val == 21845
// opcode: kmadrs ; op1:x14; op2:x25; dest:x25; op1val:0x80005555;  op2val:0xfdff5555
TEST_PKRR_OP(kmadrs, x25, x14, x25, 0x00000000, 0x80005555, 0xfdff5555, x14, x10, 32, x9)

inst_5:
// rs1==x2, rs2==x28, rd==x0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 512, rs2_h0_val == -2, rs1_h1_val == -9, rs2_h1_val == 2
// opcode: kmadrs ; op1:x2; op2:x28; dest:x0; op1val:0xfff70200;  op2val:0x02fffe
TEST_PKRR_OP(kmadrs, x0, x2, x28, 0x00000000, 0xfff70200, 0x02fffe, x2, x10, 40, x9)

inst_6:
// rs1==x12, rs2==x6, rd==x20, rs2_h1_val == -21846, rs1_h0_val == 2, rs1_h1_val == 128
// opcode: kmadrs ; op1:x12; op2:x6; dest:x20; op1val:0x800002;  op2val:0xaaaafff6
TEST_PKRR_OP(kmadrs, x20, x12, x6, 0x00000000, 0x800002, 0xaaaafff6, x12, x10, 48, x9)

inst_7:
// rs1==x17, rs2==x24, rd==x29, rs2_h1_val == 21845, 
// opcode: kmadrs ; op1:x17; op2:x24; dest:x29; op1val:0xfff80009;  op2val:0x5555fffe
TEST_PKRR_OP(kmadrs, x29, x17, x24, 0x00000000, 0xfff80009, 0x5555fffe, x17, x10, 56, x9)

inst_8:
// rs1==x23, rs2==x5, rd==x15, rs2_h1_val == 32767, rs1_h1_val == -4097
// opcode: kmadrs ; op1:x23; op2:x5; dest:x15; op1val:0xefff0002;  op2val:0x7fff2000
TEST_PKRR_OP(kmadrs, x15, x23, x5, 0x00000000, 0xefff0002, 0x7fff2000, x23, x10, 64, x9)

inst_9:
// rs1==x22, rs2==x31, rd==x21, rs2_h1_val == -8193, rs2_h0_val == -513, rs1_h0_val == -65, rs1_h1_val == 21845
// opcode: kmadrs ; op1:x22; op2:x31; dest:x21; op1val:0x5555ffbf;  op2val:0xdffffdff
TEST_PKRR_OP(kmadrs, x21, x22, x31, 0x00000000, 0x5555ffbf, 0xdffffdff, x22, x10, 72, x9)

inst_10:
// rs1==x13, rs2==x0, rd==x8, rs2_h1_val == -4097, rs2_h0_val == -3
// opcode: kmadrs ; op1:x13; op2:x0; dest:x8; op1val:0x09f7ff;  op2val:0xeffffffd
TEST_PKRR_OP(kmadrs, x8, x13, x0, 0x00000000, 0x09f7ff, 0xeffffffd, x13, x10, 80, x9)

inst_11:
// rs1==x0, rs2==x7, rd==x4, rs2_h1_val == -2049, rs1_h1_val == -65, rs1_h0_val == 32
// opcode: kmadrs ; op1:x0; op2:x7; dest:x4; op1val:0xffbf0020;  op2val:0xf7ff0005
TEST_PKRR_OP(kmadrs, x4, x0, x7, 0x00000000, 0xffbf0020, 0xf7ff0005, x0, x10, 88, x9)

inst_12:
// rs1==x6, rs2==x3, rd==x18, rs2_h1_val == -1025, rs1_h1_val == -1, rs2_h0_val == 4096
// opcode: kmadrs ; op1:x6; op2:x3; dest:x18; op1val:0xffff0007;  op2val:0xfbff1000
TEST_PKRR_OP(kmadrs, x18, x6, x3, 0x00000000, 0xffff0007, 0xfbff1000, x6, x10, 96, x9)

inst_13:
// rs1==x19, rs2==x18, rd==x17, rs2_h1_val == -257, rs2_h0_val == -65
// opcode: kmadrs ; op1:x19; op2:x18; dest:x17; op1val:0xfff8ffdf;  op2val:0xfeffffbf
TEST_PKRR_OP(kmadrs, x17, x19, x18, 0x00000000, 0xfff8ffdf, 0xfeffffbf, x19, x10, 104, x9)

inst_14:
// rs1==x24, rs2==x9, rd==x2, rs2_h1_val == -65, rs2_h0_val == -17
// opcode: kmadrs ; op1:x24; op2:x9; dest:x2; op1val:0x038000;  op2val:0xffbfffef
TEST_PKRR_OP(kmadrs, x2, x24, x9, 0x00000000, 0x038000, 0xffbfffef, x24, x10, 112, x14)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_15:
// rs1==x7, rs2==x1, rd==x3, rs2_h1_val == -33, rs1_h1_val == 64, rs2_h0_val == 2, rs1_h0_val == -9
// opcode: kmadrs ; op1:x7; op2:x1; dest:x3; op1val:0x40fff7;  op2val:0xffdf0002
TEST_PKRR_OP(kmadrs, x3, x7, x1, 0x00000000, 0x40fff7, 0xffdf0002, x7, x13, 0, x14)

inst_16:
// rs1==x31, rs2==x20, rd==x9, rs2_h1_val == -17, 
// opcode: kmadrs ; op1:x31; op2:x20; dest:x9; op1val:0xc0000200;  op2val:0xffef0005
TEST_PKRR_OP(kmadrs, x9, x31, x20, 0x00000000, 0xc0000200, 0xffef0005, x31, x13, 8, x14)

inst_17:
// rs1==x27, rs2==x19, rd==x23, rs2_h1_val == -9, rs2_h0_val == 4, rs1_h0_val == -1
// opcode: kmadrs ; op1:x27; op2:x19; dest:x23; op1val:0xfff7ffff;  op2val:0xfff70004
TEST_PKRR_OP(kmadrs, x23, x27, x19, 0x00000000, 0xfff7ffff, 0xfff70004, x27, x13, 16, x14)

inst_18:
// rs1==x18, rs2==x10, rd==x7, rs2_h1_val == -5, 
// opcode: kmadrs ; op1:x18; op2:x10; dest:x7; op1val:0xfff70020;  op2val:0xfffbffef
TEST_PKRR_OP(kmadrs, x7, x18, x10, 0x00000000, 0xfff70020, 0xfffbffef, x18, x13, 24, x14)

inst_19:
// rs1==x8, rs2==x2, rd==x27, rs2_h1_val == -3, rs1_h1_val == -8193, rs2_h0_val == -32768
// opcode: kmadrs ; op1:x8; op2:x2; dest:x27; op1val:0xdffffff6;  op2val:0xfffd8000
TEST_PKRR_OP(kmadrs, x27, x8, x2, 0x00000000, 0xdffffff6, 0xfffd8000, x8, x13, 32, x14)

inst_20:
// rs1==x25, rs2==x15, rd==x11, rs2_h1_val == -2, rs1_h1_val == -17, rs2_h0_val == -33
// opcode: kmadrs ; op1:x25; op2:x15; dest:x11; op1val:0xffeffff7;  op2val:0xfffeffdf
TEST_PKRR_OP(kmadrs, x11, x25, x15, 0x00000000, 0xffeffff7, 0xfffeffdf, x25, x13, 40, x14)

inst_21:
// rs1==x28, rs2==x8, rd==x12, rs2_h1_val == -32768, rs1_h0_val == -3
// opcode: kmadrs ; op1:x28; op2:x8; dest:x12; op1val:0xeffffffd;  op2val:0x8000fffd
TEST_PKRR_OP(kmadrs, x12, x28, x8, 0x00000000, 0xeffffffd, 0x8000fffd, x28, x13, 48, x14)

inst_22:
// rs1==x29, rs2==x22, rd==x28, rs2_h1_val == 16384, rs1_h0_val == -1025
// opcode: kmadrs ; op1:x29; op2:x22; dest:x28; op1val:0x3ffffbff;  op2val:0x40002000
TEST_PKRR_OP(kmadrs, x28, x29, x22, 0x00000000, 0x3ffffbff, 0x40002000, x29, x13, 56, x14)

inst_23:
// rs1==x15, rs2==x27, rd==x5, rs2_h1_val == 8192, rs1_h0_val == 256, rs1_h1_val == 4096, rs2_h0_val == 16384
// opcode: kmadrs ; op1:x15; op2:x27; dest:x5; op1val:0x10000100;  op2val:0x20004000
TEST_PKRR_OP(kmadrs, x5, x15, x27, 0x00000000, 0x10000100, 0x20004000, x15, x13, 64, x14)

inst_24:
// rs1==x3, rs2==x4, rd==x10, rs2_h1_val == 4096, rs1_h1_val == 32, rs1_h0_val == 32767
// opcode: kmadrs ; op1:x3; op2:x4; dest:x10; op1val:0x207fff;  op2val:0x10004000
TEST_PKRR_OP(kmadrs, x10, x3, x4, 0x00000000, 0x207fff, 0x10004000, x3, x13, 72, x14)

inst_25:
// rs1==x4, rs2==x11, rd==x6, rs2_h1_val == 2048, 
// opcode: kmadrs ; op1:x4; op2:x11; dest:x6; op1val:0x1000fffd;  op2val:0x800fffb
TEST_PKRR_OP(kmadrs, x6, x4, x11, 0x00000000, 0x1000fffd, 0x800fffb, x4, x13, 80, x14)

inst_26:
// rs1==x16, rs2==x23, rd==x24, rs2_h1_val == 512, rs1_h1_val == -129
// opcode: kmadrs ; op1:x16; op2:x23; dest:x24; op1val:0xff7f0007;  op2val:0x200ffdf
TEST_PKRR_OP(kmadrs, x24, x16, x23, 0x00000000, 0xff7f0007, 0x200ffdf, x16, x13, 88, x14)

inst_27:
// rs1==x10, rs2==x16, rd==x22, rs2_h1_val == 256, 
// opcode: kmadrs ; op1:x10; op2:x16; dest:x22; op1val:0x053fff;  op2val:0x1003fff
TEST_PKRR_OP(kmadrs, x22, x10, x16, 0x00000000, 0x053fff, 0x1003fff, x10, x13, 96, x14)

inst_28:
// rs1==x9, rs2==x30, rd==x16, rs2_h1_val == 128, 
// opcode: kmadrs ; op1:x9; op2:x30; dest:x16; op1val:0x800006;  op2val:0x800002
TEST_PKRR_OP(kmadrs, x16, x9, x30, 0x00000000, 0x800006, 0x800002, x9, x13, 104, x14)

inst_29:
// rs1==x11, rs2==x12, rd==x19, rs2_h1_val == 64, rs1_h0_val == 8192, rs2_h0_val == 2048
// opcode: kmadrs ; op1:x11; op2:x12; dest:x19; op1val:0xfffc2000;  op2val:0x400800
TEST_PKRR_OP(kmadrs, x19, x11, x12, 0x00000000, 0xfffc2000, 0x400800, x11, x13, 112, x2)

inst_30:
// rs1==x20, rs2==x29, rd==x14, rs2_h1_val == 32, 
// opcode: kmadrs ; op1:x20; op2:x29; dest:x14; op1val:0xfff90006;  op2val:0x20fdff
TEST_PKRR_OP(kmadrs, x14, x20, x29, 0x00000000, 0xfff90006, 0x20fdff, x20, x13, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x5, rs2==x13, rd==x31, rs2_h1_val == 16, rs1_h0_val == -21846
// opcode: kmadrs ; op1:x5; op2:x13; dest:x31; op1val:0xfff9aaaa;  op2val:0x100006
TEST_PKRR_OP(kmadrs, x31, x5, x13, 0x00000000, 0xfff9aaaa, 0x100006, x5, x1, 0, x2)

inst_32:
// rs2_h1_val == 8, rs1_h1_val == 8, rs2_h0_val == -2049
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x080009;  op2val:0x08f7ff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x080009, 0x08f7ff, x30, x1, 8, x2)

inst_33:
// rs1_h0_val == -513, rs2_h0_val == -257
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x06fdff;  op2val:0x400feff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x06fdff, 0x400feff, x30, x1, 16, x2)

inst_34:
// rs1_h0_val == -257, rs1_h1_val == -2, rs2_h0_val == -9
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeff;  op2val:0x05fff7
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffefeff, 0x05fff7, x30, x1, 24, x2)

inst_35:
// rs1_h0_val == -129, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7f;  op2val:0x02ffef
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x20ff7f, 0x02ffef, x30, x1, 32, x2)

inst_36:
// rs1_h0_val == -17, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffef;  op2val:0x55550009
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffaffef, 0x55550009, x30, x1, 40, x2)

inst_37:
// rs1_h0_val == -2, rs2_h0_val == -21846
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe;  op2val:0x4000aaaa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x20fffe, 0x4000aaaa, x30, x1, 48, x2)

inst_38:
// rs1_h0_val == 16384, rs1_h1_val == 1024
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x4004000;  op2val:0xfbfffffc
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x4004000, 0xfbfffffc, x30, x1, 56, x2)

inst_39:
// rs1_h0_val == 4096, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000;  op2val:0xffef0002
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xefff1000, 0xffef0002, x30, x1, 64, x2)

inst_40:
// rs1_h0_val == 2048, rs1_h1_val == 8192
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x20000800;  op2val:0xbfff5555
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x20000800, 0xbfff5555, x30, x1, 72, x2)

inst_41:
// rs1_h0_val == 1024, rs2_h0_val == 256
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0400;  op2val:0xbfff0100
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffe0400, 0xbfff0100, x30, x1, 80, x2)

inst_42:
// rs1_h0_val == 128, rs2_h0_val == 0
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x800080;  op2val:0x200000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x800080, 0x200000, x30, x1, 88, x2)

inst_43:
// rs1_h0_val == 64, rs2_h0_val == 512, rs1_h1_val == -5
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040;  op2val:0x80000200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffb0040, 0x80000200, x30, x1, 96, x2)

inst_44:
// rs1_h0_val == 16, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff80010;  op2val:0xfffa1000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfff80010, 0xfffa1000, x30, x1, 104, x2)

inst_45:
// rs1_h0_val == 8, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x080008;  op2val:0x800fff9
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x080008, 0x800fff9, x30, x1, 112, x2)

inst_46:
// rs1_h0_val == 4, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x400004;  op2val:0x040200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x400004, 0x040200, x30, x1, 120, x2)

inst_47:
// rs1_h0_val == 1, rs1_h1_val == -2049
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0001;  op2val:0xc000aaaa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xf7ff0001, 0xc000aaaa, x30, x1, 128, x2)

inst_48:
// rs1_h0_val == 0, rs2_h1_val == -1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x030000;  op2val:0xfffffeff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x030000, 0xfffffeff, x30, x1, 136, x2)

inst_49:
// rs2_h1_val == 1, rs1_h1_val == 256
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x1000800;  op2val:0x010008
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x1000800, 0x010008, x30, x1, 144, x2)

inst_50:
// rs2_h0_val == 1024, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff70200;  op2val:0xfff80400
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfff70200, 0xfff80400, x30, x1, 152, x2)

inst_51:
// rs2_h0_val == 128, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffef0800;  op2val:0x20000080
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xffef0800, 0x20000080, x30, x1, 160, x2)

inst_52:
// rs2_h0_val == 64, rs1_h1_val == -3
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff7;  op2val:0x020040
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffdfff7, 0x020040, x30, x1, 168, x2)

inst_53:
// rs2_h0_val == 32, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0xefff0020
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xbfffffff, 0xefff0020, x30, x1, 176, x2)

inst_54:
// rs2_h0_val == 16, rs1_h1_val == 1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x010008;  op2val:0x3fff0010
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x010008, 0x3fff0010, x30, x1, 184, x2)

inst_55:
// rs2_h0_val == 1, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffeaaaa;  op2val:0x20000001
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfffeaaaa, 0x20000001, x30, x1, 192, x2)

inst_56:
// rs2_h0_val == -1, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x04fffe;  op2val:0xfffcffff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x04fffe, 0xfffcffff, x30, x1, 200, x2)

inst_57:
// rs1_h1_val == -21846, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0009;  op2val:0x80000040
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xaaaa0009, 0x80000040, x30, x1, 208, x2)

inst_58:
// rs1_h1_val == 32767, rs2_h0_val == -129
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0006;  op2val:0xf7ffff7f
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x7fff0006, 0xf7ffff7f, x30, x1, 216, x2)

inst_59:
// rs1_h1_val == -1025, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0002;  op2val:0x20fff7
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfbff0002, 0x20fff7, x30, x1, 224, x2)

inst_60:
// rs1_h1_val == -513, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaa;  op2val:0xfeff3fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfdffaaaa, 0xfeff3fff, x30, x1, 232, x2)

inst_61:
// rs1_h1_val == -257, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0200;  op2val:0xaaaac000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfeff0200, 0xaaaac000, x30, x1, 240, x2)

inst_62:
// rs1_h1_val == -33, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff8;  op2val:0x80fff7
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xffdffff8, 0x80fff7, x30, x1, 248, x2)

inst_63:
// rs1_h1_val == 16384, rs1_h0_val == -4097
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0x3fff8000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x4000efff, 0x3fff8000, x30, x1, 256, x2)

inst_64:
// rs1_h1_val == 2048, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x800fbff;  op2val:0x7fff0010
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x800fbff, 0x7fff0010, x30, x1, 264, x2)

inst_65:
// rs1_h1_val == 512, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x200fbff;  op2val:0x80000100
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x200fbff, 0x80000100, x30, x1, 272, x2)

inst_66:
// rs2_h1_val == 0, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40000040;  op2val:0x003fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x40000040, 0x003fff, x30, x1, 280, x2)

inst_67:
// rs1_h1_val == 16, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x100006;  op2val:0xfff8fffa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x100006, 0xfff8fffa, x30, x1, 288, x2)

inst_68:
// rs2_h0_val == 32767, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x07efff;  op2val:0x8007fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x07efff, 0x8007fff, x30, x1, 296, x2)

inst_69:
// rs2_h0_val == -8193, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xdffff7ff;  op2val:0xffffdfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xdffff7ff, 0xffffdfff, x30, x1, 304, x2)

inst_70:
// rs1_h1_val == 2, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x02fffe;  op2val:0x02fffa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x02fffe, 0x02fffa, x30, x1, 312, x2)

inst_71:
// rs2_h0_val == -4097, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb;  op2val:0xffffefff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xfff7fffb, 0xffffefff, x30, x1, 320, x2)

inst_72:
// rs2_h0_val == -1025, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfff8000;  op2val:0x06fbff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xbfff8000, 0x06fbff, x30, x1, 328, x2)

inst_73:
// rs1_h0_val == -16385, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffefbfff;  op2val:0xbffffff8
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xffefbfff, 0xbffffff8, x30, x1, 336, x2)

inst_74:
// rs1_h0_val == -8193, rs1_h1_val == 0
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff;  op2val:0x00dfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0x00dfff, 0x00dfff, x30, x1, 344, x2)

inst_75:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -5, rs1_h1_val == -16385, rs1_h0_val == -33, rs2_h1_val == -129
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdf;  op2val:0xff7ffffb
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xbfffffdf, 0xff7ffffb, x30, x1, 352, x2)

inst_76:
// rs2_h1_val == -2049, rs1_h1_val == -65, rs1_h0_val == 32
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0020;  op2val:0xf7ff0005
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x00000000, 0xffbf0020, 0xf7ff0005, x30, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
