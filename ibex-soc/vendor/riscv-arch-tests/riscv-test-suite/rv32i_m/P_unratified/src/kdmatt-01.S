
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmatt instruction of the RISC-V RV32PZicsr extension for the kdmatt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmatt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x3, rd==x18, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == 4096, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2, rs1_h1_val == 32767
// opcode: kdmatt ; op1:x21; op2:x3; dest:x18; op1val:0x7fff8000;  op2val:0x021000
TEST_PKRR_OP(kdmatt, x18, x21, x3, 0x00000000, 0x7fff8000, 0x021000, x21, x4, 0, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x19, rs1_h1_val == rs2_h1_val, rs2_h1_val == 4096, rs1_h0_val == 0, rs1_h1_val == 4096, rs2_h0_val == -2049
// opcode: kdmatt ; op1:x30; op2:x30; dest:x19; op1val:0x10000000;  op2val:0x1000f7ff
TEST_PKRR_OP(kdmatt, x19, x30, x30, 0x00000000, 0x10000000, 0x1000f7ff, x30, x4, 8, x12)

inst_2:
// rs1 == rd != rs2, rs1==x20, rs2==x6, rd==x20, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -1, rs1_h0_val == 128, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 21845
// opcode: kdmatt ; op1:x20; op2:x6; dest:x20; op1val:0xffff0080;  op2val:0x55550003
TEST_PKRR_OP(kdmatt, x20, x20, x6, 0x00000000, 0xffff0080, 0x55550003, x20, x4, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 2, rs2_h1_val == -2049, rs2_h0_val == 8
// opcode: kdmatt ; op1:x13; op2:x13; dest:x13; op1val:0xfff80002;  op2val:0xf7ff0008
TEST_PKRR_OP(kdmatt, x13, x13, x13, 0x00000000, 0xfff80002, 0xf7ff0008, x13, x4, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x7, rd==x7, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -16385, rs2_h0_val == 0, rs1_h0_val == 8192
// opcode: kdmatt ; op1:x14; op2:x7; dest:x7; op1val:0x3fff2000;  op2val:0xbfff0000
TEST_PKRR_OP(kdmatt, x7, x14, x7, 0x00000000, 0x3fff2000, 0xbfff0000, x14, x4, 32, x12)

inst_5:
// rs1==x16, rs2==x8, rd==x24, rs1_h0_val == rs2_h0_val, rs2_h1_val == 16384, rs1_h1_val == -4097, rs1_h0_val == 32, rs2_h0_val == 32
// opcode: kdmatt ; op1:x16; op2:x8; dest:x24; op1val:0xefff0020;  op2val:0x40000020
TEST_PKRR_OP(kdmatt, x24, x16, x8, 0x00000000, 0xefff0020, 0x40000020, x16, x4, 40, x12)

inst_6:
// rs1==x8, rs2==x15, rd==x11, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -65, rs1_h1_val == 512
// opcode: kdmatt ; op1:x8; op2:x15; dest:x11; op1val:0x200ffbf;  op2val:0x06f7ff
TEST_PKRR_OP(kdmatt, x11, x8, x15, 0x00000000, 0x200ffbf, 0x06f7ff, x8, x4, 48, x12)

inst_7:
// rs1==x9, rs2==x29, rd==x8, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -33, rs2_h0_val == -8193, rs2_h1_val == -21846, rs1_h0_val == 4096
// opcode: kdmatt ; op1:x9; op2:x29; dest:x8; op1val:0xffdf1000;  op2val:0xaaaadfff
TEST_PKRR_OP(kdmatt, x8, x9, x29, 0x00000000, 0xffdf1000, 0xaaaadfff, x9, x4, 56, x12)

inst_8:
// rs1==x10, rs2==x28, rd==x3, rs2_h1_val == 32767, rs1_h1_val == -17, rs1_h0_val == -2049
// opcode: kdmatt ; op1:x10; op2:x28; dest:x3; op1val:0xffeff7ff;  op2val:0x7fff3fff
TEST_PKRR_OP(kdmatt, x3, x10, x28, 0x00000000, 0xffeff7ff, 0x7fff3fff, x10, x4, 64, x12)

inst_9:
// rs1==x15, rs2==x17, rd==x25, rs2_h1_val == -8193, rs1_h0_val == 8, rs2_h0_val == -4097
// opcode: kdmatt ; op1:x15; op2:x17; dest:x25; op1val:0x7fff0008;  op2val:0xdfffefff
TEST_PKRR_OP(kdmatt, x25, x15, x17, 0x00000000, 0x7fff0008, 0xdfffefff, x15, x4, 72, x12)

inst_10:
// rs1==x3, rs2==x5, rd==x21, rs2_h1_val == -4097, rs1_h0_val == -21846
// opcode: kdmatt ; op1:x3; op2:x5; dest:x21; op1val:0x09aaaa;  op2val:0xefff3fff
TEST_PKRR_OP(kdmatt, x21, x3, x5, 0x00000000, 0x09aaaa, 0xefff3fff, x3, x4, 80, x12)

inst_11:
// rs1==x26, rs2==x21, rd==x1, rs2_h1_val == -1025, rs2_h0_val == 21845, rs1_h0_val == 16384, rs1_h1_val == -5
// opcode: kdmatt ; op1:x26; op2:x21; dest:x1; op1val:0xfffb4000;  op2val:0xfbff5555
TEST_PKRR_OP(kdmatt, x1, x26, x21, 0x00000000, 0xfffb4000, 0xfbff5555, x26, x4, 88, x12)

inst_12:
// rs1==x11, rs2==x0, rd==x14, rs2_h1_val == -513, rs2_h0_val == -5, rs1_h1_val == 128
// opcode: kdmatt ; op1:x11; op2:x0; dest:x14; op1val:0x80fffc;  op2val:0xfdfffffb
TEST_PKRR_OP(kdmatt, x14, x11, x0, 0x00000000, 0x80fffc, 0xfdfffffb, x11, x4, 96, x12)

inst_13:
// rs1==x25, rs2==x20, rd==x2, rs2_h1_val == -257, 
// opcode: kdmatt ; op1:x25; op2:x20; dest:x2; op1val:0xffdffff6;  op2val:0xfeff0020
TEST_PKRR_OP(kdmatt, x2, x25, x20, 0x00000000, 0xffdffff6, 0xfeff0020, x25, x4, 104, x12)

inst_14:
// rs1==x29, rs2==x27, rd==x22, rs2_h1_val == -129, rs1_h1_val == 16384, rs2_h0_val == -17
// opcode: kdmatt ; op1:x29; op2:x27; dest:x22; op1val:0x40000000;  op2val:0xff7fffef
TEST_PKRR_OP(kdmatt, x22, x29, x27, 0x00000000, 0x40000000, 0xff7fffef, x29, x4, 112, x12)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x24, rs2==x25, rd==x23, rs2_h1_val == -65, rs1_h1_val == 1
// opcode: kdmatt ; op1:x24; op2:x25; dest:x23; op1val:0x013fff;  op2val:0xffbfffef
TEST_PKRR_OP(kdmatt, x23, x24, x25, 0x00000000, 0x013fff, 0xffbfffef, x24, x3, 0, x8)

inst_16:
// rs1==x28, rs2==x14, rd==x29, rs2_h1_val == -33, rs1_h1_val == -32768
// opcode: kdmatt ; op1:x28; op2:x14; dest:x29; op1val:0x8000fff8;  op2val:0xffdffff9
TEST_PKRR_OP(kdmatt, x29, x28, x14, 0x00000000, 0x8000fff8, 0xffdffff9, x28, x3, 8, x8)

inst_17:
// rs1==x7, rs2==x12, rd==x5, rs2_h1_val == -17, rs1_h0_val == -2, rs1_h1_val == -9, rs2_h0_val == -33
// opcode: kdmatt ; op1:x7; op2:x12; dest:x5; op1val:0xfff7fffe;  op2val:0xffefffdf
TEST_PKRR_OP(kdmatt, x5, x7, x12, 0x00000000, 0xfff7fffe, 0xffefffdf, x7, x3, 16, x8)

inst_18:
// rs1==x23, rs2==x31, rd==x15, rs2_h1_val == -9, 
// opcode: kdmatt ; op1:x23; op2:x31; dest:x15; op1val:0x060008;  op2val:0xfff70006
TEST_PKRR_OP(kdmatt, x15, x23, x31, 0x00000000, 0x060008, 0xfff70006, x23, x3, 24, x8)

inst_19:
// rs1==x0, rs2==x10, rd==x6, rs2_h1_val == -5, 
// opcode: kdmatt ; op1:x0; op2:x10; dest:x6; op1val:0xfffcfffa;  op2val:0xfffbefff
TEST_PKRR_OP(kdmatt, x6, x0, x10, 0x00000000, 0xfffcfffa, 0xfffbefff, x0, x3, 32, x8)

inst_20:
// rs1==x17, rs2==x26, rd==x27, rs2_h1_val == -3, rs2_h0_val == 16
// opcode: kdmatt ; op1:x17; op2:x26; dest:x27; op1val:0x80000020;  op2val:0xfffd0010
TEST_PKRR_OP(kdmatt, x27, x17, x26, 0x00000000, 0x80000020, 0xfffd0010, x17, x3, 40, x8)

inst_21:
// rs1==x5, rs2==x4, rd==x12, rs2_h1_val == -2, rs1_h1_val == 21845, rs2_h0_val == 2048
// opcode: kdmatt ; op1:x5; op2:x4; dest:x12; op1val:0x55550003;  op2val:0xfffe0800
TEST_PKRR_OP(kdmatt, x12, x5, x4, 0x00000000, 0x55550003, 0xfffe0800, x5, x3, 48, x8)

inst_22:
// rs1==x27, rs2==x23, rd==x31, rs2_h1_val == -32768, rs1_h1_val == 32, rs2_h0_val == -32768, rs1_h0_val == -129
// opcode: kdmatt ; op1:x27; op2:x23; dest:x31; op1val:0x20ff7f;  op2val:0x80008000
TEST_PKRR_OP(kdmatt, x31, x27, x23, 0x00000000, 0x20ff7f, 0x80008000, x27, x3, 56, x8)

inst_23:
// rs1==x19, rs2==x24, rd==x17, rs2_h1_val == 8192, rs2_h0_val == -21846, rs1_h0_val == 32767
// opcode: kdmatt ; op1:x19; op2:x24; dest:x17; op1val:0xffff7fff;  op2val:0x2000aaaa
TEST_PKRR_OP(kdmatt, x17, x19, x24, 0x00000000, 0xffff7fff, 0x2000aaaa, x19, x3, 64, x8)

inst_24:
// rs1==x1, rs2==x9, rd==x26, rs2_h1_val == 2048, rs2_h0_val == 1
// opcode: kdmatt ; op1:x1; op2:x9; dest:x26; op1val:0xefff0003;  op2val:0x8000001
TEST_PKRR_OP(kdmatt, x26, x1, x9, 0x00000000, 0xefff0003, 0x8000001, x1, x3, 72, x8)

inst_25:
// rs1==x2, rs2==x1, rd==x28, rs2_h1_val == 1024, rs1_h1_val == 64, rs1_h0_val == 21845
// opcode: kdmatt ; op1:x2; op2:x1; dest:x28; op1val:0x405555;  op2val:0x400ffdf
TEST_PKRR_OP(kdmatt, x28, x2, x1, 0x00000000, 0x405555, 0x400ffdf, x2, x3, 80, x8)

inst_26:
// rs1==x6, rs2==x2, rd==x9, rs2_h1_val == 512, rs1_h1_val == -129
// opcode: kdmatt ; op1:x6; op2:x2; dest:x9; op1val:0xff7f0005;  op2val:0x2000020
TEST_PKRR_OP(kdmatt, x9, x6, x2, 0x00000000, 0xff7f0005, 0x2000020, x6, x3, 88, x8)

inst_27:
// rs1==x22, rs2==x11, rd==x0, rs2_h1_val == 256, rs2_h0_val == 128, rs1_h0_val == -4097
// opcode: kdmatt ; op1:x22; op2:x11; dest:x0; op1val:0xffdfefff;  op2val:0x1000080
TEST_PKRR_OP(kdmatt, x0, x22, x11, 0x00000000, 0xffdfefff, 0x1000080, x22, x3, 96, x8)

inst_28:
// rs1==x31, rs2==x22, rd==x4, rs2_h1_val == 128, rs2_h0_val == -16385
// opcode: kdmatt ; op1:x31; op2:x22; dest:x4; op1val:0xffffffbf;  op2val:0x80bfff
TEST_PKRR_OP(kdmatt, x4, x31, x22, 0x00000000, 0xffffffbf, 0x80bfff, x31, x3, 104, x8)

inst_29:
// rs1==x12, rs2==x16, rd==x30, rs2_h1_val == 64, rs1_h1_val == 8192, rs1_h0_val == 64
// opcode: kdmatt ; op1:x12; op2:x16; dest:x30; op1val:0x20000040;  op2val:0x400003
TEST_PKRR_OP(kdmatt, x30, x12, x16, 0x00000000, 0x20000040, 0x400003, x12, x3, 112, x8)

inst_30:
// rs1==x18, rs2==x19, rd==x16, rs1_h0_val == -1025, rs2_h0_val == -1, rs1_h1_val == -1025
// opcode: kdmatt ; op1:x18; op2:x19; dest:x16; op1val:0xfbfffbff;  op2val:0x800ffff
TEST_PKRR_OP(kdmatt, x16, x18, x19, 0x00000000, 0xfbfffbff, 0x800ffff, x18, x3, 120, x8)

inst_31:
// rs1==x4, rs2==x18, rd==x10, rs1_h0_val == -513, rs2_h1_val == 16, rs1_h1_val == 2
// opcode: kdmatt ; op1:x4; op2:x18; dest:x10; op1val:0x02fdff;  op2val:0x100001
TEST_PKRR_OP(kdmatt, x10, x4, x18, 0x00000000, 0x02fdff, 0x100001, x4, x3, 128, x1)

inst_32:
// rs1_h0_val == -257, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff;  op2val:0xfff78000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xeffffeff, 0xfff78000, x30, x3, 136, x1)

inst_33:
// rs1_h0_val == -33, rs2_h0_val == 8192
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdf;  op2val:0x102000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfff6ffdf, 0x102000, x30, x3, 144, x1)

inst_34:
// rs1_h0_val == -17, rs2_h0_val == 512
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffef;  op2val:0x4000200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x7fffffef, 0x4000200, x30, x3, 152, x1)

inst_35:
// rs1_h0_val == -9, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7;  op2val:0xfffa0080
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xffdffff7, 0xfffa0080, x30, x3, 160, x1)

inst_36:
// rs1_h0_val == -5, rs1_h1_val == -2
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffb;  op2val:0xaaaa0006
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfffefffb, 0xaaaa0006, x30, x3, 168, x1)

inst_37:
// rs1_h0_val == -3, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x09fffd;  op2val:0x8000fffb
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x09fffd, 0x8000fffb, x30, x3, 176, x1)

inst_38:
// rs1_h0_val == 2048, rs1_h1_val == -21846
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0800;  op2val:0x2000dfff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xaaaa0800, 0x2000dfff, x30, x3, 184, x1)

inst_39:
// rs1_h0_val == 1024, rs2_h0_val == 64
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0xffbf0040
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x7fff0400, 0xffbf0040, x30, x3, 192, x1)

inst_40:
// rs1_h0_val == 512, rs2_h1_val == -1, rs2_h0_val == -1025
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0xfffffbff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x800200, 0xfffffbff, x30, x3, 200, x1)

inst_41:
// rs1_h0_val == 256, rs2_h1_val == 4, rs1_h1_val == -513
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0100;  op2val:0x04fff9
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfdff0100, 0x04fff9, x30, x3, 208, x1)

inst_42:
// rs1_h0_val == 16, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000010;  op2val:0x06ffdf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x2000010, 0x06ffdf, x30, x3, 216, x1)

inst_43:
// rs1_h0_val == 4, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff60004;  op2val:0xfffa0200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfff60004, 0xfffa0200, x30, x3, 224, x1)

inst_44:
// rs1_h0_val == 1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0001;  op2val:0xffdffff8
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xff7f0001, 0xffdffff8, x30, x3, 232, x1)

inst_45:
// rs1_h0_val == -1, rs1_h1_val == -257
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0x05efff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfeffffff, 0x05efff, x30, x3, 240, x1)

inst_46:
// rs2_h1_val == 32, rs1_h1_val == 4
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0x200020
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x04ffef, 0x200020, x30, x3, 248, x1)

inst_47:
// rs2_h0_val == -3, rs1_h0_val == -8193, rs2_h1_val == 1
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfff;  op2val:0x01fffd
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xff7fdfff, 0x01fffd, x30, x3, 256, x1)

inst_48:
// rs2_h0_val == -2, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd;  op2val:0xffeffffe
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x2000fffd, 0xffeffffe, x30, x3, 264, x1)

inst_49:
// rs2_h0_val == 16384, rs1_h1_val == 16
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x100040;  op2val:0xfff64000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x100040, 0xfff64000, x30, x3, 272, x1)

inst_50:
// rs2_h0_val == 1024, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x06fff8;  op2val:0x200400
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x06fff8, 0x200400, x30, x3, 280, x1)

inst_51:
// rs2_h0_val == 256, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc000;  op2val:0x20000100
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfeffc000, 0x20000100, x30, x3, 288, x1)

inst_52:
// rs2_h0_val == 4, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7f7ff;  op2val:0x400004
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfff7f7ff, 0x400004, x30, x3, 296, x1)

inst_53:
// rs2_h0_val == 2, rs1_h1_val == 1024
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x400fff6;  op2val:0xdfff0002
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x400fff6, 0xdfff0002, x30, x3, 304, x1)

inst_54:
// rs1_h1_val == -16385, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff8;  op2val:0xffff4000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xbffffff8, 0xffff4000, x30, x3, 312, x1)

inst_55:
// rs1_h1_val == -8193, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0006;  op2val:0xffef0800
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xdfff0006, 0xffef0800, x30, x3, 320, x1)

inst_56:
// rs1_h1_val == -2049, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffef;  op2val:0xfffc0010
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xf7ffffef, 0xfffc0010, x30, x3, 328, x1)

inst_57:
// rs1_h1_val == -65, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f;  op2val:0x8000001
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xffbfff7f, 0x8000001, x30, x3, 336, x1)

inst_58:
// rs1_h1_val == -3, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffdf;  op2val:0x04f7ff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfffdffdf, 0x04f7ff, x30, x3, 344, x1)

inst_59:
// rs2_h1_val == 8, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2008000;  op2val:0x082000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x2008000, 0x082000, x30, x3, 352, x1)

inst_60:
// rs1_h1_val == 2048, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x8000001;  op2val:0xbfffffef
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x8000001, 0xbfffffef, x30, x3, 360, x1)

inst_61:
// rs1_h1_val == 256, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000400;  op2val:0x020800
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x1000400, 0x020800, x30, x3, 368, x1)

inst_62:
// rs2_h0_val == -65, rs1_h1_val == 0
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0xfff8ffbf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x000200, 0xfff8ffbf, x30, x3, 376, x1)

inst_63:
// rs2_h1_val == 0, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x05ffff;  op2val:0x003fff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x05ffff, 0x003fff, x30, x3, 384, x1)

inst_64:
// rs2_h0_val == 32767, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff8;  op2val:0xfffc7fff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfffbfff8, 0xfffc7fff, x30, x3, 392, x1)

inst_65:
// rs1_h1_val == 8, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x080100;  op2val:0x040002
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x080100, 0x040002, x30, x3, 400, x1)

inst_66:
// rs2_h0_val == -513, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x100fff8;  op2val:0xfdfffdff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x100fff8, 0xfdfffdff, x30, x3, 408, x1)

inst_67:
// rs2_h0_val == -257, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffff;  op2val:0xfffcfeff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x1000ffff, 0xfffcfeff, x30, x3, 416, x1)

inst_68:
// rs2_h0_val == -129, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0005;  op2val:0xfffaff7f
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfeff0005, 0xfffaff7f, x30, x3, 424, x1)

inst_69:
// rs1_h0_val == -16385, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x03bfff;  op2val:0x080008
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x03bfff, 0x080008, x30, x3, 432, x1)

inst_70:
// rs2_h0_val == -9, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffbf;  op2val:0x800fff7
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfff7ffbf, 0x800fff7, x30, x3, 440, x1)

inst_71:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == 4096, rs1_h0_val == 0, rs1_h1_val == 4096, rs2_h0_val == -2049
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0x1000f7ff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0x10000000, 0x1000f7ff, x30, x3, 448, x1)

inst_72:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 2, rs2_h1_val == -2049, rs2_h0_val == 8
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80002;  op2val:0xf7ff0008
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfff80002, 0xf7ff0008, x30, x3, 456, x1)

inst_73:
// rs2_h1_val == -5, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffa;  op2val:0xfffbefff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xfffcfffa, 0xfffbefff, x30, x3, 464, x1)

inst_74:
// rs2_h1_val == 256, rs2_h0_val == 128, rs1_h0_val == -4097
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfefff;  op2val:0x1000080
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x00000000, 0xffdfefff, 0x1000080, x30, x3, 472, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
