
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rstsa16 instruction of the RISC-V RV32PZicsr extension for the rstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x16, rd==x18, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 0, rs2_h0_val == 1
// opcode: rstsa16 ; op1:x19; op2:x16; dest:x18; op1val:0xfff68000;  op2val:0x000001
TEST_RR_OP(rstsa16, x18, x19, x16, 0x00000000, 0xfff68000, 0x000001, x11, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x30, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -16385, rs1_h1_val == -16385, rs1_h0_val == 32767
// opcode: rstsa16 ; op1:x14; op2:x14; dest:x30; op1val:0xbfff7fff;  op2val:0xbffffffa
TEST_RR_OP(rstsa16, x30, x14, x14, 0x00000000, 0xbfff7fff, 0xbffffffa, x11, 4, x6)

inst_2:
// rs1 == rd != rs2, rs1==x21, rs2==x18, rd==x21, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -5, rs1_h1_val == -257
// opcode: rstsa16 ; op1:x21; op2:x18; dest:x21; op1val:0xfefffffb;  op2val:0x090005
TEST_RR_OP(rstsa16, x21, x21, x18, 0x00000000, 0xfefffffb, 0x090005, x11, 8, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 16384, rs2_h1_val == -33
// opcode: rstsa16 ; op1:x4; op2:x4; dest:x4; op1val:0x40008000;  op2val:0xffdf0009
TEST_RR_OP(rstsa16, x4, x4, x4, 0x00000000, 0x40008000, 0xffdf0009, x11, 12, x6)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x2, rd==x2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 512, rs2_h0_val == 32
// opcode: rstsa16 ; op1:x17; op2:x2; dest:x2; op1val:0x200fffa;  op2val:0x050020
TEST_RR_OP(rstsa16, x2, x17, x2, 0x00000000, 0x200fffa, 0x050020, x11, 16, x6)

inst_5:
// rs1==x10, rs2==x30, rd==x31, rs1_h0_val == rs2_h0_val, rs2_h0_val == 8192, rs2_h1_val == 64, rs1_h0_val == 8192, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -21846
// opcode: rstsa16 ; op1:x10; op2:x30; dest:x31; op1val:0xaaaa2000;  op2val:0x402000
TEST_RR_OP(rstsa16, x31, x10, x30, 0x00000000, 0xaaaa2000, 0x402000, x11, 20, x6)

inst_6:
// rs1==x9, rs2==x27, rd==x17, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -513, rs1_h1_val == 1024
// opcode: rstsa16 ; op1:x9; op2:x27; dest:x17; op1val:0x400fdff;  op2val:0xfffcc000
TEST_RR_OP(rstsa16, x17, x9, x27, 0x00000000, 0x400fdff, 0xfffcc000, x11, 24, x6)

inst_7:
// rs1==x24, rs2==x25, rd==x10, rs2_h1_val == -21846, rs2_h0_val == 1024
// opcode: rstsa16 ; op1:x24; op2:x25; dest:x10; op1val:0xfff80007;  op2val:0xaaaa0400
TEST_RR_OP(rstsa16, x10, x24, x25, 0x00000000, 0xfff80007, 0xaaaa0400, x11, 28, x6)

inst_8:
// rs1==x7, rs2==x21, rd==x25, rs2_h1_val == 21845, rs2_h0_val == 512, rs1_h1_val == -3
// opcode: rstsa16 ; op1:x7; op2:x21; dest:x25; op1val:0xfffd0006;  op2val:0x55550200
TEST_RR_OP(rstsa16, x25, x7, x21, 0x00000000, 0xfffd0006, 0x55550200, x11, 32, x6)

inst_9:
// rs1==x29, rs2==x10, rd==x0, rs2_h1_val == 32767, rs1_h0_val == 512, rs1_h1_val == -33, rs2_h0_val == 256
// opcode: rstsa16 ; op1:x29; op2:x10; dest:x0; op1val:0xffdf0200;  op2val:0x7fff0100
TEST_RR_OP(rstsa16, x0, x29, x10, 0x00000000, 0xffdf0200, 0x7fff0100, x11, 36, x6)

inst_10:
// rs1==x5, rs2==x8, rd==x20, rs2_h1_val == -8193, rs2_h0_val == 2, rs1_h1_val == 8, rs1_h0_val == 64
// opcode: rstsa16 ; op1:x5; op2:x8; dest:x20; op1val:0x080040;  op2val:0xdfff0002
TEST_RR_OP(rstsa16, x20, x5, x8, 0x00000000, 0x080040, 0xdfff0002, x11, 40, x6)

inst_11:
// rs1==x27, rs2==x31, rd==x3, rs2_h1_val == -4097, 
// opcode: rstsa16 ; op1:x27; op2:x31; dest:x3; op1val:0x050200;  op2val:0xefff0020
TEST_RR_OP(rstsa16, x3, x27, x31, 0x00000000, 0x050200, 0xefff0020, x11, 44, x6)

inst_12:
// rs1==x1, rs2==x29, rd==x23, rs2_h1_val == -2049, rs1_h0_val == 21845, rs2_h0_val == -17
// opcode: rstsa16 ; op1:x1; op2:x29; dest:x23; op1val:0x095555;  op2val:0xf7ffffef
TEST_RR_OP(rstsa16, x23, x1, x29, 0x00000000, 0x095555, 0xf7ffffef, x11, 48, x6)

inst_13:
// rs1==x0, rs2==x26, rd==x14, rs2_h1_val == -1025, rs1_h1_val == 32, rs2_h0_val == 4096
// opcode: rstsa16 ; op1:x0; op2:x26; dest:x14; op1val:0x20fffb;  op2val:0xfbff1000
TEST_RR_OP(rstsa16, x14, x0, x26, 0x00000000, 0x20fffb, 0xfbff1000, x11, 52, x6)

inst_14:
// rs1==x26, rs2==x17, rd==x19, rs2_h1_val == -513, rs2_h0_val == -21846, rs1_h0_val == -17, rs1_h1_val == -32768
// opcode: rstsa16 ; op1:x26; op2:x17; dest:x19; op1val:0x8000ffef;  op2val:0xfdffaaaa
TEST_RR_OP(rstsa16, x19, x26, x17, 0x00000000, 0x8000ffef, 0xfdffaaaa, x11, 56, x6)

inst_15:
// rs1==x30, rs2==x13, rd==x12, rs2_h1_val == -257, rs1_h0_val == -1025, rs2_h0_val == -1
// opcode: rstsa16 ; op1:x30; op2:x13; dest:x12; op1val:0x03fbff;  op2val:0xfeffffff
TEST_RR_OP(rstsa16, x12, x30, x13, 0x00000000, 0x03fbff, 0xfeffffff, x11, 60, x6)

inst_16:
// rs1==x6, rs2==x7, rd==x15, rs2_h1_val == -129, rs2_h0_val == 32767
// opcode: rstsa16 ; op1:x6; op2:x7; dest:x15; op1val:0xffdf7fff;  op2val:0xff7f7fff
TEST_RR_OP(rstsa16, x15, x6, x7, 0x00000000, 0xffdf7fff, 0xff7f7fff, x11, 64, x10)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x3, rs2==x24, rd==x26, rs2_h1_val == -65, rs2_h0_val == -257, rs1_h1_val == -17
// opcode: rstsa16 ; op1:x3; op2:x24; dest:x26; op1val:0xffeffffb;  op2val:0xffbffeff
TEST_RR_OP(rstsa16, x26, x3, x24, 0x00000000, 0xffeffffb, 0xffbffeff, x4, 0, x10)

inst_18:
// rs1==x31, rs2==x12, rd==x1, rs2_h1_val == -17, rs2_h0_val == -3, rs1_h0_val == 256, rs1_h1_val == 128
// opcode: rstsa16 ; op1:x31; op2:x12; dest:x1; op1val:0x800100;  op2val:0xffeffffd
TEST_RR_OP(rstsa16, x1, x31, x12, 0x00000000, 0x800100, 0xffeffffd, x4, 4, x10)

inst_19:
// rs1==x8, rs2==x22, rd==x28, rs2_h1_val == -9, rs2_h0_val == -5, rs1_h1_val == 4
// opcode: rstsa16 ; op1:x8; op2:x22; dest:x28; op1val:0x04ffef;  op2val:0xfff7fffb
TEST_RR_OP(rstsa16, x28, x8, x22, 0x00000000, 0x04ffef, 0xfff7fffb, x4, 8, x10)

inst_20:
// rs1==x13, rs2==x19, rd==x8, rs2_h1_val == -5, rs2_h0_val == 0, rs1_h0_val == 4096
// opcode: rstsa16 ; op1:x13; op2:x19; dest:x8; op1val:0xffef1000;  op2val:0xfffb0000
TEST_RR_OP(rstsa16, x8, x13, x19, 0x00000000, 0xffef1000, 0xfffb0000, x4, 12, x10)

inst_21:
// rs1==x28, rs2==x1, rd==x9, rs2_h1_val == -3, rs1_h1_val == -8193, rs1_h0_val == 0, rs2_h0_val == -65
// opcode: rstsa16 ; op1:x28; op2:x1; dest:x9; op1val:0xdfff0000;  op2val:0xfffdffbf
TEST_RR_OP(rstsa16, x9, x28, x1, 0x00000000, 0xdfff0000, 0xfffdffbf, x4, 16, x10)

inst_22:
// rs1==x20, rs2==x11, rd==x22, rs2_h1_val == -2, rs1_h1_val == 2048
// opcode: rstsa16 ; op1:x20; op2:x11; dest:x22; op1val:0x800fbff;  op2val:0xfffefff9
TEST_RR_OP(rstsa16, x22, x20, x11, 0x00000000, 0x800fbff, 0xfffefff9, x4, 20, x10)

inst_23:
// rs1==x15, rs2==x6, rd==x11, rs2_h1_val == -32768, rs2_h0_val == -1025, rs1_h0_val == 1
// opcode: rstsa16 ; op1:x15; op2:x6; dest:x11; op1val:0x030001;  op2val:0x8000fbff
TEST_RR_OP(rstsa16, x11, x15, x6, 0x00000000, 0x030001, 0x8000fbff, x4, 24, x10)

inst_24:
// rs1==x2, rs2==x23, rd==x27, rs2_h1_val == 16384, rs1_h1_val == 16
// opcode: rstsa16 ; op1:x2; op2:x23; dest:x27; op1val:0x100001;  op2val:0x40000200
TEST_RR_OP(rstsa16, x27, x2, x23, 0x00000000, 0x100001, 0x40000200, x4, 28, x10)

inst_25:
// rs1==x25, rs2==x28, rd==x16, rs2_h1_val == 8192, rs1_h0_val == -21846, rs2_h0_val == 16384, rs1_h1_val == -2
// opcode: rstsa16 ; op1:x25; op2:x28; dest:x16; op1val:0xfffeaaaa;  op2val:0x20004000
TEST_RR_OP(rstsa16, x16, x25, x28, 0x00000000, 0xfffeaaaa, 0x20004000, x4, 32, x10)

inst_26:
// rs1==x12, rs2==x3, rd==x29, rs2_h1_val == 4096, rs1_h1_val == -513
// opcode: rstsa16 ; op1:x12; op2:x3; dest:x29; op1val:0xfdff5555;  op2val:0x1000ffef
TEST_RR_OP(rstsa16, x29, x12, x3, 0x00000000, 0xfdff5555, 0x1000ffef, x4, 36, x10)

inst_27:
// rs1==x22, rs2==x9, rd==x13, rs2_h1_val == 2048, rs1_h1_val == 4096, rs2_h0_val == -4097
// opcode: rstsa16 ; op1:x22; op2:x9; dest:x13; op1val:0x10000200;  op2val:0x800efff
TEST_RR_OP(rstsa16, x13, x22, x9, 0x00000000, 0x10000200, 0x800efff, x4, 40, x10)

inst_28:
// rs1==x18, rs2==x0, rd==x5, rs2_h1_val == 1024, rs1_h0_val == 2, rs2_h0_val == -32768
// opcode: rstsa16 ; op1:x18; op2:x0; dest:x5; op1val:0xffef0002;  op2val:0x4008000
TEST_RR_OP(rstsa16, x5, x18, x0, 0x00000000, 0xffef0002, 0x4008000, x4, 44, x10)

inst_29:
// rs1==x11, rs2==x15, rd==x6, rs1_h0_val == -257, 
// opcode: rstsa16 ; op1:x11; op2:x15; dest:x6; op1val:0xfffafeff;  op2val:0xfff6c000
TEST_RR_OP(rstsa16, x6, x11, x15, 0x00000000, 0xfffafeff, 0xfff6c000, x4, 48, x10)

inst_30:
// rs1==x16, rs2==x5, rd==x24, rs1_h0_val == -129, rs2_h0_val == 64
// opcode: rstsa16 ; op1:x16; op2:x5; dest:x24; op1val:0x1000ff7f;  op2val:0xfffc0040
TEST_RR_OP(rstsa16, x24, x16, x5, 0x00000000, 0x1000ff7f, 0xfffc0040, x4, 52, x10)

inst_31:
// rs1==x23, rs2==x20, rd==x7, rs1_h0_val == -65, rs2_h1_val == -1
// opcode: rstsa16 ; op1:x23; op2:x20; dest:x7; op1val:0xbfffffbf;  op2val:0xffff4000
TEST_RR_OP(rstsa16, x7, x23, x20, 0x00000000, 0xbfffffbf, 0xffff4000, x4, 56, x10)

inst_32:
// rs1_h0_val == -33, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdf;  op2val:0xaaaa0007
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xc000ffdf, 0xaaaa0007, x4, 60, x10)

inst_33:
// rs1_h0_val == -9, rs1_h1_val == 8192
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff7;  op2val:0x7ffffffa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x2000fff7, 0x7ffffffa, x4, 64, x1)

inst_34:
// rs1_h0_val == -3, rs2_h1_val == 256
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffd;  op2val:0x1000003
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x20fffd, 0x1000003, x4, 68, x1)

inst_35:
// rs1_h0_val == -2, rs1_h1_val == -1025, rs2_h0_val == -8193
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffe;  op2val:0xff7fdfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfbfffffe, 0xff7fdfff, x4, 72, x1)

inst_36:
// rs1_h0_val == 16384, rs1_h1_val == 1
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x014000;  op2val:0x7fff2000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x014000, 0x7fff2000, x4, 76, x1)

inst_37:
// rs1_h0_val == 2048, rs2_h1_val == 512
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0800;  op2val:0x200fff6
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfffa0800, 0x200fff6, x4, 80, x1)

inst_38:
// rs1_h0_val == 1024, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400;  op2val:0x00fffc
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x40000400, 0x00fffc, x4, 84, x1)

inst_39:
// rs1_h0_val == 128, rs2_h0_val == -16385
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0080;  op2val:0xfff6bfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfffc0080, 0xfff6bfff, x4, 88, x1)

inst_40:
// rs1_h0_val == 32, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040020;  op2val:0x050200
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x040020, 0x050200, x4, 92, x1)

inst_41:
// rs1_h0_val == 16, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0010;  op2val:0xfdfffff6
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffef0010, 0xfdfffff6, x4, 96, x1)

inst_42:
// rs1_h0_val == 8, rs2_h0_val == 2048
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0008;  op2val:0x400800
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfffc0008, 0x400800, x4, 100, x1)

inst_43:
// rs1_h0_val == 4, rs2_h0_val == -513, rs2_h1_val == 8
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000004;  op2val:0x08fdff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x40000004, 0x08fdff, x4, 104, x1)

inst_44:
// rs1_h0_val == -1, rs2_h0_val == 128
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffff;  op2val:0xffef0080
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x08ffff, 0xffef0080, x4, 108, x1)

inst_45:
// rs2_h1_val == 128, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd;  op2val:0x80ffbf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x01fffd, 0x80ffbf, x4, 112, x1)

inst_46:
// rs2_h0_val == -2, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffbf;  op2val:0xffeffffe
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfff9ffbf, 0xffeffffe, x4, 116, x1)

inst_47:
// rs2_h0_val == 16, rs1_h1_val == -4097
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffdf;  op2val:0xfff90010
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xefffffdf, 0xfff90010, x4, 120, x1)

inst_48:
// rs2_h0_val == 8, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80006;  op2val:0x050008
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfff80006, 0x050008, x4, 124, x1)

inst_49:
// rs2_h0_val == 4, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090001;  op2val:0x400004
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x090001, 0x400004, x4, 128, x1)

inst_50:
// rs1_h1_val == 21845, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550040;  op2val:0xfffffffa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x55550040, 0xfffffffa, x4, 132, x1)

inst_51:
// rs2_h0_val == -2049, rs1_h1_val == 256
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fbff;  op2val:0x400f7ff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x100fbff, 0x400f7ff, x4, 136, x1)

inst_52:
// rs1_h1_val == 32767, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff8000;  op2val:0x08fff6
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x7fff8000, 0x08fff6, x4, 140, x1)

inst_53:
// rs1_h1_val == -2049, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020;  op2val:0xffef0400
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xf7ff0020, 0xffef0400, x4, 144, x1)

inst_54:
// rs1_h1_val == -129, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffbff;  op2val:0xdfff0200
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xff7ffbff, 0xdfff0200, x4, 148, x1)

inst_55:
// rs1_h1_val == -65, rs2_h0_val == -33
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0xfeffffdf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffbfffff, 0xfeffffdf, x4, 152, x1)

inst_56:
// rs1_h1_val == -9, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0x40000020
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfff77fff, 0x40000020, x4, 156, x1)

inst_57:
// rs1_h1_val == -5, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0006;  op2val:0xfff70009
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfffb0006, 0xfff70009, x4, 160, x1)

inst_58:
// rs2_h1_val == 32, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010080;  op2val:0x20ffbf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x010080, 0x20ffbf, x4, 164, x1)

inst_59:
// rs2_h1_val == 16, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0040;  op2val:0x100004
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfffe0040, 0x100004, x4, 168, x1)

inst_60:
// rs2_h1_val == 4, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0007;  op2val:0x040005
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffdf0007, 0x040005, x4, 172, x1)

inst_61:
// rs2_h1_val == 2, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0000;  op2val:0x02ffdf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfdff0000, 0x02ffdf, x4, 176, x1)

inst_62:
// rs1_h0_val == -2049, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7ff;  op2val:0xfffdbfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xbffff7ff, 0xfffdbfff, x4, 180, x1)

inst_63:
// rs2_h1_val == 1, rs1_h1_val == 64
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400100;  op2val:0x010005
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x400100, 0x010005, x4, 184, x1)

inst_64:
// rs2_h0_val == 21845, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800;  op2val:0x055555
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x4000800, 0x055555, x4, 188, x1)

inst_65:
// rs1_h1_val == 2, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02feff;  op2val:0x10000020
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x02feff, 0x10000020, x4, 192, x1)

inst_66:
// rs1_h1_val == 0, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x000005;  op2val:0xfffb0007
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x000005, 0xfffb0007, x4, 196, x1)

inst_67:
// rs1_h1_val == -1, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xfffb0040
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffffffdf, 0xfffb0040, x4, 200, x1)

inst_68:
// rs2_h0_val == -129, rs1_h0_val == -8193
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9dfff;  op2val:0x4000ff7f
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfff9dfff, 0x4000ff7f, x4, 204, x1)

inst_69:
// rs1_h0_val == -16385, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bfff;  op2val:0xfffe7fff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xfff7bfff, 0xfffe7fff, x4, 208, x1)

inst_70:
// rs1_h0_val == -4097, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff;  op2val:0x1000200
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x4000efff, 0x1000200, x4, 212, x1)

inst_71:
// rs2_h0_val == -9, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000100;  op2val:0x04fff7
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xc0000100, 0x04fff7, x4, 216, x1)

inst_72:
// rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -16385, rs1_h1_val == -16385, rs1_h0_val == 32767
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff7fff;  op2val:0xbffffffa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xbfff7fff, 0xbffffffa, x4, 220, x1)

inst_73:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 16384, rs2_h1_val == -33
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40008000;  op2val:0xffdf0009
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x40008000, 0xffdf0009, x4, 224, x1)

inst_74:
// rs2_h1_val == 32767, rs1_h0_val == 512, rs1_h1_val == -33, rs2_h0_val == 256
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0200;  op2val:0x7fff0100
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffdf0200, 0x7fff0100, x4, 228, x1)

inst_75:
// rs2_h1_val == -1025, rs1_h1_val == 32, rs2_h0_val == 4096
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffb;  op2val:0xfbff1000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0x20fffb, 0xfbff1000, x4, 232, x1)

inst_76:
// rs2_h1_val == 1024, rs1_h0_val == 2, rs2_h0_val == -32768
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0002;  op2val:0x4008000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x00000000, 0xffef0002, 0x4008000, x4, 236, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
