
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pkbt16 instruction of the RISC-V RV32PZicsr extension for the pkbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pkbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x2, rd==x3, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 57343, rs1_h1_val == 65535
// opcode: pkbt16 ; op1:x23; op2:x2; dest:x3; op1val:0xffff0000;  op2val:0xdfff0003
TEST_RR_OP(pkbt16, x3, x23, x2, 0x00000000, 0xffff0000, 0xdfff0003, x7, 0, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x0, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs2_h0_val == 1024, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 64, rs1_h0_val == 65535
// opcode: pkbt16 ; op1:x3; op2:x3; dest:x0; op1val:0x40ffff;  op2val:0x400400
TEST_RR_OP(pkbt16, x0, x3, x3, 0x00000000, 0x40ffff, 0x400400, x7, 4, x12)

inst_2:
// rs1 == rd != rs2, rs1==x21, rs2==x0, rd==x21, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h1_val == 2, rs1_h0_val == 21845
// opcode: pkbt16 ; op1:x21; op2:x0; dest:x21; op1val:0x025555;  op2val:0x0b5555
TEST_RR_OP(pkbt16, x21, x21, x0, 0x00000000, 0x025555, 0x0b5555, x7, 8, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs2_h1_val == 43690, rs1_h0_val == 65533, rs2_h0_val == 65519
// opcode: pkbt16 ; op1:x26; op2:x26; dest:x26; op1val:0x0dfffd;  op2val:0xaaaaffef
TEST_RR_OP(pkbt16, x26, x26, x26, 0x00000000, 0x0dfffd, 0xaaaaffef, x7, 12, x12)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x5, rd==x5, rs2_h1_val == 21845, rs2_h0_val == 65535, rs1_h0_val == 65527
// opcode: pkbt16 ; op1:x20; op2:x5; dest:x5; op1val:0x0afff7;  op2val:0x5555ffff
TEST_RR_OP(pkbt16, x5, x20, x5, 0x00000000, 0x0afff7, 0x5555ffff, x7, 16, x12)

inst_5:
// rs1==x19, rs2==x28, rd==x6, rs2_h1_val == 32767, rs2_h0_val == 65279
// opcode: pkbt16 ; op1:x19; op2:x28; dest:x6; op1val:0x0b000b;  op2val:0x7ffffeff
TEST_RR_OP(pkbt16, x6, x19, x28, 0x00000000, 0x0b000b, 0x7ffffeff, x7, 20, x12)

inst_6:
// rs1==x5, rs2==x18, rd==x14, rs2_h1_val == 49151, rs2_h0_val == 65023, rs1_h1_val == 65519, rs1_h0_val == 32768
// opcode: pkbt16 ; op1:x5; op2:x18; dest:x14; op1val:0xffef8000;  op2val:0xbffffdff
TEST_RR_OP(pkbt16, x14, x5, x18, 0x00000000, 0xffef8000, 0xbffffdff, x7, 24, x12)

inst_7:
// rs1==x8, rs2==x4, rd==x15, rs2_h1_val == 61439, rs1_h0_val == 65534, rs2_h0_val == 65407
// opcode: pkbt16 ; op1:x8; op2:x4; dest:x15; op1val:0x0bfffe;  op2val:0xefffff7f
TEST_RR_OP(pkbt16, x15, x8, x4, 0x00000000, 0x0bfffe, 0xefffff7f, x7, 28, x12)

inst_8:
// rs1==x29, rs2==x19, rd==x1, rs2_h1_val == 63487, rs2_h0_val == 32767, rs1_h1_val == 32768
// opcode: pkbt16 ; op1:x29; op2:x19; dest:x1; op1val:0x8000ffff;  op2val:0xf7ff7fff
TEST_RR_OP(pkbt16, x1, x29, x19, 0x00000000, 0x8000ffff, 0xf7ff7fff, x7, 32, x12)

inst_9:
// rs1==x22, rs2==x20, rd==x9, rs2_h1_val == 64511, 
// opcode: pkbt16 ; op1:x22; op2:x20; dest:x9; op1val:0x0e0000;  op2val:0xfbff0005
TEST_RR_OP(pkbt16, x9, x22, x20, 0x00000000, 0x0e0000, 0xfbff0005, x7, 36, x12)

inst_10:
// rs1==x25, rs2==x24, rd==x20, rs2_h1_val == 65023, rs1_h0_val == 256
// opcode: pkbt16 ; op1:x25; op2:x24; dest:x20; op1val:0x060100;  op2val:0xfdff000a
TEST_RR_OP(pkbt16, x20, x25, x24, 0x00000000, 0x060100, 0xfdff000a, x7, 40, x12)

inst_11:
// rs1==x30, rs2==x10, rd==x11, rs2_h1_val == 65279, rs1_h1_val == 49151, rs1_h0_val == 65471, rs2_h0_val == 64
// opcode: pkbt16 ; op1:x30; op2:x10; dest:x11; op1val:0xbfffffbf;  op2val:0xfeff0040
TEST_RR_OP(pkbt16, x11, x30, x10, 0x00000000, 0xbfffffbf, 0xfeff0040, x7, 44, x12)

inst_12:
// rs1==x28, rs2==x8, rd==x23, rs2_h1_val == 65407, rs1_h0_val == 16384
// opcode: pkbt16 ; op1:x28; op2:x8; dest:x23; op1val:0xbfff4000;  op2val:0xff7f0006
TEST_RR_OP(pkbt16, x23, x28, x8, 0x00000000, 0xbfff4000, 0xff7f0006, x7, 48, x12)

inst_13:
// rs1==x14, rs2==x15, rd==x13, rs2_h1_val == 65471, rs1_h0_val == 128
// opcode: pkbt16 ; op1:x14; op2:x15; dest:x13; op1val:0x0a0080;  op2val:0xffbf0400
TEST_RR_OP(pkbt16, x13, x14, x15, 0x00000000, 0x0a0080, 0xffbf0400, x7, 52, x12)

inst_14:
// rs1==x10, rs2==x27, rd==x19, rs2_h1_val == 65503, rs1_h1_val == 8192, rs1_h0_val == 2
// opcode: pkbt16 ; op1:x10; op2:x27; dest:x19; op1val:0x20000002;  op2val:0xffdf5555
TEST_RR_OP(pkbt16, x19, x10, x27, 0x00000000, 0x20000002, 0xffdf5555, x7, 56, x12)

inst_15:
// rs1==x4, rs2==x25, rd==x24, rs2_h1_val == 65519, rs1_h0_val == 65531, rs1_h1_val == 65531, rs2_h0_val == 32
// opcode: pkbt16 ; op1:x4; op2:x25; dest:x24; op1val:0xfffbfffb;  op2val:0xffef0020
TEST_RR_OP(pkbt16, x24, x4, x25, 0x00000000, 0xfffbfffb, 0xffef0020, x7, 60, x5)

inst_16:
// rs1==x13, rs2==x31, rd==x18, rs2_h1_val == 65527, rs1_h1_val == 57343, rs2_h0_val == 65527
// opcode: pkbt16 ; op1:x13; op2:x31; dest:x18; op1val:0xdfff0012;  op2val:0xfff7fff7
TEST_RR_OP(pkbt16, x18, x13, x31, 0x00000000, 0xdfff0012, 0xfff7fff7, x7, 64, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x6, rs2==x9, rd==x12, rs2_h1_val == 65531, 
// opcode: pkbt16 ; op1:x6; op2:x9; dest:x12; op1val:0x0bfffe;  op2val:0xfffbffff
TEST_RR_OP(pkbt16, x12, x6, x9, 0x00000000, 0x0bfffe, 0xfffbffff, x3, 0, x5)

inst_18:
// rs1==x1, rs2==x7, rd==x30, rs2_h1_val == 65533, rs1_h0_val == 65407, rs1_h1_val == 65533
// opcode: pkbt16 ; op1:x1; op2:x7; dest:x30; op1val:0xfffdff7f;  op2val:0xfffd0007
TEST_RR_OP(pkbt16, x30, x1, x7, 0x00000000, 0xfffdff7f, 0xfffd0007, x3, 4, x5)

inst_19:
// rs1==x9, rs2==x22, rd==x16, rs2_h1_val == 65534, rs1_h1_val == 61439, rs1_h0_val == 16
// opcode: pkbt16 ; op1:x9; op2:x22; dest:x16; op1val:0xefff0010;  op2val:0xfffe000c
TEST_RR_OP(pkbt16, x16, x9, x22, 0x00000000, 0xefff0010, 0xfffe000c, x3, 8, x5)

inst_20:
// rs1==x31, rs2==x14, rd==x10, rs2_h1_val == 32768, rs1_h0_val == 64
// opcode: pkbt16 ; op1:x31; op2:x14; dest:x10; op1val:0x0e0040;  op2val:0x8000000a
TEST_RR_OP(pkbt16, x10, x31, x14, 0x00000000, 0x0e0040, 0x8000000a, x3, 12, x5)

inst_21:
// rs1==x7, rs2==x12, rd==x22, rs2_h1_val == 16384, rs1_h1_val == 16384, rs2_h0_val == 57343
// opcode: pkbt16 ; op1:x7; op2:x12; dest:x22; op1val:0x4000fffb;  op2val:0x4000dfff
TEST_RR_OP(pkbt16, x22, x7, x12, 0x00000000, 0x4000fffb, 0x4000dfff, x3, 16, x5)

inst_22:
// rs1==x18, rs2==x6, rd==x4, rs2_h1_val == 8192, rs1_h1_val == 64511
// opcode: pkbt16 ; op1:x18; op2:x6; dest:x4; op1val:0xfbff0009;  op2val:0x2000000d
TEST_RR_OP(pkbt16, x4, x18, x6, 0x00000000, 0xfbff0009, 0x2000000d, x3, 20, x5)

inst_23:
// rs1==x11, rs2==x29, rd==x2, rs2_h1_val == 4096, rs2_h0_val == 65533, rs1_h0_val == 32
// opcode: pkbt16 ; op1:x11; op2:x29; dest:x2; op1val:0x090020;  op2val:0x1000fffd
TEST_RR_OP(pkbt16, x2, x11, x29, 0x00000000, 0x090020, 0x1000fffd, x3, 24, x5)

inst_24:
// rs1==x16, rs2==x30, rd==x27, rs2_h1_val == 2048, rs1_h0_val == 64511
// opcode: pkbt16 ; op1:x16; op2:x30; dest:x27; op1val:0x09fbff;  op2val:0x800000a
TEST_RR_OP(pkbt16, x27, x16, x30, 0x00000000, 0x09fbff, 0x800000a, x3, 28, x5)

inst_25:
// rs1==x17, rs2==x13, rd==x7, rs2_h1_val == 1024, 
// opcode: pkbt16 ; op1:x17; op2:x13; dest:x7; op1val:0x8000000f;  op2val:0x400000a
TEST_RR_OP(pkbt16, x7, x17, x13, 0x00000000, 0x8000000f, 0x400000a, x3, 32, x5)

inst_26:
// rs1==x0, rs2==x1, rd==x31, rs2_h1_val == 512, rs1_h0_val == 65519
// opcode: pkbt16 ; op1:x0; op2:x1; dest:x31; op1val:0x13ffef;  op2val:0x200fffd
TEST_RR_OP(pkbt16, x31, x0, x1, 0x00000000, 0x13ffef, 0x200fffd, x3, 36, x5)

inst_27:
// rs1==x12, rs2==x11, rd==x28, rs2_h1_val == 256, rs2_h0_val == 512, rs1_h0_val == 65503
// opcode: pkbt16 ; op1:x12; op2:x11; dest:x28; op1val:0x0bffdf;  op2val:0x1000200
TEST_RR_OP(pkbt16, x28, x12, x11, 0x00000000, 0x0bffdf, 0x1000200, x3, 40, x5)

inst_28:
// rs1==x2, rs2==x16, rd==x8, rs2_h1_val == 128, rs2_h0_val == 8192, rs1_h1_val == 65279
// opcode: pkbt16 ; op1:x2; op2:x16; dest:x8; op1val:0xfeff0080;  op2val:0x802000
TEST_RR_OP(pkbt16, x8, x2, x16, 0x00000000, 0xfeff0080, 0x802000, x3, 44, x5)

inst_29:
// rs1==x24, rs2==x21, rd==x29, rs2_h1_val == 32, rs1_h1_val == 63487
// opcode: pkbt16 ; op1:x24; op2:x21; dest:x29; op1val:0xf7ff0000;  op2val:0x205555
TEST_RR_OP(pkbt16, x29, x24, x21, 0x00000000, 0xf7ff0000, 0x205555, x3, 48, x5)

inst_30:
// rs1==x27, rs2==x17, rd==x25, rs2_h1_val == 16, rs1_h0_val == 57343
// opcode: pkbt16 ; op1:x27; op2:x17; dest:x25; op1val:0x2000dfff;  op2val:0x100020
TEST_RR_OP(pkbt16, x25, x27, x17, 0x00000000, 0x2000dfff, 0x100020, x3, 52, x5)

inst_31:
// rs1==x15, rs2==x23, rd==x17, rs2_h1_val == 8, rs1_h1_val == 2048
// opcode: pkbt16 ; op1:x15; op2:x23; dest:x17; op1val:0x800dfff;  op2val:0x082000
TEST_RR_OP(pkbt16, x17, x15, x23, 0x00000000, 0x800dfff, 0x082000, x3, 56, x5)

inst_32:
// rs1_h0_val == 8192, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x132000;  op2val:0x200020
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x132000, 0x200020, x3, 60, x1)

inst_33:
// rs1_h0_val == 4096, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x061000;  op2val:0x09ffff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x061000, 0x09ffff, x3, 64, x1)

inst_34:
// rs1_h0_val == 2048, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0800;  op2val:0xffdf2000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xdfff0800, 0xffdf2000, x3, 68, x1)

inst_35:
// rs1_h0_val == 1024, rs2_h0_val == 43690
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0400;  op2val:0x10aaaa
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0d0400, 0x10aaaa, x3, 72, x1)

inst_36:
// rs1_h0_val == 512, rs2_h0_val == 63487
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x120200;  op2val:0xffdff7ff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x120200, 0xffdff7ff, x3, 76, x1)

inst_37:
// rs1_h0_val == 8, rs1_h1_val == 32
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200008;  op2val:0x09000e
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x200008, 0x09000e, x3, 80, x1)

inst_38:
// rs1_h0_val == 4, rs2_h0_val == 2048
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400004;  op2val:0x20000800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x400004, 0x20000800, x3, 84, x1)

inst_39:
// rs1_h0_val == 1, rs2_h1_val == 0, rs1_h1_val == 65527
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70001;  op2val:0x000200
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfff70001, 0x000200, x3, 88, x1)

inst_40:
// rs2_h1_val == 4, rs1_h1_val == 1
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010400;  op2val:0x042000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x010400, 0x042000, x3, 92, x1)

inst_41:
// rs2_h1_val == 2, rs2_h0_val == 65503
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0040;  op2val:0x02ffdf
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xffff0040, 0x02ffdf, x3, 96, x1)

inst_42:
// rs2_h1_val == 1, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff7;  op2val:0x01000f
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x09fff7, 0x01000f, x3, 100, x1)

inst_43:
// rs2_h1_val == 65535, rs1_h1_val == 256
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000011;  op2val:0xffffffff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x1000011, 0xffffffff, x3, 104, x1)

inst_44:
// rs2_h0_val == 49151, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff;  op2val:0xffdfbfff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x02ffff, 0xffdfbfff, x3, 108, x1)

inst_45:
// rs2_h0_val == 61439, rs1_h0_val == 61439
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0eefff;  op2val:0x7fffefff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0eefff, 0x7fffefff, x3, 112, x1)

inst_46:
// rs2_h0_val == 64511, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000e;  op2val:0xbffffbff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xffef000e, 0xbffffbff, x3, 116, x1)

inst_47:
// rs2_h0_val == 65471, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000b;  op2val:0x08ffbf
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x07000b, 0x08ffbf, x3, 120, x1)

inst_48:
// rs2_h0_val == 65531, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0013;  op2val:0x0dfffb
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0e0013, 0x0dfffb, x3, 124, x1)

inst_49:
// rs2_h0_val == 65534, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000c;  op2val:0xfefffffe
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0b000c, 0xfefffffe, x3, 128, x1)

inst_50:
// rs2_h0_val == 32768, rs1_h1_val == 65471
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0xfbff8000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xffbf0100, 0xfbff8000, x3, 132, x1)

inst_51:
// rs2_h0_val == 16384, rs1_h0_val == 49151
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffbfff;  op2val:0x074000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfbffbfff, 0x074000, x3, 136, x1)

inst_52:
// rs2_h0_val == 256, rs1_h1_val == 8
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080008;  op2val:0x1000100
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x080008, 0x1000100, x3, 140, x1)

inst_53:
// rs2_h0_val == 128, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001;  op2val:0x7fff0080
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfffb0001, 0x7fff0080, x3, 144, x1)

inst_54:
// rs2_h0_val == 16, rs1_h1_val == 0
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0x800010
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x000004, 0x800010, x3, 148, x1)

inst_55:
// rs2_h0_val == 8, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000012;  op2val:0x080008
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x20000012, 0x080008, x3, 152, x1)

inst_56:
// rs2_h0_val == 4, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0006;  op2val:0x130004
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0b0006, 0x130004, x3, 156, x1)

inst_57:
// rs2_h0_val == 2, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000e;  op2val:0x040002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x09000e, 0x040002, x3, 160, x1)

inst_58:
// rs2_h0_val == 1, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000a;  op2val:0x060001
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x40000a, 0x060001, x3, 164, x1)

inst_59:
// rs2_h0_val == 0, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cefff;  op2val:0xf7ff0000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0cefff, 0xf7ff0000, x3, 168, x1)

inst_60:
// rs1_h1_val == 43690, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffe;  op2val:0x55550800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xaaaafffe, 0x55550800, x3, 172, x1)

inst_61:
// rs1_h1_val == 21845, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x0c2000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x55555555, 0x0c2000, x3, 176, x1)

inst_62:
// rs1_h1_val == 32767, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0011;  op2val:0x7fff0002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x7fff0011, 0x7fff0002, x3, 180, x1)

inst_63:
// rs1_h1_val == 65023, rs1_h0_val == 65023
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0x125555
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0x125555, x3, 184, x1)

inst_64:
// rs1_h1_val == 4096, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10005555;  op2val:0x030001
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x10005555, 0x030001, x3, 188, x1)

inst_65:
// rs1_h1_val == 1024, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400bfff;  op2val:0xfdfffffd
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x400bfff, 0xfdfffffd, x3, 192, x1)

inst_66:
// rs1_h1_val == 512, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000b;  op2val:0x55550000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x200000b, 0x55550000, x3, 196, x1)

inst_67:
// rs1_h1_val == 128, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800004;  op2val:0xaaaa0002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x800004, 0xaaaa0002, x3, 200, x1)

inst_68:
// rs1_h1_val == 16, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000f;  op2val:0x0a0020
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x10000f, 0x0a0020, x3, 204, x1)

inst_69:
// rs1_h1_val == 4, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x040002;  op2val:0x100003
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x040002, 0x100003, x3, 208, x1)

inst_70:
// rs1_h0_val == 43690, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x12aaaa;  op2val:0x04aaaa
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x12aaaa, 0x04aaaa, x3, 212, x1)

inst_71:
// rs1_h0_val == 32767, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7fff;  op2val:0xffbffeff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xaaaa7fff, 0xffbffeff, x3, 216, x1)

inst_72:
// rs1_h0_val == 63487, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ff;  op2val:0x8000800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xf7fff7ff, 0x8000800, x3, 220, x1)

inst_73:
// rs1_h1_val == 65534, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0x050002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfffe0008, 0x050002, x3, 224, x1)

inst_74:
// rs1_h1_val == 65503, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdff;  op2val:0x200008
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xffdffdff, 0x200008, x3, 228, x1)

inst_75:
// rs1_h0_val == 65279, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10feff;  op2val:0x0e000f
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x10feff, 0x0e000f, x3, 232, x1)

inst_76:
// rs2_h0_val == 4096, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0200;  op2val:0x8001000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xfffd0200, 0x8001000, x3, 236, x1)

inst_77:
// rs1_h1_val == 65407, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000;  op2val:0x01fff7
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0xff7f2000, 0x01fff7, x3, 240, x1)

inst_78:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs2_h0_val == 1024, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 64, rs1_h0_val == 65535
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffff;  op2val:0x400400
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x40ffff, 0x400400, x3, 244, x1)

inst_79:
// rs2_h1_val == 43690, rs1_h0_val == 65533, rs2_h0_val == 65519
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffd;  op2val:0xaaaaffef
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x0dfffd, 0xaaaaffef, x3, 248, x1)

inst_80:
// rs2_h1_val == 512, rs1_h0_val == 65519
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffef;  op2val:0x200fffd
TEST_RR_OP(pkbt16, x31, x30, x29, 0x00000000, 0x13ffef, 0x200fffd, x3, 252, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
