
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ave instruction of the RISC-V RV32PZicsr extension for the ave covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ave)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x2, rd==x9, rs1_val != rs2_val, rs1_val > 0 and rs2_val < 0, rs2_val == -9
// opcode: ave ; op1:x11; dest:x9; op1val:0x55555556;  op2val:-0x9
TEST_RR_OP(ave, x9, x11, x2, 0x00000000, 0x55555556, -0x9, x8, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x30, rs2_val == 2147483647, rs1_val == -8388609, rs2_val == (2**(xlen-1)-1), rs1_val < 0 and rs2_val > 0
// opcode: ave ; op1:x19; dest:x30; op1val:-0x800001;  op2val:-0x800001
TEST_RR_OP(ave, x30, x19, x19, 0x00000000, -0x800001, -0x800001, x8, 4, x7)

inst_2:
// rs1 == rd != rs2, rs1==x22, rs2==x15, rd==x22, rs2_val == -1073741825, rs1_val < 0 and rs2_val < 0
// opcode: ave ; op1:x22; dest:x22; op1val:-0x8;  op2val:-0x40000001
TEST_RR_OP(ave, x22, x22, x15, 0x00000000, -0x8, -0x40000001, x8, 8, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs2_val == -536870913, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: ave ; op1:x6; dest:x6; op1val:0x7fffffff;  op2val:0x7fffffff
TEST_RR_OP(ave, x6, x6, x6, 0x00000000, 0x7fffffff, 0x7fffffff, x8, 12, x7)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x31, rd==x31, rs2_val == -268435457, 
// opcode: ave ; op1:x14; dest:x31; op1val:-0xa;  op2val:-0x10000001
TEST_RR_OP(ave, x31, x14, x31, 0x00000000, -0xa, -0x10000001, x8, 16, x7)

inst_5:
// rs1==x13, rs2==x29, rd==x26, rs2_val == -134217729, rs1_val == -17
// opcode: ave ; op1:x13; dest:x26; op1val:-0x11;  op2val:-0x8000001
TEST_RR_OP(ave, x26, x13, x29, 0x00000000, -0x11, -0x8000001, x8, 20, x7)

inst_6:
// rs1==x18, rs2==x1, rd==x28, rs2_val == -67108865, 
// opcode: ave ; op1:x18; dest:x28; op1val:-0x7;  op2val:-0x4000001
TEST_RR_OP(ave, x28, x18, x1, 0x00000000, -0x7, -0x4000001, x8, 24, x7)

inst_7:
// rs1==x23, rs2==x24, rd==x11, rs2_val == -33554433, rs1_val == 1
// opcode: ave ; op1:x23; dest:x11; op1val:0x1;  op2val:-0x2000001
TEST_RR_OP(ave, x11, x23, x24, 0x00000000, 0x1, -0x2000001, x8, 28, x7)

inst_8:
// rs1==x0, rs2==x27, rd==x18, rs2_val == -16777217, rs1_val == -524289
// opcode: ave ; op1:x0; dest:x18; op1val:0x0;  op2val:-0x1000001
TEST_RR_OP(ave, x18, x0, x27, 0x00000000, 0x0, -0x1000001, x8, 32, x7)

inst_9:
// rs1==x16, rs2==x20, rd==x24, rs2_val == -8388609, rs1_val == 8192
// opcode: ave ; op1:x16; dest:x24; op1val:0x2000;  op2val:-0x800001
TEST_RR_OP(ave, x24, x16, x20, 0x00000000, 0x2000, -0x800001, x8, 36, x7)

inst_10:
// rs1==x5, rs2==x23, rd==x14, rs2_val == -4194305, rs1_val == 4096
// opcode: ave ; op1:x5; dest:x14; op1val:0x1000;  op2val:-0x400001
TEST_RR_OP(ave, x14, x5, x23, 0x00000000, 0x1000, -0x400001, x8, 40, x7)

inst_11:
// rs1==x29, rs2==x26, rd==x12, rs2_val == -2097153, 
// opcode: ave ; op1:x29; dest:x12; op1val:0x66666666;  op2val:-0x200001
TEST_RR_OP(ave, x12, x29, x26, 0x00000000, 0x66666666, -0x200001, x8, 44, x7)

inst_12:
// rs1==x15, rs2==x10, rd==x16, rs2_val == -1048577, rs1_val == 2048
// opcode: ave ; op1:x15; dest:x16; op1val:0x800;  op2val:-0x100001
TEST_RR_OP(ave, x16, x15, x10, 0x00000000, 0x800, -0x100001, x8, 48, x7)

inst_13:
// rs1==x4, rs2==x5, rd==x3, rs2_val == -524289, 
// opcode: ave ; op1:x4; dest:x3; op1val:0x55555554;  op2val:-0x80001
TEST_RR_OP(ave, x3, x4, x5, 0x00000000, 0x55555554, -0x80001, x8, 52, x7)

inst_14:
// rs1==x2, rs2==x3, rd==x7, rs2_val == -262145, rs1_val == 268435456
// opcode: ave ; op1:x2; dest:x7; op1val:0x10000000;  op2val:-0x40001
TEST_RR_OP(ave, x7, x2, x3, 0x00000000, 0x10000000, -0x40001, x8, 56, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x9, rs2==x8, rd==x0, rs2_val == -131073, 
// opcode: ave ; op1:x9; dest:x0; op1val:0x2000;  op2val:-0x20001
TEST_RR_OP(ave, x0, x9, x8, 0x00000000, 0x2000, -0x20001, x4, 0, x6)

inst_16:
// rs1==x17, rs2==x21, rd==x27, rs2_val == -65537, rs1_val == 0
// opcode: ave ; op1:x17; dest:x27; op1val:0x0;  op2val:-0x10001
TEST_RR_OP(ave, x27, x17, x21, 0x00000000, 0x0, -0x10001, x4, 4, x6)

inst_17:
// rs1==x25, rs2==x0, rd==x2, rs2_val == -32769, 
// opcode: ave ; op1:x25; dest:x2; op1val:0x0;  op2val:0x0
TEST_RR_OP(ave, x2, x25, x0, 0x00000000, 0x0, 0x0, x4, 8, x6)

inst_18:
// rs1==x20, rs2==x13, rd==x5, rs2_val == -16385, 
// opcode: ave ; op1:x20; dest:x5; op1val:0x1000;  op2val:-0x4001
TEST_RR_OP(ave, x5, x20, x13, 0x00000000, 0x1000, -0x4001, x4, 12, x6)

inst_19:
// rs1==x27, rs2==x28, rd==x17, rs2_val == -8193, rs1_val == 1431655765
// opcode: ave ; op1:x27; dest:x17; op1val:0x55555555;  op2val:-0x2001
TEST_RR_OP(ave, x17, x27, x28, 0x00000000, 0x55555555, -0x2001, x4, 16, x6)

inst_20:
// rs1==x30, rs2==x18, rd==x15, rs2_val == -4097, rs1_val == -262145
// opcode: ave ; op1:x30; dest:x15; op1val:-0x40001;  op2val:-0x1001
TEST_RR_OP(ave, x15, x30, x18, 0x00000000, -0x40001, -0x1001, x4, 20, x6)

inst_21:
// rs1==x7, rs2==x16, rd==x20, rs2_val == -2049, 
// opcode: ave ; op1:x7; dest:x20; op1val:0x0;  op2val:-0x801
TEST_RR_OP(ave, x20, x7, x16, 0x00000000, 0x0, -0x801, x4, 24, x6)

inst_22:
// rs1==x12, rs2==x17, rd==x29, rs2_val == -1025, 
// opcode: ave ; op1:x12; dest:x29; op1val:-0x80001;  op2val:-0x401
TEST_RR_OP(ave, x29, x12, x17, 0x00000000, -0x80001, -0x401, x4, 28, x6)

inst_23:
// rs1==x10, rs2==x14, rd==x1, rs2_val == -513, 
// opcode: ave ; op1:x10; dest:x1; op1val:0x2000;  op2val:-0x201
TEST_RR_OP(ave, x1, x10, x14, 0x00000000, 0x2000, -0x201, x4, 32, x6)

inst_24:
// rs1==x3, rs2==x9, rd==x10, rs2_val == -257, rs1_val == -1073741825
// opcode: ave ; op1:x3; dest:x10; op1val:-0x40000001;  op2val:-0x101
TEST_RR_OP(ave, x10, x3, x9, 0x00000000, -0x40000001, -0x101, x4, 36, x6)

inst_25:
// rs1==x21, rs2==x11, rd==x8, rs2_val == -129, rs1_val == 536870912
// opcode: ave ; op1:x21; dest:x8; op1val:0x20000000;  op2val:-0x81
TEST_RR_OP(ave, x8, x21, x11, 0x00000000, 0x20000000, -0x81, x4, 40, x6)

inst_26:
// rs1==x31, rs2==x22, rd==x21, rs2_val == -65, 
// opcode: ave ; op1:x31; dest:x21; op1val:-0x40001;  op2val:-0x41
TEST_RR_OP(ave, x21, x31, x22, 0x00000000, -0x40001, -0x41, x4, 44, x6)

inst_27:
// rs1==x8, rs2==x25, rd==x13, rs2_val == -33, rs1_val == 16777216
// opcode: ave ; op1:x8; dest:x13; op1val:0x1000000;  op2val:-0x21
TEST_RR_OP(ave, x13, x8, x25, 0x00000000, 0x1000000, -0x21, x4, 48, x6)

inst_28:
// rs1==x24, rs2==x30, rd==x19, rs2_val == -17, rs1_val == -1431655766
// opcode: ave ; op1:x24; dest:x19; op1val:-0x55555556;  op2val:-0x11
TEST_RR_OP(ave, x19, x24, x30, 0x00000000, -0x55555556, -0x11, x4, 52, x6)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:
// rs1==x26, rs2==x4, rd==x23, rs2_val == -5, 
// opcode: ave ; op1:x26; dest:x23; op1val:0x9;  op2val:-0x5
TEST_RR_OP(ave, x23, x26, x4, 0x00000000, 0x9, -0x5, x2, 0, x3)

inst_30:
// rs1==x1, rs2==x12, rd==x4, rs2_val == -3, 
// opcode: ave ; op1:x1; dest:x4; op1val:-0x4;  op2val:-0x3
TEST_RR_OP(ave, x4, x1, x12, 0x00000000, -0x4, -0x3, x2, 4, x3)

inst_31:
// rs1==x28, rs2==x7, rd==x25, rs2_val == -2, 
// opcode: ave ; op1:x28; dest:x25; op1val:0x66666665;  op2val:-0x2
TEST_RR_OP(ave, x25, x28, x7, 0x00000000, 0x66666665, -0x2, x2, 8, x3)

inst_32:
// rs1_val == -536870913, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000001;  op2val:-0xb504
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x20000001, -0xb504, x2, 12, x3)

inst_33:
// rs1_val == -268435457, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10000001;  op2val:-0x800001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x10000001, -0x800001, x2, 16, x3)

inst_34:
// rs1_val == -134217729, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8000001;  op2val:-0x401
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x8000001, -0x401, x2, 20, x3)

inst_35:
// rs1_val == -67108865, rs2_val == 2
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4000001;  op2val:0x2
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4000001, 0x2, x2, 24, x3)

inst_36:
// rs1_val == -33554433, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2000001;  op2val:0x2
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x2000001, 0x2, x2, 28, x3)

inst_37:
// rs1_val == -16777217, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000001;  op2val:-0x801
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x1000001, -0x801, x2, 32, x3)

inst_38:
// rs1_val == -4194305, rs2_val == 4096
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400001;  op2val:0x1000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x400001, 0x1000, x2, 36, x3)

inst_39:
// rs1_val == -2097153, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200001;  op2val:-0x8
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x200001, -0x8, x2, 40, x3)

inst_40:
// rs1_val == -1048577, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x100001;  op2val:0x3
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x100001, 0x3, x2, 44, x3)

inst_41:
// rs1_val == -131073, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20001;  op2val:-0x2001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x20001, -0x2001, x2, 48, x3)

inst_42:
// rs1_val == -65537, rs2_val == 4
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10001;  op2val:0x4
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x10001, 0x4, x2, 52, x3)

inst_43:
// rs1_val == -32769, rs2_val == 1431655765
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8001;  op2val:0x55555555
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x8001, 0x55555555, x2, 56, x3)

inst_44:
// rs1_val == -16385, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4001;  op2val:0xb505
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4001, 0xb505, x2, 60, x3)

inst_45:
// rs1_val == -8193, rs2_val == 65536
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2001;  op2val:0x10000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x2001, 0x10000, x2, 64, x3)

inst_46:
// rs1_val == -4097, rs2_val == 128
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1001;  op2val:0x80
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x1001, 0x80, x2, 68, x3)

inst_47:
// rs1_val == -2049, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x801;  op2val:0xb504
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x801, 0xb504, x2, 72, x3)

inst_48:
// rs1_val == -1025, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x401;  op2val:0xb505
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x401, 0xb505, x2, 76, x3)

inst_49:
// rs1_val == -513, rs2_val == 0
// opcode: ave ; op1:x30; dest:x31; op1val:-0x201;  op2val:0x0
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x201, 0x0, x2, 80, x3)

inst_50:
// rs1_val == -257, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x101;  op2val:0x5
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x101, 0x5, x2, 84, x3)

inst_51:
// rs1_val == -129, rs2_val == 1024
// opcode: ave ; op1:x30; dest:x31; op1val:-0x81;  op2val:0x400
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x81, 0x400, x2, 88, x3)

inst_52:
// rs2_val == -1431655766, rs1_val == 4
// opcode: ave ; op1:x30; dest:x31; op1val:0x4;  op2val:-0x55555556
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x4, -0x55555556, x2, 92, x3)

inst_53:
// rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80000000;  op2val:-0x1
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x80000000, -0x1, x2, 96, x3)

inst_54:
// rs1_val == rs2_val, rs1_val > 0 and rs2_val > 0
// opcode: ave ; op1:x30; dest:x31; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x66666666, 0x66666666, x2, 100, x3)

inst_55:
// rs2_val == (-2**(xlen-1)), rs2_val == -2147483648
// opcode: ave ; op1:x30; dest:x31; op1val:0x4;  op2val:-0x80000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x4, -0x80000000, x2, 104, x3)

inst_56:
// rs1_val == -65, rs2_val == 32
// opcode: ave ; op1:x30; dest:x31; op1val:-0x41;  op2val:0x20
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x41, 0x20, x2, 108, x3)

inst_57:
// rs1_val == -33, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x21;  op2val:0x0
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x21, 0x0, x2, 112, x3)

inst_58:
// rs1_val == -9, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x9;  op2val:-0x6
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x9, -0x6, x2, 116, x3)

inst_59:
// rs1_val == -5, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x5;  op2val:0x6
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x5, 0x6, x2, 120, x3)

inst_60:
// rs1_val == -3, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x3;  op2val:-0x2001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x3, -0x2001, x2, 124, x3)

inst_61:
// rs1_val == -2, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2;  op2val:0x5
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x2, 0x5, x2, 128, x3)

inst_62:
// rs2_val == 1073741824, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4;  op2val:0x40000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4, 0x40000000, x2, 132, x3)

inst_63:
// rs2_val == 536870912, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:0x20000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x0, 0x20000000, x2, 136, x3)

inst_64:
// rs2_val == 268435456, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x3;  op2val:0x10000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x3, 0x10000000, x2, 140, x3)

inst_65:
// rs2_val == 134217728, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4001;  op2val:0x8000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4001, 0x8000000, x2, 144, x3)

inst_66:
// rs2_val == 67108864, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10000001;  op2val:0x4000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x10000001, 0x4000000, x2, 148, x3)

inst_67:
// rs2_val == 33554432, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8001;  op2val:0x2000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x8001, 0x2000000, x2, 152, x3)

inst_68:
// rs2_val == 16777216, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4001;  op2val:0x1000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4001, 0x1000000, x2, 156, x3)

inst_69:
// rs2_val == 8388608, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400001;  op2val:0x800000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x400001, 0x800000, x2, 160, x3)

inst_70:
// rs2_val == 4194304, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x81;  op2val:0x400000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x81, 0x400000, x2, 164, x3)

inst_71:
// rs2_val == 2097152, rs1_val == 64
// opcode: ave ; op1:x30; dest:x31; op1val:0x40;  op2val:0x200000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x40, 0x200000, x2, 168, x3)

inst_72:
// rs2_val == 1048576, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800;  op2val:0x100000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x800, 0x100000, x2, 172, x3)

inst_73:
// rs2_val == 524288, rs1_val == 1024
// opcode: ave ; op1:x30; dest:x31; op1val:0x400;  op2val:0x80000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x400, 0x80000, x2, 176, x3)

inst_74:
// rs2_val == 262144, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1000;  op2val:0x40000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x1000, 0x40000, x2, 180, x3)

inst_75:
// rs2_val == 131072, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200001;  op2val:0x20000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x200001, 0x20000, x2, 184, x3)

inst_76:
// rs2_val == 32768, 
// opcode: ave ; op1:x30; dest:x31; op1val:0xb505;  op2val:0x8000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0xb505, 0x8000, x2, 188, x3)

inst_77:
// rs2_val == 16384, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800;  op2val:0x4000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x800, 0x4000, x2, 192, x3)

inst_78:
// rs2_val == 8192, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000000;  op2val:0x2000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x40000000, 0x2000, x2, 196, x3)

inst_79:
// rs2_val == 2048, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:0x800
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x0, 0x800, x2, 200, x3)

inst_80:
// rs2_val == 512, rs1_val == 524288
// opcode: ave ; op1:x30; dest:x31; op1val:0x80000;  op2val:0x200
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x80000, 0x200, x2, 204, x3)

inst_81:
// rs2_val == 256, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4;  op2val:0x100
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x4, 0x100, x2, 208, x3)

inst_82:
// rs2_val == 64, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x66666667;  op2val:0x40
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x66666667, 0x40, x2, 212, x3)

inst_83:
// rs2_val == 16, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000000;  op2val:0x10
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x40000000, 0x10, x2, 216, x3)

inst_84:
// rs2_val == 8, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1001;  op2val:0x8
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x1001, 0x8, x2, 220, x3)

inst_85:
// rs2_val == 1, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x6;  op2val:0x1
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x6, 0x1, x2, 224, x3)

inst_86:
// rs1_val == 1073741824, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000000;  op2val:0x33333332
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x40000000, 0x33333332, x2, 228, x3)

inst_87:
// rs1_val == 134217728, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000000;  op2val:0x7fffffff
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x8000000, 0x7fffffff, x2, 232, x3)

inst_88:
// rs1_val == 67108864, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000000;  op2val:0x7fffffff
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x4000000, 0x7fffffff, x2, 236, x3)

inst_89:
// rs1_val == 33554432, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000;  op2val:0x33333332
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x2000000, 0x33333332, x2, 240, x3)

inst_90:
// rs1_val == 8388608, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000;  op2val:0x20000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x800000, 0x20000, x2, 244, x3)

inst_91:
// rs1_val == 4194304, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x400000;  op2val:-0x800001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x400000, -0x800001, x2, 248, x3)

inst_92:
// rs1_val == 2097152, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000;  op2val:0x2
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x200000, 0x2, x2, 252, x3)

inst_93:
// rs1_val == 1048576, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000;  op2val:-0x1
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x100000, -0x1, x2, 256, x3)

inst_94:
// rs1_val == 262144, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000;  op2val:0x6
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x40000, 0x6, x2, 260, x3)

inst_95:
// rs1_val == 131072, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x20000;  op2val:-0x201
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x20000, -0x201, x2, 264, x3)

inst_96:
// rs1_val == 65536, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000;  op2val:-0x41
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x10000, -0x41, x2, 268, x3)

inst_97:
// rs1_val == 32768, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000;  op2val:-0x101
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x8000, -0x101, x2, 272, x3)

inst_98:
// rs1_val == 16384, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000;  op2val:0x8000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x4000, 0x8000, x2, 276, x3)

inst_99:
// rs1_val == 512, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200;  op2val:-0x80000000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x200, -0x80000000, x2, 280, x3)

inst_100:
// rs1_val == 256, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100;  op2val:0x3
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x100, 0x3, x2, 284, x3)

inst_101:
// rs1_val == 128, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x80;  op2val:-0x2001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x80, -0x2001, x2, 288, x3)

inst_102:
// rs1_val == 32, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x20;  op2val:0x0
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x20, 0x0, x2, 292, x3)

inst_103:
// rs1_val == 16, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10;  op2val:0x8000
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x10, 0x8000, x2, 296, x3)

inst_104:
// rs1_val == 8, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8;  op2val:-0x40001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x8, -0x40001, x2, 300, x3)

inst_105:
// rs1_val == 2, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2;  op2val:0x5
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x2, 0x5, x2, 304, x3)

inst_106:
// rs2_val == 2147483647, rs1_val == -8388609, rs2_val == (2**(xlen-1)-1), rs1_val < 0 and rs2_val > 0
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800001;  op2val:0x7fffffff
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x800001, 0x7fffffff, x2, 308, x3)

inst_107:
// rs2_val == -536870913, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: ave ; op1:x30; dest:x31; op1val:0x7fffffff;  op2val:-0x20000001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x7fffffff, -0x20000001, x2, 312, x3)

inst_108:
// rs2_val == -16777217, rs1_val == -524289
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80001;  op2val:-0x1000001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, -0x80001, -0x1000001, x2, 316, x3)

inst_109:
// rs2_val == -131073, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000;  op2val:-0x20001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x2000, -0x20001, x2, 320, x3)

inst_110:
// rs2_val == -32769, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:-0x8001
TEST_RR_OP(ave, x31, x30, x29, 0x00000000, 0x0, -0x8001, x2, 324, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 82*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
