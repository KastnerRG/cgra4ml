
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstas16 instruction of the RISC-V RV32PZicsr extension for the kstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x27, rd==x0, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -3
// opcode: kstas16 ; op1:x15; op2:x27; dest:x0; op1val:0xfff88000;  op2val:0xfffd0005
TEST_PKRR_OP(kstas16, x0, x15, x27, 0x00000000, 0xfff88000, 0xfffd0005, x15, x3, 0, x1)

inst_1:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x24, rs1_h1_val == rs2_h1_val, rs2_h0_val == 512, rs1_h1_val == 2, rs2_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kstas16 ; op1:x26; op2:x26; dest:x24; op1val:0x02fff9;  op2val:0x020200
TEST_PKRR_OP(kstas16, x24, x26, x26, 0x00000000, 0x02fff9, 0x020200, x26, x3, 8, x1)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x18, rd==x4, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -257, rs2_h0_val == 8192
// opcode: kstas16 ; op1:x4; op2:x18; dest:x4; op1val:0xc000feff;  op2val:0x022000
TEST_PKRR_OP(kstas16, x4, x4, x18, 0x00000000, 0xc000feff, 0x022000, x4, x3, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -33, rs2_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 21845
// opcode: kstas16 ; op1:x25; op2:x25; dest:x25; op1val:0x075555;  op2val:0xffdf0001
TEST_PKRR_OP(kstas16, x25, x25, x25, 0x00000000, 0x075555, 0xffdf0001, x25, x3, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h1_val == 1, rs2_h1_val == -9, rs1_h0_val == 4096, rs2_h0_val == 4096
// opcode: kstas16 ; op1:x0; op2:x12; dest:x12; op1val:0x011000;  op2val:0xfff71000
TEST_PKRR_OP(kstas16, x12, x0, x12, 0x00000000, 0x011000, 0xfff71000, x0, x3, 32, x1)

inst_5:
// rs1==x19, rs2==x28, rd==x23, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -21846, rs2_h0_val == -129, rs1_h1_val == -3
// opcode: kstas16 ; op1:x19; op2:x28; dest:x23; op1val:0xfffdaaaa;  op2val:0x03ff7f
TEST_PKRR_OP(kstas16, x23, x19, x28, 0x00000000, 0xfffdaaaa, 0x03ff7f, x19, x3, 40, x1)

inst_6:
// rs1==x18, rs2==x8, rd==x19, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -21846, rs2_h1_val == 4096
// opcode: kstas16 ; op1:x18; op2:x8; dest:x19; op1val:0x3fff0006;  op2val:0x1000aaaa
TEST_PKRR_OP(kstas16, x19, x18, x8, 0x00000000, 0x3fff0006, 0x1000aaaa, x18, x3, 48, x1)

inst_7:
// rs1==x30, rs2==x0, rd==x29, rs2_h1_val == -21846, rs2_h0_val == 0, rs1_h0_val == 16384, rs1_h1_val == 256
// opcode: kstas16 ; op1:x30; op2:x0; dest:x29; op1val:0x1004000;  op2val:0xaaaa0000
TEST_PKRR_OP(kstas16, x29, x30, x0, 0x00000000, 0x1004000, 0xaaaa0000, x30, x3, 56, x1)

inst_8:
// rs1==x28, rs2==x13, rd==x30, rs2_h1_val == 21845, rs2_h0_val == -2, rs1_h0_val == -4097
// opcode: kstas16 ; op1:x28; op2:x13; dest:x30; op1val:0x07efff;  op2val:0x5555fffe
TEST_PKRR_OP(kstas16, x30, x28, x13, 0x00000000, 0x07efff, 0x5555fffe, x28, x3, 64, x1)

inst_9:
// rs1==x10, rs2==x16, rd==x13, rs2_h1_val == 32767, rs1_h0_val == 2
// opcode: kstas16 ; op1:x10; op2:x16; dest:x13; op1val:0x030002;  op2val:0x7ffffffe
TEST_PKRR_OP(kstas16, x13, x10, x16, 0x00000000, 0x030002, 0x7ffffffe, x10, x3, 72, x1)

inst_10:
// rs1==x17, rs2==x2, rd==x5, rs2_h1_val == -16385, rs1_h0_val == 32
// opcode: kstas16 ; op1:x17; op2:x2; dest:x5; op1val:0x020020;  op2val:0xbfff1000
TEST_PKRR_OP(kstas16, x5, x17, x2, 0x00000000, 0x020020, 0xbfff1000, x17, x3, 80, x1)

inst_11:
// rs1==x14, rs2==x19, rd==x8, rs2_h1_val == -8193, rs2_h0_val == -2049
// opcode: kstas16 ; op1:x14; op2:x19; dest:x8; op1val:0xfff6efff;  op2val:0xdffff7ff
TEST_PKRR_OP(kstas16, x8, x14, x19, 0x00000000, 0xfff6efff, 0xdffff7ff, x14, x3, 88, x1)

inst_12:
// rs1==x8, rs2==x21, rd==x31, rs2_h1_val == -4097, rs2_h0_val == 21845, rs1_h1_val == -257
// opcode: kstas16 ; op1:x8; op2:x21; dest:x31; op1val:0xfeff5555;  op2val:0xefff5555
TEST_PKRR_OP(kstas16, x31, x8, x21, 0x00000000, 0xfeff5555, 0xefff5555, x8, x3, 96, x1)

inst_13:
// rs1==x22, rs2==x9, rd==x15, rs2_h1_val == -2049, rs2_h0_val == 1024, rs1_h0_val == -5
// opcode: kstas16 ; op1:x22; op2:x9; dest:x15; op1val:0xfffafffb;  op2val:0xf7ff0400
TEST_PKRR_OP(kstas16, x15, x22, x9, 0x00000000, 0xfffafffb, 0xf7ff0400, x22, x3, 104, x1)

inst_14:
// rs1==x6, rs2==x29, rd==x17, rs2_h1_val == -1025, rs1_h0_val == -3, rs2_h0_val == -1, rs1_h1_val == 21845
// opcode: kstas16 ; op1:x6; op2:x29; dest:x17; op1val:0x5555fffd;  op2val:0xfbffffff
TEST_PKRR_OP(kstas16, x17, x6, x29, 0x00000000, 0x5555fffd, 0xfbffffff, x6, x3, 112, x1)

inst_15:
// rs1==x1, rs2==x24, rd==x10, rs2_h1_val == -513, rs1_h1_val == -16385, rs1_h0_val == -1025, rs2_h0_val == 16
// opcode: kstas16 ; op1:x1; op2:x24; dest:x10; op1val:0xbffffbff;  op2val:0xfdff0010
TEST_PKRR_OP(kstas16, x10, x1, x24, 0x00000000, 0xbffffbff, 0xfdff0010, x1, x3, 120, x12)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x13, rs2==x4, rd==x27, rs2_h1_val == -257, rs1_h1_val == 16, rs1_h0_val == 64
// opcode: kstas16 ; op1:x13; op2:x4; dest:x27; op1val:0x100040;  op2val:0xfeff5555
TEST_PKRR_OP(kstas16, x27, x13, x4, 0x00000000, 0x100040, 0xfeff5555, x13, x8, 0, x12)

inst_17:
// rs1==x31, rs2==x10, rd==x11, rs2_h1_val == -129, rs1_h1_val == 32, rs2_h0_val == -32768
// opcode: kstas16 ; op1:x31; op2:x10; dest:x11; op1val:0x200040;  op2val:0xff7f8000
TEST_PKRR_OP(kstas16, x11, x31, x10, 0x00000000, 0x200040, 0xff7f8000, x31, x8, 8, x12)

inst_18:
// rs1==x3, rs2==x15, rd==x21, rs2_h1_val == -65, rs1_h1_val == 32767, rs2_h0_val == -9
// opcode: kstas16 ; op1:x3; op2:x15; dest:x21; op1val:0x7fff0020;  op2val:0xffbffff7
TEST_PKRR_OP(kstas16, x21, x3, x15, 0x00000000, 0x7fff0020, 0xffbffff7, x3, x8, 16, x12)

inst_19:
// rs1==x27, rs2==x6, rd==x9, rs2_h1_val == -17, rs1_h0_val == 256, rs2_h0_val == 8
// opcode: kstas16 ; op1:x27; op2:x6; dest:x9; op1val:0xfffc0100;  op2val:0xffef0008
TEST_PKRR_OP(kstas16, x9, x27, x6, 0x00000000, 0xfffc0100, 0xffef0008, x27, x8, 24, x12)

inst_20:
// rs1==x20, rs2==x14, rd==x26, rs2_h1_val == -5, rs1_h1_val == 64
// opcode: kstas16 ; op1:x20; op2:x14; dest:x26; op1val:0x400007;  op2val:0xfffbfff7
TEST_PKRR_OP(kstas16, x26, x20, x14, 0x00000000, 0x400007, 0xfffbfff7, x20, x8, 32, x12)

inst_21:
// rs1==x2, rs2==x1, rd==x18, rs2_h1_val == -2, rs2_h0_val == -513, rs1_h1_val == -21846
// opcode: kstas16 ; op1:x2; op2:x1; dest:x18; op1val:0xaaaafffc;  op2val:0xfffefdff
TEST_PKRR_OP(kstas16, x18, x2, x1, 0x00000000, 0xaaaafffc, 0xfffefdff, x2, x8, 40, x12)

inst_22:
// rs1==x21, rs2==x30, rd==x14, rs2_h1_val == -32768, rs1_h0_val == -2
// opcode: kstas16 ; op1:x21; op2:x30; dest:x14; op1val:0x09fffe;  op2val:0x80000009
TEST_PKRR_OP(kstas16, x14, x21, x30, 0x00000000, 0x09fffe, 0x80000009, x21, x8, 48, x12)

inst_23:
// rs1==x11, rs2==x17, rd==x7, rs2_h1_val == 16384, rs1_h1_val == -17
// opcode: kstas16 ; op1:x11; op2:x17; dest:x7; op1val:0xffef0005;  op2val:0x4000fdff
TEST_PKRR_OP(kstas16, x7, x11, x17, 0x00000000, 0xffef0005, 0x4000fdff, x11, x8, 56, x12)

inst_24:
// rs1==x16, rs2==x31, rd==x1, rs2_h1_val == 8192, rs2_h0_val == 2, rs1_h0_val == 1024
// opcode: kstas16 ; op1:x16; op2:x31; dest:x1; op1val:0xfffd0400;  op2val:0x20000002
TEST_PKRR_OP(kstas16, x1, x16, x31, 0x00000000, 0xfffd0400, 0x20000002, x16, x8, 64, x12)

inst_25:
// rs1==x7, rs2==x23, rd==x22, rs2_h1_val == 2048, rs1_h1_val == -32768
// opcode: kstas16 ; op1:x7; op2:x23; dest:x22; op1val:0x80000005;  op2val:0x800fffc
TEST_PKRR_OP(kstas16, x22, x7, x23, 0x00000000, 0x80000005, 0x800fffc, x7, x8, 72, x12)

inst_26:
// rs1==x24, rs2==x11, rd==x2, rs2_h1_val == 1024, rs2_h0_val == 256, rs1_h1_val == -5
// opcode: kstas16 ; op1:x24; op2:x11; dest:x2; op1val:0xfffb0002;  op2val:0x4000100
TEST_PKRR_OP(kstas16, x2, x24, x11, 0x00000000, 0xfffb0002, 0x4000100, x24, x8, 80, x12)

inst_27:
// rs1==x29, rs2==x7, rd==x6, rs2_h1_val == 512, rs2_h0_val == -33
// opcode: kstas16 ; op1:x29; op2:x7; dest:x6; op1val:0x02fbff;  op2val:0x200ffdf
TEST_PKRR_OP(kstas16, x6, x29, x7, 0x00000000, 0x02fbff, 0x200ffdf, x29, x8, 88, x12)

inst_28:
// rs1==x5, rs2==x20, rd==x28, rs2_h1_val == 256, 
// opcode: kstas16 ; op1:x5; op2:x20; dest:x28; op1val:0x030040;  op2val:0x100fff9
TEST_PKRR_OP(kstas16, x28, x5, x20, 0x00000000, 0x030040, 0x100fff9, x5, x8, 96, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x9, rs2==x5, rd==x16, rs2_h1_val == 128, rs1_h0_val == 512, rs2_h0_val == -17
// opcode: kstas16 ; op1:x9; op2:x5; dest:x16; op1val:0xfffd0200;  op2val:0x80ffef
TEST_PKRR_OP(kstas16, x16, x9, x5, 0x00000000, 0xfffd0200, 0x80ffef, x9, x1, 0, x2)

inst_30:
// rs1==x12, rs2==x22, rd==x3, rs2_h1_val == 64, rs1_h1_val == -513
// opcode: kstas16 ; op1:x12; op2:x22; dest:x3; op1val:0xfdff0020;  op2val:0x40aaaa
TEST_PKRR_OP(kstas16, x3, x12, x22, 0x00000000, 0xfdff0020, 0x40aaaa, x12, x1, 8, x2)

inst_31:
// rs1==x23, rs2==x3, rd==x20, rs1_h0_val == -513, rs1_h1_val == 1024
// opcode: kstas16 ; op1:x23; op2:x3; dest:x20; op1val:0x400fdff;  op2val:0xfdffffdf
TEST_PKRR_OP(kstas16, x20, x23, x3, 0x00000000, 0x400fdff, 0xfdffffdf, x23, x1, 16, x2)

inst_32:
// rs1_h0_val == -129, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7f;  op2val:0x030002
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x09ff7f, 0x030002, x30, x1, 24, x2)

inst_33:
// rs1_h0_val == -65, rs1_h1_val == -1
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xffdfaaaa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xffffffbf, 0xffdfaaaa, x30, x1, 32, x2)

inst_34:
// rs1_h0_val == -33, rs1_h1_val == 512
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdf;  op2val:0xfff80200
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x200ffdf, 0xfff80200, x30, x1, 40, x2)

inst_35:
// rs1_h0_val == -17, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffef;  op2val:0xf7ff0010
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfff8ffef, 0xf7ff0010, x30, x1, 48, x2)

inst_36:
// rs1_h0_val == -9, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff7;  op2val:0xffef0003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x200fff7, 0xffef0003, x30, x1, 56, x2)

inst_37:
// rs1_h0_val == 8192, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff2000;  op2val:0xff7f0400
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x3fff2000, 0xff7f0400, x30, x1, 64, x2)

inst_38:
// rs1_h0_val == 2048, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0800;  op2val:0xfdff3fff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x7fff0800, 0xfdff3fff, x30, x1, 72, x2)

inst_39:
// rs1_h0_val == 128, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000080;  op2val:0x090006
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xc0000080, 0x090006, x30, x1, 80, x2)

inst_40:
// rs1_h0_val == 16, rs2_h1_val == 4
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x090010;  op2val:0x040003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x090010, 0x040003, x30, x1, 88, x2)

inst_41:
// rs1_h0_val == 8, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200008;  op2val:0xfffafffe
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x200008, 0xfffafffe, x30, x1, 96, x2)

inst_42:
// rs1_h0_val == 4, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550004;  op2val:0x3fff0200
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x55550004, 0x3fff0200, x30, x1, 104, x2)

inst_43:
// rs1_h0_val == 1, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400001;  op2val:0x070006
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x400001, 0x070006, x30, x1, 112, x2)

inst_44:
// rs1_h0_val == 0, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0000;  op2val:0xfffa0010
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xbfff0000, 0xfffa0010, x30, x1, 120, x2)

inst_45:
// rs1_h0_val == -1, rs2_h1_val == 32, rs1_h1_val == -2
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0x20fff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfffeffff, 0x20fff8, x30, x1, 128, x2)

inst_46:
// rs2_h1_val == 16, rs2_h0_val == -4097, rs1_h1_val == 128
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x808000;  op2val:0x10efff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x808000, 0x10efff, x30, x1, 136, x2)

inst_47:
// rs2_h1_val == 8, rs2_h0_val == -8193
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd8000;  op2val:0x08dfff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfffd8000, 0x08dfff, x30, x1, 144, x2)

inst_48:
// rs2_h1_val == 1, rs1_h0_val == 32767
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff7fff;  op2val:0x01f7ff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfeff7fff, 0x01f7ff, x30, x1, 152, x2)

inst_49:
// rs2_h1_val == 0, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffa;  op2val:0x00fffc
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfdfffffa, 0x00fffc, x30, x1, 160, x2)

inst_50:
// rs2_h1_val == -1, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffa;  op2val:0xffff0009
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x09fffa, 0xffff0009, x30, x1, 168, x2)

inst_51:
// rs2_h0_val == -5, rs1_h1_val == -129
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f8000;  op2val:0x40fffb
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xff7f8000, 0x40fffb, x30, x1, 176, x2)

inst_52:
// rs2_h0_val == -3, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff;  op2val:0x05fffd
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x7ffffeff, 0x05fffd, x30, x1, 184, x2)

inst_53:
// rs2_h0_val == 16384, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaa;  op2val:0xfff94000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfdffaaaa, 0xfff94000, x30, x1, 192, x2)

inst_54:
// rs2_h0_val == 2048, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x402000;  op2val:0xfdff0800
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x402000, 0xfdff0800, x30, x1, 200, x2)

inst_55:
// rs2_h0_val == 128, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaefff;  op2val:0xfff70080
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xaaaaefff, 0xfff70080, x30, x1, 208, x2)

inst_56:
// rs2_h0_val == 64, rs1_h1_val == -8193
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0020;  op2val:0xc0000040
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xdfff0020, 0xc0000040, x30, x1, 216, x2)

inst_57:
// rs2_h0_val == 32, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fdff;  op2val:0xc0000020
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfff6fdff, 0xc0000020, x30, x1, 224, x2)

inst_58:
// rs2_h0_val == 4, rs1_h1_val == 2048
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa;  op2val:0xdfff0004
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x800aaaa, 0xdfff0004, x30, x1, 232, x2)

inst_59:
// rs1_h1_val == -4097, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffefff;  op2val:0xf7ffefff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xefffefff, 0xf7ffefff, x30, x1, 240, x2)

inst_60:
// rs1_h1_val == -2049, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffeff;  op2val:0x40aaaa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xf7fffeff, 0x40aaaa, x30, x1, 248, x2)

inst_61:
// rs1_h1_val == -1025, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffdff;  op2val:0x10000008
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfbfffdff, 0x10000008, x30, x1, 256, x2)

inst_62:
// rs1_h1_val == -65, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0x7fff0000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xffbf0100, 0x7fff0000, x30, x1, 264, x2)

inst_63:
// rs1_h1_val == -33, rs1_h0_val == -2049
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ff;  op2val:0xffffefff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xffdff7ff, 0xffffefff, x30, x1, 272, x2)

inst_64:
// rs1_h1_val == -9, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff71000;  op2val:0xfdff8000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfff71000, 0xfdff8000, x30, x1, 280, x2)

inst_65:
// rs1_h1_val == 16384, rs2_h0_val == -16385
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000004;  op2val:0xc000bfff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x40000004, 0xc000bfff, x30, x1, 288, x2)

inst_66:
// rs1_h1_val == 8192, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000040;  op2val:0xfffc0003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x20000040, 0xfffc0003, x30, x1, 296, x2)

inst_67:
// rs1_h1_val == 4096, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10004000;  op2val:0x400003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x10004000, 0x400003, x30, x1, 304, x2)

inst_68:
// rs2_h0_val == -65, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffefff;  op2val:0x10ffbf
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfeffefff, 0x10ffbf, x30, x1, 312, x2)

inst_69:
// rs2_h0_val == 32767, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20003fff;  op2val:0xfff97fff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x20003fff, 0xfff97fff, x30, x1, 320, x2)

inst_70:
// rs1_h1_val == 8, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x085555;  op2val:0x000005
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x085555, 0x000005, x30, x1, 328, x2)

inst_71:
// rs1_h1_val == 4, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0xfffe0002
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x04ffef, 0xfffe0002, x30, x1, 336, x2)

inst_72:
// rs1_h1_val == 0, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff6;  op2val:0xfff91000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x00fff6, 0xfff91000, x30, x1, 344, x2)

inst_73:
// rs2_h0_val == -1025, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100aaaa;  op2val:0x05fbff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x100aaaa, 0x05fbff, x30, x1, 352, x2)

inst_74:
// rs2_h0_val == -257, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0xffeffeff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfdfffdff, 0xffeffeff, x30, x1, 360, x2)

inst_75:
// rs1_h0_val == -16385, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03bfff;  op2val:0x040000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x03bfff, 0x040000, x30, x1, 368, x2)

inst_76:
// rs1_h0_val == -8193, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfff;  op2val:0x8000100
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xbfffdfff, 0x8000100, x30, x1, 376, x2)

inst_77:
// rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -3
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff88000;  op2val:0xfffd0005
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0xfff88000, 0xfffd0005, x30, x1, 384, x2)

inst_78:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == 512, rs1_h1_val == 2, rs2_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fff9;  op2val:0x020200
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x02fff9, 0x020200, x30, x1, 392, x2)

inst_79:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -33, rs2_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 21845
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x075555;  op2val:0xffdf0001
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x075555, 0xffdf0001, x30, x1, 400, x2)

inst_80:
// rs1_h0_val == rs2_h0_val, rs1_h1_val == 1, rs2_h1_val == -9, rs1_h0_val == 4096, rs2_h0_val == 4096
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x011000;  op2val:0xfff71000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x011000, 0xfff71000, x30, x1, 408, x2)

inst_81:
// rs2_h1_val == -21846, rs2_h0_val == 0, rs1_h0_val == 16384, rs1_h1_val == 256
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1004000;  op2val:0xaaaa0000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x00000000, 0x1004000, 0xaaaa0000, x30, x1, 416, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
