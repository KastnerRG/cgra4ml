
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the radd16 instruction of the RISC-V RV32PZicsr extension for the radd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",radd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x6, rd==x1, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs2_h0_val == -3, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -65
// opcode: radd16 ; op1:x19; op2:x6; dest:x1; op1val:0x038000;  op2val:0xffbffffd
TEST_RR_OP(radd16, x1, x19, x6, 0x00000000, 0x038000, 0xffbffffd, x11, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x8, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: radd16 ; op1:x25; op2:x25; dest:x8; op1val:0x03fffc;  op2val:0x032000
TEST_RR_OP(radd16, x8, x25, x25, 0x00000000, 0x03fffc, 0x032000, x11, 4, x3)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x9, rd==x18, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 512
// opcode: radd16 ; op1:x18; op2:x9; dest:x18; op1val:0xfffc0007;  op2val:0x200fff8
TEST_RR_OP(radd16, x18, x18, x9, 0x00000000, 0xfffc0007, 0x200fff8, x11, 8, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 128, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -8193, rs1_h0_val == 16, rs1_h1_val == -513
// opcode: radd16 ; op1:x26; op2:x26; dest:x26; op1val:0xfdff0010;  op2val:0xdfff0080
TEST_RR_OP(radd16, x26, x26, x26, 0x00000000, 0xfdff0010, 0xdfff0080, x11, 12, x3)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h1_val == -9, rs2_h1_val == 16, rs2_h0_val == -129, rs1_h0_val == -129
// opcode: radd16 ; op1:x0; op2:x12; dest:x12; op1val:0xfff7ff7f;  op2val:0x10ff7f
TEST_RR_OP(radd16, x12, x0, x12, 0x00000000, 0xfff7ff7f, 0x10ff7f, x11, 16, x3)

inst_5:
// rs1==x5, rs2==x0, rd==x16, rs2_h1_val == -21846, rs1_h1_val == 0
// opcode: radd16 ; op1:x5; op2:x0; dest:x16; op1val:0x00c000;  op2val:0xaaaa0009
TEST_RR_OP(radd16, x16, x5, x0, 0x00000000, 0x00c000, 0xaaaa0009, x11, 20, x3)

inst_6:
// rs1==x27, rs2==x7, rd==x23, rs2_h1_val == 21845, rs1_h1_val == -5
// opcode: radd16 ; op1:x27; op2:x7; dest:x23; op1val:0xfffb0010;  op2val:0x5555fffd
TEST_RR_OP(radd16, x23, x27, x7, 0x00000000, 0xfffb0010, 0x5555fffd, x11, 24, x3)

inst_7:
// rs1==x7, rs2==x27, rd==x31, rs2_h1_val == 32767, rs1_h0_val == 2
// opcode: radd16 ; op1:x7; op2:x27; dest:x31; op1val:0xfffb0002;  op2val:0x7fffff7f
TEST_RR_OP(radd16, x31, x7, x27, 0x00000000, 0xfffb0002, 0x7fffff7f, x11, 28, x3)

inst_8:
// rs1==x6, rs2==x2, rd==x21, rs2_h1_val == -16385, rs1_h0_val == -8193, rs1_h1_val == 1024, rs2_h0_val == 32
// opcode: radd16 ; op1:x6; op2:x2; dest:x21; op1val:0x400dfff;  op2val:0xbfff0020
TEST_RR_OP(radd16, x21, x6, x2, 0x00000000, 0x400dfff, 0xbfff0020, x11, 32, x3)

inst_9:
// rs1==x2, rs2==x22, rd==x4, rs2_h1_val == -4097, rs1_h1_val == 21845, rs1_h0_val == -1, rs2_h0_val == -4097
// opcode: radd16 ; op1:x2; op2:x22; dest:x4; op1val:0x5555ffff;  op2val:0xefffefff
TEST_RR_OP(radd16, x4, x2, x22, 0x00000000, 0x5555ffff, 0xefffefff, x11, 36, x3)

inst_10:
// rs1==x20, rs2==x8, rd==x13, rs2_h1_val == -2049, rs1_h0_val == -257, rs2_h0_val == 16384, rs1_h1_val == -32768
// opcode: radd16 ; op1:x20; op2:x8; dest:x13; op1val:0x8000feff;  op2val:0xf7ff4000
TEST_RR_OP(radd16, x13, x20, x8, 0x00000000, 0x8000feff, 0xf7ff4000, x11, 40, x3)

inst_11:
// rs1==x10, rs2==x13, rd==x5, rs2_h1_val == -1025, rs1_h0_val == 21845, rs1_h1_val == 2
// opcode: radd16 ; op1:x10; op2:x13; dest:x5; op1val:0x025555;  op2val:0xfbfffffa
TEST_RR_OP(radd16, x5, x10, x13, 0x00000000, 0x025555, 0xfbfffffa, x11, 44, x3)

inst_12:
// rs1==x21, rs2==x18, rd==x20, rs2_h1_val == -513, rs1_h1_val == 16384
// opcode: radd16 ; op1:x21; op2:x18; dest:x20; op1val:0x40003fff;  op2val:0xfdffc000
TEST_RR_OP(radd16, x20, x21, x18, 0x00000000, 0x40003fff, 0xfdffc000, x11, 48, x3)

inst_13:
// rs1==x29, rs2==x21, rd==x24, rs2_h1_val == -257, rs2_h0_val == 4
// opcode: radd16 ; op1:x29; op2:x21; dest:x24; op1val:0xfff8c000;  op2val:0xfeff0004
TEST_RR_OP(radd16, x24, x29, x21, 0x00000000, 0xfff8c000, 0xfeff0004, x11, 52, x3)

inst_14:
// rs1==x1, rs2==x28, rd==x29, rs2_h1_val == -129, rs1_h0_val == -4097, rs2_h0_val == -17
// opcode: radd16 ; op1:x1; op2:x28; dest:x29; op1val:0x02efff;  op2val:0xff7fffef
TEST_RR_OP(radd16, x29, x1, x28, 0x00000000, 0x02efff, 0xff7fffef, x11, 56, x3)

inst_15:
// rs1==x15, rs2==x24, rd==x28, rs2_h1_val == -33, rs1_h0_val == -21846
// opcode: radd16 ; op1:x15; op2:x24; dest:x28; op1val:0xfffbaaaa;  op2val:0xffdf0006
TEST_RR_OP(radd16, x28, x15, x24, 0x00000000, 0xfffbaaaa, 0xffdf0006, x11, 60, x3)

inst_16:
// rs1==x16, rs2==x15, rd==x7, rs2_h1_val == -17, rs1_h0_val == 1
// opcode: radd16 ; op1:x16; op2:x15; dest:x7; op1val:0x030001;  op2val:0xffef0009
TEST_RR_OP(radd16, x7, x16, x15, 0x00000000, 0x030001, 0xffef0009, x11, 64, x18)

inst_17:
// rs1==x4, rs2==x31, rd==x2, rs2_h1_val == -9, rs2_h0_val == 32767, rs1_h1_val == -21846
// opcode: radd16 ; op1:x4; op2:x31; dest:x2; op1val:0xaaaafff8;  op2val:0xfff77fff
TEST_RR_OP(radd16, x2, x4, x31, 0x00000000, 0xaaaafff8, 0xfff77fff, x11, 68, x18)

inst_18:
// rs1==x13, rs2==x1, rd==x3, rs2_h1_val == -5, rs1_h1_val == 2048, rs1_h0_val == 8
// opcode: radd16 ; op1:x13; op2:x1; dest:x3; op1val:0x8000008;  op2val:0xfffbc000
TEST_RR_OP(radd16, x3, x13, x1, 0x00000000, 0x8000008, 0xfffbc000, x11, 72, x18)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x9, rs2==x17, rd==x0, rs2_h1_val == -3, rs2_h0_val == -513, rs1_h0_val == 1024
// opcode: radd16 ; op1:x9; op2:x17; dest:x0; op1val:0x3fff0400;  op2val:0xfffdfdff
TEST_RR_OP(radd16, x0, x9, x17, 0x00000000, 0x3fff0400, 0xfffdfdff, x1, 0, x18)

inst_20:
// rs1==x3, rs2==x5, rd==x17, rs2_h1_val == -2, rs1_h1_val == -257
// opcode: radd16 ; op1:x3; op2:x5; dest:x17; op1val:0xfefffff8;  op2val:0xfffeefff
TEST_RR_OP(radd16, x17, x3, x5, 0x00000000, 0xfefffff8, 0xfffeefff, x1, 4, x18)

inst_21:
// rs1==x23, rs2==x29, rd==x11, rs2_h1_val == -32768, rs1_h0_val == -16385, rs1_h1_val == -3, rs2_h0_val == 4096
// opcode: radd16 ; op1:x23; op2:x29; dest:x11; op1val:0xfffdbfff;  op2val:0x80001000
TEST_RR_OP(radd16, x11, x23, x29, 0x00000000, 0xfffdbfff, 0x80001000, x1, 8, x18)

inst_22:
// rs1==x12, rs2==x20, rd==x14, rs2_h1_val == 16384, rs1_h1_val == -16385, rs2_h0_val == -257
// opcode: radd16 ; op1:x12; op2:x20; dest:x14; op1val:0xbfff8000;  op2val:0x4000feff
TEST_RR_OP(radd16, x14, x12, x20, 0x00000000, 0xbfff8000, 0x4000feff, x1, 12, x18)

inst_23:
// rs1==x14, rs2==x16, rd==x9, rs2_h1_val == 8192, rs1_h1_val == -65, rs2_h0_val == -65
// opcode: radd16 ; op1:x14; op2:x16; dest:x9; op1val:0xffbf0010;  op2val:0x2000ffbf
TEST_RR_OP(radd16, x9, x14, x16, 0x00000000, 0xffbf0010, 0x2000ffbf, x1, 16, x18)

inst_24:
// rs1==x30, rs2==x14, rd==x19, rs2_h1_val == 4096, rs1_h1_val == 512
// opcode: radd16 ; op1:x30; op2:x14; dest:x19; op1val:0x2000001;  op2val:0x1000ff7f
TEST_RR_OP(radd16, x19, x30, x14, 0x00000000, 0x2000001, 0x1000ff7f, x1, 20, x18)

inst_25:
// rs1==x17, rs2==x30, rd==x25, rs2_h1_val == 2048, rs1_h1_val == 8192, rs2_h0_val == -32768
// opcode: radd16 ; op1:x17; op2:x30; dest:x25; op1val:0x20000003;  op2val:0x8008000
TEST_RR_OP(radd16, x25, x17, x30, 0x00000000, 0x20000003, 0x8008000, x1, 24, x18)

inst_26:
// rs1==x31, rs2==x3, rd==x22, rs2_h1_val == 1024, rs1_h0_val == 32767, rs2_h0_val == 16
// opcode: radd16 ; op1:x31; op2:x3; dest:x22; op1val:0x20007fff;  op2val:0x4000010
TEST_RR_OP(radd16, x22, x31, x3, 0x00000000, 0x20007fff, 0x4000010, x1, 28, x18)

inst_27:
// rs1==x28, rs2==x10, rd==x6, rs2_h1_val == 256, rs1_h0_val == -3, rs2_h0_val == 0
// opcode: radd16 ; op1:x28; op2:x10; dest:x6; op1val:0x5555fffd;  op2val:0x1000000
TEST_RR_OP(radd16, x6, x28, x10, 0x00000000, 0x5555fffd, 0x1000000, x1, 32, x18)

inst_28:
// rs1==x8, rs2==x19, rd==x10, rs2_h1_val == 128, rs1_h0_val == 0
// opcode: radd16 ; op1:x8; op2:x19; dest:x10; op1val:0x20000000;  op2val:0x800007
TEST_RR_OP(radd16, x10, x8, x19, 0x00000000, 0x20000000, 0x800007, x1, 36, x18)

inst_29:
// rs1==x22, rs2==x11, rd==x15, rs2_h1_val == 64, 
// opcode: radd16 ; op1:x22; op2:x11; dest:x15; op1val:0x09aaaa;  op2val:0x408000
TEST_RR_OP(radd16, x15, x22, x11, 0x00000000, 0x09aaaa, 0x408000, x1, 40, x18)

inst_30:
// rs1==x24, rs2==x23, rd==x27, rs2_h1_val == 32, rs2_h0_val == -33, rs1_h1_val == 1
// opcode: radd16 ; op1:x24; op2:x23; dest:x27; op1val:0x015555;  op2val:0x20ffdf
TEST_RR_OP(radd16, x27, x24, x23, 0x00000000, 0x015555, 0x20ffdf, x1, 44, x18)

inst_31:
// rs1==x11, rs2==x4, rd==x30, rs1_h0_val == -1025, rs1_h1_val == -1025
// opcode: radd16 ; op1:x11; op2:x4; dest:x30; op1val:0xfbfffbff;  op2val:0xfff6fffc
TEST_RR_OP(radd16, x30, x11, x4, 0x00000000, 0xfbfffbff, 0xfff6fffc, x1, 48, x2)

inst_32:
// rs1_h0_val == -513, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fdff;  op2val:0xf7ffefff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfff6fdff, 0xf7ffefff, x1, 52, x2)

inst_33:
// rs1_h0_val == -65, rs1_h1_val == 4, rs2_h0_val == -2049
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf;  op2val:0x1000f7ff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x04ffbf, 0x1000f7ff, x1, 56, x2)

inst_34:
// rs1_h0_val == -33, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf;  op2val:0xbffffdff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x01ffdf, 0xbffffdff, x1, 60, x2)

inst_35:
// rs1_h0_val == -17, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef;  op2val:0xfff60003
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x800ffef, 0xfff60003, x1, 64, x2)

inst_36:
// rs1_h0_val == -9, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff7;  op2val:0x40ffef
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfffcfff7, 0x40ffef, x1, 68, x2)

inst_37:
// rs1_h0_val == -5, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffb;  op2val:0xfffc1000
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfff8fffb, 0xfffc1000, x1, 72, x2)

inst_38:
// rs1_h0_val == -2, rs2_h0_val == 64
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffe;  op2val:0xaaaa0040
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfdfffffe, 0xaaaa0040, x1, 76, x2)

inst_39:
// rs1_h0_val == 16384, rs2_h0_val == 2, rs1_h1_val == -33
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0xffdf0002
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xffdf4000, 0xffdf0002, x1, 80, x2)

inst_40:
// rs1_h0_val == 8192, rs1_h1_val == 32
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x202000;  op2val:0xfff6fff6
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x202000, 0xfff6fff6, x1, 84, x2)

inst_41:
// rs1_h0_val == 4096, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff81000;  op2val:0xfff80005
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfff81000, 0xfff80005, x1, 88, x2)

inst_42:
// rs1_h0_val == 2048, rs2_h1_val == 0
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0800;  op2val:0x000002
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfffb0800, 0x000002, x1, 92, x2)

inst_43:
// rs1_h0_val == 512, rs1_h1_val == 256, rs2_h0_val == -9
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200;  op2val:0xeffffff7
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x1000200, 0xeffffff7, x1, 96, x2)

inst_44:
// rs1_h0_val == 256, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550100;  op2val:0x800020
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x55550100, 0x800020, x1, 100, x2)

inst_45:
// rs1_h0_val == 128, rs1_h1_val == 64
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400080;  op2val:0x7ffffffd
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x400080, 0x7ffffffd, x1, 104, x2)

inst_46:
// rs1_h0_val == 64, rs2_h0_val == 512
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040040;  op2val:0xfeff0200
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x040040, 0xfeff0200, x1, 108, x2)

inst_47:
// rs1_h0_val == 32, rs2_h0_val == -2, rs1_h1_val == 8
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x080020;  op2val:0xaaaafffe
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x080020, 0xaaaafffe, x1, 112, x2)

inst_48:
// rs1_h0_val == 4, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000004;  op2val:0xfff9ffef
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x8000004, 0xfff9ffef, x1, 116, x2)

inst_49:
// rs2_h0_val == -5, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff9;  op2val:0xff7ffffb
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x06fff9, 0xff7ffffb, x1, 120, x2)

inst_50:
// rs2_h0_val == 2048, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffdff;  op2val:0x050800
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x3ffffdff, 0x050800, x1, 124, x2)

inst_51:
// rs2_h0_val == 1024, rs1_h1_val == -8193
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa;  op2val:0x40000400
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xdffffffa, 0x40000400, x1, 128, x2)

inst_52:
// rs2_h0_val == 256, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff;  op2val:0xffdf0100
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfff7efff, 0xffdf0100, x1, 132, x2)

inst_53:
// rs2_h0_val == 8, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffa;  op2val:0x1000008
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x00fffa, 0x1000008, x1, 136, x2)

inst_54:
// rs2_h0_val == 1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40dfff;  op2val:0xfffb0001
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x40dfff, 0xfffb0001, x1, 140, x2)

inst_55:
// rs2_h0_val == -1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffd;  op2val:0x200ffff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfbfffffd, 0x200ffff, x1, 144, x2)

inst_56:
// rs1_h1_val == 32767, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffdff;  op2val:0x3ffffffe
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x7ffffdff, 0x3ffffffe, x1, 148, x2)

inst_57:
// rs1_h1_val == -4097, rs2_h0_val == -21846
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff3fff;  op2val:0xfdffaaaa
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xefff3fff, 0xfdffaaaa, x1, 152, x2)

inst_58:
// rs2_h0_val == -1025, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbff;  op2val:0x10fbff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x04fbff, 0x10fbff, x1, 156, x2)

inst_59:
// rs1_h1_val == -2049, rs2_h1_val == -1
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xffff0009
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xffff0009, x1, 160, x2)

inst_60:
// rs1_h1_val == -129, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffef;  op2val:0x1000ff7f
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xff7fffef, 0x1000ff7f, x1, 164, x2)

inst_61:
// rs1_h1_val == -17, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefc000;  op2val:0x2000100
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xffefc000, 0x2000100, x1, 168, x2)

inst_62:
// rs1_h1_val == -2, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffa;  op2val:0xfffa0020
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfffefffa, 0xfffa0020, x1, 172, x2)

inst_63:
// rs1_h1_val == 4096, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000005;  op2val:0x200ff7f
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x10000005, 0x200ff7f, x1, 176, x2)

inst_64:
// rs2_h1_val == 8, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff8000;  op2val:0x08fbff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xdfff8000, 0x08fbff, x1, 180, x2)

inst_65:
// rs2_h1_val == 4, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff;  op2val:0x040009
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xdffffbff, 0x040009, x1, 184, x2)

inst_66:
// rs2_h1_val == 2, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff6;  op2val:0x020100
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfefffff6, 0x020100, x1, 188, x2)

inst_67:
// rs2_h1_val == 1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffd;  op2val:0x01f7ff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x02fffd, 0x01f7ff, x1, 192, x2)

inst_68:
// rs2_h0_val == 21845, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffb;  op2val:0xdfff5555
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x1000fffb, 0xdfff5555, x1, 196, x2)

inst_69:
// rs1_h1_val == 16, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffd;  op2val:0x1002000
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x10fffd, 0x1002000, x1, 200, x2)

inst_70:
// rs2_h0_val == -16385, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff9;  op2val:0xaaaabfff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x7ffffff9, 0xaaaabfff, x1, 204, x2)

inst_71:
// rs1_h1_val == -1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff8000;  op2val:0xfff81000
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xffff8000, 0xfff81000, x1, 208, x2)

inst_72:
// rs1_h0_val == -2049, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ff;  op2val:0x80007fff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xffdff7ff, 0x80007fff, x1, 212, x2)

inst_73:
// rs2_h0_val == -8193, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0001;  op2val:0x09dfff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfffa0001, 0x09dfff, x1, 216, x2)

inst_74:
// rs1_h1_val == 128, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdff;  op2val:0x020400
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x80fdff, 0x020400, x1, 220, x2)

inst_75:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 128, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -8193, rs1_h0_val == 16, rs1_h1_val == -513
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010;  op2val:0xdfff0080
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfdff0010, 0xdfff0080, x1, 224, x2)

inst_76:
// rs1_h0_val == rs2_h0_val, rs1_h1_val == -9, rs2_h1_val == 16, rs2_h0_val == -129, rs1_h0_val == -129
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7f;  op2val:0x10ff7f
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0xfff7ff7f, 0x10ff7f, x1, 228, x2)

inst_77:
// rs2_h1_val == -3, rs2_h0_val == -513, rs1_h0_val == 1024
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400;  op2val:0xfffdfdff
TEST_RR_OP(radd16, x31, x30, x29, 0x00000000, 0x3fff0400, 0xfffdfdff, x1, 232, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 59*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
