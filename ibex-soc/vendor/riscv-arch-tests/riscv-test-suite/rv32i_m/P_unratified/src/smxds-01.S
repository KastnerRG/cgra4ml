
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smxds instruction of the RISC-V RV32PZicsr extension for the smxds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smxds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x12, rd==x7, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 512, rs2_h1_val == -16385
// opcode: smxds ; op1:x2; op2:x12; dest:x7; op1val:0xfff78000;  op2val:0xbfff0200
TEST_RR_OP(smxds, x7, x2, x12, 0x00000000, 0xfff78000, 0xbfff0200, x4, 0, x6)

inst_1:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x25, rs1_h1_val == rs2_h1_val, rs2_h0_val == 1024, rs2_h1_val == -8193, rs1_h1_val == -8193
// opcode: smxds ; op1:x5; op2:x5; dest:x25; op1val:0xdffffffa;  op2val:0xdfff0400
TEST_RR_OP(smxds, x25, x5, x5, 0x00000000, 0xdffffffa, 0xdfff0400, x4, 4, x6)

inst_2:
// rs1 == rd != rs2, rs1==x12, rs2==x2, rd==x12, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 32767, rs1_h1_val == -513, rs2_h1_val == 256
// opcode: smxds ; op1:x12; op2:x2; dest:x12; op1val:0xfdfffff8;  op2val:0x1007fff
TEST_RR_OP(smxds, x12, x12, x2, 0x00000000, 0xfdfffff8, 0x1007fff, x4, 8, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 8192, rs2_h0_val == 64, rs2_h1_val == -2
// opcode: smxds ; op1:x24; op2:x24; dest:x24; op1val:0x2000c000;  op2val:0xfffe0040
TEST_RR_OP(smxds, x24, x24, x24, 0x00000000, 0x2000c000, 0xfffe0040, x4, 12, x6)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x11, rd==x11, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 2, rs1_h1_val == 2, rs1_h0_val == 2, rs2_h0_val == -129
// opcode: smxds ; op1:x1; op2:x11; dest:x11; op1val:0x020002;  op2val:0x02ff7f
TEST_RR_OP(smxds, x11, x1, x11, 0x00000000, 0x020002, 0x02ff7f, x4, 16, x6)

inst_5:
// rs1==x19, rs2==x31, rd==x20, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: smxds ; op1:x19; op2:x31; dest:x20; op1val:0xfffafff8;  op2val:0xfff6fff8
TEST_RR_OP(smxds, x20, x19, x31, 0x00000000, 0xfffafff8, 0xfff6fff8, x4, 20, x6)

inst_6:
// rs1==x14, rs2==x8, rd==x19, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 4096, rs1_h1_val == -2
// opcode: smxds ; op1:x14; op2:x8; dest:x19; op1val:0xfffe1000;  op2val:0xbfff0006
TEST_RR_OP(smxds, x19, x14, x8, 0x00000000, 0xfffe1000, 0xbfff0006, x4, 24, x6)

inst_7:
// rs1==x9, rs2==x7, rd==x10, rs2_h1_val == -21846, rs2_h0_val == 0
// opcode: smxds ; op1:x9; op2:x7; dest:x10; op1val:0x07c000;  op2val:0xaaaa0000
TEST_RR_OP(smxds, x10, x9, x7, 0x00000000, 0x07c000, 0xaaaa0000, x4, 28, x6)

inst_8:
// rs1==x17, rs2==x25, rd==x31, rs2_h1_val == 21845, rs2_h0_val == -513, rs1_h1_val == -21846, rs1_h0_val == -33
// opcode: smxds ; op1:x17; op2:x25; dest:x31; op1val:0xaaaaffdf;  op2val:0x5555fdff
TEST_RR_OP(smxds, x31, x17, x25, 0x00000000, 0xaaaaffdf, 0x5555fdff, x4, 32, x6)

inst_9:
// rs1==x22, rs2==x3, rd==x23, rs2_h1_val == 32767, rs1_h1_val == -33, rs1_h0_val == 128, rs2_h0_val == -1
// opcode: smxds ; op1:x22; op2:x3; dest:x23; op1val:0xffdf0080;  op2val:0x7fffffff
TEST_RR_OP(smxds, x23, x22, x3, 0x00000000, 0xffdf0080, 0x7fffffff, x4, 36, x6)

inst_10:
// rs1==x0, rs2==x9, rd==x30, rs2_h1_val == -4097, rs1_h0_val == 256, rs2_h0_val == 32, rs1_h1_val == 128
// opcode: smxds ; op1:x0; op2:x9; dest:x30; op1val:0x800100;  op2val:0xefff0020
TEST_RR_OP(smxds, x30, x0, x9, 0x00000000, 0x800100, 0xefff0020, x4, 40, x6)

inst_11:
// rs1==x11, rs2==x29, rd==x22, rs2_h1_val == -2049, rs2_h0_val == 256, rs1_h1_val == -4097, rs1_h0_val == -9
// opcode: smxds ; op1:x11; op2:x29; dest:x22; op1val:0xeffffff7;  op2val:0xf7ff0100
TEST_RR_OP(smxds, x22, x11, x29, 0x00000000, 0xeffffff7, 0xf7ff0100, x4, 44, x6)

inst_12:
// rs1==x15, rs2==x22, rd==x9, rs2_h1_val == -1025, rs1_h1_val == 64
// opcode: smxds ; op1:x15; op2:x22; dest:x9; op1val:0x400007;  op2val:0xfbfffdff
TEST_RR_OP(smxds, x9, x15, x22, 0x00000000, 0x400007, 0xfbfffdff, x4, 48, x6)

inst_13:
// rs1==x25, rs2==x18, rd==x21, rs2_h1_val == -513, rs1_h0_val == 16384, rs1_h1_val == 21845
// opcode: smxds ; op1:x25; op2:x18; dest:x21; op1val:0x55554000;  op2val:0xfdff0200
TEST_RR_OP(smxds, x21, x25, x18, 0x00000000, 0x55554000, 0xfdff0200, x4, 52, x6)

inst_14:
// rs1==x13, rs2==x14, rd==x15, rs2_h1_val == -257, rs2_h0_val == -1025, rs1_h1_val == 16
// opcode: smxds ; op1:x13; op2:x14; dest:x15; op1val:0x100003;  op2val:0xfefffbff
TEST_RR_OP(smxds, x15, x13, x14, 0x00000000, 0x100003, 0xfefffbff, x4, 56, x6)

inst_15:
// rs1==x8, rs2==x10, rd==x27, rs2_h1_val == -129, 
// opcode: smxds ; op1:x8; op2:x10; dest:x27; op1val:0xc0008000;  op2val:0xff7ffff6
TEST_RR_OP(smxds, x27, x8, x10, 0x00000000, 0xc0008000, 0xff7ffff6, x4, 60, x6)

inst_16:
// rs1==x31, rs2==x17, rd==x0, rs2_h1_val == -65, rs1_h1_val == -3, rs2_h0_val == 2048
// opcode: smxds ; op1:x31; op2:x17; dest:x0; op1val:0xfffd1000;  op2val:0xffbf0800
TEST_RR_OP(smxds, x0, x31, x17, 0x00000000, 0xfffd1000, 0xffbf0800, x4, 64, x9)

inst_17:
// rs1==x10, rs2==x15, rd==x18, rs2_h1_val == -33, rs1_h1_val == 512, rs1_h0_val == 4
// opcode: smxds ; op1:x10; op2:x15; dest:x18; op1val:0x2000004;  op2val:0xffdfff7f
TEST_RR_OP(smxds, x18, x10, x15, 0x00000000, 0x2000004, 0xffdfff7f, x4, 68, x9)

inst_18:
// rs1==x29, rs2==x26, rd==x5, rs2_h1_val == -17, rs2_h0_val == -3
// opcode: smxds ; op1:x29; op2:x26; dest:x5; op1val:0x800080;  op2val:0xffeffffd
TEST_RR_OP(smxds, x5, x29, x26, 0x00000000, 0x800080, 0xffeffffd, x4, 72, x9)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_19:
// rs1==x27, rs2==x1, rd==x28, rs2_h1_val == -9, rs1_h0_val == 8192
// opcode: smxds ; op1:x27; op2:x1; dest:x28; op1val:0x2002000;  op2val:0xfff7fff9
TEST_RR_OP(smxds, x28, x27, x1, 0x00000000, 0x2002000, 0xfff7fff9, x5, 0, x9)

inst_20:
// rs1==x20, rs2==x28, rd==x2, rs2_h1_val == -5, rs2_h0_val == -2
// opcode: smxds ; op1:x20; op2:x28; dest:x2; op1val:0x022000;  op2val:0xfffbfffe
TEST_RR_OP(smxds, x2, x20, x28, 0x00000000, 0x022000, 0xfffbfffe, x5, 4, x9)

inst_21:
// rs1==x18, rs2==x0, rd==x4, rs2_h1_val == -3, rs1_h0_val == -257, rs1_h1_val == 0, rs2_h0_val == -9
// opcode: smxds ; op1:x18; op2:x0; dest:x4; op1val:0x00feff;  op2val:0xfffdfff7
TEST_RR_OP(smxds, x4, x18, x0, 0x00000000, 0x00feff, 0xfffdfff7, x5, 8, x9)

inst_22:
// rs1==x16, rs2==x20, rd==x6, rs2_h1_val == -32768, rs1_h1_val == -1, rs1_h0_val == -129
// opcode: smxds ; op1:x16; op2:x20; dest:x6; op1val:0xffffff7f;  op2val:0x8000fffd
TEST_RR_OP(smxds, x6, x16, x20, 0x00000000, 0xffffff7f, 0x8000fffd, x5, 12, x9)

inst_23:
// rs1==x26, rs2==x19, rd==x16, rs2_h1_val == 16384, rs2_h0_val == -17, rs1_h0_val == -2049
// opcode: smxds ; op1:x26; op2:x19; dest:x16; op1val:0x02f7ff;  op2val:0x4000ffef
TEST_RR_OP(smxds, x16, x26, x19, 0x00000000, 0x02f7ff, 0x4000ffef, x5, 16, x9)

inst_24:
// rs1==x6, rs2==x16, rd==x13, rs2_h1_val == 8192, rs2_h0_val == 2, rs1_h0_val == 32767
// opcode: smxds ; op1:x6; op2:x16; dest:x13; op1val:0x407fff;  op2val:0x20000002
TEST_RR_OP(smxds, x13, x6, x16, 0x00000000, 0x407fff, 0x20000002, x5, 20, x9)

inst_25:
// rs1==x28, rs2==x23, rd==x8, rs2_h1_val == 4096, rs1_h1_val == -5, rs2_h0_val == -65, rs1_h0_val == 2048
// opcode: smxds ; op1:x28; op2:x23; dest:x8; op1val:0xfffb0800;  op2val:0x1000ffbf
TEST_RR_OP(smxds, x8, x28, x23, 0x00000000, 0xfffb0800, 0x1000ffbf, x5, 24, x9)

inst_26:
// rs1==x21, rs2==x4, rd==x29, rs2_h1_val == 2048, rs2_h0_val == -8193, rs1_h0_val == 16
// opcode: smxds ; op1:x21; op2:x4; dest:x29; op1val:0x55550010;  op2val:0x800dfff
TEST_RR_OP(smxds, x29, x21, x4, 0x00000000, 0x55550010, 0x800dfff, x5, 28, x9)

inst_27:
// rs1==x23, rs2==x27, rd==x26, rs2_h1_val == 1024, 
// opcode: smxds ; op1:x23; op2:x27; dest:x26; op1val:0x020006;  op2val:0x4000100
TEST_RR_OP(smxds, x26, x23, x27, 0x00000000, 0x020006, 0x4000100, x5, 32, x9)

inst_28:
// rs1==x3, rs2==x13, rd==x14, rs2_h1_val == 512, rs1_h1_val == -2049
// opcode: smxds ; op1:x3; op2:x13; dest:x14; op1val:0xf7ff0010;  op2val:0x200dfff
TEST_RR_OP(smxds, x14, x3, x13, 0x00000000, 0xf7ff0010, 0x200dfff, x5, 36, x9)

inst_29:
// rs1==x4, rs2==x6, rd==x3, rs2_h1_val == 128, rs1_h1_val == 32
// opcode: smxds ; op1:x4; op2:x6; dest:x3; op1val:0x208000;  op2val:0x800400
TEST_RR_OP(smxds, x3, x4, x6, 0x00000000, 0x208000, 0x800400, x5, 40, x9)

inst_30:
// rs1==x7, rs2==x21, rd==x1, rs1_h0_val == -1025, rs1_h1_val == -65, rs2_h0_val == -21846
// opcode: smxds ; op1:x7; op2:x21; dest:x1; op1val:0xffbffbff;  op2val:0xaaaaaaaa
TEST_RR_OP(smxds, x1, x7, x21, 0x00000000, 0xffbffbff, 0xaaaaaaaa, x5, 44, x9)

inst_31:
// rs1==x30, rs1_h0_val == -513, rs1_h1_val == -129, rs2_h0_val == -2049
// opcode: smxds ; op1:x30; op2:x26; dest:x10; op1val:0xff7ffdff;  op2val:0x1000f7ff
TEST_RR_OP(smxds, x10, x30, x26, 0x00000000, 0xff7ffdff, 0x1000f7ff, x5, 48, x9)

inst_32:
// rs2==x30, rs1_h0_val == -65, rs2_h1_val == -1, rs1_h1_val == -17, rs2_h0_val == -4097
// opcode: smxds ; op1:x16; op2:x30; dest:x12; op1val:0xffefffbf;  op2val:0xffffefff
TEST_RR_OP(smxds, x12, x16, x30, 0x00000000, 0xffefffbf, 0xffffefff, x5, 52, x9)

inst_33:
// rd==x17, rs1_h0_val == -17, rs2_h0_val == 8192, rs1_h1_val == 32767
// opcode: smxds ; op1:x1; op2:x2; dest:x17; op1val:0x7fffffef;  op2val:0x40002000
TEST_RR_OP(smxds, x17, x1, x2, 0x00000000, 0x7fffffef, 0x40002000, x5, 56, x9)

inst_34:
// rs1_h0_val == -5, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffb;  op2val:0x06fff7
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xffeffffb, 0x06fff7, x5, 60, x9)

inst_35:
// rs1_h0_val == -3, rs2_h1_val == 4
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd;  op2val:0x04fff6
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfffbfffd, 0x04fff6, x5, 64, x9)

inst_36:
// rs1_h0_val == -2, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffe;  op2val:0xfffa7fff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xffbffffe, 0xfffa7fff, x5, 68, x9)

inst_37:
// rs1_h0_val == 1024, rs2_h0_val == 4
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x200400;  op2val:0xbfff0004
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x200400, 0xbfff0004, x5, 72, x9)

inst_38:
// rs1_h0_val == 512, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0200;  op2val:0xffffff7f
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xff7f0200, 0xffffff7f, x5, 76, x9)

inst_39:
// rs1_h0_val == 64, rs2_h0_val == 16384
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0040;  op2val:0x55554000
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfffa0040, 0x55554000, x5, 80, x9)

inst_40:
// rs1_h0_val == 32, rs1_h1_val == 1024
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x4000020;  op2val:0xfeffffff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x4000020, 0xfeffffff, x5, 84, x9)

inst_41:
// rs1_h0_val == 8, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff80008;  op2val:0x05fffc
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfff80008, 0x05fffc, x5, 88, x9)

inst_42:
// rs1_h0_val == 1, rs1_h1_val == 1, rs2_h0_val == 4096
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x010001;  op2val:0x8001000
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x010001, 0x8001000, x5, 92, x9)

inst_43:
// rs1_h0_val == 0, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0000;  op2val:0xfdff0004
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xffbf0000, 0xfdff0004, x5, 96, x9)

inst_44:
// rs1_h0_val == -1, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffff;  op2val:0xfff70006
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfffcffff, 0xfff70006, x5, 100, x9)

inst_45:
// rs2_h0_val == -5, rs1_h1_val == -257
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0009;  op2val:0xfffafffb
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfeff0009, 0xfffafffb, x5, 104, x9)

inst_46:
// rs2_h0_val == -32768, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x20000005;  op2val:0x55558000
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x20000005, 0x55558000, x5, 108, x9)

inst_47:
// rs2_h0_val == 128, rs1_h1_val == 2048, rs1_h0_val == -16385
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x800bfff;  op2val:0xffbf0080
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x800bfff, 0xffbf0080, x5, 112, x9)

inst_48:
// rs2_h0_val == 16, rs2_h1_val == 1
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdf;  op2val:0x010010
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x2000ffdf, 0x010010, x5, 116, x9)

inst_49:
// rs2_h0_val == 8, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffff0005;  op2val:0x2000008
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xffff0005, 0x2000008, x5, 120, x9)

inst_50:
// rs2_h0_val == 1, rs1_h0_val == 21845
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x8005555;  op2val:0xfff70001
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x8005555, 0xfff70001, x5, 124, x9)

inst_51:
// rs1_h1_val == -16385, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0007;  op2val:0xbfffffff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xbfff0007, 0xbfffffff, x5, 128, x9)

inst_52:
// rs1_h1_val == -1025, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555;  op2val:0x800400
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfbff5555, 0x800400, x5, 132, x9)

inst_53:
// rs1_h1_val == -32768, rs1_h0_val == -4097
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x8000efff;  op2val:0xaaaac000
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x8000efff, 0xaaaac000, x5, 136, x9)

inst_54:
// rs2_h1_val == 64, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff90080;  op2val:0x40ffef
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfff90080, 0x40ffef, x5, 140, x9)

inst_55:
// rs1_h1_val == 16384, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x40000400;  op2val:0xfffbffef
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x40000400, 0xfffbffef, x5, 144, x9)

inst_56:
// rs2_h1_val == 32, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008;  op2val:0x20ffff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfffe0008, 0x20ffff, x5, 148, x9)

inst_57:
// rs2_h1_val == 16, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0x102000
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xefffffff, 0x102000, x5, 152, x9)

inst_58:
// rs1_h1_val == 4096, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7f;  op2val:0xfffafffa
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x1000ff7f, 0xfffafffa, x5, 156, x9)

inst_59:
// rs2_h1_val == 8, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x05fffc;  op2val:0x080003
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x05fffc, 0x080003, x5, 160, x9)

inst_60:
// rs1_h1_val == 256, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000800;  op2val:0x060100
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x1000800, 0x060100, x5, 164, x9)

inst_61:
// rs2_h1_val == 0, rs1_h1_val == 8
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf;  op2val:0x000020
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x08ffdf, 0x000020, x5, 168, x9)

inst_62:
// rs2_h0_val == 21845, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x02fff7;  op2val:0xfffd5555
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x02fff7, 0xfffd5555, x5, 172, x9)

inst_63:
// rs2_h0_val == -16385, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x06fff7;  op2val:0x800bfff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x06fff7, 0x800bfff, x5, 176, x9)

inst_64:
// rs2_h0_val == -33, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x800fffc;  op2val:0x200ffdf
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x800fffc, 0x200ffdf, x5, 180, x9)

inst_65:
// rs1_h0_val == -21846, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x10aaaa;  op2val:0x037fff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x10aaaa, 0x037fff, x5, 184, x9)

inst_66:
// rs2_h0_val == -257, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002;  op2val:0x3ffffeff
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xffbf0002, 0x3ffffeff, x5, 188, x9)

inst_67:
// rs1_h1_val == 4, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb;  op2val:0x080006
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x04fffb, 0x080006, x5, 192, x9)

inst_68:
// rs1_h0_val == -8193, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x200dfff;  op2val:0xfff70100
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x200dfff, 0xfff70100, x5, 196, x9)

inst_69:
// rs1_h1_val == rs2_h1_val, rs2_h0_val == 1024, rs2_h1_val == -8193, rs1_h1_val == -8193
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa;  op2val:0xdfff0400
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xdffffffa, 0xdfff0400, x5, 200, x9)

inst_70:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 8192, rs2_h0_val == 64, rs2_h1_val == -2
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000c000;  op2val:0xfffe0040
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x2000c000, 0xfffe0040, x5, 204, x9)

inst_71:
// rs2_h1_val == -4097, rs1_h0_val == 256, rs2_h0_val == 32, rs1_h1_val == 128
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x800100;  op2val:0xefff0020
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x800100, 0xefff0020, x5, 208, x9)

inst_72:
// rs2_h1_val == -65, rs1_h1_val == -3, rs2_h0_val == 2048
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000;  op2val:0xffbf0800
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0xfffd1000, 0xffbf0800, x5, 212, x9)

inst_73:
// rs2_h1_val == -3, rs1_h0_val == -257, rs1_h1_val == 0, rs2_h0_val == -9
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x00feff;  op2val:0xfffdfff7
TEST_RR_OP(smxds, x31, x30, x29, 0x00000000, 0x00feff, 0xfffdfff7, x5, 216, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 55*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
