
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabb instruction of the RISC-V RV32PZicsr extension for the kmabb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x15, rd==x11, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val != rs2_h0_val
// opcode: kmabb ; op1:x5; op2:x15; dest:x11; op1val:0xfff98000;  op2val:0xfffc0007
TEST_PKRR_OP(kmabb, x11, x5, x15, 0x00000000, 0xfff98000, 0xfffc0007, x5, x3, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x30, rs1_h1_val == rs2_h1_val, rs1_h1_val == -65, rs1_h0_val == -17, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -65, rs2_h0_val == -17
// opcode: kmabb ; op1:x7; op2:x7; dest:x30; op1val:0xffbfffef;  op2val:0xffbfffef
TEST_PKRR_OP(kmabb, x30, x7, x7, 0x00000000, 0xffbfffef, 0xffbfffef, x7, x3, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x26, rs2==x23, rd==x26, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 16384, rs2_h1_val == 1, rs2_h0_val == -4097, rs1_h1_val == -16385
// opcode: kmabb ; op1:x26; op2:x23; dest:x26; op1val:0xbfff4000;  op2val:0x01efff
TEST_PKRR_OP(kmabb, x26, x26, x23, 0x00000000, 0xbfff4000, 0x01efff, x26, x3, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -3
// opcode: kmabb ; op1:x16; op2:x16; dest:x16; op1val:0x3fff0006;  op2val:0xfffafffd
TEST_PKRR_OP(kmabb, x16, x16, x16, 0x00000000, 0x3fff0006, 0xfffafffd, x16, x3, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x17, rd==x17, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 64, rs1_h0_val == 8192, rs2_h1_val == 256
// opcode: kmabb ; op1:x19; op2:x17; dest:x17; op1val:0x402000;  op2val:0x100fffd
TEST_PKRR_OP(kmabb, x17, x19, x17, 0x00000000, 0x402000, 0x100fffd, x19, x3, 32, x9)

inst_5:
// rs1==x12, rs2==x6, rd==x1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 21845, rs1_h1_val == 21845
// opcode: kmabb ; op1:x12; op2:x6; dest:x1; op1val:0x55555555;  op2val:0xfffc0006
TEST_PKRR_OP(kmabb, x1, x12, x6, 0x00000000, 0x55555555, 0xfffc0006, x12, x3, 40, x9)

inst_6:
// rs1==x11, rs2==x12, rd==x4, rs2_h1_val == -21846, rs2_h0_val == 256, rs1_h0_val == -1
// opcode: kmabb ; op1:x11; op2:x12; dest:x4; op1val:0xbfffffff;  op2val:0xaaaa0100
TEST_PKRR_OP(kmabb, x4, x11, x12, 0x00000000, 0xbfffffff, 0xaaaa0100, x11, x3, 48, x9)

inst_7:
// rs1==x24, rs2==x8, rd==x22, rs2_h1_val == 21845, rs2_h0_val == -257, rs1_h1_val == -257, rs1_h0_val == 128
// opcode: kmabb ; op1:x24; op2:x8; dest:x22; op1val:0xfeff0080;  op2val:0x5555feff
TEST_PKRR_OP(kmabb, x22, x24, x8, 0x00000000, 0xfeff0080, 0x5555feff, x24, x3, 56, x9)

inst_8:
// rs1==x30, rs2==x11, rd==x24, rs2_h1_val == 32767, 
// opcode: kmabb ; op1:x30; op2:x11; dest:x24; op1val:0x03fff6;  op2val:0x7fff3fff
TEST_PKRR_OP(kmabb, x24, x30, x11, 0x00000000, 0x03fff6, 0x7fff3fff, x30, x3, 64, x9)

inst_9:
// rs1==x0, rs2==x19, rd==x29, rs2_h1_val == -16385, rs2_h0_val == -513
// opcode: kmabb ; op1:x0; op2:x19; dest:x29; op1val:0xfff9fff6;  op2val:0xbffffdff
TEST_PKRR_OP(kmabb, x29, x0, x19, 0x00000000, 0xfff9fff6, 0xbffffdff, x0, x3, 72, x9)

inst_10:
// rs1==x25, rs2==x4, rd==x12, rs2_h1_val == -8193, rs1_h1_val == -5
// opcode: kmabb ; op1:x25; op2:x4; dest:x12; op1val:0xfffbffff;  op2val:0xdfff3fff
TEST_PKRR_OP(kmabb, x12, x25, x4, 0x00000000, 0xfffbffff, 0xdfff3fff, x25, x3, 80, x9)

inst_11:
// rs1==x18, rs2==x26, rd==x13, rs2_h1_val == -4097, rs1_h1_val == -2
// opcode: kmabb ; op1:x18; op2:x26; dest:x13; op1val:0xfffe0006;  op2val:0xefffc000
TEST_PKRR_OP(kmabb, x13, x18, x26, 0x00000000, 0xfffe0006, 0xefffc000, x18, x3, 88, x9)

inst_12:
// rs1==x17, rs2==x10, rd==x5, rs2_h1_val == -2049, rs2_h0_val == -129
// opcode: kmabb ; op1:x17; op2:x10; dest:x5; op1val:0x5555fff9;  op2val:0xf7ffff7f
TEST_PKRR_OP(kmabb, x5, x17, x10, 0x00000000, 0x5555fff9, 0xf7ffff7f, x17, x3, 96, x9)

inst_13:
// rs1==x20, rs2==x27, rd==x8, rs2_h1_val == -1025, rs1_h0_val == 512, rs1_h1_val == 4, rs2_h0_val == 8
// opcode: kmabb ; op1:x20; op2:x27; dest:x8; op1val:0x040200;  op2val:0xfbff0008
TEST_PKRR_OP(kmabb, x8, x20, x27, 0x00000000, 0x040200, 0xfbff0008, x20, x3, 104, x9)

inst_14:
// rs1==x14, rs2==x2, rd==x19, rs2_h1_val == -513, rs1_h0_val == -5, rs2_h0_val == 1, rs1_h1_val == 8
// opcode: kmabb ; op1:x14; op2:x2; dest:x19; op1val:0x08fffb;  op2val:0xfdff0001
TEST_PKRR_OP(kmabb, x19, x14, x2, 0x00000000, 0x08fffb, 0xfdff0001, x14, x3, 112, x9)

inst_15:
// rs1==x21, rs2==x5, rd==x27, rs2_h1_val == -257, rs1_h0_val == -65, rs2_h0_val == 8192, rs1_h1_val == -32768
// opcode: kmabb ; op1:x21; op2:x5; dest:x27; op1val:0x8000ffbf;  op2val:0xfeff2000
TEST_PKRR_OP(kmabb, x27, x21, x5, 0x00000000, 0x8000ffbf, 0xfeff2000, x21, x3, 120, x11)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x2, rs2==x0, rd==x9, rs2_h1_val == -129, rs1_h1_val == 128
// opcode: kmabb ; op1:x2; op2:x0; dest:x9; op1val:0x808000;  op2val:0xff7fff7f
TEST_PKRR_OP(kmabb, x9, x2, x0, 0x00000000, 0x808000, 0xff7fff7f, x2, x5, 0, x11)

inst_17:
// rs1==x10, rs2==x3, rd==x28, rs2_h1_val == -33, rs2_h0_val == -5, rs1_h1_val == 16
// opcode: kmabb ; op1:x10; op2:x3; dest:x28; op1val:0x10fff9;  op2val:0xffdffffb
TEST_PKRR_OP(kmabb, x28, x10, x3, 0x00000000, 0x10fff9, 0xffdffffb, x10, x5, 8, x11)

inst_18:
// rs1==x1, rs2==x25, rd==x10, rs2_h1_val == -17, 
// opcode: kmabb ; op1:x1; op2:x25; dest:x10; op1val:0xfff94000;  op2val:0xffef0008
TEST_PKRR_OP(kmabb, x10, x1, x25, 0x00000000, 0xfff94000, 0xffef0008, x1, x5, 16, x11)

inst_19:
// rs1==x9, rs2==x21, rd==x31, rs2_h1_val == -9, rs2_h0_val == 16384
// opcode: kmabb ; op1:x9; op2:x21; dest:x31; op1val:0xfff68000;  op2val:0xfff74000
TEST_PKRR_OP(kmabb, x31, x9, x21, 0x00000000, 0xfff68000, 0xfff74000, x9, x5, 24, x11)

inst_20:
// rs1==x4, rs2==x14, rd==x2, rs2_h1_val == -5, rs1_h1_val == 2
// opcode: kmabb ; op1:x4; op2:x14; dest:x2; op1val:0x020200;  op2val:0xfffb0009
TEST_PKRR_OP(kmabb, x2, x4, x14, 0x00000000, 0x020200, 0xfffb0009, x4, x5, 32, x11)

inst_21:
// rs1==x13, rs2==x1, rd==x3, rs2_h1_val == -3, rs1_h1_val == -33
// opcode: kmabb ; op1:x13; op2:x1; dest:x3; op1val:0xffdffffc;  op2val:0xfffd0008
TEST_PKRR_OP(kmabb, x3, x13, x1, 0x00000000, 0xffdffffc, 0xfffd0008, x13, x5, 40, x11)

inst_22:
// rs1==x8, rs2==x24, rd==x0, rs2_h1_val == -2, rs1_h1_val == 32, rs2_h0_val == -16385
// opcode: kmabb ; op1:x8; op2:x24; dest:x0; op1val:0x200003;  op2val:0xfffebfff
TEST_PKRR_OP(kmabb, x0, x8, x24, 0x00000000, 0x200003, 0xfffebfff, x8, x5, 48, x11)

inst_23:
// rs1==x6, rs2==x29, rd==x14, rs2_h1_val == -32768, rs2_h0_val == -21846
// opcode: kmabb ; op1:x6; op2:x29; dest:x14; op1val:0xfffc0200;  op2val:0x8000aaaa
TEST_PKRR_OP(kmabb, x14, x6, x29, 0x00000000, 0xfffc0200, 0x8000aaaa, x6, x5, 56, x11)

inst_24:
// rs1==x31, rs2==x28, rd==x20, rs2_h1_val == 16384, rs1_h0_val == -129, rs2_h0_val == 2048
// opcode: kmabb ; op1:x31; op2:x28; dest:x20; op1val:0xfff6ff7f;  op2val:0x40000800
TEST_PKRR_OP(kmabb, x20, x31, x28, 0x00000000, 0xfff6ff7f, 0x40000800, x31, x5, 64, x11)

inst_25:
// rs1==x29, rs2==x9, rd==x15, rs2_h1_val == 8192, 
// opcode: kmabb ; op1:x29; op2:x9; dest:x15; op1val:0x09ffef;  op2val:0x20000003
TEST_PKRR_OP(kmabb, x15, x29, x9, 0x00000000, 0x09ffef, 0x20000003, x29, x5, 72, x11)

inst_26:
// rs1==x28, rs2==x31, rd==x25, rs2_h1_val == 4096, rs1_h1_val == 2048
// opcode: kmabb ; op1:x28; op2:x31; dest:x25; op1val:0x800fffa;  op2val:0x10000005
TEST_PKRR_OP(kmabb, x25, x28, x31, 0x00000000, 0x800fffa, 0x10000005, x28, x5, 80, x11)

inst_27:
// rs1==x15, rs2==x30, rd==x7, rs2_h1_val == 2048, rs2_h0_val == 64
// opcode: kmabb ; op1:x15; op2:x30; dest:x7; op1val:0xffdf3fff;  op2val:0x8000040
TEST_PKRR_OP(kmabb, x7, x15, x30, 0x00000000, 0xffdf3fff, 0x8000040, x15, x5, 88, x11)

inst_28:
// rs1==x27, rs2==x13, rd==x21, rs2_h1_val == 1024, rs1_h0_val == -2049
// opcode: kmabb ; op1:x27; op2:x13; dest:x21; op1val:0x40f7ff;  op2val:0x400fffa
TEST_PKRR_OP(kmabb, x21, x27, x13, 0x00000000, 0x40f7ff, 0x400fffa, x27, x5, 96, x11)

inst_29:
// rs1==x23, rs2==x20, rd==x6, rs2_h1_val == 512, rs1_h0_val == -16385, rs2_h0_val == -8193
// opcode: kmabb ; op1:x23; op2:x20; dest:x6; op1val:0x800bfff;  op2val:0x200dfff
TEST_PKRR_OP(kmabb, x6, x23, x20, 0x00000000, 0x800bfff, 0x200dfff, x23, x5, 104, x11)

inst_30:
// rs1==x3, rs2==x22, rd==x23, rs2_h1_val == 128, rs2_h0_val == -2
// opcode: kmabb ; op1:x3; op2:x22; dest:x23; op1val:0x800080;  op2val:0x80fffe
TEST_PKRR_OP(kmabb, x23, x3, x22, 0x00000000, 0x800080, 0x80fffe, x3, x5, 112, x11)

inst_31:
// rs1==x22, rs2_h1_val == 64, rs1_h0_val == 4096
// opcode: kmabb ; op1:x22; op2:x29; dest:x3; op1val:0x031000;  op2val:0x40fffc
TEST_PKRR_OP(kmabb, x3, x22, x29, 0x00000000, 0x031000, 0x40fffc, x22, x5, 120, x11)

inst_32:
// rs2==x18, rs2_h1_val == 32, 
// opcode: kmabb ; op1:x17; op2:x18; dest:x19; op1val:0x10c000;  op2val:0x20c000
TEST_PKRR_OP(kmabb, x19, x17, x18, 0x00000000, 0x10c000, 0x20c000, x17, x5, 128, x11)

inst_33:
// rd==x18, rs2_h1_val == 16, rs1_h0_val == 1, rs1_h1_val == 512
// opcode: kmabb ; op1:x8; op2:x30; dest:x18; op1val:0x2000001;  op2val:0x10fff9
TEST_PKRR_OP(kmabb, x18, x8, x30, 0x00000000, 0x2000001, 0x10fff9, x8, x5, 136, x1)

inst_34:
// rs2_h1_val == 8, rs1_h1_val == -1
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffff8000;  op2val:0x08fff8
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffff8000, 0x08fff8, x30, x5, 144, x1)

inst_35:
// rs1_h0_val == -1025, rs1_h1_val == -9
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff;  op2val:0xfff8c000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfff7fbff, 0xfff8c000, x30, x5, 152, x1)

inst_36:
// rs1_h0_val == -513, rs2_h0_val == 32767
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x07fdff;  op2val:0x057fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x07fdff, 0x057fff, x30, x5, 160, x1)

inst_37:
// rs1_h0_val == -257, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffeff;  op2val:0xfffd0006
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffbffeff, 0xfffd0006, x30, x5, 168, x1)

inst_38:
// rs1_h0_val == -33, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf;  op2val:0xffbfdfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x08ffdf, 0xffbfdfff, x30, x5, 176, x1)

inst_39:
// rs1_h0_val == -9, rs2_h0_val == 16
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80fff7;  op2val:0x080010
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x80fff7, 0x080010, x30, x5, 184, x1)

inst_40:
// rs1_h0_val == -3, rs1_h1_val == -129
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffd;  op2val:0x20000005
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xff7ffffd, 0x20000005, x30, x5, 192, x1)

inst_41:
// rs1_h0_val == -2, rs1_h1_val == -21846
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffe;  op2val:0xff7fdfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xaaaafffe, 0xff7fdfff, x30, x5, 200, x1)

inst_42:
// rs1_h0_val == 2048, rs2_h0_val == 4, rs1_h1_val == -3
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0x2000004
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfffd0800, 0x2000004, x30, x5, 208, x1)

inst_43:
// rs1_h0_val == 1024, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x55550400;  op2val:0x05bfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x55550400, 0x05bfff, x30, x5, 216, x1)

inst_44:
// rs1_h0_val == 256, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0100;  op2val:0xffdffff8
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xaaaa0100, 0xffdffff8, x30, x5, 224, x1)

inst_45:
// rs1_h0_val == 64, rs2_h1_val == 0
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0040;  op2val:0x000004
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffbf0040, 0x000004, x30, x5, 232, x1)

inst_46:
// rs1_h0_val == 32, rs1_h1_val == 8192
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x20000020;  op2val:0xfff7fff6
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x20000020, 0xfff7fff6, x30, x5, 240, x1)

inst_47:
// rs1_h0_val == 16, rs1_h1_val == -2049, rs2_h1_val == 4
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010;  op2val:0x040100
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xf7ff0010, 0x040100, x30, x5, 248, x1)

inst_48:
// rs1_h0_val == 8, rs1_h1_val == 4096
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x10000008;  op2val:0x01fff9
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x10000008, 0x01fff9, x30, x5, 256, x1)

inst_49:
// rs1_h0_val == 4, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0004;  op2val:0x400001
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfffe0004, 0x400001, x30, x5, 264, x1)

inst_50:
// rs1_h0_val == 2, rs2_h0_val == 21845, rs2_h1_val == 2
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0002;  op2val:0x025555
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffdf0002, 0x025555, x30, x5, 272, x1)

inst_51:
// rs1_h0_val == 0, rs1_h1_val == -4097
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000;  op2val:0xfff9fff9
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xefff0000, 0xfff9fff9, x30, x5, 280, x1)

inst_52:
// rs2_h0_val == -32768, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfc000;  op2val:0xfeff8000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffdfc000, 0xfeff8000, x30, x5, 288, x1)

inst_53:
// rs2_h0_val == 4096, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbff;  op2val:0x80001000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffbffbff, 0x80001000, x30, x5, 296, x1)

inst_54:
// rs2_h0_val == 1024, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf;  op2val:0x000400
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffdfffdf, 0x000400, x30, x5, 304, x1)

inst_55:
// rs2_h0_val == 512, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x06ffef;  op2val:0xfbff0200
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x06ffef, 0xfbff0200, x30, x5, 312, x1)

inst_56:
// rs2_h0_val == 128, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80000002;  op2val:0x20000080
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x80000002, 0x20000080, x30, x5, 320, x1)

inst_57:
// rs2_h0_val == 32, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x090006;  op2val:0xffef0020
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x090006, 0xffef0020, x30, x5, 328, x1)

inst_58:
// rs2_h0_val == 2, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80fff9;  op2val:0x55550002
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x80fff9, 0x55550002, x30, x5, 336, x1)

inst_59:
// rs2_h0_val == 0, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x100800;  op2val:0x2000000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x100800, 0x2000000, x30, x5, 344, x1)

inst_60:
// rs2_h0_val == -1, rs1_h1_val == 32767
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100;  op2val:0xaaaaffff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x7fff0100, 0xaaaaffff, x30, x5, 352, x1)

inst_61:
// rs2_h0_val == -2049, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x02bfff;  op2val:0x1000f7ff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x02bfff, 0x1000f7ff, x30, x5, 360, x1)

inst_62:
// rs1_h1_val == -8193, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0006;  op2val:0x5555fffb
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xdfff0006, 0x5555fffb, x30, x5, 368, x1)

inst_63:
// rs1_h1_val == -1025, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffdf;  op2val:0xfff80004
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfbffffdf, 0xfff80004, x30, x5, 376, x1)

inst_64:
// rs1_h1_val == -513, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080;  op2val:0xfeff4000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfdff0080, 0xfeff4000, x30, x5, 384, x1)

inst_65:
// rs1_h1_val == -17, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffa;  op2val:0xaaaac000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffeffffa, 0xaaaac000, x30, x5, 392, x1)

inst_66:
// rs1_h1_val == 16384, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd;  op2val:0x8000800
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x4000fffd, 0x8000800, x30, x5, 400, x1)

inst_67:
// rs1_h1_val == 1024, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x400fffd;  op2val:0x80ffff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x400fffd, 0x80ffff, x30, x5, 408, x1)

inst_68:
// rs1_h1_val == 256, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x1000400;  op2val:0x060006
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x1000400, 0x060006, x30, x5, 416, x1)

inst_69:
// rs2_h1_val == -1, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0100;  op2val:0xffff0005
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfffc0100, 0xffff0005, x30, x5, 424, x1)

inst_70:
// rs1_h0_val == -8193, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbdfff;  op2val:0x00fffd
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfffbdfff, 0x00fffd, x30, x5, 432, x1)

inst_71:
// rs1_h1_val == 1, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0xfffdff7f
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x010000, 0xfffdff7f, x30, x5, 440, x1)

inst_72:
// rs1_h1_val == 0, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0xbfff0010
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x000004, 0xbfff0010, x30, x5, 448, x1)

inst_73:
// rs2_h0_val == -1025, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200ffbf;  op2val:0x06fbff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x200ffbf, 0x06fbff, x30, x5, 456, x1)

inst_74:
// rs1_h0_val == -21846, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaa;  op2val:0x010002
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x00aaaa, 0x010002, x30, x5, 464, x1)

inst_75:
// rs1_h0_val == 32767, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7fff;  op2val:0xfffbdfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x3fff7fff, 0xfffbdfff, x30, x5, 472, x1)

inst_76:
// rs2_h0_val == -65, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x080008;  op2val:0xffffffbf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x080008, 0xffffffbf, x30, x5, 480, x1)

inst_77:
// rs2_h0_val == -33, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff80040;  op2val:0x01ffdf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfff80040, 0x01ffdf, x30, x5, 488, x1)

inst_78:
// rs1_h0_val == -4097, rs2_h0_val == -9
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9efff;  op2val:0x8000fff7
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfff9efff, 0x8000fff7, x30, x5, 496, x1)

inst_79:
// rs1_h1_val == rs2_h1_val, rs1_h1_val == -65, rs1_h0_val == -17, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -65, rs2_h0_val == -17
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef;  op2val:0xffbfffef
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xffbfffef, 0xffbfffef, x30, x5, 504, x1)

inst_80:
// rs2_h1_val == -16385, rs2_h0_val == -513
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff6;  op2val:0xbffffdff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0xfff9fff6, 0xbffffdff, x30, x5, 512, x1)

inst_81:
// rs2_h1_val == -2, rs1_h1_val == 32, rs2_h0_val == -16385
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200003;  op2val:0xfffebfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x00000000, 0x200003, 0xfffebfff, x30, x5, 520, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
