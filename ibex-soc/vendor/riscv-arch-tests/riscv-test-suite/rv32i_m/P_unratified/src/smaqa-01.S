
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaqa instruction of the RISC-V RV32PZicsr extension for the smaqa covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaqa)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x10, rd==x1, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b1_val == 2, rs2_b3_val == -128, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs2_b1_val == -5, rs2_b0_val == -1, rs1_b3_val == 85, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 32, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs2_b2_val == -5, rs1_b0_val < 0 and rs2_b0_val < 0
// opcode: smaqa ; op1:x6; op2:x10; dest:x1; op1val:0x55200280;  op2val:0x80fbfbff
TEST_RR_OP(smaqa, x1, x6, x10, 0x00000000, 0x55200280, 0x80fbfbff, x5, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x30, rs1_b3_val == rs2_b3_val, rs2_b2_val == -1, rs2_b1_val == -86, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b2_val == -1, rs1_b0_val == 2, rs1_b0_val > 0 and rs2_b0_val < 0
// opcode: smaqa ; op1:x3; op2:x3; dest:x30; op1val:0xf6ff0502;  op2val:0xf6ffaaff
TEST_RR_OP(smaqa, x30, x3, x3, 0x00000000, 0xf6ff0502, 0xf6ffaaff, x5, 4, x7)

inst_2:
// rs1 == rd != rs2, rs1==x22, rs2==x28, rd==x22, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 32, rs1_b3_val == -1, rs1_b2_val == 85
// opcode: smaqa ; op1:x22; op2:x28; dest:x22; op1val:0xff550207;  op2val:0x3203fff
TEST_RR_OP(smaqa, x22, x22, x28, 0x00000000, 0xff550207, 0x3203fff, x5, 8, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 85
// opcode: smaqa ; op1:x17; op2:x17; dest:x17; op1val:0x3f075509;  op2val:0x3f070306
TEST_RR_OP(smaqa, x17, x17, x17, 0x00000000, 0x3f075509, 0x3f070306, x5, 12, x7)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x14, rd==x14, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b3_val == -3, rs2_b1_val == 127, rs2_b0_val == 4, rs1_b0_val == -5, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -5, rs2_b2_val == 1
// opcode: smaqa ; op1:x27; op2:x14; dest:x14; op1val:0x3fcfbfb;  op2val:0xfd017f04
TEST_RR_OP(smaqa, x14, x27, x14, 0x00000000, 0x3fcfbfb, 0xfd017f04, x5, 16, x7)

inst_5:
// rs1==x11, rs2==x21, rd==x18, rs1_b1_val == rs2_b1_val, rs2_b0_val == 64, rs2_b3_val == 4, rs2_b1_val == -128, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val == 8, rs2_b2_val == 16, rs1_b1_val == -128
// opcode: smaqa ; op1:x11; op2:x21; dest:x18; op1val:0xfc038008;  op2val:0x4108040
TEST_RR_OP(smaqa, x18, x11, x21, 0x00000000, 0xfc038008, 0x4108040, x5, 20, x7)

inst_6:
// rs1==x18, rs2==x1, rd==x12, rs1_b0_val == rs2_b0_val, rs2_b0_val == 16, rs2_b1_val == -33, rs1_b3_val == -65, rs1_b0_val == 16, rs2_b3_val == 127
// opcode: smaqa ; op1:x18; op2:x1; dest:x12; op1val:0xbfc0f910;  op2val:0x7f20df10
TEST_RR_OP(smaqa, x12, x18, x1, 0x00000000, 0xbfc0f910, 0x7f20df10, x5, 24, x7)

inst_7:
// rs1==x23, rs2==x22, rd==x24, rs2_b3_val == -86, rs1_b0_val == 32, rs2_b1_val == 1, rs1_b1_val == 16
// opcode: smaqa ; op1:x23; op2:x22; dest:x24; op1val:0xff051020;  op2val:0xaa0701f8
TEST_RR_OP(smaqa, x24, x23, x22, 0x00000000, 0xff051020, 0xaa0701f8, x5, 28, x7)

inst_8:
// rs1==x28, rs2==x31, rd==x26, rs2_b3_val == 85, rs1_b2_val == -33, rs2_b2_val == -17
// opcode: smaqa ; op1:x28; op2:x31; dest:x26; op1val:0x7dffcfc;  op2val:0x55efdf05
TEST_RR_OP(smaqa, x26, x28, x31, 0x00000000, 0x7dffcfc, 0x55efdf05, x5, 32, x7)

inst_9:
// rs1==x8, rs2==x16, rd==x29, rs2_b3_val == -65, rs1_b2_val == -65, rs1_b1_val == -33, rs1_b3_val == 16, rs2_b2_val == 64, rs2_b0_val == -9
// opcode: smaqa ; op1:x8; op2:x16; dest:x29; op1val:0x10bfdf02;  op2val:0xbf40dff7
TEST_RR_OP(smaqa, x29, x8, x16, 0x00000000, 0x10bfdf02, 0xbf40dff7, x5, 36, x7)

inst_10:
// rs1==x4, rs2==x12, rd==x0, rs2_b3_val == -33, rs2_b0_val == -65, rs2_b1_val == -3, rs1_b0_val == 127
// opcode: smaqa ; op1:x4; op2:x12; dest:x0; op1val:0x3fcdf7f;  op2val:0xdf10fdbf
TEST_RR_OP(smaqa, x0, x4, x12, 0x00000000, 0x3fcdf7f, 0xdf10fdbf, x5, 40, x7)

inst_11:
// rs1==x31, rs2==x25, rd==x4, rs2_b3_val == -17, rs1_b0_val == 85, rs1_b1_val == -17
// opcode: smaqa ; op1:x31; op2:x25; dest:x4; op1val:0x605ef55;  op2val:0xef01aa04
TEST_RR_OP(smaqa, x4, x31, x25, 0x00000000, 0x605ef55, 0xef01aa04, x5, 44, x7)

inst_12:
// rs1==x30, rs2==x18, rd==x11, rs2_b3_val == -9, rs2_b2_val == -65, rs1_b1_val == 1, rs1_b2_val == 2
// opcode: smaqa ; op1:x30; op2:x18; dest:x11; op1val:0xfa020105;  op2val:0xf7bff9bf
TEST_RR_OP(smaqa, x11, x30, x18, 0x00000000, 0xfa020105, 0xf7bff9bf, x5, 48, x7)

inst_13:
// rs1==x2, rs2==x19, rd==x25, rs2_b3_val == -5, rs1_b3_val == 32, rs1_b1_val == 32
// opcode: smaqa ; op1:x2; op2:x19; dest:x25; op1val:0x20fa20f9;  op2val:0xfbf80310
TEST_RR_OP(smaqa, x25, x2, x19, 0x00000000, 0x20fa20f9, 0xfbf80310, x5, 52, x7)

inst_14:
// rs1==x0, rs2==x9, rd==x13, rs2_b3_val == -2, rs2_b1_val == -1, rs1_b0_val == 0, rs2_b0_val == 85
// opcode: smaqa ; op1:x0; op2:x9; dest:x13; op1val:0xfc3f0600;  op2val:0xfe09ff55
TEST_RR_OP(smaqa, x13, x0, x9, 0x00000000, 0xfc3f0600, 0xfe09ff55, x5, 56, x7)
RVTEST_SIGBASE(x17,signature_x17_0)

inst_15:
// rs1==x5, rs2==x20, rd==x2, rs2_b3_val == 64, rs1_b3_val == 8, rs1_b2_val == -86, rs2_b1_val == -17, rs2_b2_val == 0
// opcode: smaqa ; op1:x5; op2:x20; dest:x2; op1val:0x8aaf83f;  op2val:0x4000effc
TEST_RR_OP(smaqa, x2, x5, x20, 0x00000000, 0x8aaf83f, 0x4000effc, x17, 0, x1)

inst_16:
// rs1==x20, rs2==x0, rd==x7, rs2_b3_val == 32, rs1_b1_val == 127, rs2_b1_val == 32, rs1_b2_val == -2
// opcode: smaqa ; op1:x20; op2:x0; dest:x7; op1val:0x6fe7f80;  op2val:0x20f820ff
TEST_RR_OP(smaqa, x7, x20, x0, 0x00000000, 0x6fe7f80, 0x20f820ff, x17, 4, x1)

inst_17:
// rs1==x25, rs2==x7, rd==x6, rs2_b3_val == 16, rs2_b0_val == 1
// opcode: smaqa ; op1:x25; op2:x7; dest:x6; op1val:0x1007ef07;  op2val:0x10fffd01
TEST_RR_OP(smaqa, x6, x25, x7, 0x00000000, 0x1007ef07, 0x10fffd01, x17, 8, x1)

inst_18:
// rs1==x12, rs2==x2, rd==x10, rs2_b3_val == 8, rs2_b1_val == 4, rs1_b2_val == 16, rs2_b2_val == 4, rs1_b0_val == -3
// opcode: smaqa ; op1:x12; op2:x2; dest:x10; op1val:0xc01002fd;  op2val:0x8040406
TEST_RR_OP(smaqa, x10, x12, x2, 0x00000000, 0xc01002fd, 0x8040406, x17, 12, x1)

inst_19:
// rs1==x9, rs2==x27, rd==x28, rs2_b3_val == 2, rs2_b0_val == 32, rs1_b2_val == -17, rs1_b1_val == -1, rs2_b1_val == -9
// opcode: smaqa ; op1:x9; op2:x27; dest:x28; op1val:0xc0efff7f;  op2val:0x2f6f720
TEST_RR_OP(smaqa, x28, x9, x27, 0x00000000, 0xc0efff7f, 0x2f6f720, x17, 16, x1)

inst_20:
// rs1==x7, rs2==x11, rd==x27, rs2_b3_val == 1, rs1_b3_val == -128, rs2_b2_val == -9, rs1_b2_val == 1
// opcode: smaqa ; op1:x7; op2:x11; dest:x27; op1val:0x800101fd;  op2val:0x1f70303
TEST_RR_OP(smaqa, x27, x7, x11, 0x00000000, 0x800101fd, 0x1f70303, x17, 20, x1)

inst_21:
// rs1==x13, rs2==x29, rd==x21, rs2_b3_val == 0, rs1_b3_val == -5, rs1_b2_val == -3, rs2_b1_val == 16, rs1_b1_val == 4
// opcode: smaqa ; op1:x13; op2:x29; dest:x21; op1val:0xfbfd04fd;  op2val:0xbf1020
TEST_RR_OP(smaqa, x21, x13, x29, 0x00000000, 0xfbfd04fd, 0xbf1020, x17, 24, x1)

inst_22:
// rs1==x29, rs2==x24, rd==x15, rs2_b3_val == -1, rs2_b1_val == 0
// opcode: smaqa ; op1:x29; op2:x24; dest:x15; op1val:0xffc004f9;  op2val:0xfff800f7
TEST_RR_OP(smaqa, x15, x29, x24, 0x00000000, 0xffc004f9, 0xfff800f7, x17, 28, x1)

inst_23:
// rs1==x10, rs2==x15, rd==x16, rs2_b2_val == -86, 
// opcode: smaqa ; op1:x10; op2:x15; dest:x16; op1val:0xbfbf3f7f;  op2val:0x7aaaa03
TEST_RR_OP(smaqa, x16, x10, x15, 0x00000000, 0xbfbf3f7f, 0x7aaaa03, x17, 32, x1)

inst_24:
// rs1==x14, rs2==x30, rd==x5, rs1_b2_val == -9, rs1_b1_val == -2, rs2_b2_val == 8, rs1_b0_val == -1
// opcode: smaqa ; op1:x14; op2:x30; dest:x5; op1val:0x6f7feff;  op2val:0x30800bf
TEST_RR_OP(smaqa, x5, x14, x30, 0x00000000, 0x6f7feff, 0x30800bf, x17, 36, x1)

inst_25:
// rs1==x26, rs2==x4, rd==x9, rs1_b2_val == -5, rs1_b0_val == 64, rs2_b2_val == 2, rs2_b0_val == -2, rs1_b1_val == 8
// opcode: smaqa ; op1:x26; op2:x4; dest:x9; op1val:0x9fb0840;  op2val:0xfa02effe
TEST_RR_OP(smaqa, x9, x26, x4, 0x00000000, 0x9fb0840, 0xfa02effe, x17, 40, x1)

inst_26:
// rs1==x15, rs2==x23, rd==x19, rs1_b2_val == -128, rs1_b0_val == -17, rs2_b1_val == 64
// opcode: smaqa ; op1:x15; op2:x23; dest:x19; op1val:0xf68080ef;  op2val:0xf6fa403f
TEST_RR_OP(smaqa, x19, x15, x23, 0x00000000, 0xf68080ef, 0xf6fa403f, x17, 44, x1)

inst_27:
// rs1==x21, rs2==x8, rd==x3, rs1_b2_val == 64, rs1_b3_val == -86
// opcode: smaqa ; op1:x21; op2:x8; dest:x3; op1val:0xaa40fefb;  op2val:0xdf08fbf8
TEST_RR_OP(smaqa, x3, x21, x8, 0x00000000, 0xaa40fefb, 0xdf08fbf8, x17, 48, x1)

inst_28:
// rs1==x16, rs2==x5, rd==x20, rs1_b2_val == 8, rs2_b1_val == 85
// opcode: smaqa ; op1:x16; op2:x5; dest:x20; op1val:0xfc080280;  op2val:0xf90255fa
TEST_RR_OP(smaqa, x20, x16, x5, 0x00000000, 0xfc080280, 0xf90255fa, x17, 52, x2)

inst_29:
// rs1==x1, rs2==x13, rd==x23, rs1_b2_val == 4, rs2_b0_val == 8, rs1_b1_val == 0, rs2_b2_val == -2
// opcode: smaqa ; op1:x1; op2:x13; dest:x23; op1val:0xf6040040;  op2val:0x4fe0108
TEST_RR_OP(smaqa, x23, x1, x13, 0x00000000, 0xf6040040, 0x4fe0108, x17, 56, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x24, rs2==x26, rd==x31, rs1_b2_val == 0, 
// opcode: smaqa ; op1:x24; op2:x26; dest:x31; op1val:0xff000502;  op2val:0x7fbf7fa
TEST_RR_OP(smaqa, x31, x24, x26, 0x00000000, 0xff000502, 0x7fbf7fa, x1, 0, x2)

inst_31:
// rs1==x19, rs2==x6, rd==x8, rs1_b1_val == -86, 
// opcode: smaqa ; op1:x19; op2:x6; dest:x8; op1val:0x3dfaa00;  op2val:0xfcbffbfa
TEST_RR_OP(smaqa, x8, x19, x6, 0x00000000, 0x3dfaa00, 0xfcbffbfa, x1, 4, x2)

inst_32:
// rs1_b1_val == -65, rs2_b0_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x5503bfef;  op2val:0xfcfe07df
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x5503bfef, 0xfcfe07df, x1, 8, x2)

inst_33:
// rs1_b1_val == -9, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfb07f709;  op2val:0x91004f8
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfb07f709, 0x91004f8, x1, 12, x2)

inst_34:
// rs1_b1_val == -3, rs2_b1_val == 2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfafefdfd;  op2val:0x3f0202ff
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfafefdfd, 0x3f0202ff, x1, 16, x2)

inst_35:
// rs1_b1_val == 64, rs1_b0_val == 1
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x80074001;  op2val:0x3f083f05
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x80074001, 0x3f083f05, x1, 20, x2)

inst_36:
// rs1_b0_val == -86, rs1_b3_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdf0420aa;  op2val:0xdf08f8ff
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xdf0420aa, 0xdf08f8ff, x1, 24, x2)

inst_37:
// rs1_b0_val == -65, rs1_b3_val == 4
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x4fc07bf;  op2val:0x2005f805
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x4fc07bf, 0x2005f805, x1, 28, x2)

inst_38:
// rs2_b1_val == -65, rs1_b0_val == -9
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x80109f7;  op2val:0xbf02bfdf
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x80109f7, 0xbf02bfdf, x1, 32, x2)

inst_39:
// rs2_b1_val == -2, rs1_b0_val == -2, rs2_b0_val == 127
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf8c0fefe;  op2val:0x6fafe7f
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xf8c0fefe, 0x6fafe7f, x1, 36, x2)

inst_40:
// rs2_b1_val == 8, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfa20053f;  op2val:0xfff90807
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfa20053f, 0xfff90807, x1, 40, x2)

inst_41:
// rs2_b0_val == -86, rs2_b2_val == -128
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xff1002fa;  op2val:0xfe8055aa
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xff1002fa, 0xfe8055aa, x1, 44, x2)

inst_42:
// rs2_b0_val == -17, rs1_b3_val == -9
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf780fcfe;  op2val:0x103fbef
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xf780fcfe, 0x103fbef, x1, 48, x2)

inst_43:
// rs2_b0_val == -5, rs1_b3_val == 2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2dffb20;  op2val:0xf9207ffb
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x2dffb20, 0xf9207ffb, x1, 52, x2)

inst_44:
// rs2_b0_val == -3, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8ffeff7;  op2val:0x905f8fd
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x8ffeff7, 0x905f8fd, x1, 56, x2)

inst_45:
// rs2_b0_val == -128, rs2_b2_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf7f9fac0;  op2val:0xf6df0980
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xf7f9fac0, 0xf6df0980, x1, 60, x2)

inst_46:
// rs2_b0_val == 2, rs2_b2_val == -3
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x206fc05;  op2val:0x7fdfa02
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x206fc05, 0x7fdfa02, x1, 64, x2)

inst_47:
// rs2_b0_val == 0, rs1_b3_val == -17
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xef5506ff;  op2val:0xaadff800
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xef5506ff, 0xaadff800, x1, 68, x2)

inst_48:
// rs1_b0_val == -33, rs1_b3_val == -3
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfd0807df;  op2val:0xf8040408
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfd0807df, 0xf8040408, x1, 72, x2)

inst_49:
// rs1_b3_val == 127, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x7f2002fc;  op2val:0xef06fc04
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x7f2002fc, 0xef06fc04, x1, 76, x2)

inst_50:
// rs2_b2_val == 85, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfac02007;  op2val:0xbf55aa01
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfac02007, 0xbf55aa01, x1, 80, x2)

inst_51:
// rs1_b3_val == -2, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfefbbffb;  op2val:0xfe000507
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfefbbffb, 0xfe000507, x1, 84, x2)

inst_52:
// rs1_b0_val == 4, rs1_b3_val == 64
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x40f6ff04;  op2val:0xfcc040ef
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x40f6ff04, 0xfcc040ef, x1, 88, x2)

inst_53:
// rs1_b3_val == 1, rs1_b2_val == 127
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x17f03df;  op2val:0xf901ffaa
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x17f03df, 0xf901ffaa, x1, 92, x2)

inst_54:
// rs1_b3_val == 0, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x043f02;  op2val:0xbffbfa10
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x043f02, 0xbffbfa10, x1, 96, x2)

inst_55:
// rs2_b2_val == 127, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x1fe01f9;  op2val:0x67f0307
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x1fe01f9, 0x67f0307, x1, 100, x2)

inst_56:
// rs1_b3_val == rs2_b3_val, rs2_b2_val == -1, rs2_b1_val == -86, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b2_val == -1, rs1_b0_val == 2, rs1_b0_val > 0 and rs2_b0_val < 0
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf6ff0502;  op2val:0xf6ffaaff
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xf6ff0502, 0xf6ffaaff, x1, 104, x2)

inst_57:
// rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 85
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x3f075509;  op2val:0x3f070306
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x3f075509, 0x3f070306, x1, 108, x2)

inst_58:
// rs2_b3_val == -2, rs2_b1_val == -1, rs1_b0_val == 0, rs2_b0_val == 85
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfc3f0600;  op2val:0xfe09ff55
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0xfc3f0600, 0xfe09ff55, x1, 112, x2)

inst_59:
// rs2_b3_val == 32, rs1_b1_val == 127, rs2_b1_val == 32, rs1_b2_val == -2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x6fe7f80;  op2val:0x20f820ff
TEST_RR_OP(smaqa, x31, x30, x29, 0x00000000, 0x6fe7f80, 0x20f820ff, x1, 116, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x17_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 30*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
