
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uradd16 instruction of the RISC-V RV32PZicsr extension for the uradd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uradd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x3, rd==x27, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 65519, rs2_h0_val == 2048, rs2_h1_val == 128
// opcode: uradd16 ; op1:x21; op2:x3; dest:x27; op1val:0xffef0000;  op2val:0x800800
TEST_RR_OP(uradd16, x27, x21, x3, 0x00000000, 0xffef0000, 0x800800, x12, 0, x1)

inst_1:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x23, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 128
// opcode: uradd16 ; op1:x24; op2:x24; dest:x23; op1val:0x800005;  op2val:0x800007
TEST_RR_OP(uradd16, x23, x24, x24, 0x00000000, 0x800005, 0x800007, x12, 4, x1)

inst_2:
// rs1 == rd != rs2, rs1==x28, rs2==x10, rd==x28, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 21845, rs2_h1_val == 256
// opcode: uradd16 ; op1:x28; op2:x10; dest:x28; op1val:0x55550007;  op2val:0x1000007
TEST_RR_OP(uradd16, x28, x28, x10, 0x00000000, 0x55550007, 0x1000007, x12, 8, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs2_h1_val == 43690, rs2_h0_val == 65023
// opcode: uradd16 ; op1:x18; op2:x18; dest:x18; op1val:0x130009;  op2val:0xaaaafdff
TEST_RR_OP(uradd16, x18, x18, x18, 0x00000000, 0x130009, 0xaaaafdff, x12, 12, x1)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x7, rd==x7, rs2_h1_val == 21845, rs1_h0_val == 65519, rs2_h0_val == 61439
// opcode: uradd16 ; op1:x25; op2:x7; dest:x7; op1val:0x03ffef;  op2val:0x5555efff
TEST_RR_OP(uradd16, x7, x25, x7, 0x00000000, 0x03ffef, 0x5555efff, x12, 16, x1)

inst_5:
// rs1==x30, rs2==x9, rd==x10, rs2_h1_val == 32767, rs1_h1_val == 32
// opcode: uradd16 ; op1:x30; op2:x9; dest:x10; op1val:0x200012;  op2val:0x7fff000a
TEST_RR_OP(uradd16, x10, x30, x9, 0x00000000, 0x200012, 0x7fff000a, x12, 20, x1)

inst_6:
// rs1==x9, rs2==x8, rd==x11, rs2_h1_val == 49151, 
// opcode: uradd16 ; op1:x9; op2:x8; dest:x11; op1val:0x0a0006;  op2val:0xbfff0003
TEST_RR_OP(uradd16, x11, x9, x8, 0x00000000, 0x0a0006, 0xbfff0003, x12, 24, x1)

inst_7:
// rs1==x0, rs2==x21, rd==x29, rs2_h1_val == 57343, rs1_h0_val == 65407, rs1_h1_val == 65407
// opcode: uradd16 ; op1:x0; op2:x21; dest:x29; op1val:0xff7fff7f;  op2val:0xdfff000e
TEST_RR_OP(uradd16, x29, x0, x21, 0x00000000, 0xff7fff7f, 0xdfff000e, x12, 28, x1)

inst_8:
// rs1==x17, rs2==x31, rd==x0, rs2_h1_val == 61439, rs2_h0_val == 512, rs1_h1_val == 64511, rs1_h0_val == 61439
// opcode: uradd16 ; op1:x17; op2:x31; dest:x0; op1val:0xfbffefff;  op2val:0xefff0200
TEST_RR_OP(uradd16, x0, x17, x31, 0x00000000, 0xfbffefff, 0xefff0200, x12, 32, x1)

inst_9:
// rs1==x20, rs2==x6, rd==x25, rs2_h1_val == 63487, rs2_h0_val == 256, rs1_h1_val == 1024
// opcode: uradd16 ; op1:x20; op2:x6; dest:x25; op1val:0x4000012;  op2val:0xf7ff0100
TEST_RR_OP(uradd16, x25, x20, x6, 0x00000000, 0x4000012, 0xf7ff0100, x12, 36, x1)

inst_10:
// rs1==x5, rs2==x30, rd==x2, rs2_h1_val == 64511, rs1_h1_val == 65531, rs2_h0_val == 32, rs1_h0_val == 16
// opcode: uradd16 ; op1:x5; op2:x30; dest:x2; op1val:0xfffb0010;  op2val:0xfbff0020
TEST_RR_OP(uradd16, x2, x5, x30, 0x00000000, 0xfffb0010, 0xfbff0020, x12, 40, x1)

inst_11:
// rs1==x26, rs2==x16, rd==x5, rs2_h1_val == 65023, rs1_h1_val == 49151, rs1_h0_val == 512, rs2_h0_val == 8192
// opcode: uradd16 ; op1:x26; op2:x16; dest:x5; op1val:0xbfff0200;  op2val:0xfdff2000
TEST_RR_OP(uradd16, x5, x26, x16, 0x00000000, 0xbfff0200, 0xfdff2000, x12, 44, x1)

inst_12:
// rs1==x7, rs2==x4, rd==x9, rs2_h1_val == 65279, rs1_h0_val == 64
// opcode: uradd16 ; op1:x7; op2:x4; dest:x9; op1val:0x120040;  op2val:0xfeff2000
TEST_RR_OP(uradd16, x9, x7, x4, 0x00000000, 0x120040, 0xfeff2000, x12, 48, x1)

inst_13:
// rs1==x2, rs2==x0, rd==x21, rs2_h1_val == 65407, rs1_h0_val == 65534, rs2_h0_val == 65407
// opcode: uradd16 ; op1:x2; op2:x0; dest:x21; op1val:0x0bfffe;  op2val:0xff7fff7f
TEST_RR_OP(uradd16, x21, x2, x0, 0x00000000, 0x0bfffe, 0xff7fff7f, x12, 52, x1)

inst_14:
// rs1==x4, rs2==x5, rd==x15, rs2_h1_val == 65471, rs2_h0_val == 2, rs1_h1_val == 256
// opcode: uradd16 ; op1:x4; op2:x5; dest:x15; op1val:0x100ffef;  op2val:0xffbf0002
TEST_RR_OP(uradd16, x15, x4, x5, 0x00000000, 0x100ffef, 0xffbf0002, x12, 56, x1)

inst_15:
// rs1==x8, rs2==x11, rd==x14, rs2_h1_val == 65503, rs1_h1_val == 57343, rs2_h0_val == 16
// opcode: uradd16 ; op1:x8; op2:x11; dest:x14; op1val:0xdfff0005;  op2val:0xffdf0010
TEST_RR_OP(uradd16, x14, x8, x11, 0x00000000, 0xdfff0005, 0xffdf0010, x12, 60, x1)

inst_16:
// rs1==x27, rs2==x13, rd==x1, rs2_h1_val == 65519, rs2_h0_val == 4
// opcode: uradd16 ; op1:x27; op2:x13; dest:x1; op1val:0xbfff0007;  op2val:0xffef0004
TEST_RR_OP(uradd16, x1, x27, x13, 0x00000000, 0xbfff0007, 0xffef0004, x12, 64, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x29, rs2==x20, rd==x31, rs2_h1_val == 65527, rs1_h0_val == 65531, rs1_h1_val == 512
// opcode: uradd16 ; op1:x29; op2:x20; dest:x31; op1val:0x200fffb;  op2val:0xfff70020
TEST_RR_OP(uradd16, x31, x29, x20, 0x00000000, 0x200fffb, 0xfff70020, x5, 0, x7)

inst_18:
// rs1==x22, rs2==x25, rd==x4, rs2_h1_val == 65531, 
// opcode: uradd16 ; op1:x22; op2:x25; dest:x4; op1val:0x0f000c;  op2val:0xfffb0003
TEST_RR_OP(uradd16, x4, x22, x25, 0x00000000, 0x0f000c, 0xfffb0003, x5, 4, x7)

inst_19:
// rs1==x3, rs2==x27, rd==x17, rs2_h1_val == 65533, rs1_h0_val == 256
// opcode: uradd16 ; op1:x3; op2:x27; dest:x17; op1val:0x0b0100;  op2val:0xfffd000e
TEST_RR_OP(uradd16, x17, x3, x27, 0x00000000, 0x0b0100, 0xfffd000e, x5, 8, x7)

inst_20:
// rs1==x16, rs2==x17, rd==x6, rs2_h1_val == 65534, rs2_h0_val == 65279
// opcode: uradd16 ; op1:x16; op2:x17; dest:x6; op1val:0x030011;  op2val:0xfffefeff
TEST_RR_OP(uradd16, x6, x16, x17, 0x00000000, 0x030011, 0xfffefeff, x5, 12, x7)

inst_21:
// rs1==x14, rs2==x28, rd==x8, rs2_h1_val == 32768, rs1_h1_val == 16, rs2_h0_val == 49151, rs1_h0_val == 1
// opcode: uradd16 ; op1:x14; op2:x28; dest:x8; op1val:0x100001;  op2val:0x8000bfff
TEST_RR_OP(uradd16, x8, x14, x28, 0x00000000, 0x100001, 0x8000bfff, x5, 16, x7)

inst_22:
// rs1==x12, rs2==x2, rd==x16, rs2_h1_val == 16384, 
// opcode: uradd16 ; op1:x12; op2:x2; dest:x16; op1val:0x05fffb;  op2val:0x4000000d
TEST_RR_OP(uradd16, x16, x12, x2, 0x00000000, 0x05fffb, 0x4000000d, x5, 20, x7)

inst_23:
// rs1==x13, rs2==x1, rd==x3, rs2_h1_val == 8192, rs1_h0_val == 64511, rs2_h0_val == 0
// opcode: uradd16 ; op1:x13; op2:x1; dest:x3; op1val:0x80fbff;  op2val:0x20000000
TEST_RR_OP(uradd16, x3, x13, x1, 0x00000000, 0x80fbff, 0x20000000, x5, 24, x7)

inst_24:
// rs1==x6, rs2==x12, rd==x19, rs2_h1_val == 4096, 
// opcode: uradd16 ; op1:x6; op2:x12; dest:x19; op1val:0xdfff000f;  op2val:0x10000012
TEST_RR_OP(uradd16, x19, x6, x12, 0x00000000, 0xdfff000f, 0x10000012, x5, 28, x7)

inst_25:
// rs1==x31, rs2==x15, rd==x12, rs2_h1_val == 2048, rs2_h0_val == 65531, rs1_h0_val == 57343
// opcode: uradd16 ; op1:x31; op2:x15; dest:x12; op1val:0xbfffdfff;  op2val:0x800fffb
TEST_RR_OP(uradd16, x12, x31, x15, 0x00000000, 0xbfffdfff, 0x800fffb, x5, 32, x7)

inst_26:
// rs1==x19, rs2==x29, rd==x22, rs2_h1_val == 1024, rs1_h1_val == 8
// opcode: uradd16 ; op1:x19; op2:x29; dest:x22; op1val:0x080000;  op2val:0x4000020
TEST_RR_OP(uradd16, x22, x19, x29, 0x00000000, 0x080000, 0x4000020, x5, 36, x7)

inst_27:
// rs1==x11, rs2==x19, rd==x30, rs2_h1_val == 512, rs1_h0_val == 2, rs2_h0_val == 65527
// opcode: uradd16 ; op1:x11; op2:x19; dest:x30; op1val:0x200002;  op2val:0x200fff7
TEST_RR_OP(uradd16, x30, x11, x19, 0x00000000, 0x200002, 0x200fff7, x5, 40, x7)

inst_28:
// rs1==x23, rs2==x14, rd==x26, rs2_h1_val == 64, rs1_h0_val == 4096
// opcode: uradd16 ; op1:x23; op2:x14; dest:x26; op1val:0xff7f1000;  op2val:0x400009
TEST_RR_OP(uradd16, x26, x23, x14, 0x00000000, 0xff7f1000, 0x400009, x5, 44, x7)

inst_29:
// rs1==x10, rs2==x23, rd==x24, rs2_h1_val == 32, rs2_h0_val == 43690
// opcode: uradd16 ; op1:x10; op2:x23; dest:x24; op1val:0x06000d;  op2val:0x20aaaa
TEST_RR_OP(uradd16, x24, x10, x23, 0x00000000, 0x06000d, 0x20aaaa, x5, 48, x7)

inst_30:
// rs1==x15, rs2==x22, rd==x13, rs2_h1_val == 16, rs1_h0_val == 32768
// opcode: uradd16 ; op1:x15; op2:x22; dest:x13; op1val:0x2008000;  op2val:0x100800
TEST_RR_OP(uradd16, x13, x15, x22, 0x00000000, 0x2008000, 0x100800, x5, 52, x2)

inst_31:
// rs1==x1, rs2==x26, rd==x20, rs2_h1_val == 8, rs2_h0_val == 32768, rs1_h0_val == 65471
// opcode: uradd16 ; op1:x1; op2:x26; dest:x20; op1val:0x03ffbf;  op2val:0x088000
TEST_RR_OP(uradd16, x20, x1, x26, 0x00000000, 0x03ffbf, 0x088000, x5, 56, x2)

inst_32:
// rs2_h1_val == 4, rs1_h0_val == 43690, rs2_h0_val == 65534, rs1_h1_val == 65534
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeaaaa;  op2val:0x04fffe
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfffeaaaa, 0x04fffe, x5, 60, x2)

inst_33:
// rs1_h0_val == 65533, rs2_h0_val == 16384
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffd;  op2val:0x044000
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x06fffd, 0x044000, x5, 64, x2)

inst_34:
// rs1_h0_val == 16384, rs1_h1_val == 2048, rs2_h0_val == 65519
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8004000;  op2val:0x08ffef
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x8004000, 0x08ffef, x5, 68, x2)

inst_35:
// rs1_h0_val == 8192, rs2_h0_val == 8
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000;  op2val:0x080008
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfbff2000, 0x080008, x5, 72, x2)

inst_36:
// rs1_h0_val == 2048, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x060800;  op2val:0xaaaa2000
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x060800, 0xaaaa2000, x5, 76, x2)

inst_37:
// rs1_h0_val == 1024, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x080400;  op2val:0x0ffff7
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x080400, 0x0ffff7, x5, 80, x2)

inst_38:
// rs1_h0_val == 128, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000080;  op2val:0x090020
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x1000080, 0x090020, x5, 84, x2)

inst_39:
// rs1_h0_val == 32, rs2_h1_val == 65535
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000020;  op2val:0xfffffeff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x1000020, 0xfffffeff, x5, 88, x2)

inst_40:
// rs1_h0_val == 8, rs1_h1_val == 16384
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000008;  op2val:0x2000aaaa
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x40000008, 0x2000aaaa, x5, 92, x2)

inst_41:
// rs1_h0_val == 4, rs1_h1_val == 63487
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004;  op2val:0xfeff000d
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xf7ff0004, 0xfeff000d, x5, 96, x2)

inst_42:
// rs1_h0_val == 65535, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cffff;  op2val:0x100007
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x0cffff, 0x100007, x5, 100, x2)

inst_43:
// rs2_h1_val == 2, rs2_h0_val == 64511
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000c;  op2val:0x02fbff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x13000c, 0x02fbff, x5, 104, x2)

inst_44:
// rs2_h1_val == 1, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000013;  op2val:0x010013
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x40000013, 0x010013, x5, 108, x2)

inst_45:
// rs2_h1_val == 0, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40008000;  op2val:0x00fdff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x40008000, 0x00fdff, x5, 112, x2)

inst_46:
// rs2_h0_val == 21845, rs1_h1_val == 65023
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000f;  op2val:0x085555
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfdff000f, 0x085555, x5, 116, x2)

inst_47:
// rs2_h0_val == 32767, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000a;  op2val:0x80007fff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x13000a, 0x80007fff, x5, 120, x2)

inst_48:
// rs2_h0_val == 57343, rs1_h1_val == 65503
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0x4000dfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xffdf4000, 0x4000dfff, x5, 124, x2)

inst_49:
// rs2_h0_val == 63487, rs1_h1_val == 1
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x010002;  op2val:0x04f7ff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x010002, 0x04f7ff, x5, 128, x2)

inst_50:
// rs2_h0_val == 65471, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001;  op2val:0x0cffbf
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x8000001, 0x0cffbf, x5, 132, x2)

inst_51:
// rs2_h0_val == 1024, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0012;  op2val:0x0c0400
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfbff0012, 0x0c0400, x5, 136, x2)

inst_52:
// rs2_h0_val == 128, rs1_h0_val == 32767
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff;  op2val:0x2000080
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xdfff7fff, 0x2000080, x5, 140, x2)

inst_53:
// rs2_h0_val == 64, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x07dfff;  op2val:0xefff0040
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x07dfff, 0xefff0040, x5, 144, x2)

inst_54:
// rs2_h0_val == 1, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550100;  op2val:0xdfff0001
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x55550100, 0xdfff0001, x5, 148, x2)

inst_55:
// rs2_h0_val == 65535, rs1_h1_val == 65279, rs1_h0_val == 65527
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7;  op2val:0xfeffffff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfefffff7, 0xfeffffff, x5, 152, x2)

inst_56:
// rs1_h1_val == 43690, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040;  op2val:0x00000e
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xaaaa0040, 0x00000e, x5, 156, x2)

inst_57:
// rs1_h1_val == 32767, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000f;  op2val:0xffefdfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x7fff000f, 0xffefdfff, x5, 160, x2)

inst_58:
// rs1_h1_val == 61439, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0400;  op2val:0x8000fdff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xefff0400, 0x8000fdff, x5, 164, x2)

inst_59:
// rs1_h1_val == 65471, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf1000;  op2val:0x200012
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xffbf1000, 0x200012, x5, 168, x2)

inst_60:
// rs1_h1_val == 65527, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000c;  op2val:0x204000
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfff7000c, 0x204000, x5, 172, x2)

inst_61:
// rs1_h1_val == 65533, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000e;  op2val:0x7fff0004
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfffd000e, 0x7fff0004, x5, 176, x2)

inst_62:
// rs1_h1_val == 32768, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000005;  op2val:0x02ffff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x80000005, 0x02ffff, x5, 180, x2)

inst_63:
// rs1_h1_val == 8192, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000800;  op2val:0x040000
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x20000800, 0x040000, x5, 184, x2)

inst_64:
// rs1_h1_val == 4096, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000;  op2val:0x40dfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x10008000, 0x40dfff, x5, 188, x2)

inst_65:
// rs1_h1_val == 64, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400800;  op2val:0x5555000e
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x400800, 0x5555000e, x5, 192, x2)

inst_66:
// rs1_h1_val == 4, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040012;  op2val:0x0b000e
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x040012, 0x0b000e, x5, 196, x2)

inst_67:
// rs1_h1_val == 2, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x020013;  op2val:0xfff70001
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x020013, 0xfff70001, x5, 200, x2)

inst_68:
// rs1_h1_val == 65535, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0020;  op2val:0xf7ff000e
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xffff0020, 0xf7ff000e, x5, 204, x2)

inst_69:
// rs1_h1_val == 0, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x000000;  op2val:0x04fffb
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x000000, 0x04fffb, x5, 208, x2)

inst_70:
// rs1_h0_val == 21845, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef5555;  op2val:0x020200
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xffef5555, 0x020200, x5, 212, x2)

inst_71:
// rs1_h0_val == 49151, rs2_h0_val == 65503
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bfff;  op2val:0xfeffffdf
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x00bfff, 0xfeffffdf, x5, 216, x2)

inst_72:
// rs1_h0_val == 63487, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400f7ff;  op2val:0x80000011
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x400f7ff, 0x80000011, x5, 220, x2)

inst_73:
// rs1_h0_val == 65023, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffdff;  op2val:0xfffefff7
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x0ffdff, 0xfffefff7, x5, 224, x2)

inst_74:
// rs2_h0_val == 65533, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x5555fffd
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x5555fffd, x5, 228, x2)

inst_75:
// rs1_h0_val == 65279, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x07feff;  op2val:0x100400
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x07feff, 0x100400, x5, 232, x2)

inst_76:
// rs1_h0_val == 65503, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cffdf;  op2val:0xfdffdfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x0cffdf, 0xfdffdfff, x5, 236, x2)

inst_77:
// rs2_h0_val == 4096, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf;  op2val:0xffff1000
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x07ffdf, 0xffff1000, x5, 240, x2)

inst_78:
// rs2_h1_val == 57343, rs1_h0_val == 65407, rs1_h1_val == 65407
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f;  op2val:0xdfff000e
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xff7fff7f, 0xdfff000e, x5, 244, x2)

inst_79:
// rs2_h1_val == 61439, rs2_h0_val == 512, rs1_h1_val == 64511, rs1_h0_val == 61439
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff;  op2val:0xefff0200
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0xfbffefff, 0xefff0200, x5, 248, x2)

inst_80:
// rs2_h1_val == 65407, rs1_h0_val == 65534, rs2_h0_val == 65407
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0bfffe;  op2val:0xff7fff7f
TEST_RR_OP(uradd16, x31, x30, x29, 0x00000000, 0x0bfffe, 0xff7fff7f, x5, 252, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
