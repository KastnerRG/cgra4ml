
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmbb instruction of the RISC-V RV32PZicsr extension for the khmbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x12, rd==x4, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs2_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 128, rs2_h0_val == -1
// opcode: khmbb ; op1:x28; op2:x12; dest:x4; op1val:0x808000;  op2val:0x100ffff
TEST_PKRR_OP(khmbb, x4, x28, x12, 0x00000000, 0x808000, 0x100ffff, x28, x5, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x11, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h0_val == -65
// opcode: khmbb ; op1:x17; op2:x17; dest:x11; op1val:0x09ffbf;  op2val:0x095555
TEST_PKRR_OP(khmbb, x11, x17, x17, 0x00000000, 0x09ffbf, 0x095555, x17, x5, 8, x7)

inst_2:
// rs1 == rd != rs2, rs1==x27, rs2==x30, rd==x27, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 4096, rs1_h1_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1, rs1_h0_val == 21845
// opcode: khmbb ; op1:x27; op2:x30; dest:x27; op1val:0x80005555;  op2val:0x011000
TEST_PKRR_OP(khmbb, x27, x27, x30, 0x00000000, 0x80005555, 0x011000, x27, x5, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs2_h1_val == -129
// opcode: khmbb ; op1:x18; op2:x18; dest:x18; op1val:0xfffc2000;  op2val:0xff7f0009
TEST_PKRR_OP(khmbb, x18, x18, x18, 0x00000000, 0xfffc2000, 0xff7f0009, x18, x5, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x26, rd==x26, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 1024, rs1_h0_val == 4096, rs2_h0_val == -2049
// opcode: khmbb ; op1:x2; op2:x26; dest:x26; op1val:0x4001000;  op2val:0xfff6f7ff
TEST_PKRR_OP(khmbb, x26, x2, x26, 0x00000000, 0x4001000, 0xfff6f7ff, x2, x5, 32, x7)

inst_5:
// rs1==x10, rs2==x11, rd==x23, rs1_h0_val == rs2_h0_val, rs2_h1_val == 4096, rs2_h0_val == -33, rs1_h0_val == -33, rs1_h1_val == -129
// opcode: khmbb ; op1:x10; op2:x11; dest:x23; op1val:0xff7fffdf;  op2val:0x1000ffdf
TEST_PKRR_OP(khmbb, x23, x10, x11, 0x00000000, 0xff7fffdf, 0x1000ffdf, x10, x5, 40, x7)

inst_6:
// rs1==x9, rs2==x16, rd==x29, rs2_h1_val == -21846, rs1_h1_val == 8192, rs1_h0_val == 128
// opcode: khmbb ; op1:x9; op2:x16; dest:x29; op1val:0x20000080;  op2val:0xaaaafffa
TEST_PKRR_OP(khmbb, x29, x9, x16, 0x00000000, 0x20000080, 0xaaaafffa, x9, x5, 48, x7)

inst_7:
// rs1==x6, rs2==x31, rd==x15, rs2_h1_val == 21845, rs1_h1_val == 4096, rs1_h0_val == -2049
// opcode: khmbb ; op1:x6; op2:x31; dest:x15; op1val:0x1000f7ff;  op2val:0x55550009
TEST_PKRR_OP(khmbb, x15, x6, x31, 0x00000000, 0x1000f7ff, 0x55550009, x6, x5, 56, x7)

inst_8:
// rs1==x24, rs2==x1, rd==x2, rs2_h1_val == 32767, rs1_h1_val == -16385, rs1_h0_val == -16385
// opcode: khmbb ; op1:x24; op2:x1; dest:x2; op1val:0xbfffbfff;  op2val:0x7ffffff9
TEST_PKRR_OP(khmbb, x2, x24, x1, 0x00000000, 0xbfffbfff, 0x7ffffff9, x24, x5, 64, x7)

inst_9:
// rs1==x3, rs2==x19, rd==x0, rs2_h1_val == -16385, rs1_h1_val == -65, rs1_h0_val == 512, rs2_h0_val == 8192
// opcode: khmbb ; op1:x3; op2:x19; dest:x0; op1val:0xffbf0200;  op2val:0xbfff2000
TEST_PKRR_OP(khmbb, x0, x3, x19, 0x00000000, 0xffbf0200, 0xbfff2000, x3, x5, 72, x7)

inst_10:
// rs1==x0, rs2==x28, rd==x22, rs2_h1_val == -8193, rs1_h1_val == 0
// opcode: khmbb ; op1:x0; op2:x28; dest:x22; op1val:0x000200;  op2val:0xdfff0007
TEST_PKRR_OP(khmbb, x22, x0, x28, 0x00000000, 0x000200, 0xdfff0007, x0, x5, 80, x7)

inst_11:
// rs1==x15, rs2==x8, rd==x6, rs2_h1_val == -4097, rs1_h1_val == 8
// opcode: khmbb ; op1:x15; op2:x8; dest:x6; op1val:0x08c000;  op2val:0xeffff7ff
TEST_PKRR_OP(khmbb, x6, x15, x8, 0x00000000, 0x08c000, 0xeffff7ff, x15, x5, 88, x7)

inst_12:
// rs1==x26, rs2==x14, rd==x1, rs2_h1_val == -2049, rs1_h1_val == -2, rs2_h0_val == -4097
// opcode: khmbb ; op1:x26; op2:x14; dest:x1; op1val:0xfffefff8;  op2val:0xf7ffefff
TEST_PKRR_OP(khmbb, x1, x26, x14, 0x00000000, 0xfffefff8, 0xf7ffefff, x26, x5, 96, x7)

inst_13:
// rs1==x20, rs2==x25, rd==x10, rs2_h1_val == -1025, rs2_h0_val == 1024, rs1_h0_val == -257, rs1_h1_val == -9
// opcode: khmbb ; op1:x20; op2:x25; dest:x10; op1val:0xfff7feff;  op2val:0xfbff0400
TEST_PKRR_OP(khmbb, x10, x20, x25, 0x00000000, 0xfff7feff, 0xfbff0400, x20, x5, 104, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x5, rs2==x4, rd==x17, rs2_h1_val == -513, 
// opcode: khmbb ; op1:x5; op2:x4; dest:x17; op1val:0xc0002000;  op2val:0xfdfffff6
TEST_PKRR_OP(khmbb, x17, x5, x4, 0x00000000, 0xc0002000, 0xfdfffff6, x5, x1, 0, x11)

inst_15:
// rs1==x22, rs2==x5, rd==x16, rs2_h1_val == -257, rs1_h0_val == 256, rs1_h1_val == 32767
// opcode: khmbb ; op1:x22; op2:x5; dest:x16; op1val:0x7fff0100;  op2val:0xfefffffa
TEST_PKRR_OP(khmbb, x16, x22, x5, 0x00000000, 0x7fff0100, 0xfefffffa, x22, x1, 8, x11)

inst_16:
// rs1==x13, rs2==x21, rd==x31, rs2_h1_val == -65, rs2_h0_val == 512
// opcode: khmbb ; op1:x13; op2:x21; dest:x31; op1val:0x09fffc;  op2val:0xffbf0200
TEST_PKRR_OP(khmbb, x31, x13, x21, 0x00000000, 0x09fffc, 0xffbf0200, x13, x1, 16, x11)

inst_17:
// rs1==x30, rs2==x10, rd==x20, rs2_h1_val == -33, rs2_h0_val == -2, rs1_h0_val == -4097, rs1_h1_val == 16
// opcode: khmbb ; op1:x30; op2:x10; dest:x20; op1val:0x10efff;  op2val:0xffdffffe
TEST_PKRR_OP(khmbb, x20, x30, x10, 0x00000000, 0x10efff, 0xffdffffe, x30, x1, 24, x11)

inst_18:
// rs1==x23, rs2==x7, rd==x13, rs2_h1_val == -17, rs1_h1_val == -17, rs2_h0_val == 64, rs1_h0_val == 1024
// opcode: khmbb ; op1:x23; op2:x7; dest:x13; op1val:0xffef0400;  op2val:0xffef0040
TEST_PKRR_OP(khmbb, x13, x23, x7, 0x00000000, 0xffef0400, 0xffef0040, x23, x1, 32, x11)

inst_19:
// rs1==x19, rs2==x13, rd==x28, rs2_h1_val == -9, rs2_h0_val == 1, rs1_h0_val == -129
// opcode: khmbb ; op1:x19; op2:x13; dest:x28; op1val:0xffefff7f;  op2val:0xfff70001
TEST_PKRR_OP(khmbb, x28, x19, x13, 0x00000000, 0xffefff7f, 0xfff70001, x19, x1, 40, x11)

inst_20:
// rs1==x4, rs2==x3, rd==x30, rs2_h1_val == -5, rs1_h1_val == 4
// opcode: khmbb ; op1:x4; op2:x3; dest:x30; op1val:0x04fffc;  op2val:0xfffbc000
TEST_PKRR_OP(khmbb, x30, x4, x3, 0x00000000, 0x04fffc, 0xfffbc000, x4, x1, 48, x11)

inst_21:
// rs1==x25, rs2==x29, rd==x24, rs2_h1_val == -3, rs2_h0_val == 2048
// opcode: khmbb ; op1:x25; op2:x29; dest:x24; op1val:0xc0003fff;  op2val:0xfffd0800
TEST_PKRR_OP(khmbb, x24, x25, x29, 0x00000000, 0xc0003fff, 0xfffd0800, x25, x1, 56, x11)

inst_22:
// rs1==x29, rs2==x20, rd==x5, rs2_h1_val == -2, 
// opcode: khmbb ; op1:x29; op2:x20; dest:x5; op1val:0x061000;  op2val:0xfffeffdf
TEST_PKRR_OP(khmbb, x5, x29, x20, 0x00000000, 0x061000, 0xfffeffdf, x29, x1, 64, x11)

inst_23:
// rs1==x8, rs2==x6, rd==x19, rs2_h1_val == -32768, rs1_h1_val == -1, rs1_h0_val == 8
// opcode: khmbb ; op1:x8; op2:x6; dest:x19; op1val:0xffff0008;  op2val:0x8000efff
TEST_PKRR_OP(khmbb, x19, x8, x6, 0x00000000, 0xffff0008, 0x8000efff, x8, x1, 72, x11)

inst_24:
// rs1==x21, rs2==x23, rd==x14, rs2_h1_val == 16384, rs1_h1_val == 1, rs2_h0_val == -17, rs1_h0_val == -9
// opcode: khmbb ; op1:x21; op2:x23; dest:x14; op1val:0x01fff7;  op2val:0x4000ffef
TEST_PKRR_OP(khmbb, x14, x21, x23, 0x00000000, 0x01fff7, 0x4000ffef, x21, x1, 80, x11)

inst_25:
// rs1==x31, rs2==x15, rd==x9, rs2_h1_val == 8192, rs1_h0_val == -1
// opcode: khmbb ; op1:x31; op2:x15; dest:x9; op1val:0xffffffff;  op2val:0x20000006
TEST_PKRR_OP(khmbb, x9, x31, x15, 0x00000000, 0xffffffff, 0x20000006, x31, x1, 88, x11)

inst_26:
// rs1==x12, rs2==x2, rd==x8, rs2_h1_val == 2048, 
// opcode: khmbb ; op1:x12; op2:x2; dest:x8; op1val:0xfffcc000;  op2val:0x8002000
TEST_PKRR_OP(khmbb, x8, x12, x2, 0x00000000, 0xfffcc000, 0x8002000, x12, x1, 96, x11)

inst_27:
// rs1==x7, rs2==x22, rd==x12, rs2_h1_val == 1024, 
// opcode: khmbb ; op1:x7; op2:x22; dest:x12; op1val:0x400fff8;  op2val:0x400fff9
TEST_PKRR_OP(khmbb, x12, x7, x22, 0x00000000, 0x400fff8, 0x400fff9, x7, x1, 104, x4)

inst_28:
// rs1==x14, rs2==x27, rd==x3, rs2_h1_val == 512, rs1_h1_val == -8193, rs2_h0_val == 32767
// opcode: khmbb ; op1:x14; op2:x27; dest:x3; op1val:0xdfff0006;  op2val:0x2007fff
TEST_PKRR_OP(khmbb, x3, x14, x27, 0x00000000, 0xdfff0006, 0x2007fff, x14, x1, 112, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:
// rs1==x1, rs2==x24, rd==x25, rs2_h1_val == 128, rs1_h0_val == -21846
// opcode: khmbb ; op1:x1; op2:x24; dest:x25; op1val:0xbfffaaaa;  op2val:0x80ffef
TEST_PKRR_OP(khmbb, x25, x1, x24, 0x00000000, 0xbfffaaaa, 0x80ffef, x1, x2, 0, x4)

inst_30:
// rs1==x11, rs2==x9, rd==x7, rs2_h1_val == 64, rs2_h0_val == -257, rs1_h0_val == 16
// opcode: khmbb ; op1:x11; op2:x9; dest:x7; op1val:0x060010;  op2val:0x40feff
TEST_PKRR_OP(khmbb, x7, x11, x9, 0x00000000, 0x060010, 0x40feff, x11, x2, 8, x4)

inst_31:
// rs1==x16, rs2==x0, rd==x21, rs1_h0_val == -1025, 
// opcode: khmbb ; op1:x16; op2:x0; dest:x21; op1val:0x7ffffbff;  op2val:0x010400
TEST_PKRR_OP(khmbb, x21, x16, x0, 0x00000000, 0x7ffffbff, 0x010400, x16, x2, 16, x4)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == 2
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff;  op2val:0x2000006
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x02fdff, 0x2000006, x30, x2, 24, x4)

inst_33:
// rs1_h0_val == -17, rs2_h0_val == 16384, rs1_h1_val == -1025
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef;  op2val:0x074000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfbffffef, 0x074000, x30, x2, 32, x4)

inst_34:
// rs1_h0_val == -5, rs2_h1_val == 4, rs1_h1_val == 21845
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb;  op2val:0x043fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x5555fffb, 0x043fff, x30, x2, 40, x4)

inst_35:
// rs1_h0_val == -3, rs2_h0_val == 256
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffd;  op2val:0xfffe0100
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfff6fffd, 0xfffe0100, x30, x2, 48, x4)

inst_36:
// rs1_h0_val == -2, rs2_h0_val == -513
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffe;  op2val:0x80fdff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfff8fffe, 0x80fdff, x30, x2, 56, x4)

inst_37:
// rs1_h0_val == 16384, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff64000;  op2val:0x3fff2000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfff64000, 0x3fff2000, x30, x2, 64, x4)

inst_38:
// rs1_h0_val == 2048, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x030800;  op2val:0xffdff7ff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x030800, 0xffdff7ff, x30, x2, 72, x4)

inst_39:
// rs1_h0_val == 64, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x080040;  op2val:0x800efff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x080040, 0x800efff, x30, x2, 80, x4)

inst_40:
// rs1_h0_val == 32, rs2_h0_val == 2
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffff0020;  op2val:0x800002
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xffff0020, 0x800002, x30, x2, 88, x4)

inst_41:
// rs1_h0_val == 4, rs2_h0_val == -3
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0xfffbfffd
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x000004, 0xfffbfffd, x30, x2, 96, x4)

inst_42:
// rs1_h0_val == 2, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002;  op2val:0xfffe7fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xffbf0002, 0xfffe7fff, x30, x2, 104, x4)

inst_43:
// rs1_h0_val == 1, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x55550001;  op2val:0xff7f0006
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x55550001, 0xff7f0006, x30, x2, 112, x4)

inst_44:
// rs1_h0_val == 0, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0000;  op2val:0x8000ffef
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xdfff0000, 0x8000ffef, x30, x2, 120, x4)

inst_45:
// rs2_h1_val == 32, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffeff;  op2val:0x200100
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfbfffeff, 0x200100, x30, x2, 128, x4)

inst_46:
// rs2_h1_val == 16, rs2_h0_val == 128
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010;  op2val:0x100080
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfffe0010, 0x100080, x30, x2, 136, x4)

inst_47:
// rs2_h1_val == 8, rs2_h0_val == 0
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffa2000;  op2val:0x080000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfffa2000, 0x080000, x30, x2, 144, x4)

inst_48:
// rs2_h1_val == 2, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x07fffb;  op2val:0x020800
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x07fffb, 0x020800, x30, x2, 152, x4)

inst_49:
// rs2_h0_val == -5, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x080005;  op2val:0xff7ffffb
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x080005, 0xff7ffffb, x30, x2, 160, x4)

inst_50:
// rs2_h0_val == -32768, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffef;  op2val:0xc0008000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x2000ffef, 0xc0008000, x30, x2, 168, x4)

inst_51:
// rs2_h0_val == 32, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c000;  op2val:0xfff90020
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfff9c000, 0xfff90020, x30, x2, 176, x4)

inst_52:
// rs2_h0_val == 16, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x050100;  op2val:0xfff60010
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x050100, 0xfff60010, x30, x2, 184, x4)

inst_53:
// rs2_h0_val == 8, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffb;  op2val:0xfff60008
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x2000fffb, 0xfff60008, x30, x2, 192, x4)

inst_54:
// rs2_h0_val == 4, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff80000;  op2val:0xdfff0004
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfff80000, 0xdfff0004, x30, x2, 200, x4)

inst_55:
// rs1_h1_val == -21846, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0020;  op2val:0xfff87fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xaaaa0020, 0xfff87fff, x30, x2, 208, x4)

inst_56:
// rs1_h1_val == -4097, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffbf;  op2val:0x4007fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xefffffbf, 0x4007fff, x30, x2, 216, x4)

inst_57:
// rs1_h1_val == -2049, rs2_h1_val == 0
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0200;  op2val:0x00fffe
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xf7ff0200, 0x00fffe, x30, x2, 224, x4)

inst_58:
// rs1_h1_val == -513, rs2_h0_val == -9
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff3fff;  op2val:0xfefffff7
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfdff3fff, 0xfefffff7, x30, x2, 232, x4)

inst_59:
// rs1_h1_val == -257, rs2_h0_val == -8193
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0004;  op2val:0xaaaadfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfeff0004, 0xaaaadfff, x30, x2, 240, x4)

inst_60:
// rs1_h1_val == -33, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0800;  op2val:0x034000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xffdf0800, 0x034000, x30, x2, 248, x4)

inst_61:
// rs1_h1_val == -5, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008;  op2val:0xfbff0000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfffb0008, 0xfbff0000, x30, x2, 256, x4)

inst_62:
// rs1_h1_val == -3, rs2_h0_val == -1025
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbfff;  op2val:0xfffbfbff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xfffdbfff, 0xfffbfbff, x30, x2, 264, x4)

inst_63:
// rs1_h1_val == 16384, rs1_h0_val == 32767
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x40007fff;  op2val:0x3fff0001
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x40007fff, 0x3fff0001, x30, x2, 272, x4)

inst_64:
// rs2_h0_val == -129, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x01efff;  op2val:0xfffaff7f
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x01efff, 0xfffaff7f, x30, x2, 280, x4)

inst_65:
// rs1_h1_val == 2048, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf;  op2val:0xfffcfdff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x800ffbf, 0xfffcfdff, x30, x2, 288, x4)

inst_66:
// rs1_h1_val == 512, rs2_h1_val == -1
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000001;  op2val:0xffffdfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x2000001, 0xffffdfff, x30, x2, 296, x4)

inst_67:
// rs1_h1_val == 256, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x1002000;  op2val:0x40008000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x1002000, 0x40008000, x30, x2, 304, x4)

inst_68:
// rs1_h1_val == 64, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x400004;  op2val:0x400fff8
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x400004, 0x400fff8, x30, x2, 312, x4)

inst_69:
// rs2_h0_val == -21846, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdff;  op2val:0xfffbaaaa
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xbffffdff, 0xfffbaaaa, x30, x2, 320, x4)

inst_70:
// rs1_h1_val == 32, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200040;  op2val:0xfdff0007
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x200040, 0xfdff0007, x30, x2, 328, x4)

inst_71:
// rs2_h0_val == -16385, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xc0000400;  op2val:0xc000bfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xc0000400, 0xc000bfff, x30, x2, 336, x4)

inst_72:
// rs2_h0_val == -65, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x03fffc;  op2val:0xf7ffffbf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x03fffc, 0xf7ffffbf, x30, x2, 344, x4)

inst_73:
// rs1_h0_val == -8193, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff;  op2val:0xffef0002
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x80dfff, 0xffef0002, x30, x2, 352, x4)

inst_74:
// rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 21845, rs1_h0_val == -65
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x09ffbf;  op2val:0x095555
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x09ffbf, 0x095555, x30, x2, 360, x4)

inst_75:
// rs2_h1_val == -16385, rs1_h1_val == -65, rs1_h0_val == 512, rs2_h0_val == 8192
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200;  op2val:0xbfff2000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0xffbf0200, 0xbfff2000, x30, x2, 368, x4)

inst_76:
// rs1_h0_val == -1025, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffbff;  op2val:0x010400
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x00000000, 0x7ffffbff, 0x010400, x30, x2, 376, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 96*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
