
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra16.u instruction of the RISC-V RV32PZicsr extension for the kslra16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x2, rd==x25, rs2_val == 1431655765, rs1_h1_val == 65535, rs1_h0_val == 2
// opcode: kslra16.u ; op1:x9; op2:x2; dest:x25; op1val:0xffff0002;  op2val:0x55555555
TEST_PKRR_OP(kslra16.u, x25, x9, x2, 0x00000000, 0xffff0002, 0x55555555, x9, x8, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x23, rs2_val == 2147483647, 
// opcode: kslra16.u ; op1:x5; op2:x5; dest:x23; op1val:0x090012;  op2val:0x7fffffff
TEST_PKRR_OP(kslra16.u, x23, x5, x5, 0x00000000, 0x090012, 0x7fffffff, x5, x8, 8, x11)

inst_2:
// rs1 == rd != rs2, rs1==x14, rs2==x23, rd==x14, rs2_val == -1073741825, rs1_h0_val == 4
// opcode: kslra16.u ; op1:x14; op2:x23; dest:x14; op1val:0x050004;  op2val:0xbfffffff
TEST_PKRR_OP(kslra16.u, x14, x14, x23, 0x00000000, 0x050004, 0xbfffffff, x14, x8, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs2_val == -536870913, rs1_h1_val == 65534, rs1_h0_val == 1
// opcode: kslra16.u ; op1:x10; op2:x10; dest:x10; op1val:0xfffe0001;  op2val:0xdfffffff
TEST_PKRR_OP(kslra16.u, x10, x10, x10, 0x00000000, 0xfffe0001, 0xdfffffff, x10, x8, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x6, rd==x6, rs2_val == -268435457, rs1_h0_val == 64, rs1_h1_val == 128
// opcode: kslra16.u ; op1:x16; op2:x6; dest:x6; op1val:0x800040;  op2val:0xefffffff
TEST_PKRR_OP(kslra16.u, x6, x16, x6, 0x00000000, 0x800040, 0xefffffff, x16, x8, 32, x11)

inst_5:
// rs1==x6, rs2==x24, rd==x19, rs2_val == -134217729, rs1_h0_val == 61439
// opcode: kslra16.u ; op1:x6; op2:x24; dest:x19; op1val:0xffffefff;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra16.u, x19, x6, x24, 0x00000000, 0xffffefff, 0xf7ffffff, x6, x8, 40, x11)

inst_6:
// rs1==x2, rs2==x27, rd==x12, rs2_val == -67108865, rs1_h0_val == 65535
// opcode: kslra16.u ; op1:x2; op2:x27; dest:x12; op1val:0x0fffff;  op2val:0xfbffffff
TEST_PKRR_OP(kslra16.u, x12, x2, x27, 0x00000000, 0x0fffff, 0xfbffffff, x2, x8, 48, x11)

inst_7:
// rs1==x4, rs2==x20, rd==x27, rs2_val == -33554433, rs1_h0_val == 16
// opcode: kslra16.u ; op1:x4; op2:x20; dest:x27; op1val:0x0b0010;  op2val:0xfdffffff
TEST_PKRR_OP(kslra16.u, x27, x4, x20, 0x00000000, 0x0b0010, 0xfdffffff, x4, x8, 56, x11)

inst_8:
// rs1==x20, rs2==x17, rd==x18, rs2_val == -16777217, 
// opcode: kslra16.u ; op1:x20; op2:x17; dest:x18; op1val:0x110003;  op2val:0xfeffffff
TEST_PKRR_OP(kslra16.u, x18, x20, x17, 0x00000000, 0x110003, 0xfeffffff, x20, x8, 64, x11)

inst_9:
// rs1==x22, rs2==x25, rd==x7, rs2_val == -8388609, rs1_h1_val == 2048
// opcode: kslra16.u ; op1:x22; op2:x25; dest:x7; op1val:0x800efff;  op2val:0xff7fffff
TEST_PKRR_OP(kslra16.u, x7, x22, x25, 0x00000000, 0x800efff, 0xff7fffff, x22, x8, 72, x11)

inst_10:
// rs1==x24, rs2==x16, rd==x1, rs2_val == -4194305, rs1_h0_val == 57343
// opcode: kslra16.u ; op1:x24; op2:x16; dest:x1; op1val:0x09dfff;  op2val:0xffbfffff
TEST_PKRR_OP(kslra16.u, x1, x24, x16, 0x00000000, 0x09dfff, 0xffbfffff, x24, x8, 80, x11)

inst_11:
// rs1==x12, rs2==x26, rd==x16, rs2_val == -2097153, rs1_h0_val == 63487, rs1_h1_val == 65407
// opcode: kslra16.u ; op1:x12; op2:x26; dest:x16; op1val:0xff7ff7ff;  op2val:0xffdfffff
TEST_PKRR_OP(kslra16.u, x16, x12, x26, 0x00000000, 0xff7ff7ff, 0xffdfffff, x12, x8, 88, x11)

inst_12:
// rs1==x30, rs2==x31, rd==x20, rs2_val == -1048577, rs1_h0_val == 65519, rs1_h1_val == 63487
// opcode: kslra16.u ; op1:x30; op2:x31; dest:x20; op1val:0xf7ffffef;  op2val:0xffefffff
TEST_PKRR_OP(kslra16.u, x20, x30, x31, 0x00000000, 0xf7ffffef, 0xffefffff, x30, x8, 96, x11)

inst_13:
// rs1==x0, rs2==x7, rd==x5, rs2_val == -524289, rs1_h1_val == 57343
// opcode: kslra16.u ; op1:x0; op2:x7; dest:x5; op1val:0xdfff000f;  op2val:0xfff7ffff
TEST_PKRR_OP(kslra16.u, x5, x0, x7, 0x00000000, 0xdfff000f, 0xfff7ffff, x0, x8, 104, x11)

inst_14:
// rs1==x26, rs2==x12, rd==x21, rs2_val == -262145, 
// opcode: kslra16.u ; op1:x26; op2:x12; dest:x21; op1val:0xdfff0003;  op2val:0xfffbffff
TEST_PKRR_OP(kslra16.u, x21, x26, x12, 0x00000000, 0xdfff0003, 0xfffbffff, x26, x8, 112, x11)

inst_15:
// rs1==x7, rs2==x13, rd==x3, rs2_val == -131073, rs1_h1_val == 65519
// opcode: kslra16.u ; op1:x7; op2:x13; dest:x3; op1val:0xffef0002;  op2val:0xfffdffff
TEST_PKRR_OP(kslra16.u, x3, x7, x13, 0x00000000, 0xffef0002, 0xfffdffff, x7, x8, 120, x11)

inst_16:
// rs1==x1, rs2==x28, rd==x13, rs2_val == -65537, rs1_h0_val == 65471, rs1_h1_val == 16384
// opcode: kslra16.u ; op1:x1; op2:x28; dest:x13; op1val:0x4000ffbf;  op2val:0xfffeffff
TEST_PKRR_OP(kslra16.u, x13, x1, x28, 0x00000000, 0x4000ffbf, 0xfffeffff, x1, x8, 128, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x18, rs2==x14, rd==x30, rs2_val == -32769, rs1_h1_val == 65471, rs1_h0_val == 256
// opcode: kslra16.u ; op1:x18; op2:x14; dest:x30; op1val:0xffbf0100;  op2val:0xffff7fff
TEST_PKRR_OP(kslra16.u, x30, x18, x14, 0x00000000, 0xffbf0100, 0xffff7fff, x18, x5, 0, x6)

inst_18:
// rs1==x29, rs2==x11, rd==x4, rs2_val == -16385, rs1_h0_val == 2048, rs1_h1_val == 32768
// opcode: kslra16.u ; op1:x29; op2:x11; dest:x4; op1val:0x80000800;  op2val:0xffffbfff
TEST_PKRR_OP(kslra16.u, x4, x29, x11, 0x00000000, 0x80000800, 0xffffbfff, x29, x5, 8, x6)

inst_19:
// rs1==x17, rs2==x29, rd==x9, rs2_val == -8193, rs1_h1_val == 65527
// opcode: kslra16.u ; op1:x17; op2:x29; dest:x9; op1val:0xfff70005;  op2val:0xffffdfff
TEST_PKRR_OP(kslra16.u, x9, x17, x29, 0x00000000, 0xfff70005, 0xffffdfff, x17, x5, 16, x6)

inst_20:
// rs1==x31, rs2==x21, rd==x15, rs2_val == -4097, 
// opcode: kslra16.u ; op1:x31; op2:x21; dest:x15; op1val:0x80000e;  op2val:0xffffefff
TEST_PKRR_OP(kslra16.u, x15, x31, x21, 0x00000000, 0x80000e, 0xffffefff, x31, x5, 24, x6)

inst_21:
// rs1==x8, rs2==x22, rd==x31, rs2_val == -2049, rs1_h0_val == 65503
// opcode: kslra16.u ; op1:x8; op2:x22; dest:x31; op1val:0x11ffdf;  op2val:0xfffff7ff
TEST_PKRR_OP(kslra16.u, x31, x8, x22, 0x00000000, 0x11ffdf, 0xfffff7ff, x8, x5, 32, x6)

inst_22:
// rs1==x13, rs2==x3, rd==x11, rs2_val == -1025, 
// opcode: kslra16.u ; op1:x13; op2:x3; dest:x11; op1val:0x0df7ff;  op2val:0xfffffbff
TEST_PKRR_OP(kslra16.u, x11, x13, x3, 0x00000000, 0x0df7ff, 0xfffffbff, x13, x5, 40, x6)

inst_23:
// rs1==x3, rs2==x8, rd==x28, rs2_val == -513, 
// opcode: kslra16.u ; op1:x3; op2:x8; dest:x28; op1val:0x050004;  op2val:0xfffffdff
TEST_PKRR_OP(kslra16.u, x28, x3, x8, 0x00000000, 0x050004, 0xfffffdff, x3, x5, 48, x6)

inst_24:
// rs1==x28, rs2==x15, rd==x26, rs2_val == -257, 
// opcode: kslra16.u ; op1:x28; op2:x15; dest:x26; op1val:0x0c000b;  op2val:0xfffffeff
TEST_PKRR_OP(kslra16.u, x26, x28, x15, 0x00000000, 0x0c000b, 0xfffffeff, x28, x5, 56, x6)

inst_25:
// rs1==x11, rs2==x9, rd==x8, rs2_val == -129, rs1_h0_val == 32768
// opcode: kslra16.u ; op1:x11; op2:x9; dest:x8; op1val:0x098000;  op2val:0xffffff7f
TEST_PKRR_OP(kslra16.u, x8, x11, x9, 0x00000000, 0x098000, 0xffffff7f, x11, x5, 64, x6)

inst_26:
// rs1==x15, rs2==x0, rd==x22, rs2_val == -65, 
// opcode: kslra16.u ; op1:x15; op2:x0; dest:x22; op1val:0x0effbf;  op2val:0x0
TEST_PKRR_OP(kslra16.u, x22, x15, x0, 0x00000000, 0x0effbf, 0x0, x15, x5, 72, x6)

inst_27:
// rs1==x23, rs2==x30, rd==x2, rs2_val == -33, 
// opcode: kslra16.u ; op1:x23; op2:x30; dest:x2; op1val:0xffef0005;  op2val:0xffffffdf
TEST_PKRR_OP(kslra16.u, x2, x23, x30, 0x00000000, 0xffef0005, 0xffffffdf, x23, x5, 80, x6)

inst_28:
// rs1==x27, rs2==x19, rd==x24, rs2_val == -17, 
// opcode: kslra16.u ; op1:x27; op2:x19; dest:x24; op1val:0x0bdfff;  op2val:0xffffffef
TEST_PKRR_OP(kslra16.u, x24, x27, x19, 0x00000000, 0x0bdfff, 0xffffffef, x27, x5, 88, x6)

inst_29:
// rs1==x25, rs2==x1, rd==x0, rs2_val == -9, rs1_h0_val == 32767
// opcode: kslra16.u ; op1:x25; op2:x1; dest:x0; op1val:0x8007fff;  op2val:0xfffffff7
TEST_PKRR_OP(kslra16.u, x0, x25, x1, 0x00000000, 0x8007fff, 0xfffffff7, x25, x5, 96, x6)

inst_30:
// rs1==x21, rs2==x18, rd==x29, rs2_val == -5, rs1_h1_val == 4
// opcode: kslra16.u ; op1:x21; op2:x18; dest:x29; op1val:0x040004;  op2val:0xfffffffb
TEST_PKRR_OP(kslra16.u, x29, x21, x18, 0x00000000, 0x040004, 0xfffffffb, x21, x5, 104, x6)

inst_31:
// rs1==x19, rs2==x4, rd==x17, rs2_val == -3, 
// opcode: kslra16.u ; op1:x19; op2:x4; dest:x17; op1val:0xfffe0010;  op2val:0xfffffffd
TEST_PKRR_OP(kslra16.u, x17, x19, x4, 0x00000000, 0xfffe0010, 0xfffffffd, x19, x5, 112, x6)

inst_32:
// rs2_val == -2, rs1_h0_val == 32, rs1_h1_val == 256
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000020;  op2val:0xfffffffe
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x1000020, 0xfffffffe, x30, x5, 120, x6)

inst_33:
// rs2_val == -2147483648, rs1_h0_val == 65531
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x05fffb;  op2val:0x80000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x05fffb, 0x80000000, x30, x5, 128, x6)

inst_34:
// rs2_val == 1073741824, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000f;  op2val:0x40000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x80000f, 0x40000000, x30, x5, 136, x6)

inst_35:
// rs2_val == 536870912, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x090004;  op2val:0x20000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x090004, 0x20000000, x30, x5, 144, x6)

inst_36:
// rs2_val == 268435456, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100;  op2val:0x10000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffbf0100, 0x10000000, x30, x5, 152, x6)

inst_37:
// rs2_val == 134217728, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000010;  op2val:0x8000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x40000010, 0x8000000, x30, x5, 160, x6)

inst_38:
// rs2_val == 67108864, rs1_h0_val == 128
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000080;  op2val:0x4000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x40000080, 0x4000000, x30, x5, 168, x6)

inst_39:
// rs2_val == 33554432, rs1_h1_val == 64511
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0012;  op2val:0x2000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfbff0012, 0x2000000, x30, x5, 176, x6)

inst_40:
// rs2_val == 16777216, rs1_h0_val == 16384
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe4000;  op2val:0x1000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfffe4000, 0x1000000, x30, x5, 184, x6)

inst_41:
// rs1_h0_val == 8, rs1_h1_val == 512
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000008;  op2val:0xffffdfff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x2000008, 0xffffdfff, x30, x5, 192, x6)

inst_42:
// rs1_h0_val == 0, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000;  op2val:0xfffffffd
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x040000, 0xfffffffd, x30, x5, 200, x6)

inst_43:
// rs2_val == -1431655766, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0004;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffbf0004, 0xaaaaaaaa, x30, x5, 208, x6)

inst_44:
// rs2_val == 8388608, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x090800;  op2val:0x800000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x090800, 0x800000, x30, x5, 216, x6)

inst_45:
// rs2_val == 4194304, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002;  op2val:0x400000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfff70002, 0x400000, x30, x5, 224, x6)

inst_46:
// rs2_val == 2097152, rs1_h1_val == 4096
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000005;  op2val:0x200000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x10000005, 0x200000, x30, x5, 232, x6)

inst_47:
// rs2_val == 1048576, rs1_h0_val == 512
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0e0200;  op2val:0x100000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x0e0200, 0x100000, x30, x5, 240, x6)

inst_48:
// rs2_val == 524288, rs1_h1_val == 61439
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xefff0010;  op2val:0x80000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xefff0010, 0x80000, x30, x5, 248, x6)

inst_49:
// rs2_val == 262144, rs1_h1_val == 32767
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0012;  op2val:0x40000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x7fff0012, 0x40000, x30, x5, 256, x6)

inst_50:
// rs2_val == 131072, rs1_h0_val == 4096
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x071000;  op2val:0x20000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x071000, 0x20000, x30, x5, 264, x6)

inst_51:
// rs2_val == 65536, rs1_h1_val == 65279, rs1_h0_val == 65534
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffe;  op2val:0x10000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfefffffe, 0x10000, x30, x5, 272, x6)

inst_52:
// rs2_val == 32768, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffef0020;  op2val:0x8000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffef0020, 0x8000, x30, x5, 280, x6)

inst_53:
// rs2_val == 16384, rs1_h1_val == 21845
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555000e;  op2val:0x4000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x5555000e, 0x4000, x30, x5, 288, x6)

inst_54:
// rs2_val == 8192, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000d;  op2val:0x2000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x8000000d, 0x2000, x30, x5, 296, x6)

inst_55:
// rs2_val == 4096, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x130040;  op2val:0x1000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x130040, 0x1000, x30, x5, 304, x6)

inst_56:
// rs2_val == 2048, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7f8000;  op2val:0x800
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xff7f8000, 0x800, x30, x5, 312, x6)

inst_57:
// rs2_val == 1024, rs1_h1_val == 43690, rs1_h0_val == 65527
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff7;  op2val:0x400
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xaaaafff7, 0x400, x30, x5, 320, x6)

inst_58:
// rs2_val == 512, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0ddfff;  op2val:0x200
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x0ddfff, 0x200, x30, x5, 328, x6)

inst_59:
// rs2_val == 256, rs1_h0_val == 65023
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04fdff;  op2val:0x100
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x04fdff, 0x100, x30, x5, 336, x6)

inst_60:
// rs2_val == 128, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0e0006;  op2val:0x80
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x0e0006, 0x80, x30, x5, 344, x6)

inst_61:
// rs2_val == 1, rs1_h1_val == 8
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08fff7;  op2val:0x1
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x08fff7, 0x1, x30, x5, 352, x6)

inst_62:
// rs1_h1_val == 49151, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006;  op2val:0xffefffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xbfff0006, 0xffefffff, x30, x5, 360, x6)

inst_63:
// rs1_h1_val == 65023, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdff4000;  op2val:0x100
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfdff4000, 0x100, x30, x5, 368, x6)

inst_64:
// rs1_h1_val == 65503, rs1_h0_val == 1024
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0400;  op2val:0x3
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffdf0400, 0x3, x30, x5, 376, x6)

inst_65:
// rs1_h1_val == 65531, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffb4000;  op2val:0x800
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfffb4000, 0x800, x30, x5, 384, x6)

inst_66:
// rs1_h1_val == 65533, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800;  op2val:0xbfffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfffd0800, 0xbfffffff, x30, x5, 392, x6)

inst_67:
// rs1_h1_val == 8192, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000004;  op2val:0x40000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x20000004, 0x40000000, x30, x5, 400, x6)

inst_68:
// rs1_h1_val == 1024, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000001;  op2val:0xfffffffc
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x4000001, 0xfffffffc, x30, x5, 408, x6)

inst_69:
// rs1_h1_val == 64, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000f;  op2val:0x1
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x40000f, 0x1, x30, x5, 416, x6)

inst_70:
// rs1_h1_val == 32, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20fffb;  op2val:0x800000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x20fffb, 0x800000, x30, x5, 424, x6)

inst_71:
// rs1_h1_val == 16, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100009;  op2val:0xfff7ffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x100009, 0xfff7ffff, x30, x5, 432, x6)

inst_72:
// rs1_h1_val == 2, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x020013;  op2val:0x3fffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x020013, 0x3fffffff, x30, x5, 440, x6)

inst_73:
// rs1_h1_val == 1, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x011000;  op2val:0x0
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x011000, 0x0, x30, x5, 448, x6)

inst_74:
// rs1_h1_val == 0, rs1_h0_val == 43690
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaa;  op2val:0xfffffffc
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x00aaaa, 0xfffffffc, x30, x5, 456, x6)

inst_75:
// rs1_h0_val == 21845, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x055555;  op2val:0x20000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x055555, 0x20000000, x30, x5, 464, x6)

inst_76:
// rs1_h0_val == 49151, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff;  op2val:0x10000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x08bfff, 0x10000000, x30, x5, 472, x6)

inst_77:
// rs1_h0_val == 64511, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80fbff;  op2val:0xf7ffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x80fbff, 0xf7ffffff, x30, x5, 480, x6)

inst_78:
// rs1_h0_val == 65279, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04feff;  op2val:0x40000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x04feff, 0x40000, x30, x5, 488, x6)

inst_79:
// rs1_h0_val == 65407, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x12ff7f;  op2val:0xffff7fff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x12ff7f, 0xffff7fff, x30, x5, 496, x6)

inst_80:
// rs1_h0_val == 65533, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffd;  op2val:0x200000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffbffffd, 0x200000, x30, x5, 504, x6)

inst_81:
// rs1_h0_val == 8192, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x092000;  op2val:0x7fffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x092000, 0x7fffffff, x30, x5, 512, x6)

inst_82:
// rs2_val == 64, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800003;  op2val:0x40
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x800003, 0x40, x30, x5, 520, x6)

inst_83:
// rs2_val == 32, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0x20
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffffffdf, 0x20, x30, x5, 528, x6)

inst_84:
// rs2_val == 16, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002;  op2val:0x10
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xffbf0002, 0x10, x30, x5, 536, x6)

inst_85:
// rs2_val == 8, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x018000;  op2val:0x8
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x018000, 0x8, x30, x5, 544, x6)

inst_86:
// rs2_val == 4, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0x4
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x04ffef, 0x4, x30, x5, 552, x6)

inst_87:
// rs2_val == 2, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffdf;  op2val:0x2
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x4000ffdf, 0x2, x30, x5, 560, x6)

inst_88:
// rs2_val == -536870913, rs1_h1_val == 65534, rs1_h0_val == 1
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0001;  op2val:0xdfffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0xfffe0001, 0xdfffffff, x30, x5, 568, x6)

inst_89:
// rs2_val == -65, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0effbf;  op2val:0xffffffbf
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x0effbf, 0xffffffbf, x30, x5, 576, x6)

inst_90:
// rs2_val == -9, rs1_h0_val == 32767
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff;  op2val:0xfffffff7
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x00000000, 0x8007fff, 0xfffffff7, x30, x5, 584, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 148*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
