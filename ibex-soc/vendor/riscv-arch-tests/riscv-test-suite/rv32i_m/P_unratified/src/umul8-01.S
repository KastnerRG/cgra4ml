
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umul8 instruction of the RISC-V RV32PZicsr extension for the umul8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umul8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x0, rd==x10, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b1_val == 255, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 8, rs1_b2_val == 1
// opcode: umul8 ; op1:x2; op2:x0; dest:x10; op1val:0x08010300;  op2val:0x030eff03
TEST_P64_PNN_OP(umul8, x10, x11, x2, x0, 0x00000000, 0, 0x08010300, 0x030eff03, x1, 0, x17)

inst_1:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x28, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 251, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 253, rs2_b2_val == 2, rs2_b3_val == 251, rs1_b0_val == 247
// opcode: umul8 ; op1:x4; op2:x4; dest:x28; op1val:0xfb12fdf7;  op2val:0xfb02030e
TEST_P64_PNN_OP(umul8, x28, x29, x4, x4, 0x00000000, 0, 0xfb12fdf7, 0xfb02030e, x1, 8, x17)

inst_2:
// rs1 == rd != rs2, rs1==x6, rs2==x21, rd==x6, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b3_val == 170, rs2_b3_val == 255, rs1_b2_val == 2
// opcode: umul8 ; op1:x6; op2:x21; dest:x6; op1val:0xaa020509;  op2val:0xff02130d
TEST_P64_PNN_OP(umul8, x6, x7, x6, x21, 0x00000000, 0, 0xaa020509, 0xff02130d, x1, 16, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 64, rs1_b0_val == 253
// opcode: umul8 ; op1:x20; op2:x20; dest:x20; op1val:0x030e0efd;  op2val:0x0f0d0e40
TEST_P64_PNN_OP(umul8, x20, x21, x20, x20, 0x00000000, 0, 0x030e0efd, 0x0f0d0e40, x1, 24, x17)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x8, rd==x8, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b0_val == 8, rs2_b3_val == 85, rs1_b3_val == 1, rs2_b0_val == 8, rs2_b1_val == 223, rs1_b2_val == 255
// opcode: umul8 ; op1:x9; op2:x8; dest:x8; op1val:0x01ff0d08;  op2val:0x5502df08
TEST_P64_PNN_OP(umul8, x8, x9, x9, x8, 0x00000000, 0, 0x01ff0d08, 0x5502df08, x1, 32, x17)

inst_5:
// rs1==x29, rs2==x16, rd==x24, rs2_b3_val == 170, rs2_b2_val == 253, rs1_b3_val == 4, rs1_b2_val == 223, rs1_b1_val == 255, rs2_b1_val == 128
// opcode: umul8 ; op1:x29; op2:x16; dest:x24; op1val:0x04dfff11;  op2val:0xaafd8009
TEST_P64_PNN_OP(umul8, x24, x25, x29, x16, 0x00000000, 0, 0x04dfff11, 0xaafd8009, x1, 40, x17)

inst_6:
// rs1==x7, rs2==x3, rd==x26, rs2_b3_val == 127, rs1_b2_val == 191, rs1_b1_val == 128, rs2_b0_val == 4, rs1_b0_val == 2
// opcode: umul8 ; op1:x7; op2:x3; dest:x26; op1val:0x05bf8002;  op2val:0x7f0f0e04
TEST_P64_PNN_OP(umul8, x26, x27, x7, x3, 0x00000000, 0, 0x05bf8002, 0x7f0f0e04, x1, 48, x17)

inst_7:
// rs1==x30, rs2==x10, rd==x14, rs2_b3_val == 191, rs1_b1_val == 0, rs1_b0_val == 1, rs1_b3_val == 16
// opcode: umul8 ; op1:x30; op2:x10; dest:x14; op1val:0x10df0001;  op2val:0xbf0f0f13
TEST_P64_PNN_OP(umul8, x14, x15, x30, x10, 0x00000000, 0, 0x10df0001, 0xbf0f0f13, x1, 56, x17)

inst_8:
// rs1==x24, rs2==x11, rd==x4, rs2_b3_val == 223, rs1_b2_val == 0, rs2_b0_val == 170, rs1_b0_val == 254, rs1_b1_val == 247
// opcode: umul8 ; op1:x24; op2:x11; dest:x4; op1val:0x0a00f7fe;  op2val:0xdf0706aa
TEST_P64_PNN_OP(umul8, x4, x5, x24, x11, 0x00000000, 0, 0x0a00f7fe, 0xdf0706aa, x1, 64, x17)

inst_9:
// rs1==x14, rs2==x28, rd==x30, rs2_b3_val == 239, rs1_b0_val == 4, rs1_b3_val == 223
// opcode: umul8 ; op1:x14; op2:x28; dest:x30; op1val:0xdf060704;  op2val:0xef0b0a13
TEST_P64_PNN_OP(umul8, x30, x31, x14, x28, 0x00000000, 0, 0xdf060704, 0xef0b0a13, x1, 72, x17)

inst_10:
// rs1==x16, rs2==x23, rd==x12, rs2_b3_val == 247, rs2_b2_val == 32, rs1_b1_val == 4, rs1_b2_val == 251, rs1_b0_val == 191, rs2_b1_val == 253
// opcode: umul8 ; op1:x16; op2:x23; dest:x12; op1val:0x06fb04bf;  op2val:0xf720fd0b
TEST_P64_PNN_OP(umul8, x12, x13, x16, x23, 0x00000000, 0, 0x06fb04bf, 0xf720fd0b, x1, 80, x17)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_11:
// rs1==x1, rs2==x5, rd==x18, rs2_b3_val == 253, rs2_b2_val == 64, rs2_b0_val == 223, rs1_b2_val == 64, rs1_b3_val == 32
// opcode: umul8 ; op1:x1; op2:x5; dest:x18; op1val:0x2040800e;  op2val:0xfd4012df
TEST_P64_PNN_OP(umul8, x18, x19, x1, x5, 0x00000000, 0, 0x2040800e, 0xfd4012df, x4, 0, x17)

inst_12:
// rs1==x27, rs2==x9, rd==x2, rs2_b3_val == 254, rs2_b1_val == 85, rs2_b0_val == 247, rs1_b1_val == 191
// opcode: umul8 ; op1:x27; op2:x9; dest:x2; op1val:0x0105bf00;  op2val:0xfe0b55f7
TEST_P64_PNN_OP(umul8, x2, x3, x27, x9, 0x00000000, 0, 0x0105bf00, 0xfe0b55f7, x4, 8, x5)

inst_13:
// rs1==x31, rs2==x1, rd==x16, rs2_b3_val == 128, rs2_b0_val == 191, rs1_b2_val == 32, rs2_b1_val == 64, rs1_b0_val == 255
// opcode: umul8 ; op1:x31; op2:x1; dest:x16; op1val:0x11200fff;  op2val:0x804040bf
TEST_P64_PNN_OP(umul8, x16, x17, x31, x1, 0x00000000, 0, 0x11200fff, 0x804040bf, x4, 16, x5)

inst_14:
// rs1==x23, rs2==x29, rd==x22, rs2_b3_val == 64, rs2_b1_val == 2, rs1_b2_val == 247
// opcode: umul8 ; op1:x23; op2:x29; dest:x22; op1val:0x06f7bf11;  op2val:0x4040020e
TEST_P64_PNN_OP(umul8, x22, x23, x23, x29, 0x00000000, 0, 0x06f7bf11, 0x4040020e, x4, 24, x5)

inst_15:
// rs1==x11, rs2==x22, rs2_b3_val == 32, rs1_b0_val == 127, rs1_b1_val == 32, rs2_b0_val == 128
// opcode: umul8 ; op1:x11; op2:x22; dest:x18; op1val:0x080a207f;  op2val:0x20094080
TEST_P64_PNN_OP(umul8, x18, x19, x11, x22, 0x00000000, 0, 0x080a207f, 0x20094080, x4, 32, x5)

inst_16:
// rs1==x8, rs2==x7, rs2_b3_val == 16, rs1_b1_val == 8, rs2_b0_val == 2, rs2_b2_val == 85, rs1_b2_val == 4, rs2_b1_val == 16
// opcode: umul8 ; op1:x8; op2:x7; dest:x2; op1val:0xaa04087f;  op2val:0x10551002
TEST_P64_PNN_OP(umul8, x2, x3, x8, x7, 0x00000000, 0, 0xaa04087f, 0x10551002, x4, 40, x5)

inst_17:
// rs1==x13, rs2==x19, rs2_b3_val == 8, 
// opcode: umul8 ; op1:x13; op2:x19; dest:x22; op1val:0x0e020f03;  op2val:0x080f800d
TEST_P64_PNN_OP(umul8, x22, x23, x13, x19, 0x00000000, 0, 0x0e020f03, 0x080f800d, x4, 48, x5)

inst_18:
// rs1==x15, rs2==x17, rs2_b3_val == 4, 
// opcode: umul8 ; op1:x15; op2:x17; dest:x22; op1val:0x0c000a04;  op2val:0x04110bbf
TEST_P64_PNN_OP(umul8, x22, x23, x15, x17, 0x00000000, 0, 0x0c000a04, 0x04110bbf, x4, 56, x5)

inst_19:
// rs1==x0, rs2==x31, rs2_b3_val == 2, rs2_b2_val == 1, rs1_b2_val == 128
// opcode: umul8 ; op1:x0; op2:x31; dest:x18; op1val:0x10800ef7;  op2val:0x02010e0c
TEST_P64_PNN_OP(umul8, x18, x19, x0, x31, 0x00000000, 0, 0x10800ef7, 0x02010e0c, x4, 64, x5)

inst_20:
// rs1==x19, rs2==x26, rs2_b3_val == 1, rs1_b0_val == 170, rs1_b2_val == 170, rs2_b0_val == 1, rs2_b1_val == 247
// opcode: umul8 ; op1:x19; op2:x26; dest:x14; op1val:0x20aa08aa;  op2val:0x0103f701
TEST_P64_PNN_OP(umul8, x14, x15, x19, x26, 0x00000000, 0, 0x20aa08aa, 0x0103f701, x4, 72, x5)

inst_21:
// rs1==x10, rs2==x24, rs2_b3_val == 0, rs1_b3_val == 253, rs1_b1_val == 170
// opcode: umul8 ; op1:x10; op2:x24; dest:x14; op1val:0xfd0aaa02;  op2val:0x00200a0c
TEST_P64_PNN_OP(umul8, x14, x15, x10, x24, 0x00000000, 0, 0xfd0aaa02, 0x00200a0c, x4, 80, x5)

inst_22:
// rs1==x25, rs2==x6, rs2_b2_val == 170, rs2_b1_val == 1, rs2_b0_val == 253
// opcode: umul8 ; op1:x25; op2:x6; dest:x18; op1val:0x200e0efe;  op2val:0xbfaa01fd
TEST_P64_PNN_OP(umul8, x18, x19, x25, x6, 0x00000000, 0, 0x200e0efe, 0xbfaa01fd, x4, 88, x5)

inst_23:
// rs1==x18, rs2==x12, rs2_b2_val == 127, rs1_b1_val == 1
// opcode: umul8 ; op1:x18; op2:x12; dest:x30; op1val:0xfd110113;  op2val:0x0b7f100e
TEST_P64_PNN_OP(umul8, x30, x31, x18, x12, 0x00000000, 0, 0xfd110113, 0x0b7f100e, x4, 96, x5)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_24:
// rs1==x28, rs2==x25, rs2_b2_val == 191, rs1_b3_val == 247
// opcode: umul8 ; op1:x28; op2:x25; dest:x14; op1val:0xf7aa0104;  op2val:0x13bf4007
TEST_P64_PNN_OP(umul8, x14, x15, x28, x25, 0x00000000, 0, 0xf7aa0104, 0x13bf4007, x1, 0, x4)

inst_25:
// rs1==x22, rs2==x30, rs2_b2_val == 223, rs1_b3_val == 254, rs1_b2_val == 239
// opcode: umul8 ; op1:x22; op2:x30; dest:x6; op1val:0xfeef087f;  op2val:0x11df0f07
TEST_P64_PNN_OP(umul8, x6, x7, x22, x30, 0x00000000, 0, 0xfeef087f, 0x11df0f07, x1, 8, x4)

inst_26:
// rs1==x5, rs2==x2, rs1_b1_val == 85, rs2_b0_val == 239, rs2_b2_val == 254
// opcode: umul8 ; op1:x5; op2:x2; dest:x16; op1val:0x0eaa55aa;  op2val:0xeffe12ef
TEST_P64_PNN_OP(umul8, x16, x17, x5, x2, 0x00000000, 0, 0x0eaa55aa, 0xeffe12ef, x1, 16, x4)

inst_27:
// rs1==x26, rs2==x27, rs1_b1_val == 127, rs2_b1_val == 127, rs2_b0_val == 251, rs1_b3_val == 239
// opcode: umul8 ; op1:x26; op2:x27; dest:x24; op1val:0xef037f03;  op2val:0x7f037ffb
TEST_P64_PNN_OP(umul8, x24, x25, x26, x27, 0x00000000, 0, 0xef037f03, 0x7f037ffb, x1, 24, x4)

inst_28:
// rs1==x17, rs2==x13, rs1_b1_val == 223, 
// opcode: umul8 ; op1:x17; op2:x13; dest:x28; op1val:0x110fdf0a;  op2val:0x08aa0313
TEST_P64_PNN_OP(umul8, x28, x29, x17, x13, 0x00000000, 0, 0x110fdf0a, 0x08aa0313, x1, 32, x4)

inst_29:
// rs1==x12, rs2==x15, rs1_b1_val == 239, rs1_b0_val == 64, rs2_b0_val == 16
// opcode: umul8 ; op1:x12; op2:x15; dest:x18; op1val:0x06dfef40;  op2val:0xf7df0c10
TEST_P64_PNN_OP(umul8, x18, x19, x12, x15, 0x00000000, 0, 0x06dfef40, 0xf7df0c10, x1, 40, x4)

inst_30:
// rs1==x21, rs2==x14, rs1_b1_val == 251, rs2_b0_val == 32, rs2_b2_val == 16, rs1_b2_val == 254
// opcode: umul8 ; op1:x21; op2:x14; dest:x26; op1val:0xeffefb03;  op2val:0xfd100f20
TEST_P64_PNN_OP(umul8, x26, x27, x21, x14, 0x00000000, 0, 0xeffefb03, 0xfd100f20, x1, 48, x4)

inst_31:
// rs1==x3, rs2==x18, rs1_b1_val == 254, 
// opcode: umul8 ; op1:x3; op2:x18; dest:x24; op1val:0xdfaafe01;  op2val:0x1307f7aa
TEST_P64_PNN_OP(umul8, x24, x25, x3, x18, 0x00000000, 0, 0xdfaafe01, 0x1307f7aa, x1, 56, x4)

inst_32:
// rs1_b1_val == 64, rs2_b1_val == 4, rs2_b2_val == 247
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x05fb4011;  op2val:0x10f7040f
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x05fb4011, 0x10f7040f, x1, 64, x4)

inst_33:
// rs1_b1_val == 16, rs1_b3_val == 255
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xff03100a;  op2val:0x0cbf0508
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xff03100a, 0x0cbf0508, x1, 72, x4)

inst_34:
// rs1_b1_val == 2, rs1_b0_val == 251
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfb1202fb;  op2val:0x0efedf08
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xfb1202fb, 0x0efedf08, x1, 80, x4)

inst_35:
// rs1_b0_val == 85, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xff400e55;  op2val:0xfd0b0702
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xff400e55, 0xfd0b0702, x1, 88, x4)

inst_36:
// rs1_b0_val == 223, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfd0d06df;  op2val:0x05020dbf
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xfd0d06df, 0x05020dbf, x1, 96, x4)

inst_37:
// rs1_b0_val == 239, rs2_b2_val == 239
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0c1209ef;  op2val:0x0cef0305
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0c1209ef, 0x0cef0305, x1, 104, x4)

inst_38:
// rs1_b0_val == 128, rs1_b3_val == 128
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x80efaa80;  op2val:0x01fe050f
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x80efaa80, 0x01fe050f, x1, 112, x4)

inst_39:
// rs1_b0_val == 32, rs2_b2_val == 0
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xffdf4020;  op2val:0x0a00df11
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xffdf4020, 0x0a00df11, x1, 120, x4)

inst_40:
// rs2_b1_val == 0, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0d0f5512;  op2val:0x100a0004
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0d0f5512, 0x100a0004, x1, 128, x4)

inst_41:
// rs2_b0_val == 85, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0d400312;  op2val:0x06120b55
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0d400312, 0x06120b55, x1, 136, x4)

inst_42:
// rs2_b0_val == 127, rs2_b1_val == 170
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfb098003;  op2val:0x0cdfaa7f
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xfb098003, 0x0cdfaa7f, x1, 144, x4)

inst_43:
// rs2_b0_val == 254, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfb051155;  op2val:0x01050ffe
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xfb051155, 0x01050ffe, x1, 152, x4)

inst_44:
// rs2_b0_val == 255, rs1_b3_val == 85, rs2_b2_val == 128
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x55ff11aa;  op2val:0x048004ff
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x55ff11aa, 0x048004ff, x1, 160, x4)

inst_45:
// rs2_b0_val == 0, rs2_b2_val == 4, rs1_b2_val == 127
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x047f1102;  op2val:0x7f040900
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x047f1102, 0x7f040900, x1, 168, x4)

inst_46:
// rs1_b3_val == 127, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x7f0b1306;  op2val:0x070501ef
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x7f0b1306, 0x070501ef, x1, 176, x4)

inst_47:
// rs1_b3_val == 191, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xbfdf0cff;  op2val:0x0a004008
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xbfdf0cff, 0x0a004008, x1, 184, x4)

inst_48:
// rs1_b0_val == 16, rs1_b2_val == 85
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0f55f710;  op2val:0x08090def
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0f55f710, 0x08090def, x1, 192, x4)

inst_49:
// rs2_b2_val == 251, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x090510df;  op2val:0xfdfb000e
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x090510df, 0xfdfb000e, x1, 200, x4)

inst_50:
// rs1_b3_val == 64, rs2_b1_val == 8
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x40001107;  op2val:0xff80080b
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x40001107, 0xff80080b, x1, 208, x4)

inst_51:
// rs2_b1_val == 254, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xef130309;  op2val:0x057ffe0c
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xef130309, 0x057ffe0c, x1, 216, x4)

inst_52:
// rs1_b3_val == 2, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x02040107;  op2val:0x11400c0d
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x02040107, 0x11400c0d, x1, 224, x4)

inst_53:
// rs2_b2_val == 8, rs2_b1_val == 239
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf7011110;  op2val:0x0e08ef80
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xf7011110, 0x0e08ef80, x1, 232, x4)

inst_54:
// rs1_b3_val == 0, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0080550f;  op2val:0x0ebf0ddf
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0080550f, 0x0ebf0ddf, x1, 240, x4)

inst_55:
// rs2_b1_val == 191, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0afe0302;  op2val:0xfb0ebf07
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0afe0302, 0xfb0ebf07, x1, 248, x4)

inst_56:
// rs1_b2_val == 253, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0ffdef12;  op2val:0x01fbf702
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0ffdef12, 0x01fbf702, x1, 256, x4)

inst_57:
// rs2_b1_val == 251, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xf70303bf;  op2val:0xfb0bfb20
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xf70303bf, 0xfb0bfb20, x1, 264, x4)

inst_58:
// rs1_b2_val == 16, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x4010ef05;  op2val:0xbf550802
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x4010ef05, 0xbf550802, x1, 272, x4)

inst_59:
// rs1_b2_val == 8, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x01088040;  op2val:0x55ef0255
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x01088040, 0x55ef0255, x1, 280, x4)

inst_60:
// rs2_b1_val == 32, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xff030b03;  op2val:0x200d2005
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xff030b03, 0x200d2005, x1, 288, x4)

inst_61:
// rs2_b2_val == 255, 
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x0b2000fb;  op2val:0x07ff0a12
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x0b2000fb, 0x07ff0a12, x1, 296, x4)

inst_62:
// rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b1_val == 255, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 8, rs1_b2_val == 1
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x08010300;  op2val:0x030eff03
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x08010300, 0x030eff03, x1, 304, x4)

inst_63:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 251, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 253, rs2_b2_val == 2, rs2_b3_val == 251, rs1_b0_val == 247
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0xfb12fdf7;  op2val:0xfb02030e
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0xfb12fdf7, 0xfb02030e, x1, 312, x4)

inst_64:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 64, rs1_b0_val == 253
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x030e0efd;  op2val:0x0f0d0e40
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x030e0efd, 0x0f0d0e40, x1, 320, x4)

inst_65:
// rs2_b3_val == 2, rs2_b2_val == 1, rs1_b2_val == 128
// opcode: umul8 ; op1:x31; op2:x29; dest:x30; op1val:0x10800ef7;  op2val:0x02010e0c
TEST_P64_PNN_OP(umul8, x30, x31, x31, x29, 0x00000000, 0, 0x10800ef7, 0x02010e0c, x1, 328, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 84*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
