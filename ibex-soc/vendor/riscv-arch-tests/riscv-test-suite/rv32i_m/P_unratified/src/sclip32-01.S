
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sclip32 instruction of the RISC-V RV32PZicsr extension for the sclip32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sclip32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 != rd, rs1==x14, rd==x27, rs1_w0_val == -2147483648, imm_val == 24
// opcode: sclip32 ; op1:x14; dest:x27; op1val:0x80000000;  immval:0x18
TEST_PKIMM_OP( sclip32, x27, x14, 0x00000000, 0x80000000, 0x18, x14, x2, 0, x16)

inst_1:
// rs1 == rd, rs1==x5, rd==x5, imm_val == 31, 
// opcode: sclip32 ; op1:x5; dest:x5; op1val:0x000009;  immval:0x1f
TEST_PKIMM_OP( sclip32, x5, x5, 0x00000000, 0x000009, 0x1f, x5, x2, 8, x16)

inst_2:
// rs1==x31, rd==x9, imm_val == 30, rs1_w0_val == 4194304
// opcode: sclip32 ; op1:x31; dest:x9; op1val:0x400000;  immval:0x1e
TEST_PKIMM_OP( sclip32, x9, x31, 0x00000000, 0x400000, 0x1e, x31, x2, 16, x16)

inst_3:
// rs1==x8, rd==x17, imm_val == 29, 
// opcode: sclip32 ; op1:x8; dest:x17; op1val:0x000009;  immval:0x1d
TEST_PKIMM_OP( sclip32, x17, x8, 0x00000000, 0x000009, 0x1d, x8, x2, 24, x16)

inst_4:
// rs1==x12, rd==x31, imm_val == 28, rs1_w0_val == -1048577
// opcode: sclip32 ; op1:x12; dest:x31; op1val:0xffefffff;  immval:0x1c
TEST_PKIMM_OP( sclip32, x31, x12, 0x00000000, 0xffefffff, 0x1c, x12, x2, 32, x16)

inst_5:
// rs1==x10, rd==x11, imm_val == 27, rs1_w0_val == -33
// opcode: sclip32 ; op1:x10; dest:x11; op1val:0xffffffdf;  immval:0x1b
TEST_PKIMM_OP( sclip32, x11, x10, 0x00000000, 0xffffffdf, 0x1b, x10, x2, 40, x16)

inst_6:
// rs1==x4, rd==x3, imm_val == 26, rs1_w0_val == -131073
// opcode: sclip32 ; op1:x4; dest:x3; op1val:0xfffdffff;  immval:0x1a
TEST_PKIMM_OP( sclip32, x3, x4, 0x00000000, 0xfffdffff, 0x1a, x4, x2, 48, x16)

inst_7:
// rs1==x11, rd==x10, imm_val == 25, rs1_w0_val == -5
// opcode: sclip32 ; op1:x11; dest:x10; op1val:0xfffffffb;  immval:0x19
TEST_PKIMM_OP( sclip32, x10, x11, 0x00000000, 0xfffffffb, 0x19, x11, x2, 56, x16)

inst_8:
// rs1==x7, rd==x0, imm_val == 23, rs1_w0_val == -2049
// opcode: sclip32 ; op1:x7; dest:x0; op1val:0xfffff7ff;  immval:0x17
TEST_PKIMM_OP( sclip32, x0, x7, 0x00000000, 0xfffff7ff, 0x17, x7, x2, 64, x16)

inst_9:
// rs1==x6, rd==x1, imm_val == 22, rs1_w0_val == 1048576
// opcode: sclip32 ; op1:x6; dest:x1; op1val:0x100000;  immval:0x16
TEST_PKIMM_OP( sclip32, x1, x6, 0x00000000, 0x100000, 0x16, x6, x2, 72, x16)

inst_10:
// rs1==x13, rd==x29, imm_val == 21, rs1_w0_val == 8388608
// opcode: sclip32 ; op1:x13; dest:x29; op1val:0x800000;  immval:0x15
TEST_PKIMM_OP( sclip32, x29, x13, 0x00000000, 0x800000, 0x15, x13, x2, 80, x16)

inst_11:
// rs1==x30, rd==x18, imm_val == 20, 
// opcode: sclip32 ; op1:x30; dest:x18; op1val:0xfffffff8;  immval:0x14
TEST_PKIMM_OP( sclip32, x18, x30, 0x00000000, 0xfffffff8, 0x14, x30, x2, 88, x16)

inst_12:
// rs1==x27, rd==x6, imm_val == 19, rs1_w0_val == 1431655765
// opcode: sclip32 ; op1:x27; dest:x6; op1val:0x55555555;  immval:0x13
TEST_PKIMM_OP( sclip32, x6, x27, 0x00000000, 0x55555555, 0x13, x27, x2, 96, x16)

inst_13:
// rs1==x26, rd==x23, imm_val == 18, rs1_w0_val == -8388609
// opcode: sclip32 ; op1:x26; dest:x23; op1val:0xff7fffff;  immval:0x12
TEST_PKIMM_OP( sclip32, x23, x26, 0x00000000, 0xff7fffff, 0x12, x26, x2, 104, x16)

inst_14:
// rs1==x23, rd==x12, imm_val == 17, rs1_w0_val == -134217729
// opcode: sclip32 ; op1:x23; dest:x12; op1val:0xf7ffffff;  immval:0x11
TEST_PKIMM_OP( sclip32, x12, x23, 0x00000000, 0xf7ffffff, 0x11, x23, x2, 112, x16)

inst_15:
// rs1==x19, rd==x15, imm_val == 16, 
// opcode: sclip32 ; op1:x19; dest:x15; op1val:0xc0000000;  immval:0x10
TEST_PKIMM_OP( sclip32, x15, x19, 0x00000000, 0xc0000000, 0x10, x19, x2, 120, x16)

inst_16:
// rs1==x28, rd==x22, imm_val == 15, 
// opcode: sclip32 ; op1:x28; dest:x22; op1val:0x400000;  immval:0xf
TEST_PKIMM_OP( sclip32, x22, x28, 0x00000000, 0x400000, 0xf, x28, x2, 128, x16)

inst_17:
// rs1==x3, rd==x14, imm_val == 14, rs1_w0_val == -8193
// opcode: sclip32 ; op1:x3; dest:x14; op1val:0xffffdfff;  immval:0xe
TEST_PKIMM_OP( sclip32, x14, x3, 0x00000000, 0xffffdfff, 0xe, x3, x2, 136, x16)

inst_18:
// rs1==x15, rd==x24, imm_val == 13, rs1_w0_val == -33554433
// opcode: sclip32 ; op1:x15; dest:x24; op1val:0xfdffffff;  immval:0xd
TEST_PKIMM_OP( sclip32, x24, x15, 0x00000000, 0xfdffffff, 0xd, x15, x2, 144, x16)

inst_19:
// rs1==x20, rd==x26, imm_val == 12, rs1_w0_val == 65536
// opcode: sclip32 ; op1:x20; dest:x26; op1val:0x010000;  immval:0xc
TEST_PKIMM_OP( sclip32, x26, x20, 0x00000000, 0x010000, 0xc, x20, x2, 152, x16)

inst_20:
// rs1==x21, rd==x16, imm_val == 11, 
// opcode: sclip32 ; op1:x21; dest:x16; op1val:0x010000;  immval:0xb
TEST_PKIMM_OP( sclip32, x16, x21, 0x00000000, 0x010000, 0xb, x21, x2, 160, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x9, rd==x25, imm_val == 10, rs1_w0_val == 536870912
// opcode: sclip32 ; op1:x9; dest:x25; op1val:0x20000000;  immval:0xa
TEST_PKIMM_OP( sclip32, x25, x9, 0x00000000, 0x20000000, 0xa, x9, x3, 0, x5)

inst_22:
// rs1==x25, rd==x30, imm_val == 9, rs1_w0_val == -67108865
// opcode: sclip32 ; op1:x25; dest:x30; op1val:0xfbffffff;  immval:0x9
TEST_PKIMM_OP( sclip32, x30, x25, 0x00000000, 0xfbffffff, 0x9, x25, x3, 8, x5)

inst_23:
// rs1==x0, rd==x21, imm_val == 8, rs1_w0_val == -2
// opcode: sclip32 ; op1:x0; dest:x21; op1val:0xfffffffe;  immval:0x8
TEST_PKIMM_OP( sclip32, x21, x0, 0x00000000, 0xfffffffe, 0x8, x0, x3, 16, x5)

inst_24:
// rs1==x17, rd==x2, imm_val == 7, 
// opcode: sclip32 ; op1:x17; dest:x2; op1val:0x3fffffff;  immval:0x7
TEST_PKIMM_OP( sclip32, x2, x17, 0x00000000, 0x3fffffff, 0x7, x17, x3, 24, x5)

inst_25:
// rs1==x18, rd==x13, imm_val == 6, rs1_w0_val == -1025
// opcode: sclip32 ; op1:x18; dest:x13; op1val:0xfffffbff;  immval:0x6
TEST_PKIMM_OP( sclip32, x13, x18, 0x00000000, 0xfffffbff, 0x6, x18, x3, 32, x5)

inst_26:
// rs1==x2, rd==x19, imm_val == 5, 
// opcode: sclip32 ; op1:x2; dest:x19; op1val:0x3fffffff;  immval:0x5
TEST_PKIMM_OP( sclip32, x19, x2, 0x00000000, 0x3fffffff, 0x5, x2, x3, 40, x5)

inst_27:
// rs1==x29, rd==x20, imm_val == 4, rs1_w0_val == -65
// opcode: sclip32 ; op1:x29; dest:x20; op1val:0xffffffbf;  immval:0x4
TEST_PKIMM_OP( sclip32, x20, x29, 0x00000000, 0xffffffbf, 0x4, x29, x3, 48, x5)

inst_28:
// rs1==x22, rd==x28, imm_val == 3, rs1_w0_val == -9
// opcode: sclip32 ; op1:x22; dest:x28; op1val:0xfffffff7;  immval:0x3
TEST_PKIMM_OP( sclip32, x28, x22, 0x00000000, 0xfffffff7, 0x3, x22, x3, 56, x5)

inst_29:
// rs1==x1, rd==x4, imm_val == 2, rs1_w0_val == -4194305
// opcode: sclip32 ; op1:x1; dest:x4; op1val:0xffbfffff;  immval:0x2
TEST_PKIMM_OP( sclip32, x4, x1, 0x00000000, 0xffbfffff, 0x2, x1, x3, 64, x5)

inst_30:
// rs1==x16, rd==x8, imm_val == 1, rs1_w0_val == 16384
// opcode: sclip32 ; op1:x16; dest:x8; op1val:0x004000;  immval:0x1
TEST_PKIMM_OP( sclip32, x8, x16, 0x00000000, 0x004000, 0x1, x16, x3, 72, x5)

inst_31:
// rs1==x24, rd==x7, imm_val == 0, 
// opcode: sclip32 ; op1:x24; dest:x7; op1val:0x20000000;  immval:0x0
TEST_PKIMM_OP( sclip32, x7, x24, 0x00000000, 0x20000000, 0x0, x24, x3, 80, x5)

inst_32:
// rs1_w0_val == -1431655766, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa;  immval:0xb
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xaaaaaaaa, 0xb, x30, x3, 88, x5)

inst_33:
// rs1_w0_val == 2147483647, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x7fffffff;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x7fffffff, 0x1, x30, x3, 96, x5)

inst_34:
// rs1_w0_val == -1073741825, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xbfffffff;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xbfffffff, 0x17, x30, x3, 104, x5)

inst_35:
// rs1_w0_val == -536870913, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xdfffffff;  immval:0x12
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xdfffffff, 0x12, x30, x3, 112, x5)

inst_36:
// rs1_w0_val == -268435457, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xefffffff;  immval:0x18
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xefffffff, 0x18, x30, x3, 120, x5)

inst_37:
// rs1_w0_val == -16777217, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfeffffff;  immval:0x18
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfeffffff, 0x18, x30, x3, 128, x5)

inst_38:
// rs1_w0_val == -2097153, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffdfffff;  immval:0x14
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffdfffff, 0x14, x30, x3, 136, x5)

inst_39:
// rs1_w0_val == -524289, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfff7ffff;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfff7ffff, 0x15, x30, x3, 144, x5)

inst_40:
// rs1_w0_val == -262145, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffbffff;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffbffff, 0x19, x30, x3, 152, x5)

inst_41:
// rs1_w0_val == -65537, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffeffff;  immval:0x1e
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffeffff, 0x1e, x30, x3, 160, x5)

inst_42:
// rs1_w0_val == -32769, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffff7fff;  immval:0x5
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffff7fff, 0x5, x30, x3, 168, x5)

inst_43:
// rs1_w0_val == -16385, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffbfff;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffffbfff, 0x19, x30, x3, 176, x5)

inst_44:
// rs1_w0_val == -4097, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffefff;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffffefff, 0x1, x30, x3, 184, x5)

inst_45:
// rs1_w0_val == -513, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffdff;  immval:0x12
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffffdff, 0x12, x30, x3, 192, x5)

inst_46:
// rs1_w0_val == -3, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffd;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffffffd, 0x6, x30, x3, 200, x5)

inst_47:
// rs1_w0_val == 1073741824, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x40000000;  immval:0x11
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x40000000, 0x11, x30, x3, 208, x5)

inst_48:
// rs1_w0_val == 268435456, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x10000000;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x10000000, 0x17, x30, x3, 216, x5)

inst_49:
// rs1_w0_val == 134217728, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x8000000;  immval:0x14
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x8000000, 0x14, x30, x3, 224, x5)

inst_50:
// rs1_w0_val == 67108864, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x4000000;  immval:0x7
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x4000000, 0x7, x30, x3, 232, x5)

inst_51:
// rs1_w0_val == 33554432, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x2000000;  immval:0x1d
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x2000000, 0x1d, x30, x3, 240, x5)

inst_52:
// rs1_w0_val == 16777216, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x1000000;  immval:0xf
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x1000000, 0xf, x30, x3, 248, x5)

inst_53:
// rs1_w0_val == 2097152, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x200000;  immval:0x0
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x200000, 0x0, x30, x3, 256, x5)

inst_54:
// rs1_w0_val == 524288, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x080000;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x080000, 0x3, x30, x3, 264, x5)

inst_55:
// rs1_w0_val == 262144, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x040000;  immval:0xc
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x040000, 0xc, x30, x3, 272, x5)

inst_56:
// rs1_w0_val == 131072, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x020000;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x020000, 0x15, x30, x3, 280, x5)

inst_57:
// rs1_w0_val == 32768, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x008000;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x008000, 0x6, x30, x3, 288, x5)

inst_58:
// rs1_w0_val == 8192, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x002000;  immval:0xe
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x002000, 0xe, x30, x3, 296, x5)

inst_59:
// rs1_w0_val == 4096, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x001000;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x001000, 0x3, x30, x3, 304, x5)

inst_60:
// rs1_w0_val == 2048, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000800;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000800, 0x3, x30, x3, 312, x5)

inst_61:
// rs1_w0_val == 1024, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000400;  immval:0xb
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000400, 0xb, x30, x3, 320, x5)

inst_62:
// rs1_w0_val == 2, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000002;  immval:0x1b
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000002, 0x1b, x30, x3, 328, x5)

inst_63:
// rs1_w0_val == 1, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000001;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000001, 0x8, x30, x3, 336, x5)

inst_64:
// rs1_w0_val == 0, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000000;  immval:0x16
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000000, 0x16, x30, x3, 344, x5)

inst_65:
// rs1_w0_val == -1, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffff;  immval:0xf
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffffffff, 0xf, x30, x3, 352, x5)

inst_66:
// rs1_w0_val == -257, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffeff;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffffeff, 0x19, x30, x3, 360, x5)

inst_67:
// rs1_w0_val == 64, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000040;  immval:0xd
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000040, 0xd, x30, x3, 368, x5)

inst_68:
// rs1_w0_val == -17, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffef;  immval:0x14
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffffffef, 0x14, x30, x3, 376, x5)

inst_69:
// rs1_w0_val == 512, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000200;  immval:0xf
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000200, 0xf, x30, x3, 384, x5)

inst_70:
// rs1_w0_val == 256, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000100;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000100, 0x6, x30, x3, 392, x5)

inst_71:
// rs1_w0_val == 128, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000080;  immval:0x1a
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000080, 0x1a, x30, x3, 400, x5)

inst_72:
// rs1_w0_val == -129, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffff7f;  immval:0x9
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xffffff7f, 0x9, x30, x3, 408, x5)

inst_73:
// rs1_w0_val == 32, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000020;  immval:0xa
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000020, 0xa, x30, x3, 416, x5)

inst_74:
// rs1_w0_val == 16, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000010;  immval:0xa
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000010, 0xa, x30, x3, 424, x5)

inst_75:
// rs1_w0_val == 8, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000008;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000008, 0x15, x30, x3, 432, x5)

inst_76:
// rs1_w0_val == 4, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000004;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0x000004, 0x8, x30, x3, 440, x5)

inst_77:
// imm_val == 23, rs1_w0_val == -2049
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffff7ff;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffff7ff, 0x17, x30, x3, 448, x5)

inst_78:
// imm_val == 8, rs1_w0_val == -2
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffe;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x00000000, 0xfffffffe, 0x8, x30, x3, 456, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 116*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
