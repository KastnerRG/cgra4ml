
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabb instruction of the RISC-V RV32PZicsr extension for the kdmabb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x14, rd==x22, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs2_h1_val == 512, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8, rs1_h1_val == 1
// opcode: kdmabb ; op1:x15; op2:x14; dest:x22; op1val:0x018000;  op2val:0x2000008
TEST_PKRR_OP(kdmabb, x22, x15, x14, 0x00000000, 0x018000, 0x2000008, x15, x4, 0, x20)

inst_1:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x25, rs1_h1_val == rs2_h1_val, rs1_h0_val == -2, rs2_h0_val == 8192, rs2_h1_val == 1
// opcode: kdmabb ; op1:x22; op2:x22; dest:x25; op1val:0x01fffe;  op2val:0x012000
TEST_PKRR_OP(kdmabb, x25, x22, x22, 0x00000000, 0x01fffe, 0x012000, x22, x4, 8, x20)

inst_2:
// rs1 == rd != rs2, rs1==x6, rs2==x17, rd==x6, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -9, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -9
// opcode: kdmabb ; op1:x6; op2:x17; dest:x6; op1val:0xfff70009;  op2val:0x07fff7
TEST_PKRR_OP(kdmabb, x6, x6, x17, 0x00000000, 0xfff70009, 0x07fff7, x6, x4, 16, x20)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs2_h1_val == -17, rs2_h0_val == 16
// opcode: kdmabb ; op1:x18; op2:x18; dest:x18; op1val:0xbffffff6;  op2val:0xffef0010
TEST_PKRR_OP(kdmabb, x18, x18, x18, 0x00000000, 0xbffffff6, 0xffef0010, x18, x4, 24, x20)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x16, rd==x16, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -21846
// opcode: kdmabb ; op1:x31; op2:x16; dest:x16; op1val:0x090006;  op2val:0xaaaa0005
TEST_PKRR_OP(kdmabb, x16, x31, x16, 0x00000000, 0x090006, 0xaaaa0005, x31, x4, 32, x20)

inst_5:
// rs1==x16, rs2==x12, rd==x11, rs1_h0_val == rs2_h0_val, rs1_h0_val == -33, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == 1024, rs2_h1_val == -3, rs2_h0_val == -33
// opcode: kdmabb ; op1:x16; op2:x12; dest:x11; op1val:0x400ffdf;  op2val:0xfffdffdf
TEST_PKRR_OP(kdmabb, x11, x16, x12, 0x00000000, 0x400ffdf, 0xfffdffdf, x16, x4, 40, x20)

inst_6:
// rs1==x7, rs2==x15, rd==x1, rs2_h1_val == 21845, rs1_h0_val == 512, rs2_h0_val == -129
// opcode: kdmabb ; op1:x7; op2:x15; dest:x1; op1val:0x010200;  op2val:0x5555ff7f
TEST_PKRR_OP(kdmabb, x1, x7, x15, 0x00000000, 0x010200, 0x5555ff7f, x7, x4, 48, x20)

inst_7:
// rs1==x19, rs2==x7, rd==x26, rs2_h1_val == 32767, rs2_h0_val == 2, rs1_h1_val == -33
// opcode: kdmabb ; op1:x19; op2:x7; dest:x26; op1val:0xffdf0003;  op2val:0x7fff0002
TEST_PKRR_OP(kdmabb, x26, x19, x7, 0x00000000, 0xffdf0003, 0x7fff0002, x19, x4, 56, x20)

inst_8:
// rs1==x26, rs2==x9, rd==x30, rs2_h1_val == -16385, rs1_h0_val == -5, rs2_h0_val == 0, rs1_h1_val == -257
// opcode: kdmabb ; op1:x26; op2:x9; dest:x30; op1val:0xfefffffb;  op2val:0xbfff0000
TEST_PKRR_OP(kdmabb, x30, x26, x9, 0x00000000, 0xfefffffb, 0xbfff0000, x26, x4, 64, x20)

inst_9:
// rs1==x30, rs2==x2, rd==x28, rs2_h1_val == -8193, rs1_h1_val == 16384, rs2_h0_val == -513, rs1_h0_val == 256
// opcode: kdmabb ; op1:x30; op2:x2; dest:x28; op1val:0x40000100;  op2val:0xdffffdff
TEST_PKRR_OP(kdmabb, x28, x30, x2, 0x00000000, 0x40000100, 0xdffffdff, x30, x4, 72, x20)

inst_10:
// rs1==x21, rs2==x11, rd==x13, rs2_h1_val == -4097, rs2_h0_val == -2, rs1_h0_val == 8192
// opcode: kdmabb ; op1:x21; op2:x11; dest:x13; op1val:0xc0002000;  op2val:0xeffffffe
TEST_PKRR_OP(kdmabb, x13, x21, x11, 0x00000000, 0xc0002000, 0xeffffffe, x21, x4, 80, x20)

inst_11:
// rs1==x14, rs2==x3, rd==x9, rs2_h1_val == -2049, rs2_h0_val == 2048
// opcode: kdmabb ; op1:x14; op2:x3; dest:x9; op1val:0x09fffb;  op2val:0xf7ff0800
TEST_PKRR_OP(kdmabb, x9, x14, x3, 0x00000000, 0x09fffb, 0xf7ff0800, x14, x4, 88, x20)

inst_12:
// rs1==x13, rs2==x28, rd==x5, rs2_h1_val == -1025, rs1_h0_val == -16385, rs1_h1_val == -513
// opcode: kdmabb ; op1:x13; op2:x28; dest:x5; op1val:0xfdffbfff;  op2val:0xfbff0006
TEST_PKRR_OP(kdmabb, x5, x13, x28, 0x00000000, 0xfdffbfff, 0xfbff0006, x13, x4, 96, x20)

inst_13:
// rs1==x8, rs2==x13, rd==x0, rs2_h1_val == -513, rs1_h0_val == 4
// opcode: kdmabb ; op1:x8; op2:x13; dest:x0; op1val:0xfff90004;  op2val:0xfdfffffa
TEST_PKRR_OP(kdmabb, x0, x8, x13, 0x00000000, 0xfff90004, 0xfdfffffa, x8, x4, 104, x20)

inst_14:
// rs1==x5, rs2==x6, rd==x15, rs2_h1_val == -257, 
// opcode: kdmabb ; op1:x5; op2:x6; dest:x15; op1val:0xbffffffc;  op2val:0xfeff0008
TEST_PKRR_OP(kdmabb, x15, x5, x6, 0x00000000, 0xbffffffc, 0xfeff0008, x5, x4, 112, x20)

inst_15:
// rs1==x0, rs2==x10, rd==x17, rs2_h1_val == -129, rs2_h0_val == 1, rs1_h0_val == 4096
// opcode: kdmabb ; op1:x0; op2:x10; dest:x17; op1val:0x091000;  op2val:0xff7f0001
TEST_PKRR_OP(kdmabb, x17, x0, x10, 0x00000000, 0x091000, 0xff7f0001, x0, x4, 120, x20)

inst_16:
// rs1==x23, rs2==x29, rd==x10, rs2_h1_val == -65, rs1_h0_val == 16384, rs2_h0_val == -16385, rs1_h1_val == -32768
// opcode: kdmabb ; op1:x23; op2:x29; dest:x10; op1val:0x80004000;  op2val:0xffbfbfff
TEST_PKRR_OP(kdmabb, x10, x23, x29, 0x00000000, 0x80004000, 0xffbfbfff, x23, x4, 128, x20)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x2, rs2==x19, rd==x20, rs2_h1_val == -33, rs1_h1_val == 0
// opcode: kdmabb ; op1:x2; op2:x19; dest:x20; op1val:0x00fffa;  op2val:0xffdffff8
TEST_PKRR_OP(kdmabb, x20, x2, x19, 0x00000000, 0x00fffa, 0xffdffff8, x2, x6, 0, x13)

inst_18:
// rs1==x12, rs2==x25, rd==x21, rs2_h1_val == -9, rs1_h1_val == 4, rs1_h0_val == -9
// opcode: kdmabb ; op1:x12; op2:x25; dest:x21; op1val:0x04fff7;  op2val:0xfff70009
TEST_PKRR_OP(kdmabb, x21, x12, x25, 0x00000000, 0x04fff7, 0xfff70009, x12, x6, 8, x13)

inst_19:
// rs1==x24, rs2==x26, rd==x19, rs2_h1_val == -5, rs1_h0_val == 8, rs2_h0_val == 32767, rs1_h1_val == -2
// opcode: kdmabb ; op1:x24; op2:x26; dest:x19; op1val:0xfffe0008;  op2val:0xfffb7fff
TEST_PKRR_OP(kdmabb, x19, x24, x26, 0x00000000, 0xfffe0008, 0xfffb7fff, x24, x6, 16, x13)

inst_20:
// rs1==x28, rs2==x27, rd==x31, rs2_h1_val == -2, rs2_h0_val == -257, rs1_h1_val == -5
// opcode: kdmabb ; op1:x28; op2:x27; dest:x31; op1val:0xfffbfffa;  op2val:0xfffefeff
TEST_PKRR_OP(kdmabb, x31, x28, x27, 0x00000000, 0xfffbfffa, 0xfffefeff, x28, x6, 24, x13)

inst_21:
// rs1==x3, rs2==x1, rd==x29, rs2_h1_val == -32768, rs1_h1_val == 8
// opcode: kdmabb ; op1:x3; op2:x1; dest:x29; op1val:0x08ffdf;  op2val:0x80000002
TEST_PKRR_OP(kdmabb, x29, x3, x1, 0x00000000, 0x08ffdf, 0x80000002, x3, x6, 32, x13)

inst_22:
// rs1==x25, rs2==x31, rd==x8, rs2_h1_val == 16384, rs1_h0_val == -257, rs2_h0_val == 128
// opcode: kdmabb ; op1:x25; op2:x31; dest:x8; op1val:0x3ffffeff;  op2val:0x40000080
TEST_PKRR_OP(kdmabb, x8, x25, x31, 0x00000000, 0x3ffffeff, 0x40000080, x25, x6, 40, x13)

inst_23:
// rs1==x4, rs2==x30, rd==x2, rs2_h1_val == 8192, rs2_h0_val == 1024
// opcode: kdmabb ; op1:x4; op2:x30; dest:x2; op1val:0xfff6bfff;  op2val:0x20000400
TEST_PKRR_OP(kdmabb, x2, x4, x30, 0x00000000, 0xfff6bfff, 0x20000400, x4, x6, 48, x13)

inst_24:
// rs1==x9, rs2==x8, rd==x3, rs2_h1_val == 4096, rs1_h1_val == 32, rs2_h0_val == 32
// opcode: kdmabb ; op1:x9; op2:x8; dest:x3; op1val:0x200006;  op2val:0x10000020
TEST_PKRR_OP(kdmabb, x3, x9, x8, 0x00000000, 0x200006, 0x10000020, x9, x6, 56, x13)

inst_25:
// rs1==x29, rs2==x21, rd==x27, rs2_h1_val == 2048, rs1_h1_val == 21845, rs1_h0_val == 16, rs2_h0_val == -4097
// opcode: kdmabb ; op1:x29; op2:x21; dest:x27; op1val:0x55550010;  op2val:0x800efff
TEST_PKRR_OP(kdmabb, x27, x29, x21, 0x00000000, 0x55550010, 0x800efff, x29, x6, 64, x13)

inst_26:
// rs1==x10, rs2==x23, rd==x7, rs2_h1_val == 1024, rs1_h0_val == -513, rs2_h0_val == 16384
// opcode: kdmabb ; op1:x10; op2:x23; dest:x7; op1val:0xbffffdff;  op2val:0x4004000
TEST_PKRR_OP(kdmabb, x7, x10, x23, 0x00000000, 0xbffffdff, 0x4004000, x10, x6, 72, x13)

inst_27:
// rs1==x11, rs2==x24, rd==x14, rs2_h1_val == 256, rs1_h1_val == -3, rs2_h0_val == -8193, rs1_h0_val == -4097
// opcode: kdmabb ; op1:x11; op2:x24; dest:x14; op1val:0xfffdefff;  op2val:0x100dfff
TEST_PKRR_OP(kdmabb, x14, x11, x24, 0x00000000, 0xfffdefff, 0x100dfff, x11, x6, 80, x13)

inst_28:
// rs1==x27, rs2==x20, rd==x12, rs2_h1_val == 128, 
// opcode: kdmabb ; op1:x27; op2:x20; dest:x12; op1val:0x07feff;  op2val:0x803fff
TEST_PKRR_OP(kdmabb, x12, x27, x20, 0x00000000, 0x07feff, 0x803fff, x27, x6, 88, x13)

inst_29:
// rs1==x20, rs2==x5, rd==x4, rs1_h0_val == -1025, 
// opcode: kdmabb ; op1:x20; op2:x5; dest:x4; op1val:0xfffcfbff;  op2val:0x20000080
TEST_PKRR_OP(kdmabb, x4, x20, x5, 0x00000000, 0xfffcfbff, 0x20000080, x20, x6, 96, x13)

inst_30:
// rs1==x17, rs2==x0, rd==x23, rs1_h0_val == -129, 
// opcode: kdmabb ; op1:x17; op2:x0; dest:x23; op1val:0x01ff7f;  op2val:0x2000dfff
TEST_PKRR_OP(kdmabb, x23, x17, x0, 0x00000000, 0x01ff7f, 0x2000dfff, x17, x6, 104, x13)

inst_31:
// rs1==x1, rs2==x4, rd==x24, rs1_h0_val == -65, rs2_h1_val == -1, rs1_h1_val == 8192, rs2_h0_val == 64
// opcode: kdmabb ; op1:x1; op2:x4; dest:x24; op1val:0x2000ffbf;  op2val:0xffff0040
TEST_PKRR_OP(kdmabb, x24, x1, x4, 0x00000000, 0x2000ffbf, 0xffff0040, x1, x6, 112, x13)

inst_32:
// rs1_h0_val == -17, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x03ffef;  op2val:0xfffffeff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x03ffef, 0xfffffeff, x30, x6, 120, x13)

inst_33:
// rs1_h0_val == -3, rs2_h0_val == 256
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x06fffd;  op2val:0xfffc0100
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x06fffd, 0xfffc0100, x30, x6, 128, x13)

inst_34:
// rs1_h0_val == 2048, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x050800;  op2val:0x012000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x050800, 0x012000, x30, x6, 136, x13)

inst_35:
// rs1_h0_val == 1024, rs2_h0_val == 4096
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80000400;  op2val:0x051000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x80000400, 0x051000, x30, x6, 144, x13)

inst_36:
// rs1_h0_val == 128, rs1_h1_val == 256
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x1000080;  op2val:0x070008
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x1000080, 0x070008, x30, x6, 152, x13)

inst_37:
// rs1_h0_val == 64, rs1_h1_val == -1
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffff0040;  op2val:0x55550100
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffff0040, 0x55550100, x30, x6, 160, x13)

inst_38:
// rs1_h0_val == 32, rs2_h1_val == 32, rs1_h1_val == -4097
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020;  op2val:0x200003
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xefff0020, 0x200003, x30, x6, 168, x13)

inst_39:
// rs1_h0_val == 2, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff90002;  op2val:0x80003fff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xfff90002, 0x80003fff, x30, x6, 176, x13)

inst_40:
// rs1_h0_val == 1, rs1_h1_val == 16
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x100001;  op2val:0x5555fffe
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x100001, 0x5555fffe, x30, x6, 184, x13)

inst_41:
// rs1_h0_val == 0, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x040000;  op2val:0xfff6fff6
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x040000, 0xfff6fff6, x30, x6, 192, x13)

inst_42:
// rs1_h0_val == -1, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0x8000efff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xefffffff, 0x8000efff, x30, x6, 200, x13)

inst_43:
// rs2_h1_val == 64, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xc000ff7f;  op2val:0x402000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xc000ff7f, 0x402000, x30, x6, 208, x13)

inst_44:
// rs2_h1_val == 16, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x00fffe;  op2val:0x10fff8
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x00fffe, 0x10fff8, x30, x6, 216, x13)

inst_45:
// rs2_h1_val == 8, rs1_h0_val == -8193
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000dfff;  op2val:0x080002
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x2000dfff, 0x080002, x30, x6, 224, x13)

inst_46:
// rs2_h1_val == 4, rs1_h1_val == -65, rs2_h0_val == 21845
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbff;  op2val:0x045555
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffbffbff, 0x045555, x30, x6, 232, x13)

inst_47:
// rs2_h1_val == 2, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x010000;  op2val:0x020800
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x010000, 0x020800, x30, x6, 240, x13)

inst_48:
// rs2_h0_val == -5, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffb;  op2val:0x3ffffffb
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffbffffb, 0x3ffffffb, x30, x6, 248, x13)

inst_49:
// rs2_h0_val == -3, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x100002;  op2val:0x3ffffffd
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x100002, 0x3ffffffd, x30, x6, 256, x13)

inst_50:
// rs2_h0_val == -32768, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef;  op2val:0xfffe8000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xefffffef, 0xfffe8000, x30, x6, 264, x13)

inst_51:
// rs2_h0_val == 512, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x00fffc;  op2val:0xfff70200
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x00fffc, 0xfff70200, x30, x6, 272, x13)

inst_52:
// rs2_h0_val == 4, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x10ffdf;  op2val:0xdfff0004
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x10ffdf, 0xdfff0004, x30, x6, 280, x13)

inst_53:
// rs2_h0_val == -1, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0010;  op2val:0xfff8ffff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffdf0010, 0xfff8ffff, x30, x6, 288, x13)

inst_54:
// rs1_h1_val == -21846, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffc;  op2val:0x10000040
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xaaaafffc, 0x10000040, x30, x6, 296, x13)

inst_55:
// rs1_h1_val == 32767, rs1_h0_val == -21846
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa;  op2val:0x1000003
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x7fffaaaa, 0x1000003, x30, x6, 304, x13)

inst_56:
// rs1_h1_val == -8193, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xdffffdff;  op2val:0xfeff0004
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xdffffdff, 0xfeff0004, x30, x6, 312, x13)

inst_57:
// rs1_h1_val == -2049, rs2_h0_val == -1025, rs1_h0_val == 21845
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff5555;  op2val:0xfbfffbff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xf7ff5555, 0xfbfffbff, x30, x6, 320, x13)

inst_58:
// rs1_h1_val == -1025, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0200;  op2val:0xfffefff8
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xfbff0200, 0xfffefff8, x30, x6, 328, x13)

inst_59:
// rs1_h1_val == -17, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffef0020;  op2val:0x800020
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffef0020, 0x800020, x30, x6, 336, x13)

inst_60:
// rs1_h1_val == 4096, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x1000aaaa;  op2val:0x400400
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x1000aaaa, 0x400400, x30, x6, 344, x13)

inst_61:
// rs1_h1_val == 2048, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x800fdff;  op2val:0x800006
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x800fdff, 0x800006, x30, x6, 352, x13)

inst_62:
// rs1_h1_val == 512, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000003;  op2val:0x01fffa
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x2000003, 0x01fffa, x30, x6, 360, x13)

inst_63:
// rs1_h0_val == -2049, rs1_h1_val == 2
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x02f7ff;  op2val:0x200dfff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x02f7ff, 0x200dfff, x30, x6, 368, x13)

inst_64:
// rs2_h1_val == 0, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x020009;  op2val:0x00fff7
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x020009, 0x00fff7, x30, x6, 376, x13)

inst_65:
// rs1_h1_val == 128, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x800100;  op2val:0x080004
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x800100, 0x080004, x30, x6, 384, x13)

inst_66:
// rs1_h1_val == 64, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x400007;  op2val:0xffeffffc
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x400007, 0xffeffffc, x30, x6, 392, x13)

inst_67:
// rs2_h0_val == -21846, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc000;  op2val:0x09aaaa
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xfffbc000, 0x09aaaa, x30, x6, 400, x13)

inst_68:
// rs2_h0_val == -2049, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7ff;  op2val:0x02f7ff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xeffff7ff, 0x02f7ff, x30, x6, 408, x13)

inst_69:
// rs1_h0_val == 32767, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fff;  op2val:0x003fff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xfff77fff, 0x003fff, x30, x6, 416, x13)

inst_70:
// rs2_h0_val == -65, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0009;  op2val:0xffdfffbf
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xffdf0009, 0xffdfffbf, x30, x6, 424, x13)

inst_71:
// rs2_h0_val == -17, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200002;  op2val:0x200ffef
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x200002, 0x200ffef, x30, x6, 432, x13)

inst_72:
// rs1_h1_val == -129, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffdff;  op2val:0xaaaa0007
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xff7ffdff, 0xaaaa0007, x30, x6, 440, x13)

inst_73:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs2_h1_val == -17, rs2_h0_val == 16
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff6;  op2val:0xffef0010
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xbffffff6, 0xffef0010, x30, x6, 448, x13)

inst_74:
// rs2_h1_val == -513, rs1_h0_val == 4
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff90004;  op2val:0xfdfffffa
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0xfff90004, 0xfdfffffa, x30, x6, 456, x13)

inst_75:
// rs2_h1_val == -129, rs2_h0_val == 1, rs1_h0_val == 4096
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x091000;  op2val:0xff7f0001
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x00000000, 0x091000, 0xff7f0001, x30, x6, 464, x13)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 118*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
