
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli8 instruction of the RISC-V RV32PZicsr extension for the srli8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x22,signature_x22_1)

inst_0:
// rs1 != rd, rs1==x5, rd==x18, rs1_b0_val == 0, rs1_b2_val == 191, rs1_b1_val == 85, imm_val == 2
// opcode: srli8 ; op1:x5; dest:x18; op1val:0x5bf5500;  immval:0x2
TEST_IMM_OP( srli8, x18, x5, 0x00000000, 0x5bf5500, 0x2, x22, 0, x23)

inst_1:
// rs1 == rd, rs1==x13, rd==x13, imm_val == 7, rs1_b3_val == 251, rs1_b2_val == 32, rs1_b0_val == 16
// opcode: srli8 ; op1:x13; dest:x13; op1val:0xfb200b10;  immval:0x7
TEST_IMM_OP( srli8, x13, x13, 0x00000000, 0xfb200b10, 0x7, x22, 4, x23)

inst_2:
// rs1==x7, rd==x21, imm_val == 6, rs1_b1_val == 254, rs1_b3_val == 255
// opcode: srli8 ; op1:x7; dest:x21; op1val:0xff0ffe0d;  immval:0x6
TEST_IMM_OP( srli8, x21, x7, 0x00000000, 0xff0ffe0d, 0x6, x22, 8, x23)

inst_3:
// rs1==x11, rd==x24, imm_val == 5, 
// opcode: srli8 ; op1:x11; dest:x24; op1val:0x13111105;  immval:0x5
TEST_IMM_OP( srli8, x24, x11, 0x00000000, 0x13111105, 0x5, x22, 12, x23)

inst_4:
// rs1==x18, rd==x16, imm_val == 4, rs1_b3_val == 254, rs1_b2_val == 170
// opcode: srli8 ; op1:x18; dest:x16; op1val:0xfeaa060a;  immval:0x4
TEST_IMM_OP( srli8, x16, x18, 0x00000000, 0xfeaa060a, 0x4, x22, 16, x23)

inst_5:
// rs1==x30, rd==x11, imm_val == 3, rs1_b2_val == 64, rs1_b3_val == 253, rs1_b0_val == 128
// opcode: srli8 ; op1:x30; dest:x11; op1val:0xfd405580;  immval:0x3
TEST_IMM_OP( srli8, x11, x30, 0x00000000, 0xfd405580, 0x3, x22, 20, x23)

inst_6:
// rs1==x15, rd==x8, imm_val == 1, rs1_b1_val == 223
// opcode: srli8 ; op1:x15; dest:x8; op1val:0x7bfdf12;  immval:0x1
TEST_IMM_OP( srli8, x8, x15, 0x00000000, 0x7bfdf12, 0x1, x22, 24, x23)

inst_7:
// rs1==x2, rd==x10, imm_val == 0, rs1_b3_val == 127, rs1_b2_val == 4
// opcode: srli8 ; op1:x2; dest:x10; op1val:0x7f040600;  immval:0x0
TEST_IMM_OP( srli8, x10, x2, 0x00000000, 0x7f040600, 0x0, x22, 28, x23)

inst_8:
// rs1==x6, rd==x25, rs1_b3_val == 170, rs1_b0_val == 64, rs1_b2_val == 2
// opcode: srli8 ; op1:x6; dest:x25; op1val:0xaa020b40;  immval:0x3
TEST_IMM_OP( srli8, x25, x6, 0x00000000, 0xaa020b40, 0x3, x22, 32, x23)

inst_9:
// rs1==x20, rd==x17, rs1_b3_val == 85, rs1_b1_val == 253
// opcode: srli8 ; op1:x20; dest:x17; op1val:0x550cfd0f;  immval:0x1
TEST_IMM_OP( srli8, x17, x20, 0x00000000, 0x550cfd0f, 0x1, x22, 36, x23)

inst_10:
// rs1==x14, rd==x4, rs1_b3_val == 191, rs1_b1_val == 4, rs1_b2_val == 239, rs1_b0_val == 251
// opcode: srli8 ; op1:x14; dest:x4; op1val:0xbfef04fb;  immval:0x3
TEST_IMM_OP( srli8, x4, x14, 0x00000000, 0xbfef04fb, 0x3, x22, 40, x23)

inst_11:
// rs1==x29, rd==x6, rs1_b3_val == 223, rs1_b0_val == 239, rs1_b1_val == 127, rs1_b2_val == 127
// opcode: srli8 ; op1:x29; dest:x6; op1val:0xdf7f7fef;  immval:0x5
TEST_IMM_OP( srli8, x6, x29, 0x00000000, 0xdf7f7fef, 0x5, x22, 44, x23)

inst_12:
// rs1==x28, rd==x30, rs1_b3_val == 239, rs1_b2_val == 0, rs1_b0_val == 85, rs1_b1_val == 16
// opcode: srli8 ; op1:x28; dest:x30; op1val:0xef001055;  immval:0x6
TEST_IMM_OP( srli8, x30, x28, 0x00000000, 0xef001055, 0x6, x22, 48, x23)

inst_13:
// rs1==x4, rd==x27, rs1_b3_val == 247, rs1_b1_val == 239, rs1_b0_val == 223, rs1_b2_val == 85
// opcode: srli8 ; op1:x4; dest:x27; op1val:0xf755efdf;  immval:0x0
TEST_IMM_OP( srli8, x27, x4, 0x00000000, 0xf755efdf, 0x0, x22, 52, x23)

inst_14:
// rs1==x17, rd==x28, rs1_b3_val == 128, 
// opcode: srli8 ; op1:x17; dest:x28; op1val:0x80bf0340;  immval:0x4
TEST_IMM_OP( srli8, x28, x17, 0x00000000, 0x80bf0340, 0x4, x22, 56, x23)

inst_15:
// rs1==x9, rd==x19, rs1_b3_val == 64, 
// opcode: srli8 ; op1:x9; dest:x19; op1val:0x40ef0bef;  immval:0x2
TEST_IMM_OP( srli8, x19, x9, 0x00000000, 0x40ef0bef, 0x2, x22, 60, x23)

inst_16:
// rs1==x12, rd==x3, rs1_b3_val == 32, rs1_b1_val == 170, rs1_b0_val == 254
// opcode: srli8 ; op1:x12; dest:x3; op1val:0x2005aafe;  immval:0x3
TEST_IMM_OP( srli8, x3, x12, 0x00000000, 0x2005aafe, 0x3, x22, 64, x23)

inst_17:
// rs1==x27, rd==x9, rs1_b3_val == 16, rs1_b1_val == 191, rs1_b0_val == 2
// opcode: srli8 ; op1:x27; dest:x9; op1val:0x1005bf02;  immval:0x1
TEST_IMM_OP( srli8, x9, x27, 0x00000000, 0x1005bf02, 0x1, x22, 68, x23)

inst_18:
// rs1==x0, rd==x1, rs1_b3_val == 8, rs1_b2_val == 8, rs1_b0_val == 170
// opcode: srli8 ; op1:x0; dest:x1; op1val:0x80811aa;  immval:0x0
TEST_IMM_OP( srli8, x1, x0, 0x00000000, 0x80811aa, 0x0, x22, 72, x23)

inst_19:
// rs1==x3, rd==x7, rs1_b3_val == 4, rs1_b1_val == 128
// opcode: srli8 ; op1:x3; dest:x7; op1val:0x40d800f;  immval:0x5
TEST_IMM_OP( srli8, x7, x3, 0x00000000, 0x40d800f, 0x5, x22, 76, x4)

inst_20:
// rs1==x21, rd==x5, rs1_b1_val == 2, 
// opcode: srli8 ; op1:x21; dest:x5; op1val:0x7f12020d;  immval:0x7
TEST_IMM_OP( srli8, x5, x21, 0x00000000, 0x7f12020d, 0x7, x22, 80, x4)

inst_21:
// rs1==x8, rd==x26, rs1_b1_val == 1, rs1_b3_val == 2
// opcode: srli8 ; op1:x8; dest:x26; op1val:0x2050109;  immval:0x2
TEST_IMM_OP( srli8, x26, x8, 0x00000000, 0x2050109, 0x2, x22, 84, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_22:
// rs1==x31, rd==x23, rs1_b1_val == 255, 
// opcode: srli8 ; op1:x31; dest:x23; op1val:0xef0cff0a;  immval:0x3
TEST_IMM_OP( srli8, x23, x31, 0x00000000, 0xef0cff0a, 0x3, x3, 0, x4)

inst_23:
// rs1==x24, rd==x12, rs1_b1_val == 0, 
// opcode: srli8 ; op1:x24; dest:x12; op1val:0x11080011;  immval:0x1
TEST_IMM_OP( srli8, x12, x24, 0x00000000, 0x11080011, 0x1, x3, 4, x4)

inst_24:
// rs1==x16, rd==x22, rs1_b0_val == 127, 
// opcode: srli8 ; op1:x16; dest:x22; op1val:0x200b007f;  immval:0x1
TEST_IMM_OP( srli8, x22, x16, 0x00000000, 0x200b007f, 0x1, x3, 8, x4)

inst_25:
// rs1==x23, rd==x15, rs1_b0_val == 191, 
// opcode: srli8 ; op1:x23; dest:x15; op1val:0x91211bf;  immval:0x2
TEST_IMM_OP( srli8, x15, x23, 0x00000000, 0x91211bf, 0x2, x3, 12, x4)

inst_26:
// rs1==x26, rd==x29, rs1_b0_val == 247, rs1_b2_val == 16
// opcode: srli8 ; op1:x26; dest:x29; op1val:0x71010f7;  immval:0x5
TEST_IMM_OP( srli8, x29, x26, 0x00000000, 0x71010f7, 0x5, x3, 16, x4)

inst_27:
// rs1==x25, rd==x14, rs1_b0_val == 253, 
// opcode: srli8 ; op1:x25; dest:x14; op1val:0x200b02fd;  immval:0x1
TEST_IMM_OP( srli8, x14, x25, 0x00000000, 0x200b02fd, 0x1, x3, 20, x4)

inst_28:
// rs1==x22, rd==x20, rs1_b0_val == 32, 
// opcode: srli8 ; op1:x22; dest:x20; op1val:0xfd550420;  immval:0x2
TEST_IMM_OP( srli8, x20, x22, 0x00000000, 0xfd550420, 0x2, x3, 24, x4)

inst_29:
// rs1==x10, rd==x0, rs1_b0_val == 8, rs1_b2_val == 251
// opcode: srli8 ; op1:x10; dest:x0; op1val:0xdffb0a08;  immval:0x7
TEST_IMM_OP( srli8, x0, x10, 0x00000000, 0xdffb0a08, 0x7, x3, 28, x4)

inst_30:
// rs1==x1, rd==x31, rs1_b0_val == 4, 
// opcode: srli8 ; op1:x1; dest:x31; op1val:0xa021304;  immval:0x7
TEST_IMM_OP( srli8, x31, x1, 0x00000000, 0xa021304, 0x7, x3, 32, x4)

inst_31:
// rs1==x19, rd==x2, rs1_b0_val == 1, 
// opcode: srli8 ; op1:x19; dest:x2; op1val:0x6130401;  immval:0x5
TEST_IMM_OP( srli8, x2, x19, 0x00000000, 0x6130401, 0x5, x3, 36, x4)

inst_32:
// rs1_b2_val == 223, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x12df0a0d;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x12df0a0d, 0x3, x3, 40, x4)

inst_33:
// rs1_b2_val == 247, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x9f7fe40;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x9f7fe40, 0x4, x3, 44, x4)

inst_34:
// rs1_b2_val == 253, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xfefd0c07;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xfefd0c07, 0x4, x3, 48, x4)

inst_35:
// rs1_b2_val == 254, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xbffe7f01;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xbffe7f01, 0x0, x3, 52, x4)

inst_36:
// rs1_b2_val == 128, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x9808011;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x9808011, 0x0, x3, 56, x4)

inst_37:
// rs1_b3_val == 0, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x020f11;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x020f11, 0x2, x3, 60, x4)

inst_38:
// rs1_b2_val == 1, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x1001bffe;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x1001bffe, 0x1, x3, 64, x4)

inst_39:
// rs1_b2_val == 255, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xff120d;  immval:0x6
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xff120d, 0x6, x3, 68, x4)

inst_40:
// rs1_b1_val == 247, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xf40f713;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xf40f713, 0x4, x3, 72, x4)

inst_41:
// rs1_b0_val == 255, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xfd8055ff;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xfd8055ff, 0x3, x3, 76, x4)

inst_42:
// rs1_b1_val == 251, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xf10fbaa;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xf10fbaa, 0x3, x3, 80, x4)

inst_43:
// rs1_b3_val == 1, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x140ef06;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x140ef06, 0x4, x3, 84, x4)

inst_44:
// rs1_b1_val == 64, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xa084010;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xa084010, 0x4, x3, 88, x4)

inst_45:
// rs1_b1_val == 32, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x7ffb200e;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x7ffb200e, 0x1, x3, 92, x4)

inst_46:
// rs1_b1_val == 8, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x1120800;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x1120800, 0x1, x3, 96, x4)

inst_47:
// rs1_b3_val == 8, rs1_b2_val == 8, rs1_b0_val == 170
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x80811aa;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0x80811aa, 0x0, x3, 100, x4)

inst_48:
// rs1_b0_val == 8, rs1_b2_val == 251
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xdffb0a08;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x00000000, 0xdffb0a08, 0x7, x3, 104, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x22_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x22_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 27*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
