
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalxda instruction of the RISC-V RV32PZicsr extension for the smalxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x28, rd==x14, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 2, rs2_h1_val == -32768
// opcode: smalxda ; op1:x27; op2:x28; dest:x14; op1val:0x00028000;  op2val:0x80000009
TEST_P64_PNN_OP(smalxda, x14, x15, x27, x28, 0x00000000, 0, 0x00028000, 0x80000009, x1, 0, x4)

inst_1:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x12, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 128, rs1_h0_val == 21845
// opcode: smalxda ; op1:x15; op2:x15; dest:x12; op1val:0x00805555;  op2val:0x0080fffc
TEST_P64_PNN_OP(smalxda, x12, x13, x15, x15, 0x00000000, 0, 0x00805555, 0x0080fffc, x1, 8, x4)

inst_2:
// rs1 == rd != rs2, rs1==x20, rs2==x18, rd==x20, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h1_val == -4097, rs1_h0_val == -1
// opcode: smalxda ; op1:x20; op2:x18; dest:x20; op1val:0xefffffff;  op2val:0x40000007
TEST_P64_PNN_OP(smalxda, x20, x21, x20, x18, 0x00000000, 0, 0xefffffff, 0x40000007, x1, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 4096, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h1_val == -9, rs1_h1_val == -1025
// opcode: smalxda ; op1:x24; op2:x24; dest:x24; op1val:0xfbff0800;  op2val:0xfff71000
TEST_P64_PNN_OP(smalxda, x24, x25, x24, x24, 0x00000000, 0, 0xfbff0800, 0xfff71000, x1, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x2, rd==x2, rs1_h0_val == rs2_h0_val, rs2_h0_val == -513, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -513, rs2_h1_val == 32767
// opcode: smalxda ; op1:x11; op2:x2; dest:x2; op1val:0x0080fdff;  op2val:0x7ffffdff
TEST_P64_PNN_OP(smalxda, x2, x3, x11, x2, 0x00000000, 0, 0x0080fdff, 0x7ffffdff, x1, 32, x4)

inst_5:
// rs1==x17, rs2==x22, rd==x16, rs2_h1_val == -21846, rs1_h0_val == 64, rs1_h1_val == -3
// opcode: smalxda ; op1:x17; op2:x22; dest:x16; op1val:0xfffd0040;  op2val:0xaaaafffa
TEST_P64_PNN_OP(smalxda, x16, x17, x17, x22, 0x00000000, 0, 0xfffd0040, 0xaaaafffa, x1, 40, x4)

inst_6:
// rs1==x9, rs2==x13, rd==x8, rs2_h1_val == 21845, rs2_h0_val == 256, rs1_h1_val == -513, rs1_h0_val == 4096
// opcode: smalxda ; op1:x9; op2:x13; dest:x8; op1val:0xfdff1000;  op2val:0x55550100
TEST_P64_PNN_OP(smalxda, x8, x9, x9, x13, 0x00000000, 0, 0xfdff1000, 0x55550100, x1, 48, x4)

inst_7:
// rs1==x26, rs2==x17, rd==x10, rs2_h1_val == -16385, 
// opcode: smalxda ; op1:x26; op2:x17; dest:x10; op1val:0xfbff0009;  op2val:0xbffffffa
TEST_P64_PNN_OP(smalxda, x10, x11, x26, x17, 0x00000000, 0, 0xfbff0009, 0xbffffffa, x1, 56, x4)

inst_8:
// rs1==x16, rs2==x12, rd==x6, rs2_h1_val == -8193, rs2_h0_val == 16384, rs1_h1_val == 1
// opcode: smalxda ; op1:x16; op2:x12; dest:x6; op1val:0x00010009;  op2val:0xdfff4000
TEST_P64_PNN_OP(smalxda, x6, x7, x16, x12, 0x00000000, 0, 0x00010009, 0xdfff4000, x1, 64, x4)

inst_9:
// rs1==x7, rs2==x20, rd==x28, rs2_h1_val == -4097, rs1_h1_val == 21845
// opcode: smalxda ; op1:x7; op2:x20; dest:x28; op1val:0x5555fff6;  op2val:0xeffffff8
TEST_P64_PNN_OP(smalxda, x28, x29, x7, x20, 0x00000000, 0, 0x5555fff6, 0xeffffff8, x1, 72, x4)

inst_10:
// rs1==x22, rs2==x25, rd==x18, rs2_h1_val == -2049, 
// opcode: smalxda ; op1:x22; op2:x25; dest:x18; op1val:0x3fff0800;  op2val:0xf7ff0007
TEST_P64_PNN_OP(smalxda, x18, x19, x22, x25, 0x00000000, 0, 0x3fff0800, 0xf7ff0007, x1, 80, x4)

inst_11:
// rs1==x31, rs2==x7, rd==x22, rs2_h1_val == -1025, rs2_h0_val == 21845, rs1_h0_val == -65
// opcode: smalxda ; op1:x31; op2:x7; dest:x22; op1val:0x5555ffbf;  op2val:0xfbff5555
TEST_P64_PNN_OP(smalxda, x22, x23, x31, x7, 0x00000000, 0, 0x5555ffbf, 0xfbff5555, x1, 88, x4)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_12:
// rs1==x10, rs2==x1, rd==x26, rs2_h1_val == -513, rs2_h0_val == -21846, rs1_h0_val == 4
// opcode: smalxda ; op1:x10; op2:x1; dest:x26; op1val:0x00050004;  op2val:0xfdffaaaa
TEST_P64_PNN_OP(smalxda, x26, x27, x10, x1, 0x00000000, 0, 0x00050004, 0xfdffaaaa, x7, 0, x4)

inst_13:
// rs1==x5, rs2==x3, rd==x30, rs2_h1_val == -257, rs1_h1_val == -129
// opcode: smalxda ; op1:x5; op2:x3; dest:x30; op1val:0xff7f3fff;  op2val:0xfeffaaaa
TEST_P64_PNN_OP(smalxda, x30, x31, x5, x3, 0x00000000, 0, 0xff7f3fff, 0xfeffaaaa, x7, 8, x4)

inst_14:
// rs1==x1, rs2==x14, rd==x4, rs2_h1_val == -129, rs1_h1_val == 64, rs2_h0_val == -16385, rs1_h0_val == -5
// opcode: smalxda ; op1:x1; op2:x14; dest:x4; op1val:0x0040fffb;  op2val:0xff7fbfff
TEST_P64_PNN_OP(smalxda, x4, x5, x1, x14, 0x00000000, 0, 0x0040fffb, 0xff7fbfff, x7, 16, x15)

inst_15:
// rs1==x28, rs2==x5, rs2_h1_val == -65, rs1_h1_val == -2049, rs2_h0_val == -8193
// opcode: smalxda ; op1:x28; op2:x5; dest:x30; op1val:0xf7ff5555;  op2val:0xffbfdfff
TEST_P64_PNN_OP(smalxda, x30, x31, x28, x5, 0x00000000, 0, 0xf7ff5555, 0xffbfdfff, x7, 24, x15)

inst_16:
// rs1==x8, rs2==x23, rs2_h1_val == -33, rs1_h0_val == 1024, rs2_h0_val == 2048
// opcode: smalxda ; op1:x8; op2:x23; dest:x30; op1val:0xefff0400;  op2val:0xffdf0800
TEST_P64_PNN_OP(smalxda, x30, x31, x8, x23, 0x00000000, 0, 0xefff0400, 0xffdf0800, x7, 32, x15)

inst_17:
// rs1==x12, rs2==x30, rs2_h1_val == -17, rs2_h0_val == 2, rs1_h1_val == 16, rs1_h0_val == -16385
// opcode: smalxda ; op1:x12; op2:x30; dest:x28; op1val:0x0010bfff;  op2val:0xffef0002
TEST_P64_PNN_OP(smalxda, x28, x29, x12, x30, 0x00000000, 0, 0x0010bfff, 0xffef0002, x7, 40, x15)

inst_18:
// rs1==x21, rs2==x9, rs2_h1_val == -5, rs2_h0_val == -2, rs1_h1_val == 8
// opcode: smalxda ; op1:x21; op2:x9; dest:x28; op1val:0x00080800;  op2val:0xfffbfffe
TEST_P64_PNN_OP(smalxda, x28, x29, x21, x9, 0x00000000, 0, 0x00080800, 0xfffbfffe, x7, 48, x15)

inst_19:
// rs1==x3, rs2==x26, rs2_h1_val == -3, rs1_h0_val == 1
// opcode: smalxda ; op1:x3; op2:x26; dest:x20; op1val:0xfffc0001;  op2val:0xfffd0006
TEST_P64_PNN_OP(smalxda, x20, x21, x3, x26, 0x00000000, 0, 0xfffc0001, 0xfffd0006, x7, 56, x15)

inst_20:
// rs1==x29, rs2==x4, rs2_h1_val == -2, rs2_h0_val == -1, rs1_h1_val == -2
// opcode: smalxda ; op1:x29; op2:x4; dest:x30; op1val:0xfffe0005;  op2val:0xfffeffff
TEST_P64_PNN_OP(smalxda, x30, x31, x29, x4, 0x00000000, 0, 0xfffe0005, 0xfffeffff, x7, 64, x15)

inst_21:
// rs1==x6, rs2==x0, rs2_h1_val == 8192, rs1_h1_val == -1, rs1_h0_val == -21846
// opcode: smalxda ; op1:x6; op2:x0; dest:x30; op1val:0xffffaaaa;  op2val:0x20001000
TEST_P64_PNN_OP(smalxda, x30, x31, x6, x0, 0x00000000, 0, 0xffffaaaa, 0x20001000, x7, 72, x15)

inst_22:
// rs1==x2, rs2==x11, rs2_h1_val == 4096, rs1_h1_val == -5, rs1_h0_val == -8193
// opcode: smalxda ; op1:x2; op2:x11; dest:x20; op1val:0xfffbdfff;  op2val:0x1000fff9
TEST_P64_PNN_OP(smalxda, x20, x21, x2, x11, 0x00000000, 0, 0xfffbdfff, 0x1000fff9, x7, 80, x15)

inst_23:
// rs1==x0, rs2==x29, rs2_h1_val == 2048, 
// opcode: smalxda ; op1:x0; op2:x29; dest:x10; op1val:0x55553fff;  op2val:0x08001000
TEST_P64_PNN_OP(smalxda, x10, x11, x0, x29, 0x00000000, 0, 0x55553fff, 0x08001000, x7, 88, x15)

inst_24:
// rs1==x14, rs2==x10, rs2_h1_val == 1024, 
// opcode: smalxda ; op1:x14; op2:x10; dest:x26; op1val:0x00800003;  op2val:0x0400dfff
TEST_P64_PNN_OP(smalxda, x26, x27, x14, x10, 0x00000000, 0, 0x00800003, 0x0400dfff, x7, 96, x15)

inst_25:
// rs1==x23, rs2==x27, rs2_h1_val == 512, rs2_h0_val == 4, rs1_h0_val == -257, rs1_h1_val == -21846
// opcode: smalxda ; op1:x23; op2:x27; dest:x26; op1val:0xaaaafeff;  op2val:0x02000004
TEST_P64_PNN_OP(smalxda, x26, x27, x23, x27, 0x00000000, 0, 0xaaaafeff, 0x02000004, x7, 104, x15)

inst_26:
// rs1==x18, rs2==x16, rs2_h1_val == 256, rs1_h1_val == -16385, rs1_h0_val == -1025
// opcode: smalxda ; op1:x18; op2:x16; dest:x12; op1val:0xbffffbff;  op2val:0x0100fdff
TEST_P64_PNN_OP(smalxda, x12, x13, x18, x16, 0x00000000, 0, 0xbffffbff, 0x0100fdff, x7, 112, x15)

inst_27:
// rs1==x13, rs2==x8, rs2_h1_val == 64, rs1_h1_val == 4096
// opcode: smalxda ; op1:x13; op2:x8; dest:x30; op1val:0x1000fff8;  op2val:0x0040bfff
TEST_P64_PNN_OP(smalxda, x30, x31, x13, x8, 0x00000000, 0, 0x1000fff8, 0x0040bfff, x7, 120, x15)

inst_28:
// rs1==x19, rs2==x21, rs2_h1_val == 32, rs2_h0_val == 1
// opcode: smalxda ; op1:x19; op2:x21; dest:x28; op1val:0x00400040;  op2val:0x00200001
TEST_P64_PNN_OP(smalxda, x28, x29, x19, x21, 0x00000000, 0, 0x00400040, 0x00200001, x7, 128, x15)

inst_29:
// rs1==x4, rs2==x31, rs2_h1_val == 16, rs2_h0_val == -1025
// opcode: smalxda ; op1:x4; op2:x31; dest:x26; op1val:0x0007c000;  op2val:0x0010fbff
TEST_P64_PNN_OP(smalxda, x26, x27, x4, x31, 0x00000000, 0, 0x0007c000, 0x0010fbff, x7, 136, x2)

inst_30:
// rs1==x30, rs2==x19, rs2_h1_val == 8, rs1_h0_val == 512
// opcode: smalxda ; op1:x30; op2:x19; dest:x8; op1val:0x00020200;  op2val:0x00080002
TEST_P64_PNN_OP(smalxda, x8, x9, x30, x19, 0x00000000, 0, 0x00020200, 0x00080002, x7, 144, x2)

inst_31:
// rs1==x25, rs2==x6, rs1_h0_val == -129, rs2_h0_val == 1024
// opcode: smalxda ; op1:x25; op2:x6; dest:x8; op1val:0xfff8ff7f;  op2val:0x80000400
TEST_P64_PNN_OP(smalxda, x8, x9, x25, x6, 0x00000000, 0, 0xfff8ff7f, 0x80000400, x7, 152, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:
// rs1_h0_val == -33, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x0003ffdf;  op2val:0x0008fffe
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x0003ffdf, 0x0008fffe, x1, 0, x2)

inst_33:
// rs1_h0_val == -17, rs1_h1_val == 32767
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x7fffffef;  op2val:0xf7fffff8
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x7fffffef, 0xf7fffff8, x1, 8, x2)

inst_34:
// rs1_h0_val == -9, rs1_h1_val == -9
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff7fff7;  op2val:0xfffe0004
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff7fff7, 0xfffe0004, x1, 16, x2)

inst_35:
// rs1_h0_val == -3, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xc000fffd;  op2val:0x0009bfff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xc000fffd, 0x0009bfff, x1, 24, x2)

inst_36:
// rs1_h0_val == -2, rs1_h1_val == -17, rs2_h1_val == 1
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffeffffe;  op2val:0x00011000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffeffffe, 0x00011000, x1, 32, x2)

inst_37:
// rs1_h0_val == 16384, rs1_h1_val == 0
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00004000;  op2val:0x20000003
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00004000, 0x20000003, x1, 40, x2)

inst_38:
// rs1_h0_val == 8192, rs2_h0_val == -5
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffc2000;  op2val:0xff7ffffb
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffc2000, 0xff7ffffb, x1, 48, x2)

inst_39:
// rs1_h0_val == 256, rs2_h0_val == 32
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffef0100;  op2val:0x00070020
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffef0100, 0x00070020, x1, 56, x2)

inst_40:
// rs1_h0_val == 128, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff0080;  op2val:0xfeff0003
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff0080, 0xfeff0003, x1, 64, x2)

inst_41:
// rs1_h0_val == 32, rs1_h1_val == -32768
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x80000020;  op2val:0xfffac000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x80000020, 0xfffac000, x1, 72, x2)

inst_42:
// rs1_h0_val == 16, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff0010;  op2val:0x00403fff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff0010, 0x00403fff, x1, 80, x2)

inst_43:
// rs1_h0_val == 8, rs2_h0_val == -3
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff0008;  op2val:0x0040fffd
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff0008, 0x0040fffd, x1, 88, x2)

inst_44:
// rs1_h0_val == 2, rs1_h1_val == 512, rs2_h0_val == 8192
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x02000002;  op2val:0x00072000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x02000002, 0x00072000, x1, 96, x2)

inst_45:
// rs1_h0_val == 0, rs1_h1_val == 8192, rs2_h0_val == 8
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x20000000;  op2val:0x10000008
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x20000000, 0x10000008, x1, 104, x2)

inst_46:
// rs2_h1_val == 4, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffdfff8;  op2val:0x0004fff6
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffdfff8, 0x0004fff6, x1, 112, x2)

inst_47:
// rs2_h0_val == -32768, rs1_h0_val == 32767
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00017fff;  op2val:0x00098000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00017fff, 0x00098000, x1, 120, x2)

inst_48:
// rs2_h0_val == 512, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffeffbff;  op2val:0xaaaa0200
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffeffbff, 0xaaaa0200, x1, 128, x2)

inst_49:
// rs2_h0_val == 128, rs1_h1_val == 4
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00042000;  op2val:0xdfff0080
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00042000, 0xdfff0080, x1, 136, x2)

inst_50:
// rs2_h0_val == 64, rs1_h1_val == 32
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00200800;  op2val:0xffbf0040
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00200800, 0xffbf0040, x1, 144, x2)

inst_51:
// rs2_h0_val == 16, rs1_h1_val == 2048
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x08000004;  op2val:0x3fff0010
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x08000004, 0x3fff0010, x1, 152, x2)

inst_52:
// rs2_h0_val == 0, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x20000004;  op2val:0xfff80000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x20000004, 0xfff80000, x1, 160, x2)

inst_53:
// rs1_h1_val == -8193, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xdfffc000;  op2val:0x1000fff9
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xdfffc000, 0x1000fff9, x1, 168, x2)

inst_54:
// rs1_h1_val == -257, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfefffff7;  op2val:0x0200fdff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfefffff7, 0x0200fdff, x1, 176, x2)

inst_55:
// rs1_h1_val == -65, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffbf7fff;  op2val:0x0010fffc
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffbf7fff, 0x0010fffc, x1, 184, x2)

inst_56:
// rs1_h1_val == -33, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffdf7fff;  op2val:0xfff60400
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffdf7fff, 0xfff60400, x1, 192, x2)

inst_57:
// rs1_h0_val == -4097, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffdefff;  op2val:0xdfff0008
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffdefff, 0xdfff0008, x1, 200, x2)

inst_58:
// rs1_h1_val == 16384, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x4000fffc;  op2val:0xfffc5555
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x4000fffc, 0xfffc5555, x1, 208, x2)

inst_59:
// rs1_h1_val == 1024, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x04000005;  op2val:0xfdff0006
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x04000005, 0xfdff0006, x1, 216, x2)

inst_60:
// rs2_h1_val == 2, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00000800;  op2val:0x00028000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00000800, 0x00028000, x1, 224, x2)

inst_61:
// rs1_h0_val == -2049, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffef7ff;  op2val:0xdfff0100
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffef7ff, 0xdfff0100, x1, 232, x2)

inst_62:
// rs1_h1_val == 256, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x0100ffdf;  op2val:0xf7ff5555
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x0100ffdf, 0xf7ff5555, x1, 240, x2)

inst_63:
// rs2_h1_val == 0, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00030400;  op2val:0x00000080
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00030400, 0x00000080, x1, 248, x2)

inst_64:
// rs2_h1_val == -1, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff80007;  op2val:0xffff1000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff80007, 0xffff1000, x1, 256, x2)

inst_65:
// rs2_h0_val == 32767, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x7ffffbff;  op2val:0x00097fff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x7ffffbff, 0x00097fff, x1, 264, x2)

inst_66:
// rs2_h0_val == -4097, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfffa3fff;  op2val:0xfffbefff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfffa3fff, 0xfffbefff, x1, 272, x2)

inst_67:
// rs2_h0_val == -2049, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00070003;  op2val:0x0000f7ff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00070003, 0x0000f7ff, x1, 280, x2)

inst_68:
// rs2_h0_val == -257, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00105555;  op2val:0xfff9feff
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00105555, 0xfff9feff, x1, 288, x2)

inst_69:
// rs2_h0_val == -129, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfff9ff7f;  op2val:0x7fffff7f
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfff9ff7f, 0x7fffff7f, x1, 296, x2)

inst_70:
// rs2_h0_val == -65, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xefffffff;  op2val:0x0020ffbf
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xefffffff, 0x0020ffbf, x1, 304, x2)

inst_71:
// rs2_h0_val == -33, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xaaaafffc;  op2val:0xc000ffdf
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xaaaafffc, 0xc000ffdf, x1, 312, x2)

inst_72:
// rs2_h0_val == -17, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x3fff0006;  op2val:0x0002ffef
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x3fff0006, 0x0002ffef, x1, 320, x2)

inst_73:
// rs2_h0_val == -9, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x0080fffe;  op2val:0xff7ffff7
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x0080fffe, 0xff7ffff7, x1, 328, x2)

inst_74:
// rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 128, rs1_h0_val == 21845
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x00805555;  op2val:0x0080fffc
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x00805555, 0x0080fffc, x1, 336, x2)

inst_75:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 4096, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs2_h1_val == -9, rs1_h1_val == -1025
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xfbff0800;  op2val:0xfff71000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xfbff0800, 0xfff71000, x1, 344, x2)

inst_76:
// rs2_h1_val == 8192, rs1_h1_val == -1, rs1_h0_val == -21846
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0xffffaaaa;  op2val:0x20001000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0xffffaaaa, 0x20001000, x1, 352, x2)

inst_77:
// rs2_h1_val == 2048, 
// opcode: smalxda ; op1:x31; op2:x29; dest:x30; op1val:0x55553fff;  op2val:0x08001000
TEST_P64_PNN_OP(smalxda, x30, x31, x31, x29, 0x00000000, 0, 0x55553fff, 0x08001000, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 40*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
