
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd832 instruction of the RISC-V RV32PZicsr extension for the zunpkd832 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd832)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x17, rd==x9, rs1_b0_val == 0, rs1_b2_val == 32, rs1_b3_val == 85
// opcode: zunpkd832 ; op1:x17; dest:x9; op1val:0x55201300;
TEST_RD_OP( zunpkd832, x9, x17, 0x00000000, 0x55201300, x1, 0, x7)

inst_1:
// rs1==x18, rd==x29, rs1_b3_val == 170, rs1_b2_val == 239
// opcode: zunpkd832 ; op1:x18; dest:x29; op1val:0xaaef0605;
TEST_RD_OP( zunpkd832, x29, x18, 0x00000000, 0xaaef0605, x1, 4, x7)

inst_2:
// rs1==x14, rd==x22, rs1_b3_val == 127, rs1_b1_val == 16, rs1_b0_val == 255
// opcode: zunpkd832 ; op1:x14; dest:x22; op1val:0x7f0510ff;
TEST_RD_OP( zunpkd832, x22, x14, 0x00000000, 0x7f0510ff, x1, 8, x7)

inst_3:
// rs1==x30, rd==x2, rs1_b3_val == 191, rs1_b2_val == 191
// opcode: zunpkd832 ; op1:x30; dest:x2; op1val:0xbfbf0b0c;
TEST_RD_OP( zunpkd832, x2, x30, 0x00000000, 0xbfbf0b0c, x1, 12, x7)

inst_4:
// rs1==x8, rd==x20, rs1_b3_val == 223, rs1_b1_val == 1, rs1_b0_val == 170
// opcode: zunpkd832 ; op1:x8; dest:x20; op1val:0xdf2001aa;
TEST_RD_OP( zunpkd832, x20, x8, 0x00000000, 0xdf2001aa, x1, 16, x7)

inst_5:
// rs1==x24, rd==x0, rs1_b3_val == 239, rs1_b0_val == 32, rs1_b2_val == 16, rs1_b1_val == 0
// opcode: zunpkd832 ; op1:x24; dest:x0; op1val:0xef100020;
TEST_RD_OP( zunpkd832, x0, x24, 0x00000000, 0xef100020, x1, 20, x7)

inst_6:
// rs1==x3, rd==x5, rs1_b3_val == 247, rs1_b1_val == 128, rs1_b0_val == 128
// opcode: zunpkd832 ; op1:x3; dest:x5; op1val:0xf7138080;
TEST_RD_OP( zunpkd832, x5, x3, 0x00000000, 0xf7138080, x1, 24, x7)

inst_7:
// rs1==x22, rd==x8, rs1_b3_val == 251, 
// opcode: zunpkd832 ; op1:x22; dest:x8; op1val:0xfb20060d;
TEST_RD_OP( zunpkd832, x8, x22, 0x00000000, 0xfb20060d, x1, 28, x7)

inst_8:
// rs1==x13, rd==x15, rs1_b3_val == 253, rs1_b0_val == 223, rs1_b2_val == 8, rs1_b1_val == 191
// opcode: zunpkd832 ; op1:x13; dest:x15; op1val:0xfd08bfdf;
TEST_RD_OP( zunpkd832, x15, x13, 0x00000000, 0xfd08bfdf, x1, 32, x7)

inst_9:
// rs1==x19, rd==x17, rs1_b3_val == 254, rs1_b0_val == 1, rs1_b1_val == 247
// opcode: zunpkd832 ; op1:x19; dest:x17; op1val:0xfe0cf701;
TEST_RD_OP( zunpkd832, x17, x19, 0x00000000, 0xfe0cf701, x1, 36, x7)

inst_10:
// rs1==x28, rd==x3, rs1_b3_val == 128, rs1_b2_val == 4
// opcode: zunpkd832 ; op1:x28; dest:x3; op1val:0x80040580;
TEST_RD_OP( zunpkd832, x3, x28, 0x00000000, 0x80040580, x1, 40, x7)

inst_11:
// rs1==x27, rd==x11, rs1_b3_val == 64, rs1_b0_val == 191, rs1_b1_val == 64
// opcode: zunpkd832 ; op1:x27; dest:x11; op1val:0x400940bf;
TEST_RD_OP( zunpkd832, x11, x27, 0x00000000, 0x400940bf, x1, 44, x7)

inst_12:
// rs1==x9, rd==x23, rs1_b3_val == 32, rs1_b1_val == 251
// opcode: zunpkd832 ; op1:x9; dest:x23; op1val:0x200cfb13;
TEST_RD_OP( zunpkd832, x23, x9, 0x00000000, 0x200cfb13, x1, 48, x7)

inst_13:
// rs1==x29, rd==x27, rs1_b3_val == 16, rs1_b1_val == 170, rs1_b0_val == 254
// opcode: zunpkd832 ; op1:x29; dest:x27; op1val:0x1007aafe;
TEST_RD_OP( zunpkd832, x27, x29, 0x00000000, 0x1007aafe, x1, 52, x7)

inst_14:
// rs1==x5, rd==x26, rs1_b3_val == 8, rs1_b1_val == 255
// opcode: zunpkd832 ; op1:x5; dest:x26; op1val:0x80eff13;
TEST_RD_OP( zunpkd832, x26, x5, 0x00000000, 0x80eff13, x1, 56, x7)

inst_15:
// rs1==x4, rd==x18, rs1_b3_val == 4, rs1_b2_val == 253
// opcode: zunpkd832 ; op1:x4; dest:x18; op1val:0x4fd400a;
TEST_RD_OP( zunpkd832, x18, x4, 0x00000000, 0x4fd400a, x1, 60, x7)

inst_16:
// rs1==x6, rd==x25, rs1_b3_val == 2, 
// opcode: zunpkd832 ; op1:x6; dest:x25; op1val:0x20b0aff;
TEST_RD_OP( zunpkd832, x25, x6, 0x00000000, 0x20b0aff, x1, 64, x7)

inst_17:
// rs1==x12, rd==x21, rs1_b3_val == 1, rs1_b0_val == 64
// opcode: zunpkd832 ; op1:x12; dest:x21; op1val:0x1110f40;
TEST_RD_OP( zunpkd832, x21, x12, 0x00000000, 0x1110f40, x1, 68, x7)

inst_18:
// rs1==x10, rd==x19, rs1_b3_val == 255, rs1_b1_val == 4, rs1_b0_val == 247
// opcode: zunpkd832 ; op1:x10; dest:x19; op1val:0xff0d04f7;
TEST_RD_OP( zunpkd832, x19, x10, 0x00000000, 0xff0d04f7, x1, 72, x7)

inst_19:
// rs1==x7, rd==x10, rs1_b3_val == 0, rs1_b0_val == 85
// opcode: zunpkd832 ; op1:x7; dest:x10; op1val:0x121055;
TEST_RD_OP( zunpkd832, x10, x7, 0x00000000, 0x121055, x1, 76, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_20:
// rs1==x20, rd==x14, rs1_b0_val == 239, rs1_b2_val == 128
// opcode: zunpkd832 ; op1:x20; dest:x14; op1val:0x5800fef;
TEST_RD_OP( zunpkd832, x14, x20, 0x00000000, 0x5800fef, x3, 0, x5)

inst_21:
// rs1==x11, rd==x12, rs1_b0_val == 251, 
// opcode: zunpkd832 ; op1:x11; dest:x12; op1val:0xfd0303fb;
TEST_RD_OP( zunpkd832, x12, x11, 0x00000000, 0xfd0303fb, x3, 4, x5)

inst_22:
// rs1==x15, rd==x31, rs1_b0_val == 253, 
// opcode: zunpkd832 ; op1:x15; dest:x31; op1val:0xb200cfd;
TEST_RD_OP( zunpkd832, x31, x15, 0x00000000, 0xb200cfd, x3, 8, x5)

inst_23:
// rs1==x21, rd==x24, rs1_b0_val == 16, rs1_b1_val == 32
// opcode: zunpkd832 ; op1:x21; dest:x24; op1val:0xfe122010;
TEST_RD_OP( zunpkd832, x24, x21, 0x00000000, 0xfe122010, x3, 12, x5)

inst_24:
// rs1==x31, rd==x16, rs1_b0_val == 8, 
// opcode: zunpkd832 ; op1:x31; dest:x16; op1val:0x200f0d08;
TEST_RD_OP( zunpkd832, x16, x31, 0x00000000, 0x200f0d08, x3, 16, x5)

inst_25:
// rs1==x16, rd==x6, rs1_b0_val == 4, 
// opcode: zunpkd832 ; op1:x16; dest:x6; op1val:0xfb0a0e04;
TEST_RD_OP( zunpkd832, x6, x16, 0x00000000, 0xfb0a0e04, x3, 20, x5)

inst_26:
// rs1==x25, rd==x1, rs1_b0_val == 2, rs1_b1_val == 253
// opcode: zunpkd832 ; op1:x25; dest:x1; op1val:0xef11fd02;
TEST_RD_OP( zunpkd832, x1, x25, 0x00000000, 0xef11fd02, x3, 24, x5)

inst_27:
// rs1==x23, rd==x13, rs1_b2_val == 170, 
// opcode: zunpkd832 ; op1:x23; dest:x13; op1val:0x2aa000b;
TEST_RD_OP( zunpkd832, x13, x23, 0x00000000, 0x2aa000b, x3, 28, x5)

inst_28:
// rs1==x1, rd==x30, rs1_b2_val == 85, 
// opcode: zunpkd832 ; op1:x1; dest:x30; op1val:0x755040b;
TEST_RD_OP( zunpkd832, x30, x1, 0x00000000, 0x755040b, x3, 32, x5)

inst_29:
// rs1==x2, rd==x28, rs1_b2_val == 127, 
// opcode: zunpkd832 ; op1:x2; dest:x28; op1val:0x77f0ebf;
TEST_RD_OP( zunpkd832, x28, x2, 0x00000000, 0x77f0ebf, x3, 36, x5)

inst_30:
// rs1==x0, rd==x4, rs1_b2_val == 223, rs1_b1_val == 8
// opcode: zunpkd832 ; op1:x0; dest:x4; op1val:0xfedf0805;
TEST_RD_OP( zunpkd832, x4, x0, 0x00000000, 0xfedf0805, x3, 40, x5)

inst_31:
// rs1==x26, rd==x7, rs1_b2_val == 247, rs1_b1_val == 239
// opcode: zunpkd832 ; op1:x26; dest:x7; op1val:0xaaf7ef12;
TEST_RD_OP( zunpkd832, x7, x26, 0x00000000, 0xaaf7ef12, x3, 44, x5)

inst_32:
// rs1_b2_val == 64, rs1_b1_val == 127
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xc407f12;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xc407f12, x3, 48, x5)

inst_33:
// rs1_b2_val == 2, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xdf020efb;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xdf020efb, x3, 52, x5)

inst_34:
// rs1_b2_val == 1, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x4001fb08;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x4001fb08, x3, 56, x5)

inst_35:
// rs1_b2_val == 255, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x20ff4020;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x20ff4020, x3, 60, x5)

inst_36:
// rs1_b2_val == 0, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xff00f709;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xff00f709, x3, 64, x5)

inst_37:
// rs1_b1_val == 254, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfe05fe0d;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xfe05fe0d, x3, 68, x5)

inst_38:
// rs1_b1_val == 2, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x13050206;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x13050206, x3, 72, x5)

inst_39:
// rs1_b1_val == 85, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xef095509;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xef095509, x3, 76, x5)

inst_40:
// rs1_b2_val == 251, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x11fb0313;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x11fb0313, x3, 80, x5)

inst_41:
// rs1_b1_val == 223, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x7f06df09;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x7f06df09, x3, 84, x5)

inst_42:
// rs1_b2_val == 254, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xeffebf0c;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xeffebf0c, x3, 88, x5)

inst_43:
// rs1_b0_val == 127, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x8001ef7f;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0x8001ef7f, x3, 92, x5)

inst_44:
// rs1_b3_val == 239, rs1_b0_val == 32, rs1_b2_val == 16, rs1_b1_val == 0
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xef100020;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xef100020, x3, 96, x5)

inst_45:
// rs1_b2_val == 223, rs1_b1_val == 8
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfedf0805;
TEST_RD_OP( zunpkd832, x31, x30, 0x00000000, 0xfedf0805, x3, 100, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 26*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
