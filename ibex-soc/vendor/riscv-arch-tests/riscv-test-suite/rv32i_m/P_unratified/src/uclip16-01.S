
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uclip16 instruction of the RISC-V RV32PZicsr extension for the uclip16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uclip16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 != rd, rs1==x28, rd==x10, rs1_h0_val == 0, imm_val == 2
// opcode: uclip16 ; op1:x28; dest:x10; op1val:0x050000;  immval:0x2
TEST_PKIMM_OP( uclip16, x10, x28, 0x00000000, 0x050000, 0x2, x28, x13, 0, x8)

inst_1:
// rs1 == rd, rs1==x14, rd==x14, imm_val == 15, rs1_h0_val == 65279
// opcode: uclip16 ; op1:x14; dest:x14; op1val:0x0efeff;  immval:0xf
TEST_PKIMM_OP( uclip16, x14, x14, 0x00000000, 0x0efeff, 0xf, x14, x13, 8, x8)

inst_2:
// rs1==x19, rd==x25, imm_val == 14, rs1_h0_val == 65471, rs1_h1_val == 32768
// opcode: uclip16 ; op1:x19; dest:x25; op1val:0x8000ffbf;  immval:0xe
TEST_PKIMM_OP( uclip16, x25, x19, 0x00000000, 0x8000ffbf, 0xe, x19, x13, 16, x8)

inst_3:
// rs1==x4, rd==x26, imm_val == 13, rs1_h0_val == 16, rs1_h1_val == 0
// opcode: uclip16 ; op1:x4; dest:x26; op1val:0x000010;  immval:0xd
TEST_PKIMM_OP( uclip16, x26, x4, 0x00000000, 0x000010, 0xd, x4, x13, 24, x8)

inst_4:
// rs1==x22, rd==x11, imm_val == 12, rs1_h1_val == 49151, rs1_h0_val == 1024
// opcode: uclip16 ; op1:x22; dest:x11; op1val:0xbfff0400;  immval:0xc
TEST_PKIMM_OP( uclip16, x11, x22, 0x00000000, 0xbfff0400, 0xc, x22, x13, 32, x8)

inst_5:
// rs1==x0, rd==x19, imm_val == 11, rs1_h1_val == 16, rs1_h0_val == 32768
// opcode: uclip16 ; op1:x0; dest:x19; op1val:0x108000;  immval:0xb
TEST_PKIMM_OP( uclip16, x19, x0, 0x00000000, 0x108000, 0xb, x0, x13, 40, x8)

inst_6:
// rs1==x24, rd==x2, imm_val == 10, rs1_h1_val == 65279
// opcode: uclip16 ; op1:x24; dest:x2; op1val:0xfeffffbf;  immval:0xa
TEST_PKIMM_OP( uclip16, x2, x24, 0x00000000, 0xfeffffbf, 0xa, x24, x13, 48, x8)

inst_7:
// rs1==x16, rd==x18, imm_val == 9, 
// opcode: uclip16 ; op1:x16; dest:x18; op1val:0x0b0013;  immval:0x9
TEST_PKIMM_OP( uclip16, x18, x16, 0x00000000, 0x0b0013, 0x9, x16, x13, 56, x8)

inst_8:
// rs1==x5, rd==x7, imm_val == 8, rs1_h1_val == 21845, rs1_h0_val == 63487
// opcode: uclip16 ; op1:x5; dest:x7; op1val:0x5555f7ff;  immval:0x8
TEST_PKIMM_OP( uclip16, x7, x5, 0x00000000, 0x5555f7ff, 0x8, x5, x13, 64, x8)

inst_9:
// rs1==x21, rd==x12, imm_val == 7, 
// opcode: uclip16 ; op1:x21; dest:x12; op1val:0x09000d;  immval:0x7
TEST_PKIMM_OP( uclip16, x12, x21, 0x00000000, 0x09000d, 0x7, x21, x13, 72, x8)

inst_10:
// rs1==x9, rd==x6, imm_val == 6, rs1_h0_val == 2048, rs1_h1_val == 65407
// opcode: uclip16 ; op1:x9; dest:x6; op1val:0xff7f0800;  immval:0x6
TEST_PKIMM_OP( uclip16, x6, x9, 0x00000000, 0xff7f0800, 0x6, x9, x13, 80, x8)

inst_11:
// rs1==x18, rd==x29, imm_val == 5, rs1_h0_val == 8192
// opcode: uclip16 ; op1:x18; dest:x29; op1val:0x122000;  immval:0x5
TEST_PKIMM_OP( uclip16, x29, x18, 0x00000000, 0x122000, 0x5, x18, x13, 88, x8)

inst_12:
// rs1==x27, rd==x24, imm_val == 4, rs1_h0_val == 1
// opcode: uclip16 ; op1:x27; dest:x24; op1val:0x070001;  immval:0x4
TEST_PKIMM_OP( uclip16, x24, x27, 0x00000000, 0x070001, 0x4, x27, x13, 96, x8)

inst_13:
// rs1==x7, rd==x5, imm_val == 3, rs1_h0_val == 512
// opcode: uclip16 ; op1:x7; dest:x5; op1val:0x110200;  immval:0x3
TEST_PKIMM_OP( uclip16, x5, x7, 0x00000000, 0x110200, 0x3, x7, x13, 104, x8)

inst_14:
// rs1==x26, rd==x28, imm_val == 1, rs1_h0_val == 43690
// opcode: uclip16 ; op1:x26; dest:x28; op1val:0x8000aaaa;  immval:0x1
TEST_PKIMM_OP( uclip16, x28, x26, 0x00000000, 0x8000aaaa, 0x1, x26, x13, 112, x8)

inst_15:
// rs1==x11, rd==x15, imm_val == 0, 
// opcode: uclip16 ; op1:x11; dest:x15; op1val:0x130001;  immval:0x0
TEST_PKIMM_OP( uclip16, x15, x11, 0x00000000, 0x130001, 0x0, x11, x13, 120, x8)

inst_16:
// rs1==x12, rd==x23, rs1_h1_val == 43690, rs1_h0_val == 49151
// opcode: uclip16 ; op1:x12; dest:x23; op1val:0xaaaabfff;  immval:0x7
TEST_PKIMM_OP( uclip16, x23, x12, 0x00000000, 0xaaaabfff, 0x7, x12, x13, 128, x8)

inst_17:
// rs1==x29, rd==x3, rs1_h1_val == 32767, 
// opcode: uclip16 ; op1:x29; dest:x3; op1val:0x7fff000a;  immval:0x5
TEST_PKIMM_OP( uclip16, x3, x29, 0x00000000, 0x7fff000a, 0x5, x29, x13, 136, x8)

inst_18:
// rs1==x1, rd==x20, rs1_h1_val == 57343, 
// opcode: uclip16 ; op1:x1; dest:x20; op1val:0xdfff0011;  immval:0x3
TEST_PKIMM_OP( uclip16, x20, x1, 0x00000000, 0xdfff0011, 0x3, x1, x13, 144, x8)

inst_19:
// rs1==x31, rd==x21, rs1_h1_val == 61439, rs1_h0_val == 65531
// opcode: uclip16 ; op1:x31; dest:x21; op1val:0xeffffffb;  immval:0x5
TEST_PKIMM_OP( uclip16, x21, x31, 0x00000000, 0xeffffffb, 0x5, x31, x13, 152, x8)

inst_20:
// rs1==x15, rd==x22, rs1_h1_val == 63487, rs1_h0_val == 61439
// opcode: uclip16 ; op1:x15; dest:x22; op1val:0xf7ffefff;  immval:0x4
TEST_PKIMM_OP( uclip16, x22, x15, 0x00000000, 0xf7ffefff, 0x4, x15, x13, 160, x5)

inst_21:
// rs1==x3, rd==x8, rs1_h1_val == 64511, 
// opcode: uclip16 ; op1:x3; dest:x8; op1val:0xfbfffeff;  immval:0x3
TEST_PKIMM_OP( uclip16, x8, x3, 0x00000000, 0xfbfffeff, 0x3, x3, x13, 168, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_22:
// rs1==x25, rd==x0, rs1_h1_val == 65023, 
// opcode: uclip16 ; op1:x25; dest:x0; op1val:0xfdff0001;  immval:0xd
TEST_PKIMM_OP( uclip16, x0, x25, 0x00000000, 0xfdff0001, 0xd, x25, x3, 0, x5)

inst_23:
// rs1==x20, rd==x1, rs1_h1_val == 65471, rs1_h0_val == 65527
// opcode: uclip16 ; op1:x20; dest:x1; op1val:0xffbffff7;  immval:0x5
TEST_PKIMM_OP( uclip16, x1, x20, 0x00000000, 0xffbffff7, 0x5, x20, x3, 8, x5)

inst_24:
// rs1==x30, rd==x31, rs1_h1_val == 65503, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffdf0200;  immval:0xd
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xffdf0200, 0xd, x30, x3, 16, x5)

inst_25:
// rs1==x17, rd==x13, rs1_h1_val == 65519, 
// opcode: uclip16 ; op1:x17; dest:x13; op1val:0xffef0200;  immval:0xe
TEST_PKIMM_OP( uclip16, x13, x17, 0x00000000, 0xffef0200, 0xe, x17, x3, 24, x5)

inst_26:
// rs1==x23, rd==x9, rs1_h1_val == 65527, rs1_h0_val == 65533
// opcode: uclip16 ; op1:x23; dest:x9; op1val:0xfff7fffd;  immval:0x7
TEST_PKIMM_OP( uclip16, x9, x23, 0x00000000, 0xfff7fffd, 0x7, x23, x3, 32, x5)

inst_27:
// rs1==x13, rd==x27, rs1_h1_val == 65531, rs1_h0_val == 65503
// opcode: uclip16 ; op1:x13; dest:x27; op1val:0xfffbffdf;  immval:0x5
TEST_PKIMM_OP( uclip16, x27, x13, 0x00000000, 0xfffbffdf, 0x5, x13, x3, 40, x5)

inst_28:
// rs1==x10, rd==x17, rs1_h1_val == 65533, rs1_h0_val == 32767
// opcode: uclip16 ; op1:x10; dest:x17; op1val:0xfffd7fff;  immval:0x1
TEST_PKIMM_OP( uclip16, x17, x10, 0x00000000, 0xfffd7fff, 0x1, x10, x3, 48, x5)

inst_29:
// rs1==x8, rd==x4, rs1_h1_val == 65534, 
// opcode: uclip16 ; op1:x8; dest:x4; op1val:0xfffe0800;  immval:0x3
TEST_PKIMM_OP( uclip16, x4, x8, 0x00000000, 0xfffe0800, 0x3, x8, x3, 56, x5)

inst_30:
// rs1==x2, rd==x30, rs1_h1_val == 16384, rs1_h0_val == 65023
// opcode: uclip16 ; op1:x2; dest:x30; op1val:0x4000fdff;  immval:0x0
TEST_PKIMM_OP( uclip16, x30, x2, 0x00000000, 0x4000fdff, 0x0, x2, x3, 64, x5)

inst_31:
// rs1==x6, rd==x16, rs1_h0_val == 65519, 
// opcode: uclip16 ; op1:x6; dest:x16; op1val:0x10ffef;  immval:0x0
TEST_PKIMM_OP( uclip16, x16, x6, 0x00000000, 0x10ffef, 0x0, x6, x3, 72, x5)

inst_32:
// rs1_h0_val == 65534, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x13fffe;  immval:0x4
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x13fffe, 0x4, x30, x3, 80, x5)

inst_33:
// rs1_h0_val == 16384, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xdfff4000;  immval:0x3
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xdfff4000, 0x3, x30, x3, 88, x5)

inst_34:
// rs1_h0_val == 4096, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x55551000;  immval:0x6
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x55551000, 0x6, x30, x3, 96, x5)

inst_35:
// rs1_h0_val == 256, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xdfff0100;  immval:0x3
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xdfff0100, 0x3, x30, x3, 104, x5)

inst_36:
// rs1_h0_val == 128, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffdf0080;  immval:0xe
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xffdf0080, 0xe, x30, x3, 112, x5)

inst_37:
// rs1_h0_val == 64, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfeff0040;  immval:0x6
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xfeff0040, 0x6, x30, x3, 120, x5)

inst_38:
// rs1_h0_val == 32, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x120020;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x120020, 0xb, x30, x3, 128, x5)

inst_39:
// rs1_h0_val == 8, rs1_h1_val == 64
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x400008;  immval:0xd
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x400008, 0xd, x30, x3, 136, x5)

inst_40:
// rs1_h0_val == 4, rs1_h1_val == 65535
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffff0004;  immval:0x8
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xffff0004, 0x8, x30, x3, 144, x5)

inst_41:
// rs1_h0_val == 2, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x030002;  immval:0xc
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x030002, 0xc, x30, x3, 152, x5)

inst_42:
// rs1_h0_val == 65535, rs1_h1_val == 4
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x04ffff;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x04ffff, 0xf, x30, x3, 160, x5)

inst_43:
// rs1_h1_val == 8192, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x2000ffdf;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x2000ffdf, 0x1, x30, x3, 168, x5)

inst_44:
// rs1_h1_val == 4096, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x1000ffef;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x1000ffef, 0x1, x30, x3, 176, x5)

inst_45:
// rs1_h1_val == 2048, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x8000005;  immval:0x9
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x8000005, 0x9, x30, x3, 184, x5)

inst_46:
// rs1_h1_val == 1024, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x400ffbf;  immval:0x5
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x400ffbf, 0x5, x30, x3, 192, x5)

inst_47:
// rs1_h1_val == 512, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x200000e;  immval:0xa
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x200000e, 0xa, x30, x3, 200, x5)

inst_48:
// rs1_h1_val == 256, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x1000000;  immval:0xc
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x1000000, 0xc, x30, x3, 208, x5)

inst_49:
// rs1_h1_val == 128, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x80000b;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x80000b, 0xb, x30, x3, 216, x5)

inst_50:
// rs1_h1_val == 32, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x200004;  immval:0x8
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x200004, 0x8, x30, x3, 224, x5)

inst_51:
// rs1_h1_val == 2, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x02fffd;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x02fffd, 0xf, x30, x3, 232, x5)

inst_52:
// rs1_h1_val == 1, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x010100;  immval:0x2
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x010100, 0x2, x30, x3, 240, x5)

inst_53:
// rs1_h0_val == 21845, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0c5555;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x0c5555, 0xf, x30, x3, 248, x5)

inst_54:
// rs1_h0_val == 57343, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfbffdfff;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xfbffdfff, 0xb, x30, x3, 256, x5)

inst_55:
// rs1_h0_val == 64511, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0ffbff;  immval:0x4
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x0ffbff, 0x4, x30, x3, 264, x5)

inst_56:
// rs1_h1_val == 8, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x085555;  immval:0x9
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x085555, 0x9, x30, x3, 272, x5)

inst_57:
// rs1_h0_val == 65407, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x04ff7f;  immval:0xa
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x04ff7f, 0xa, x30, x3, 280, x5)

inst_58:
// imm_val == 11, rs1_h1_val == 16, rs1_h0_val == 32768
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x108000;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0x108000, 0xb, x30, x3, 288, x5)

inst_59:
// rs1_h1_val == 65023, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfdff0001;  immval:0xd
TEST_PKIMM_OP( uclip16, x31, x30, 0x00000000, 0xfdff0001, 0xd, x30, x3, 296, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
