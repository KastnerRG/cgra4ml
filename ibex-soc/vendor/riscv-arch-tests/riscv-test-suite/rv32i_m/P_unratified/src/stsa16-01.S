
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the stsa16 instruction of the RISC-V RV32PZicsr extension for the stsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",stsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x22, rd==x5, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16, rs1_h1_val == 2
// opcode: stsa16 ; op1:x26; op2:x22; dest:x5; op1val:0x028000;  op2val:0xfff60010
TEST_RR_OP(stsa16, x5, x26, x22, 0x00000000, 0x028000, 0xfff60010, x1, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x12, rs1_h1_val == rs2_h1_val, rs2_h1_val == -33, rs2_h0_val == 1, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -33
// opcode: stsa16 ; op1:x29; op2:x29; dest:x12; op1val:0xffdffff9;  op2val:0xffdf0001
TEST_RR_OP(stsa16, x12, x29, x29, 0x00000000, 0xffdffff9, 0xffdf0001, x1, 4, x3)

inst_2:
// rs1 == rd != rs2, rs1==x23, rs2==x6, rd==x23, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -129
// opcode: stsa16 ; op1:x23; op2:x6; dest:x23; op1val:0xfff8ff7f;  op2val:0x3fff0003
TEST_RR_OP(stsa16, x23, x23, x6, 0x00000000, 0xfff8ff7f, 0x3fff0003, x1, 8, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 128, rs2_h1_val == 8, rs1_h0_val == -8193, rs1_h1_val == 128
// opcode: stsa16 ; op1:x2; op2:x2; dest:x2; op1val:0x80dfff;  op2val:0x080080
TEST_RR_OP(stsa16, x2, x2, x2, 0x00000000, 0x80dfff, 0x080080, x1, 12, x3)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x20, rd==x20, rs1_h0_val == rs2_h0_val, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -513
// opcode: stsa16 ; op1:x15; op2:x20; dest:x20; op1val:0xfffffffa;  op2val:0xfdfffffa
TEST_RR_OP(stsa16, x20, x15, x20, 0x00000000, 0xfffffffa, 0xfdfffffa, x1, 16, x3)

inst_5:
// rs1==x30, rs2==x11, rd==x17, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 256, rs2_h0_val == -65, rs2_h1_val == 1
// opcode: stsa16 ; op1:x30; op2:x11; dest:x17; op1val:0x1000007;  op2val:0x01ffbf
TEST_RR_OP(stsa16, x17, x30, x11, 0x00000000, 0x1000007, 0x01ffbf, x1, 20, x3)

inst_6:
// rs1==x7, rs2==x17, rd==x10, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 8192, rs2_h0_val == 8
// opcode: stsa16 ; op1:x7; op2:x17; dest:x10; op1val:0xffdf2000;  op2val:0xfdff0008
TEST_RR_OP(stsa16, x10, x7, x17, 0x00000000, 0xffdf2000, 0xfdff0008, x1, 24, x3)

inst_7:
// rs1==x10, rs2==x28, rd==x30, rs2_h1_val == -21846, rs2_h0_val == -1025, rs1_h0_val == 64
// opcode: stsa16 ; op1:x10; op2:x28; dest:x30; op1val:0xfff80040;  op2val:0xaaaafbff
TEST_RR_OP(stsa16, x30, x10, x28, 0x00000000, 0xfff80040, 0xaaaafbff, x1, 28, x3)

inst_8:
// rs1==x28, rs2==x8, rd==x6, rs2_h1_val == 21845, rs2_h0_val == -257, rs1_h1_val == 1, rs1_h0_val == 128
// opcode: stsa16 ; op1:x28; op2:x8; dest:x6; op1val:0x010080;  op2val:0x5555feff
TEST_RR_OP(stsa16, x6, x28, x8, 0x00000000, 0x010080, 0x5555feff, x1, 32, x3)

inst_9:
// rs1==x20, rs2==x9, rd==x8, rs2_h1_val == 32767, rs1_h0_val == 32767, rs1_h1_val == 8, rs2_h0_val == -1
// opcode: stsa16 ; op1:x20; op2:x9; dest:x8; op1val:0x087fff;  op2val:0x7fffffff
TEST_RR_OP(stsa16, x8, x20, x9, 0x00000000, 0x087fff, 0x7fffffff, x1, 36, x3)

inst_10:
// rs1==x18, rs2==x23, rd==x25, rs2_h1_val == -16385, rs1_h0_val == -2, rs1_h1_val == -1025, rs2_h0_val == -2049
// opcode: stsa16 ; op1:x18; op2:x23; dest:x25; op1val:0xfbfffffe;  op2val:0xbffff7ff
TEST_RR_OP(stsa16, x25, x18, x23, 0x00000000, 0xfbfffffe, 0xbffff7ff, x1, 40, x3)

inst_11:
// rs1==x9, rs2==x5, rd==x26, rs2_h1_val == -8193, rs2_h0_val == 32767, rs1_h1_val == 0
// opcode: stsa16 ; op1:x9; op2:x5; dest:x26; op1val:0x00ff7f;  op2val:0xdfff7fff
TEST_RR_OP(stsa16, x26, x9, x5, 0x00000000, 0x00ff7f, 0xdfff7fff, x1, 44, x3)

inst_12:
// rs1==x5, rs2==x26, rd==x28, rs2_h1_val == -4097, rs1_h1_val == -2, rs2_h0_val == 2048
// opcode: stsa16 ; op1:x5; op2:x26; dest:x28; op1val:0xfffe2000;  op2val:0xefff0800
TEST_RR_OP(stsa16, x28, x5, x26, 0x00000000, 0xfffe2000, 0xefff0800, x1, 48, x3)

inst_13:
// rs1==x19, rs2==x25, rd==x16, rs2_h1_val == -2049, rs1_h1_val == 4, rs2_h0_val == -17
// opcode: stsa16 ; op1:x19; op2:x25; dest:x16; op1val:0x04dfff;  op2val:0xf7ffffef
TEST_RR_OP(stsa16, x16, x19, x25, 0x00000000, 0x04dfff, 0xf7ffffef, x1, 52, x3)

inst_14:
// rs1==x4, rs2==x0, rd==x21, rs2_h1_val == -1025, rs1_h0_val == -33
// opcode: stsa16 ; op1:x4; op2:x0; dest:x21; op1val:0xfff6ffdf;  op2val:0xfbfffff8
TEST_RR_OP(stsa16, x21, x4, x0, 0x00000000, 0xfff6ffdf, 0xfbfffff8, x1, 56, x3)

inst_15:
// rs1==x17, rs2==x13, rd==x4, rs2_h1_val == -257, rs1_h1_val == -4097
// opcode: stsa16 ; op1:x17; op2:x13; dest:x4; op1val:0xefffc000;  op2val:0xfeffc000
TEST_RR_OP(stsa16, x4, x17, x13, 0x00000000, 0xefffc000, 0xfeffc000, x1, 60, x3)

inst_16:
// rs1==x16, rs2==x27, rd==x0, rs2_h1_val == -129, rs2_h0_val == -5, rs1_h1_val == -5, rs1_h0_val == 4096
// opcode: stsa16 ; op1:x16; op2:x27; dest:x0; op1val:0xfffb1000;  op2val:0xff7ffffb
TEST_RR_OP(stsa16, x0, x16, x27, 0x00000000, 0xfffb1000, 0xff7ffffb, x1, 64, x3)

inst_17:
// rs1==x8, rs2==x18, rd==x13, rs2_h1_val == -65, rs1_h0_val == -1, rs2_h0_val == 16384
// opcode: stsa16 ; op1:x8; op2:x18; dest:x13; op1val:0x09ffff;  op2val:0xffbf4000
TEST_RR_OP(stsa16, x13, x8, x18, 0x00000000, 0x09ffff, 0xffbf4000, x1, 68, x5)

inst_18:
// rs1==x25, rs2==x10, rd==x29, rs2_h1_val == -17, rs1_h1_val == 1024
// opcode: stsa16 ; op1:x25; op2:x10; dest:x29; op1val:0x400fffa;  op2val:0xffef0007
TEST_RR_OP(stsa16, x29, x25, x10, 0x00000000, 0x400fffa, 0xffef0007, x1, 72, x5)

inst_19:
// rs1==x14, rs2==x30, rd==x31, rs2_h1_val == -9, rs1_h1_val == 21845
// opcode: stsa16 ; op1:x14; op2:x30; dest:x31; op1val:0x55552000;  op2val:0xfff7ffef
TEST_RR_OP(stsa16, x31, x14, x30, 0x00000000, 0x55552000, 0xfff7ffef, x1, 76, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_20:
// rs1==x12, rs2==x7, rd==x14, rs2_h1_val == -5, rs1_h0_val == 2
// opcode: stsa16 ; op1:x12; op2:x7; dest:x14; op1val:0xfffb0002;  op2val:0xfffbfffb
TEST_RR_OP(stsa16, x14, x12, x7, 0x00000000, 0xfffb0002, 0xfffbfffb, x2, 0, x5)

inst_21:
// rs1==x6, rs2==x12, rd==x7, rs2_h1_val == -3, rs1_h0_val == -2049
// opcode: stsa16 ; op1:x6; op2:x12; dest:x7; op1val:0xffdff7ff;  op2val:0xfffdfbff
TEST_RR_OP(stsa16, x7, x6, x12, 0x00000000, 0xffdff7ff, 0xfffdfbff, x2, 4, x5)

inst_22:
// rs1==x31, rs2==x15, rd==x19, rs2_h1_val == -2, rs1_h0_val == 256
// opcode: stsa16 ; op1:x31; op2:x15; dest:x19; op1val:0xfffe0100;  op2val:0xfffe0080
TEST_RR_OP(stsa16, x19, x31, x15, 0x00000000, 0xfffe0100, 0xfffe0080, x2, 8, x5)

inst_23:
// rs1==x13, rs2==x4, rd==x11, rs2_h1_val == -32768, rs1_h1_val == 64, rs2_h0_val == -129
// opcode: stsa16 ; op1:x13; op2:x4; dest:x11; op1val:0x401000;  op2val:0x8000ff7f
TEST_RR_OP(stsa16, x11, x13, x4, 0x00000000, 0x401000, 0x8000ff7f, x2, 12, x5)

inst_24:
// rs1==x3, rs2==x14, rd==x18, rs2_h1_val == 16384, rs1_h0_val == 512, rs1_h1_val == 32
// opcode: stsa16 ; op1:x3; op2:x14; dest:x18; op1val:0x200200;  op2val:0x4000fff8
TEST_RR_OP(stsa16, x18, x3, x14, 0x00000000, 0x200200, 0x4000fff8, x2, 16, x5)

inst_25:
// rs1==x22, rs2==x16, rd==x24, rs2_h1_val == 8192, rs2_h0_val == -16385, rs1_h1_val == -32768
// opcode: stsa16 ; op1:x22; op2:x16; dest:x24; op1val:0x8000c000;  op2val:0x2000bfff
TEST_RR_OP(stsa16, x24, x22, x16, 0x00000000, 0x8000c000, 0x2000bfff, x2, 20, x5)

inst_26:
// rs1==x0, rs2==x31, rd==x3, rs2_h1_val == 4096, 
// opcode: stsa16 ; op1:x0; op2:x31; dest:x3; op1val:0x041000;  op2val:0x1000fffb
TEST_RR_OP(stsa16, x3, x0, x31, 0x00000000, 0x041000, 0x1000fffb, x2, 24, x5)

inst_27:
// rs1==x11, rs2==x1, rd==x9, rs2_h1_val == 2048, rs2_h0_val == -513
// opcode: stsa16 ; op1:x11; op2:x1; dest:x9; op1val:0x00ffff;  op2val:0x800fdff
TEST_RR_OP(stsa16, x9, x11, x1, 0x00000000, 0x00ffff, 0x800fdff, x2, 28, x5)

inst_28:
// rs1==x1, rs2==x24, rd==x22, rs2_h1_val == 1024, rs1_h1_val == 16, rs1_h0_val == -257
// opcode: stsa16 ; op1:x1; op2:x24; dest:x22; op1val:0x10feff;  op2val:0x4003fff
TEST_RR_OP(stsa16, x22, x1, x24, 0x00000000, 0x10feff, 0x4003fff, x2, 32, x5)

inst_29:
// rs1==x27, rs2==x3, rd==x1, rs2_h1_val == 512, rs1_h0_val == -3
// opcode: stsa16 ; op1:x27; op2:x3; dest:x1; op1val:0x01fffd;  op2val:0x2000010
TEST_RR_OP(stsa16, x1, x27, x3, 0x00000000, 0x01fffd, 0x2000010, x2, 36, x5)

inst_30:
// rs1==x24, rs2==x19, rd==x27, rs2_h1_val == 256, rs1_h1_val == 512, rs1_h0_val == -9
// opcode: stsa16 ; op1:x24; op2:x19; dest:x27; op1val:0x200fff7;  op2val:0x1007fff
TEST_RR_OP(stsa16, x27, x24, x19, 0x00000000, 0x200fff7, 0x1007fff, x2, 40, x5)

inst_31:
// rs1==x21, rs1_h0_val == -1025, rs1_h1_val == -16385
// opcode: stsa16 ; op1:x21; op2:x18; dest:x25; op1val:0xbffffbff;  op2val:0x01ffff
TEST_RR_OP(stsa16, x25, x21, x18, 0x00000000, 0xbffffbff, 0x01ffff, x2, 44, x5)

inst_32:
// rs2==x21, rs1_h0_val == -513, 
// opcode: stsa16 ; op1:x4; op2:x21; dest:x12; op1val:0xbffffdff;  op2val:0xfbfffff6
TEST_RR_OP(stsa16, x12, x4, x21, 0x00000000, 0xbffffdff, 0xfbfffff6, x2, 48, x5)

inst_33:
// rd==x15, rs1_h0_val == -65, rs2_h1_val == 32, rs2_h0_val == 64
// opcode: stsa16 ; op1:x13; op2:x19; dest:x15; op1val:0x3fffffbf;  op2val:0x200040
TEST_RR_OP(stsa16, x15, x13, x19, 0x00000000, 0x3fffffbf, 0x200040, x2, 52, x5)

inst_34:
// rs1_h0_val == -17, rs2_h0_val == -32768
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffef;  op2val:0xfffb8000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x04ffef, 0xfffb8000, x2, 56, x5)

inst_35:
// rs1_h0_val == -5, rs2_h1_val == 4
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffb;  op2val:0x04ffff
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xeffffffb, 0x04ffff, x2, 60, x5)

inst_36:
// rs1_h0_val == 16384, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x014000;  op2val:0xdffffffa
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x014000, 0xdffffffa, x2, 64, x5)

inst_37:
// rs1_h0_val == 2048, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0800;  op2val:0x3ffffffc
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfffa0800, 0x3ffffffc, x2, 68, x5)

inst_38:
// rs1_h0_val == 1024, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60400;  op2val:0x7fff4000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfff60400, 0x7fff4000, x2, 72, x5)

inst_39:
// rs1_h0_val == 32, rs2_h1_val == 64
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040020;  op2val:0x400040
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x040020, 0x400040, x2, 76, x5)

inst_40:
// rs1_h0_val == 16, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040010;  op2val:0xfffd0003
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x040010, 0xfffd0003, x2, 80, x5)

inst_41:
// rs1_h0_val == 8, rs1_h1_val == -257
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0008;  op2val:0x100fffc
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfeff0008, 0x100fffc, x2, 84, x5)

inst_42:
// rs1_h0_val == 4, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0004;  op2val:0x200bfff
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xffff0004, 0x200bfff, x2, 88, x5)

inst_43:
// rs1_h0_val == 1, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040001;  op2val:0xffdffffc
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x040001, 0xffdffffc, x2, 92, x5)

inst_44:
// rs1_h0_val == 0, rs2_h0_val == 0, rs2_h1_val == 128
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000;  op2val:0x800000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xc0000000, 0x800000, x2, 96, x5)

inst_45:
// rs2_h1_val == 16, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000400;  op2val:0x100006
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x1000400, 0x100006, x2, 100, x5)

inst_46:
// rs2_h1_val == 2, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x043fff;  op2val:0x02ffbf
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x043fff, 0x02ffbf, x2, 104, x5)

inst_47:
// rs2_h1_val == 0, rs1_h1_val == -21846
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa8000;  op2val:0x00c000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xaaaa8000, 0x00c000, x2, 108, x5)

inst_48:
// rs2_h1_val == -1, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffc;  op2val:0xffff0000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x8000fffc, 0xffff0000, x2, 112, x5)

inst_49:
// rs2_h0_val == -21846, rs1_h1_val == -17, rs1_h0_val == -4097
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefefff;  op2val:0xfffbaaaa
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xffefefff, 0xfffbaaaa, x2, 116, x5)

inst_50:
// rs2_h0_val == 21845, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff6;  op2val:0xfff95555
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x200fff6, 0xfff95555, x2, 120, x5)

inst_51:
// rs2_h0_val == -3, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff87fff;  op2val:0x09fffd
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfff87fff, 0x09fffd, x2, 124, x5)

inst_52:
// rs2_h0_val == -2, rs1_h1_val == -2049
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf;  op2val:0xfff9fffe
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xf7ffffdf, 0xfff9fffe, x2, 128, x5)

inst_53:
// rs2_h0_val == 8192, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6;  op2val:0xaaaa2000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x100fff6, 0xaaaa2000, x2, 132, x5)

inst_54:
// rs2_h0_val == 4096, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff7;  op2val:0x4001000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x100fff7, 0x4001000, x2, 136, x5)

inst_55:
// rs2_h0_val == 1024, rs1_h1_val == -3
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f;  op2val:0x20000400
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfffdff7f, 0x20000400, x2, 140, x5)

inst_56:
// rs2_h0_val == 512, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0x40000200
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xffffffef, 0x40000200, x2, 144, x5)

inst_57:
// rs2_h0_val == 256, rs1_h0_val == 21845, rs1_h1_val == -9
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff75555;  op2val:0x4000100
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfff75555, 0x4000100, x2, 148, x5)

inst_58:
// rs2_h0_val == 32, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05feff;  op2val:0xfffd0020
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x05feff, 0xfffd0020, x2, 152, x5)

inst_59:
// rs2_h0_val == 4, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff9;  op2val:0x100004
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x09fff9, 0x100004, x2, 156, x5)

inst_60:
// rs2_h0_val == 2, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc;  op2val:0x4000002
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x20fffc, 0x4000002, x2, 160, x5)

inst_61:
// rs1_h1_val == -65, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3fff;  op2val:0xfeff0007
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xffbf3fff, 0xfeff0007, x2, 164, x5)

inst_62:
// rs1_h1_val == -8193, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff;  op2val:0x100003
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xdffffeff, 0x100003, x2, 168, x5)

inst_63:
// rs1_h1_val == 16384, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40007fff;  op2val:0x2000fffe
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x40007fff, 0x2000fffe, x2, 172, x5)

inst_64:
// rs1_h1_val == 8192, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffa;  op2val:0xfff81000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x2000fffa, 0xfff81000, x2, 176, x5)

inst_65:
// rs1_h1_val == 4096, rs1_h0_val == -16385
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff;  op2val:0x400000
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x1000bfff, 0x400000, x2, 180, x5)

inst_66:
// rs1_h1_val == 2048, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdf;  op2val:0x7ffffffa
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x800ffdf, 0x7ffffffa, x2, 184, x5)

inst_67:
// rs2_h0_val == -9, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0080;  op2val:0x02fff7
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfffa0080, 0x02fff7, x2, 188, x5)

inst_68:
// rs1_h1_val == -513, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff6;  op2val:0xffefff7f
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfdfffff6, 0xffefff7f, x2, 192, x5)

inst_69:
// rs2_h0_val == -8193, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000006;  op2val:0x03dfff
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x4000006, 0x03dfff, x2, 196, x5)

inst_70:
// rs2_h0_val == -4097, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0000;  op2val:0xfbffefff
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xbfff0000, 0xfbffefff, x2, 200, x5)

inst_71:
// rs1_h0_val == -21846, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02aaaa;  op2val:0xdffffff6
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x02aaaa, 0xdffffff6, x2, 204, x5)

inst_72:
// rs2_h0_val == -33, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff8000;  op2val:0x8000ffdf
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xdfff8000, 0x8000ffdf, x2, 208, x5)

inst_73:
// rs1_h1_val == -129, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fc000;  op2val:0x8000008
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xff7fc000, 0x8000008, x2, 212, x5)

inst_74:
// rs1_h1_val == 32767, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0003;  op2val:0x4000fff8
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x7fff0003, 0x4000fff8, x2, 216, x5)

inst_75:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == -33, rs2_h0_val == 1, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -33
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff9;  op2val:0xffdf0001
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xffdffff9, 0xffdf0001, x2, 220, x5)

inst_76:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 128, rs2_h1_val == 8, rs1_h0_val == -8193, rs1_h1_val == 128
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff;  op2val:0x080080
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x80dfff, 0x080080, x2, 224, x5)

inst_77:
// rs2_h1_val == -129, rs2_h0_val == -5, rs1_h1_val == -5, rs1_h0_val == 4096
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb1000;  op2val:0xff7ffffb
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0xfffb1000, 0xff7ffffb, x2, 228, x5)

inst_78:
// rs2_h1_val == 4096, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0x1000fffb
TEST_RR_OP(stsa16, x31, x30, x29, 0x00000000, 0x041000, 0x1000fffb, x2, 232, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 59*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
