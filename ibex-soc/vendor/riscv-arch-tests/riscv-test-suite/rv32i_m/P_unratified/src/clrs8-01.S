
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clrs8 instruction of the RISC-V RV32PZicsr extension for the clrs8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clrs8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1==x26, rd==x7, rs1_b0_val == -128, rs1_b1_val == 4, rs1_b2_val == -33, rs1_b3_val == -128
// opcode: clrs8 ; op1:x26; dest:x7; op1val:0x80df0480;
TEST_RD_OP( clrs8, x7, x26, 0x00000000, 0x80df0480, x9, 0, x19)

inst_1:
// rs1==x11, rd==x30, rs1_b3_val == -86, rs1_b0_val == -2, rs1_b2_val == 8, rs1_b1_val == 16
// opcode: clrs8 ; op1:x11; dest:x30; op1val:0xaa0810fe;
TEST_RD_OP( clrs8, x30, x11, 0x00000000, 0xaa0810fe, x9, 4, x19)

inst_2:
// rs1==x31, rd==x23, rs1_b3_val == 85, rs1_b2_val == 85
// opcode: clrs8 ; op1:x31; dest:x23; op1val:0x5555fa09;
TEST_RD_OP( clrs8, x23, x31, 0x00000000, 0x5555fa09, x9, 8, x19)

inst_3:
// rs1==x13, rd==x26, rs1_b3_val == 127, rs1_b0_val == 32, rs1_b1_val == -128
// opcode: clrs8 ; op1:x13; dest:x26; op1val:0x7f558020;
TEST_RD_OP( clrs8, x26, x13, 0x00000000, 0x7f558020, x9, 12, x19)

inst_4:
// rs1==x18, rd==x3, rs1_b3_val == -65, rs1_b2_val == 127
// opcode: clrs8 ; op1:x18; dest:x3; op1val:0xbf7f3ffa;
TEST_RD_OP( clrs8, x3, x18, 0x00000000, 0xbf7f3ffa, x9, 16, x19)

inst_5:
// rs1==x16, rd==x4, rs1_b3_val == -33, rs1_b0_val == -9, rs1_b2_val == 0
// opcode: clrs8 ; op1:x16; dest:x4; op1val:0xdf00f8f7;
TEST_RD_OP( clrs8, x4, x16, 0x00000000, 0xdf00f8f7, x9, 20, x19)

inst_6:
// rs1==x24, rd==x20, rs1_b3_val == -17, rs1_b1_val == 85
// opcode: clrs8 ; op1:x24; dest:x20; op1val:0xeffc55fc;
TEST_RD_OP( clrs8, x20, x24, 0x00000000, 0xeffc55fc, x9, 24, x19)

inst_7:
// rs1==x20, rd==x27, rs1_b3_val == -9, rs1_b1_val == -86, rs1_b0_val == -5
// opcode: clrs8 ; op1:x20; dest:x27; op1val:0xf708aafb;
TEST_RD_OP( clrs8, x27, x20, 0x00000000, 0xf708aafb, x9, 28, x19)

inst_8:
// rs1==x12, rd==x29, rs1_b3_val == -5, rs1_b1_val == -5
// opcode: clrs8 ; op1:x12; dest:x29; op1val:0xfbf6fbfb;
TEST_RD_OP( clrs8, x29, x12, 0x00000000, 0xfbf6fbfb, x9, 32, x19)

inst_9:
// rs1==x4, rd==x24, rs1_b3_val == -3, 
// opcode: clrs8 ; op1:x4; dest:x24; op1val:0xfd5506fa;
TEST_RD_OP( clrs8, x24, x4, 0x00000000, 0xfd5506fa, x9, 36, x19)

inst_10:
// rs1==x17, rd==x15, rs1_b3_val == -2, 
// opcode: clrs8 ; op1:x17; dest:x15; op1val:0xfec0c03f;
TEST_RD_OP( clrs8, x15, x17, 0x00000000, 0xfec0c03f, x9, 40, x19)

inst_11:
// rs1==x7, rd==x10, rs1_b3_val == 64, rs1_b0_val == 16, rs1_b2_val == -128
// opcode: clrs8 ; op1:x7; dest:x10; op1val:0x4080fa10;
TEST_RD_OP( clrs8, x10, x7, 0x00000000, 0x4080fa10, x9, 44, x19)

inst_12:
// rs1==x27, rd==x8, rs1_b3_val == 32, rs1_b1_val == 0, rs1_b0_val == -3
// opcode: clrs8 ; op1:x27; dest:x8; op1val:0x200900fd;
TEST_RD_OP( clrs8, x8, x27, 0x00000000, 0x200900fd, x9, 48, x19)

inst_13:
// rs1==x15, rd==x14, rs1_b3_val == 16, rs1_b0_val == 0
// opcode: clrs8 ; op1:x15; dest:x14; op1val:0x10550700;
TEST_RD_OP( clrs8, x14, x15, 0x00000000, 0x10550700, x9, 52, x19)

inst_14:
// rs1==x3, rd==x0, rs1_b3_val == 8, rs1_b2_val == -65, rs1_b0_val == -65
// opcode: clrs8 ; op1:x3; dest:x0; op1val:0x8bf10bf;
TEST_RD_OP( clrs8, x0, x3, 0x00000000, 0x8bf10bf, x9, 56, x19)

inst_15:
// rs1==x1, rd==x13, rs1_b3_val == 4, rs1_b0_val == -17, rs1_b2_val == -5
// opcode: clrs8 ; op1:x1; dest:x13; op1val:0x4fbfaef;
TEST_RD_OP( clrs8, x13, x1, 0x00000000, 0x4fbfaef, x9, 60, x19)

inst_16:
// rs1==x25, rd==x11, rs1_b3_val == 2, rs1_b1_val == 2
// opcode: clrs8 ; op1:x25; dest:x11; op1val:0x2800200;
TEST_RD_OP( clrs8, x11, x25, 0x00000000, 0x2800200, x9, 64, x19)

inst_17:
// rs1==x23, rd==x28, rs1_b3_val == 1, 
// opcode: clrs8 ; op1:x23; dest:x28; op1val:0x103fbf7;
TEST_RD_OP( clrs8, x28, x23, 0x00000000, 0x103fbf7, x9, 68, x19)

inst_18:
// rs1==x6, rd==x25, rs1_b3_val == 0, rs1_b2_val == 1
// opcode: clrs8 ; op1:x6; dest:x25; op1val:0x01553f;
TEST_RD_OP( clrs8, x25, x6, 0x00000000, 0x01553f, x9, 72, x19)

inst_19:
// rs1==x5, rd==x2, rs1_b3_val == -1, rs1_b0_val == -1
// opcode: clrs8 ; op1:x5; dest:x2; op1val:0xfffc3fff;
TEST_RD_OP( clrs8, x2, x5, 0x00000000, 0xfffc3fff, x9, 76, x19)

inst_20:
// rs1==x22, rd==x31, rs1_b2_val == -86, 
// opcode: clrs8 ; op1:x22; dest:x31; op1val:0xbfaa0507;
TEST_RD_OP( clrs8, x31, x22, 0x00000000, 0xbfaa0507, x9, 80, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x2, rd==x9, rs1_b0_val == -33, rs1_b2_val == 2
// opcode: clrs8 ; op1:x2; dest:x9; op1val:0xaa02f6df;
TEST_RD_OP( clrs8, x9, x2, 0x00000000, 0xaa02f6df, x3, 0, x4)

inst_22:
// rs1==x29, rd==x6, rs1_b0_val == 64, rs1_b2_val == -17
// opcode: clrs8 ; op1:x29; dest:x6; op1val:0x6eff940;
TEST_RD_OP( clrs8, x6, x29, 0x00000000, 0x6eff940, x3, 4, x4)

inst_23:
// rs1==x10, rd==x5, rs1_b0_val == 8, 
// opcode: clrs8 ; op1:x10; dest:x5; op1val:0x3f015508;
TEST_RD_OP( clrs8, x5, x10, 0x00000000, 0x3f015508, x3, 8, x4)

inst_24:
// rs1==x0, rd==x19, rs1_b0_val == 4, rs1_b1_val == 8
// opcode: clrs8 ; op1:x0; dest:x19; op1val:0xfaf60804;
TEST_RD_OP( clrs8, x19, x0, 0x00000000, 0xfaf60804, x3, 12, x4)

inst_25:
// rs1==x19, rd==x21, rs1_b0_val == 2, 
// opcode: clrs8 ; op1:x19; dest:x21; op1val:0x80030002;
TEST_RD_OP( clrs8, x21, x19, 0x00000000, 0x80030002, x3, 16, x4)

inst_26:
// rs1==x14, rd==x18, rs1_b0_val == 1, 
// opcode: clrs8 ; op1:x14; dest:x18; op1val:0xef03aa01;
TEST_RD_OP( clrs8, x18, x14, 0x00000000, 0xef03aa01, x3, 20, x4)

inst_27:
// rs1==x21, rd==x22, rs1_b2_val == -9, rs1_b1_val == 127
// opcode: clrs8 ; op1:x21; dest:x22; op1val:0x7ff77f02;
TEST_RD_OP( clrs8, x22, x21, 0x00000000, 0x7ff77f02, x3, 24, x4)

inst_28:
// rs1==x9, rd==x1, rs1_b2_val == -3, 
// opcode: clrs8 ; op1:x9; dest:x1; op1val:0xf7fd053f;
TEST_RD_OP( clrs8, x1, x9, 0x00000000, 0xf7fd053f, x3, 28, x4)

inst_29:
// rs1==x28, rd==x16, rs1_b2_val == -2, rs1_b1_val == -33
// opcode: clrs8 ; op1:x28; dest:x16; op1val:0x4fedf09;
TEST_RD_OP( clrs8, x16, x28, 0x00000000, 0x4fedf09, x3, 32, x4)

inst_30:
// rs1==x30, rd==x17, rs1_b2_val == 64, 
// opcode: clrs8 ; op1:x30; dest:x17; op1val:0xef40f880;
TEST_RD_OP( clrs8, x17, x30, 0x00000000, 0xef40f880, x3, 36, x4)

inst_31:
// rs1==x8, rd==x12, rs1_b2_val == 32, 
// opcode: clrs8 ; op1:x8; dest:x12; op1val:0xf82080f6;
TEST_RD_OP( clrs8, x12, x8, 0x00000000, 0xf82080f6, x3, 40, x4)

inst_32:
// rs1_b2_val == 16, rs1_b0_val == -86
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xdf10faaa;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0xdf10faaa, x3, 44, x4)

inst_33:
// rs1_b2_val == 4, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xff04fc04;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0xff04fc04, x3, 48, x4)

inst_34:
// rs1_b2_val == -1, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x3fff3ffd;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x3fff3ffd, x3, 52, x4)

inst_35:
// rs1_b1_val == -65, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfefebffb;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0xfefebffb, x3, 56, x4)

inst_36:
// rs1_b1_val == -17, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x7c0ef06;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x7c0ef06, x3, 60, x4)

inst_37:
// rs1_b1_val == -9, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x5502f7ff;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x5502f7ff, x3, 64, x4)

inst_38:
// rs1_b1_val == -3, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x108fd20;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x108fd20, x3, 68, x4)

inst_39:
// rs1_b1_val == -2, rs1_b0_val == 85
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf7c0fe55;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0xf7c0fe55, x3, 72, x4)

inst_40:
// rs1_b1_val == 64, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x10094020;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x10094020, x3, 76, x4)

inst_41:
// rs1_b1_val == 1, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x7f3f0110;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x7f3f0110, x3, 80, x4)

inst_42:
// rs1_b1_val == -1, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x20fefffc;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x20fefffc, x3, 84, x4)

inst_43:
// rs1_b1_val == 32, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x8009203f;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x8009203f, x3, 88, x4)

inst_44:
// rs1_b0_val == 127, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x7f03fb7f;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x7f03fb7f, x3, 92, x4)

inst_45:
// rs1_b3_val == 8, rs1_b2_val == -65, rs1_b0_val == -65
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x8bf10bf;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0x8bf10bf, x3, 96, x4)

inst_46:
// rs1_b0_val == 4, rs1_b1_val == 8
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfaf60804;
TEST_RD_OP( clrs8, x31, x30, 0x00000000, 0xfaf60804, x3, 100, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 26*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
