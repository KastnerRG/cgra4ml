
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabs8 instruction of the RISC-V RV32PZicsr extension for the kabs8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabs8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1==x5, rd==x25, rs1_b0_val == -128, rs1_b2_val == 16, rs1_b3_val == -128
// opcode: kabs8 ; op1:x5; dest:x25; op1val:0x8010f980;
TEST_PKR_OP( kabs8, x25, x5, 0x00000000, 0x8010f980, x5, x21, 0, x20)

inst_1:
// rs1==x11, rd==x19, rs1_b3_val == -86, rs1_b2_val == 85, rs1_b0_val == 64
// opcode: kabs8 ; op1:x11; dest:x19; op1val:0xaa550940;
TEST_PKR_OP( kabs8, x19, x11, 0x00000000, 0xaa550940, x11, x21, 8, x20)

inst_2:
// rs1==x13, rd==x14, rs1_b3_val == 85, rs1_b1_val == 85
// opcode: kabs8 ; op1:x13; dest:x14; op1val:0x551055fc;
TEST_PKR_OP( kabs8, x14, x13, 0x00000000, 0x551055fc, x13, x21, 16, x20)

inst_3:
// rs1==x30, rd==x22, rs1_b3_val == 127, rs1_b0_val == 8
// opcode: kabs8 ; op1:x30; dest:x22; op1val:0x7f065508;
TEST_PKR_OP( kabs8, x22, x30, 0x00000000, 0x7f065508, x30, x21, 24, x20)

inst_4:
// rs1==x17, rd==x23, rs1_b3_val == -65, rs1_b2_val == -2
// opcode: kabs8 ; op1:x17; dest:x23; op1val:0xbffe3f40;
TEST_PKR_OP( kabs8, x23, x17, 0x00000000, 0xbffe3f40, x17, x21, 32, x20)

inst_5:
// rs1==x10, rd==x2, rs1_b3_val == -33, rs1_b1_val == -33
// opcode: kabs8 ; op1:x10; dest:x2; op1val:0xdffadffa;
TEST_PKR_OP( kabs8, x2, x10, 0x00000000, 0xdffadffa, x10, x21, 40, x20)

inst_6:
// rs1==x15, rd==x30, rs1_b3_val == -17, 
// opcode: kabs8 ; op1:x15; dest:x30; op1val:0xefc05506;
TEST_PKR_OP( kabs8, x30, x15, 0x00000000, 0xefc05506, x15, x21, 48, x20)

inst_7:
// rs1==x29, rd==x24, rs1_b3_val == -9, rs1_b2_val == -65, rs1_b0_val == -65, rs1_b1_val == -1
// opcode: kabs8 ; op1:x29; dest:x24; op1val:0xf7bfffbf;
TEST_PKR_OP( kabs8, x24, x29, 0x00000000, 0xf7bfffbf, x29, x21, 56, x20)

inst_8:
// rs1==x19, rd==x8, rs1_b3_val == -5, rs1_b0_val == -17, rs1_b1_val == 0
// opcode: kabs8 ; op1:x19; dest:x8; op1val:0xfb0700ef;
TEST_PKR_OP( kabs8, x8, x19, 0x00000000, 0xfb0700ef, x19, x21, 64, x20)

inst_9:
// rs1==x8, rd==x29, rs1_b3_val == -3, rs1_b1_val == -128
// opcode: kabs8 ; op1:x8; dest:x29; op1val:0xfd078005;
TEST_PKR_OP( kabs8, x29, x8, 0x00000000, 0xfd078005, x8, x21, 72, x20)

inst_10:
// rs1==x14, rd==x18, rs1_b3_val == -2, rs1_b0_val == 32, rs1_b2_val == -33
// opcode: kabs8 ; op1:x14; dest:x18; op1val:0xfedf0920;
TEST_PKR_OP( kabs8, x18, x14, 0x00000000, 0xfedf0920, x14, x21, 80, x20)

inst_11:
// rs1==x4, rd==x26, rs1_b3_val == 64, rs1_b0_val == -2, rs1_b1_val == -9
// opcode: kabs8 ; op1:x4; dest:x26; op1val:0x403ff7fe;
TEST_PKR_OP( kabs8, x26, x4, 0x00000000, 0x403ff7fe, x4, x21, 88, x20)

inst_12:
// rs1==x12, rd==x6, rs1_b3_val == 32, rs1_b2_val == 4
// opcode: kabs8 ; op1:x12; dest:x6; op1val:0x20040905;
TEST_PKR_OP( kabs8, x6, x12, 0x00000000, 0x20040905, x12, x21, 96, x20)

inst_13:
// rs1==x3, rd==x13, rs1_b3_val == 16, rs1_b0_val == 1, rs1_b1_val == 16
// opcode: kabs8 ; op1:x3; dest:x13; op1val:0x10041001;
TEST_PKR_OP( kabs8, x13, x3, 0x00000000, 0x10041001, x3, x21, 104, x20)

inst_14:
// rs1==x6, rd==x27, rs1_b3_val == 8, rs1_b0_val == -1
// opcode: kabs8 ; op1:x6; dest:x27; op1val:0x80905ff;
TEST_PKR_OP( kabs8, x27, x6, 0x00000000, 0x80905ff, x6, x21, 112, x20)

inst_15:
// rs1==x27, rd==x9, rs1_b3_val == 4, 
// opcode: kabs8 ; op1:x27; dest:x9; op1val:0x4fc03f9;
TEST_PKR_OP( kabs8, x9, x27, 0x00000000, 0x4fc03f9, x27, x21, 120, x20)

inst_16:
// rs1==x1, rd==x11, rs1_b3_val == 2, rs1_b1_val == 2
// opcode: kabs8 ; op1:x1; dest:x11; op1val:0x2df02fa;
TEST_PKR_OP( kabs8, x11, x1, 0x00000000, 0x2df02fa, x1, x21, 128, x20)

inst_17:
// rs1==x23, rd==x7, rs1_b3_val == 1, rs1_b0_val == 127
// opcode: kabs8 ; op1:x23; dest:x7; op1val:0x1f9067f;
TEST_PKR_OP( kabs8, x7, x23, 0x00000000, 0x1f9067f, x23, x21, 136, x20)

inst_18:
// rs1==x9, rd==x4, rs1_b3_val == 0, rs1_b0_val == 2, rs1_b1_val == -17
// opcode: kabs8 ; op1:x9; dest:x4; op1val:0xdfef02;
TEST_PKR_OP( kabs8, x4, x9, 0x00000000, 0xdfef02, x9, x21, 144, x20)

inst_19:
// rs1==x24, rd==x16, rs1_b3_val == -1, rs1_b2_val == -17
// opcode: kabs8 ; op1:x24; dest:x16; op1val:0xffef07fe;
TEST_PKR_OP( kabs8, x16, x24, 0x00000000, 0xffef07fe, x24, x21, 152, x20)

inst_20:
// rs1==x16, rd==x10, rs1_b2_val == -86, 
// opcode: kabs8 ; op1:x16; dest:x10; op1val:0xfbaa0505;
TEST_PKR_OP( kabs8, x10, x16, 0x00000000, 0xfbaa0505, x16, x21, 160, x6)

inst_21:
// rs1==x31, rd==x20, rs1_b2_val == 127, rs1_b1_val == 4, rs1_b0_val == 85
// opcode: kabs8 ; op1:x31; dest:x20; op1val:0x207f0455;
TEST_PKR_OP( kabs8, x20, x31, 0x00000000, 0x207f0455, x31, x21, 168, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_22:
// rs1==x22, rd==x5, rs1_b0_val == -33, rs1_b2_val == -3
// opcode: kabs8 ; op1:x22; dest:x5; op1val:0xfefd55df;
TEST_PKR_OP( kabs8, x5, x22, 0x00000000, 0xfefd55df, x22, x4, 0, x6)

inst_23:
// rs1==x20, rd==x3, rs1_b0_val == -9, 
// opcode: kabs8 ; op1:x20; dest:x3; op1val:0xfbeffcf7;
TEST_PKR_OP( kabs8, x3, x20, 0x00000000, 0xfbeffcf7, x20, x4, 8, x6)

inst_24:
// rs1==x0, rd==x12, rs1_b0_val == -5, rs1_b2_val == 32, rs1_b1_val == 64
// opcode: kabs8 ; op1:x0; dest:x12; op1val:0xf92040fb;
TEST_PKR_OP( kabs8, x12, x0, 0x00000000, 0xf92040fb, x0, x4, 16, x6)

inst_25:
// rs1==x7, rd==x15, rs1_b0_val == -3, rs1_b2_val == 0
// opcode: kabs8 ; op1:x7; dest:x15; op1val:0x10009fd;
TEST_PKR_OP( kabs8, x15, x7, 0x00000000, 0x10009fd, x7, x4, 24, x6)

inst_26:
// rs1==x21, rd==x28, rs1_b0_val == 16, 
// opcode: kabs8 ; op1:x21; dest:x28; op1val:0x80060210;
TEST_PKR_OP( kabs8, x28, x21, 0x00000000, 0x80060210, x21, x4, 32, x6)

inst_27:
// rs1==x18, rd==x21, rs1_b0_val == 4, rs1_b1_val == -2
// opcode: kabs8 ; op1:x18; dest:x21; op1val:0xbf05fe04;
TEST_PKR_OP( kabs8, x21, x18, 0x00000000, 0xbf05fe04, x18, x4, 40, x6)

inst_28:
// rs1==x26, rd==x31, rs1_b0_val == 0, rs1_b1_val == -86
// opcode: kabs8 ; op1:x26; dest:x31; op1val:0xfbbfaa00;
TEST_PKR_OP( kabs8, x31, x26, 0x00000000, 0xfbbfaa00, x26, x4, 48, x6)

inst_29:
// rs1==x2, rd==x1, rs1_b2_val == -9, rs1_b1_val == -3
// opcode: kabs8 ; op1:x2; dest:x1; op1val:0xf7f7fd02;
TEST_PKR_OP( kabs8, x1, x2, 0x00000000, 0xf7f7fd02, x2, x4, 56, x6)

inst_30:
// rs1==x25, rd==x0, rs1_b2_val == 64, rs1_b1_val == 127
// opcode: kabs8 ; op1:x25; dest:x0; op1val:0x80407f05;
TEST_PKR_OP( kabs8, x0, x25, 0x00000000, 0x80407f05, x25, x4, 64, x6)

inst_31:
// rs1==x28, rd==x17, rs1_b2_val == 8, 
// opcode: kabs8 ; op1:x28; dest:x17; op1val:0x20804fb;
TEST_PKR_OP( kabs8, x17, x28, 0x00000000, 0x20804fb, x28, x4, 72, x6)

inst_32:
// rs1_b2_val == 2, rs1_b1_val == 32
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x4022009;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x4022009, x30, x4, 80, x6)

inst_33:
// rs1_b2_val == 1, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xfa01c0ff;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xfa01c0ff, x30, x4, 88, x6)

inst_34:
// rs1_b2_val == -1, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x40fffcff;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x40fffcff, x30, x4, 96, x6)

inst_35:
// rs1_b1_val == -5, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xfd06fbfb;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xfd06fbfb, x30, x4, 104, x6)

inst_36:
// rs1_b2_val == -5, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf7fbc0c0;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xf7fbc0c0, x30, x4, 112, x6)

inst_37:
// rs1_b1_val == 8, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf8fe0800;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xf8fe0800, x30, x4, 120, x6)

inst_38:
// rs1_b1_val == 1, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x80fc0102;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x80fc0102, x30, x4, 128, x6)

inst_39:
// rs1_b1_val == -65, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x5febffa;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x5febffa, x30, x4, 136, x6)

inst_40:
// rs1_b0_val == -86, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf7aa00aa;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xf7aa00aa, x30, x4, 144, x6)

inst_41:
// rs1_b2_val == -128, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x98006f9;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x98006f9, x30, x4, 152, x6)

inst_42:
// rs1_b0_val == -5, rs1_b2_val == 32, rs1_b1_val == 64
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf92040fb;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0xf92040fb, x30, x4, 160, x6)

inst_43:
// rs1_b2_val == 64, rs1_b1_val == 127
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x80407f05;
TEST_PKR_OP( kabs8, x31, x30, 0x00000000, 0x80407f05, x30, x4, 168, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
