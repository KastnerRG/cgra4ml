
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaltt instruction of the RISC-V RV32PZicsr extension for the smaltt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaltt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x11, rd==x16, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == 512, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -257
// opcode: smaltt ; op1:x22; op2:x11; dest:x16; op1val:0xfeff8000;  op2val:0xfff90200
TEST_P64_PNN_OP(smaltt, x16, x17, x22, x11, 0x00000000, 0, 0xfeff8000, 0xfff90200, x1, 0, x2)

inst_1:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x14, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 16384, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs2_h1_val == 32767, rs1_h1_val == 32767
// opcode: smaltt ; op1:x8; op2:x8; dest:x14; op1val:0x7fff4000;  op2val:0x7fff0040
TEST_P64_PNN_OP(smaltt, x14, x15, x8, x8, 0x00000000, 0, 0x7fff4000, 0x7fff0040, x1, 8, x2)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x3, rd==x18, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -33, rs2_h1_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 21845, rs2_h0_val == -65
// opcode: smaltt ; op1:x18; op2:x3; dest:x18; op1val:0xffdf5555;  op2val:0x0010ffbf
TEST_P64_PNN_OP(smaltt, x18, x19, x18, x3, 0x00000000, 0, 0xffdf5555, 0x0010ffbf, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -1025, rs2_h1_val == -1025, rs1_h1_val == 2, rs1_h0_val == 8
// opcode: smaltt ; op1:x26; op2:x26; dest:x26; op1val:0x00020008;  op2val:0xfbfffbff
TEST_P64_PNN_OP(smaltt, x26, x27, x26, x26, 0x00000000, 0, 0x00020008, 0xfbfffbff, x1, 24, x2)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x24, rd==x24, rs1_h0_val == rs2_h0_val, rs1_h1_val == -9, rs1_h0_val == 2048, rs2_h0_val == 2048
// opcode: smaltt ; op1:x17; op2:x24; dest:x24; op1val:0xfff70800;  op2val:0xfff80800
TEST_P64_PNN_OP(smaltt, x24, x25, x17, x24, 0x00000000, 0, 0xfff70800, 0xfff80800, x1, 32, x2)

inst_5:
// rs1==x19, rs2==x17, rd==x6, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -33, rs1_h1_val == -2
// opcode: smaltt ; op1:x19; op2:x17; dest:x6; op1val:0xfffec000;  op2val:0xffdffffa
TEST_P64_PNN_OP(smaltt, x6, x7, x19, x17, 0x00000000, 0, 0xfffec000, 0xffdffffa, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x7, rd==x12, rs2_h1_val == -21846, rs2_h0_val == 1
// opcode: smaltt ; op1:x24; op2:x7; dest:x12; op1val:0xfff90009;  op2val:0xaaaa0001
TEST_P64_PNN_OP(smaltt, x12, x13, x24, x7, 0x00000000, 0, 0xfff90009, 0xaaaa0001, x1, 48, x2)

inst_7:
// rs1==x28, rs2==x0, rd==x10, rs2_h1_val == 21845, rs1_h0_val == -8193, rs1_h1_val == -3
// opcode: smaltt ; op1:x28; op2:x0; dest:x10; op1val:0xfffddfff;  op2val:0x55550006
TEST_P64_PNN_OP(smaltt, x10, x11, x28, x0, 0x00000000, 0, 0xfffddfff, 0x55550006, x1, 56, x2)

inst_8:
// rs1==x23, rs2==x10, rd==x30, rs2_h1_val == -16385, rs1_h1_val == 4096, rs1_h0_val == -33, rs2_h0_val == 16
// opcode: smaltt ; op1:x23; op2:x10; dest:x30; op1val:0x1000ffdf;  op2val:0xbfff0010
TEST_P64_PNN_OP(smaltt, x30, x31, x23, x10, 0x00000000, 0, 0x1000ffdf, 0xbfff0010, x1, 64, x2)

inst_9:
// rs1==x14, rs2==x27, rd==x4, rs2_h1_val == -8193, rs1_h0_val == -5
// opcode: smaltt ; op1:x14; op2:x27; dest:x4; op1val:0xfff8fffb;  op2val:0xdfff0007
TEST_P64_PNN_OP(smaltt, x4, x5, x14, x27, 0x00000000, 0, 0xfff8fffb, 0xdfff0007, x1, 72, x2)

inst_10:
// rs1==x31, rs2==x22, rd==x20, rs2_h1_val == -4097, rs1_h1_val == 512, rs2_h0_val == -2049
// opcode: smaltt ; op1:x31; op2:x22; dest:x20; op1val:0x02000009;  op2val:0xeffff7ff
TEST_P64_PNN_OP(smaltt, x20, x21, x31, x22, 0x00000000, 0, 0x02000009, 0xeffff7ff, x1, 80, x2)
RVTEST_SIGBASE(x17,signature_x17_0)

inst_11:
// rs1==x6, rs2==x16, rd==x8, rs2_h1_val == -2049, rs1_h0_val == -129, rs2_h0_val == 4096
// opcode: smaltt ; op1:x6; op2:x16; dest:x8; op1val:0xfffdff7f;  op2val:0xf7ff1000
TEST_P64_PNN_OP(smaltt, x8, x9, x6, x16, 0x00000000, 0, 0xfffdff7f, 0xf7ff1000, x17, 0, x7)

inst_12:
// rs1==x11, rs2==x12, rd==x22, rs2_h1_val == -513, rs2_h0_val == 4
// opcode: smaltt ; op1:x11; op2:x12; dest:x22; op1val:0xffdfff7f;  op2val:0xfdff0004
TEST_P64_PNN_OP(smaltt, x22, x23, x11, x12, 0x00000000, 0, 0xffdfff7f, 0xfdff0004, x17, 8, x7)

inst_13:
// rs1==x15, rs2==x28, rd==x2, rs2_h1_val == -257, rs1_h1_val == 32, rs2_h0_val == -257
// opcode: smaltt ; op1:x15; op2:x28; dest:x2; op1val:0x00200008;  op2val:0xfefffeff
TEST_P64_PNN_OP(smaltt, x2, x3, x15, x28, 0x00000000, 0, 0x00200008, 0xfefffeff, x17, 16, x7)

inst_14:
// rs1==x30, rs2==x9, rd==x28, rs2_h1_val == -129, rs2_h0_val == -3, rs1_h0_val == -4097, rs1_h1_val == 128
// opcode: smaltt ; op1:x30; op2:x9; dest:x28; op1val:0x0080efff;  op2val:0xff7ffffd
TEST_P64_PNN_OP(smaltt, x28, x29, x30, x9, 0x00000000, 0, 0x0080efff, 0xff7ffffd, x17, 24, x7)

inst_15:
// rs1==x0, rs2==x29, rs2_h1_val == -65, 
// opcode: smaltt ; op1:x0; op2:x29; dest:x4; op1val:0x0002fff8;  op2val:0xffbfc000
TEST_P64_PNN_OP(smaltt, x4, x5, x0, x29, 0x00000000, 0, 0x0002fff8, 0xffbfc000, x17, 32, x7)

inst_16:
// rs1==x29, rs2==x1, rs2_h1_val == -17, rs1_h1_val == -65, rs1_h0_val == 512
// opcode: smaltt ; op1:x29; op2:x1; dest:x4; op1val:0xffbf0200;  op2val:0xffef0800
TEST_P64_PNN_OP(smaltt, x4, x5, x29, x1, 0x00000000, 0, 0xffbf0200, 0xffef0800, x17, 40, x7)

inst_17:
// rs1==x13, rs2==x31, rs2_h1_val == -9, 
// opcode: smaltt ; op1:x13; op2:x31; dest:x24; op1val:0x00093fff;  op2val:0xfff7fff9
TEST_P64_PNN_OP(smaltt, x24, x25, x13, x31, 0x00000000, 0, 0x00093fff, 0xfff7fff9, x17, 48, x7)

inst_18:
// rs1==x2, rs2==x23, rs2_h1_val == -5, rs1_h0_val == 2
// opcode: smaltt ; op1:x2; op2:x23; dest:x12; op1val:0x00200002;  op2val:0xfffb0003
TEST_P64_PNN_OP(smaltt, x12, x13, x2, x23, 0x00000000, 0, 0x00200002, 0xfffb0003, x17, 56, x7)

inst_19:
// rs1==x27, rs2==x13, rs2_h1_val == -3, 
// opcode: smaltt ; op1:x27; op2:x13; dest:x12; op1val:0x00808000;  op2val:0xfffd0005
TEST_P64_PNN_OP(smaltt, x12, x13, x27, x13, 0x00000000, 0, 0x00808000, 0xfffd0005, x17, 64, x7)

inst_20:
// rs1==x10, rs2==x5, rs2_h1_val == -2, rs1_h0_val == -2, rs1_h1_val == 4
// opcode: smaltt ; op1:x10; op2:x5; dest:x24; op1val:0x0004fffe;  op2val:0xfffe0001
TEST_P64_PNN_OP(smaltt, x24, x25, x10, x5, 0x00000000, 0, 0x0004fffe, 0xfffe0001, x17, 72, x7)

inst_21:
// rs1==x4, rs2==x14, rs2_h1_val == -32768, rs2_h0_val == 256, rs1_h0_val == 32767, rs1_h1_val == -1025
// opcode: smaltt ; op1:x4; op2:x14; dest:x6; op1val:0xfbff7fff;  op2val:0x80000100
TEST_P64_PNN_OP(smaltt, x6, x7, x4, x14, 0x00000000, 0, 0xfbff7fff, 0x80000100, x17, 80, x7)

inst_22:
// rs1==x9, rs2==x19, rs2_h1_val == 16384, rs2_h0_val == -33
// opcode: smaltt ; op1:x9; op2:x19; dest:x6; op1val:0xc000ff7f;  op2val:0x4000ffdf
TEST_P64_PNN_OP(smaltt, x6, x7, x9, x19, 0x00000000, 0, 0xc000ff7f, 0x4000ffdf, x17, 88, x7)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_23:
// rs1==x1, rs2==x15, rs2_h1_val == 8192, rs1_h0_val == -1025, rs2_h0_val == 128
// opcode: smaltt ; op1:x1; op2:x15; dest:x10; op1val:0xfbfffbff;  op2val:0x20000080
TEST_P64_PNN_OP(smaltt, x10, x11, x1, x15, 0x00000000, 0, 0xfbfffbff, 0x20000080, x19, 0, x17)

inst_24:
// rs1==x20, rs2==x21, rs2_h1_val == 4096, rs1_h0_val == 32
// opcode: smaltt ; op1:x20; op2:x21; dest:x8; op1val:0x7fff0020;  op2val:0x1000fff6
TEST_P64_PNN_OP(smaltt, x8, x9, x20, x21, 0x00000000, 0, 0x7fff0020, 0x1000fff6, x19, 8, x17)

inst_25:
// rs1==x5, rs2==x4, rs2_h1_val == 2048, rs1_h0_val == 128
// opcode: smaltt ; op1:x5; op2:x4; dest:x14; op1val:0x00040080;  op2val:0x0800c000
TEST_P64_PNN_OP(smaltt, x14, x15, x5, x4, 0x00000000, 0, 0x00040080, 0x0800c000, x19, 16, x17)

inst_26:
// rs1==x7, rs2==x25, rs2_h1_val == 1024, rs1_h0_val == -3
// opcode: smaltt ; op1:x7; op2:x25; dest:x12; op1val:0xc000fffd;  op2val:0x0400c000
TEST_P64_PNN_OP(smaltt, x12, x13, x7, x25, 0x00000000, 0, 0xc000fffd, 0x0400c000, x19, 24, x17)

inst_27:
// rs1==x16, rs2==x6, rs2_h1_val == 512, rs1_h1_val == -1
// opcode: smaltt ; op1:x16; op2:x6; dest:x24; op1val:0xffff0009;  op2val:0x02003fff
TEST_P64_PNN_OP(smaltt, x24, x25, x16, x6, 0x00000000, 0, 0xffff0009, 0x02003fff, x19, 32, x17)

inst_28:
// rs1==x21, rs2==x20, rs2_h1_val == 256, rs2_h0_val == 32767, rs1_h1_val == 0
// opcode: smaltt ; op1:x21; op2:x20; dest:x30; op1val:0x0000efff;  op2val:0x01007fff
TEST_P64_PNN_OP(smaltt, x30, x31, x21, x20, 0x00000000, 0, 0x0000efff, 0x01007fff, x19, 40, x17)

inst_29:
// rs1==x3, rs2==x2, rs2_h1_val == 128, rs2_h0_val == 2, rs1_h1_val == -513, rs1_h0_val == 16
// opcode: smaltt ; op1:x3; op2:x2; dest:x6; op1val:0xfdff0010;  op2val:0x00800002
TEST_P64_PNN_OP(smaltt, x6, x7, x3, x2, 0x00000000, 0, 0xfdff0010, 0x00800002, x19, 48, x17)

inst_30:
// rs1==x25, rs2==x30, rs2_h1_val == 64, rs1_h1_val == 8192, rs2_h0_val == -129
// opcode: smaltt ; op1:x25; op2:x30; dest:x20; op1val:0x20003fff;  op2val:0x0040ff7f
TEST_P64_PNN_OP(smaltt, x20, x21, x25, x30, 0x00000000, 0, 0x20003fff, 0x0040ff7f, x19, 56, x17)

inst_31:
// rs1==x12, rs2==x18, rs1_h0_val == -513, rs1_h1_val == -8193
// opcode: smaltt ; op1:x12; op2:x18; dest:x16; op1val:0xdffffdff;  op2val:0x0800ffdf
TEST_P64_PNN_OP(smaltt, x16, x17, x12, x18, 0x00000000, 0, 0xdffffdff, 0x0800ffdf, x19, 64, x17)

inst_32:
// rs1_h0_val == -257, rs2_h0_val == -8193
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0007feff;  op2val:0x0005dfff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0007feff, 0x0005dfff, x19, 72, x17)

inst_33:
// rs1_h0_val == -65, rs2_h1_val == 2
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0000ffbf;  op2val:0x0002fffc
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0000ffbf, 0x0002fffc, x19, 80, x17)

inst_34:
// rs1_h0_val == -17, rs1_h1_val == -129
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xff7fffef;  op2val:0xf7ff0003
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xff7fffef, 0xf7ff0003, x19, 88, x17)

inst_35:
// rs1_h0_val == -9, rs2_h0_val == 32
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfffafff7;  op2val:0x00800020
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfffafff7, 0x00800020, x19, 96, x17)

inst_36:
// rs1_h0_val == 8192, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x00052000;  op2val:0xfffe0003
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x00052000, 0xfffe0003, x19, 104, x17)

inst_37:
// rs1_h0_val == 4096, rs2_h0_val == -17, rs2_h1_val == 1
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x00091000;  op2val:0x0001ffef
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x00091000, 0x0001ffef, x19, 112, x17)

inst_38:
// rs1_h0_val == 1024, rs2_h0_val == -5
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0400;  op2val:0xfff8fffb
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0400, 0xfff8fffb, x19, 120, x17)

inst_39:
// rs1_h0_val == 256, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfff90100;  op2val:0xffef0010
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfff90100, 0xffef0010, x19, 128, x17)

inst_40:
// rs1_h0_val == 64, rs1_h1_val == -2049
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff0040;  op2val:0xffef7fff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff0040, 0xffef7fff, x19, 136, x17)

inst_41:
// rs1_h0_val == 4, rs1_h1_val == -4097, rs2_h0_val == -32768
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xefff0004;  op2val:0xffef8000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xefff0004, 0xffef8000, x19, 144, x17)

inst_42:
// rs1_h0_val == 1, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0001;  op2val:0xfffd7fff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0001, 0xfffd7fff, x19, 152, x17)

inst_43:
// rs1_h0_val == 0, rs2_h0_val == 16384
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfff70000;  op2val:0x00804000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfff70000, 0x00804000, x19, 160, x17)

inst_44:
// rs1_h0_val == -1, rs1_h1_val == 21845
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x5555ffff;  op2val:0x00010007
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x5555ffff, 0x00010007, x19, 168, x17)

inst_45:
// rs2_h1_val == 32, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0009fffd;  op2val:0x0020fffa
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0009fffd, 0x0020fffa, x19, 176, x17)

inst_46:
// rs2_h1_val == 8, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x00038000;  op2val:0x0008fffa
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x00038000, 0x0008fffa, x19, 184, x17)

inst_47:
// rs2_h0_val == -2, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xffffc000;  op2val:0x0006fffe
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xffffc000, 0x0006fffe, x19, 192, x17)

inst_48:
// rs2_h0_val == 8192, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xefff0400;  op2val:0xfffb2000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xefff0400, 0xfffb2000, x19, 200, x17)

inst_49:
// rs2_h0_val == 1024, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfff84000;  op2val:0x08000400
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfff84000, 0x08000400, x19, 208, x17)

inst_50:
// rs2_h0_val == 8, rs1_h1_val == -5
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0080;  op2val:0x04000008
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0080, 0x04000008, x19, 216, x17)

inst_51:
// rs2_h0_val == 0, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x3fff8000;  op2val:0xff7f0000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x3fff8000, 0xff7f0000, x19, 224, x17)

inst_52:
// rs2_h0_val == -1, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0000fff6;  op2val:0x4000ffff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0000fff6, 0x4000ffff, x19, 232, x17)

inst_53:
// rs1_h1_val == -21846, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xaaaafffe;  op2val:0x00100010
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xaaaafffe, 0x00100010, x19, 240, x17)

inst_54:
// rs1_h1_val == -16385, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xbfffff7f;  op2val:0xff7f0007
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xbfffff7f, 0xff7f0007, x19, 248, x17)

inst_55:
// rs1_h0_val == -21846, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfbffaaaa;  op2val:0x0005fbff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfbffaaaa, 0x0005fbff, x19, 256, x17)

inst_56:
// rs1_h1_val == -17, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xffef0400;  op2val:0xfffcfffc
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xffef0400, 0xfffcfffc, x19, 264, x17)

inst_57:
// rs1_h0_val == -2049, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfefff7ff;  op2val:0x0800ffdf
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfefff7ff, 0x0800ffdf, x19, 272, x17)

inst_58:
// rs1_h1_val == -32768, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x8000fff7;  op2val:0x3ffffbff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x8000fff7, 0x3ffffbff, x19, 280, x17)

inst_59:
// rs1_h1_val == 16384, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x4000aaaa;  op2val:0xfbfffff9
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x4000aaaa, 0xfbfffff9, x19, 288, x17)

inst_60:
// rs1_h1_val == 2048, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x08008000;  op2val:0x00200080
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x08008000, 0x00200080, x19, 296, x17)

inst_61:
// rs2_h1_val == 4, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xffdfffbf;  op2val:0x00043fff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xffdfffbf, 0x00043fff, x19, 304, x17)

inst_62:
// rs1_h1_val == 1024, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x04000009;  op2val:0x00040010
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x04000009, 0x00040010, x19, 312, x17)

inst_63:
// rs1_h1_val == 256, rs2_h1_val == 0
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0100fff7;  op2val:0x0000fff9
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0100fff7, 0x0000fff9, x19, 320, x17)

inst_64:
// rs2_h1_val == -1, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0020dfff;  op2val:0xfffffffc
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0020dfff, 0xfffffffc, x19, 328, x17)

inst_65:
// rs1_h1_val == 64, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0040fffc;  op2val:0x7fffffbf
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0040fffc, 0x7fffffbf, x19, 336, x17)

inst_66:
// rs2_h0_val == -21846, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xffbfefff;  op2val:0x8000aaaa
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xffbfefff, 0x8000aaaa, x19, 344, x17)

inst_67:
// rs2_h0_val == 21845, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x1000fbff;  op2val:0x00035555
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x1000fbff, 0x00035555, x19, 352, x17)

inst_68:
// rs1_h1_val == 16, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0010efff;  op2val:0xfff8aaaa
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0010efff, 0xfff8aaaa, x19, 360, x17)

inst_69:
// rs1_h1_val == 8, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0008ffff;  op2val:0xfffb2000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0008ffff, 0xfffb2000, x19, 368, x17)

inst_70:
// rs2_h0_val == -16385, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0008feff;  op2val:0x0400bfff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0008feff, 0x0400bfff, x19, 376, x17)

inst_71:
// rs2_h0_val == -4097, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xeffffffd;  op2val:0xc000efff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xeffffffd, 0xc000efff, x19, 384, x17)

inst_72:
// rs2_h0_val == -513, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfff90002;  op2val:0x0200fdff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfff90002, 0x0200fdff, x19, 392, x17)

inst_73:
// rs1_h0_val == -16385, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfbffbfff;  op2val:0xfbff2000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfbffbfff, 0xfbff2000, x19, 400, x17)

inst_74:
// rs1_h1_val == 1, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0001fffc;  op2val:0x00060040
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0001fffc, 0x00060040, x19, 408, x17)

inst_75:
// rs2_h0_val == -9, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x02008000;  op2val:0xfff8fff7
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x02008000, 0xfff8fff7, x19, 416, x17)

inst_76:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -1025, rs2_h1_val == -1025, rs1_h1_val == 2, rs1_h0_val == 8
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x00020008;  op2val:0xfbfffbff
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x00020008, 0xfbfffbff, x19, 424, x17)

inst_77:
// rs2_h1_val == 21845, rs1_h0_val == -8193, rs1_h1_val == -3
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0xfffddfff;  op2val:0x55550006
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0xfffddfff, 0x55550006, x19, 432, x17)

inst_78:
// rs2_h1_val == -65, 
// opcode: smaltt ; op1:x31; op2:x29; dest:x30; op1val:0x0002fff8;  op2val:0xffbfc000
TEST_P64_PNN_OP(smaltt, x30, x31, x31, x29, 0x00000000, 0, 0x0002fff8, 0xffbfc000, x19, 440, x17)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x17_0:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
