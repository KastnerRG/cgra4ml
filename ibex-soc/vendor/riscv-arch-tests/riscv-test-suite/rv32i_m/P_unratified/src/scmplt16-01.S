
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmplt16 instruction of the RISC-V RV32PZicsr extension for the scmplt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmplt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x9, rd==x28, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val == -33, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 4, rs2_h0_val == 16
// opcode: scmplt16 ; op1:x18; op2:x9; dest:x28; op1val:0xffdf8000;  op2val:0x040010
TEST_RR_OP(scmplt16, x28, x18, x9, 0x00000000, 0xffdf8000, 0x040010, x11, 0, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x10, rs1_h1_val == rs2_h1_val, rs1_h0_val == -513, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2, rs1_h1_val == 2, rs2_h0_val == -4097
// opcode: scmplt16 ; op1:x29; op2:x29; dest:x10; op1val:0x02fdff;  op2val:0x02efff
TEST_RR_OP(scmplt16, x10, x29, x29, 0x00000000, 0x02fdff, 0x02efff, x11, 4, x12)

inst_2:
// rs1 == rd != rs2, rs1==x1, rs2==x24, rd==x1, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == -17, rs2_h1_val == -17, rs2_h0_val == -129, rs1_h1_val == -17
// opcode: scmplt16 ; op1:x1; op2:x24; dest:x1; op1val:0xffefffef;  op2val:0xffefff7f
TEST_RR_OP(scmplt16, x1, x1, x24, 0x00000000, 0xffefffef, 0xffefff7f, x11, 8, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -1025, rs2_h0_val == 128, rs2_h1_val == -9
// opcode: scmplt16 ; op1:x25; op2:x25; dest:x25; op1val:0x05fbff;  op2val:0xfff70080
TEST_RR_OP(scmplt16, x25, x25, x25, 0x00000000, 0x05fbff, 0xfff70080, x11, 12, x12)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x22, rd==x22, rs1_h0_val == rs2_h0_val, rs1_h0_val == -16385, rs2_h0_val == -16385, rs1_h1_val == 0
// opcode: scmplt16 ; op1:x27; op2:x22; dest:x22; op1val:0x00bfff;  op2val:0xfff7bfff
TEST_RR_OP(scmplt16, x22, x27, x22, 0x00000000, 0x00bfff, 0xfff7bfff, x11, 16, x12)

inst_5:
// rs1==x22, rs2==x30, rd==x3, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -33, rs1_h1_val == 2048, rs2_h0_val == -17
// opcode: scmplt16 ; op1:x22; op2:x30; dest:x3; op1val:0x8000009;  op2val:0xffdfffef
TEST_RR_OP(scmplt16, x3, x22, x30, 0x00000000, 0x8000009, 0xffdfffef, x11, 20, x12)

inst_6:
// rs1==x31, rs2==x20, rd==x29, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h1_val == 1024
// opcode: scmplt16 ; op1:x31; op2:x20; dest:x29; op1val:0x4000006;  op2val:0xfffc0100
TEST_RR_OP(scmplt16, x29, x31, x20, 0x00000000, 0x4000006, 0xfffc0100, x11, 24, x12)

inst_7:
// rs1==x7, rs2==x18, rd==x5, rs2_h1_val == -21846, rs1_h0_val == 2048
// opcode: scmplt16 ; op1:x7; op2:x18; dest:x5; op1val:0x070800;  op2val:0xaaaaff7f
TEST_RR_OP(scmplt16, x5, x7, x18, 0x00000000, 0x070800, 0xaaaaff7f, x11, 28, x12)

inst_8:
// rs1==x20, rs2==x5, rd==x18, rs2_h1_val == 21845, rs2_h0_val == 4, rs1_h0_val == -257
// opcode: scmplt16 ; op1:x20; op2:x5; dest:x18; op1val:0x03feff;  op2val:0x55550004
TEST_RR_OP(scmplt16, x18, x20, x5, 0x00000000, 0x03feff, 0x55550004, x11, 32, x12)

inst_9:
// rs1==x10, rs2==x31, rd==x16, rs2_h1_val == 32767, rs1_h0_val == 64
// opcode: scmplt16 ; op1:x10; op2:x31; dest:x16; op1val:0x8000040;  op2val:0x7fff0005
TEST_RR_OP(scmplt16, x16, x10, x31, 0x00000000, 0x8000040, 0x7fff0005, x11, 36, x12)

inst_10:
// rs1==x5, rs2==x1, rd==x30, rs2_h1_val == -16385, rs2_h0_val == -2, rs1_h1_val == 8, rs1_h0_val == -33
// opcode: scmplt16 ; op1:x5; op2:x1; dest:x30; op1val:0x08ffdf;  op2val:0xbffffffe
TEST_RR_OP(scmplt16, x30, x5, x1, 0x00000000, 0x08ffdf, 0xbffffffe, x11, 40, x12)

inst_11:
// rs1==x4, rs2==x6, rd==x14, rs2_h1_val == -8193, rs1_h1_val == -65, rs1_h0_val == 32767
// opcode: scmplt16 ; op1:x4; op2:x6; dest:x14; op1val:0xffbf7fff;  op2val:0xdfffff7f
TEST_RR_OP(scmplt16, x14, x4, x6, 0x00000000, 0xffbf7fff, 0xdfffff7f, x11, 44, x12)

inst_12:
// rs1==x23, rs2==x27, rd==x21, rs2_h1_val == -4097, rs1_h0_val == 21845, rs2_h0_val == 8192
// opcode: scmplt16 ; op1:x23; op2:x27; dest:x21; op1val:0xfff85555;  op2val:0xefff2000
TEST_RR_OP(scmplt16, x21, x23, x27, 0x00000000, 0xfff85555, 0xefff2000, x11, 48, x12)

inst_13:
// rs1==x15, rs2==x4, rd==x2, rs2_h1_val == -2049, rs2_h0_val == -5, rs1_h1_val == -1025, rs1_h0_val == -2049
// opcode: scmplt16 ; op1:x15; op2:x4; dest:x2; op1val:0xfbfff7ff;  op2val:0xf7fffffb
TEST_RR_OP(scmplt16, x2, x15, x4, 0x00000000, 0xfbfff7ff, 0xf7fffffb, x11, 52, x12)

inst_14:
// rs1==x26, rs2==x2, rd==x8, rs2_h1_val == -1025, rs1_h1_val == 1
// opcode: scmplt16 ; op1:x26; op2:x2; dest:x8; op1val:0x010007;  op2val:0xfbffbfff
TEST_RR_OP(scmplt16, x8, x26, x2, 0x00000000, 0x010007, 0xfbffbfff, x11, 56, x12)

inst_15:
// rs1==x0, rs2==x15, rd==x24, rs2_h1_val == -513, rs1_h1_val == -4097, rs1_h0_val == -1, rs2_h0_val == 64
// opcode: scmplt16 ; op1:x0; op2:x15; dest:x24; op1val:0xefffffff;  op2val:0xfdff0040
TEST_RR_OP(scmplt16, x24, x0, x15, 0x00000000, 0xefffffff, 0xfdff0040, x11, 60, x5)

inst_16:
// rs1==x6, rs2==x10, rd==x17, rs2_h1_val == -257, rs1_h0_val == 32, rs2_h0_val == -65
// opcode: scmplt16 ; op1:x6; op2:x10; dest:x17; op1val:0xfbff0020;  op2val:0xfeffffbf
TEST_RR_OP(scmplt16, x17, x6, x10, 0x00000000, 0xfbff0020, 0xfeffffbf, x11, 64, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x9, rs2==x0, rd==x11, rs2_h1_val == -129, rs1_h0_val == 512, rs2_h0_val == 32767, rs1_h1_val == 128
// opcode: scmplt16 ; op1:x9; op2:x0; dest:x11; op1val:0x800200;  op2val:0xff7f7fff
TEST_RR_OP(scmplt16, x11, x9, x0, 0x00000000, 0x800200, 0xff7f7fff, x1, 0, x5)

inst_18:
// rs1==x2, rs2==x3, rd==x20, rs2_h1_val == -65, rs1_h1_val == 4
// opcode: scmplt16 ; op1:x2; op2:x3; dest:x20; op1val:0x040020;  op2val:0xffbffff8
TEST_RR_OP(scmplt16, x20, x2, x3, 0x00000000, 0x040020, 0xffbffff8, x1, 4, x5)

inst_19:
// rs1==x21, rs2==x14, rd==x31, rs2_h1_val == -5, rs1_h0_val == -3
// opcode: scmplt16 ; op1:x21; op2:x14; dest:x31; op1val:0xeffffffd;  op2val:0xfffbc000
TEST_RR_OP(scmplt16, x31, x21, x14, 0x00000000, 0xeffffffd, 0xfffbc000, x1, 8, x5)

inst_20:
// rs1==x8, rs2==x23, rd==x26, rs2_h1_val == -3, rs1_h1_val == -21846
// opcode: scmplt16 ; op1:x8; op2:x23; dest:x26; op1val:0xaaaaffdf;  op2val:0xfffd0080
TEST_RR_OP(scmplt16, x26, x8, x23, 0x00000000, 0xaaaaffdf, 0xfffd0080, x1, 12, x5)

inst_21:
// rs1==x11, rs2==x17, rd==x0, rs2_h1_val == -2, rs1_h1_val == -8193, rs2_h0_val == 21845
// opcode: scmplt16 ; op1:x11; op2:x17; dest:x0; op1val:0xdfff0006;  op2val:0xfffe5555
TEST_RR_OP(scmplt16, x0, x11, x17, 0x00000000, 0xdfff0006, 0xfffe5555, x1, 16, x5)

inst_22:
// rs1==x19, rs2==x16, rd==x23, rs2_h1_val == -32768, rs1_h1_val == -16385, rs2_h0_val == 2048
// opcode: scmplt16 ; op1:x19; op2:x16; dest:x23; op1val:0xbfffffef;  op2val:0x80000800
TEST_RR_OP(scmplt16, x23, x19, x16, 0x00000000, 0xbfffffef, 0x80000800, x1, 20, x5)

inst_23:
// rs1==x14, rs2==x11, rd==x27, rs2_h1_val == 16384, rs1_h1_val == -1, rs2_h0_val == -257
// opcode: scmplt16 ; op1:x14; op2:x11; dest:x27; op1val:0xffffc000;  op2val:0x4000feff
TEST_RR_OP(scmplt16, x27, x14, x11, 0x00000000, 0xffffc000, 0x4000feff, x1, 24, x5)

inst_24:
// rs1==x17, rs2==x7, rd==x13, rs2_h1_val == 8192, rs2_h0_val == 2
// opcode: scmplt16 ; op1:x17; op2:x7; dest:x13; op1val:0x04fff9;  op2val:0x20000002
TEST_RR_OP(scmplt16, x13, x17, x7, 0x00000000, 0x04fff9, 0x20000002, x1, 28, x5)

inst_25:
// rs1==x12, rs2==x21, rd==x15, rs2_h1_val == 4096, rs2_h0_val == -33
// opcode: scmplt16 ; op1:x12; op2:x21; dest:x15; op1val:0x01ffff;  op2val:0x1000ffdf
TEST_RR_OP(scmplt16, x15, x12, x21, 0x00000000, 0x01ffff, 0x1000ffdf, x1, 32, x5)

inst_26:
// rs1==x3, rs2==x28, rd==x7, rs2_h1_val == 2048, rs1_h1_val == -513
// opcode: scmplt16 ; op1:x3; op2:x28; dest:x7; op1val:0xfdfffeff;  op2val:0x800fff6
TEST_RR_OP(scmplt16, x7, x3, x28, 0x00000000, 0xfdfffeff, 0x800fff6, x1, 36, x5)

inst_27:
// rs1==x24, rs2==x19, rd==x6, rs2_h1_val == 1024, rs2_h0_val == 512, rs1_h0_val == -8193
// opcode: scmplt16 ; op1:x24; op2:x19; dest:x6; op1val:0xfdffdfff;  op2val:0x4000200
TEST_RR_OP(scmplt16, x6, x24, x19, 0x00000000, 0xfdffdfff, 0x4000200, x1, 40, x5)

inst_28:
// rs1==x13, rs2==x8, rd==x12, rs2_h1_val == 512, rs2_h0_val == -21846, rs1_h1_val == 21845
// opcode: scmplt16 ; op1:x13; op2:x8; dest:x12; op1val:0x55550007;  op2val:0x200aaaa
TEST_RR_OP(scmplt16, x12, x13, x8, 0x00000000, 0x55550007, 0x200aaaa, x1, 44, x5)

inst_29:
// rs1==x28, rs2==x13, rd==x9, rs1_h0_val == -129, rs2_h0_val == 1024, rs2_h1_val == 128
// opcode: scmplt16 ; op1:x28; op2:x13; dest:x9; op1val:0xfffaff7f;  op2val:0x800400
TEST_RR_OP(scmplt16, x9, x28, x13, 0x00000000, 0xfffaff7f, 0x800400, x1, 48, x5)

inst_30:
// rs1==x30, rs2==x26, rd==x4, rs1_h0_val == -65, 
// opcode: scmplt16 ; op1:x30; op2:x26; dest:x4; op1val:0xc000ffbf;  op2val:0x800aaaa
TEST_RR_OP(scmplt16, x4, x30, x26, 0x00000000, 0xc000ffbf, 0x800aaaa, x1, 52, x5)

inst_31:
// rs1==x16, rs2==x12, rd==x19, rs1_h0_val == -9, 
// opcode: scmplt16 ; op1:x16; op2:x12; dest:x19; op1val:0xfff8fff7;  op2val:0x09ffef
TEST_RR_OP(scmplt16, x19, x16, x12, 0x00000000, 0xfff8fff7, 0x09ffef, x1, 56, x5)

inst_32:
// rs1_h0_val == -5, rs1_h1_val == -2049
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffb;  op2val:0xc0002000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xf7fffffb, 0xc0002000, x1, 60, x5)

inst_33:
// rs1_h0_val == -2, rs2_h0_val == -1025, rs1_h1_val == 256, rs2_h1_val == 1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe;  op2val:0x01fbff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x100fffe, 0x01fbff, x1, 64, x2)

inst_34:
// rs1_h0_val == 16384, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0004000;  op2val:0xffdffffb
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xc0004000, 0xffdffffb, x1, 68, x2)

inst_35:
// rs1_h0_val == 8192, rs1_h1_val == 32767, rs2_h0_val == -2049
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff2000;  op2val:0x1000f7ff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x7fff2000, 0x1000f7ff, x1, 72, x2)

inst_36:
// rs1_h0_val == 4096, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1001000;  op2val:0x030003
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x1001000, 0x030003, x1, 76, x2)

inst_37:
// rs1_h0_val == 1024, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0xffbf0040
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x7fff0400, 0xffbf0040, x1, 80, x2)

inst_38:
// rs1_h0_val == 256, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010100;  op2val:0x06ffef
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x010100, 0x06ffef, x1, 84, x2)

inst_39:
// rs1_h0_val == 128, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080;  op2val:0x2000200
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xffbf0080, 0x2000200, x1, 88, x2)

inst_40:
// rs1_h0_val == 16, rs2_h1_val == -1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0010;  op2val:0xffff7fff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xdfff0010, 0xffff7fff, x1, 92, x2)

inst_41:
// rs1_h0_val == 8, rs1_h1_val == 512
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000008;  op2val:0xfffc0100
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x2000008, 0xfffc0100, x1, 96, x2)

inst_42:
// rs1_h0_val == 4, rs2_h0_val == -1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080004;  op2val:0x4000ffff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x080004, 0x4000ffff, x1, 100, x2)

inst_43:
// rs1_h0_val == 2, rs1_h1_val == -129
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0002;  op2val:0x800efff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xff7f0002, 0x800efff, x1, 104, x2)

inst_44:
// rs1_h0_val == 1, rs1_h1_val == -2
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0001;  op2val:0xfefffffb
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfffe0001, 0xfefffffb, x1, 108, x2)

inst_45:
// rs1_h0_val == 0, rs2_h0_val == -3, rs1_h1_val == 16
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0x80fffd
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x100000, 0x80fffd, x1, 112, x2)

inst_46:
// rs2_h0_val == -32768, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7ff;  op2val:0x028000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xeffff7ff, 0x028000, x1, 116, x2)

inst_47:
// rs2_h0_val == 16384, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010800;  op2val:0xffdf4000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x010800, 0xffdf4000, x1, 120, x2)

inst_48:
// rs2_h0_val == 4096, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x065555;  op2val:0xbfff1000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x065555, 0xbfff1000, x1, 124, x2)

inst_49:
// rs2_h0_val == 32, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff;  op2val:0xffdf0020
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x3fffffff, 0xffdf0020, x1, 128, x2)

inst_50:
// rs2_h0_val == 8, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff8;  op2val:0x3fff0008
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x01fff8, 0x3fff0008, x1, 132, x2)

inst_51:
// rs2_h0_val == 1, rs1_h1_val == -5
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb4000;  op2val:0xfff60001
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfffb4000, 0xfff60001, x1, 136, x2)

inst_52:
// rs2_h0_val == 0, rs1_h1_val == 64, rs2_h1_val == 8
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x408000;  op2val:0x080000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x408000, 0x080000, x1, 140, x2)

inst_53:
// rs1_h1_val == -257, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffdff;  op2val:0x050004
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfefffdff, 0x050004, x1, 144, x2)

inst_54:
// rs1_h0_val == -21846, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xfffcfffa
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xfffcfffa, x1, 148, x2)

inst_55:
// rs1_h1_val == -9, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70000;  op2val:0x047fff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfff70000, 0x047fff, x1, 152, x2)

inst_56:
// rs1_h1_val == -3, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffef;  op2val:0x800c000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfffdffef, 0x800c000, x1, 156, x2)

inst_57:
// rs2_h1_val == 256, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0010;  op2val:0x100f7ff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfbff0010, 0x100f7ff, x1, 160, x2)

inst_58:
// rs1_h1_val == -32768, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000800;  op2val:0xdffffff9
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x80000800, 0xdffffff9, x1, 164, x2)

inst_59:
// rs2_h1_val == 64, rs2_h0_val == -9
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0800;  op2val:0x40fff7
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xdfff0800, 0x40fff7, x1, 168, x2)

inst_60:
// rs1_h1_val == 16384, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000007;  op2val:0x10000006
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x40000007, 0x10000006, x1, 172, x2)

inst_61:
// rs2_h1_val == 32, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffb;  op2val:0x202000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x07fffb, 0x202000, x1, 176, x2)

inst_62:
// rs1_h1_val == 8192, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004;  op2val:0xfbff0200
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x20000004, 0xfbff0200, x1, 180, x2)

inst_63:
// rs1_h1_val == 32, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffdf;  op2val:0xbfff2000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x20ffdf, 0xbfff2000, x1, 184, x2)

inst_64:
// rs2_h1_val == 16, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff9;  op2val:0x10efff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xdffffff9, 0x10efff, x1, 188, x2)

inst_65:
// rs2_h0_val == -8193, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0003;  op2val:0xfffadfff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xffff0003, 0xfffadfff, x1, 192, x2)

inst_66:
// rs2_h0_val == -513, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8;  op2val:0x80fdff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfffffff8, 0x80fdff, x1, 196, x2)

inst_67:
// rs1_h1_val == 4096, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10003fff;  op2val:0xf7ff0004
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x10003fff, 0xf7ff0004, x1, 200, x2)

inst_68:
// rs1_h0_val == -4097, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefff;  op2val:0x3ffff7ff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xfdffefff, 0x3ffff7ff, x1, 204, x2)

inst_69:
// rs2_h1_val == 0, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffa;  op2val:0x000100
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xaaaafffa, 0x000100, x1, 208, x2)

inst_70:
// rs1_h1_val == rs2_h1_val, rs1_h0_val == -513, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2, rs1_h1_val == 2, rs2_h0_val == -4097
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff;  op2val:0x02efff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x02fdff, 0x02efff, x1, 212, x2)

inst_71:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -1025, rs2_h0_val == 128, rs2_h1_val == -9
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fbff;  op2val:0xfff70080
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x05fbff, 0xfff70080, x1, 216, x2)

inst_72:
// rs2_h1_val == -513, rs1_h1_val == -4097, rs1_h0_val == -1, rs2_h0_val == 64
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xfdff0040
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xefffffff, 0xfdff0040, x1, 220, x2)

inst_73:
// rs2_h1_val == -129, rs1_h0_val == 512, rs2_h0_val == 32767, rs1_h1_val == 128
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0xff7f7fff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0x800200, 0xff7f7fff, x1, 224, x2)

inst_74:
// rs2_h1_val == -2, rs1_h1_val == -8193, rs2_h0_val == 21845
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0006;  op2val:0xfffe5555
TEST_RR_OP(scmplt16, x31, x30, x29, 0x00000000, 0xdfff0006, 0xfffe5555, x1, 228, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
