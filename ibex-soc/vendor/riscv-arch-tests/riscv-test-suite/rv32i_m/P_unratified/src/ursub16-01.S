
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursub16 instruction of the RISC-V RV32PZicsr extension for the ursub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x21, rd==x24, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 128, rs1_h1_val == 65533, rs2_h1_val == 65279
// opcode: ursub16 ; op1:x0; op2:x21; dest:x24; op1val:0xfffd0000;  op2val:0xfeff0080
TEST_RR_OP(ursub16, x24, x0, x21, 0x00000000, 0xfffd0000, 0xfeff0080, x5, 0, x11)

inst_1:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x12, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 2, rs1_h1_val == 2, rs1_h0_val == 32, rs2_h0_val == 4096
// opcode: ursub16 ; op1:x10; op2:x10; dest:x12; op1val:0x020020;  op2val:0x021000
TEST_RR_OP(ursub16, x12, x10, x10, 0x00000000, 0x020020, 0x021000, x5, 4, x11)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x13, rd==x8, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 65527, rs1_h1_val == 43690
// opcode: ursub16 ; op1:x8; op2:x13; dest:x8; op1val:0xaaaa0005;  op2val:0xfff70005
TEST_RR_OP(ursub16, x8, x8, x13, 0x00000000, 0xaaaa0005, 0xfff70005, x5, 8, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_h1_val == 43690, rs1_h0_val == 65519
// opcode: ursub16 ; op1:x16; op2:x16; dest:x16; op1val:0x13ffef;  op2val:0xaaaa0012
TEST_RR_OP(ursub16, x16, x16, x16, 0x00000000, 0x13ffef, 0xaaaa0012, x5, 12, x11)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x19, rd==x19, rs2_h1_val == 21845, rs1_h0_val == 65533, rs2_h0_val == 65279
// opcode: ursub16 ; op1:x7; op2:x19; dest:x19; op1val:0x07fffd;  op2val:0x5555feff
TEST_RR_OP(ursub16, x19, x7, x19, 0x00000000, 0x07fffd, 0x5555feff, x5, 16, x11)

inst_5:
// rs1==x24, rs2==x31, rd==x14, rs2_h1_val == 32767, rs1_h0_val == 32767, rs2_h0_val == 65527
// opcode: ursub16 ; op1:x24; op2:x31; dest:x14; op1val:0x0f7fff;  op2val:0x7ffffff7
TEST_RR_OP(ursub16, x14, x24, x31, 0x00000000, 0x0f7fff, 0x7ffffff7, x5, 20, x11)

inst_6:
// rs1==x31, rs2==x24, rd==x3, rs2_h1_val == 49151, rs2_h0_val == 8192
// opcode: ursub16 ; op1:x31; op2:x24; dest:x3; op1val:0x070005;  op2val:0xbfff2000
TEST_RR_OP(ursub16, x3, x31, x24, 0x00000000, 0x070005, 0xbfff2000, x5, 24, x11)

inst_7:
// rs1==x15, rs2==x1, rd==x0, rs2_h1_val == 57343, rs1_h0_val == 65531, rs2_h0_val == 61439
// opcode: ursub16 ; op1:x15; op2:x1; dest:x0; op1val:0x11fffb;  op2val:0xdfffefff
TEST_RR_OP(ursub16, x0, x15, x1, 0x00000000, 0x11fffb, 0xdfffefff, x5, 28, x11)

inst_8:
// rs1==x26, rs2==x12, rd==x4, rs2_h1_val == 61439, rs2_h0_val == 65471
// opcode: ursub16 ; op1:x26; op2:x12; dest:x4; op1val:0x0e0013;  op2val:0xefffffbf
TEST_RR_OP(ursub16, x4, x26, x12, 0x00000000, 0x0e0013, 0xefffffbf, x5, 32, x11)

inst_9:
// rs1==x4, rs2==x22, rd==x10, rs2_h1_val == 63487, rs2_h0_val == 64511, rs1_h1_val == 64
// opcode: ursub16 ; op1:x4; op2:x22; dest:x10; op1val:0x407fff;  op2val:0xf7fffbff
TEST_RR_OP(ursub16, x10, x4, x22, 0x00000000, 0x407fff, 0xf7fffbff, x5, 36, x11)

inst_10:
// rs1==x28, rs2==x23, rd==x17, rs2_h1_val == 64511, rs1_h0_val == 4, rs2_h0_val == 65535, rs1_h1_val == 1
// opcode: ursub16 ; op1:x28; op2:x23; dest:x17; op1val:0x010004;  op2val:0xfbffffff
TEST_RR_OP(ursub16, x17, x28, x23, 0x00000000, 0x010004, 0xfbffffff, x5, 40, x11)

inst_11:
// rs1==x1, rs2==x26, rd==x25, rs2_h1_val == 65023, rs1_h1_val == 57343, rs2_h0_val == 0
// opcode: ursub16 ; op1:x1; op2:x26; dest:x25; op1val:0xdfff000e;  op2val:0xfdff0000
TEST_RR_OP(ursub16, x25, x1, x26, 0x00000000, 0xdfff000e, 0xfdff0000, x5, 44, x11)

inst_12:
// rs1==x21, rs2==x29, rd==x23, rs2_h1_val == 65407, rs2_h0_val == 65533, rs1_h1_val == 65279
// opcode: ursub16 ; op1:x21; op2:x29; dest:x23; op1val:0xfeff000e;  op2val:0xff7ffffd
TEST_RR_OP(ursub16, x23, x21, x29, 0x00000000, 0xfeff000e, 0xff7ffffd, x5, 48, x11)

inst_13:
// rs1==x30, rs2==x9, rd==x6, rs2_h1_val == 65471, rs1_h1_val == 8192, rs2_h0_val == 64
// opcode: ursub16 ; op1:x30; op2:x9; dest:x6; op1val:0x20000003;  op2val:0xffbf0040
TEST_RR_OP(ursub16, x6, x30, x9, 0x00000000, 0x20000003, 0xffbf0040, x5, 52, x11)

inst_14:
// rs1==x12, rs2==x2, rd==x28, rs2_h1_val == 65503, rs1_h1_val == 65471
// opcode: ursub16 ; op1:x12; op2:x2; dest:x28; op1val:0xffbf000e;  op2val:0xffdffffd
TEST_RR_OP(ursub16, x28, x12, x2, 0x00000000, 0xffbf000e, 0xffdffffd, x5, 56, x11)

inst_15:
// rs1==x25, rs2==x18, rd==x1, rs2_h1_val == 65519, 
// opcode: ursub16 ; op1:x25; op2:x18; dest:x1; op1val:0x037fff;  op2val:0xffef0005
TEST_RR_OP(ursub16, x1, x25, x18, 0x00000000, 0x037fff, 0xffef0005, x5, 60, x10)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x22, rs2==x14, rd==x13, rs2_h1_val == 65531, 
// opcode: ursub16 ; op1:x22; op2:x14; dest:x13; op1val:0xfffd0003;  op2val:0xfffb0007
TEST_RR_OP(ursub16, x13, x22, x14, 0x00000000, 0xfffd0003, 0xfffb0007, x1, 0, x10)

inst_17:
// rs1==x29, rs2==x15, rd==x2, rs2_h1_val == 65533, rs1_h0_val == 128
// opcode: ursub16 ; op1:x29; op2:x15; dest:x2; op1val:0x400080;  op2val:0xfffdfff7
TEST_RR_OP(ursub16, x2, x29, x15, 0x00000000, 0x400080, 0xfffdfff7, x1, 4, x10)

inst_18:
// rs1==x13, rs2==x17, rd==x22, rs2_h1_val == 65534, 
// opcode: ursub16 ; op1:x13; op2:x17; dest:x22; op1val:0x030009;  op2val:0xfffefeff
TEST_RR_OP(ursub16, x22, x13, x17, 0x00000000, 0x030009, 0xfffefeff, x1, 8, x10)

inst_19:
// rs1==x11, rs2==x30, rd==x21, rs2_h1_val == 32768, rs2_h0_val == 4, rs1_h0_val == 1024, rs1_h1_val == 21845
// opcode: ursub16 ; op1:x11; op2:x30; dest:x21; op1val:0x55550400;  op2val:0x80000004
TEST_RR_OP(ursub16, x21, x11, x30, 0x00000000, 0x55550400, 0x80000004, x1, 12, x10)

inst_20:
// rs1==x6, rs2==x28, rd==x15, rs2_h1_val == 16384, rs1_h0_val == 65534, rs1_h1_val == 65407
// opcode: ursub16 ; op1:x6; op2:x28; dest:x15; op1val:0xff7ffffe;  op2val:0x40000013
TEST_RR_OP(ursub16, x15, x6, x28, 0x00000000, 0xff7ffffe, 0x40000013, x1, 16, x10)

inst_21:
// rs1==x9, rs2==x4, rd==x5, rs2_h1_val == 8192, rs1_h0_val == 1
// opcode: ursub16 ; op1:x9; op2:x4; dest:x5; op1val:0x0e0001;  op2val:0x20000004
TEST_RR_OP(ursub16, x5, x9, x4, 0x00000000, 0x0e0001, 0x20000004, x1, 20, x10)

inst_22:
// rs1==x5, rs2==x27, rd==x31, rs2_h1_val == 4096, rs1_h0_val == 256, rs1_h1_val == 65023
// opcode: ursub16 ; op1:x5; op2:x27; dest:x31; op1val:0xfdff0100;  op2val:0x1000fff7
TEST_RR_OP(ursub16, x31, x5, x27, 0x00000000, 0xfdff0100, 0x1000fff7, x1, 24, x10)

inst_23:
// rs1==x23, rs2==x20, rd==x30, rs2_h1_val == 2048, 
// opcode: ursub16 ; op1:x23; op2:x20; dest:x30; op1val:0x050012;  op2val:0x8000000
TEST_RR_OP(ursub16, x30, x23, x20, 0x00000000, 0x050012, 0x8000000, x1, 28, x10)

inst_24:
// rs1==x17, rs2==x5, rd==x18, rs2_h1_val == 1024, rs1_h0_val == 65023
// opcode: ursub16 ; op1:x17; op2:x5; dest:x18; op1val:0x09fdff;  op2val:0x400feff
TEST_RR_OP(ursub16, x18, x17, x5, 0x00000000, 0x09fdff, 0x400feff, x1, 32, x10)

inst_25:
// rs1==x18, rs2==x6, rd==x20, rs2_h1_val == 512, rs1_h1_val == 4096, rs1_h0_val == 64
// opcode: ursub16 ; op1:x18; op2:x6; dest:x20; op1val:0x10000040;  op2val:0x200ffff
TEST_RR_OP(ursub16, x20, x18, x6, 0x00000000, 0x10000040, 0x200ffff, x1, 36, x10)

inst_26:
// rs1==x19, rs2==x25, rd==x29, rs2_h1_val == 256, rs2_h0_val == 21845, rs1_h0_val == 65279
// opcode: ursub16 ; op1:x19; op2:x25; dest:x29; op1val:0xffbffeff;  op2val:0x1005555
TEST_RR_OP(ursub16, x29, x19, x25, 0x00000000, 0xffbffeff, 0x1005555, x1, 40, x10)

inst_27:
// rs1==x27, rs2==x8, rd==x7, rs2_h1_val == 128, rs1_h0_val == 32768, rs1_h1_val == 64511
// opcode: ursub16 ; op1:x27; op2:x8; dest:x7; op1val:0xfbff8000;  op2val:0x80000e
TEST_RR_OP(ursub16, x7, x27, x8, 0x00000000, 0xfbff8000, 0x80000e, x1, 44, x10)

inst_28:
// rs1==x2, rs2==x11, rd==x27, rs2_h1_val == 64, rs2_h0_val == 43690, rs1_h1_val == 65527, rs1_h0_val == 61439
// opcode: ursub16 ; op1:x2; op2:x11; dest:x27; op1val:0xfff7efff;  op2val:0x40aaaa
TEST_RR_OP(ursub16, x27, x2, x11, 0x00000000, 0xfff7efff, 0x40aaaa, x1, 48, x10)

inst_29:
// rs1==x3, rs2==x7, rd==x9, rs2_h1_val == 32, 
// opcode: ursub16 ; op1:x3; op2:x7; dest:x9; op1val:0x5555000a;  op2val:0x202000
TEST_RR_OP(ursub16, x9, x3, x7, 0x00000000, 0x5555000a, 0x202000, x1, 52, x10)

inst_30:
// rs1==x20, rs2==x0, rd==x11, rs2_h1_val == 16, rs2_h0_val == 2, rs1_h0_val == 65407
// opcode: ursub16 ; op1:x20; op2:x0; dest:x11; op1val:0x5555ff7f;  op2val:0x100002
TEST_RR_OP(ursub16, x11, x20, x0, 0x00000000, 0x5555ff7f, 0x100002, x1, 56, x10)

inst_31:
// rs1==x14, rs2==x3, rd==x26, rs2_h1_val == 8, 
// opcode: ursub16 ; op1:x14; op2:x3; dest:x26; op1val:0x090040;  op2val:0x080009
TEST_RR_OP(ursub16, x26, x14, x3, 0x00000000, 0x090040, 0x080009, x1, 60, x10)

inst_32:
// rs1_h0_val == 16384, rs2_h0_val == 65023, rs1_h1_val == 65531
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb4000;  op2val:0x40fdff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfffb4000, 0x40fdff, x1, 64, x2)

inst_33:
// rs1_h0_val == 8192, rs2_h0_val == 2048
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10002000;  op2val:0x0e0800
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x10002000, 0x0e0800, x1, 68, x2)

inst_34:
// rs1_h0_val == 4096, rs1_h1_val == 32
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x201000;  op2val:0xfbff1000
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x201000, 0xfbff1000, x1, 72, x2)

inst_35:
// rs1_h0_val == 2048, rs1_h1_val == 63487
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0800;  op2val:0xaaaaaaaa
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xf7ff0800, 0xaaaaaaaa, x1, 76, x2)

inst_36:
// rs1_h0_val == 512, rs2_h0_val == 65503
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x120200;  op2val:0x06ffdf
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x120200, 0x06ffdf, x1, 80, x2)

inst_37:
// rs1_h0_val == 16, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000010;  op2val:0x55550006
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x10000010, 0x55550006, x1, 84, x2)

inst_38:
// rs1_h0_val == 8, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008;  op2val:0x0fefff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfbff0008, 0x0fefff, x1, 88, x2)

inst_39:
// rs1_h0_val == 2, rs2_h0_val == 65534
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000002;  op2val:0x200fffe
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x20000002, 0x200fffe, x1, 92, x2)

inst_40:
// rs1_h0_val == 65535, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0x0c0003
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xff7fffff, 0x0c0003, x1, 96, x2)

inst_41:
// rs2_h1_val == 4, rs2_h0_val == 49151, rs1_h1_val == 512
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000011;  op2val:0x04bfff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x2000011, 0x04bfff, x1, 100, x2)

inst_42:
// rs2_h1_val == 1, rs1_h1_val == 16
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100100;  op2val:0x01aaaa
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x100100, 0x01aaaa, x1, 104, x2)

inst_43:
// rs2_h1_val == 65535, rs1_h1_val == 0
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x000004;  op2val:0xfffffffd
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x000004, 0xfffffffd, x1, 108, x2)

inst_44:
// rs2_h1_val == 0, rs1_h1_val == 49151, rs1_h0_val == 21845
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff5555;  op2val:0x00ffff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xbfff5555, 0x00ffff, x1, 112, x2)

inst_45:
// rs2_h0_val == 32767, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x110004;  op2val:0xffff7fff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x110004, 0xffff7fff, x1, 116, x2)

inst_46:
// rs2_h0_val == 57343, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdefff;  op2val:0x8000dfff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfffdefff, 0x8000dfff, x1, 120, x2)

inst_47:
// rs2_h0_val == 63487, rs1_h1_val == 65534
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0400;  op2val:0xf7fff7ff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfffe0400, 0xf7fff7ff, x1, 124, x2)

inst_48:
// rs2_h0_val == 65407, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d4000;  op2val:0xff7fff7f
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x0d4000, 0xff7fff7f, x1, 128, x2)

inst_49:
// rs2_h0_val == 65519, rs1_h1_val == 4
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x040012;  op2val:0xffdfffef
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x040012, 0xffdfffef, x1, 132, x2)

inst_50:
// rs2_h0_val == 1024, rs1_h0_val == 65503, rs1_h1_val == 32767
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf;  op2val:0x800400
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x7fffffdf, 0x800400, x1, 136, x2)

inst_51:
// rs2_h0_val == 512, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0008;  op2val:0xfdff0200
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfeff0008, 0xfdff0200, x1, 140, x2)

inst_52:
// rs2_h0_val == 256, rs1_h0_val == 49151
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffbfff;  op2val:0xff7f0100
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xf7ffbfff, 0xff7f0100, x1, 144, x2)

inst_53:
// rs2_h0_val == 32, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0bbfff;  op2val:0xbfff0020
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x0bbfff, 0xbfff0020, x1, 148, x2)

inst_54:
// rs2_h0_val == 16, rs1_h1_val == 16384
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000200;  op2val:0x0f0010
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x40000200, 0x0f0010, x1, 152, x2)

inst_55:
// rs2_h0_val == 8, rs1_h1_val == 65503
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000;  op2val:0xffdf0008
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xffdf4000, 0xffdf0008, x1, 156, x2)

inst_56:
// rs2_h0_val == 1, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb;  op2val:0x050001
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfff7fffb, 0x050001, x1, 160, x2)

inst_57:
// rs1_h1_val == 61439, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000;  op2val:0x5555000c
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xefff0000, 0x5555000c, x1, 164, x2)

inst_58:
// rs1_h1_val == 65519, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080;  op2val:0xff7f000b
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xffef0080, 0xff7f000b, x1, 168, x2)

inst_59:
// rs2_h0_val == 65531, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000a;  op2val:0x0dfffb
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xffef000a, 0x0dfffb, x1, 172, x2)

inst_60:
// rs1_h1_val == 2048, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff;  op2val:0x03feff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x8007fff, 0x03feff, x1, 176, x2)

inst_61:
// rs1_h1_val == 1024, rs1_h0_val == 65471
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffbf;  op2val:0xfffdf7ff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x400ffbf, 0xfffdf7ff, x1, 180, x2)

inst_62:
// rs1_h1_val == 256, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000400;  op2val:0x000007
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x1000400, 0x000007, x1, 184, x2)

inst_63:
// rs1_h1_val == 128, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffff;  op2val:0x0b0800
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x80ffff, 0x0b0800, x1, 188, x2)

inst_64:
// rs1_h1_val == 8, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x080007;  op2val:0x8000000f
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x080007, 0x8000000f, x1, 192, x2)

inst_65:
// rs1_h1_val == 65535, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0100;  op2val:0xfdfffdff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xffff0100, 0xfdfffdff, x1, 196, x2)

inst_66:
// rs1_h0_val == 65527, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff7;  op2val:0x800800
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x06fff7, 0x800800, x1, 200, x2)

inst_67:
// rs1_h0_val == 43690, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0baaaa;  op2val:0xdfff000b
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x0baaaa, 0xdfff000b, x1, 204, x2)

inst_68:
// rs1_h0_val == 57343, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0fdfff;  op2val:0x0c0001
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x0fdfff, 0x0c0001, x1, 208, x2)

inst_69:
// rs1_h0_val == 63487, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80f7ff;  op2val:0xfffbff7f
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x80f7ff, 0xfffbff7f, x1, 212, x2)

inst_70:
// rs1_h0_val == 64511, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffbff;  op2val:0xffefbfff
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x7ffffbff, 0xffefbfff, x1, 216, x2)

inst_71:
// rs2_h0_val == 32768, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffef;  op2val:0x058000
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfffbffef, 0x058000, x1, 220, x2)

inst_72:
// rs2_h0_val == 16384, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x047fff;  op2val:0x034000
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x047fff, 0x034000, x1, 224, x2)

inst_73:
// rs1_h1_val == 32768, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000f;  op2val:0xdfff000a
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x8000000f, 0xdfff000a, x1, 228, x2)

inst_74:
// rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 128, rs1_h1_val == 65533, rs2_h1_val == 65279
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0000;  op2val:0xfeff0080
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0xfffd0000, 0xfeff0080, x1, 232, x2)

inst_75:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 2, rs1_h1_val == 2, rs1_h0_val == 32, rs2_h0_val == 4096
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x020020;  op2val:0x021000
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x020020, 0x021000, x1, 236, x2)

inst_76:
// rs2_h1_val == 16, rs2_h0_val == 2, rs1_h0_val == 65407
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f;  op2val:0x100002
TEST_RR_OP(ursub16, x31, x30, x29, 0x00000000, 0x5555ff7f, 0x100002, x1, 240, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 61*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
