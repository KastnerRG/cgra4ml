
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd830 instruction of the RISC-V RV32PZicsr extension for the sunpkd830 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd830)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1==x5, rd==x2, rs1_b0_val == -128, rs1_b3_val == 4, rs1_b1_val == 85
// opcode: sunpkd830 ; op1:x5; dest:x2; op1val:0x4095580;
TEST_RD_OP( sunpkd830, x2, x5, 0x00000000, 0x4095580, x4, 0, x16)

inst_1:
// rs1==x9, rd==x0, rs1_b3_val == -86, rs1_b1_val == 64, rs1_b0_val == -1, rs1_b2_val == 127
// opcode: sunpkd830 ; op1:x9; dest:x0; op1val:0xaa7f40ff;
TEST_RD_OP( sunpkd830, x0, x9, 0x00000000, 0xaa7f40ff, x4, 4, x16)

inst_2:
// rs1==x30, rd==x19, rs1_b3_val == 85, rs1_b2_val == -86
// opcode: sunpkd830 ; op1:x30; dest:x19; op1val:0x55aaf8ff;
TEST_RD_OP( sunpkd830, x19, x30, 0x00000000, 0x55aaf8ff, x4, 8, x16)

inst_3:
// rs1==x3, rd==x20, rs1_b3_val == 127, rs1_b0_val == 4, rs1_b2_val == -2
// opcode: sunpkd830 ; op1:x3; dest:x20; op1val:0x7ffef604;
TEST_RD_OP( sunpkd830, x20, x3, 0x00000000, 0x7ffef604, x4, 12, x16)

inst_4:
// rs1==x15, rd==x17, rs1_b3_val == -65, rs1_b2_val == -1, rs1_b0_val == -5
// opcode: sunpkd830 ; op1:x15; dest:x17; op1val:0xbffff8fb;
TEST_RD_OP( sunpkd830, x17, x15, 0x00000000, 0xbffff8fb, x4, 16, x16)

inst_5:
// rs1==x20, rd==x14, rs1_b3_val == -33, rs1_b2_val == -128
// opcode: sunpkd830 ; op1:x20; dest:x14; op1val:0xdf80f903;
TEST_RD_OP( sunpkd830, x14, x20, 0x00000000, 0xdf80f903, x4, 20, x16)

inst_6:
// rs1==x21, rd==x13, rs1_b3_val == -17, 
// opcode: sunpkd830 ; op1:x21; dest:x13; op1val:0xefaa4005;
TEST_RD_OP( sunpkd830, x13, x21, 0x00000000, 0xefaa4005, x4, 24, x16)

inst_7:
// rs1==x2, rd==x31, rs1_b3_val == -9, rs1_b2_val == 64, rs1_b1_val == -5, rs1_b0_val == -65
// opcode: sunpkd830 ; op1:x2; dest:x31; op1val:0xf740fbbf;
TEST_RD_OP( sunpkd830, x31, x2, 0x00000000, 0xf740fbbf, x4, 28, x16)

inst_8:
// rs1==x1, rd==x30, rs1_b3_val == -5, rs1_b2_val == 2
// opcode: sunpkd830 ; op1:x1; dest:x30; op1val:0xfb020709;
TEST_RD_OP( sunpkd830, x30, x1, 0x00000000, 0xfb020709, x4, 32, x16)

inst_9:
// rs1==x26, rd==x3, rs1_b3_val == -3, rs1_b2_val == 8
// opcode: sunpkd830 ; op1:x26; dest:x3; op1val:0xfd08f606;
TEST_RD_OP( sunpkd830, x3, x26, 0x00000000, 0xfd08f606, x4, 36, x16)

inst_10:
// rs1==x23, rd==x6, rs1_b3_val == -2, rs1_b1_val == 2, rs1_b2_val == 4, rs1_b0_val == 127
// opcode: sunpkd830 ; op1:x23; dest:x6; op1val:0xfe04027f;
TEST_RD_OP( sunpkd830, x6, x23, 0x00000000, 0xfe04027f, x4, 40, x16)

inst_11:
// rs1==x28, rd==x22, rs1_b3_val == -128, 
// opcode: sunpkd830 ; op1:x28; dest:x22; op1val:0x80c03ffa;
TEST_RD_OP( sunpkd830, x22, x28, 0x00000000, 0x80c03ffa, x4, 44, x16)

inst_12:
// rs1==x14, rd==x11, rs1_b3_val == 64, rs1_b0_val == 85
// opcode: sunpkd830 ; op1:x14; dest:x11; op1val:0x40c00555;
TEST_RD_OP( sunpkd830, x11, x14, 0x00000000, 0x40c00555, x4, 48, x16)

inst_13:
// rs1==x13, rd==x12, rs1_b3_val == 32, rs1_b0_val == -17
// opcode: sunpkd830 ; op1:x13; dest:x12; op1val:0x2080f9ef;
TEST_RD_OP( sunpkd830, x12, x13, 0x00000000, 0x2080f9ef, x4, 52, x16)

inst_14:
// rs1==x19, rd==x10, rs1_b3_val == 16, rs1_b2_val == 1
// opcode: sunpkd830 ; op1:x19; dest:x10; op1val:0x1001fcf6;
TEST_RD_OP( sunpkd830, x10, x19, 0x00000000, 0x1001fcf6, x4, 56, x16)

inst_15:
// rs1==x0, rd==x7, rs1_b3_val == 8, rs1_b0_val == -2
// opcode: sunpkd830 ; op1:x0; dest:x7; op1val:0x8f802fe;
TEST_RD_OP( sunpkd830, x7, x0, 0x00000000, 0x8f802fe, x4, 60, x16)

inst_16:
// rs1==x17, rd==x21, rs1_b3_val == 2, rs1_b1_val == 127, rs1_b0_val == 2
// opcode: sunpkd830 ; op1:x17; dest:x21; op1val:0x2807f02;
TEST_RD_OP( sunpkd830, x21, x17, 0x00000000, 0x2807f02, x4, 64, x16)

inst_17:
// rs1==x24, rd==x25, rs1_b3_val == 1, rs1_b1_val == -9
// opcode: sunpkd830 ; op1:x24; dest:x25; op1val:0x109f7ff;
TEST_RD_OP( sunpkd830, x25, x24, 0x00000000, 0x109f7ff, x4, 68, x16)

inst_18:
// rs1==x25, rd==x29, rs1_b3_val == 0, 
// opcode: sunpkd830 ; op1:x25; dest:x29; op1val:0xf8c0f9;
TEST_RD_OP( sunpkd830, x29, x25, 0x00000000, 0xf8c0f9, x4, 72, x16)

inst_19:
// rs1==x10, rd==x15, rs1_b3_val == -1, rs1_b2_val == 85
// opcode: sunpkd830 ; op1:x10; dest:x15; op1val:0xff55fabf;
TEST_RD_OP( sunpkd830, x15, x10, 0x00000000, 0xff55fabf, x4, 76, x16)

inst_20:
// rs1==x7, rd==x8, rs1_b2_val == -65, rs1_b1_val == -33
// opcode: sunpkd830 ; op1:x7; dest:x8; op1val:0x9bfdff6;
TEST_RD_OP( sunpkd830, x8, x7, 0x00000000, 0x9bfdff6, x4, 80, x16)

inst_21:
// rs1==x29, rd==x27, rs1_b2_val == -33, rs1_b0_val == -3, rs1_b1_val == -17
// opcode: sunpkd830 ; op1:x29; dest:x27; op1val:0xfedfeffd;
TEST_RD_OP( sunpkd830, x27, x29, 0x00000000, 0xfedfeffd, x4, 84, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_22:
// rs1==x16, rd==x5, rs1_b0_val == -33, rs1_b2_val == 32
// opcode: sunpkd830 ; op1:x16; dest:x5; op1val:0xf62003df;
TEST_RD_OP( sunpkd830, x5, x16, 0x00000000, 0xf62003df, x2, 0, x3)

inst_23:
// rs1==x8, rd==x16, rs1_b0_val == -9, 
// opcode: sunpkd830 ; op1:x8; dest:x16; op1val:0xf903fcf7;
TEST_RD_OP( sunpkd830, x16, x8, 0x00000000, 0xf903fcf7, x2, 4, x3)

inst_24:
// rs1==x27, rd==x24, rs1_b0_val == 64, 
// opcode: sunpkd830 ; op1:x27; dest:x24; op1val:0x5017f40;
TEST_RD_OP( sunpkd830, x24, x27, 0x00000000, 0x5017f40, x2, 8, x3)

inst_25:
// rs1==x12, rd==x23, rs1_b0_val == 32, rs1_b1_val == 4
// opcode: sunpkd830 ; op1:x12; dest:x23; op1val:0xfe060420;
TEST_RD_OP( sunpkd830, x23, x12, 0x00000000, 0xfe060420, x2, 12, x3)

inst_26:
// rs1==x4, rd==x26, rs1_b0_val == 16, 
// opcode: sunpkd830 ; op1:x4; dest:x26; op1val:0x10df3f10;
TEST_RD_OP( sunpkd830, x26, x4, 0x00000000, 0x10df3f10, x2, 16, x3)

inst_27:
// rs1==x6, rd==x18, rs1_b0_val == 8, 
// opcode: sunpkd830 ; op1:x6; dest:x18; op1val:0x20c0f608;
TEST_RD_OP( sunpkd830, x18, x6, 0x00000000, 0x20c0f608, x2, 20, x3)

inst_28:
// rs1==x31, rd==x28, rs1_b0_val == 1, rs1_b2_val == -17
// opcode: sunpkd830 ; op1:x31; dest:x28; op1val:0xbfefc001;
TEST_RD_OP( sunpkd830, x28, x31, 0x00000000, 0xbfefc001, x2, 24, x3)

inst_29:
// rs1==x11, rd==x4, rs1_b0_val == 0, rs1_b2_val == 0
// opcode: sunpkd830 ; op1:x11; dest:x4; op1val:0xf6000600;
TEST_RD_OP( sunpkd830, x4, x11, 0x00000000, 0xf6000600, x2, 28, x3)

inst_30:
// rs1==x18, rd==x1, rs1_b2_val == -9, 
// opcode: sunpkd830 ; op1:x18; dest:x1; op1val:0x5f70255;
TEST_RD_OP( sunpkd830, x1, x18, 0x00000000, 0x5f70255, x2, 32, x3)

inst_31:
// rs1==x22, rd==x9, rs1_b2_val == 16, 
// opcode: sunpkd830 ; op1:x22; dest:x9; op1val:0x10df40;
TEST_RD_OP( sunpkd830, x9, x22, 0x00000000, 0x10df40, x2, 36, x3)

inst_32:
// rs1_b1_val == -86, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xfbffaaff;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xfbffaaff, x2, 40, x3)

inst_33:
// rs1_b1_val == -65, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xdffebf05;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xdffebf05, x2, 44, x3)

inst_34:
// rs1_b2_val == -5, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xf7fb7f02;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xf7fb7f02, x2, 48, x3)

inst_35:
// rs1_b1_val == -3, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x507fd3f;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x507fd3f, x2, 52, x3)

inst_36:
// rs1_b1_val == -2, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xfdfffef8;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xfdfffef8, x2, 56, x3)

inst_37:
// rs1_b1_val == -128, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xfbf78055;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xfbf78055, x2, 60, x3)

inst_38:
// rs1_b2_val == -3, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x9fdf820;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x9fdf820, x2, 64, x3)

inst_39:
// rs1_b1_val == 32, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x7ffc2000;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x7ffc2000, x2, 68, x3)

inst_40:
// rs1_b1_val == 16, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xaa201040;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xaa201040, x2, 72, x3)

inst_41:
// rs1_b1_val == 8, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xef400880;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xef400880, x2, 76, x3)

inst_42:
// rs1_b1_val == 1, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x9aa01f7;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x9aa01f7, x2, 80, x3)

inst_43:
// rs1_b1_val == 0, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x8040005;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x8040005, x2, 84, x3)

inst_44:
// rs1_b1_val == -1, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x502ff02;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x502ff02, x2, 88, x3)

inst_45:
// rs1_b0_val == -86, 
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xf9f702aa;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xf9f702aa, x2, 92, x3)

inst_46:
// rs1_b3_val == -86, rs1_b1_val == 64, rs1_b0_val == -1, rs1_b2_val == 127
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0xaa7f40ff;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0xaa7f40ff, x2, 96, x3)

inst_47:
// rs1_b3_val == 8, rs1_b0_val == -2
// opcode: sunpkd830 ; op1:x30; dest:x31; op1val:0x8f802fe;
TEST_RD_OP( sunpkd830, x31, x30, 0x00000000, 0x8f802fe, x2, 100, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 26*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
