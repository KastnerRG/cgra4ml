
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmple16 instruction of the RISC-V RV32PZicsr extension for the ucmple16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmple16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x5, rd==x3, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 61439, rs2_h0_val == 128, rs1_h1_val == 512
// opcode: ucmple16 ; op1:x16; op2:x5; dest:x3; op1val:0x2000000;  op2val:0xefff0080
TEST_RR_OP(ucmple16, x3, x16, x5, 0x00000000, 0x2000000, 0xefff0080, x10, 0, x14)

inst_1:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x19, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32
// opcode: ucmple16 ; op1:x22; op2:x22; dest:x19; op1val:0x13000b;  op2val:0x130020
TEST_RR_OP(ucmple16, x19, x22, x22, 0x00000000, 0x13000b, 0x130020, x10, 4, x14)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x16, rd==x8, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 8192, rs2_h0_val == 8192, rs2_h1_val == 512, rs1_h0_val == 8192
// opcode: ucmple16 ; op1:x8; op2:x16; dest:x8; op1val:0x20002000;  op2val:0x2002000
TEST_RR_OP(ucmple16, x8, x8, x16, 0x00000000, 0x20002000, 0x2002000, x10, 8, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_h1_val == 43690, rs1_h0_val == 61439
// opcode: ucmple16 ; op1:x11; op2:x11; dest:x11; op1val:0x13efff;  op2val:0xaaaa000d
TEST_RR_OP(ucmple16, x11, x11, x11, 0x00000000, 0x13efff, 0xaaaa000d, x10, 12, x14)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x20, rd==x20, rs2_h1_val == 21845, rs1_h0_val == 65471, rs1_h1_val == 1024
// opcode: ucmple16 ; op1:x19; op2:x20; dest:x20; op1val:0x400ffbf;  op2val:0x55550003
TEST_RR_OP(ucmple16, x20, x19, x20, 0x00000000, 0x400ffbf, 0x55550003, x10, 16, x14)

inst_5:
// rs1==x1, rs2==x15, rd==x22, rs2_h1_val == 32767, rs1_h0_val == 32768, rs2_h0_val == 65519
// opcode: ucmple16 ; op1:x1; op2:x15; dest:x22; op1val:0x078000;  op2val:0x7fffffef
TEST_RR_OP(ucmple16, x22, x1, x15, 0x00000000, 0x078000, 0x7fffffef, x10, 20, x14)

inst_6:
// rs1==x2, rs2==x1, rd==x0, rs2_h1_val == 49151, rs1_h1_val == 43690
// opcode: ucmple16 ; op1:x2; op2:x1; dest:x0; op1val:0xaaaaffbf;  op2val:0xbfffffef
TEST_RR_OP(ucmple16, x0, x2, x1, 0x00000000, 0xaaaaffbf, 0xbfffffef, x10, 24, x14)

inst_7:
// rs1==x20, rs2==x13, rd==x12, rs2_h1_val == 57343, rs1_h0_val == 32767, rs1_h1_val == 128, rs2_h0_val == 2048
// opcode: ucmple16 ; op1:x20; op2:x13; dest:x12; op1val:0x807fff;  op2val:0xdfff0800
TEST_RR_OP(ucmple16, x12, x20, x13, 0x00000000, 0x807fff, 0xdfff0800, x10, 28, x14)

inst_8:
// rs1==x30, rs2==x4, rd==x28, rs2_h1_val == 63487, rs1_h1_val == 32, rs2_h0_val == 65407
// opcode: ucmple16 ; op1:x30; op2:x4; dest:x28; op1val:0x20000f;  op2val:0xf7ffff7f
TEST_RR_OP(ucmple16, x28, x30, x4, 0x00000000, 0x20000f, 0xf7ffff7f, x10, 32, x14)

inst_9:
// rs1==x21, rs2==x9, rd==x7, rs2_h1_val == 64511, rs1_h0_val == 43690, rs1_h1_val == 2048, rs2_h0_val == 8
// opcode: ucmple16 ; op1:x21; op2:x9; dest:x7; op1val:0x800aaaa;  op2val:0xfbff0008
TEST_RR_OP(ucmple16, x7, x21, x9, 0x00000000, 0x800aaaa, 0xfbff0008, x10, 36, x14)

inst_10:
// rs1==x27, rs2==x30, rd==x1, rs2_h1_val == 65023, rs1_h0_val == 65534, rs1_h1_val == 64511
// opcode: ucmple16 ; op1:x27; op2:x30; dest:x1; op1val:0xfbfffffe;  op2val:0xfdff0006
TEST_RR_OP(ucmple16, x1, x27, x30, 0x00000000, 0xfbfffffe, 0xfdff0006, x10, 40, x14)

inst_11:
// rs1==x0, rs2==x31, rd==x9, rs2_h1_val == 65279, rs2_h0_val == 16384
// opcode: ucmple16 ; op1:x0; op2:x31; dest:x9; op1val:0x032000;  op2val:0xfeff4000
TEST_RR_OP(ucmple16, x9, x0, x31, 0x00000000, 0x032000, 0xfeff4000, x10, 44, x14)

inst_12:
// rs1==x5, rs2==x27, rd==x18, rs2_h1_val == 65407, rs2_h0_val == 4
// opcode: ucmple16 ; op1:x5; op2:x27; dest:x18; op1val:0x80fffe;  op2val:0xff7f0004
TEST_RR_OP(ucmple16, x18, x5, x27, 0x00000000, 0x80fffe, 0xff7f0004, x10, 48, x14)

inst_13:
// rs1==x28, rs2==x3, rd==x24, rs2_h1_val == 65471, rs1_h1_val == 16, rs1_h0_val == 16
// opcode: ucmple16 ; op1:x28; op2:x3; dest:x24; op1val:0x100010;  op2val:0xffbf0005
TEST_RR_OP(ucmple16, x24, x28, x3, 0x00000000, 0x100010, 0xffbf0005, x10, 52, x14)

inst_14:
// rs1==x18, rs2==x23, rd==x21, rs2_h1_val == 65503, rs2_h0_val == 32767
// opcode: ucmple16 ; op1:x18; op2:x23; dest:x21; op1val:0x030005;  op2val:0xffdf7fff
TEST_RR_OP(ucmple16, x21, x18, x23, 0x00000000, 0x030005, 0xffdf7fff, x10, 56, x14)

inst_15:
// rs1==x29, rs2==x25, rd==x6, rs2_h1_val == 65519, rs1_h1_val == 2, rs1_h0_val == 65527
// opcode: ucmple16 ; op1:x29; op2:x25; dest:x6; op1val:0x02fff7;  op2val:0xffef000c
TEST_RR_OP(ucmple16, x6, x29, x25, 0x00000000, 0x02fff7, 0xffef000c, x10, 60, x14)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x13, rs2==x17, rd==x23, rs2_h1_val == 65527, rs1_h1_val == 61439, rs1_h0_val == 49151
// opcode: ucmple16 ; op1:x13; op2:x17; dest:x23; op1val:0xefffbfff;  op2val:0xfff74000
TEST_RR_OP(ucmple16, x23, x13, x17, 0x00000000, 0xefffbfff, 0xfff74000, x1, 0, x11)

inst_17:
// rs1==x4, rs2==x0, rd==x13, rs2_h1_val == 65531, 
// opcode: ucmple16 ; op1:x4; op2:x0; dest:x13; op1val:0x20000a;  op2val:0xfffbff7f
TEST_RR_OP(ucmple16, x13, x4, x0, 0x00000000, 0x20000a, 0xfffbff7f, x1, 4, x11)

inst_18:
// rs1==x9, rs2==x7, rd==x2, rs2_h1_val == 65533, rs1_h1_val == 49151, rs1_h0_val == 65533, rs2_h0_val == 4096
// opcode: ucmple16 ; op1:x9; op2:x7; dest:x2; op1val:0xbffffffd;  op2val:0xfffd1000
TEST_RR_OP(ucmple16, x2, x9, x7, 0x00000000, 0xbffffffd, 0xfffd1000, x1, 8, x11)

inst_19:
// rs1==x23, rs2==x2, rd==x26, rs2_h1_val == 65534, 
// opcode: ucmple16 ; op1:x23; op2:x2; dest:x26; op1val:0x0e000b;  op2val:0xfffe0007
TEST_RR_OP(ucmple16, x26, x23, x2, 0x00000000, 0x0e000b, 0xfffe0007, x1, 12, x11)

inst_20:
// rs1==x6, rs2==x12, rd==x25, rs2_h1_val == 32768, rs1_h0_val == 32, rs1_h1_val == 1
// opcode: ucmple16 ; op1:x6; op2:x12; dest:x25; op1val:0x010020;  op2val:0x80000011
TEST_RR_OP(ucmple16, x25, x6, x12, 0x00000000, 0x010020, 0x80000011, x1, 16, x11)

inst_21:
// rs1==x3, rs2==x14, rd==x27, rs2_h1_val == 16384, rs1_h1_val == 0, rs1_h0_val == 65023
// opcode: ucmple16 ; op1:x3; op2:x14; dest:x27; op1val:0x00fdff;  op2val:0x40000080
TEST_RR_OP(ucmple16, x27, x3, x14, 0x00000000, 0x00fdff, 0x40000080, x1, 20, x11)

inst_22:
// rs1==x24, rs2==x18, rd==x31, rs2_h1_val == 8192, rs1_h0_val == 2048
// opcode: ucmple16 ; op1:x24; op2:x18; dest:x31; op1val:0x090800;  op2val:0x2000000c
TEST_RR_OP(ucmple16, x31, x24, x18, 0x00000000, 0x090800, 0x2000000c, x1, 24, x11)

inst_23:
// rs1==x26, rs2==x19, rd==x14, rs2_h1_val == 4096, 
// opcode: ucmple16 ; op1:x26; op2:x19; dest:x14; op1val:0x800005;  op2val:0x1000000a
TEST_RR_OP(ucmple16, x14, x26, x19, 0x00000000, 0x800005, 0x1000000a, x1, 28, x11)

inst_24:
// rs1==x14, rs2==x28, rd==x30, rs2_h1_val == 2048, rs2_h0_val == 65533
// opcode: ucmple16 ; op1:x14; op2:x28; dest:x30; op1val:0xefff0800;  op2val:0x800fffd
TEST_RR_OP(ucmple16, x30, x14, x28, 0x00000000, 0xefff0800, 0x800fffd, x1, 32, x11)

inst_25:
// rs1==x31, rs2==x24, rd==x5, rs2_h1_val == 1024, rs2_h0_val == 65534, rs1_h0_val == 256
// opcode: ucmple16 ; op1:x31; op2:x24; dest:x5; op1val:0x800100;  op2val:0x400fffe
TEST_RR_OP(ucmple16, x5, x31, x24, 0x00000000, 0x800100, 0x400fffe, x1, 36, x11)

inst_26:
// rs1==x10, rs2==x26, rd==x15, rs2_h1_val == 256, 
// opcode: ucmple16 ; op1:x10; op2:x26; dest:x15; op1val:0xfbff000c;  op2val:0x1000800
TEST_RR_OP(ucmple16, x15, x10, x26, 0x00000000, 0xfbff000c, 0x1000800, x1, 40, x11)

inst_27:
// rs1==x25, rs2==x21, rd==x29, rs2_h1_val == 128, rs1_h0_val == 65279
// opcode: ucmple16 ; op1:x25; op2:x21; dest:x29; op1val:0x03feff;  op2val:0x80000e
TEST_RR_OP(ucmple16, x29, x25, x21, 0x00000000, 0x03feff, 0x80000e, x1, 44, x11)

inst_28:
// rs1==x17, rs2==x8, rd==x16, rs2_h1_val == 64, rs1_h1_val == 4096
// opcode: ucmple16 ; op1:x17; op2:x8; dest:x16; op1val:0x1000aaaa;  op2val:0x400004
TEST_RR_OP(ucmple16, x16, x17, x8, 0x00000000, 0x1000aaaa, 0x400004, x1, 48, x11)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29:
// rs1==x15, rs2==x29, rd==x4, rs2_h1_val == 32, 
// opcode: ucmple16 ; op1:x15; op2:x29; dest:x4; op1val:0x10000003;  op2val:0x20000b
TEST_RR_OP(ucmple16, x4, x15, x29, 0x00000000, 0x10000003, 0x20000b, x1, 0, x2)

inst_30:
// rs1==x7, rs2==x10, rd==x17, rs2_h1_val == 16, rs2_h0_val == 1024, rs1_h1_val == 21845
// opcode: ucmple16 ; op1:x7; op2:x10; dest:x17; op1val:0x55550003;  op2val:0x100400
TEST_RR_OP(ucmple16, x17, x7, x10, 0x00000000, 0x55550003, 0x100400, x1, 4, x2)

inst_31:
// rs1==x12, rs2==x6, rd==x10, rs2_h1_val == 8, 
// opcode: ucmple16 ; op1:x12; op2:x6; dest:x10; op1val:0x090100;  op2val:0x080012
TEST_RR_OP(ucmple16, x10, x12, x6, 0x00000000, 0x090100, 0x080012, x1, 8, x2)

inst_32:
// rs2_h1_val == 4, rs1_h1_val == 256
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffbf;  op2val:0x04fffd
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x100ffbf, 0x04fffd, x1, 12, x2)

inst_33:
// rs2_h1_val == 2, rs1_h1_val == 65535
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0x020020
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfffffdff, 0x020020, x1, 16, x2)

inst_34:
// rs1_h0_val == 65531, rs1_h1_val == 65533
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffb;  op2val:0xdfff000e
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfffdfffb, 0xdfff000e, x1, 20, x2)

inst_35:
// rs1_h0_val == 16384, rs2_h0_val == 61439
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff4000;  op2val:0x0eefff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfbff4000, 0x0eefff, x1, 24, x2)

inst_36:
// rs1_h0_val == 4096, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff1000;  op2val:0x13ff7f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffff1000, 0x13ff7f, x1, 28, x2)

inst_37:
// rs1_h0_val == 1024, rs1_h1_val == 32767
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400;  op2val:0x0e000e
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x7fff0400, 0x0e000e, x1, 32, x2)

inst_38:
// rs1_h0_val == 512, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0200;  op2val:0x130009
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffff0200, 0x130009, x1, 36, x2)

inst_39:
// rs1_h0_val == 128, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x020080;  op2val:0x80000a
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x020080, 0x80000a, x1, 40, x2)

inst_40:
// rs1_h0_val == 64, rs1_h1_val == 65527
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70040;  op2val:0x40000007
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfff70040, 0x40000007, x1, 44, x2)

inst_41:
// rs1_h0_val == 8, rs1_h1_val == 65503, rs2_h0_val == 63487
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0008;  op2val:0x02f7ff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffdf0008, 0x02f7ff, x1, 48, x2)

inst_42:
// rs1_h0_val == 4, rs2_h1_val == 0
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000004;  op2val:0x00ff7f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x1000004, 0x00ff7f, x1, 52, x2)

inst_43:
// rs1_h0_val == 2, rs1_h1_val == 16384
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000002;  op2val:0x050005
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x40000002, 0x050005, x1, 56, x2)

inst_44:
// rs1_h0_val == 1, rs2_h0_val == 65531
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000001;  op2val:0xfff7fffb
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x2000001, 0xfff7fffb, x1, 60, x2)

inst_45:
// rs1_h0_val == 65535, rs1_h1_val == 65023
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0x07fffe
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfdffffff, 0x07fffe, x1, 64, x2)

inst_46:
// rs2_h1_val == 1, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x120010;  op2val:0x010004
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x120010, 0x010004, x1, 68, x2)

inst_47:
// rs2_h1_val == 65535, rs1_h0_val == 65519
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effef;  op2val:0xffff0009
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0effef, 0xffff0009, x1, 72, x2)

inst_48:
// rs2_h0_val == 43690, rs1_h1_val == 65471
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf2000;  op2val:0x09aaaa
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffbf2000, 0x09aaaa, x1, 76, x2)

inst_49:
// rs2_h0_val == 21845, rs1_h0_val == 57343
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffdfff;  op2val:0xaaaa5555
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfbffdfff, 0xaaaa5555, x1, 80, x2)

inst_50:
// rs2_h0_val == 49151, rs1_h1_val == 65534
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0200;  op2val:0x800bfff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfffe0200, 0x800bfff, x1, 84, x2)

inst_51:
// rs2_h0_val == 57343, rs1_h0_val == 21845
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b5555;  op2val:0xffffdfff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0b5555, 0xffffdfff, x1, 88, x2)

inst_52:
// rs2_h0_val == 512, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffff;  op2val:0x120200
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x05ffff, 0x120200, x1, 92, x2)

inst_53:
// rs2_h0_val == 256, rs1_h1_val == 65519
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0012;  op2val:0x060100
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffef0012, 0x060100, x1, 96, x2)

inst_54:
// rs2_h0_val == 64, rs1_h1_val == 65531
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008;  op2val:0x080040
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfffb0008, 0x080040, x1, 100, x2)

inst_55:
// rs2_h0_val == 16, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef2000;  op2val:0xffef0010
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xffef2000, 0xffef0010, x1, 104, x2)

inst_56:
// rs2_h0_val == 2, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff7;  op2val:0xffdf0002
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xaaaafff7, 0xffdf0002, x1, 108, x2)

inst_57:
// rs2_h0_val == 1, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d5555;  op2val:0x0d0001
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0d5555, 0x0d0001, x1, 112, x2)

inst_58:
// rs2_h0_val == 65535, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x4007fff;  op2val:0x12ffff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x4007fff, 0x12ffff, x1, 116, x2)

inst_59:
// rs2_h0_val == 0, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0012;  op2val:0x8000000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0b0012, 0x8000000, x1, 120, x2)

inst_60:
// rs1_h1_val == 57343, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000;  op2val:0x20007fff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xdfff2000, 0x20007fff, x1, 124, x2)

inst_61:
// rs1_h1_val == 63487, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff5555;  op2val:0xfbff0008
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xf7ff5555, 0xfbff0008, x1, 128, x2)

inst_62:
// rs1_h1_val == 65279, rs2_h0_val == 65279
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0009;  op2val:0xfffefeff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfeff0009, 0xfffefeff, x1, 132, x2)

inst_63:
// rs2_h0_val == 65527, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x05efff;  op2val:0x7ffffff7
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x05efff, 0x7ffffff7, x1, 136, x2)

inst_64:
// rs1_h1_val == 64, rs2_h0_val == 65023
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaa;  op2val:0x12fdff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x40aaaa, 0x12fdff, x1, 140, x2)

inst_65:
// rs2_h0_val == 32768, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000a;  op2val:0x0f8000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x13000a, 0x0f8000, x1, 144, x2)

inst_66:
// rs1_h1_val == 8, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x08feff;  op2val:0x1000005
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x08feff, 0x1000005, x1, 148, x2)

inst_67:
// rs1_h1_val == 4, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x040013;  op2val:0x2000fdff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x040013, 0x2000fdff, x1, 152, x2)

inst_68:
// rs2_h0_val == 64511, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x070002;  op2val:0xffdffbff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x070002, 0xffdffbff, x1, 156, x2)

inst_69:
// rs2_h0_val == 65471, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0xfffeffbf
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x002000, 0xfffeffbf, x1, 160, x2)

inst_70:
// rs1_h0_val == 63487, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7ff;  op2val:0xffdffdff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xfefff7ff, 0xffdffdff, x1, 164, x2)

inst_71:
// rs2_h0_val == 65503, rs1_h1_val == 65407
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0002;  op2val:0x09ffdf
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xff7f0002, 0x09ffdf, x1, 168, x2)

inst_72:
// rs1_h0_val == 64511, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efbff;  op2val:0x12f7ff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0efbff, 0x12f7ff, x1, 172, x2)

inst_73:
// rs1_h0_val == 65407, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0eff7f;  op2val:0x12fffe
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x0eff7f, 0x12fffe, x1, 176, x2)

inst_74:
// rs1_h0_val == 65503, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdf;  op2val:0xf7ff0011
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xbfffffdf, 0xf7ff0011, x1, 180, x2)

inst_75:
// rs1_h1_val == 32768, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000011;  op2val:0x070002
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x80000011, 0x070002, x1, 184, x2)

inst_76:
// rs2_h1_val == 49151, rs1_h1_val == 43690
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffbf;  op2val:0xbfffffef
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0xaaaaffbf, 0xbfffffef, x1, 188, x2)

inst_77:
// rs2_h1_val == 65279, rs2_h0_val == 16384
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x032000;  op2val:0xfeff4000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x032000, 0xfeff4000, x1, 192, x2)

inst_78:
// rs2_h1_val == 65531, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000a;  op2val:0xfffbff7f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x00000000, 0x20000a, 0xfffbff7f, x1, 196, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
