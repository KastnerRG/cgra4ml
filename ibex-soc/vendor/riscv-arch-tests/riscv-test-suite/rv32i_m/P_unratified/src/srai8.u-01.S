
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai8.u instruction of the RISC-V RV32PZicsr extension for the srai8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x5, rd==x31, rs1_b0_val == -128, imm_val == 5, rs1_b3_val == 64, rs1_b1_val == 8, rs1_b2_val == -128
// opcode: srai8.u ; op1:x5; dest:x31; op1val:0x40800880;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x5, 0x00000000, 0x40800880, 0x5, x1, 0, x4)

inst_1:
// rs1 == rd, rs1==x27, rd==x27, imm_val == 7, rs1_b0_val == -5, rs1_b2_val == 0
// opcode: srai8.u ; op1:x27; dest:x27; op1val:0x600f8fb;  immval:0x7
TEST_IMM_OP( srai8.u, x27, x27, 0x00000000, 0x600f8fb, 0x7, x1, 4, x4)

inst_2:
// rs1==x6, rd==x16, imm_val == 6, rs1_b2_val == -33
// opcode: srai8.u ; op1:x6; dest:x16; op1val:0x40dffcfb;  immval:0x6
TEST_IMM_OP( srai8.u, x16, x6, 0x00000000, 0x40dffcfb, 0x6, x1, 8, x4)

inst_3:
// rs1==x26, rd==x14, imm_val == 4, rs1_b1_val == 1
// opcode: srai8.u ; op1:x26; dest:x14; op1val:0x5090109;  immval:0x4
TEST_IMM_OP( srai8.u, x14, x26, 0x00000000, 0x5090109, 0x4, x1, 12, x4)

inst_4:
// rs1==x0, rd==x11, imm_val == 3, rs1_b3_val == 0, rs1_b2_val == -3
// opcode: srai8.u ; op1:x0; dest:x11; op1val:0xfd0703;  immval:0x3
TEST_IMM_OP( srai8.u, x11, x0, 0x00000000, 0xfd0703, 0x3, x1, 16, x4)

inst_5:
// rs1==x24, rd==x7, imm_val == 2, rs1_b3_val == -128, rs1_b2_val == -5, rs1_b0_val == 85
// opcode: srai8.u ; op1:x24; dest:x7; op1val:0x80fb0155;  immval:0x2
TEST_IMM_OP( srai8.u, x7, x24, 0x00000000, 0x80fb0155, 0x2, x1, 20, x4)

inst_6:
// rs1==x12, rd==x22, imm_val == 1, rs1_b0_val == -3, rs1_b1_val == -65, rs1_b2_val == 2
// opcode: srai8.u ; op1:x12; dest:x22; op1val:0x3f02bffd;  immval:0x1
TEST_IMM_OP( srai8.u, x22, x12, 0x00000000, 0x3f02bffd, 0x1, x1, 24, x4)

inst_7:
// rs1==x9, rd==x30, imm_val == 0, rs1_b2_val == 64, rs1_b3_val == 127
// opcode: srai8.u ; op1:x9; dest:x30; op1val:0x7f4003f8;  immval:0x0
TEST_IMM_OP( srai8.u, x30, x9, 0x00000000, 0x7f4003f8, 0x0, x1, 28, x4)

inst_8:
// rs1==x29, rd==x15, rs1_b3_val == -86, rs1_b0_val == 32
// opcode: srai8.u ; op1:x29; dest:x15; op1val:0xaaf93f20;  immval:0x6
TEST_IMM_OP( srai8.u, x15, x29, 0x00000000, 0xaaf93f20, 0x6, x1, 32, x4)

inst_9:
// rs1==x25, rd==x24, rs1_b3_val == 85, rs1_b1_val == 0, rs1_b0_val == -86
// opcode: srai8.u ; op1:x25; dest:x24; op1val:0x55fa00aa;  immval:0x5
TEST_IMM_OP( srai8.u, x24, x25, 0x00000000, 0x55fa00aa, 0x5, x1, 36, x4)

inst_10:
// rs1==x20, rd==x6, rs1_b3_val == -65, rs1_b0_val == 2, rs1_b1_val == 16, rs1_b2_val == 127
// opcode: srai8.u ; op1:x20; dest:x6; op1val:0xbf7f1002;  immval:0x4
TEST_IMM_OP( srai8.u, x6, x20, 0x00000000, 0xbf7f1002, 0x4, x1, 40, x4)

inst_11:
// rs1==x16, rd==x12, rs1_b3_val == -33, rs1_b1_val == -5
// opcode: srai8.u ; op1:x16; dest:x12; op1val:0xdfdffb55;  immval:0x3
TEST_IMM_OP( srai8.u, x12, x16, 0x00000000, 0xdfdffb55, 0x3, x1, 44, x4)

inst_12:
// rs1==x18, rd==x3, rs1_b3_val == -17, 
// opcode: srai8.u ; op1:x18; dest:x3; op1val:0xef03053f;  immval:0x6
TEST_IMM_OP( srai8.u, x3, x18, 0x00000000, 0xef03053f, 0x6, x1, 48, x4)

inst_13:
// rs1==x11, rd==x0, rs1_b3_val == -9, rs1_b1_val == 4, rs1_b2_val == -9
// opcode: srai8.u ; op1:x11; dest:x0; op1val:0xf7f704f6;  immval:0x6
TEST_IMM_OP( srai8.u, x0, x11, 0x00000000, 0xf7f704f6, 0x6, x1, 52, x4)

inst_14:
// rs1==x31, rd==x8, rs1_b3_val == -5, rs1_b0_val == 8
// opcode: srai8.u ; op1:x31; dest:x8; op1val:0xfb07c008;  immval:0x7
TEST_IMM_OP( srai8.u, x8, x31, 0x00000000, 0xfb07c008, 0x7, x1, 56, x4)

inst_15:
// rs1==x22, rd==x23, rs1_b3_val == -3, rs1_b0_val == -65, rs1_b2_val == 32, rs1_b1_val == -17
// opcode: srai8.u ; op1:x22; dest:x23; op1val:0xfd20efbf;  immval:0x3
TEST_IMM_OP( srai8.u, x23, x22, 0x00000000, 0xfd20efbf, 0x3, x1, 60, x4)

inst_16:
// rs1==x19, rd==x26, rs1_b3_val == -2, 
// opcode: srai8.u ; op1:x19; dest:x26; op1val:0xfe7ffb02;  immval:0x4
TEST_IMM_OP( srai8.u, x26, x19, 0x00000000, 0xfe7ffb02, 0x4, x1, 64, x4)

inst_17:
// rs1==x28, rd==x17, rs1_b3_val == 32, rs1_b1_val == -3
// opcode: srai8.u ; op1:x28; dest:x17; op1val:0x2000fdf9;  immval:0x6
TEST_IMM_OP( srai8.u, x17, x28, 0x00000000, 0x2000fdf9, 0x6, x1, 68, x4)

inst_18:
// rs1==x17, rd==x28, rs1_b3_val == 16, rs1_b1_val == 85
// opcode: srai8.u ; op1:x17; dest:x28; op1val:0x10fc5555;  immval:0x5
TEST_IMM_OP( srai8.u, x28, x17, 0x00000000, 0x10fc5555, 0x5, x1, 72, x4)

inst_19:
// rs1==x30, rd==x29, rs1_b3_val == 8, rs1_b0_val == 4
// opcode: srai8.u ; op1:x30; dest:x29; op1val:0x8403f04;  immval:0x5
TEST_IMM_OP( srai8.u, x29, x30, 0x00000000, 0x8403f04, 0x5, x1, 76, x4)

inst_20:
// rs1==x10, rd==x18, rs1_b3_val == 4, 
// opcode: srai8.u ; op1:x10; dest:x18; op1val:0x406bf04;  immval:0x0
TEST_IMM_OP( srai8.u, x18, x10, 0x00000000, 0x406bf04, 0x0, x1, 80, x4)

inst_21:
// rs1==x14, rd==x5, rs1_b3_val == 2, rs1_b1_val == 64, rs1_b0_val == -1
// opcode: srai8.u ; op1:x14; dest:x5; op1val:0x20540ff;  immval:0x5
TEST_IMM_OP( srai8.u, x5, x14, 0x00000000, 0x20540ff, 0x5, x1, 84, x4)

inst_22:
// rs1==x8, rd==x9, rs1_b3_val == 1, 
// opcode: srai8.u ; op1:x8; dest:x9; op1val:0x1f7bff8;  immval:0x2
TEST_IMM_OP( srai8.u, x9, x8, 0x00000000, 0x1f7bff8, 0x2, x1, 88, x4)

inst_23:
// rs1==x13, rd==x2, rs1_b1_val == 2, 
// opcode: srai8.u ; op1:x13; dest:x2; op1val:0x6200255;  immval:0x1
TEST_IMM_OP( srai8.u, x2, x13, 0x00000000, 0x6200255, 0x1, x1, 92, x4)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_24:
// rs1==x7, rd==x4, rs1_b1_val == -1, 
// opcode: srai8.u ; op1:x7; dest:x4; op1val:0x8000ff09;  immval:0x3
TEST_IMM_OP( srai8.u, x4, x7, 0x00000000, 0x8000ff09, 0x3, x5, 0, x6)

inst_25:
// rs1==x23, rd==x20, rs1_b0_val == 127, 
// opcode: srai8.u ; op1:x23; dest:x20; op1val:0x102107f;  immval:0x4
TEST_IMM_OP( srai8.u, x20, x23, 0x00000000, 0x102107f, 0x4, x5, 4, x6)

inst_26:
// rs1==x15, rd==x1, rs1_b0_val == -33, 
// opcode: srai8.u ; op1:x15; dest:x1; op1val:0x3faf9df;  immval:0x1
TEST_IMM_OP( srai8.u, x1, x15, 0x00000000, 0x3faf9df, 0x1, x5, 8, x6)

inst_27:
// rs1==x1, rd==x13, rs1_b0_val == -17, rs1_b2_val == 4
// opcode: srai8.u ; op1:x1; dest:x13; op1val:0x10408ef;  immval:0x4
TEST_IMM_OP( srai8.u, x13, x1, 0x00000000, 0x10408ef, 0x4, x5, 12, x6)

inst_28:
// rs1==x21, rd==x25, rs1_b0_val == -9, 
// opcode: srai8.u ; op1:x21; dest:x25; op1val:0xfe033ff7;  immval:0x1
TEST_IMM_OP( srai8.u, x25, x21, 0x00000000, 0xfe033ff7, 0x1, x5, 16, x6)

inst_29:
// rs1==x4, rd==x19, rs1_b0_val == -2, 
// opcode: srai8.u ; op1:x4; dest:x19; op1val:0xfc0755fe;  immval:0x4
TEST_IMM_OP( srai8.u, x19, x4, 0x00000000, 0xfc0755fe, 0x4, x5, 20, x6)

inst_30:
// rs1==x2, rd==x21, rs1_b0_val == 64, 
// opcode: srai8.u ; op1:x2; dest:x21; op1val:0xdf0040;  immval:0x6
TEST_IMM_OP( srai8.u, x21, x2, 0x00000000, 0xdf0040, 0x6, x5, 24, x6)

inst_31:
// rs1==x3, rd==x10, rs1_b0_val == 16, rs1_b2_val == 1
// opcode: srai8.u ; op1:x3; dest:x10; op1val:0x55010810;  immval:0x3
TEST_IMM_OP( srai8.u, x10, x3, 0x00000000, 0x55010810, 0x3, x5, 28, x6)

inst_32:
// rs1_b0_val == 1, rs1_b2_val == -86
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x6aa0301;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x6aa0301, 0x5, x5, 32, x6)

inst_33:
// rs1_b0_val == 0, rs1_b2_val == -1
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xaaff0100;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xaaff0100, 0x5, x5, 36, x6)

inst_34:
// rs1_b2_val == -65, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x5bf063f;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x5bf063f, 0x6, x5, 40, x6)

inst_35:
// rs1_b2_val == -17, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x2eff680;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x2eff680, 0x1, x5, 44, x6)

inst_36:
// rs1_b2_val == -2, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfdfe07aa;  immval:0x7
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xfdfe07aa, 0x7, x5, 48, x6)

inst_37:
// rs1_b2_val == 16, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfa10fdf9;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xfa10fdf9, 0x4, x5, 52, x6)

inst_38:
// rs1_b2_val == 8, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfb08bf80;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xfb08bf80, 0x5, x5, 56, x6)

inst_39:
// rs1_b1_val == -86, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x3faac0;  immval:0x7
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x3faac0, 0x7, x5, 60, x6)

inst_40:
// rs1_b1_val == 127, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xc0f97ff9;  immval:0x0
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xc0f97ff9, 0x0, x5, 64, x6)

inst_41:
// rs1_b1_val == -33, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf7fedf01;  immval:0x3
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xf7fedf01, 0x3, x5, 68, x6)

inst_42:
// rs1_b1_val == -9, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfb02f755;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xfb02f755, 0x6, x5, 72, x6)

inst_43:
// rs1_b1_val == -2, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x8c0fe05;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x8c0fe05, 0x4, x5, 76, x6)

inst_44:
// rs1_b1_val == -128, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf9208000;  immval:0x2
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xf9208000, 0x2, x5, 80, x6)

inst_45:
// rs1_b3_val == -1, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xffff04f7;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xffff04f7, 0x6, x5, 84, x6)

inst_46:
// rs1_b1_val == 32, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf7f820fb;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xf7f820fb, 0x6, x5, 88, x6)

inst_47:
// rs1_b2_val == 85, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x55553f06;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0x55553f06, 0x5, x5, 92, x6)

inst_48:
// imm_val == 3, rs1_b3_val == 0, rs1_b2_val == -3
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfd0703;  immval:0x3
TEST_IMM_OP( srai8.u, x31, x30, 0x00000000, 0xfd0703, 0x3, x5, 96, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 25*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
