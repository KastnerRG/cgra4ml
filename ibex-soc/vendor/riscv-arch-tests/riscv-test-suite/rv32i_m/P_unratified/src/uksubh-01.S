
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksubh instruction of the RISC-V RV32PZicsr extension for the uksubh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksubh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x15, rd==x3, rs1_h0_val == 0, rs2_h0_val == 4, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 65533, rs1_h1_val == 32
// opcode: uksubh ; op1:x20; op2:x15; dest:x3; op1val:0x200000;  op2val:0xfffd0004
TEST_PKRR_OP(uksubh, x3, x20, x15, 0x00000000, 0x200000, 0xfffd0004, x20, x8, 0, x16)

inst_1:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x18, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs2_h1_val == 32767, rs1_h0_val == 64, rs1_h1_val == 32767
// opcode: uksubh ; op1:x6; op2:x6; dest:x18; op1val:0x7fff0040;  op2val:0x7fff0040
TEST_PKRR_OP(uksubh, x18, x6, x6, 0x00000000, 0x7fff0040, 0x7fff0040, x6, x8, 8, x16)

inst_2:
// rs1 == rd != rs2, rs1==x13, rs2==x11, rd==x13, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 65531, rs2_h1_val == 8192, rs1_h1_val == 65535
// opcode: uksubh ; op1:x13; op2:x11; dest:x13; op1val:0xffff000f;  op2val:0x2000fffb
TEST_PKRR_OP(uksubh, x13, x13, x11, 0x00000000, 0xffff000f, 0x2000fffb, x13, x8, 16, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs2_h1_val == 43690, rs1_h0_val == 8192
// opcode: uksubh ; op1:x31; op2:x31; dest:x31; op1val:0x032000;  op2val:0xaaaa000c
TEST_PKRR_OP(uksubh, x31, x31, x31, 0x00000000, 0x032000, 0xaaaa000c, x31, x8, 24, x16)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x20, rd==x20, rs2_h1_val == 21845, rs1_h0_val == 8, rs2_h0_val == 49151, rs1_h1_val == 128
// opcode: uksubh ; op1:x18; op2:x20; dest:x20; op1val:0x800008;  op2val:0x5555bfff
TEST_PKRR_OP(uksubh, x20, x18, x20, 0x00000000, 0x800008, 0x5555bfff, x18, x8, 32, x16)

inst_5:
// rs1==x30, rs2==x4, rd==x29, rs2_h1_val == 49151, 
// opcode: uksubh ; op1:x30; op2:x4; dest:x29; op1val:0x050007;  op2val:0xbfff000e
TEST_PKRR_OP(uksubh, x29, x30, x4, 0x00000000, 0x050007, 0xbfff000e, x30, x8, 40, x16)

inst_6:
// rs1==x10, rs2==x25, rd==x28, rs2_h1_val == 57343, rs2_h0_val == 57343, rs1_h0_val == 63487
// opcode: uksubh ; op1:x10; op2:x25; dest:x28; op1val:0x0df7ff;  op2val:0xdfffdfff
TEST_PKRR_OP(uksubh, x28, x10, x25, 0x00000000, 0x0df7ff, 0xdfffdfff, x10, x8, 48, x16)

inst_7:
// rs1==x5, rs2==x14, rd==x25, rs2_h1_val == 61439, rs2_h0_val == 2
// opcode: uksubh ; op1:x5; op2:x14; dest:x25; op1val:0x110040;  op2val:0xefff0002
TEST_PKRR_OP(uksubh, x25, x5, x14, 0x00000000, 0x110040, 0xefff0002, x5, x8, 56, x16)

inst_8:
// rs1==x28, rs2==x18, rd==x12, rs2_h1_val == 63487, rs1_h1_val == 65534
// opcode: uksubh ; op1:x28; op2:x18; dest:x12; op1val:0xfffe000e;  op2val:0xf7ffbfff
TEST_PKRR_OP(uksubh, x12, x28, x18, 0x00000000, 0xfffe000e, 0xf7ffbfff, x28, x8, 64, x16)

inst_9:
// rs1==x25, rs2==x2, rd==x30, rs2_h1_val == 64511, rs1_h1_val == 65519, rs2_h0_val == 16384
// opcode: uksubh ; op1:x25; op2:x2; dest:x30; op1val:0xffef0005;  op2val:0xfbff4000
TEST_PKRR_OP(uksubh, x30, x25, x2, 0x00000000, 0xffef0005, 0xfbff4000, x25, x8, 72, x16)

inst_10:
// rs1==x7, rs2==x13, rd==x23, rs2_h1_val == 65023, rs1_h1_val == 2048, rs2_h0_val == 8
// opcode: uksubh ; op1:x7; op2:x13; dest:x23; op1val:0x8000000;  op2val:0xfdff0008
TEST_PKRR_OP(uksubh, x23, x7, x13, 0x00000000, 0x8000000, 0xfdff0008, x7, x8, 80, x16)

inst_11:
// rs1==x21, rs2==x7, rd==x19, rs2_h1_val == 65279, rs1_h0_val == 65527, rs1_h1_val == 65407
// opcode: uksubh ; op1:x21; op2:x7; dest:x19; op1val:0xff7ffff7;  op2val:0xfeff0006
TEST_PKRR_OP(uksubh, x19, x21, x7, 0x00000000, 0xff7ffff7, 0xfeff0006, x21, x8, 88, x16)

inst_12:
// rs1==x23, rs2==x29, rd==x17, rs2_h1_val == 65407, 
// opcode: uksubh ; op1:x23; op2:x29; dest:x17; op1val:0x062000;  op2val:0xff7f0004
TEST_PKRR_OP(uksubh, x17, x23, x29, 0x00000000, 0x062000, 0xff7f0004, x23, x8, 96, x16)

inst_13:
// rs1==x15, rs2==x30, rd==x4, rs2_h1_val == 65471, rs2_h0_val == 2048
// opcode: uksubh ; op1:x15; op2:x30; dest:x4; op1val:0x130000;  op2val:0xffbf0800
TEST_PKRR_OP(uksubh, x4, x15, x30, 0x00000000, 0x130000, 0xffbf0800, x15, x8, 104, x16)

inst_14:
// rs1==x27, rs2==x1, rd==x9, rs2_h1_val == 65503, rs2_h0_val == 65533, rs1_h0_val == 65503
// opcode: uksubh ; op1:x27; op2:x1; dest:x9; op1val:0x11ffdf;  op2val:0xffdffffd
TEST_PKRR_OP(uksubh, x9, x27, x1, 0x00000000, 0x11ffdf, 0xffdffffd, x27, x8, 112, x16)

inst_15:
// rs1==x2, rs2==x28, rd==x1, rs2_h1_val == 65519, rs2_h0_val == 65023, rs1_h1_val == 21845
// opcode: uksubh ; op1:x2; op2:x28; dest:x1; op1val:0x55550040;  op2val:0xffeffdff
TEST_PKRR_OP(uksubh, x1, x2, x28, 0x00000000, 0x55550040, 0xffeffdff, x2, x8, 120, x18)

inst_16:
// rs1==x12, rs2==x9, rd==x22, rs2_h1_val == 65527, 
// opcode: uksubh ; op1:x12; op2:x9; dest:x22; op1val:0x80000b;  op2val:0xfff7000b
TEST_PKRR_OP(uksubh, x22, x12, x9, 0x00000000, 0x80000b, 0xfff7000b, x12, x8, 128, x18)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_17:
// rs1==x1, rs2==x26, rd==x24, rs2_h1_val == 65531, rs1_h1_val == 64
// opcode: uksubh ; op1:x1; op2:x26; dest:x24; op1val:0x400040;  op2val:0xfffb0005
TEST_PKRR_OP(uksubh, x24, x1, x26, 0x00000000, 0x400040, 0xfffb0005, x1, x13, 0, x18)

inst_18:
// rs1==x8, rs2==x12, rd==x16, rs2_h1_val == 65534, rs2_h0_val == 32768
// opcode: uksubh ; op1:x8; op2:x12; dest:x16; op1val:0x200000;  op2val:0xfffe8000
TEST_PKRR_OP(uksubh, x16, x8, x12, 0x00000000, 0x200000, 0xfffe8000, x8, x13, 8, x18)

inst_19:
// rs1==x19, rs2==x8, rd==x2, rs2_h1_val == 32768, rs1_h1_val == 2
// opcode: uksubh ; op1:x19; op2:x8; dest:x2; op1val:0x020040;  op2val:0x80000040
TEST_PKRR_OP(uksubh, x2, x19, x8, 0x00000000, 0x020040, 0x80000040, x19, x13, 16, x18)

inst_20:
// rs1==x14, rs2==x19, rd==x11, rs2_h1_val == 16384, rs2_h0_val == 21845
// opcode: uksubh ; op1:x14; op2:x19; dest:x11; op1val:0x80fff7;  op2val:0x40005555
TEST_PKRR_OP(uksubh, x11, x14, x19, 0x00000000, 0x80fff7, 0x40005555, x14, x13, 24, x18)

inst_21:
// rs1==x24, rs2==x10, rd==x26, rs2_h1_val == 4096, rs1_h1_val == 512
// opcode: uksubh ; op1:x24; op2:x10; dest:x26; op1val:0x2000011;  op2val:0x1000dfff
TEST_PKRR_OP(uksubh, x26, x24, x10, 0x00000000, 0x2000011, 0x1000dfff, x24, x13, 32, x18)

inst_22:
// rs1==x0, rs2==x17, rd==x6, rs2_h1_val == 2048, rs1_h0_val == 65531, rs1_h1_val == 65503
// opcode: uksubh ; op1:x0; op2:x17; dest:x6; op1val:0xffdffffb;  op2val:0x800fffb
TEST_PKRR_OP(uksubh, x6, x0, x17, 0x00000000, 0xffdffffb, 0x800fffb, x0, x13, 40, x18)

inst_23:
// rs1==x9, rs2==x24, rd==x14, rs2_h1_val == 1024, 
// opcode: uksubh ; op1:x9; op2:x24; dest:x14; op1val:0x030040;  op2val:0x400dfff
TEST_PKRR_OP(uksubh, x14, x9, x24, 0x00000000, 0x030040, 0x400dfff, x9, x13, 48, x18)

inst_24:
// rs1==x17, rs2==x22, rd==x0, rs2_h1_val == 512, 
// opcode: uksubh ; op1:x17; op2:x22; dest:x0; op1val:0x072000;  op2val:0x2000040
TEST_PKRR_OP(uksubh, x0, x17, x22, 0x00000000, 0x072000, 0x2000040, x17, x13, 56, x18)

inst_25:
// rs1==x26, rs2==x21, rd==x15, rs2_h1_val == 256, rs1_h0_val == 2048
// opcode: uksubh ; op1:x26; op2:x21; dest:x15; op1val:0x060800;  op2val:0x100000f
TEST_PKRR_OP(uksubh, x15, x26, x21, 0x00000000, 0x060800, 0x100000f, x26, x13, 64, x18)

inst_26:
// rs1==x22, rs2==x5, rd==x27, rs2_h1_val == 128, rs1_h0_val == 512, rs2_h0_val == 61439
// opcode: uksubh ; op1:x22; op2:x5; dest:x27; op1val:0x120200;  op2val:0x80efff
TEST_PKRR_OP(uksubh, x27, x22, x5, 0x00000000, 0x120200, 0x80efff, x22, x13, 72, x18)

inst_27:
// rs1==x11, rs2==x23, rd==x21, rs2_h1_val == 64, rs1_h1_val == 32768
// opcode: uksubh ; op1:x11; op2:x23; dest:x21; op1val:0x8000000a;  op2val:0x40000b
TEST_PKRR_OP(uksubh, x21, x11, x23, 0x00000000, 0x8000000a, 0x40000b, x11, x13, 80, x18)

inst_28:
// rs1==x4, rs2==x3, rd==x7, rs2_h1_val == 32, rs1_h0_val == 256
// opcode: uksubh ; op1:x4; op2:x3; dest:x7; op1val:0x060100;  op2val:0x20000f
TEST_PKRR_OP(uksubh, x7, x4, x3, 0x00000000, 0x060100, 0x20000f, x4, x13, 88, x18)

inst_29:
// rs1==x3, rs2==x27, rd==x5, rs2_h1_val == 16, rs2_h0_val == 1, rs1_h1_val == 1
// opcode: uksubh ; op1:x3; op2:x27; dest:x5; op1val:0x01000b;  op2val:0x100001
TEST_PKRR_OP(uksubh, x5, x3, x27, 0x00000000, 0x01000b, 0x100001, x3, x13, 96, x18)

inst_30:
// rs1==x16, rs2==x0, rd==x8, rs2_h1_val == 8, rs2_h0_val == 65519
// opcode: uksubh ; op1:x16; op2:x0; dest:x8; op1val:0x13ffdf;  op2val:0x08ffef
TEST_PKRR_OP(uksubh, x8, x16, x0, 0x00000000, 0x13ffdf, 0x08ffef, x16, x13, 104, x18)

inst_31:
// rs1==x29, rs2==x16, rd==x10, rs2_h1_val == 4, rs2_h0_val == 64511, rs1_h0_val == 65471
// opcode: uksubh ; op1:x29; op2:x16; dest:x10; op1val:0x0dffbf;  op2val:0x04fbff
TEST_PKRR_OP(uksubh, x10, x29, x16, 0x00000000, 0x0dffbf, 0x04fbff, x29, x13, 112, x18)

inst_32:
// rs2_h1_val == 2, rs2_h0_val == 65534
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x40000f;  op2val:0x02fffe
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x40000f, 0x02fffe, x30, x13, 120, x18)

inst_33:
// rs2_h1_val == 1, rs1_h0_val == 64511, rs1_h1_val == 8
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08fbff;  op2val:0x01efff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x08fbff, 0x01efff, x30, x13, 128, x1)

inst_34:
// rs2_h1_val == 65535, rs2_h0_val == 1024
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x400200;  op2val:0xffff0400
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x400200, 0xffff0400, x30, x13, 136, x1)

inst_35:
// rs1_h0_val == 65533, rs2_h0_val == 256
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0x4000100
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfffffffd, 0x4000100, x30, x13, 144, x1)

inst_36:
// rs1_h0_val == 65534, rs1_h1_val == 65279
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffe;  op2val:0xbfff0100
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfefffffe, 0xbfff0100, x30, x13, 152, x1)

inst_37:
// rs1_h0_val == 32768, rs1_h1_val == 256, rs2_h0_val == 65527
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x1008000;  op2val:0x0ffff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x1008000, 0x0ffff7, x30, x13, 160, x1)

inst_38:
// rs1_h0_val == 16384, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x084000;  op2val:0xdfffdfff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x084000, 0xdfffdfff, x30, x13, 168, x1)

inst_39:
// rs1_h0_val == 4096, rs2_h0_val == 4096
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2001000;  op2val:0x121000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x2001000, 0x121000, x30, x13, 176, x1)

inst_40:
// rs1_h0_val == 1024, rs1_h1_val == 49151
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400;  op2val:0xffef1000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xbfff0400, 0xffef1000, x30, x13, 184, x1)

inst_41:
// rs1_h0_val == 128, rs2_h0_val == 512
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0a0080;  op2val:0x040200
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x0a0080, 0x040200, x30, x13, 192, x1)

inst_42:
// rs1_h0_val == 32, rs2_h0_val == 43690, rs1_h1_val == 16
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100020;  op2val:0xf7ffaaaa
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x100020, 0xf7ffaaaa, x30, x13, 200, x1)

inst_43:
// rs1_h0_val == 16, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x80000010;  op2val:0x2000003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x80000010, 0x2000003, x30, x13, 208, x1)

inst_44:
// rs1_h0_val == 4, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0d0004;  op2val:0x200011
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x0d0004, 0x200011, x30, x13, 216, x1)

inst_45:
// rs1_h0_val == 2, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x800002;  op2val:0xffbf0012
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x800002, 0xffbf0012, x30, x13, 224, x1)

inst_46:
// rs1_h0_val == 1, rs2_h0_val == 128
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100001;  op2val:0x80000080
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x100001, 0x80000080, x30, x13, 232, x1)

inst_47:
// rs1_h0_val == 65535, rs1_h1_val == 61439
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0x01bfff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xefffffff, 0x01bfff, x30, x13, 240, x1)

inst_48:
// rs2_h1_val == 0, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x050080;  op2val:0x00ffef
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x050080, 0x00ffef, x30, x13, 248, x1)

inst_49:
// rs2_h0_val == 32767, rs1_h1_val == 65531
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0013;  op2val:0x067fff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfffb0013, 0x067fff, x30, x13, 256, x1)

inst_50:
// rs2_h0_val == 63487, rs1_h1_val == 63487
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0200;  op2val:0xeffff7ff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xf7ff0200, 0xeffff7ff, x30, x13, 264, x1)

inst_51:
// rs2_h0_val == 65279, rs1_h0_val == 43690
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaa;  op2val:0x20feff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x20aaaa, 0x20feff, x30, x13, 272, x1)

inst_52:
// rs2_h0_val == 32, rs1_h0_val == 61439
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x07efff;  op2val:0x100020
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x07efff, 0x100020, x30, x13, 280, x1)

inst_53:
// rs2_h0_val == 16, rs1_h1_val == 0
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x000001;  op2val:0xbfff0010
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x000001, 0xbfff0010, x30, x13, 288, x1)

inst_54:
// rs2_h0_val == 65535, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100fff7;  op2val:0xffdfffff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x100fff7, 0xffdfffff, x30, x13, 296, x1)

inst_55:
// rs2_h0_val == 0, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x11000e;  op2val:0x80000000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x11000e, 0x80000000, x30, x13, 304, x1)

inst_56:
// rs1_h1_val == 43690, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb;  op2val:0xffefaaaa
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xaaaafffb, 0xffefaaaa, x30, x13, 312, x1)

inst_57:
// rs1_h1_val == 57343, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000a;  op2val:0x200000c
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xdfff000a, 0x200000c, x30, x13, 320, x1)

inst_58:
// rs1_h1_val == 64511, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff;  op2val:0x0b0009
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfbffefff, 0x0b0009, x30, x13, 328, x1)

inst_59:
// rs1_h1_val == 65023, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0013;  op2val:0x0efff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfdff0013, 0x0efff7, x30, x13, 336, x1)

inst_60:
// rs1_h1_val == 65471, rs1_h0_val == 49151
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffbfbfff;  op2val:0xff7f0004
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xffbfbfff, 0xff7f0004, x30, x13, 344, x1)

inst_61:
// rs1_h1_val == 65527, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdf;  op2val:0x55550003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfff7ffdf, 0x55550003, x30, x13, 352, x1)

inst_62:
// rs1_h1_val == 65533, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffdefff;  op2val:0x035555
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfffdefff, 0x035555, x30, x13, 360, x1)

inst_63:
// rs1_h1_val == 16384, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7ff;  op2val:0xfffd0003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x4000f7ff, 0xfffd0003, x30, x13, 368, x1)

inst_64:
// rs1_h1_val == 8192, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20000800;  op2val:0x050009
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x20000800, 0x050009, x30, x13, 376, x1)

inst_65:
// rs1_h1_val == 4096, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000e;  op2val:0x0bfbff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x1000000e, 0x0bfbff, x30, x13, 384, x1)

inst_66:
// rs1_h1_val == 1024, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4002000;  op2val:0x0c0080
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x4002000, 0x0c0080, x30, x13, 392, x1)

inst_67:
// rs1_h1_val == 4, rs1_h0_val == 32767
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x047fff;  op2val:0xffef0080
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x047fff, 0xffef0080, x30, x13, 400, x1)

inst_68:
// rs1_h0_val == 21845, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2005555;  op2val:0xfffdfdff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x2005555, 0xfffdfdff, x30, x13, 408, x1)

inst_69:
// rs2_h0_val == 65407, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x020400;  op2val:0x200ff7f
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x020400, 0x200ff7f, x30, x13, 416, x1)

inst_70:
// rs2_h0_val == 65471, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x400fbff;  op2val:0x0fffbf
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x400fbff, 0x0fffbf, x30, x13, 424, x1)

inst_71:
// rs2_h0_val == 65503, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08f7ff;  op2val:0x06ffdf
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x08f7ff, 0x06ffdf, x30, x13, 432, x1)

inst_72:
// rs1_h0_val == 57343, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff;  op2val:0x0a000d
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x4000dfff, 0x0a000d, x30, x13, 440, x1)

inst_73:
// rs1_h0_val == 65023, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0ffdff;  op2val:0xfffd0040
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x0ffdff, 0xfffd0040, x30, x13, 448, x1)

inst_74:
// rs1_h0_val == 65279, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x06feff;  op2val:0x01fff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x06feff, 0x01fff7, x30, x13, 456, x1)

inst_75:
// rs1_h0_val == 65407, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f;  op2val:0x200000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xff7fff7f, 0x200000, x30, x13, 464, x1)

inst_76:
// rs2_h0_val == 8192, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002;  op2val:0xfdff2000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xfff70002, 0xfdff2000, x30, x13, 472, x1)

inst_77:
// rs1_h0_val == 65519, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef;  op2val:0x800fffb
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x08ffef, 0x800fffb, x30, x13, 480, x1)

inst_78:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs2_h1_val == 32767, rs1_h0_val == 64, rs1_h1_val == 32767
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0040;  op2val:0x7fff0040
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x7fff0040, 0x7fff0040, x30, x13, 488, x1)

inst_79:
// rs2_h1_val == 43690, rs1_h0_val == 8192
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x032000;  op2val:0xaaaa000c
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x032000, 0xaaaa000c, x30, x13, 496, x1)

inst_80:
// rs2_h1_val == 2048, rs1_h0_val == 65531, rs1_h1_val == 65503
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb;  op2val:0x800fffb
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0xffdffffb, 0x800fffb, x30, x13, 504, x1)

inst_81:
// rs2_h1_val == 8, rs2_h0_val == 65519
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x13ffdf;  op2val:0x08ffef
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x00000000, 0x13ffdf, 0x08ffef, x30, x13, 512, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 130*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
