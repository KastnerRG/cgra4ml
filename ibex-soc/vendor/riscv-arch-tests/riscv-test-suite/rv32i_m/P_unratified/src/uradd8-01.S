
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uradd8 instruction of the RISC-V RV32PZicsr extension for the uradd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uradd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x31, rd==x26, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 85, rs1_b2_val == 251, rs2_b1_val == 32, rs2_b2_val == 85
// opcode: uradd8 ; op1:x30; op2:x31; dest:x26; op1val:0x12fb0d00;  op2val:0x5555200d
TEST_RR_OP(uradd8, x26, x30, x31, 0x00000000, 0x12fb0d00, 0x5555200d, x4, 0, x7)

inst_1:// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x17, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 32, rs1_b0_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 251, rs2_b1_val == 170, rs1_b2_val == 239, rs2_b0_val == 4, rs2_b3_val == 32
// opcode: uradd8 ; op1:x1; op2:x1; dest:x17; op1val:0x20effb01;  op2val:0x2006aa04
TEST_RR_OP(uradd8, x17, x1, x1, 0x00000000, 0x20effb01, 0x2006aa04, x4, 4, x7)

inst_2:// rs1 == rd != rs2, rs1==x18, rs2==x28, rd==x18, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b3_val == 254, rs2_b1_val == 127, rs2_b2_val == 251, rs1_b0_val == 255
// opcode: uradd8 ; op1:x18; op2:x28; dest:x18; op1val:0xdfb0eff;  op2val:0xfefb7f06
TEST_RR_OP(uradd8, x18, x18, x28, 0x00000000, 0xdfb0eff, 0xfefb7f06, x4, 8, x7)

inst_3:// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val == 127, rs1_b2_val == 32, rs2_b0_val == 251, rs1_b3_val == 191
// opcode: uradd8 ; op1:x6; op2:x6; dest:x6; op1val:0xbf200d7f;  op2val:0x70b0dfb
TEST_RR_OP(uradd8, x6, x6, x6, 0x00000000, 0xbf200d7f, 0x70b0dfb, x4, 12, x7)

inst_4:// rs2 == rd != rs1, rs1==x27, rs2==x2, rd==x2, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 253, rs1_b1_val == 2, rs2_b1_val == 128, rs1_b2_val == 128
// opcode: uradd8 ; op1:x27; op2:x2; dest:x2; op1val:0xfd800211;  op2val:0x11fb8011
TEST_RR_OP(uradd8, x2, x27, x2, 0x00000000, 0xfd800211, 0x11fb8011, x4, 16, x7)

inst_5:// rs1==x11, rs2==x22, rd==x1, rs2_b3_val == 170, rs1_b1_val == 1, rs2_b2_val == 254
// opcode: uradd8 ; op1:x11; op2:x22; dest:x1; op1val:0xa0f017f;  op2val:0xaafe0f06
TEST_RR_OP(uradd8, x1, x11, x22, 0x00000000, 0xa0f017f, 0xaafe0f06, x4, 20, x7)

inst_6:// rs1==x5, rs2==x16, rd==x24, rs2_b3_val == 127, rs1_b3_val == 2, rs1_b1_val == 64
// opcode: uradd8 ; op1:x5; op2:x16; dest:x24; op1val:0x2fb4007;  op2val:0x7f090e04
TEST_RR_OP(uradd8, x24, x5, x16, 0x00000000, 0x2fb4007, 0x7f090e04, x4, 24, x7)

inst_7:// rs1==x15, rs2==x10, rd==x16, rs2_b3_val == 191, rs1_b2_val == 170
// opcode: uradd8 ; op1:x15; op2:x10; dest:x16; op1val:0x7aa0903;  op2val:0xbf0d0cfb
TEST_RR_OP(uradd8, x16, x15, x10, 0x00000000, 0x7aa0903, 0xbf0d0cfb, x4, 28, x7)

inst_8:// rs1==x13, rs2==x23, rd==x22, rs2_b3_val == 223, rs2_b1_val == 0, rs1_b1_val == 223, rs2_b0_val == 247, rs1_b3_val == 170, rs1_b2_val == 8
// opcode: uradd8 ; op1:x13; op2:x23; dest:x22; op1val:0xaa08df0a;  op2val:0xdf0300f7
TEST_RR_OP(uradd8, x22, x13, x23, 0x00000000, 0xaa08df0a, 0xdf0300f7, x4, 32, x7)

inst_9:// rs1==x9, rs2==x3, rd==x21, rs2_b3_val == 239, rs1_b0_val == 64, rs1_b1_val == 254, rs1_b2_val == 4
// opcode: uradd8 ; op1:x9; op2:x3; dest:x21; op1val:0xa04fe40;  op2val:0xef070f07
TEST_RR_OP(uradd8, x21, x9, x3, 0x00000000, 0xa04fe40, 0xef070f07, x4, 36, x7)

inst_10:// rs1==x20, rs2==x30, rd==x11, rs2_b3_val == 247, rs1_b2_val == 64, rs2_b1_val == 64, rs2_b2_val == 255
// opcode: uradd8 ; op1:x20; op2:x30; dest:x11; op1val:0xe400e01;  op2val:0xf7ff4013
TEST_RR_OP(uradd8, x11, x20, x30, 0x00000000, 0xe400e01, 0xf7ff4013, x4, 40, x7)

inst_11:// rs1==x16, rs2==x26, rd==x8, rs2_b3_val == 251, rs1_b0_val == 254, rs1_b3_val == 247, rs2_b2_val == 127
// opcode: uradd8 ; op1:x16; op2:x26; dest:x8; op1val:0xf70905fe;  op2val:0xfb7f050e
TEST_RR_OP(uradd8, x8, x16, x26, 0x00000000, 0xf70905fe, 0xfb7f050e, x4, 44, x7)

inst_12:// rs1==x2, rs2==x8, rd==x0, rs2_b3_val == 253, rs2_b0_val == 0, rs2_b1_val == 85, rs1_b0_val == 191
// opcode: uradd8 ; op1:x2; op2:x8; dest:x0; op1val:0xeaa01bf;  op2val:0xfdfe5500
TEST_RR_OP(uradd8, x0, x2, x8, 0x00000000, 0xeaa01bf, 0xfdfe5500, x4, 48, x7)

inst_13:// rs1==x22, rs2==x20, rd==x12, rs2_b3_val == 128, rs2_b2_val == 16, rs1_b2_val == 247
// opcode: uradd8 ; op1:x22; op2:x20; dest:x12; op1val:0xdf70c01;  op2val:0x80107f0e
TEST_RR_OP(uradd8, x12, x22, x20, 0x00000000, 0xdf70c01, 0x80107f0e, x4, 52, x7)

inst_14:// rs1==x3, rs2==x11, rd==x20, rs2_b3_val == 64, rs2_b0_val == 191, rs1_b1_val == 170, rs1_b0_val == 128
// opcode: uradd8 ; op1:x3; op2:x11; dest:x20; op1val:0x9aaaa80;  op2val:0x40ff55bf
TEST_RR_OP(uradd8, x20, x3, x11, 0x00000000, 0x9aaaa80, 0x40ff55bf, x4, 56, x7)

inst_15:// rs1==x29, rs2==x18, rd==x13, rs2_b3_val == 16, rs1_b1_val == 255
// opcode: uradd8 ; op1:x29; op2:x18; dest:x13; op1val:0xafbff00;  op2val:0x107f550b
TEST_RR_OP(uradd8, x13, x29, x18, 0x00000000, 0xafbff00, 0x107f550b, x4, 60, x7)

inst_16:// rs1==x10, rs2==x12, rd==x7, rs2_b3_val == 8, rs1_b0_val == 16, rs2_b0_val == 239, rs2_b1_val == 191, rs1_b3_val == 85
// opcode: uradd8 ; op1:x10; op2:x12; dest:x7; op1val:0x550a1310;  op2val:0x87fbfef
TEST_RR_OP(uradd8, x7, x10, x12, 0x00000000, 0x550a1310, 0x87fbfef, x4, 64, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:// rs1==x23, rs2==x5, rd==x9, rs2_b3_val == 4, rs2_b2_val == 191, rs2_b0_val == 253, rs1_b2_val == 254, rs1_b3_val == 8
// opcode: uradd8 ; op1:x23; op2:x5; dest:x9; op1val:0x8fe1101;  op2val:0x4bf0afd
TEST_RR_OP(uradd8, x9, x23, x5, 0x00000000, 0x8fe1101, 0x4bf0afd, x1, 0, x2)

inst_18:// rs1==x24, rs2==x19, rd==x3, rs2_b3_val == 2, rs1_b3_val == 0, rs2_b0_val == 1, rs1_b1_val == 8
// opcode: uradd8 ; op1:x24; op2:x19; dest:x3; op1val:0x06087f;  op2val:0x2fb1201
TEST_RR_OP(uradd8, x3, x24, x19, 0x00000000, 0x06087f, 0x2fb1201, x1, 4, x2)

inst_19:// rs1==x19, rs2==x13, rd==x15, rs2_b3_val == 1, rs1_b1_val == 127, rs1_b0_val == 2, rs2_b2_val == 128, rs2_b0_val == 254, rs1_b2_val == 1
// opcode: uradd8 ; op1:x19; op2:x13; dest:x15; op1val:0xf017f02;  op2val:0x1800afe
TEST_RR_OP(uradd8, x15, x19, x13, 0x00000000, 0xf017f02, 0x1800afe, x1, 8, x2)

inst_20:// rs1==x25, rs2==x21, rd==x23, rs2_b3_val == 255, rs1_b1_val == 247, rs2_b1_val == 2, rs1_b0_val == 253, rs1_b2_val == 255
// opcode: uradd8 ; op1:x25; op2:x21; dest:x23; op1val:0xafff7fd;  op2val:0xff110207
TEST_RR_OP(uradd8, x23, x25, x21, 0x00000000, 0xafff7fd, 0xff110207, x1, 12, x2)

inst_21:// rs1==x31, rs2==x25, rd==x5, rs2_b3_val == 0, rs2_b1_val == 16, rs1_b2_val == 127
// opcode: uradd8 ; op1:x31; op2:x25; dest:x5; op1val:0xf77f0309;  op2val:0x06100c
TEST_RR_OP(uradd8, x5, x31, x25, 0x00000000, 0xf77f0309, 0x06100c, x1, 16, x2)

inst_22:// rs1==x0, rs2==x24, rd==x19, rs2_b2_val == 170, rs2_b1_val == 4
// opcode: uradd8 ; op1:x0; op2:x24; dest:x19; op1val:0xbffb0680;  op2val:0x20aa040f
TEST_RR_OP(uradd8, x19, x0, x24, 0x00000000, 0xbffb0680, 0x20aa040f, x1, 20, x2)

inst_23:// rs1==x28, rs2==x29, rd==x14, rs2_b2_val == 223, 
// opcode: uradd8 ; op1:x28; op2:x29; dest:x14; op1val:0x1309070b;  op2val:0x4df0f05
TEST_RR_OP(uradd8, x14, x28, x29, 0x00000000, 0x1309070b, 0x4df0f05, x1, 24, x2)

inst_24:// rs1==x12, rs2==x17, rd==x10, rs2_b2_val == 239, rs1_b1_val == 16, rs2_b1_val == 247
// opcode: uradd8 ; op1:x12; op2:x17; dest:x10; op1val:0xf0510fd;  op2val:0xefeff7f7
TEST_RR_OP(uradd8, x10, x12, x17, 0x00000000, 0xf0510fd, 0xefeff7f7, x1, 28, x2)

inst_25:// rs1==x8, rs2==x9, rd==x31, rs2_b2_val == 247, rs1_b3_val == 4
// opcode: uradd8 ; op1:x8; op2:x9; dest:x31; op1val:0x40caa12;  op2val:0x2f7f7bf
TEST_RR_OP(uradd8, x31, x8, x9, 0x00000000, 0x40caa12, 0x2f7f7bf, x1, 32, x2)

inst_26:// rs1==x17, rs2==x27, rd==x25, rs1_b2_val == 0, rs1_b0_val == 223, rs1_b1_val == 85
// opcode: uradd8 ; op1:x17; op2:x27; dest:x25; op1val:0xd0055df;  op2val:0x11fb1209
TEST_RR_OP(uradd8, x25, x17, x27, 0x00000000, 0xd0055df, 0x11fb1209, x1, 36, x2)

inst_27:// rs1==x14, rs2==x7, rd==x28, rs1_b1_val == 191, rs1_b0_val == 4
// opcode: uradd8 ; op1:x14; op2:x7; dest:x28; op1val:0xf0dbf04;  op2val:0xf7ff2001
TEST_RR_OP(uradd8, x28, x14, x7, 0x00000000, 0xf0dbf04, 0xf7ff2001, x1, 40, x2)

inst_28:// rs1==x21, rs2==x4, rd==x30, rs1_b1_val == 239, rs2_b1_val == 253, rs1_b3_val == 1, rs1_b0_val == 247, rs2_b0_val == 255
// opcode: uradd8 ; op1:x21; op2:x4; dest:x30; op1val:0x10eeff7;  op2val:0x1fbfdff
TEST_RR_OP(uradd8, x30, x21, x4, 0x00000000, 0x10eeff7, 0x1fbfdff, x1, 44, x2)

inst_29:// rs1==x7, rs2==x14, rd==x4, rs1_b1_val == 253, rs2_b2_val == 64, rs1_b3_val == 254, rs1_b0_val == 8
// opcode: uradd8 ; op1:x7; op2:x14; dest:x4; op1val:0xfe40fd08;  op2val:0xe400504
TEST_RR_OP(uradd8, x4, x7, x14, 0x00000000, 0xfe40fd08, 0xe400504, x1, 48, x2)

inst_30:// rs1==x4, rs2==x15, rd==x29, rs1_b1_val == 128, rs1_b3_val == 251
// opcode: uradd8 ; op1:x4; op2:x15; dest:x29; op1val:0xfb808001;  op2val:0xb0a800c
TEST_RR_OP(uradd8, x29, x4, x15, 0x00000000, 0xfb808001, 0xb0a800c, x1, 52, x2)

inst_31:// rs1==x26, rs2==x0, rd==x27, rs1_b1_val == 32, rs2_b0_val == 16, rs1_b0_val == 170
// opcode: uradd8 ; op1:x26; op2:x0; dest:x27; op1val:0x80320aa;  op2val:0xaa0b0510
TEST_RR_OP(uradd8, x27, x26, x0, 0x00000000, 0x80320aa, 0xaa0b0510, x1, 56, x2)

inst_32:// rs1_b1_val == 4, rs1_b2_val == 223, rs2_b2_val == 253
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbdf047f;  op2val:0x12fd07fb
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xfbdf047f, 0x12fd07fb, x1, 60, x2)

inst_33:// rs1_b1_val == 0, rs1_b2_val == 191
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbf0002;  op2val:0xfeef800a
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xfbf0002, 0xfeef800a, x1, 64, x2)

inst_34:// rs1_b0_val == 85, rs1_b3_val == 223
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf050b55;  op2val:0x1355200b
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xdf050b55, 0x1355200b, x1, 68, x2)

inst_35:// rs1_b0_val == 239, rs1_b2_val == 2, rs2_b0_val == 127
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20209ef;  op2val:0xfd077f7f
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x20209ef, 0xfd077f7f, x1, 72, x2)

inst_36:// rs1_b0_val == 251, rs2_b2_val == 8, rs2_b0_val == 2
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa09fdfb;  op2val:0x4080702
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xaa09fdfb, 0x4080702, x1, 76, x2)

inst_37:// rs2_b1_val == 1, rs2_b0_val == 223, rs1_b3_val == 255, rs2_b2_val == 4
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff01200c;  op2val:0xd0401df
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xff01200c, 0xd0401df, x1, 80, x2)

inst_38:// rs2_b1_val == 255, rs2_b2_val == 32, rs1_b3_val == 239
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef05800b;  op2val:0x4020ff0a
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xef05800b, 0x4020ff0a, x1, 84, x2)

inst_39:// rs2_b0_val == 170, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7aafe08;  op2val:0x37f7faa
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x7aafe08, 0x37f7faa, x1, 88, x2)

inst_40:// rs2_b0_val == 85, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd02ff03;  op2val:0xe131355
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xfd02ff03, 0xe131355, x1, 92, x2)

inst_41:// rs2_b0_val == 128, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2007aa7f;  op2val:0x7f041380
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x2007aa7f, 0x7f041380, x1, 96, x2)

inst_42:// rs2_b0_val == 64, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x50f0113;  op2val:0x5fe0b40
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x50f0113, 0x5fe0b40, x1, 100, x2)

inst_43:// rs2_b0_val == 32, rs2_b2_val == 2, rs2_b1_val == 8
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xddfff00;  op2val:0xef020820
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xddfff00, 0xef020820, x1, 104, x2)

inst_44:// rs2_b0_val == 8, rs2_b1_val == 254
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x904aa00;  op2val:0x550efe08
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x904aa00, 0x550efe08, x1, 108, x2)

inst_45:// rs1_b0_val == 32, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77f0220;  op2val:0xaadf0509
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xf77f0220, 0xaadf0509, x1, 112, x2)

inst_46:// rs1_b3_val == 128, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80070807;  op2val:0x06080b
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x80070807, 0x06080b, x1, 116, x2)

inst_47:// rs1_b3_val == 64, rs2_b1_val == 251
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4001df06;  op2val:0x80cfb04
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x4001df06, 0x80cfb04, x1, 120, x2)

inst_48:// rs1_b3_val == 16, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x100eef06;  op2val:0xf70a110e
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x100eef06, 0xf70a110e, x1, 124, x2)

inst_49:// rs2_b2_val == 1, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xcdf0a03;  op2val:0x1010ddf
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xcdf0a03, 0x1010ddf, x1, 128, x2)

inst_50:// rs2_b2_val == 0, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf01110f;  op2val:0x5500fd20
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xbf01110f, 0x5500fd20, x1, 132, x2)

inst_51:// rs2_b1_val == 223, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0b7fbf;  op2val:0x680df0e
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xfb0b7fbf, 0x680df0e, x1, 136, x2)

inst_52:// rs1_b2_val == 253, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fd80aa;  op2val:0x40070ffb
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x2fd80aa, 0x40070ffb, x1, 140, x2)

inst_53:// rs1_b2_val == 85, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf550bfb;  op2val:0xfb00aa05
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xf550bfb, 0xfb00aa05, x1, 144, x2)

inst_54:// rs1_b2_val == 16, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1210aa09;  op2val:0xdf130801
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x1210aa09, 0xdf130801, x1, 148, x2)

inst_55:// rs1_b3_val == 127, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff74011;  op2val:0xff110d55
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x7ff74011, 0xff110d55, x1, 152, x2)

inst_56:// rs2_b1_val == 239, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80912aa;  op2val:0x1280ef0f
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x80912aa, 0x1280ef0f, x1, 156, x2)

inst_57:// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 32, rs1_b0_val == 1, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 251, rs2_b1_val == 170, rs1_b2_val == 239, rs2_b0_val == 4, rs2_b3_val == 32
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20effb01;  op2val:0x2006aa04
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x20effb01, 0x2006aa04, x1, 160, x2)

inst_58:// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val == 127, rs1_b2_val == 32, rs2_b0_val == 251, rs1_b3_val == 191
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf200d7f;  op2val:0x70b0dfb
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xbf200d7f, 0x70b0dfb, x1, 164, x2)

inst_59:// rs2_b3_val == 253, rs2_b0_val == 0, rs2_b1_val == 85, rs1_b0_val == 191
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xeaa01bf;  op2val:0xfdfe5500
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xeaa01bf, 0xfdfe5500, x1, 168, x2)

inst_60:// rs2_b2_val == 170, rs2_b1_val == 4
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffb0680;  op2val:0x20aa040f
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0xbffb0680, 0x20aa040f, x1, 172, x2)

inst_61:// rs1_b1_val == 32, rs2_b0_val == 16, rs1_b0_val == 170
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80320aa;  op2val:0xaa0b0510
TEST_RR_OP(uradd8, x31, x30, x29, 0x00000000, 0x80320aa, 0xaa0b0510, x1, 176, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 45*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
