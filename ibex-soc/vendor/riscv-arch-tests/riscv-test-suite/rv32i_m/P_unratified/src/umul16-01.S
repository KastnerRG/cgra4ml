
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umul16 instruction of the RISC-V RV32PZicsr extension for the umul16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umul16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x25, rd==x26, rs1_h0_val == 0, rs2_h1_val == 64, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65279
// opcode: umul16 ; op1:x29; op2:x25; dest:x26; op1val:0x000b0000;  op2val:0x0040feff
TEST_P64_PNN_OP(umul16, x26, x27, x29, x25, 0x00000000, 0, 0x000b0000, 0x0040feff, x8, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x22, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 8, rs2_h1_val == 8, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: umul16 ; op1:x14; op2:x14; dest:x22; op1val:0x00080012;  op2val:0x00080006
TEST_P64_PNN_OP(umul16, x22, x23, x14, x14, 0x00000000, 0, 0x00080012, 0x00080006, x8, 8, x5)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x22, rd==x16, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 1024, rs2_h1_val == 4, rs1_h0_val == 1024
// opcode: umul16 ; op1:x16; op2:x22; dest:x16; op1val:0x00060400;  op2val:0x00040400
TEST_P64_PNN_OP(umul16, x16, x17, x16, x22, 0x00000000, 0, 0x00060400, 0x00040400, x8, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs2_h1_val == 43690, rs1_h1_val == 57343, rs2_h0_val == 43690
// opcode: umul16 ; op1:x2; op2:x2; dest:x2; op1val:0xdfff000d;  op2val:0xaaaaaaaa
TEST_P64_PNN_OP(umul16, x2, x3, x2, x2, 0x00000000, 0, 0xdfff000d, 0xaaaaaaaa, x8, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x10, rs2==x28, rd==x28, rs2_h1_val == 21845, rs1_h0_val == 2, rs1_h1_val == 32767
// opcode: umul16 ; op1:x10; op2:x28; dest:x28; op1val:0x7fff0002;  op2val:0x55550006
TEST_P64_PNN_OP(umul16, x28, x29, x10, x28, 0x00000000, 0, 0x7fff0002, 0x55550006, x8, 32, x5)

inst_5:
// rs1==x31, rs2==x20, rd==x12, rs2_h1_val == 32767, rs1_h1_val == 65519
// opcode: umul16 ; op1:x31; op2:x20; dest:x12; op1val:0xffef000a;  op2val:0x7fff0400
TEST_P64_PNN_OP(umul16, x12, x13, x31, x20, 0x00000000, 0, 0xffef000a, 0x7fff0400, x8, 40, x5)

inst_6:
// rs1==x3, rs2==x31, rd==x20, rs2_h1_val == 49151, rs2_h0_val == 65533
// opcode: umul16 ; op1:x3; op2:x31; dest:x20; op1val:0x00080006;  op2val:0xbffffffd
TEST_P64_PNN_OP(umul16, x20, x21, x3, x31, 0x00000000, 0, 0x00080006, 0xbffffffd, x8, 48, x5)

inst_7:
// rs1==x20, rs2==x13, rd==x14, rs2_h1_val == 57343, rs1_h1_val == 61439, rs1_h0_val == 32, rs2_h0_val == 16
// opcode: umul16 ; op1:x20; op2:x13; dest:x14; op1val:0xefff0020;  op2val:0xdfff0010
TEST_P64_PNN_OP(umul16, x14, x15, x20, x13, 0x00000000, 0, 0xefff0020, 0xdfff0010, x8, 56, x5)

inst_8:
// rs1==x11, rs2==x1, rd==x30, rs2_h1_val == 61439, rs1_h0_val == 65407
// opcode: umul16 ; op1:x11; op2:x1; dest:x30; op1val:0x000cff7f;  op2val:0xefff000f
TEST_P64_PNN_OP(umul16, x30, x31, x11, x1, 0x00000000, 0, 0x000cff7f, 0xefff000f, x8, 64, x5)

inst_9:
// rs1==x22, rs2==x4, rd==x24, rs2_h1_val == 63487, rs2_h0_val == 256, rs1_h1_val == 65023, rs1_h0_val == 8
// opcode: umul16 ; op1:x22; op2:x4; dest:x24; op1val:0xfdff0008;  op2val:0xf7ff0100
TEST_P64_PNN_OP(umul16, x24, x25, x22, x4, 0x00000000, 0, 0xfdff0008, 0xf7ff0100, x8, 72, x5)

inst_10:
// rs1==x1, rs2==x27, rd==x4, rs2_h1_val == 64511, rs1_h1_val == 1
// opcode: umul16 ; op1:x1; op2:x27; dest:x4; op1val:0x00010012;  op2val:0xfbff0013
TEST_P64_PNN_OP(umul16, x4, x5, x1, x27, 0x00000000, 0, 0x00010012, 0xfbff0013, x8, 80, x5)

inst_11:
// rs1==x30, rs2==x19, rd==x6, rs2_h1_val == 65023, rs1_h1_val == 64511, rs2_h0_val == 65519
// opcode: umul16 ; op1:x30; op2:x19; dest:x6; op1val:0xfbff000b;  op2val:0xfdffffef
TEST_P64_PNN_OP(umul16, x6, x7, x30, x19, 0x00000000, 0, 0xfbff000b, 0xfdffffef, x8, 88, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_12:
// rs1==x26, rs2==x6, rd==x8, rs2_h1_val == 65279, rs1_h0_val == 65531, rs1_h1_val == 4
// opcode: umul16 ; op1:x26; op2:x6; dest:x8; op1val:0x0004fffb;  op2val:0xfeff0013
TEST_P64_PNN_OP(umul16, x8, x9, x26, x6, 0x00000000, 0, 0x0004fffb, 0xfeff0013, x1, 0, x5)

inst_13:
// rs1==x23, rs2==x15, rd==x10, rs2_h1_val == 65407, rs1_h0_val == 4, rs2_h0_val == 512
// opcode: umul16 ; op1:x23; op2:x15; dest:x10; op1val:0x00090004;  op2val:0xff7f0200
TEST_P64_PNN_OP(umul16, x10, x11, x23, x15, 0x00000000, 0, 0x00090004, 0xff7f0200, x1, 8, x5)

inst_14:
// rs1==x19, rs2==x11, rd==x18, rs2_h1_val == 65471, rs1_h1_val == 8192, rs1_h0_val == 512
// opcode: umul16 ; op1:x19; op2:x11; dest:x18; op1val:0x20000200;  op2val:0xffbfaaaa
TEST_P64_PNN_OP(umul16, x18, x19, x19, x11, 0x00000000, 0, 0x20000200, 0xffbfaaaa, x1, 16, x2)

inst_15:
// rs1==x15, rs2==x18, rs2_h1_val == 65503, rs1_h1_val == 512, rs2_h0_val == 65503
// opcode: umul16 ; op1:x15; op2:x18; dest:x28; op1val:0x0200000b;  op2val:0xffdfffdf
TEST_P64_PNN_OP(umul16, x28, x29, x15, x18, 0x00000000, 0, 0x0200000b, 0xffdfffdf, x1, 24, x2)

inst_16:
// rs1==x28, rs2==x10, rs2_h1_val == 65519, rs1_h0_val == 65471, rs2_h0_val == 65527
// opcode: umul16 ; op1:x28; op2:x10; dest:x6; op1val:0x000affbf;  op2val:0xffeffff7
TEST_P64_PNN_OP(umul16, x6, x7, x28, x10, 0x00000000, 0, 0x000affbf, 0xffeffff7, x1, 32, x2)

inst_17:
// rs1==x13, rs2==x21, rs2_h1_val == 65527, rs1_h0_val == 256
// opcode: umul16 ; op1:x13; op2:x21; dest:x24; op1val:0x00080100;  op2val:0xfff70006
TEST_P64_PNN_OP(umul16, x24, x25, x13, x21, 0x00000000, 0, 0x00080100, 0xfff70006, x1, 40, x2)

inst_18:
// rs1==x6, rs2==x7, rs2_h1_val == 65531, rs2_h0_val == 65023, rs1_h1_val == 65533
// opcode: umul16 ; op1:x6; op2:x7; dest:x24; op1val:0xfffd0003;  op2val:0xfffbfdff
TEST_P64_PNN_OP(umul16, x24, x25, x6, x7, 0x00000000, 0, 0xfffd0003, 0xfffbfdff, x1, 48, x2)

inst_19:
// rs1==x17, rs2==x26, rs2_h1_val == 65533, 
// opcode: umul16 ; op1:x17; op2:x26; dest:x18; op1val:0x000c0005;  op2val:0xfffd000a
TEST_P64_PNN_OP(umul16, x18, x19, x17, x26, 0x00000000, 0, 0x000c0005, 0xfffd000a, x1, 56, x2)

inst_20:
// rs1==x12, rs2==x8, rs2_h1_val == 65534, rs2_h0_val == 4, rs1_h0_val == 128, rs1_h1_val == 32768
// opcode: umul16 ; op1:x12; op2:x8; dest:x14; op1val:0x80000080;  op2val:0xfffe0004
TEST_P64_PNN_OP(umul16, x14, x15, x12, x8, 0x00000000, 0, 0x80000080, 0xfffe0004, x1, 64, x2)

inst_21:
// rs1==x9, rs2==x23, rs2_h1_val == 32768, rs1_h0_val == 8192
// opcode: umul16 ; op1:x9; op2:x23; dest:x28; op1val:0x00062000;  op2val:0x80000010
TEST_P64_PNN_OP(umul16, x28, x29, x9, x23, 0x00000000, 0, 0x00062000, 0x80000010, x1, 72, x2)

inst_22:
// rs1==x4, rs2==x0, rs2_h1_val == 16384, rs1_h1_val == 65535, rs2_h0_val == 63487
// opcode: umul16 ; op1:x4; op2:x0; dest:x30; op1val:0xffff0020;  op2val:0x4000f7ff
TEST_P64_PNN_OP(umul16, x30, x31, x4, x0, 0x00000000, 0, 0xffff0020, 0x4000f7ff, x1, 80, x2)

inst_23:
// rs1==x7, rs2==x16, rs2_h1_val == 8192, rs1_h0_val == 57343, rs1_h1_val == 65407
// opcode: umul16 ; op1:x7; op2:x16; dest:x20; op1val:0xff7fdfff;  op2val:0x2000fffd
TEST_P64_PNN_OP(umul16, x20, x21, x7, x16, 0x00000000, 0, 0xff7fdfff, 0x2000fffd, x1, 88, x2)

inst_24:
// rs1==x8, rs2==x29, rs2_h1_val == 4096, rs1_h0_val == 32768
// opcode: umul16 ; op1:x8; op2:x29; dest:x24; op1val:0x00058000;  op2val:0x10000009
TEST_P64_PNN_OP(umul16, x24, x25, x8, x29, 0x00000000, 0, 0x00058000, 0x10000009, x1, 96, x2)

inst_25:
// rs1==x25, rs2==x24, rs2_h1_val == 2048, 
// opcode: umul16 ; op1:x25; op2:x24; dest:x6; op1val:0xfffd0080;  op2val:0x0800fff7
TEST_P64_PNN_OP(umul16, x6, x7, x25, x24, 0x00000000, 0, 0xfffd0080, 0x0800fff7, x1, 104, x2)

inst_26:
// rs1==x24, rs2==x5, rs2_h1_val == 1024, rs1_h0_val == 1, rs1_h1_val == 65534
// opcode: umul16 ; op1:x24; op2:x5; dest:x22; op1val:0xfffe0001;  op2val:0x0400ffef
TEST_P64_PNN_OP(umul16, x22, x23, x24, x5, 0x00000000, 0, 0xfffe0001, 0x0400ffef, x1, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27:
// rs1==x0, rs2==x9, rs2_h1_val == 512, rs1_h1_val == 16
// opcode: umul16 ; op1:x0; op2:x9; dest:x26; op1val:0x00100011;  op2val:0x02000004
TEST_P64_PNN_OP(umul16, x26, x27, x0, x9, 0x00000000, 0, 0x00100011, 0x02000004, x1, 0, x2)

inst_28:
// rs1==x18, rs2==x3, rs2_h1_val == 256, 
// opcode: umul16 ; op1:x18; op2:x3; dest:x12; op1val:0x00110009;  op2val:0x0100fff7
TEST_P64_PNN_OP(umul16, x12, x13, x18, x3, 0x00000000, 0, 0x00110009, 0x0100fff7, x1, 8, x2)

inst_29:
// rs1==x5, rs2==x30, rs2_h1_val == 128, rs2_h0_val == 128, rs1_h1_val == 21845
// opcode: umul16 ; op1:x5; op2:x30; dest:x14; op1val:0x55550008;  op2val:0x00800080
TEST_P64_PNN_OP(umul16, x14, x15, x5, x30, 0x00000000, 0, 0x55550008, 0x00800080, x1, 16, x2)

inst_30:
// rs1==x21, rs2==x17, rs2_h1_val == 32, 
// opcode: umul16 ; op1:x21; op2:x17; dest:x10; op1val:0x00030006;  op2val:0x0020fffd
TEST_P64_PNN_OP(umul16, x10, x11, x21, x17, 0x00000000, 0, 0x00030006, 0x0020fffd, x1, 24, x2)

inst_31:
// rs1==x27, rs2==x12, rs2_h1_val == 16, rs1_h1_val == 64
// opcode: umul16 ; op1:x27; op2:x12; dest:x16; op1val:0x00408000;  op2val:0x0010000b
TEST_P64_PNN_OP(umul16, x16, x17, x27, x12, 0x00000000, 0, 0x00408000, 0x0010000b, x1, 32, x2)

inst_32:
// rs2_h1_val == 2, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000edfff;  op2val:0x0002000c
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000edfff, 0x0002000c, x1, 40, x2)

inst_33:
// rs1_h0_val == 65533, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfbfffffd;  op2val:0x08000011
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfbfffffd, 0x08000011, x1, 48, x2)

inst_34:
// rs1_h0_val == 65534, rs2_h0_val == 65534, rs1_h1_val == 43690
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaafffe;  op2val:0xff7ffffe
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xaaaafffe, 0xff7ffffe, x1, 56, x2)

inst_35:
// rs1_h0_val == 16384, rs1_h1_val == 65527
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfff74000;  op2val:0xfdfff7ff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfff74000, 0xfdfff7ff, x1, 64, x2)

inst_36:
// rs1_h0_val == 4096, rs2_h0_val == 8
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000b1000;  op2val:0x04000008
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000b1000, 0x04000008, x1, 72, x2)

inst_37:
// rs1_h0_val == 2048, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00100800;  op2val:0x00110008
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00100800, 0x00110008, x1, 80, x2)

inst_38:
// rs1_h0_val == 64, rs2_h0_val == 64511
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xdfff0040;  op2val:0x0005fbff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xdfff0040, 0x0005fbff, x1, 88, x2)

inst_39:
// rs1_h0_val == 16, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00050010;  op2val:0xfffe0006
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00050010, 0xfffe0006, x1, 96, x2)

inst_40:
// rs1_h0_val == 65535, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0007ffff;  op2val:0xfbfffdff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0007ffff, 0xfbfffdff, x1, 104, x2)

inst_41:
// rs2_h1_val == 1, rs1_h1_val == 65531
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0800;  op2val:0x00010010
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0800, 0x00010010, x1, 112, x2)

inst_42:
// rs2_h1_val == 65535, rs2_h0_val == 64
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000dffff;  op2val:0xffff0040
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000dffff, 0xffff0040, x1, 120, x2)

inst_43:
// rs2_h1_val == 0, rs2_h0_val == 1
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x55550011;  op2val:0x00000001
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x55550011, 0x00000001, x1, 128, x2)

inst_44:
// rs2_h0_val == 21845, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00080005;  op2val:0xffef5555
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00080005, 0xffef5555, x1, 136, x2)

inst_45:
// rs2_h0_val == 32767, rs1_h1_val == 65503
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0200;  op2val:0x7fff7fff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0200, 0x7fff7fff, x1, 144, x2)

inst_46:
// rs2_h0_val == 49151, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00400040;  op2val:0x000abfff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00400040, 0x000abfff, x1, 152, x2)

inst_47:
// rs2_h0_val == 57343, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0200;  op2val:0xff7fdfff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0200, 0xff7fdfff, x1, 160, x2)

inst_48:
// rs2_h0_val == 61439, rs1_h1_val == 65279
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfeff8000;  op2val:0xffbfefff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfeff8000, 0xffbfefff, x1, 168, x2)

inst_49:
// rs2_h0_val == 65407, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0006ffff;  op2val:0x0004ff7f
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0006ffff, 0x0004ff7f, x1, 176, x2)

inst_50:
// rs2_h0_val == 65471, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xaaaa000b;  op2val:0xffffffbf
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xaaaa000b, 0xffffffbf, x1, 184, x2)

inst_51:
// rs2_h0_val == 65531, rs1_h1_val == 1024
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x04000012;  op2val:0x000efffb
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x04000012, 0x000efffb, x1, 192, x2)

inst_52:
// rs2_h0_val == 32768, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffd;  op2val:0x00078000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffffffd, 0x00078000, x1, 200, x2)

inst_53:
// rs2_h0_val == 32, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfeff0011;  op2val:0x000d0020
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfeff0011, 0x000d0020, x1, 208, x2)

inst_54:
// rs2_h0_val == 2, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000b0009;  op2val:0x08000002
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000b0009, 0x08000002, x1, 216, x2)

inst_55:
// rs2_h0_val == 65535, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfffb4000;  op2val:0x0012ffff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfffb4000, 0x0012ffff, x1, 224, x2)

inst_56:
// rs2_h0_val == 0, rs1_h0_val == 43690
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xefffaaaa;  op2val:0x00120000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xefffaaaa, 0x00120000, x1, 232, x2)

inst_57:
// rs1_h1_val == 49151, rs1_h0_val == 65503
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xbfffffdf;  op2val:0x8000bfff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xbfffffdf, 0x8000bfff, x1, 240, x2)

inst_58:
// rs1_h1_val == 63487, rs1_h0_val == 21845
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff5555;  op2val:0xdfff0011
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff5555, 0xdfff0011, x1, 248, x2)

inst_59:
// rs1_h1_val == 65471, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffbf2000;  op2val:0x0040f7ff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xffbf2000, 0x0040f7ff, x1, 256, x2)

inst_60:
// rs2_h0_val == 4096, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000c0006;  op2val:0x00041000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000c0006, 0x00041000, x1, 264, x2)

inst_61:
// rs1_h1_val == 16384, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x40000006;  op2val:0x7fff5555
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x40000006, 0x7fff5555, x1, 272, x2)

inst_62:
// rs1_h1_val == 4096, rs2_h0_val == 8192
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x10005555;  op2val:0x000b2000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x10005555, 0x000b2000, x1, 280, x2)

inst_63:
// rs1_h1_val == 2048, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x08000009;  op2val:0xbfff000e
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x08000009, 0xbfff000e, x1, 288, x2)

inst_64:
// rs1_h1_val == 256, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x01000011;  op2val:0x000b0009
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x01000011, 0x000b0009, x1, 296, x2)

inst_65:
// rs1_h1_val == 128, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0080ffdf;  op2val:0x00090010
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0080ffdf, 0x00090010, x1, 304, x2)

inst_66:
// rs1_h1_val == 32, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0020aaaa;  op2val:0x0013000c
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0020aaaa, 0x0013000c, x1, 312, x2)

inst_67:
// rs1_h1_val == 2, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00028000;  op2val:0x0004000e
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00028000, 0x0004000e, x1, 320, x2)

inst_68:
// rs1_h1_val == 0, rs1_h0_val == 65279
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0000feff;  op2val:0x000e0011
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0000feff, 0x000e0011, x1, 328, x2)

inst_69:
// rs1_h0_val == 65527, rs2_h0_val == 16384
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0001fff7;  op2val:0xbfff4000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0001fff7, 0xbfff4000, x1, 336, x2)

inst_70:
// rs1_h0_val == 32767, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000f7fff;  op2val:0xfff70040
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000f7fff, 0xfff70040, x1, 344, x2)

inst_71:
// rs1_h0_val == 49151, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x8000bfff;  op2val:0x0004000a
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x8000bfff, 0x0004000a, x1, 352, x2)

inst_72:
// rs1_h0_val == 61439, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0400efff;  op2val:0xffdf000a
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0400efff, 0xffdf000a, x1, 360, x2)

inst_73:
// rs1_h0_val == 63487, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xf7fff7ff;  op2val:0x0040000c
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xf7fff7ff, 0x0040000c, x1, 368, x2)

inst_74:
// rs1_h0_val == 64511, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x000afbff;  op2val:0x00090013
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x000afbff, 0x00090013, x1, 376, x2)

inst_75:
// rs1_h0_val == 65023, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfbfffdff;  op2val:0xffeffdff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfbfffdff, 0xffeffdff, x1, 384, x2)

inst_76:
// rs1_h0_val == 65519, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x0002ffef;  op2val:0xdfff8000
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x0002ffef, 0xdfff8000, x1, 392, x2)

inst_77:
// rs2_h0_val == 2048, 
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xfdff1000;  op2val:0x00100800
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xfdff1000, 0x00100800, x1, 400, x2)

inst_78:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 8, rs2_h1_val == 8, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00080012;  op2val:0x00080006
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00080012, 0x00080006, x1, 408, x2)

inst_79:
// rs2_h1_val == 43690, rs1_h1_val == 57343, rs2_h0_val == 43690
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xdfff000d;  op2val:0xaaaaaaaa
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xdfff000d, 0xaaaaaaaa, x1, 416, x2)

inst_80:
// rs2_h1_val == 16384, rs1_h1_val == 65535, rs2_h0_val == 63487
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0xffff0020;  op2val:0x4000f7ff
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0xffff0020, 0x4000f7ff, x1, 424, x2)

inst_81:
// rs2_h1_val == 512, rs1_h1_val == 16
// opcode: umul16 ; op1:x31; op2:x29; dest:x30; op1val:0x00100011;  op2val:0x02000004
TEST_P64_PNN_OP(umul16, x30, x31, x31, x29, 0x00000000, 0, 0x00100011, 0x02000004, x1, 432, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
