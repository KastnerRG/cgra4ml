
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smds instruction of the RISC-V RV32PZicsr extension for the smds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x15, rd==x24, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 2048, rs2_h1_val == 21845
// opcode: smds ; op1:x23; op2:x15; dest:x24; op1val:0x8008000;  op2val:0x55550007
TEST_RR_OP(smds, x24, x23, x15, 0x00000000, 0x8008000, 0x55550007, x11, 0, x16)

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x1, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -1, rs2_h0_val == -1, rs1_h0_val == 16, rs1_h1_val == -1
// opcode: smds ; op1:x13; op2:x13; dest:x1; op1val:0xffff0010;  op2val:0xffffffff
TEST_RR_OP(smds, x1, x13, x13, 0x00000000, 0xffff0010, 0xffffffff, x11, 4, x16)

inst_2:
// rs1 == rd != rs2, rs1==x9, rs2==x28, rd==x9, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 1, rs2_h0_val == -1025, rs1_h0_val == -2049
// opcode: smds ; op1:x9; op2:x28; dest:x9; op1val:0xfffdf7ff;  op2val:0x01fbff
TEST_RR_OP(smds, x9, x9, x28, 0x00000000, 0xfffdf7ff, 0x01fbff, x11, 8, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 2
// opcode: smds ; op1:x4; op2:x4; dest:x4; op1val:0x022000;  op2val:0xfffa0007
TEST_RR_OP(smds, x4, x4, x4, 0x00000000, 0x022000, 0xfffa0007, x11, 12, x16)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x27, rd==x27, rs1_h0_val == rs2_h0_val, rs2_h1_val == -4097
// opcode: smds ; op1:x18; op2:x27; dest:x27; op1val:0xc000c000;  op2val:0xefffc000
TEST_RR_OP(smds, x27, x18, x27, 0x00000000, 0xc000c000, 0xefffc000, x11, 16, x16)

inst_5:
// rs1==x27, rs2==x0, rd==x8, rs2_h1_val == -21846, rs1_h1_val == 256
// opcode: smds ; op1:x27; op2:x0; dest:x8; op1val:0x1000006;  op2val:0xaaaafff9
TEST_RR_OP(smds, x8, x27, x0, 0x00000000, 0x1000006, 0xaaaafff9, x11, 20, x16)

inst_6:
// rs1==x1, rs2==x9, rd==x7, rs2_h1_val == 32767, rs1_h0_val == 16384, rs2_h0_val == -8193, rs1_h1_val == -129
// opcode: smds ; op1:x1; op2:x9; dest:x7; op1val:0xff7f4000;  op2val:0x7fffdfff
TEST_RR_OP(smds, x7, x1, x9, 0x00000000, 0xff7f4000, 0x7fffdfff, x11, 24, x16)

inst_7:
// rs1==x12, rs2==x19, rd==x23, rs2_h1_val == -16385, 
// opcode: smds ; op1:x12; op2:x19; dest:x23; op1val:0xfffafff8;  op2val:0xbfff3fff
TEST_RR_OP(smds, x23, x12, x19, 0x00000000, 0xfffafff8, 0xbfff3fff, x11, 28, x16)

inst_8:
// rs1==x26, rs2==x17, rd==x28, rs2_h1_val == -8193, rs1_h0_val == 128
// opcode: smds ; op1:x26; op2:x17; dest:x28; op1val:0x070080;  op2val:0xdfffc000
TEST_RR_OP(smds, x28, x26, x17, 0x00000000, 0x070080, 0xdfffc000, x11, 32, x16)

inst_9:
// rs1==x15, rs2==x6, rd==x25, rs2_h1_val == -2049, rs2_h0_val == -3, rs1_h1_val == -2
// opcode: smds ; op1:x15; op2:x6; dest:x25; op1val:0xfffe0003;  op2val:0xf7fffffd
TEST_RR_OP(smds, x25, x15, x6, 0x00000000, 0xfffe0003, 0xf7fffffd, x11, 36, x16)

inst_10:
// rs1==x24, rs2==x14, rd==x29, rs2_h1_val == -1025, 
// opcode: smds ; op1:x24; op2:x14; dest:x29; op1val:0xfff68000;  op2val:0xfbffffff
TEST_RR_OP(smds, x29, x24, x14, 0x00000000, 0xfff68000, 0xfbffffff, x11, 40, x16)

inst_11:
// rs1==x10, rs2==x18, rd==x21, rs2_h1_val == -513, rs1_h1_val == -16385
// opcode: smds ; op1:x10; op2:x18; dest:x21; op1val:0xbffff7ff;  op2val:0xfdfffffa
TEST_RR_OP(smds, x21, x10, x18, 0x00000000, 0xbffff7ff, 0xfdfffffa, x11, 44, x16)

inst_12:
// rs1==x19, rs2==x12, rd==x17, rs2_h1_val == -257, rs1_h0_val == -2, rs2_h0_val == -65
// opcode: smds ; op1:x19; op2:x12; dest:x17; op1val:0x100fffe;  op2val:0xfeffffbf
TEST_RR_OP(smds, x17, x19, x12, 0x00000000, 0x100fffe, 0xfeffffbf, x11, 48, x16)

inst_13:
// rs1==x5, rs2==x20, rd==x14, rs2_h1_val == -129, rs1_h0_val == 1
// opcode: smds ; op1:x5; op2:x20; dest:x14; op1val:0xfff60001;  op2val:0xff7f0003
TEST_RR_OP(smds, x14, x5, x20, 0x00000000, 0xfff60001, 0xff7f0003, x11, 52, x16)

inst_14:
// rs1==x21, rs2==x24, rd==x18, rs2_h1_val == -65, rs1_h1_val == 32
// opcode: smds ; op1:x21; op2:x24; dest:x18; op1val:0x20fff9;  op2val:0xffbffffa
TEST_RR_OP(smds, x18, x21, x24, 0x00000000, 0x20fff9, 0xffbffffa, x11, 56, x16)

inst_15:
// rs1==x25, rs2==x3, rd==x0, rs2_h1_val == -33, rs2_h0_val == 1024, rs1_h1_val == -21846
// opcode: smds ; op1:x25; op2:x3; dest:x0; op1val:0xaaaa0007;  op2val:0xffdf0400
TEST_RR_OP(smds, x0, x25, x3, 0x00000000, 0xaaaa0007, 0xffdf0400, x11, 60, x16)

inst_16:
// rs1==x8, rs2==x25, rd==x20, rs2_h1_val == -17, rs1_h1_val == -5, rs2_h0_val == -9
// opcode: smds ; op1:x8; op2:x25; dest:x20; op1val:0xfffbf7ff;  op2val:0xffeffff7
TEST_RR_OP(smds, x20, x8, x25, 0x00000000, 0xfffbf7ff, 0xffeffff7, x11, 64, x16)

inst_17:
// rs1==x20, rs2==x23, rd==x15, rs2_h1_val == -9, rs2_h0_val == 64, rs1_h1_val == 128
// opcode: smds ; op1:x20; op2:x23; dest:x15; op1val:0x80fff8;  op2val:0xfff70040
TEST_RR_OP(smds, x15, x20, x23, 0x00000000, 0x80fff8, 0xfff70040, x11, 68, x16)

inst_18:
// rs1==x3, rs2==x2, rd==x6, rs2_h1_val == -5, rs1_h0_val == -513
// opcode: smds ; op1:x3; op2:x2; dest:x6; op1val:0xfff8fdff;  op2val:0xfffb3fff
TEST_RR_OP(smds, x6, x3, x2, 0x00000000, 0xfff8fdff, 0xfffb3fff, x11, 72, x16)

inst_19:
// rs1==x28, rs2==x5, rd==x31, rs2_h1_val == -3, rs1_h0_val == 2, rs1_h1_val == -32768, rs2_h0_val == 8
// opcode: smds ; op1:x28; op2:x5; dest:x31; op1val:0x80000002;  op2val:0xfffd0008
TEST_RR_OP(smds, x31, x28, x5, 0x00000000, 0x80000002, 0xfffd0008, x11, 76, x9)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_20:
// rs1==x17, rs2==x10, rd==x26, rs2_h1_val == -2, rs1_h0_val == -3, rs2_h0_val == 16384
// opcode: smds ; op1:x17; op2:x10; dest:x26; op1val:0x3ffffffd;  op2val:0xfffe4000
TEST_RR_OP(smds, x26, x17, x10, 0x00000000, 0x3ffffffd, 0xfffe4000, x4, 0, x9)

inst_21:
// rs1==x30, rs2==x7, rd==x22, rs2_h1_val == -32768, rs1_h1_val == -257
// opcode: smds ; op1:x30; op2:x7; dest:x22; op1val:0xfeff0009;  op2val:0x80000009
TEST_RR_OP(smds, x22, x30, x7, 0x00000000, 0xfeff0009, 0x80000009, x4, 4, x9)

inst_22:
// rs1==x2, rs2==x21, rd==x11, rs2_h1_val == 16384, rs1_h1_val == 0
// opcode: smds ; op1:x2; op2:x21; dest:x11; op1val:0x000010;  op2val:0x4000fff8
TEST_RR_OP(smds, x11, x2, x21, 0x00000000, 0x000010, 0x4000fff8, x4, 8, x9)

inst_23:
// rs1==x22, rs2==x16, rd==x30, rs2_h1_val == 8192, rs2_h0_val == 4096
// opcode: smds ; op1:x22; op2:x16; dest:x30; op1val:0x800001;  op2val:0x20001000
TEST_RR_OP(smds, x30, x22, x16, 0x00000000, 0x800001, 0x20001000, x4, 12, x9)

inst_24:
// rs1==x7, rs2==x31, rd==x19, rs2_h1_val == 4096, rs2_h0_val == 4, rs1_h0_val == 21845
// opcode: smds ; op1:x7; op2:x31; dest:x19; op1val:0xfffa5555;  op2val:0x10000004
TEST_RR_OP(smds, x19, x7, x31, 0x00000000, 0xfffa5555, 0x10000004, x4, 16, x9)

inst_25:
// rs1==x29, rs2==x26, rd==x3, rs2_h1_val == 2048, rs1_h1_val == -4097, rs1_h0_val == 1024
// opcode: smds ; op1:x29; op2:x26; dest:x3; op1val:0xefff0400;  op2val:0x8000003
TEST_RR_OP(smds, x3, x29, x26, 0x00000000, 0xefff0400, 0x8000003, x4, 20, x9)

inst_26:
// rs1==x14, rs2==x8, rd==x10, rs2_h1_val == 1024, rs1_h0_val == 0
// opcode: smds ; op1:x14; op2:x8; dest:x10; op1val:0x800000;  op2val:0x4000005
TEST_RR_OP(smds, x10, x14, x8, 0x00000000, 0x800000, 0x4000005, x4, 24, x9)

inst_27:
// rs1==x11, rs2==x1, rd==x5, rs2_h1_val == 512, rs1_h0_val == 256, rs1_h1_val == -9, rs2_h0_val == -4097
// opcode: smds ; op1:x11; op2:x1; dest:x5; op1val:0xfff70100;  op2val:0x200efff
TEST_RR_OP(smds, x5, x11, x1, 0x00000000, 0xfff70100, 0x200efff, x4, 28, x9)

inst_28:
// rs1==x31, rs2==x11, rd==x2, rs2_h1_val == 256, rs2_h0_val == -2049
// opcode: smds ; op1:x31; op2:x11; dest:x2; op1val:0x3ffffffe;  op2val:0x100f7ff
TEST_RR_OP(smds, x2, x31, x11, 0x00000000, 0x3ffffffe, 0x100f7ff, x4, 32, x9)

inst_29:
// rs1==x16, rs2==x29, rd==x12, rs2_h1_val == 128, rs2_h0_val == 512, rs1_h1_val == 1
// opcode: smds ; op1:x16; op2:x29; dest:x12; op1val:0x01fdff;  op2val:0x800200
TEST_RR_OP(smds, x12, x16, x29, 0x00000000, 0x01fdff, 0x800200, x4, 36, x9)

inst_30:
// rs1==x6, rs2==x22, rd==x13, rs2_h1_val == 64, rs2_h0_val == 16
// opcode: smds ; op1:x6; op2:x22; dest:x13; op1val:0x3fff2000;  op2val:0x400010
TEST_RR_OP(smds, x13, x6, x22, 0x00000000, 0x3fff2000, 0x400010, x4, 40, x9)

inst_31:
// rs1==x0, rs2==x30, rd==x16, rs2_h1_val == 32, rs1_h0_val == -129
// opcode: smds ; op1:x0; op2:x30; dest:x16; op1val:0xff7fff7f;  op2val:0x20fff9
TEST_RR_OP(smds, x16, x0, x30, 0x00000000, 0xff7fff7f, 0x20fff9, x4, 44, x9)

inst_32:
// rs2_h1_val == 16, rs1_h1_val == -33
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffe;  op2val:0x10dfff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffdffffe, 0x10dfff, x4, 48, x9)

inst_33:
// rs1_h0_val == -1025, rs2_h0_val == -2
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x06fbff;  op2val:0xfffffffe
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x06fbff, 0xfffffffe, x4, 52, x9)

inst_34:
// rs1_h0_val == -257, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfeff;  op2val:0xefffdfff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfffdfeff, 0xefffdfff, x4, 56, x9)

inst_35:
// rs1_h0_val == -65, rs1_h1_val == -1025
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbf;  op2val:0xfffffffe
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfbffffbf, 0xfffffffe, x4, 60, x9)

inst_36:
// rs1_h0_val == -33, rs2_h1_val == 4
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf;  op2val:0x040200
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x01ffdf, 0x040200, x4, 64, x9)

inst_37:
// rs1_h0_val == -17, rs2_h0_val == 2
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x06ffef;  op2val:0x2000002
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x06ffef, 0x2000002, x4, 68, x9)

inst_38:
// rs1_h0_val == -9, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff7;  op2val:0xfffe0400
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfffcfff7, 0xfffe0400, x4, 72, x9)

inst_39:
// rs1_h0_val == -5, rs1_h1_val == -8193, rs2_h0_val == 256
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb;  op2val:0x4000100
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xdffffffb, 0x4000100, x4, 76, x9)

inst_40:
// rs1_h0_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff1000;  op2val:0xffdf0040
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfbff1000, 0xffdf0040, x4, 80, x9)

inst_41:
// rs1_h0_val == 2048, rs1_h1_val == -17
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffef0800;  op2val:0x10fbff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffef0800, 0x10fbff, x4, 84, x9)

inst_42:
// rs1_h0_val == 512, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x090200;  op2val:0x2004000
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x090200, 0x2004000, x4, 88, x9)

inst_43:
// rs1_h0_val == 64, rs1_h1_val == 1024, rs2_h0_val == 32
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x4000040;  op2val:0xdfff0020
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x4000040, 0xdfff0020, x4, 92, x9)

inst_44:
// rs1_h0_val == 32, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffef0020;  op2val:0xfffd0006
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffef0020, 0xfffd0006, x4, 96, x9)

inst_45:
// rs1_h0_val == 8, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008;  op2val:0xff7f0002
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfbff0008, 0xff7f0002, x4, 100, x9)

inst_46:
// rs1_h0_val == 4, rs1_h1_val == -2049
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004;  op2val:0xdffffffa
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xf7ff0004, 0xdffffffa, x4, 104, x9)

inst_47:
// rs1_h0_val == -1, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xfffe0040
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xfffe0040, x4, 108, x9)

inst_48:
// rs2_h1_val == 8, rs1_h0_val == -16385
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x100bfff;  op2val:0x08ffbf
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x100bfff, 0x08ffbf, x4, 112, x9)

inst_49:
// rs2_h1_val == 2, rs1_h1_val == 16, rs2_h0_val == 8192
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x100005;  op2val:0x022000
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x100005, 0x022000, x4, 116, x9)

inst_50:
// rs2_h1_val == 0, rs1_h1_val == 32767
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x7fff2000;  op2val:0x000006
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x7fff2000, 0x000006, x4, 120, x9)

inst_51:
// rs2_h0_val == -5, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffef0006;  op2val:0xfffdfffb
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffef0006, 0xfffdfffb, x4, 124, x9)

inst_52:
// rs2_h0_val == -32768, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x80000010;  op2val:0xefff8000
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x80000010, 0xefff8000, x4, 128, x9)

inst_53:
// rs2_h0_val == 2048, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa1000;  op2val:0xfdff0800
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfffa1000, 0xfdff0800, x4, 132, x9)

inst_54:
// rs2_h0_val == 128, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080;  op2val:0xefff0080
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffef0080, 0xefff0080, x4, 136, x9)

inst_55:
// rs2_h0_val == 1, rs1_h1_val == -513
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff;  op2val:0x060001
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfdfffdff, 0x060001, x4, 140, x9)

inst_56:
// rs2_h0_val == 0, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x10fbff;  op2val:0x100000
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x10fbff, 0x100000, x4, 144, x9)

inst_57:
// rs1_h1_val == 21845, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x55550001;  op2val:0x80fff6
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x55550001, 0x80fff6, x4, 148, x9)

inst_58:
// rs2_h0_val == -513, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffff;  op2val:0x00fdff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x8000ffff, 0x00fdff, x4, 152, x9)

inst_59:
// rs1_h1_val == -65, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff9;  op2val:0x000020
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffbffff9, 0x000020, x4, 156, x9)

inst_60:
// rs1_h1_val == 16384, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x40003fff;  op2val:0xfff90009
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x40003fff, 0xfff90009, x4, 160, x9)

inst_61:
// rs1_h0_val == -4097, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0x01fff7
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffffefff, 0x01fff7, x4, 164, x9)

inst_62:
// rs1_h1_val == 8192, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20000001;  op2val:0xffdffff9
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x20000001, 0xffdffff9, x4, 168, x9)

inst_63:
// rs1_h1_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff6;  op2val:0xc0000001
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x1000fff6, 0xc0000001, x4, 172, x9)

inst_64:
// rs2_h0_val == -129, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x050200;  op2val:0xefffff7f
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x050200, 0xefffff7f, x4, 176, x9)

inst_65:
// rs1_h1_val == 512, rs2_h0_val == -257, rs1_h0_val == 32767
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x2007fff;  op2val:0xfff6feff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x2007fff, 0xfff6feff, x4, 180, x9)

inst_66:
// rs1_h1_val == 64, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x40fff7;  op2val:0xfff73fff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x40fff7, 0xfff73fff, x4, 184, x9)

inst_67:
// rs2_h0_val == -21846, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x00aaaa
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x00aaaa, x4, 188, x9)

inst_68:
// rs2_h0_val == 21845, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x100080;  op2val:0x7fff5555
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x100080, 0x7fff5555, x4, 192, x9)

inst_69:
// rs2_h0_val == 32767, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20ffef;  op2val:0x80007fff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x20ffef, 0x80007fff, x4, 196, x9)

inst_70:
// rs1_h1_val == 8, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x080000;  op2val:0xfff80002
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x080000, 0xfff80002, x4, 200, x9)

inst_71:
// rs2_h0_val == -16385, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x100006;  op2val:0xfbffbfff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x100006, 0xfbffbfff, x4, 204, x9)

inst_72:
// rs2_h0_val == -33, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x05fff7;  op2val:0xfeffffdf
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x05fff7, 0xfeffffdf, x4, 208, x9)

inst_73:
// rs1_h0_val == -21846, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaa;  op2val:0xfdfffeff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xff7faaaa, 0xfdfffeff, x4, 212, x9)

inst_74:
// rs1_h1_val == 4, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x040040;  op2val:0xfffa0004
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x040040, 0xfffa0004, x4, 216, x9)

inst_75:
// rs1_h0_val == -8193, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffbdfff;  op2val:0x200fdff
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xfffbdfff, 0x200fdff, x4, 220, x9)

inst_76:
// rs2_h0_val == -17, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff;  op2val:0xfffcffef
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xffeffdff, 0xfffcffef, x4, 224, x9)

inst_77:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 2
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x022000;  op2val:0xfffa0007
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x022000, 0xfffa0007, x4, 228, x9)

inst_78:
// rs2_h1_val == -21846, rs1_h1_val == 256
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x1000006;  op2val:0xaaaafff9
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0x1000006, 0xaaaafff9, x4, 232, x9)

inst_79:
// rs2_h1_val == 32, rs1_h0_val == -129
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f;  op2val:0x20fff9
TEST_RR_OP(smds, x31, x30, x29, 0x00000000, 0xff7fff7f, 0x20fff9, x4, 236, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
