
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmple8 instruction of the RISC-V RV32PZicsr extension for the ucmple8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmple8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x13, rd==x1, rs1_b0_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b1_val == 85, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 254, rs1_b2_val == 64, rs2_b0_val == 64, rs2_b1_val == 251, rs1_b3_val == 191
// opcode: ucmple8 ; op1:x11; op2:x13; dest:x1; op1val:0xbf405500;  op2val:0xcfefb40
TEST_RR_OP(ucmple8, x1, x11, x13, 0x00000000, 0xbf405500, 0xcfefb40, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x14, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 247, rs1_b3_val == 255, rs2_b0_val == 4, rs2_b1_val == 223, rs2_b3_val == 255, rs1_b0_val == 253, rs2_b2_val == 85
// opcode: ucmple8 ; op1:x22; op2:x22; dest:x14; op1val:0xff03f7fd;  op2val:0xff55df04
TEST_RR_OP(ucmple8, x14, x22, x22, 0x00000000, 0xff03f7fd, 0xff55df04, x4, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x14, rd==x29, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b3_val == 251, rs1_b0_val == 16, rs1_b1_val == 32, rs2_b3_val == 254, rs2_b1_val == 64
// opcode: ucmple8 ; op1:x29; op2:x14; dest:x29; op1val:0xfb122010;  op2val:0xfe124012
TEST_RR_OP(ucmple8, x29, x29, x14, 0x00000000, 0xfb122010, 0xfe124012, x4, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val == 127
// opcode: ucmple8 ; op1:x28; op2:x28; dest:x28; op1val:0xfb0d127f;  op2val:0xc091213
TEST_RR_OP(ucmple8, x28, x28, x28, 0x00000000, 0xfb0d127f, 0xc091213, x4, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x26, rd==x26, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 170, rs2_b0_val == 16, rs1_b2_val == 85, rs2_b1_val == 247
// opcode: ucmple8 ; op1:x21; op2:x26; dest:x26; op1val:0x12555510;  op2val:0xaafef710
TEST_RR_OP(ucmple8, x26, x21, x26, 0x00000000, 0x12555510, 0xaafef710, x4, 16, x5)

inst_5:
// rs1==x12, rs2==x31, rd==x10, rs2_b3_val == 85, rs1_b3_val == 2, rs1_b1_val == 254, rs2_b1_val == 127
// opcode: ucmple8 ; op1:x12; op2:x31; dest:x10; op1val:0x20dfe0d;  op2val:0x550c7f07
TEST_RR_OP(ucmple8, x10, x12, x31, 0x00000000, 0x20dfe0d, 0x550c7f07, x4, 20, x5)

inst_6:
// rs1==x6, rs2==x23, rd==x17, rs2_b3_val == 127, rs2_b1_val == 2, rs1_b1_val == 253, rs2_b0_val == 254, rs1_b0_val == 191, rs1_b3_val == 85
// opcode: ucmple8 ; op1:x6; op2:x23; dest:x17; op1val:0x5507fdbf;  op2val:0x7f0f02fe
TEST_RR_OP(ucmple8, x17, x6, x23, 0x00000000, 0x5507fdbf, 0x7f0f02fe, x4, 24, x5)

inst_7:
// rs1==x31, rs2==x18, rd==x8, rs2_b3_val == 191, 
// opcode: ucmple8 ; op1:x31; op2:x18; dest:x8; op1val:0xa071111;  op2val:0xbf0cf707
TEST_RR_OP(ucmple8, x8, x31, x18, 0x00000000, 0xa071111, 0xbf0cf707, x4, 28, x5)

inst_8:
// rs1==x26, rs2==x30, rd==x18, rs2_b3_val == 223, rs1_b1_val == 128, rs2_b0_val == 251
// opcode: ucmple8 ; op1:x26; op2:x30; dest:x18; op1val:0x5540800f;  op2val:0xdf0f11fb
TEST_RR_OP(ucmple8, x18, x26, x30, 0x00000000, 0x5540800f, 0xdf0f11fb, x4, 32, x5)

inst_9:
// rs1==x27, rs2==x6, rd==x7, rs2_b3_val == 239, rs2_b1_val == 8, rs2_b2_val == 255
// opcode: ucmple8 ; op1:x27; op2:x6; dest:x7; op1val:0xfb130605;  op2val:0xefff0806
TEST_RR_OP(ucmple8, x7, x27, x6, 0x00000000, 0xfb130605, 0xefff0806, x4, 36, x5)

inst_10:
// rs1==x2, rs2==x1, rd==x31, rs2_b3_val == 247, rs2_b0_val == 8, rs2_b2_val == 247
// opcode: ucmple8 ; op1:x2; op2:x1; dest:x31; op1val:0xbf03060f;  op2val:0xf7f74008
TEST_RR_OP(ucmple8, x31, x2, x1, 0x00000000, 0xbf03060f, 0xf7f74008, x4, 40, x5)

inst_11:
// rs1==x7, rs2==x24, rd==x9, rs2_b3_val == 251, rs1_b0_val == 251
// opcode: ucmple8 ; op1:x7; op2:x24; dest:x9; op1val:0xf0755fb;  op2val:0xfbff0903
TEST_RR_OP(ucmple8, x9, x7, x24, 0x00000000, 0xf0755fb, 0xfbff0903, x4, 44, x5)

inst_12:
// rs1==x19, rs2==x8, rd==x21, rs2_b3_val == 253, rs1_b3_val == 239
// opcode: ucmple8 ; op1:x19; op2:x8; dest:x21; op1val:0xef07fe0d;  op2val:0xfd11fb0b
TEST_RR_OP(ucmple8, x21, x19, x8, 0x00000000, 0xef07fe0d, 0xfd11fb0b, x4, 48, x5)

inst_13:
// rs1==x30, rs2==x10, rd==x2, rs2_b3_val == 128, rs1_b1_val == 2, rs1_b0_val == 239, rs1_b3_val == 0
// opcode: ucmple8 ; op1:x30; op2:x10; dest:x2; op1val:0x0b02ef;  op2val:0x800c0f0d
TEST_RR_OP(ucmple8, x2, x30, x10, 0x00000000, 0x0b02ef, 0x800c0f0d, x4, 52, x5)

inst_14:
// rs1==x16, rs2==x3, rd==x13, rs2_b3_val == 64, rs1_b3_val == 223, rs1_b0_val == 128
// opcode: ucmple8 ; op1:x16; op2:x3; dest:x13; op1val:0xdf0c0e80;  op2val:0x40f70908
TEST_RR_OP(ucmple8, x13, x16, x3, 0x00000000, 0xdf0c0e80, 0x40f70908, x4, 56, x5)

inst_15:
// rs1==x5, rs2==x9, rd==x11, rs2_b3_val == 32, rs2_b2_val == 253, rs1_b1_val == 223, rs1_b2_val == 255
// opcode: ucmple8 ; op1:x5; op2:x9; dest:x11; op1val:0xffdf10;  op2val:0x20fd0210
TEST_RR_OP(ucmple8, x11, x5, x9, 0x00000000, 0xffdf10, 0x20fd0210, x4, 60, x23)
RVTEST_SIGBASE(x26,signature_x26_0)

inst_16:
// rs1==x17, rs2==x11, rd==x30, rs2_b3_val == 16, rs2_b0_val == 127
// opcode: ucmple8 ; op1:x17; op2:x11; dest:x30; op1val:0xc0e200c;  op2val:0x10130b7f
TEST_RR_OP(ucmple8, x30, x17, x11, 0x00000000, 0xc0e200c, 0x10130b7f, x26, 0, x23)

inst_17:
// rs1==x10, rs2==x5, rd==x12, rs2_b3_val == 8, rs1_b3_val == 1, rs2_b1_val == 191, rs1_b1_val == 239
// opcode: ucmple8 ; op1:x10; op2:x5; dest:x12; op1val:0x113ef05;  op2val:0x806bf10
TEST_RR_OP(ucmple8, x12, x10, x5, 0x00000000, 0x113ef05, 0x806bf10, x26, 4, x23)

inst_18:
// rs1==x20, rs2==x4, rd==x3, rs2_b3_val == 4, rs1_b1_val == 4, rs2_b1_val == 128
// opcode: ucmple8 ; op1:x20; op2:x4; dest:x3; op1val:0x120604ef;  op2val:0x413800f
TEST_RR_OP(ucmple8, x3, x20, x4, 0x00000000, 0x120604ef, 0x413800f, x26, 8, x23)

inst_19:
// rs1==x9, rs2==x2, rd==x19, rs2_b3_val == 2, rs1_b3_val == 254, rs2_b0_val == 170, rs2_b1_val == 239, rs1_b1_val == 8
// opcode: ucmple8 ; op1:x9; op2:x2; dest:x19; op1val:0xfe06080d;  op2val:0x2feefaa
TEST_RR_OP(ucmple8, x19, x9, x2, 0x00000000, 0xfe06080d, 0x2feefaa, x26, 12, x23)

inst_20:
// rs1==x14, rs2==x21, rd==x5, rs2_b3_val == 1, rs2_b2_val == 239, rs1_b3_val == 4, rs2_b0_val == 223, rs1_b2_val == 16, rs2_b1_val == 32
// opcode: ucmple8 ; op1:x14; op2:x21; dest:x5; op1val:0x4105509;  op2val:0x1ef20df
TEST_RR_OP(ucmple8, x5, x14, x21, 0x00000000, 0x4105509, 0x1ef20df, x26, 16, x23)

inst_21:
// rs1==x3, rs2==x0, rd==x27, rs2_b3_val == 0, rs1_b2_val == 251, rs2_b0_val == 1
// opcode: ucmple8 ; op1:x3; op2:x0; dest:x27; op1val:0x12fbf7ef;  op2val:0x0a0201
TEST_RR_OP(ucmple8, x27, x3, x0, 0x00000000, 0x12fbf7ef, 0x0a0201, x26, 20, x23)

inst_22:
// rs1==x8, rs2==x25, rd==x16, rs2_b2_val == 170, rs1_b2_val == 223, rs1_b1_val == 64, rs2_b0_val == 2, rs1_b3_val == 247
// opcode: ucmple8 ; op1:x8; op2:x25; dest:x16; op1val:0xf7df400c;  op2val:0xdaa0b02
TEST_RR_OP(ucmple8, x16, x8, x25, 0x00000000, 0xf7df400c, 0xdaa0b02, x26, 24, x23)

inst_23:
// rs1==x18, rs2==x20, rd==x22, rs2_b2_val == 127, rs2_b0_val == 191, rs1_b1_val == 16
// opcode: ucmple8 ; op1:x18; op2:x20; dest:x22; op1val:0xbf551005;  op2val:0xb7f02bf
TEST_RR_OP(ucmple8, x22, x18, x20, 0x00000000, 0xbf551005, 0xb7f02bf, x26, 28, x23)

inst_24:
// rs1==x1, rs2==x16, rd==x15, rs2_b2_val == 191, rs1_b2_val == 32, rs2_b1_val == 0, rs2_b0_val == 128
// opcode: ucmple8 ; op1:x1; op2:x16; dest:x15; op1val:0x420f700;  op2val:0x5bf0080
TEST_RR_OP(ucmple8, x15, x1, x16, 0x00000000, 0x420f700, 0x5bf0080, x26, 32, x23)

inst_25:
// rs1==x0, rs2==x19, rd==x4, rs2_b2_val == 223, rs1_b0_val == 64, rs2_b1_val == 254, rs1_b3_val == 32, rs2_b0_val == 253
// opcode: ucmple8 ; op1:x0; op2:x19; dest:x4; op1val:0x200ef740;  op2val:0x13dffefd
TEST_RR_OP(ucmple8, x4, x0, x19, 0x00000000, 0x200ef740, 0x13dffefd, x26, 36, x23)

inst_26:
// rs1==x13, rs2==x12, rd==x24, rs2_b2_val == 251, rs1_b3_val == 127, rs1_b2_val == 254
// opcode: ucmple8 ; op1:x13; op2:x12; dest:x24; op1val:0x7ffefd12;  op2val:0xfdfb0602
TEST_RR_OP(ucmple8, x24, x13, x12, 0x00000000, 0x7ffefd12, 0xfdfb0602, x26, 40, x23)

inst_27:
// rs1==x15, rs2==x7, rd==x6, rs1_b2_val == 0, rs1_b1_val == 127
// opcode: ucmple8 ; op1:x15; op2:x7; dest:x6; op1val:0xfe007f0b;  op2val:0x809fb06
TEST_RR_OP(ucmple8, x6, x15, x7, 0x00000000, 0xfe007f0b, 0x809fb06, x26, 44, x23)

inst_28:
// rs1==x24, rs2==x27, rd==x25, rs1_b1_val == 170, rs1_b2_val == 170, rs1_b3_val == 16
// opcode: ucmple8 ; op1:x24; op2:x27; dest:x25; op1val:0x10aaaa10;  op2val:0x8ff07fe
TEST_RR_OP(ucmple8, x25, x24, x27, 0x00000000, 0x10aaaa10, 0x8ff07fe, x26, 48, x2)

inst_29:
// rs1==x25, rs2==x17, rd==x0, rs1_b1_val == 191, rs1_b2_val == 247, rs2_b2_val == 8, rs2_b1_val == 16
// opcode: ucmple8 ; op1:x25; op2:x17; dest:x0; op1val:0xcf7bf05;  op2val:0x90810fb
TEST_RR_OP(ucmple8, x0, x25, x17, 0x00000000, 0xcf7bf05, 0x90810fb, x26, 52, x2)

inst_30:
// rs1==x23, rs2==x15, rd==x20, rs1_b1_val == 251, rs2_b2_val == 1
// opcode: ucmple8 ; op1:x23; op2:x15; dest:x20; op1val:0xff09fb40;  op2val:0xfe01800a
TEST_RR_OP(ucmple8, x20, x23, x15, 0x00000000, 0xff09fb40, 0xfe01800a, x26, 56, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x4, rs2==x29, rd==x23, rs1_b1_val == 1, 
// opcode: ucmple8 ; op1:x4; op2:x29; dest:x23; op1val:0xef200110;  op2val:0x10fef712
TEST_RR_OP(ucmple8, x23, x4, x29, 0x00000000, 0xef200110, 0x10fef712, x1, 0, x2)

inst_32:
// rs1_b1_val == 255, rs1_b2_val == 191, rs2_b1_val == 1
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xcbfff0f;  op2val:0x4f70106
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xcbfff0f, 0x4f70106, x1, 4, x2)

inst_33:
// rs1_b1_val == 0, rs2_b0_val == 32, rs1_b0_val == 247, rs2_b2_val == 128
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x94000f7;  op2val:0x280df20
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x94000f7, 0x280df20, x1, 8, x2)

inst_34:
// rs1_b0_val == 170, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0f13aa;  op2val:0x60e0280
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xdf0f13aa, 0x60e0280, x1, 12, x2)

inst_35:
// rs1_b0_val == 85, rs2_b2_val == 16, rs1_b2_val == 253
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fdfd55;  op2val:0x108010
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x1fdfd55, 0x108010, x1, 16, x2)

inst_36:
// rs1_b0_val == 223, rs2_b1_val == 255
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fd7fdf;  op2val:0xa80ffbf
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x5fd7fdf, 0xa80ffbf, x1, 20, x2)

inst_37:
// rs1_b0_val == 254, rs1_b2_val == 239, rs2_b0_val == 85
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x9ef40fe;  op2val:0xcf70155
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x9ef40fe, 0xcf70155, x1, 24, x2)

inst_38:
// rs1_b0_val == 32, rs2_b0_val == 0, rs1_b2_val == 8
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x708ef20;  op2val:0xa800800
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x708ef20, 0xa800800, x1, 28, x2)

inst_39:
// rs2_b1_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffb0a;  op2val:0xa550400
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x200ffb0a, 0xa550400, x1, 32, x2)

inst_40:
// rs2_b0_val == 239, rs2_b1_val == 170
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x320bf0a;  op2val:0xbfbaaef
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x320bf0a, 0xbfbaaef, x1, 36, x2)

inst_41:
// rs2_b0_val == 247, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xd1200fe;  op2val:0xfe0c09f7
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xd1200fe, 0xfe0c09f7, x1, 40, x2)

inst_42:
// rs2_b0_val == 255, rs1_b0_val == 1
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xef110701;  op2val:0xbf090fff
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xef110701, 0xbf090fff, x1, 44, x2)

inst_43:
// rs1_b3_val == 170, rs1_b0_val == 4, rs1_b2_val == 1
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa011104;  op2val:0x6bffeef
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xaa011104, 0x6bffeef, x1, 48, x2)

inst_44:
// rs1_b3_val == 253, rs2_b2_val == 32
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaa0b;  op2val:0x9202002
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xfdffaa0b, 0x9202002, x1, 52, x2)

inst_45:
// rs1_b0_val == 8, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xc010508;  op2val:0xf0e0ffd
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xc010508, 0xf0e0ffd, x1, 56, x2)

inst_46:
// rs1_b3_val == 128, rs2_b2_val == 0
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x80120a7f;  op2val:0x200004f7
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x80120a7f, 0x200004f7, x1, 60, x2)

inst_47:
// rs1_b3_val == 64, rs2_b1_val == 85
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x400efe0c;  op2val:0xdfdf5500
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x400efe0c, 0xdfdf5500, x1, 64, x2)

inst_48:
// rs1_b0_val == 2, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1550802;  op2val:0xfd7f03bf
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x1550802, 0xfd7f03bf, x1, 68, x2)

inst_49:
// rs1_b0_val == 255, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x115507ff;  op2val:0xe80ff12
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x115507ff, 0xe80ff12, x1, 72, x2)

inst_50:
// rs1_b3_val == 8, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8100602;  op2val:0xf7efdf55
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x8100602, 0xf7efdf55, x1, 76, x2)

inst_51:
// rs2_b2_val == 64, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x210df7f;  op2val:0xc401100
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x210df7f, 0xc401100, x1, 80, x2)

inst_52:
// rs1_b2_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x304040e;  op2val:0x7f060855
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x304040e, 0x7f060855, x1, 84, x2)

inst_53:
// rs2_b2_val == 2, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff0a01;  op2val:0x11022080
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xeff0a01, 0x11022080, x1, 88, x2)

inst_54:
// rs1_b2_val == 128, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf8055df;  op2val:0x13107f08
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xdf8055df, 0x13107f08, x1, 92, x2)

inst_55:
// rs2_b1_val == 253, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1df800d;  op2val:0x100dfd05
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x1df800d, 0x100dfd05, x1, 96, x2)

inst_56:
// rs2_b2_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8dffddf;  op2val:0xfd040a04
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x8dffddf, 0xfd040a04, x1, 100, x2)

inst_57:
// rs1_b2_val == 2, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8020e07;  op2val:0x120deff7
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x8020e07, 0x120deff7, x1, 104, x2)

inst_58:
// rs1_b2_val == 127, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0410;  op2val:0x11080bfb
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xff7f0410, 0x11080bfb, x1, 108, x2)

inst_59:
// rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 247, rs1_b3_val == 255, rs2_b0_val == 4, rs2_b1_val == 223, rs2_b3_val == 255, rs1_b0_val == 253, rs2_b2_val == 85
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xff03f7fd;  op2val:0xff55df04
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xff03f7fd, 0xff55df04, x1, 112, x2)

inst_60:
// rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val == 127
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0d127f;  op2val:0xc091213
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xfb0d127f, 0xc091213, x1, 116, x2)

inst_61:
// rs2_b3_val == 0, rs1_b2_val == 251, rs2_b0_val == 1
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x12fbf7ef;  op2val:0x0a0201
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0x12fbf7ef, 0x0a0201, x1, 120, x2)

inst_62:
// rs1_b1_val == 191, rs1_b2_val == 247, rs2_b2_val == 8, rs2_b1_val == 16
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xcf7bf05;  op2val:0x90810fb
TEST_RR_OP(ucmple8, x31, x30, x29, 0x00000000, 0xcf7bf05, 0x90810fb, x1, 124, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x26_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
