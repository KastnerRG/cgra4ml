
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clz16 instruction of the RISC-V RV32PZicsr extension for the clz16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clz16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1==x5, rd==x30, rs1_h0_val == 0, rs1_h1_val == 65279
// opcode: clz16 ; op1:x5; dest:x30; op1val:0xfeff0000;
TEST_RD_OP( clz16, x30, x5, 0x00000000, 0xfeff0000, x6, 0, x14)

inst_1:
// rs1==x29, rd==x12, rs1_h1_val == 43690, rs1_h0_val == 65535
// opcode: clz16 ; op1:x29; dest:x12; op1val:0xaaaaffff;
TEST_RD_OP( clz16, x12, x29, 0x00000000, 0xaaaaffff, x6, 4, x14)

inst_2:
// rs1==x0, rd==x9, rs1_h1_val == 21845, rs1_h0_val == 61439
// opcode: clz16 ; op1:x0; dest:x9; op1val:0x5555efff;
TEST_RD_OP( clz16, x9, x0, 0x00000000, 0x5555efff, x6, 8, x14)

inst_3:
// rs1==x10, rd==x2, rs1_h1_val == 32767, rs1_h0_val == 65534
// opcode: clz16 ; op1:x10; dest:x2; op1val:0x7ffffffe;
TEST_RD_OP( clz16, x2, x10, 0x00000000, 0x7ffffffe, x6, 12, x14)

inst_4:
// rs1==x11, rd==x26, rs1_h1_val == 49151, rs1_h0_val == 65531
// opcode: clz16 ; op1:x11; dest:x26; op1val:0xbffffffb;
TEST_RD_OP( clz16, x26, x11, 0x00000000, 0xbffffffb, x6, 16, x14)

inst_5:
// rs1==x16, rd==x25, rs1_h1_val == 57343, rs1_h0_val == 1
// opcode: clz16 ; op1:x16; dest:x25; op1val:0xdfff0001;
TEST_RD_OP( clz16, x25, x16, 0x00000000, 0xdfff0001, x6, 20, x14)

inst_6:
// rs1==x21, rd==x23, rs1_h1_val == 61439, 
// opcode: clz16 ; op1:x21; dest:x23; op1val:0xefff000d;
TEST_RD_OP( clz16, x23, x21, 0x00000000, 0xefff000d, x6, 24, x14)

inst_7:
// rs1==x31, rd==x17, rs1_h1_val == 63487, rs1_h0_val == 128
// opcode: clz16 ; op1:x31; dest:x17; op1val:0xf7ff0080;
TEST_RD_OP( clz16, x17, x31, 0x00000000, 0xf7ff0080, x6, 28, x14)

inst_8:
// rs1==x27, rd==x15, rs1_h1_val == 64511, 
// opcode: clz16 ; op1:x27; dest:x15; op1val:0xfbff0013;
TEST_RD_OP( clz16, x15, x27, 0x00000000, 0xfbff0013, x6, 32, x14)

inst_9:
// rs1==x1, rd==x22, rs1_h1_val == 65023, rs1_h0_val == 65533
// opcode: clz16 ; op1:x1; dest:x22; op1val:0xfdfffffd;
TEST_RD_OP( clz16, x22, x1, 0x00000000, 0xfdfffffd, x6, 36, x14)

inst_10:
// rs1==x12, rd==x27, rs1_h1_val == 65407, rs1_h0_val == 32767
// opcode: clz16 ; op1:x12; dest:x27; op1val:0xff7f7fff;
TEST_RD_OP( clz16, x27, x12, 0x00000000, 0xff7f7fff, x6, 40, x14)

inst_11:
// rs1==x9, rd==x19, rs1_h1_val == 65471, rs1_h0_val == 43690
// opcode: clz16 ; op1:x9; dest:x19; op1val:0xffbfaaaa;
TEST_RD_OP( clz16, x19, x9, 0x00000000, 0xffbfaaaa, x6, 44, x14)

inst_12:
// rs1==x24, rd==x18, rs1_h1_val == 65503, 
// opcode: clz16 ; op1:x24; dest:x18; op1val:0xffdf000f;
TEST_RD_OP( clz16, x18, x24, 0x00000000, 0xffdf000f, x6, 48, x14)

inst_13:
// rs1==x15, rd==x3, rs1_h1_val == 65519, rs1_h0_val == 65527
// opcode: clz16 ; op1:x15; dest:x3; op1val:0xffeffff7;
TEST_RD_OP( clz16, x3, x15, 0x00000000, 0xffeffff7, x6, 52, x14)

inst_14:
// rs1==x30, rd==x29, rs1_h1_val == 65527, 
// opcode: clz16 ; op1:x30; dest:x29; op1val:0xfff7000b;
TEST_RD_OP( clz16, x29, x30, 0x00000000, 0xfff7000b, x6, 56, x14)

inst_15:
// rs1==x7, rd==x4, rs1_h1_val == 65531, 
// opcode: clz16 ; op1:x7; dest:x4; op1val:0xfffb000b;
TEST_RD_OP( clz16, x4, x7, 0x00000000, 0xfffb000b, x6, 60, x14)

inst_16:
// rs1==x25, rd==x13, rs1_h1_val == 65533, rs1_h0_val == 2048
// opcode: clz16 ; op1:x25; dest:x13; op1val:0xfffd0800;
TEST_RD_OP( clz16, x13, x25, 0x00000000, 0xfffd0800, x6, 64, x14)

inst_17:
// rs1==x20, rd==x8, rs1_h1_val == 65534, 
// opcode: clz16 ; op1:x20; dest:x8; op1val:0xfffe000b;
TEST_RD_OP( clz16, x8, x20, 0x00000000, 0xfffe000b, x6, 68, x14)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_18:
// rs1==x8, rd==x0, rs1_h1_val == 32768, rs1_h0_val == 512
// opcode: clz16 ; op1:x8; dest:x0; op1val:0x80000200;
TEST_RD_OP( clz16, x0, x8, 0x00000000, 0x80000200, x9, 0, x12)

inst_19:
// rs1==x6, rd==x24, rs1_h1_val == 16384, rs1_h0_val == 32768
// opcode: clz16 ; op1:x6; dest:x24; op1val:0x40008000;
TEST_RD_OP( clz16, x24, x6, 0x00000000, 0x40008000, x9, 4, x12)

inst_20:
// rs1==x22, rd==x31, rs1_h1_val == 8192, 
// opcode: clz16 ; op1:x22; dest:x31; op1val:0x20000005;
TEST_RD_OP( clz16, x31, x22, 0x00000000, 0x20000005, x9, 8, x12)

inst_21:
// rs1==x19, rd==x11, rs1_h1_val == 4096, 
// opcode: clz16 ; op1:x19; dest:x11; op1val:0x1000ffff;
TEST_RD_OP( clz16, x11, x19, 0x00000000, 0x1000ffff, x9, 12, x12)

inst_22:
// rs1==x14, rd==x20, rs1_h1_val == 2048, 
// opcode: clz16 ; op1:x14; dest:x20; op1val:0x8000003;
TEST_RD_OP( clz16, x20, x14, 0x00000000, 0x8000003, x9, 16, x12)

inst_23:
// rs1==x13, rd==x21, rs1_h1_val == 1024, 
// opcode: clz16 ; op1:x13; dest:x21; op1val:0x4000007;
TEST_RD_OP( clz16, x21, x13, 0x00000000, 0x4000007, x9, 20, x12)

inst_24:
// rs1==x26, rd==x28, rs1_h1_val == 512, rs1_h0_val == 65023
// opcode: clz16 ; op1:x26; dest:x28; op1val:0x200fdff;
TEST_RD_OP( clz16, x28, x26, 0x00000000, 0x200fdff, x9, 24, x12)

inst_25:
// rs1==x17, rd==x7, rs1_h1_val == 256, rs1_h0_val == 65407
// opcode: clz16 ; op1:x17; dest:x7; op1val:0x100ff7f;
TEST_RD_OP( clz16, x7, x17, 0x00000000, 0x100ff7f, x9, 28, x12)

inst_26:
// rs1==x3, rd==x16, rs1_h0_val == 64, 
// opcode: clz16 ; op1:x3; dest:x16; op1val:0x0a0040;
TEST_RD_OP( clz16, x16, x3, 0x00000000, 0x0a0040, x9, 32, x12)

inst_27:
// rs1==x4, rd==x6, rs1_h0_val == 32, 
// opcode: clz16 ; op1:x4; dest:x6; op1val:0xfffe0020;
TEST_RD_OP( clz16, x6, x4, 0x00000000, 0xfffe0020, x9, 36, x12)

inst_28:
// rs1==x18, rd==x10, rs1_h0_val == 16, rs1_h1_val == 2
// opcode: clz16 ; op1:x18; dest:x10; op1val:0x020010;
TEST_RD_OP( clz16, x10, x18, 0x00000000, 0x020010, x9, 40, x12)

inst_29:
// rs1==x28, rd==x5, rs1_h0_val == 8, 
// opcode: clz16 ; op1:x28; dest:x5; op1val:0x130008;
TEST_RD_OP( clz16, x5, x28, 0x00000000, 0x130008, x9, 44, x12)

inst_30:
// rs1==x23, rd==x14, rs1_h0_val == 4, rs1_h1_val == 128
// opcode: clz16 ; op1:x23; dest:x14; op1val:0x800004;
TEST_RD_OP( clz16, x14, x23, 0x00000000, 0x800004, x9, 48, x12)

inst_31:
// rs1==x2, rd==x1, rs1_h0_val == 2, 
// opcode: clz16 ; op1:x2; dest:x1; op1val:0x060002;
TEST_RD_OP( clz16, x1, x2, 0x00000000, 0x060002, x9, 52, x12)

inst_32:
// rs1_h1_val == 64, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x400003;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x400003, x9, 56, x12)

inst_33:
// rs1_h1_val == 32, rs1_h0_val == 49151
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x20bfff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x20bfff, x9, 60, x12)

inst_34:
// rs1_h1_val == 16, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x10000a;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x10000a, x9, 64, x12)

inst_35:
// rs1_h1_val == 8, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x080003;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x080003, x9, 68, x12)

inst_36:
// rs1_h1_val == 4, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x04efff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x04efff, x9, 72, x12)

inst_37:
// rs1_h1_val == 1, rs1_h0_val == 65503
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x01ffdf;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x01ffdf, x9, 76, x12)

inst_38:
// rs1_h1_val == 65535, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfffffffe;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0xfffffffe, x9, 80, x12)

inst_39:
// rs1_h1_val == 0, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x000000;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x000000, x9, 84, x12)

inst_40:
// rs1_h0_val == 21845, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfff75555;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0xfff75555, x9, 88, x12)

inst_41:
// rs1_h0_val == 57343, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x40dfff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x40dfff, x9, 92, x12)

inst_42:
// rs1_h0_val == 63487, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x80f7ff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x80f7ff, x9, 96, x12)

inst_43:
// rs1_h0_val == 64511, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfbfffbff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0xfbfffbff, x9, 100, x12)

inst_44:
// rs1_h0_val == 65279, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xaaaafeff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0xaaaafeff, x9, 104, x12)

inst_45:
// rs1_h0_val == 65471, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x12ffbf;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x12ffbf, x9, 108, x12)

inst_46:
// rs1_h0_val == 65519, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x01ffef;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x01ffef, x9, 112, x12)

inst_47:
// rs1_h0_val == 16384, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0e4000;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x0e4000, x9, 116, x12)

inst_48:
// rs1_h0_val == 8192, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x102000;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x102000, x9, 120, x12)

inst_49:
// rs1_h0_val == 4096, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x7fff1000;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x7fff1000, x9, 124, x12)

inst_50:
// rs1_h0_val == 1024, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xff7f0400;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0xff7f0400, x9, 128, x12)

inst_51:
// rs1_h0_val == 256, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x7fff0100;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x7fff0100, x9, 132, x12)

inst_52:
// rs1_h1_val == 21845, rs1_h0_val == 61439
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x5555efff;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x5555efff, x9, 136, x12)

inst_53:
// rs1_h1_val == 32768, rs1_h0_val == 512
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x80000200;
TEST_RD_OP( clz16, x31, x30, 0x00000000, 0x80000200, x9, 140, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
