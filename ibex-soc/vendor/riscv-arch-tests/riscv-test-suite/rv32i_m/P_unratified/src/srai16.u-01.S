
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai16.u instruction of the RISC-V RV32PZicsr extension for the srai16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rd, rs1==x9, rd==x10, rs1_h0_val == -32768, imm_val == 15, rs1_h1_val == -513
// opcode: srai16.u ; op1:x9; dest:x10; op1val:0xfdff8000;  immval:0xf
TEST_IMM_OP( srai16.u, x10, x9, 0x00000000, 0xfdff8000, 0xf, x4, 0, x2)

inst_1:
// rs1 == rd, rs1==x11, rd==x11, imm_val == 14, rs1_h1_val == 1
// opcode: srai16.u ; op1:x11; dest:x11; op1val:0x01fff6;  immval:0xe
TEST_IMM_OP( srai16.u, x11, x11, 0x00000000, 0x01fff6, 0xe, x4, 4, x2)

inst_2:
// rs1==x19, rd==x7, imm_val == 13, rs1_h1_val == 64
// opcode: srai16.u ; op1:x19; dest:x7; op1val:0x403fff;  immval:0xd
TEST_IMM_OP( srai16.u, x7, x19, 0x00000000, 0x403fff, 0xd, x4, 8, x2)

inst_3:
// rs1==x5, rd==x18, imm_val == 12, rs1_h1_val == -5, rs1_h0_val == -2
// opcode: srai16.u ; op1:x5; dest:x18; op1val:0xfffbfffe;  immval:0xc
TEST_IMM_OP( srai16.u, x18, x5, 0x00000000, 0xfffbfffe, 0xc, x4, 12, x2)

inst_4:
// rs1==x18, rd==x17, imm_val == 11, rs1_h1_val == -2
// opcode: srai16.u ; op1:x18; dest:x17; op1val:0xfffe8000;  immval:0xb
TEST_IMM_OP( srai16.u, x17, x18, 0x00000000, 0xfffe8000, 0xb, x4, 16, x2)

inst_5:
// rs1==x15, rd==x25, imm_val == 10, rs1_h1_val == -257, rs1_h0_val == -1
// opcode: srai16.u ; op1:x15; dest:x25; op1val:0xfeffffff;  immval:0xa
TEST_IMM_OP( srai16.u, x25, x15, 0x00000000, 0xfeffffff, 0xa, x4, 20, x2)

inst_6:
// rs1==x21, rd==x20, imm_val == 9, rs1_h0_val == -3, rs1_h1_val == 16
// opcode: srai16.u ; op1:x21; dest:x20; op1val:0x10fffd;  immval:0x9
TEST_IMM_OP( srai16.u, x20, x21, 0x00000000, 0x10fffd, 0x9, x4, 24, x2)

inst_7:
// rs1==x10, rd==x0, imm_val == 8, rs1_h0_val == 4096, rs1_h1_val == -32768
// opcode: srai16.u ; op1:x10; dest:x0; op1val:0x80001000;  immval:0x8
TEST_IMM_OP( srai16.u, x0, x10, 0x00000000, 0x80001000, 0x8, x4, 28, x2)

inst_8:
// rs1==x12, rd==x14, imm_val == 7, rs1_h0_val == 64
// opcode: srai16.u ; op1:x12; dest:x14; op1val:0x80000040;  immval:0x7
TEST_IMM_OP( srai16.u, x14, x12, 0x00000000, 0x80000040, 0x7, x4, 32, x2)

inst_9:
// rs1==x8, rd==x28, imm_val == 6, rs1_h0_val == -21846
// opcode: srai16.u ; op1:x8; dest:x28; op1val:0x05aaaa;  immval:0x6
TEST_IMM_OP( srai16.u, x28, x8, 0x00000000, 0x05aaaa, 0x6, x4, 36, x2)

inst_10:
// rs1==x27, rd==x3, imm_val == 5, 
// opcode: srai16.u ; op1:x27; dest:x3; op1val:0x06fffd;  immval:0x5
TEST_IMM_OP( srai16.u, x3, x27, 0x00000000, 0x06fffd, 0x5, x4, 40, x2)

inst_11:
// rs1==x29, rd==x31, imm_val == 4, rs1_h1_val == -1
// opcode: srai16.u ; op1:x29; dest:x31; op1val:0xffff1000;  immval:0x4
TEST_IMM_OP( srai16.u, x31, x29, 0x00000000, 0xffff1000, 0x4, x4, 44, x2)

inst_12:
// rs1==x26, rd==x16, imm_val == 3, rs1_h1_val == 512, rs1_h0_val == -129
// opcode: srai16.u ; op1:x26; dest:x16; op1val:0x200ff7f;  immval:0x3
TEST_IMM_OP( srai16.u, x16, x26, 0x00000000, 0x200ff7f, 0x3, x4, 48, x2)

inst_13:
// rs1==x28, rd==x1, imm_val == 2, 
// opcode: srai16.u ; op1:x28; dest:x1; op1val:0xc000fff6;  immval:0x2
TEST_IMM_OP( srai16.u, x1, x28, 0x00000000, 0xc000fff6, 0x2, x4, 52, x2)

inst_14:
// rs1==x1, rd==x6, imm_val == 1, 
// opcode: srai16.u ; op1:x1; dest:x6; op1val:0xfff9fffc;  immval:0x1
TEST_IMM_OP( srai16.u, x6, x1, 0x00000000, 0xfff9fffc, 0x1, x4, 56, x2)

inst_15:
// rs1==x14, rd==x23, imm_val == 0, rs1_h0_val == -5
// opcode: srai16.u ; op1:x14; dest:x23; op1val:0x40fffb;  immval:0x0
TEST_IMM_OP( srai16.u, x23, x14, 0x00000000, 0x40fffb, 0x0, x4, 60, x2)

inst_16:
// rs1==x0, rd==x21, rs1_h1_val == -21846, 
// opcode: srai16.u ; op1:x0; dest:x21; op1val:0xaaaafff8;  immval:0x9
TEST_IMM_OP( srai16.u, x21, x0, 0x00000000, 0xaaaafff8, 0x9, x4, 64, x2)

inst_17:
// rs1==x13, rd==x12, rs1_h1_val == 21845, rs1_h0_val == -9
// opcode: srai16.u ; op1:x13; dest:x12; op1val:0x5555fff7;  immval:0x0
TEST_IMM_OP( srai16.u, x12, x13, 0x00000000, 0x5555fff7, 0x0, x4, 68, x2)

inst_18:
// rs1==x25, rd==x29, rs1_h1_val == 32767, rs1_h0_val == -513
// opcode: srai16.u ; op1:x25; dest:x29; op1val:0x7ffffdff;  immval:0x3
TEST_IMM_OP( srai16.u, x29, x25, 0x00000000, 0x7ffffdff, 0x3, x4, 72, x2)

inst_19:
// rs1==x7, rd==x13, rs1_h1_val == -16385, 
// opcode: srai16.u ; op1:x7; dest:x13; op1val:0xbfffaaaa;  immval:0xf
TEST_IMM_OP( srai16.u, x13, x7, 0x00000000, 0xbfffaaaa, 0xf, x4, 76, x2)

inst_20:
// rs1==x20, rd==x15, rs1_h1_val == -8193, rs1_h0_val == 1024
// opcode: srai16.u ; op1:x20; dest:x15; op1val:0xdfff0400;  immval:0xa
TEST_IMM_OP( srai16.u, x15, x20, 0x00000000, 0xdfff0400, 0xa, x4, 80, x2)

inst_21:
// rs1==x17, rd==x8, rs1_h1_val == -4097, 
// opcode: srai16.u ; op1:x17; dest:x8; op1val:0xefffc000;  immval:0x5
TEST_IMM_OP( srai16.u, x8, x17, 0x00000000, 0xefffc000, 0x5, x4, 84, x2)

inst_22:
// rs1==x3, rd==x24, rs1_h1_val == -2049, rs1_h0_val == -65
// opcode: srai16.u ; op1:x3; dest:x24; op1val:0xf7ffffbf;  immval:0x1
TEST_IMM_OP( srai16.u, x24, x3, 0x00000000, 0xf7ffffbf, 0x1, x4, 88, x2)

inst_23:
// rs1==x24, rd==x19, rs1_h1_val == -1025, 
// opcode: srai16.u ; op1:x24; dest:x19; op1val:0xfbff8000;  immval:0xb
TEST_IMM_OP( srai16.u, x19, x24, 0x00000000, 0xfbff8000, 0xb, x4, 92, x3)

inst_24:
// rs1==x23, rd==x26, rs1_h1_val == -129, rs1_h0_val == -4097
// opcode: srai16.u ; op1:x23; dest:x26; op1val:0xff7fefff;  immval:0x0
TEST_IMM_OP( srai16.u, x26, x23, 0x00000000, 0xff7fefff, 0x0, x4, 96, x3)

inst_25:
// rs1==x22, rd==x2, rs1_h1_val == -65, rs1_h0_val == 256
// opcode: srai16.u ; op1:x22; dest:x2; op1val:0xffbf0100;  immval:0xc
TEST_IMM_OP( srai16.u, x2, x22, 0x00000000, 0xffbf0100, 0xc, x4, 100, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:
// rs1==x2, rd==x30, rs1_h1_val == -33, rs1_h0_val == 8192
// opcode: srai16.u ; op1:x2; dest:x30; op1val:0xffdf2000;  immval:0xa
TEST_IMM_OP( srai16.u, x30, x2, 0x00000000, 0xffdf2000, 0xa, x1, 0, x3)

inst_27:
// rs1==x31, rd==x4, rs1_h1_val == -17, 
// opcode: srai16.u ; op1:x31; dest:x4; op1val:0xffeffff8;  immval:0x3
TEST_IMM_OP( srai16.u, x4, x31, 0x00000000, 0xffeffff8, 0x3, x1, 4, x3)

inst_28:
// rs1==x4, rd==x22, rs1_h1_val == -9, 
// opcode: srai16.u ; op1:x4; dest:x22; op1val:0xfff7fdff;  immval:0x1
TEST_IMM_OP( srai16.u, x22, x4, 0x00000000, 0xfff7fdff, 0x1, x1, 8, x3)

inst_29:
// rs1==x6, rd==x5, rs1_h1_val == -3, rs1_h0_val == 16384
// opcode: srai16.u ; op1:x6; dest:x5; op1val:0xfffd4000;  immval:0xf
TEST_IMM_OP( srai16.u, x5, x6, 0x00000000, 0xfffd4000, 0xf, x1, 12, x3)

inst_30:
// rs1==x30, rd==x27, rs1_h1_val == 16384, rs1_h0_val == 16
// opcode: srai16.u ; op1:x30; dest:x27; op1val:0x40000010;  immval:0x0
TEST_IMM_OP( srai16.u, x27, x30, 0x00000000, 0x40000010, 0x0, x1, 16, x3)

inst_31:
// rs1==x16, rd==x9, rs1_h0_val == -33, 
// opcode: srai16.u ; op1:x16; dest:x9; op1val:0xfffaffdf;  immval:0xc
TEST_IMM_OP( srai16.u, x9, x16, 0x00000000, 0xfffaffdf, 0xc, x1, 20, x3)

inst_32:
// rs1_h0_val == -17, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x09ffef;  immval:0x3
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x09ffef, 0x3, x1, 24, x3)

inst_33:
// rs1_h0_val == 2048, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xffdf0800;  immval:0x5
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xffdf0800, 0x5, x1, 28, x3)

inst_34:
// rs1_h0_val == 512, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffb0200;  immval:0x9
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xfffb0200, 0x9, x1, 32, x3)

inst_35:
// rs1_h0_val == 128, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffb0080;  immval:0x4
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xfffb0080, 0x4, x1, 36, x3)

inst_36:
// rs1_h0_val == 32, rs1_h1_val == 4096
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x10000020;  immval:0xb
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x10000020, 0xb, x1, 40, x3)

inst_37:
// rs1_h0_val == 8, rs1_h1_val == 1024
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x4000008;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x4000008, 0x1, x1, 44, x3)

inst_38:
// rs1_h0_val == 4, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xdfff0004;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xdfff0004, 0xa, x1, 48, x3)

inst_39:
// rs1_h0_val == 2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x030002;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x030002, 0x1, x1, 52, x3)

inst_40:
// rs1_h0_val == 1, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xff7f0001;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xff7f0001, 0x6, x1, 56, x3)

inst_41:
// rs1_h0_val == 0, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x090000;  immval:0x5
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x090000, 0x5, x1, 60, x3)

inst_42:
// rs1_h1_val == 8192, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x2000aaaa;  immval:0x8
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x2000aaaa, 0x8, x1, 64, x3)

inst_43:
// rs1_h1_val == 2048, rs1_h0_val == -8193
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x800dfff;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x800dfff, 0xa, x1, 68, x3)

inst_44:
// rs1_h1_val == 256, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x1000001;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x1000001, 0xa, x1, 72, x3)

inst_45:
// rs1_h1_val == 128, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x80aaaa;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x80aaaa, 0xa, x1, 76, x3)

inst_46:
// rs1_h1_val == 32, rs1_h0_val == 32767
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x207fff;  immval:0xf
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x207fff, 0xf, x1, 80, x3)

inst_47:
// rs1_h1_val == 8, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x080004;  immval:0x7
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x080004, 0x7, x1, 84, x3)

inst_48:
// rs1_h1_val == 4, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x040004;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x040004, 0x0, x1, 88, x3)

inst_49:
// rs1_h1_val == 2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x02efff;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x02efff, 0x1, x1, 92, x3)

inst_50:
// rs1_h1_val == 0, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x000800;  immval:0xb
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x000800, 0xb, x1, 96, x3)

inst_51:
// rs1_h0_val == 21845, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x20005555;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x20005555, 0xa, x1, 100, x3)

inst_52:
// rs1_h0_val == -16385, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x8000bfff;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x8000bfff, 0x0, x1, 104, x3)

inst_53:
// rs1_h0_val == -2049, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xbffff7ff;  immval:0xc
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xbffff7ff, 0xc, x1, 108, x3)

inst_54:
// rs1_h0_val == -1025, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x03fbff;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x03fbff, 0xa, x1, 112, x3)

inst_55:
// rs1_h0_val == -257, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x800feff;  immval:0x7
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0x800feff, 0x7, x1, 116, x3)

inst_56:
// rs1_h1_val == -21846, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xaaaafff8;  immval:0x9
TEST_IMM_OP( srai16.u, x31, x30, 0x00000000, 0xaaaafff8, 0x9, x1, 120, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 31*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
