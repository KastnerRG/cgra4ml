
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmtt instruction of the RISC-V RV32PZicsr extension for the kdmtt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmtt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x21, rd==x17, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -5, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2049
// opcode: kdmtt ; op1:x2; op2:x21; dest:x17; op1val:0xfffb8000;  op2val:0x03f7ff
TEST_PKRR_OP(kdmtt, x17, x2, x21, 0x00000000, 0xfffb8000, 0x03f7ff, x2, x8, 0, x27)

inst_1:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x12, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 8192, rs1_h1_val == 64, rs2_h0_val == -129
// opcode: kdmtt ; op1:x6; op2:x6; dest:x12; op1val:0x402000;  op2val:0x40ff7f
TEST_PKRR_OP(kdmtt, x12, x6, x6, 0x00000000, 0x402000, 0x40ff7f, x6, x8, 8, x27)

inst_2:
// rs1 == rd != rs2, rs1==x4, rs2==x29, rd==x4, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -32768, rs2_h1_val == -32768
// opcode: kdmtt ; op1:x4; op2:x29; dest:x4; op1val:0xfffb3fff;  op2val:0x80008000
TEST_PKRR_OP(kdmtt, x4, x4, x29, 0x00000000, 0xfffb3fff, 0x80008000, x4, x8, 16, x27)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 128, rs2_h0_val == 8, rs2_h1_val == -4097, rs1_h0_val == -16385
// opcode: kdmtt ; op1:x18; op2:x18; dest:x18; op1val:0x80bfff;  op2val:0xefff0008
TEST_PKRR_OP(kdmtt, x18, x18, x18, 0x00000000, 0x80bfff, 0xefff0008, x18, x8, 24, x27)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x20, rd==x20, rs1_h0_val == rs2_h0_val, rs2_h1_val == -65, rs1_h0_val == 128, rs2_h0_val == 128, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmtt ; op1:x1; op2:x20; dest:x20; op1val:0xc0000080;  op2val:0xffbf0080
TEST_PKRR_OP(kdmtt, x20, x1, x20, 0x00000000, 0xc0000080, 0xffbf0080, x1, x8, 32, x27)

inst_5:
// rs1==x23, rs2==x10, rd==x24, rs2_h1_val == -21846, rs1_h0_val == 8
// opcode: kdmtt ; op1:x23; op2:x10; dest:x24; op1val:0xc0000008;  op2val:0xaaaa0008
TEST_PKRR_OP(kdmtt, x24, x23, x10, 0x00000000, 0xc0000008, 0xaaaa0008, x23, x8, 40, x27)

inst_6:
// rs1==x5, rs2==x22, rd==x13, rs2_h1_val == 21845, rs1_h0_val == 0, rs2_h0_val == 32767
// opcode: kdmtt ; op1:x5; op2:x22; dest:x13; op1val:0xfff80000;  op2val:0x55557fff
TEST_PKRR_OP(kdmtt, x13, x5, x22, 0x00000000, 0xfff80000, 0x55557fff, x5, x8, 48, x27)

inst_7:
// rs1==x11, rs2==x17, rd==x14, rs2_h1_val == 32767, rs1_h1_val == -16385, rs2_h0_val == -513, rs1_h0_val == -129
// opcode: kdmtt ; op1:x11; op2:x17; dest:x14; op1val:0xbfffff7f;  op2val:0x7ffffdff
TEST_PKRR_OP(kdmtt, x14, x11, x17, 0x00000000, 0xbfffff7f, 0x7ffffdff, x11, x8, 56, x27)

inst_8:
// rs1==x13, rs2==x1, rd==x16, rs2_h1_val == -16385, rs1_h1_val == 16384, rs1_h0_val == 32767, rs2_h0_val == 32
// opcode: kdmtt ; op1:x13; op2:x1; dest:x16; op1val:0x40007fff;  op2val:0xbfff0020
TEST_PKRR_OP(kdmtt, x16, x13, x1, 0x00000000, 0x40007fff, 0xbfff0020, x13, x8, 64, x27)

inst_9:
// rs1==x22, rs2==x9, rd==x11, rs2_h1_val == -8193, rs2_h0_val == -5
// opcode: kdmtt ; op1:x22; op2:x9; dest:x11; op1val:0xfffb0080;  op2val:0xdffffffb
TEST_PKRR_OP(kdmtt, x11, x22, x9, 0x00000000, 0xfffb0080, 0xdffffffb, x22, x8, 72, x27)

inst_10:
// rs1==x15, rs2==x24, rd==x23, rs2_h1_val == -2049, rs1_h1_val == -1, rs1_h0_val == -21846, rs2_h0_val == -33
// opcode: kdmtt ; op1:x15; op2:x24; dest:x23; op1val:0xffffaaaa;  op2val:0xf7ffffdf
TEST_PKRR_OP(kdmtt, x23, x15, x24, 0x00000000, 0xffffaaaa, 0xf7ffffdf, x15, x8, 80, x27)

inst_11:
// rs1==x19, rs2==x5, rd==x1, rs2_h1_val == -1025, rs1_h0_val == -8193, rs1_h1_val == 2048, rs2_h0_val == -8193
// opcode: kdmtt ; op1:x19; op2:x5; dest:x1; op1val:0x800dfff;  op2val:0xfbffdfff
TEST_PKRR_OP(kdmtt, x1, x19, x5, 0x00000000, 0x800dfff, 0xfbffdfff, x19, x8, 88, x27)

inst_12:
// rs1==x29, rs2==x25, rd==x2, rs2_h1_val == -513, 
// opcode: kdmtt ; op1:x29; op2:x25; dest:x2; op1val:0x8000080;  op2val:0xfdff3fff
TEST_PKRR_OP(kdmtt, x2, x29, x25, 0x00000000, 0x8000080, 0xfdff3fff, x29, x8, 96, x27)

inst_13:
// rs1==x16, rs2==x3, rd==x0, rs2_h1_val == -257, rs1_h0_val == 2, rs1_h1_val == -9, rs2_h0_val == 16
// opcode: kdmtt ; op1:x16; op2:x3; dest:x0; op1val:0xfff70002;  op2val:0xfeff0010
TEST_PKRR_OP(kdmtt, x0, x16, x3, 0x00000000, 0xfff70002, 0xfeff0010, x16, x8, 104, x27)

inst_14:
// rs1==x26, rs2==x15, rd==x7, rs2_h1_val == -129, rs2_h0_val == 0, rs1_h1_val == -32768
// opcode: kdmtt ; op1:x26; op2:x15; dest:x7; op1val:0x80007fff;  op2val:0xff7f0000
TEST_PKRR_OP(kdmtt, x7, x26, x15, 0x00000000, 0x80007fff, 0xff7f0000, x26, x8, 112, x27)

inst_15:
// rs1==x31, rs2==x0, rd==x25, rs2_h1_val == -33, rs1_h0_val == -1, rs1_h1_val == -129
// opcode: kdmtt ; op1:x31; op2:x0; dest:x25; op1val:0xff7fffff;  op2val:0xffdf0020
TEST_PKRR_OP(kdmtt, x25, x31, x0, 0x00000000, 0xff7fffff, 0xffdf0020, x31, x8, 120, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x14, rs2==x7, rd==x5, rs2_h1_val == -17, rs1_h1_val == -1025
// opcode: kdmtt ; op1:x14; op2:x7; dest:x5; op1val:0xfbff7fff;  op2val:0xffeffffb
TEST_PKRR_OP(kdmtt, x5, x14, x7, 0x00000000, 0xfbff7fff, 0xffeffffb, x14, x1, 0, x13)

inst_17:
// rs1==x12, rs2==x4, rd==x8, rs2_h1_val == -9, rs1_h1_val == 1024, rs1_h0_val == 1024
// opcode: kdmtt ; op1:x12; op2:x4; dest:x8; op1val:0x4000400;  op2val:0xfff7ffdf
TEST_PKRR_OP(kdmtt, x8, x12, x4, 0x00000000, 0x4000400, 0xfff7ffdf, x12, x1, 8, x13)

inst_18:
// rs1==x27, rs2==x2, rd==x10, rs2_h1_val == -5, rs1_h1_val == -3
// opcode: kdmtt ; op1:x27; op2:x2; dest:x10; op1val:0xfffdaaaa;  op2val:0xfffb0009
TEST_PKRR_OP(kdmtt, x10, x27, x2, 0x00000000, 0xfffdaaaa, 0xfffb0009, x27, x1, 16, x13)

inst_19:
// rs1==x30, rs2==x16, rd==x3, rs2_h1_val == -3, rs1_h0_val == 1, rs2_h0_val == -2
// opcode: kdmtt ; op1:x30; op2:x16; dest:x3; op1val:0xfffc0001;  op2val:0xfffdfffe
TEST_PKRR_OP(kdmtt, x3, x30, x16, 0x00000000, 0xfffc0001, 0xfffdfffe, x30, x1, 24, x13)

inst_20:
// rs1==x25, rs2==x8, rd==x31, rs2_h1_val == -2, rs1_h1_val == 4096, rs1_h0_val == -33
// opcode: kdmtt ; op1:x25; op2:x8; dest:x31; op1val:0x1000ffdf;  op2val:0xfffe0008
TEST_PKRR_OP(kdmtt, x31, x25, x8, 0x00000000, 0x1000ffdf, 0xfffe0008, x25, x1, 32, x13)

inst_21:
// rs1==x28, rs2==x30, rd==x21, rs2_h1_val == 16384, 
// opcode: kdmtt ; op1:x28; op2:x30; dest:x21; op1val:0xfffb0080;  op2val:0x40003fff
TEST_PKRR_OP(kdmtt, x21, x28, x30, 0x00000000, 0xfffb0080, 0x40003fff, x28, x1, 40, x13)

inst_22:
// rs1==x9, rs2==x23, rd==x26, rs2_h1_val == 8192, 
// opcode: kdmtt ; op1:x9; op2:x23; dest:x26; op1val:0xffffc000;  op2val:0x2000fffc
TEST_PKRR_OP(kdmtt, x26, x9, x23, 0x00000000, 0xffffc000, 0x2000fffc, x9, x1, 48, x13)

inst_23:
// rs1==x0, rs2==x27, rd==x30, rs2_h1_val == 4096, 
// opcode: kdmtt ; op1:x0; op2:x27; dest:x30; op1val:0xfbffaaaa;  op2val:0x10000008
TEST_PKRR_OP(kdmtt, x30, x0, x27, 0x00000000, 0xfbffaaaa, 0x10000008, x0, x1, 56, x13)

inst_24:
// rs1==x10, rs2==x11, rd==x22, rs2_h1_val == 2048, rs1_h1_val == 4
// opcode: kdmtt ; op1:x10; op2:x11; dest:x22; op1val:0x040002;  op2val:0x8000009
TEST_PKRR_OP(kdmtt, x22, x10, x11, 0x00000000, 0x040002, 0x8000009, x10, x1, 64, x13)

inst_25:
// rs1==x20, rs2==x31, rd==x19, rs2_h1_val == 1024, rs2_h0_val == -1025, rs1_h0_val == 21845, rs1_h1_val == -257
// opcode: kdmtt ; op1:x20; op2:x31; dest:x19; op1val:0xfeff5555;  op2val:0x400fbff
TEST_PKRR_OP(kdmtt, x19, x20, x31, 0x00000000, 0xfeff5555, 0x400fbff, x20, x1, 72, x13)

inst_26:
// rs1==x3, rs2==x14, rd==x6, rs2_h1_val == 512, rs1_h1_val == 32767
// opcode: kdmtt ; op1:x3; op2:x14; dest:x6; op1val:0x7ffffff8;  op2val:0x2000006
TEST_PKRR_OP(kdmtt, x6, x3, x14, 0x00000000, 0x7ffffff8, 0x2000006, x3, x1, 80, x13)

inst_27:
// rs1==x24, rs2==x26, rd==x27, rs2_h1_val == 256, 
// opcode: kdmtt ; op1:x24; op2:x26; dest:x27; op1val:0xfffd0005;  op2val:0x100fffe
TEST_PKRR_OP(kdmtt, x27, x24, x26, 0x00000000, 0xfffd0005, 0x100fffe, x24, x1, 88, x13)

inst_28:
// rs1==x17, rs2==x19, rd==x15, rs2_h1_val == 128, rs1_h0_val == 256
// opcode: kdmtt ; op1:x17; op2:x19; dest:x15; op1val:0x10000100;  op2val:0x800020
TEST_PKRR_OP(kdmtt, x15, x17, x19, 0x00000000, 0x10000100, 0x800020, x17, x1, 96, x13)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29:
// rs1==x21, rs2==x12, rd==x29, rs2_h1_val == 32, rs2_h0_val == 256, rs1_h0_val == 64
// opcode: kdmtt ; op1:x21; op2:x12; dest:x29; op1val:0x7fff0040;  op2val:0x200100
TEST_PKRR_OP(kdmtt, x29, x21, x12, 0x00000000, 0x7fff0040, 0x200100, x21, x1, 0, x2)

inst_30:
// rs1==x8, rs2==x28, rd==x9, rs2_h1_val == 16, rs2_h0_val == 1, rs1_h1_val == -17
// opcode: kdmtt ; op1:x8; op2:x28; dest:x9; op1val:0xffef0080;  op2val:0x100001
TEST_PKRR_OP(kdmtt, x9, x8, x28, 0x00000000, 0xffef0080, 0x100001, x8, x1, 8, x2)

inst_31:
// rs1==x7, rs2==x13, rd==x28, rs1_h0_val == -1025, 
// opcode: kdmtt ; op1:x7; op2:x13; dest:x28; op1val:0xfffcfbff;  op2val:0xbfffffdf
TEST_PKRR_OP(kdmtt, x28, x7, x13, 0x00000000, 0xfffcfbff, 0xbfffffdf, x7, x1, 16, x2)

inst_32:
// rs1_h0_val == -513, rs1_h1_val == -65
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdff;  op2val:0x40000006
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xffbffdff, 0x40000006, x30, x1, 24, x2)

inst_33:
// rs1_h0_val == -257, rs2_h0_val == 21845
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0xfffc5555
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfffffeff, 0xfffc5555, x30, x1, 32, x2)

inst_34:
// rs1_h0_val == -65, rs2_h0_val == -1
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf;  op2val:0xfffaffff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x03ffbf, 0xfffaffff, x30, x1, 40, x2)

inst_35:
// rs1_h0_val == -17, rs1_h1_val == 0
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x00ffef;  op2val:0xfffa5555
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x00ffef, 0xfffa5555, x30, x1, 48, x2)

inst_36:
// rs1_h0_val == -9, rs1_h1_val == -33, rs2_h0_val == -257
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7;  op2val:0x200feff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xffdffff7, 0x200feff, x30, x1, 56, x2)

inst_37:
// rs1_h0_val == -5, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffb;  op2val:0xfff8fdff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xc000fffb, 0xfff8fdff, x30, x1, 64, x2)

inst_38:
// rs1_h0_val == -3, rs2_h0_val == -9
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x00fffd;  op2val:0xffeffff7
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x00fffd, 0xffeffff7, x30, x1, 72, x2)

inst_39:
// rs1_h0_val == -2, rs1_h1_val == -2
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffe;  op2val:0xfffc0007
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfffefffe, 0xfffc0007, x30, x1, 80, x2)

inst_40:
// rs1_h0_val == 16384, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x80004000;  op2val:0x1003fff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x80004000, 0x1003fff, x30, x1, 88, x2)

inst_41:
// rs1_h0_val == 4096, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x801000;  op2val:0xffef0008
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x801000, 0xffef0008, x30, x1, 96, x2)

inst_42:
// rs1_h0_val == 2048, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800;  op2val:0xffbffff6
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfff80800, 0xffbffff6, x30, x1, 104, x2)

inst_43:
// rs1_h0_val == 512, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0200;  op2val:0xfffd0006
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfffc0200, 0xfffd0006, x30, x1, 112, x2)

inst_44:
// rs1_h0_val == 32, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffef0020;  op2val:0x200feff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xffef0020, 0x200feff, x30, x1, 120, x2)

inst_45:
// rs1_h0_val == 16, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0xffbfdfff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x000010, 0xffbfdfff, x30, x1, 128, x2)

inst_46:
// rs1_h0_val == 4, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0004;  op2val:0x030009
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xffbf0004, 0x030009, x30, x1, 136, x2)

inst_47:
// rs2_h1_val == 8, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x060003;  op2val:0x08fffc
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x060003, 0x08fffc, x30, x1, 144, x2)

inst_48:
// rs2_h1_val == 4, rs2_h0_val == -16385, rs1_h1_val == 1
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x010006;  op2val:0x04bfff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x010006, 0x04bfff, x30, x1, 152, x2)

inst_49:
// rs2_h1_val == 2, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x000000;  op2val:0x02fffa
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x000000, 0x02fffa, x30, x1, 160, x2)

inst_50:
// rs2_h1_val == 1, rs1_h1_val == -21846, rs1_h0_val == -4097
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaefff;  op2val:0x01fffe
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xaaaaefff, 0x01fffe, x30, x1, 168, x2)

inst_51:
// rs2_h0_val == -3, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x045555;  op2val:0xfffafffd
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x045555, 0xfffafffd, x30, x1, 176, x2)

inst_52:
// rs2_h0_val == 16384, rs1_h1_val == -4097
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef;  op2val:0xfffa4000
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xefffffef, 0xfffa4000, x30, x1, 184, x2)

inst_53:
// rs2_h0_val == 8192, rs2_h1_val == -1
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0002;  op2val:0xffff2000
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x3fff0002, 0xffff2000, x30, x1, 192, x2)

inst_54:
// rs2_h0_val == 4096, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x04fff6;  op2val:0x80001000
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x04fff6, 0x80001000, x30, x1, 200, x2)

inst_55:
// rs2_h0_val == 2048, rs1_h1_val == 32
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x20fff8;  op2val:0xffdf0800
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x20fff8, 0xffdf0800, x30, x1, 208, x2)

inst_56:
// rs2_h0_val == 1024, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x06fff9;  op2val:0xfffa0400
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x06fff9, 0xfffa0400, x30, x1, 216, x2)

inst_57:
// rs2_h0_val == 512, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0003;  op2val:0xdfff0200
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xaaaa0003, 0xdfff0200, x30, x1, 224, x2)

inst_58:
// rs2_h0_val == 64, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f5555;  op2val:0xfff70040
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xff7f5555, 0xfff70040, x30, x1, 232, x2)

inst_59:
// rs2_h0_val == 4, rs1_h1_val == 16
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x100200;  op2val:0xffbf0004
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x100200, 0xffbf0004, x30, x1, 240, x2)

inst_60:
// rs2_h0_val == 2, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff60000;  op2val:0xfeff0002
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfff60000, 0xfeff0002, x30, x1, 248, x2)

inst_61:
// rs1_h1_val == 8192, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x20000040;  op2val:0x55555555
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x20000040, 0x55555555, x30, x1, 256, x2)

inst_62:
// rs1_h1_val == 512, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff;  op2val:0xc000fffc
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x200fdff, 0xc000fffc, x30, x1, 264, x2)

inst_63:
// rs1_h1_val == 256, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x1000040;  op2val:0x7ffffdff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x1000040, 0x7ffffdff, x30, x1, 272, x2)

inst_64:
// rs2_h1_val == 0, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x00fff6;  op2val:0x000200
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x00fff6, 0x000200, x30, x1, 280, x2)

inst_65:
// rs2_h0_val == -21846, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x1000010;  op2val:0x40aaaa
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x1000010, 0x40aaaa, x30, x1, 288, x2)

inst_66:
// rs1_h1_val == 8, rs2_h0_val == -17
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x080002;  op2val:0xfffdffef
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x080002, 0xfffdffef, x30, x1, 296, x2)

inst_67:
// rs1_h1_val == 2, rs2_h0_val == -4097
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x020009;  op2val:0xfffaefff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x020009, 0xfffaefff, x30, x1, 304, x2)

inst_68:
// rs1_h1_val == 21845, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd;  op2val:0x000005
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x5555fffd, 0x000005, x30, x1, 312, x2)

inst_69:
// rs1_h1_val == -8193, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffc;  op2val:0x404000
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xdffffffc, 0x404000, x30, x1, 320, x2)

inst_70:
// rs1_h1_val == -2049, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020;  op2val:0x040100
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xf7ff0020, 0x040100, x30, x1, 328, x2)

inst_71:
// rs2_h0_val == -65, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x207fff;  op2val:0xefffffbf
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x207fff, 0xefffffbf, x30, x1, 336, x2)

inst_72:
// rs1_h1_val == -513, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefff;  op2val:0x800dfff
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfdffefff, 0x800dfff, x30, x1, 344, x2)

inst_73:
// rs1_h0_val == -2049, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff;  op2val:0x40fffd
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xc000f7ff, 0x40fffd, x30, x1, 352, x2)

inst_74:
// rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 8192, rs1_h1_val == 64, rs2_h0_val == -129
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x402000;  op2val:0x40ff7f
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x402000, 0x40ff7f, x30, x1, 360, x2)

inst_75:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 128, rs2_h0_val == 8, rs2_h1_val == -4097, rs1_h0_val == -16385
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0x80bfff;  op2val:0xefff0008
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0x80bfff, 0xefff0008, x30, x1, 368, x2)

inst_76:
// rs2_h1_val == -257, rs1_h0_val == 2, rs1_h1_val == -9, rs2_h0_val == 16
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002;  op2val:0xfeff0010
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfff70002, 0xfeff0010, x30, x1, 376, x2)

inst_77:
// rs2_h1_val == -33, rs1_h0_val == -1, rs1_h1_val == -129
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0xffdf0020
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xff7fffff, 0xffdf0020, x30, x1, 384, x2)

inst_78:
// rs2_h1_val == 4096, 
// opcode: kdmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaa;  op2val:0x10000008
TEST_PKRR_OP(kdmtt, x31, x30, x29, 0x00000000, 0xfbffaaaa, 0x10000008, x30, x1, 392, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
