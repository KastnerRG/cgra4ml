
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cmpeq16 instruction of the RISC-V RV32PZicsr extension for the cmpeq16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",cmpeq16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x4, rd==x24, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -3, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: cmpeq16 ; op1:x30; op2:x4; dest:x24; op1val:0xfffd8000;  op2val:0xfffafffa
TEST_RR_OP(cmpeq16, x24, x30, x4, 0x00000000, 0xfffd8000, 0xfffafffa, x5, 0, x10)

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x11, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 1, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: cmpeq16 ; op1:x3; op2:x3; dest:x11; op1val:0x098000;  op2val:0x090001
TEST_RR_OP(cmpeq16, x11, x3, x3, 0x00000000, 0x098000, 0x090001, x5, 4, x10)

inst_2:
// rs1 == rd != rs2, rs1==x1, rs2==x28, rd==x1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -16385, rs2_h1_val == 32, rs2_h0_val == 64, rs1_h1_val == -32768
// opcode: cmpeq16 ; op1:x1; op2:x28; dest:x1; op1val:0x8000bfff;  op2val:0x200040
TEST_RR_OP(cmpeq16, x1, x1, x28, 0x00000000, 0x8000bfff, 0x200040, x5, 8, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 512, rs2_h1_val == -9, rs1_h0_val == -65
// opcode: cmpeq16 ; op1:x7; op2:x7; dest:x7; op1val:0x3fffffbf;  op2val:0xfff70200
TEST_RR_OP(cmpeq16, x7, x7, x7, 0x00000000, 0x3fffffbf, 0xfff70200, x5, 12, x10)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x6, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h1_val == -1, rs2_h1_val == 512
// opcode: cmpeq16 ; op1:x29; op2:x6; dest:x6; op1val:0xffffc000;  op2val:0x200c000
TEST_RR_OP(cmpeq16, x6, x29, x6, 0x00000000, 0xffffc000, 0x200c000, x5, 16, x10)

inst_5:
// rs1==x16, rs2==x13, rd==x4, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs2_h0_val == -1
// opcode: cmpeq16 ; op1:x16; op2:x13; dest:x4; op1val:0x030003;  op2val:0x400ffff
TEST_RR_OP(cmpeq16, x4, x16, x13, 0x00000000, 0x030003, 0x400ffff, x5, 20, x10)

inst_6:
// rs1==x26, rs2==x11, rd==x9, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -8193, rs2_h1_val == 8, rs1_h0_val == 16384
// opcode: cmpeq16 ; op1:x26; op2:x11; dest:x9; op1val:0xdfff4000;  op2val:0x080007
TEST_RR_OP(cmpeq16, x9, x26, x11, 0x00000000, 0xdfff4000, 0x080007, x5, 24, x10)

inst_7:
// rs1==x4, rs2==x1, rd==x15, rs2_h1_val == -21846, 
// opcode: cmpeq16 ; op1:x4; op2:x1; dest:x15; op1val:0xfffc0003;  op2val:0xaaaa0001
TEST_RR_OP(cmpeq16, x15, x4, x1, 0x00000000, 0xfffc0003, 0xaaaa0001, x5, 28, x10)

inst_8:
// rs1==x18, rs2==x8, rd==x2, rs2_h1_val == 21845, rs1_h1_val == -65, rs1_h0_val == -3, rs2_h0_val == 128
// opcode: cmpeq16 ; op1:x18; op2:x8; dest:x2; op1val:0xffbffffd;  op2val:0x55550080
TEST_RR_OP(cmpeq16, x2, x18, x8, 0x00000000, 0xffbffffd, 0x55550080, x5, 32, x10)

inst_9:
// rs1==x22, rs2==x25, rd==x19, rs2_h1_val == 32767, rs1_h0_val == -257, rs2_h0_val == 8
// opcode: cmpeq16 ; op1:x22; op2:x25; dest:x19; op1val:0xfffafeff;  op2val:0x7fff0008
TEST_RR_OP(cmpeq16, x19, x22, x25, 0x00000000, 0xfffafeff, 0x7fff0008, x5, 36, x10)

inst_10:
// rs1==x13, rs2==x15, rd==x12, rs2_h1_val == -16385, rs1_h1_val == -4097
// opcode: cmpeq16 ; op1:x13; op2:x15; dest:x12; op1val:0xeffffffc;  op2val:0xbffffffa
TEST_RR_OP(cmpeq16, x12, x13, x15, 0x00000000, 0xeffffffc, 0xbffffffa, x5, 40, x10)

inst_11:
// rs1==x11, rs2==x21, rd==x20, rs2_h1_val == -8193, rs1_h1_val == 2
// opcode: cmpeq16 ; op1:x11; op2:x21; dest:x20; op1val:0x028000;  op2val:0xdffffff8
TEST_RR_OP(cmpeq16, x20, x11, x21, 0x00000000, 0x028000, 0xdffffff8, x5, 44, x10)

inst_12:
// rs1==x23, rs2==x18, rd==x16, rs2_h1_val == -4097, rs1_h1_val == -33, rs2_h0_val == -4097
// opcode: cmpeq16 ; op1:x23; op2:x18; dest:x16; op1val:0xffdf0006;  op2val:0xefffefff
TEST_RR_OP(cmpeq16, x16, x23, x18, 0x00000000, 0xffdf0006, 0xefffefff, x5, 48, x10)

inst_13:
// rs1==x28, rs2==x19, rd==x31, rs2_h1_val == -2049, rs2_h0_val == -3, rs1_h1_val == -129
// opcode: cmpeq16 ; op1:x28; op2:x19; dest:x31; op1val:0xff7ffff8;  op2val:0xf7fffffd
TEST_RR_OP(cmpeq16, x31, x28, x19, 0x00000000, 0xff7ffff8, 0xf7fffffd, x5, 52, x10)

inst_14:
// rs1==x24, rs2==x16, rd==x3, rs2_h1_val == -1025, rs1_h0_val == -4097, rs1_h1_val == 21845
// opcode: cmpeq16 ; op1:x24; op2:x16; dest:x3; op1val:0x5555efff;  op2val:0xfbffefff
TEST_RR_OP(cmpeq16, x3, x24, x16, 0x00000000, 0x5555efff, 0xfbffefff, x5, 56, x4)

inst_15:
// rs1==x12, rs2==x22, rd==x10, rs2_h1_val == -513, rs2_h0_val == -65, rs1_h0_val == 4
// opcode: cmpeq16 ; op1:x12; op2:x22; dest:x10; op1val:0x030004;  op2val:0xfdffffbf
TEST_RR_OP(cmpeq16, x10, x12, x22, 0x00000000, 0x030004, 0xfdffffbf, x5, 60, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x31, rs2==x23, rd==x14, rs2_h1_val == -257, rs1_h0_val == 32767, rs2_h0_val == -2049
// opcode: cmpeq16 ; op1:x31; op2:x23; dest:x14; op1val:0xfffd7fff;  op2val:0xfefff7ff
TEST_RR_OP(cmpeq16, x14, x31, x23, 0x00000000, 0xfffd7fff, 0xfefff7ff, x1, 0, x4)

inst_17:
// rs1==x9, rs2==x2, rd==x25, rs2_h1_val == -129, rs2_h0_val == 0, rs1_h1_val == 512, rs1_h0_val == -2049
// opcode: cmpeq16 ; op1:x9; op2:x2; dest:x25; op1val:0x200f7ff;  op2val:0xff7f0000
TEST_RR_OP(cmpeq16, x25, x9, x2, 0x00000000, 0x200f7ff, 0xff7f0000, x1, 4, x4)

inst_18:
// rs1==x17, rs2==x20, rd==x18, rs2_h1_val == -65, rs2_h0_val == 2, rs1_h1_val == -1025
// opcode: cmpeq16 ; op1:x17; op2:x20; dest:x18; op1val:0xfbfffff9;  op2val:0xffbf0002
TEST_RR_OP(cmpeq16, x18, x17, x20, 0x00000000, 0xfbfffff9, 0xffbf0002, x1, 8, x4)

inst_19:
// rs1==x6, rs2==x14, rd==x5, rs2_h1_val == -33, 
// opcode: cmpeq16 ; op1:x6; op2:x14; dest:x5; op1val:0x020009;  op2val:0xffdfc000
TEST_RR_OP(cmpeq16, x5, x6, x14, 0x00000000, 0x020009, 0xffdfc000, x1, 12, x4)

inst_20:
// rs1==x21, rs2==x5, rd==x27, rs2_h1_val == -17, rs1_h1_val == -513
// opcode: cmpeq16 ; op1:x21; op2:x5; dest:x27; op1val:0xfdff0006;  op2val:0xffeffff8
TEST_RR_OP(cmpeq16, x27, x21, x5, 0x00000000, 0xfdff0006, 0xffeffff8, x1, 16, x4)

inst_21:
// rs1==x27, rs2==x12, rd==x17, rs2_h1_val == -5, rs2_h0_val == 8192, rs1_h0_val == 2048
// opcode: cmpeq16 ; op1:x27; op2:x12; dest:x17; op1val:0xffbf0800;  op2val:0xfffb2000
TEST_RR_OP(cmpeq16, x17, x27, x12, 0x00000000, 0xffbf0800, 0xfffb2000, x1, 20, x4)

inst_22:
// rs1==x15, rs2==x0, rd==x30, rs2_h1_val == -3, rs2_h0_val == 4096
// opcode: cmpeq16 ; op1:x15; op2:x0; dest:x30; op1val:0x5555fffa;  op2val:0xfffd1000
TEST_RR_OP(cmpeq16, x30, x15, x0, 0x00000000, 0x5555fffa, 0xfffd1000, x1, 24, x4)

inst_23:
// rs1==x20, rs2==x10, rd==x23, rs2_h1_val == -2, rs2_h0_val == -16385, rs1_h1_val == 128
// opcode: cmpeq16 ; op1:x20; op2:x10; dest:x23; op1val:0x808000;  op2val:0xfffebfff
TEST_RR_OP(cmpeq16, x23, x20, x10, 0x00000000, 0x808000, 0xfffebfff, x1, 28, x4)

inst_24:
// rs1==x10, rs2==x9, rd==x8, rs2_h1_val == -32768, 
// opcode: cmpeq16 ; op1:x10; op2:x9; dest:x8; op1val:0x8000fff9;  op2val:0x80000008
TEST_RR_OP(cmpeq16, x8, x10, x9, 0x00000000, 0x8000fff9, 0x80000008, x1, 32, x4)

inst_25:
// rs1==x14, rs2==x24, rd==x13, rs2_h1_val == 16384, rs2_h0_val == -21846, rs1_h0_val == 16
// opcode: cmpeq16 ; op1:x14; op2:x24; dest:x13; op1val:0xc0000010;  op2val:0x4000aaaa
TEST_RR_OP(cmpeq16, x13, x14, x24, 0x00000000, 0xc0000010, 0x4000aaaa, x1, 36, x4)

inst_26:
// rs1==x5, rs2==x26, rd==x29, rs2_h1_val == 8192, rs1_h1_val == 32, rs1_h0_val == 1024
// opcode: cmpeq16 ; op1:x5; op2:x26; dest:x29; op1val:0x200400;  op2val:0x20000008
TEST_RR_OP(cmpeq16, x29, x5, x26, 0x00000000, 0x200400, 0x20000008, x1, 40, x4)

inst_27:
// rs1==x19, rs2==x29, rd==x0, rs2_h1_val == 4096, rs1_h1_val == 1
// opcode: cmpeq16 ; op1:x19; op2:x29; dest:x0; op1val:0x01bfff;  op2val:0x1000bfff
TEST_RR_OP(cmpeq16, x0, x19, x29, 0x00000000, 0x01bfff, 0x1000bfff, x1, 44, x4)

inst_28:
// rs1==x25, rs2==x30, rd==x22, rs2_h1_val == 2048, rs1_h0_val == -21846, rs2_h0_val == -33
// opcode: cmpeq16 ; op1:x25; op2:x30; dest:x22; op1val:0x07aaaa;  op2val:0x800ffdf
TEST_RR_OP(cmpeq16, x22, x25, x30, 0x00000000, 0x07aaaa, 0x800ffdf, x1, 48, x3)

inst_29:
// rs1==x8, rs2==x17, rd==x28, rs2_h1_val == 256, rs2_h0_val == 16
// opcode: cmpeq16 ; op1:x8; op2:x17; dest:x28; op1val:0xffffbfff;  op2val:0x1000010
TEST_RR_OP(cmpeq16, x28, x8, x17, 0x00000000, 0xffffbfff, 0x1000010, x1, 52, x3)

inst_30:
// rs1==x2, rs2==x27, rd==x26, rs2_h1_val == 128, rs1_h1_val == 64
// opcode: cmpeq16 ; op1:x2; op2:x27; dest:x26; op1val:0x40fffd;  op2val:0x80fff9
TEST_RR_OP(cmpeq16, x26, x2, x27, 0x00000000, 0x40fffd, 0x80fff9, x1, 56, x3)

inst_31:
// rs1==x0, rs2==x31, rd==x21, rs2_h1_val == 64, 
// opcode: cmpeq16 ; op1:x0; op2:x31; dest:x21; op1val:0xc0003fff;  op2val:0x401000
TEST_RR_OP(cmpeq16, x21, x0, x31, 0x00000000, 0xc0003fff, 0x401000, x1, 60, x3)

inst_32:
// rs2_h1_val == 16, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000009;  op2val:0x100080
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x2000009, 0x100080, x1, 64, x3)

inst_33:
// rs2_h1_val == 4, rs1_h0_val == 128
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90080;  op2val:0x040200
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff90080, 0x040200, x1, 68, x3)

inst_34:
// rs1_h0_val == -1025, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fbff;  op2val:0x060002
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x5555fbff, 0x060002, x1, 72, x3)

inst_35:
// rs1_h0_val == -513, rs1_h1_val == 8
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff;  op2val:0xfdff3fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x08fdff, 0xfdff3fff, x1, 76, x3)

inst_36:
// rs1_h0_val == -129, rs2_h0_val == 32
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ff7f;  op2val:0xefff0020
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x06ff7f, 0xefff0020, x1, 80, x3)

inst_37:
// rs1_h0_val == -33, rs2_h0_val == -9
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffdf;  op2val:0xfdfffff7
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xdfffffdf, 0xfdfffff7, x1, 84, x3)

inst_38:
// rs1_h0_val == -17, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffef;  op2val:0xff7ffffc
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x03ffef, 0xff7ffffc, x1, 88, x3)

inst_39:
// rs1_h0_val == -9, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff7;  op2val:0x800003
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x05fff7, 0x800003, x1, 92, x3)

inst_40:
// rs1_h0_val == -5, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb;  op2val:0xc000ffff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x5555fffb, 0xc000ffff, x1, 96, x3)

inst_41:
// rs1_h0_val == -2, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffe;  op2val:0x2000003
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x02fffe, 0x2000003, x1, 100, x3)

inst_42:
// rs1_h0_val == 8192, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000;  op2val:0xffdfbfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xdfff2000, 0xffdfbfff, x1, 104, x3)

inst_43:
// rs1_h0_val == 4096, rs2_h0_val == -513, rs1_h1_val == 256
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x1001000;  op2val:0xff7ffdff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x1001000, 0xff7ffdff, x1, 108, x3)

inst_44:
// rs1_h0_val == 512, rs2_h0_val == 4, rs1_h1_val == 8192
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200;  op2val:0xfff90004
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x20000200, 0xfff90004, x1, 112, x3)

inst_45:
// rs1_h0_val == 256, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000100;  op2val:0x7fffaaaa
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x80000100, 0x7fffaaaa, x1, 116, x3)

inst_46:
// rs1_h0_val == 64, rs1_h1_val == 1024
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000040;  op2val:0xfff80002
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x4000040, 0xfff80002, x1, 120, x3)

inst_47:
// rs1_h0_val == 32, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60020;  op2val:0xbfffffdf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff60020, 0xbfffffdf, x1, 124, x3)

inst_48:
// rs1_h0_val == 8, rs1_h1_val == 4096
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000008;  op2val:0xfff8ffbf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x10000008, 0xfff8ffbf, x1, 128, x3)

inst_49:
// rs1_h0_val == 2, rs2_h0_val == 1024, rs2_h1_val == 1
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0002;  op2val:0x010400
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfbff0002, 0x010400, x1, 132, x3)

inst_50:
// rs1_h0_val == 1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0001;  op2val:0xffbfbfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfffc0001, 0xffbfbfff, x1, 136, x3)

inst_51:
// rs1_h0_val == 0, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60000;  op2val:0xdfff0007
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff60000, 0xdfff0007, x1, 140, x3)

inst_52:
// rs1_h0_val == -1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ffff;  op2val:0x40000002
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff8ffff, 0x40000002, x1, 144, x3)

inst_53:
// rs2_h1_val == 2, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x08efff;  op2val:0x020004
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x08efff, 0x020004, x1, 148, x3)

inst_54:
// rs2_h0_val == -5, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe;  op2val:0xaaaafffb
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x07fffe, 0xaaaafffb, x1, 152, x3)

inst_55:
// rs2_h0_val == -2, rs1_h1_val == 16
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x100006;  op2val:0xfffafffe
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x100006, 0xfffafffe, x1, 156, x3)

inst_56:
// rs2_h0_val == -32768, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100;  op2val:0x408000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xdfff0100, 0x408000, x1, 160, x3)

inst_57:
// rs2_h0_val == 16384, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080;  op2val:0x014000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x200080, 0x014000, x1, 164, x3)

inst_58:
// rs2_h0_val == 2048, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60008;  op2val:0xfffe0800
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff60008, 0xfffe0800, x1, 168, x3)

inst_59:
// rs2_h0_val == 256, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000efff;  op2val:0x7fff0100
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x1000efff, 0x7fff0100, x1, 172, x3)

inst_60:
// rs1_h1_val == -21846, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0800;  op2val:0x4000f7ff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xaaaa0800, 0x4000f7ff, x1, 176, x3)

inst_61:
// rs1_h1_val == 32767, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002;  op2val:0xffdffffb
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x7fff0002, 0xffdffffb, x1, 180, x3)

inst_62:
// rs1_h1_val == -16385, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0040;  op2val:0xfff8fffe
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xbfff0040, 0xfff8fffe, x1, 184, x3)

inst_63:
// rs1_h1_val == -2049, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0007;  op2val:0x40fff6
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xf7ff0007, 0x40fff6, x1, 188, x3)

inst_64:
// rs1_h1_val == -257, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xfff9f7ff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfeffffff, 0xfff9f7ff, x1, 192, x3)

inst_65:
// rs1_h1_val == -17, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7ff;  op2val:0x8000fff7
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xffeff7ff, 0x8000fff7, x1, 196, x3)

inst_66:
// rs1_h1_val == -9, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70008;  op2val:0x8000009
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff70008, 0x8000009, x1, 200, x3)

inst_67:
// rs1_h1_val == -5, rs2_h0_val == -129
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffa;  op2val:0xefffff7f
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfffbfffa, 0xefffff7f, x1, 204, x3)

inst_68:
// rs1_h1_val == -2, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff6;  op2val:0xeffffffb
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfffefff6, 0xeffffffb, x1, 208, x3)

inst_69:
// rs2_h0_val == -257, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbff;  op2val:0xfff8feff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xc000fbff, 0xfff8feff, x1, 212, x3)

inst_70:
// rs1_h1_val == 16384, rs2_h0_val == -17
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x40002000;  op2val:0x09ffef
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x40002000, 0x09ffef, x1, 216, x3)

inst_71:
// rs1_h1_val == 2048, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffc;  op2val:0x010020
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x800fffc, 0x010020, x1, 220, x3)

inst_72:
// rs2_h1_val == 0, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70005;  op2val:0x000003
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xfff70005, 0x000003, x1, 224, x3)

inst_73:
// rs2_h1_val == -1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550005;  op2val:0xfffffff6
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x55550005, 0xfffffff6, x1, 228, x3)

inst_74:
// rs2_h0_val == 21845, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffe;  op2val:0x205555
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x80fffe, 0x205555, x1, 232, x3)

inst_75:
// rs2_h0_val == 32767, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200;  op2val:0x057fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xffbf0200, 0x057fff, x1, 236, x3)

inst_76:
// rs1_h1_val == 4, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000;  op2val:0xefffaaaa
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x041000, 0xefffaaaa, x1, 240, x3)

inst_77:
// rs2_h0_val == -8193, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffbf;  op2val:0x09dfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x400ffbf, 0x09dfff, x1, 244, x3)

inst_78:
// rs2_h0_val == -1025, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff6;  op2val:0x80fbff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x200fff6, 0x80fbff, x1, 248, x3)

inst_79:
// rs1_h0_val == 21845, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0005555;  op2val:0x7fff0008
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xc0005555, 0x7fff0008, x1, 252, x3)

inst_80:
// rs1_h0_val == -8193, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffdfff;  op2val:0xfeff0008
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0xf7ffdfff, 0xfeff0008, x1, 256, x3)

inst_81:
// rs1_h1_val == 0, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff;  op2val:0x5555fbff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x00dfff, 0x5555fbff, x1, 260, x3)

inst_82:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 512, rs2_h1_val == -9, rs1_h0_val == -65
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffbf;  op2val:0xfff70200
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x3fffffbf, 0xfff70200, x1, 264, x3)

inst_83:
// rs2_h1_val == -3, rs2_h0_val == 4096
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffa;  op2val:0xfffd1000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x5555fffa, 0xfffd1000, x1, 268, x3)

inst_84:
// rs2_h1_val == 4096, rs1_h1_val == 1
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x01bfff;  op2val:0x1000bfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x00000000, 0x01bfff, 0x1000bfff, x1, 272, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 69*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
