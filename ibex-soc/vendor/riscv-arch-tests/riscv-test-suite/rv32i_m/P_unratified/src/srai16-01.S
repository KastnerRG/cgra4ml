
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai16 instruction of the RISC-V RV32PZicsr extension for the srai16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rd, rs1==x2, rd==x1, rs1_h0_val == -32768, imm_val == 4, rs1_h1_val == 4096
// opcode: srai16 ; op1:x2; dest:x1; op1val:0x10008000;  immval:0x4
TEST_IMM_OP( srai16, x1, x2, 0x00000000, 0x10008000, 0x4, x4, 0, x13)

inst_1:
// rs1 == rd, rs1==x8, rd==x8, imm_val == 15, rs1_h1_val == -257, rs1_h0_val == 2048
// opcode: srai16 ; op1:x8; dest:x8; op1val:0xfeff0800;  immval:0xf
TEST_IMM_OP( srai16, x8, x8, 0x00000000, 0xfeff0800, 0xf, x4, 4, x13)

inst_2:
// rs1==x29, rd==x9, imm_val == 14, rs1_h1_val == -3
// opcode: srai16 ; op1:x29; dest:x9; op1val:0xfffdc000;  immval:0xe
TEST_IMM_OP( srai16, x9, x29, 0x00000000, 0xfffdc000, 0xe, x4, 8, x13)

inst_3:
// rs1==x20, rd==x23, imm_val == 13, rs1_h0_val == -257
// opcode: srai16 ; op1:x20; dest:x23; op1val:0xfff8feff;  immval:0xd
TEST_IMM_OP( srai16, x23, x20, 0x00000000, 0xfff8feff, 0xd, x4, 12, x13)

inst_4:
// rs1==x10, rd==x15, imm_val == 12, rs1_h0_val == -2049
// opcode: srai16 ; op1:x10; dest:x15; op1val:0x1000f7ff;  immval:0xc
TEST_IMM_OP( srai16, x15, x10, 0x00000000, 0x1000f7ff, 0xc, x4, 16, x13)

inst_5:
// rs1==x3, rd==x28, imm_val == 11, rs1_h1_val == 16384
// opcode: srai16 ; op1:x3; dest:x28; op1val:0x40000005;  immval:0xb
TEST_IMM_OP( srai16, x28, x3, 0x00000000, 0x40000005, 0xb, x4, 20, x13)

inst_6:
// rs1==x25, rd==x29, imm_val == 10, rs1_h1_val == 64
// opcode: srai16 ; op1:x25; dest:x29; op1val:0x408000;  immval:0xa
TEST_IMM_OP( srai16, x29, x25, 0x00000000, 0x408000, 0xa, x4, 24, x13)

inst_7:
// rs1==x30, rd==x25, imm_val == 9, rs1_h0_val == 8192, rs1_h1_val == -16385
// opcode: srai16 ; op1:x30; dest:x25; op1val:0xbfff2000;  immval:0x9
TEST_IMM_OP( srai16, x25, x30, 0x00000000, 0xbfff2000, 0x9, x4, 28, x13)

inst_8:
// rs1==x0, rd==x30, imm_val == 8, rs1_h1_val == 512, rs1_h0_val == -9
// opcode: srai16 ; op1:x0; dest:x30; op1val:0x200fff7;  immval:0x8
TEST_IMM_OP( srai16, x30, x0, 0x00000000, 0x200fff7, 0x8, x4, 32, x13)

inst_9:
// rs1==x15, rd==x5, imm_val == 7, rs1_h1_val == -5, rs1_h0_val == -1025
// opcode: srai16 ; op1:x15; dest:x5; op1val:0xfffbfbff;  immval:0x7
TEST_IMM_OP( srai16, x5, x15, 0x00000000, 0xfffbfbff, 0x7, x4, 36, x13)

inst_10:
// rs1==x18, rd==x2, imm_val == 6, rs1_h0_val == 21845, rs1_h1_val == -17
// opcode: srai16 ; op1:x18; dest:x2; op1val:0xffef5555;  immval:0x6
TEST_IMM_OP( srai16, x2, x18, 0x00000000, 0xffef5555, 0x6, x4, 40, x13)

inst_11:
// rs1==x28, rd==x24, imm_val == 5, rs1_h0_val == -1
// opcode: srai16 ; op1:x28; dest:x24; op1val:0x03ffff;  immval:0x5
TEST_IMM_OP( srai16, x24, x28, 0x00000000, 0x03ffff, 0x5, x4, 44, x13)

inst_12:
// rs1==x19, rd==x3, imm_val == 3, rs1_h1_val == 256
// opcode: srai16 ; op1:x19; dest:x3; op1val:0x100fff7;  immval:0x3
TEST_IMM_OP( srai16, x3, x19, 0x00000000, 0x100fff7, 0x3, x4, 48, x13)

inst_13:
// rs1==x22, rd==x6, imm_val == 2, rs1_h1_val == 16
// opcode: srai16 ; op1:x22; dest:x6; op1val:0x100003;  immval:0x2
TEST_IMM_OP( srai16, x6, x22, 0x00000000, 0x100003, 0x2, x4, 52, x13)

inst_14:
// rs1==x14, rd==x16, imm_val == 1, rs1_h0_val == 16384
// opcode: srai16 ; op1:x14; dest:x16; op1val:0x104000;  immval:0x1
TEST_IMM_OP( srai16, x16, x14, 0x00000000, 0x104000, 0x1, x4, 56, x13)

inst_15:
// rs1==x16, rd==x0, imm_val == 0, 
// opcode: srai16 ; op1:x16; dest:x0; op1val:0x3ffffbff;  immval:0x0
TEST_IMM_OP( srai16, x0, x16, 0x00000000, 0x3ffffbff, 0x0, x4, 60, x13)

inst_16:
// rs1==x31, rd==x14, rs1_h1_val == -21846, rs1_h0_val == -129
// opcode: srai16 ; op1:x31; dest:x14; op1val:0xaaaaff7f;  immval:0x9
TEST_IMM_OP( srai16, x14, x31, 0x00000000, 0xaaaaff7f, 0x9, x4, 64, x13)

inst_17:
// rs1==x6, rd==x20, rs1_h1_val == 21845, rs1_h0_val == -17
// opcode: srai16 ; op1:x6; dest:x20; op1val:0x5555ffef;  immval:0x5
TEST_IMM_OP( srai16, x20, x6, 0x00000000, 0x5555ffef, 0x5, x4, 68, x13)

inst_18:
// rs1==x17, rd==x12, rs1_h1_val == 32767, 
// opcode: srai16 ; op1:x17; dest:x12; op1val:0x7fff0007;  immval:0xc
TEST_IMM_OP( srai16, x12, x17, 0x00000000, 0x7fff0007, 0xc, x4, 72, x13)

inst_19:
// rs1==x7, rd==x19, rs1_h1_val == -8193, rs1_h0_val == 8
// opcode: srai16 ; op1:x7; dest:x19; op1val:0xdfff0008;  immval:0x4
TEST_IMM_OP( srai16, x19, x7, 0x00000000, 0xdfff0008, 0x4, x4, 76, x13)

inst_20:
// rs1==x21, rd==x10, rs1_h1_val == -4097, 
// opcode: srai16 ; op1:x21; dest:x10; op1val:0xefffc000;  immval:0xb
TEST_IMM_OP( srai16, x10, x21, 0x00000000, 0xefffc000, 0xb, x4, 80, x13)

inst_21:
// rs1==x23, rd==x22, rs1_h1_val == -2049, 
// opcode: srai16 ; op1:x23; dest:x22; op1val:0xf7fffff9;  immval:0xc
TEST_IMM_OP( srai16, x22, x23, 0x00000000, 0xf7fffff9, 0xc, x4, 84, x13)

inst_22:
// rs1==x11, rd==x7, rs1_h1_val == -1025, rs1_h0_val == 1024
// opcode: srai16 ; op1:x11; dest:x7; op1val:0xfbff0400;  immval:0xe
TEST_IMM_OP( srai16, x7, x11, 0x00000000, 0xfbff0400, 0xe, x4, 88, x13)

inst_23:
// rs1==x1, rd==x31, rs1_h1_val == -513, 
// opcode: srai16 ; op1:x1; dest:x31; op1val:0xfdfffff8;  immval:0x5
TEST_IMM_OP( srai16, x31, x1, 0x00000000, 0xfdfffff8, 0x5, x4, 92, x2)

inst_24:
// rs1==x13, rd==x17, rs1_h1_val == -129, 
// opcode: srai16 ; op1:x13; dest:x17; op1val:0xff7ffeff;  immval:0xb
TEST_IMM_OP( srai16, x17, x13, 0x00000000, 0xff7ffeff, 0xb, x4, 96, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_25:
// rs1==x9, rd==x27, rs1_h1_val == -65, 
// opcode: srai16 ; op1:x9; dest:x27; op1val:0xffbffffc;  immval:0x8
TEST_IMM_OP( srai16, x27, x9, 0x00000000, 0xffbffffc, 0x8, x1, 0, x2)

inst_26:
// rs1==x5, rd==x18, rs1_h1_val == -33, 
// opcode: srai16 ; op1:x5; dest:x18; op1val:0xffdf8000;  immval:0xe
TEST_IMM_OP( srai16, x18, x5, 0x00000000, 0xffdf8000, 0xe, x1, 4, x2)

inst_27:
// rs1==x26, rd==x11, rs1_h1_val == -9, 
// opcode: srai16 ; op1:x26; dest:x11; op1val:0xfff7fffa;  immval:0x7
TEST_IMM_OP( srai16, x11, x26, 0x00000000, 0xfff7fffa, 0x7, x1, 8, x2)

inst_28:
// rs1==x12, rd==x21, rs1_h1_val == -2, rs1_h0_val == -33
// opcode: srai16 ; op1:x12; dest:x21; op1val:0xfffeffdf;  immval:0xf
TEST_IMM_OP( srai16, x21, x12, 0x00000000, 0xfffeffdf, 0xf, x1, 12, x2)

inst_29:
// rs1==x4, rd==x13, rs1_h1_val == -32768, rs1_h0_val == 64
// opcode: srai16 ; op1:x4; dest:x13; op1val:0x80000040;  immval:0x5
TEST_IMM_OP( srai16, x13, x4, 0x00000000, 0x80000040, 0x5, x1, 16, x2)

inst_30:
// rs1==x27, rd==x26, rs1_h1_val == 8192, 
// opcode: srai16 ; op1:x27; dest:x26; op1val:0x20000800;  immval:0xe
TEST_IMM_OP( srai16, x26, x27, 0x00000000, 0x20000800, 0xe, x1, 20, x2)

inst_31:
// rs1==x24, rd==x4, rs1_h0_val == -65, 
// opcode: srai16 ; op1:x24; dest:x4; op1val:0xfff8ffbf;  immval:0x3
TEST_IMM_OP( srai16, x4, x24, 0x00000000, 0xfff8ffbf, 0x3, x1, 24, x2)

inst_32:
// rs1_h0_val == -5, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffdffffb;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xffdffffb, 0xe, x1, 28, x2)

inst_33:
// rs1_h0_val == -3, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff9fffd;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfff9fffd, 0xa, x1, 32, x2)

inst_34:
// rs1_h0_val == -2, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x3ffffffe;  immval:0xc
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x3ffffffe, 0xc, x1, 36, x2)

inst_35:
// rs1_h0_val == 4096, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffd1000;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfffd1000, 0xf, x1, 40, x2)

inst_36:
// rs1_h0_val == 512, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x090200;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x090200, 0xf, x1, 44, x2)

inst_37:
// rs1_h0_val == 256, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x2000100;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x2000100, 0xa, x1, 48, x2)

inst_38:
// rs1_h0_val == 128, rs1_h1_val == 128
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x800080;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x800080, 0xa, x1, 52, x2)

inst_39:
// rs1_h0_val == 32, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffd0020;  immval:0xc
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfffd0020, 0xc, x1, 56, x2)

inst_40:
// rs1_h0_val == 16, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffd0010;  immval:0x0
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfffd0010, 0x0, x1, 60, x2)

inst_41:
// rs1_h0_val == 4, rs1_h1_val == 2048
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x8000004;  immval:0x4
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x8000004, 0x4, x1, 64, x2)

inst_42:
// rs1_h0_val == 2, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x400002;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x400002, 0x6, x1, 68, x2)

inst_43:
// rs1_h0_val == 1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfbff0001;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfbff0001, 0x6, x1, 72, x2)

inst_44:
// rs1_h1_val == 1024, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x4000003;  immval:0x3
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x4000003, 0x3, x1, 76, x2)

inst_45:
// rs1_h1_val == 32, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x200400;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x200400, 0x6, x1, 80, x2)

inst_46:
// rs1_h1_val == 8, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x080010;  immval:0x9
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x080010, 0x9, x1, 84, x2)

inst_47:
// rs1_h1_val == 4, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x040200;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x040200, 0x7, x1, 88, x2)

inst_48:
// rs1_h1_val == 2, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x02fff8;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x02fff8, 0xa, x1, 92, x2)

inst_49:
// rs1_h1_val == 1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x010010;  immval:0xd
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x010010, 0xd, x1, 96, x2)

inst_50:
// rs1_h1_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x005555;  immval:0xd
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x005555, 0xd, x1, 100, x2)

inst_51:
// rs1_h1_val == -1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffff3fff;  immval:0x2
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xffff3fff, 0x2, x1, 104, x2)

inst_52:
// rs1_h0_val == -21846, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffffaaaa;  immval:0xd
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xffffaaaa, 0xd, x1, 108, x2)

inst_53:
// rs1_h0_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x2000000;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x2000000, 0xa, x1, 112, x2)

inst_54:
// rs1_h0_val == 32767, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff97fff;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfff97fff, 0x7, x1, 116, x2)

inst_55:
// rs1_h0_val == -16385, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffcbfff;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xfffcbfff, 0x7, x1, 120, x2)

inst_56:
// rs1_h0_val == -8193, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x40dfff;  immval:0xc
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x40dfff, 0xc, x1, 124, x2)

inst_57:
// rs1_h0_val == -4097, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xc000efff;  immval:0x9
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0xc000efff, 0x9, x1, 128, x2)

inst_58:
// rs1_h0_val == -513, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x40fdff;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x00000000, 0x40fdff, 0xa, x1, 132, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
