
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd810 instruction of the RISC-V RV32PZicsr extension for the sunpkd810 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd810)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1==x21, rd==x2, rs1_b0_val == -128, rs1_b2_val == -33, rs1_b3_val == -128
// opcode: sunpkd810 ; op1:x21; dest:x2; op1val:0x80df0380;
TEST_RD_OP( sunpkd810, x2, x21, 0x00000000, 0x80df0380, x8, 0, x12)

inst_1:
// rs1==x3, rd==x17, rs1_b3_val == -86, rs1_b1_val == 85, rs1_b2_val == -86, rs1_b0_val == 85
// opcode: sunpkd810 ; op1:x3; dest:x17; op1val:0xaaaa5555;
TEST_RD_OP( sunpkd810, x17, x3, 0x00000000, 0xaaaa5555, x8, 4, x12)

inst_2:
// rs1==x11, rd==x21, rs1_b3_val == 85, rs1_b1_val == -128, rs1_b2_val == 8
// opcode: sunpkd810 ; op1:x11; dest:x21; op1val:0x55088080;
TEST_RD_OP( sunpkd810, x21, x11, 0x00000000, 0x55088080, x8, 8, x12)

inst_3:
// rs1==x10, rd==x18, rs1_b3_val == 127, rs1_b1_val == -5, rs1_b0_val == 16
// opcode: sunpkd810 ; op1:x10; dest:x18; op1val:0x7ff6fb10;
TEST_RD_OP( sunpkd810, x18, x10, 0x00000000, 0x7ff6fb10, x8, 12, x12)

inst_4:
// rs1==x16, rd==x29, rs1_b3_val == -65, rs1_b1_val == 4, rs1_b2_val == -5
// opcode: sunpkd810 ; op1:x16; dest:x29; op1val:0xbffb0403;
TEST_RD_OP( sunpkd810, x29, x16, 0x00000000, 0xbffb0403, x8, 16, x12)

inst_5:
// rs1==x13, rd==x11, rs1_b3_val == -33, rs1_b0_val == -65, rs1_b2_val == -9
// opcode: sunpkd810 ; op1:x13; dest:x11; op1val:0xdff7c0bf;
TEST_RD_OP( sunpkd810, x11, x13, 0x00000000, 0xdff7c0bf, x8, 20, x12)

inst_6:
// rs1==x9, rd==x30, rs1_b3_val == -17, rs1_b1_val == 16, rs1_b2_val == -2
// opcode: sunpkd810 ; op1:x9; dest:x30; op1val:0xeffe1010;
TEST_RD_OP( sunpkd810, x30, x9, 0x00000000, 0xeffe1010, x8, 24, x12)

inst_7:
// rs1==x24, rd==x9, rs1_b3_val == -9, rs1_b1_val == 64, rs1_b0_val == 2
// opcode: sunpkd810 ; op1:x24; dest:x9; op1val:0xf7f64002;
TEST_RD_OP( sunpkd810, x9, x24, 0x00000000, 0xf7f64002, x8, 28, x12)

inst_8:
// rs1==x4, rd==x5, rs1_b3_val == -5, rs1_b0_val == -9, rs1_b1_val == 8
// opcode: sunpkd810 ; op1:x4; dest:x5; op1val:0xfbfb08f7;
TEST_RD_OP( sunpkd810, x5, x4, 0x00000000, 0xfbfb08f7, x8, 32, x12)

inst_9:
// rs1==x15, rd==x25, rs1_b3_val == -3, rs1_b1_val == -65
// opcode: sunpkd810 ; op1:x15; dest:x25; op1val:0xfdfebfbf;
TEST_RD_OP( sunpkd810, x25, x15, 0x00000000, 0xfdfebfbf, x8, 36, x12)

inst_10:
// rs1==x25, rd==x7, rs1_b3_val == -2, rs1_b2_val == 32, rs1_b1_val == 127, rs1_b0_val == -3
// opcode: sunpkd810 ; op1:x25; dest:x7; op1val:0xfe207ffd;
TEST_RD_OP( sunpkd810, x7, x25, 0x00000000, 0xfe207ffd, x8, 40, x12)

inst_11:
// rs1==x29, rd==x20, rs1_b3_val == 64, 
// opcode: sunpkd810 ; op1:x29; dest:x20; op1val:0x400855fa;
TEST_RD_OP( sunpkd810, x20, x29, 0x00000000, 0x400855fa, x8, 44, x12)

inst_12:
// rs1==x6, rd==x23, rs1_b3_val == 32, rs1_b2_val == -65
// opcode: sunpkd810 ; op1:x6; dest:x23; op1val:0x20bfbffc;
TEST_RD_OP( sunpkd810, x23, x6, 0x00000000, 0x20bfbffc, x8, 48, x12)

inst_13:
// rs1==x0, rd==x14, rs1_b3_val == 16, rs1_b1_val == -33
// opcode: sunpkd810 ; op1:x0; dest:x14; op1val:0x10aadff6;
TEST_RD_OP( sunpkd810, x14, x0, 0x00000000, 0x10aadff6, x8, 52, x12)

inst_14:
// rs1==x27, rd==x16, rs1_b3_val == 8, rs1_b2_val == 2
// opcode: sunpkd810 ; op1:x27; dest:x16; op1val:0x80280fc;
TEST_RD_OP( sunpkd810, x16, x27, 0x00000000, 0x80280fc, x8, 56, x12)

inst_15:
// rs1==x20, rd==x28, rs1_b3_val == 4, rs1_b2_val == 64, rs1_b0_val == -1
// opcode: sunpkd810 ; op1:x20; dest:x28; op1val:0x44040ff;
TEST_RD_OP( sunpkd810, x28, x20, 0x00000000, 0x44040ff, x8, 60, x12)

inst_16:
// rs1==x28, rd==x27, rs1_b3_val == 2, rs1_b0_val == -2, rs1_b2_val == -128
// opcode: sunpkd810 ; op1:x28; dest:x27; op1val:0x28010fe;
TEST_RD_OP( sunpkd810, x27, x28, 0x00000000, 0x28010fe, x8, 64, x12)

inst_17:
// rs1==x30, rd==x19, rs1_b3_val == 1, 
// opcode: sunpkd810 ; op1:x30; dest:x19; op1val:0x109fa80;
TEST_RD_OP( sunpkd810, x19, x30, 0x00000000, 0x109fa80, x8, 68, x12)

inst_18:
// rs1==x7, rd==x15, rs1_b3_val == 0, rs1_b0_val == 8
// opcode: sunpkd810 ; op1:x7; dest:x15; op1val:0x02fc08;
TEST_RD_OP( sunpkd810, x15, x7, 0x00000000, 0x02fc08, x8, 72, x12)

inst_19:
// rs1==x23, rd==x31, rs1_b0_val == -33, 
// opcode: sunpkd810 ; op1:x23; dest:x31; op1val:0x6fcfbdf;
TEST_RD_OP( sunpkd810, x31, x23, 0x00000000, 0x6fcfbdf, x8, 76, x12)

inst_20:
// rs1==x19, rd==x1, rs1_b0_val == -17, 
// opcode: sunpkd810 ; op1:x19; dest:x1; op1val:0xef207fef;
TEST_RD_OP( sunpkd810, x1, x19, 0x00000000, 0xef207fef, x8, 80, x12)

inst_21:
// rs1==x17, rd==x12, rs1_b0_val == -5, rs1_b2_val == 0
// opcode: sunpkd810 ; op1:x17; dest:x12; op1val:0x400040fb;
TEST_RD_OP( sunpkd810, x12, x17, 0x00000000, 0x400040fb, x8, 84, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_22:
// rs1==x5, rd==x4, rs1_b0_val == 64, rs1_b2_val == 16, rs1_b1_val == 1
// opcode: sunpkd810 ; op1:x5; dest:x4; op1val:0xc0100140;
TEST_RD_OP( sunpkd810, x4, x5, 0x00000000, 0xc0100140, x7, 0, x9)

inst_23:
// rs1==x1, rd==x26, rs1_b0_val == 32, rs1_b1_val == -3, rs1_b3_val == -1
// opcode: sunpkd810 ; op1:x1; dest:x26; op1val:0xff05fd20;
TEST_RD_OP( sunpkd810, x26, x1, 0x00000000, 0xff05fd20, x7, 4, x9)

inst_24:
// rs1==x26, rd==x22, rs1_b0_val == 4, 
// opcode: sunpkd810 ; op1:x26; dest:x22; op1val:0xc0df0104;
TEST_RD_OP( sunpkd810, x22, x26, 0x00000000, 0xc0df0104, x7, 8, x9)

inst_25:
// rs1==x2, rd==x13, rs1_b0_val == 1, rs1_b2_val == -3
// opcode: sunpkd810 ; op1:x2; dest:x13; op1val:0xfafdf801;
TEST_RD_OP( sunpkd810, x13, x2, 0x00000000, 0xfafdf801, x7, 12, x9)

inst_26:
// rs1==x14, rd==x8, rs1_b0_val == 0, rs1_b1_val == -86
// opcode: sunpkd810 ; op1:x14; dest:x8; op1val:0x2fcaa00;
TEST_RD_OP( sunpkd810, x8, x14, 0x00000000, 0x2fcaa00, x7, 16, x9)

inst_27:
// rs1==x22, rd==x0, rs1_b2_val == 85, rs1_b1_val == -9
// opcode: sunpkd810 ; op1:x22; dest:x0; op1val:0x555f707;
TEST_RD_OP( sunpkd810, x0, x22, 0x00000000, 0x555f707, x7, 20, x9)

inst_28:
// rs1==x12, rd==x3, rs1_b2_val == 4, 
// opcode: sunpkd810 ; op1:x12; dest:x3; op1val:0x3f04f9f6;
TEST_RD_OP( sunpkd810, x3, x12, 0x00000000, 0x3f04f9f6, x7, 24, x9)

inst_29:
// rs1==x31, rd==x24, rs1_b2_val == 1, rs1_b0_val == 127
// opcode: sunpkd810 ; op1:x31; dest:x24; op1val:0xf701807f;
TEST_RD_OP( sunpkd810, x24, x31, 0x00000000, 0xf701807f, x7, 28, x9)

inst_30:
// rs1==x18, rd==x6, rs1_b2_val == -1, rs1_b1_val == -1, rs1_b0_val == -86
// opcode: sunpkd810 ; op1:x18; dest:x6; op1val:0xaaffffaa;
TEST_RD_OP( sunpkd810, x6, x18, 0x00000000, 0xaaffffaa, x7, 32, x9)

inst_31:
// rs1==x8, rd==x10, rs1_b1_val == -17, 
// opcode: sunpkd810 ; op1:x8; dest:x10; op1val:0x55f9efbf;
TEST_RD_OP( sunpkd810, x10, x8, 0x00000000, 0x55f9efbf, x7, 36, x9)

inst_32:
// rs1_b1_val == -2, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xc0c0fe20;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0xc0c0fe20, x7, 40, x9)

inst_33:
// rs1_b1_val == 32, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x405520f8;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0x405520f8, x7, 44, x9)

inst_34:
// rs1_b1_val == 2, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x103f0255;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0x103f0255, x7, 48, x9)

inst_35:
// rs1_b2_val == -17, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x8ef4020;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0x8ef4020, x7, 52, x9)

inst_36:
// rs1_b1_val == 0, rs1_b2_val == 127
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xdf7f00fb;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0xdf7f00fb, x7, 56, x9)

inst_37:
// rs1_b3_val == 16, rs1_b1_val == -33
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x10aadff6;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0x10aadff6, x7, 60, x9)

inst_38:
// rs1_b2_val == 85, rs1_b1_val == -9
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x555f707;
TEST_RD_OP( sunpkd810, x31, x30, 0x00000000, 0x555f707, x7, 64, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 17*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
