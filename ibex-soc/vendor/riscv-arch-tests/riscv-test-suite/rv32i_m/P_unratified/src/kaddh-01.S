
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kaddh instruction of the RISC-V RV32PZicsr extension for the kaddh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kaddh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x30, rd==x1, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h1_val == 64, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 2048, rs1_h1_val == 4096
// opcode: kaddh ; op1:x2; op2:x30; dest:x1; op1val:0x10008000;  op2val:0x400800
TEST_PKRR_OP(kaddh, x1, x2, x30, 0x00000000, 0x10008000, 0x400800, x2, x4, 0, x9)

inst_1:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x6, rs1_h1_val == rs2_h1_val, rs2_h1_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -4097
// opcode: kaddh ; op1:x25; op2:x25; dest:x6; op1val:0xefffc000;  op2val:0xefff0007
TEST_PKRR_OP(kaddh, x6, x25, x25, 0x00000000, 0xefffc000, 0xefff0007, x25, x4, 8, x9)

inst_2:
// rs1 == rd != rs2, rs1==x24, rs2==x22, rd==x24, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -1025, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 21845
// opcode: kaddh ; op1:x24; op2:x22; dest:x24; op1val:0xfff8fbff;  op2val:0x5555fff6
TEST_PKRR_OP(kaddh, x24, x24, x22, 0x00000000, 0xfff8fbff, 0x5555fff6, x24, x4, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 256, rs1_h1_val == 2048, rs2_h1_val == -5
// opcode: kaddh ; op1:x19; op2:x19; dest:x19; op1val:0x800fff6;  op2val:0xfffb0100
TEST_PKRR_OP(kaddh, x19, x19, x19, 0x00000000, 0x800fff6, 0xfffb0100, x19, x4, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x15, rd==x15, rs1_h0_val == rs2_h0_val, rs2_h0_val == -3, rs1_h0_val == -3, rs2_h1_val == -3, rs1_h1_val == 256
// opcode: kaddh ; op1:x22; op2:x15; dest:x15; op1val:0x100fffd;  op2val:0xfffdfffd
TEST_PKRR_OP(kaddh, x15, x22, x15, 0x00000000, 0x100fffd, 0xfffdfffd, x22, x4, 32, x9)

inst_5:
// rs1==x12, rs2==x26, rd==x18, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 512, rs2_h0_val == -21846
// opcode: kaddh ; op1:x12; op2:x26; dest:x18; op1val:0x070200;  op2val:0xfffaaaaa
TEST_PKRR_OP(kaddh, x18, x12, x26, 0x00000000, 0x070200, 0xfffaaaaa, x12, x4, 40, x9)

inst_6:
// rs1==x16, rs2==x13, rd==x30, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -8193
// opcode: kaddh ; op1:x16; op2:x13; dest:x30; op1val:0xdfff0006;  op2val:0xfffa0009
TEST_PKRR_OP(kaddh, x30, x16, x13, 0x00000000, 0xdfff0006, 0xfffa0009, x16, x4, 48, x9)

inst_7:
// rs1==x30, rs2==x18, rd==x8, rs2_h1_val == -21846, rs1_h1_val == -16385, rs1_h0_val == 4096
// opcode: kaddh ; op1:x30; op2:x18; dest:x8; op1val:0xbfff1000;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kaddh, x8, x30, x18, 0x00000000, 0xbfff1000, 0xaaaaaaaa, x30, x4, 56, x9)

inst_8:
// rs1==x28, rs2==x1, rd==x2, rs2_h1_val == 32767, rs2_h0_val == 64
// opcode: kaddh ; op1:x28; op2:x1; dest:x2; op1val:0xbfff0009;  op2val:0x7fff0040
TEST_PKRR_OP(kaddh, x2, x28, x1, 0x00000000, 0xbfff0009, 0x7fff0040, x28, x4, 64, x9)

inst_9:
// rs1==x7, rs2==x24, rd==x20, rs2_h1_val == -16385, rs2_h0_val == -1025, rs1_h0_val == 8192, rs1_h1_val == -5
// opcode: kaddh ; op1:x7; op2:x24; dest:x20; op1val:0xfffb2000;  op2val:0xbffffbff
TEST_PKRR_OP(kaddh, x20, x7, x24, 0x00000000, 0xfffb2000, 0xbffffbff, x7, x4, 72, x9)

inst_10:
// rs1==x10, rs2==x14, rd==x21, rs2_h1_val == -8193, rs1_h0_val == -65, rs2_h0_val == -16385, rs1_h1_val == 512
// opcode: kaddh ; op1:x10; op2:x14; dest:x21; op1val:0x200ffbf;  op2val:0xdfffbfff
TEST_PKRR_OP(kaddh, x21, x10, x14, 0x00000000, 0x200ffbf, 0xdfffbfff, x10, x4, 80, x9)

inst_11:
// rs1==x23, rs2==x6, rd==x3, rs2_h1_val == -2049, rs2_h0_val == -513, rs1_h0_val == 128, rs1_h1_val == -1025
// opcode: kaddh ; op1:x23; op2:x6; dest:x3; op1val:0xfbff0080;  op2val:0xf7fffdff
TEST_PKRR_OP(kaddh, x3, x23, x6, 0x00000000, 0xfbff0080, 0xf7fffdff, x23, x4, 88, x9)

inst_12:
// rs1==x21, rs2==x8, rd==x29, rs2_h1_val == -1025, rs1_h1_val == -2049, rs1_h0_val == 16384
// opcode: kaddh ; op1:x21; op2:x8; dest:x29; op1val:0xf7ff4000;  op2val:0xfbfffbff
TEST_PKRR_OP(kaddh, x29, x21, x8, 0x00000000, 0xf7ff4000, 0xfbfffbff, x21, x4, 96, x9)

inst_13:
// rs1==x11, rs2==x5, rd==x31, rs2_h1_val == -513, rs2_h0_val == 2, rs1_h0_val == -8193, rs1_h1_val == 21845
// opcode: kaddh ; op1:x11; op2:x5; dest:x31; op1val:0x5555dfff;  op2val:0xfdff0002
TEST_PKRR_OP(kaddh, x31, x11, x5, 0x00000000, 0x5555dfff, 0xfdff0002, x11, x4, 104, x9)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_14:
// rs1==x26, rs2==x3, rd==x0, rs2_h1_val == -257, rs1_h1_val == 1024
// opcode: kaddh ; op1:x26; op2:x3; dest:x0; op1val:0x4004000;  op2val:0xfeff0100
TEST_PKRR_OP(kaddh, x0, x26, x3, 0x00000000, 0x4004000, 0xfeff0100, x26, x15, 0, x6)

inst_15:
// rs1==x27, rs2==x21, rd==x16, rs2_h1_val == -129, rs1_h0_val == -16385, rs2_h0_val == -8193
// opcode: kaddh ; op1:x27; op2:x21; dest:x16; op1val:0x03bfff;  op2val:0xff7fdfff
TEST_PKRR_OP(kaddh, x16, x27, x21, 0x00000000, 0x03bfff, 0xff7fdfff, x27, x15, 8, x6)

inst_16:
// rs1==x8, rs2==x0, rd==x17, rs2_h1_val == -65, rs1_h1_val == -33, rs2_h0_val == -17
// opcode: kaddh ; op1:x8; op2:x0; dest:x17; op1val:0xffdffffd;  op2val:0xffbfffef
TEST_PKRR_OP(kaddh, x17, x8, x0, 0x00000000, 0xffdffffd, 0xffbfffef, x8, x15, 16, x6)

inst_17:
// rs1==x14, rs2==x23, rd==x22, rs2_h1_val == -33, rs1_h0_val == -5, rs1_h1_val == 32, rs2_h0_val == 16
// opcode: kaddh ; op1:x14; op2:x23; dest:x22; op1val:0x20fffb;  op2val:0xffdf0010
TEST_PKRR_OP(kaddh, x22, x14, x23, 0x00000000, 0x20fffb, 0xffdf0010, x14, x15, 24, x6)

inst_18:
// rs1==x17, rs2==x27, rd==x23, rs2_h1_val == -17, rs2_h0_val == -129, rs1_h0_val == -1
// opcode: kaddh ; op1:x17; op2:x27; dest:x23; op1val:0x03ffff;  op2val:0xffefff7f
TEST_PKRR_OP(kaddh, x23, x17, x27, 0x00000000, 0x03ffff, 0xffefff7f, x17, x15, 32, x6)

inst_19:
// rs1==x3, rs2==x28, rd==x12, rs2_h1_val == -9, rs1_h0_val == 21845, rs2_h0_val == 0
// opcode: kaddh ; op1:x3; op2:x28; dest:x12; op1val:0xefff5555;  op2val:0xfff70000
TEST_PKRR_OP(kaddh, x12, x3, x28, 0x00000000, 0xefff5555, 0xfff70000, x3, x15, 40, x6)

inst_20:
// rs1==x0, rs2==x7, rd==x25, rs2_h1_val == -2, rs2_h0_val == -4097
// opcode: kaddh ; op1:x0; op2:x7; dest:x25; op1val:0xfff82000;  op2val:0xfffeefff
TEST_PKRR_OP(kaddh, x25, x0, x7, 0x00000000, 0xfff82000, 0xfffeefff, x0, x15, 48, x6)

inst_21:
// rs1==x20, rs2==x12, rd==x11, rs2_h1_val == -32768, rs2_h0_val == 4, rs1_h1_val == -1, rs1_h0_val == 4
// opcode: kaddh ; op1:x20; op2:x12; dest:x11; op1val:0xffff0004;  op2val:0x80000004
TEST_PKRR_OP(kaddh, x11, x20, x12, 0x00000000, 0xffff0004, 0x80000004, x20, x15, 56, x6)

inst_22:
// rs1==x31, rs2==x10, rd==x4, rs2_h1_val == 16384, rs2_h0_val == 21845, rs1_h1_val == -3
// opcode: kaddh ; op1:x31; op2:x10; dest:x4; op1val:0xfffd3fff;  op2val:0x40005555
TEST_PKRR_OP(kaddh, x4, x31, x10, 0x00000000, 0xfffd3fff, 0x40005555, x31, x15, 64, x6)

inst_23:
// rs1==x29, rs2==x2, rd==x27, rs2_h1_val == 8192, 
// opcode: kaddh ; op1:x29; op2:x2; dest:x27; op1val:0xdfff0080;  op2val:0x20000003
TEST_PKRR_OP(kaddh, x27, x29, x2, 0x00000000, 0xdfff0080, 0x20000003, x29, x15, 72, x6)

inst_24:
// rs1==x13, rs2==x29, rd==x14, rs2_h1_val == 4096, rs2_h0_val == 512, rs1_h0_val == 1
// opcode: kaddh ; op1:x13; op2:x29; dest:x14; op1val:0x050001;  op2val:0x10000200
TEST_PKRR_OP(kaddh, x14, x13, x29, 0x00000000, 0x050001, 0x10000200, x13, x15, 80, x6)

inst_25:
// rs1==x9, rs2==x4, rd==x28, rs2_h1_val == 2048, rs2_h0_val == 128
// opcode: kaddh ; op1:x9; op2:x4; dest:x28; op1val:0xf7fffffd;  op2val:0x8000080
TEST_PKRR_OP(kaddh, x28, x9, x4, 0x00000000, 0xf7fffffd, 0x8000080, x9, x15, 88, x6)

inst_26:
// rs1==x1, rs2==x31, rd==x9, rs2_h1_val == 1024, rs1_h0_val == 64
// opcode: kaddh ; op1:x1; op2:x31; dest:x9; op1val:0xfff90040;  op2val:0x4000000
TEST_PKRR_OP(kaddh, x9, x1, x31, 0x00000000, 0xfff90040, 0x4000000, x1, x15, 96, x6)

inst_27:
// rs1==x5, rs2==x11, rd==x10, rs2_h1_val == 512, rs1_h0_val == 16
// opcode: kaddh ; op1:x5; op2:x11; dest:x10; op1val:0x55550010;  op2val:0x200efff
TEST_PKRR_OP(kaddh, x10, x5, x11, 0x00000000, 0x55550010, 0x200efff, x5, x15, 104, x6)

inst_28:
// rs1==x4, rs2==x17, rd==x5, rs2_h1_val == 256, rs1_h1_val == -2, rs1_h0_val == -2049
// opcode: kaddh ; op1:x4; op2:x17; dest:x5; op1val:0xfffef7ff;  op2val:0x100fffa
TEST_PKRR_OP(kaddh, x5, x4, x17, 0x00000000, 0xfffef7ff, 0x100fffa, x4, x15, 112, x6)

inst_29:
// rs1==x18, rs2==x16, rd==x26, rs2_h1_val == 128, 
// opcode: kaddh ; op1:x18; op2:x16; dest:x26; op1val:0x075555;  op2val:0x803fff
TEST_PKRR_OP(kaddh, x26, x18, x16, 0x00000000, 0x075555, 0x803fff, x18, x15, 120, x6)

inst_30:
// rs1==x6, rs2==x20, rd==x13, rs1_h0_val == -513, rs1_h1_val == 8
// opcode: kaddh ; op1:x6; op2:x20; dest:x13; op1val:0x08fdff;  op2val:0x800800
TEST_PKRR_OP(kaddh, x13, x6, x20, 0x00000000, 0x08fdff, 0x800800, x6, x15, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x15, rs2==x9, rd==x7, rs1_h0_val == -257, rs2_h0_val == 32767
// opcode: kaddh ; op1:x15; op2:x9; dest:x7; op1val:0x03feff;  op2val:0x407fff
TEST_PKRR_OP(kaddh, x7, x15, x9, 0x00000000, 0x03feff, 0x407fff, x15, x1, 0, x2)

inst_32:
// rs1_h0_val == -129, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x08ff7f;  op2val:0xaaaafff6
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x08ff7f, 0xaaaafff6, x30, x1, 8, x2)

inst_33:
// rs1_h0_val == -33, rs2_h0_val == 8192
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf;  op2val:0xefff2000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xf7ffffdf, 0xefff2000, x30, x1, 16, x2)

inst_34:
// rs1_h0_val == -17, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffef;  op2val:0x2000007
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xdfffffef, 0x2000007, x30, x1, 24, x2)

inst_35:
// rs1_h0_val == -9, rs2_h1_val == 16, rs2_h0_val == 1
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7;  op2val:0x100001
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x5555fff7, 0x100001, x30, x1, 32, x2)

inst_36:
// rs1_h0_val == -2, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffe;  op2val:0xfdffaaaa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfffdfffe, 0xfdffaaaa, x30, x1, 40, x2)

inst_37:
// rs1_h0_val == 2048, rs2_h0_val == -2, rs1_h1_val == 128
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800800;  op2val:0xfff9fffe
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x800800, 0xfff9fffe, x30, x1, 48, x2)

inst_38:
// rs1_h0_val == 1024, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff80400;  op2val:0x03fffa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfff80400, 0x03fffa, x30, x1, 56, x2)

inst_39:
// rs1_h0_val == 256, rs1_h1_val == -17
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffef0100;  op2val:0xffdffdff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xffef0100, 0xffdffdff, x30, x1, 64, x2)

inst_40:
// rs1_h0_val == 32, rs2_h1_val == 1
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x090020;  op2val:0x01efff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x090020, 0x01efff, x30, x1, 72, x2)

inst_41:
// rs1_h0_val == 8, rs2_h0_val == 32, rs1_h1_val == 1
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x010008;  op2val:0xbfff0020
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x010008, 0xbfff0020, x30, x1, 80, x2)

inst_42:
// rs1_h0_val == 2, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0002;  op2val:0xfbff0080
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfffe0002, 0xfbff0080, x30, x1, 88, x2)

inst_43:
// rs1_h0_val == 0, rs1_h1_val == 4
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x040000;  op2val:0xbfffff7f
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x040000, 0xbfffff7f, x30, x1, 96, x2)

inst_44:
// rs2_h1_val == 32, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff8c000;  op2val:0x20dfff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfff8c000, 0x20dfff, x30, x1, 104, x2)

inst_45:
// rs2_h1_val == 8, rs2_h0_val == -9
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800ffff;  op2val:0x08fff7
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x800ffff, 0x08fff7, x30, x1, 112, x2)

inst_46:
// rs2_h1_val == 4, rs1_h1_val == 16
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10fdff;  op2val:0x04fffa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x10fdff, 0x04fffa, x30, x1, 120, x2)

inst_47:
// rs2_h0_val == -5, rs1_h1_val == -513
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0008;  op2val:0x09fffb
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfdff0008, 0x09fffb, x30, x1, 128, x2)

inst_48:
// rs2_h0_val == -32768, rs1_h1_val == -129
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0007;  op2val:0x3fff8000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xff7f0007, 0x3fff8000, x30, x1, 136, x2)

inst_49:
// rs2_h0_val == 16384, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x09fff8;  op2val:0xc0004000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x09fff8, 0xc0004000, x30, x1, 144, x2)

inst_50:
// rs2_h0_val == 4096, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xbfff1000;  op2val:0x041000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xbfff1000, 0x041000, x30, x1, 152, x2)

inst_51:
// rs2_h0_val == 1024, rs1_h1_val == -257
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0x1000400
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfeffffff, 0x1000400, x30, x1, 160, x2)

inst_52:
// rs2_h0_val == 8, rs1_h0_val == -4097, rs1_h1_val == 32767
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff;  op2val:0x3fff0008
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x7fffefff, 0x3fff0008, x30, x1, 168, x2)

inst_53:
// rs2_h0_val == -1, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff6c000;  op2val:0xfff8ffff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfff6c000, 0xfff8ffff, x30, x1, 176, x2)

inst_54:
// rs1_h1_val == -21846, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff7;  op2val:0xf7ffaaaa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xaaaafff7, 0xf7ffaaaa, x30, x1, 184, x2)

inst_55:
// rs1_h1_val == 0, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x00fff8;  op2val:0x2000fffd
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x00fff8, 0x2000fffd, x30, x1, 192, x2)

inst_56:
// rs1_h1_val == -65, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0800;  op2val:0xfff70080
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xffbf0800, 0xfff70080, x30, x1, 200, x2)

inst_57:
// rs1_h1_val == -9, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff8;  op2val:0x041000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfff7fff8, 0x041000, x30, x1, 208, x2)

inst_58:
// rs1_h1_val == -32768, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x8000bfff;  op2val:0x095555
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x8000bfff, 0x095555, x30, x1, 216, x2)

inst_59:
// rs1_h1_val == 16384, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffa;  op2val:0x3fff8000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x4000fffa, 0x3fff8000, x30, x1, 224, x2)

inst_60:
// rs1_h1_val == 8192, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffef;  op2val:0xc000fffa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x2000ffef, 0xc000fffa, x30, x1, 232, x2)

inst_61:
// rs2_h1_val == 2, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20fffa;  op2val:0x02efff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x20fffa, 0x02efff, x30, x1, 240, x2)

inst_62:
// rs2_h1_val == 0, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x010020;  op2val:0x001000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x010020, 0x001000, x30, x1, 248, x2)

inst_63:
// rs2_h1_val == -1, rs2_h0_val == -2049
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffe5555;  op2val:0xfffff7ff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfffe5555, 0xfffff7ff, x30, x1, 256, x2)

inst_64:
// rs1_h1_val == 64, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x400008;  op2val:0xfff8fbff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x400008, 0xfff8fbff, x30, x1, 264, x2)

inst_65:
// rs1_h1_val == 2, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02fff6;  op2val:0xfffc0080
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x02fff6, 0xfffc0080, x30, x1, 272, x2)

inst_66:
// rs1_h0_val == -21846, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaa;  op2val:0xfdffbfff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x06aaaa, 0xfdffbfff, x30, x1, 280, x2)

inst_67:
// rs2_h0_val == -257, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x400fff8;  op2val:0xf7fffeff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x400fff8, 0xf7fffeff, x30, x1, 288, x2)

inst_68:
// rs1_h0_val == 32767, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff7fff;  op2val:0x4000005
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfdff7fff, 0x4000005, x30, x1, 296, x2)

inst_69:
// rs2_h0_val == -65, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05fdff;  op2val:0xdfffffbf
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x05fdff, 0xdfffffbf, x30, x1, 304, x2)

inst_70:
// rs2_h0_val == -33, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x103fff;  op2val:0xdfffffdf
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x103fff, 0xdfffffdf, x30, x1, 312, x2)

inst_71:
// rs1_h1_val == rs2_h1_val, rs2_h1_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -4097
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000;  op2val:0xefff0007
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xefffc000, 0xefff0007, x30, x1, 320, x2)

inst_72:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 256, rs1_h1_val == 2048, rs2_h1_val == -5
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800fff6;  op2val:0xfffb0100
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x800fff6, 0xfffb0100, x30, x1, 328, x2)

inst_73:
// rs2_h1_val == -257, rs1_h1_val == 1024
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4004000;  op2val:0xfeff0100
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0x4004000, 0xfeff0100, x30, x1, 336, x2)

inst_74:
// rs2_h1_val == -65, rs1_h1_val == -33, rs2_h0_val == -17
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffd;  op2val:0xffbfffef
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xffdffffd, 0xffbfffef, x30, x1, 344, x2)

inst_75:
// rs2_h1_val == -2, rs2_h0_val == -4097
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff82000;  op2val:0xfffeefff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x00000000, 0xfff82000, 0xfffeefff, x30, x1, 352, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 90*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
