
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksub8 instruction of the RISC-V RV32PZicsr extension for the ksub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x27, rd==x14, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs2_b1_val == 127, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val == -128, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0
// opcode: ksub8 ; op1:x18; op2:x27; dest:x14; op1val:0xf680f980;  op2val:0xfa097f05
TEST_RR_OP(ksub8, x14, x18, x27, 0x00000000, 0xf680f980, 0xfa097f05, x2, 0, x22)

inst_1:// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x9, rs1_b3_val == rs2_b3_val, rs2_b3_val == -2, rs1_b0_val == -65, rs2_b1_val == 2, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == -2, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b0_val == -5, rs1_b1_val == 16
// opcode: ksub8 ; op1:x12; op2:x12; dest:x9; op1val:0xfef610bf;  op2val:0xfe0702fb
TEST_RR_OP(ksub8, x9, x12, x12, 0x00000000, 0xfef610bf, 0xfe0702fb, x2, 8, x22)

inst_2:// rs1 == rd != rs2, rs1==x0, rs2==x5, rd==x0, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == 4, rs1_b2_val == 32, rs1_b0_val == -9, rs1_b2_val > 0 and rs2_b2_val > 0
// opcode: ksub8 ; op1:x0; op2:x5; dest:x0; op1val:0xf62009f7;  op2val:0x3f0604c0
TEST_RR_OP(ksub8, x0, x0, x5, 0x00000000, 0xf62009f7, 0x3f0604c0, x2, 16, x22)

inst_3:// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b0_val == -3, rs2_b1_val == 32, rs1_b2_val == 0, rs2_b2_val == 127, rs1_b1_val == 85
// opcode: ksub8 ; op1:x10; op2:x10; dest:x10; op1val:0x60055fd;  op2val:0xf87f2005
TEST_RR_OP(ksub8, x10, x10, x10, 0x00000000, 0x60055fd, 0xf87f2005, x2, 24, x22)

inst_4:// rs2 == rd != rs1, rs1==x9, rs2==x23, rd==x23, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b1_val == -1, rs2_b1_val == -17, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b2_val == -3, rs2_b0_val == -65, rs1_b3_val == 1
// opcode: ksub8 ; op1:x9; op2:x23; dest:x23; op1val:0x1f6fffa;  op2val:0x5fdefbf
TEST_RR_OP(ksub8, x23, x9, x23, 0x00000000, 0x1f6fffa, 0x5fdefbf, x2, 32, x22)

inst_5:// rs1==x25, rs2==x8, rd==x6, rs1_b2_val == rs2_b2_val, rs2_b0_val == 64, rs2_b1_val == 85, rs2_b3_val == 32, rs1_b2_val == 64, rs1_b3_val == -17, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 64, rs1_b1_val == 64
// opcode: ksub8 ; op1:x25; op2:x8; dest:x6; op1val:0xef40403f;  op2val:0x20405540
TEST_RR_OP(ksub8, x6, x25, x8, 0x00000000, 0xef40403f, 0x20405540, x2, 40, x22)

inst_6:// rs1==x1, rs2==x7, rd==x21, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b2_val == -1, rs1_b0_val == 85, rs1_b2_val == 2, rs1_b3_val == -33, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b0_val == -2
// opcode: ksub8 ; op1:x1; op2:x7; dest:x21; op1val:0xdf02c055;  op2val:0xfeff55fe
TEST_RR_OP(ksub8, x21, x1, x7, 0x00000000, 0xdf02c055, 0xfeff55fe, x2, 48, x22)

inst_7:// rs1==x13, rs2==x1, rd==x12, rs1_b1_val == rs2_b1_val, rs1_b2_val == -5, rs2_b2_val == -17, rs2_b0_val == 8, rs1_b3_val == 64
// opcode: ksub8 ; op1:x13; op2:x1; dest:x12; op1val:0x40fbf63f;  op2val:0xfaeff608
TEST_RR_OP(ksub8, x12, x13, x1, 0x00000000, 0x40fbf63f, 0xfaeff608, x2, 56, x22)

inst_8:// rs1==x23, rs2==x17, rd==x11, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b1_val == -86, rs1_b3_val == 32, rs1_b2_val == -2
// opcode: ksub8 ; op1:x23; op2:x17; dest:x11; op1val:0x20fe40f9;  op2val:0xf8faaac0
TEST_RR_OP(ksub8, x11, x23, x17, 0x00000000, 0x20fe40f9, 0xf8faaac0, x2, 64, x22)

inst_9:// rs1==x6, rs2==x24, rd==x18, rs1_b0_val == rs2_b0_val, rs1_b2_val == -65, rs2_b1_val == -33, rs1_b1_val == -17
// opcode: ksub8 ; op1:x6; op2:x24; dest:x18; op1val:0xc0bfefc0;  op2val:0x609dfc0
TEST_RR_OP(ksub8, x18, x6, x24, 0x00000000, 0xc0bfefc0, 0x609dfc0, x2, 72, x22)

inst_10:// rs1==x8, rs2==x3, rd==x7, rs2_b3_val == -86, rs1_b2_val == -33, rs2_b1_val == -2, rs1_b0_val == -17, rs1_b1_val == -65, rs1_b3_val == 16, rs2_b0_val == -9
// opcode: ksub8 ; op1:x8; op2:x3; dest:x7; op1val:0x10dfbfef;  op2val:0xaafcfef7
TEST_RR_OP(ksub8, x7, x8, x3, 0x00000000, 0x10dfbfef, 0xaafcfef7, x2, 80, x22)

inst_11:// rs1==x4, rs2==x15, rd==x20, rs2_b3_val == 85, rs1_b3_val == 2, rs2_b2_val == 8, rs1_b2_val == 127
// opcode: ksub8 ; op1:x4; op2:x15; dest:x20; op1val:0x27f0703;  op2val:0x55080903
TEST_RR_OP(ksub8, x20, x4, x15, 0x00000000, 0x27f0703, 0x55080903, x2, 88, x22)

inst_12:// rs1==x27, rs2==x25, rd==x1, rs2_b3_val == 127, rs1_b2_val == 4, rs2_b2_val == 1
// opcode: ksub8 ; op1:x27; op2:x25; dest:x1; op1val:0xf604f63f;  op2val:0x7f01eff9
TEST_RR_OP(ksub8, x1, x27, x25, 0x00000000, 0xf604f63f, 0x7f01eff9, x2, 96, x22)

inst_13:// rs1==x5, rs2==x11, rd==x13, rs2_b3_val == -65, rs1_b1_val == -2, rs1_b0_val == 2, rs2_b2_val == -86
// opcode: ksub8 ; op1:x5; op2:x11; dest:x13; op1val:0xc0c0fe02;  op2val:0xbfaa06fe
TEST_RR_OP(ksub8, x13, x5, x11, 0x00000000, 0xc0c0fe02, 0xbfaa06fe, x2, 104, x22)

inst_14:// rs1==x28, rs2==x18, rd==x19, rs2_b3_val == -33, rs2_b0_val == -33, rs1_b0_val == 64
// opcode: ksub8 ; op1:x28; op2:x18; dest:x19; op1val:0x10091040;  op2val:0xdf0307df
TEST_RR_OP(ksub8, x19, x28, x18, 0x00000000, 0x10091040, 0xdf0307df, x2, 112, x22)

inst_15:// rs1==x20, rs2==x30, rd==x8, rs2_b3_val == -17, 
// opcode: ksub8 ; op1:x20; op2:x30; dest:x8; op1val:0xeff60355;  op2val:0xeffffa08
TEST_RR_OP(ksub8, x8, x20, x30, 0x00000000, 0xeff60355, 0xeffffa08, x2, 120, x22)

inst_16:// rs1==x16, rs2==x19, rd==x17, rs2_b3_val == -9, rs2_b2_val == 4
// opcode: ksub8 ; op1:x16; op2:x19; dest:x17; op1val:0x58003c0;  op2val:0xf704aafb
TEST_RR_OP(ksub8, x17, x16, x19, 0x00000000, 0x58003c0, 0xf704aafb, x2, 128, x22)

inst_17:// rs1==x19, rs2==x4, rd==x3, rs2_b3_val == -5, rs1_b2_val == -86, rs1_b1_val == 32
// opcode: ksub8 ; op1:x19; op2:x4; dest:x3; op1val:0x40aa20fd;  op2val:0xfb08dff9
TEST_RR_OP(ksub8, x3, x19, x4, 0x00000000, 0x40aa20fd, 0xfb08dff9, x2, 136, x8)

inst_18:// rs1==x11, rs2==x21, rd==x4, rs2_b3_val == -3, rs2_b0_val == 0, rs2_b1_val == 1, rs1_b1_val == -33, rs1_b3_val == 4, rs2_b2_val == 2
// opcode: ksub8 ; op1:x11; op2:x21; dest:x4; op1val:0x440df09;  op2val:0xfd020100
TEST_RR_OP(ksub8, x4, x11, x21, 0x00000000, 0x440df09, 0xfd020100, x2, 144, x8)

inst_19:// rs1==x17, rs2==x0, rd==x27, rs2_b3_val == -128, rs1_b3_val == -3, rs1_b1_val == -86
// opcode: ksub8 ; op1:x17; op2:x0; dest:x27; op1val:0xfdaaaa09;  op2val:0x80ff0105
TEST_RR_OP(ksub8, x27, x17, x0, 0x00000000, 0xfdaaaa09, 0x80ff0105, x2, 152, x8)

inst_20:// rs1==x7, rs2==x14, rd==x29, rs2_b3_val == 64, rs1_b1_val == -3, rs1_b2_val == 85
// opcode: ksub8 ; op1:x7; op2:x14; dest:x29; op1val:0x455fd80;  op2val:0x40010505
TEST_RR_OP(ksub8, x29, x7, x14, 0x00000000, 0x455fd80, 0x40010505, x2, 160, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:// rs1==x24, rs2==x9, rd==x5, rs2_b3_val == 16, rs2_b1_val == -128, rs1_b0_val == 1, rs2_b0_val == 85
// opcode: ksub8 ; op1:x24; op2:x9; dest:x5; op1val:0xfc061001;  op2val:0x10068055
TEST_RR_OP(ksub8, x5, x24, x9, 0x00000000, 0xfc061001, 0x10068055, x1, 0, x8)

inst_22:// rs1==x26, rs2==x16, rd==x15, rs2_b3_val == 8, rs1_b1_val == -128, rs1_b3_val == -65, rs2_b0_val == 2, rs2_b1_val == 8
// opcode: ksub8 ; op1:x26; op2:x16; dest:x15; op1val:0xbf3f8007;  op2val:0x8040802
TEST_RR_OP(ksub8, x15, x26, x16, 0x00000000, 0xbf3f8007, 0x8040802, x1, 8, x8)

inst_23:// rs1==x29, rs2==x28, rd==x31, rs2_b3_val == 4, rs2_b2_val == 32, rs1_b0_val == 4, rs2_b1_val == 16
// opcode: ksub8 ; op1:x29; op2:x28; dest:x31; op1val:0xfc060304;  op2val:0x4201005
TEST_RR_OP(ksub8, x31, x29, x28, 0x00000000, 0xfc060304, 0x4201005, x1, 16, x8)

inst_24:// rs1==x30, rs2==x22, rd==x2, rs2_b3_val == 2, 
// opcode: ksub8 ; op1:x30; op2:x22; dest:x2; op1val:0xbf400307;  op2val:0x2ff0700
TEST_RR_OP(ksub8, x2, x30, x22, 0x00000000, 0xbf400307, 0x2ff0700, x1, 24, x8)

inst_25:// rs1==x31, rs2==x6, rd==x24, rs1_b2_val == -17, rs1_b3_val == -9
// opcode: ksub8 ; op1:x31; op2:x6; dest:x24; op1val:0xf7ef05fc;  op2val:0xf8fc3ffc
TEST_RR_OP(ksub8, x24, x31, x6, 0x00000000, 0xf7ef05fc, 0xf8fc3ffc, x1, 32, x8)

inst_26:// rs1==x15, rs2==x20, rd==x30, rs1_b2_val == -9, rs2_b2_val == -33, rs1_b3_val == 85
// opcode: ksub8 ; op1:x15; op2:x20; dest:x30; op1val:0x55f7fcbf;  op2val:0x6dffcfe
TEST_RR_OP(ksub8, x30, x15, x20, 0x00000000, 0x55f7fcbf, 0x6dffcfe, x1, 40, x8)

inst_27:// rs1==x14, rs2==x26, rd==x22, rs1_b2_val == -3, rs2_b0_val == 16
// opcode: ksub8 ; op1:x14; op2:x26; dest:x22; op1val:0xf7fdfe02;  op2val:0xc0060610
TEST_RR_OP(ksub8, x22, x14, x26, 0x00000000, 0xf7fdfe02, 0xc0060610, x1, 48, x8)

inst_28:// rs1==x21, rs2==x31, rd==x28, rs1_b2_val == 16, rs1_b3_val == -128
// opcode: ksub8 ; op1:x21; op2:x31; dest:x28; op1val:0x801040fc;  op2val:0x3f8f606
TEST_RR_OP(ksub8, x28, x21, x31, 0x00000000, 0x801040fc, 0x3f8f606, x1, 56, x8)

inst_29:// rs1==x3, rs2==x29, rd==x16, rs1_b2_val == 8, rs1_b1_val == 4, rs1_b3_val == 0, rs2_b2_val == 85
// opcode: ksub8 ; op1:x3; op2:x29; dest:x16; op1val:0x080407;  op2val:0xaa555508
TEST_RR_OP(ksub8, x16, x3, x29, 0x00000000, 0x080407, 0xaa555508, x1, 64, x8)

inst_30:// rs1==x2, rs2==x13, rd==x26, rs1_b2_val == 1, rs1_b1_val == -9
// opcode: ksub8 ; op1:x2; op2:x13; dest:x26; op1val:0x201f701;  op2val:0xef048008
TEST_RR_OP(ksub8, x26, x2, x13, 0x00000000, 0x201f701, 0xef048008, x1, 72, x8)

inst_31:// rs1==x22, rs2==x2, rd==x25, rs1_b2_val == -1, rs2_b0_val == -17, rs2_b1_val == 0, rs1_b0_val == -1
// opcode: ksub8 ; op1:x22; op2:x2; dest:x25; op1val:0xf7ff20ff;  op2val:0xaa0100ef
TEST_RR_OP(ksub8, x25, x22, x2, 0x00000000, 0xf7ff20ff, 0xaa0100ef, x1, 80, x8)

inst_32:// rs1_b1_val == 127, rs2_b3_val == -1
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdf7f09;  op2val:0xff01f6fb
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xefdf7f09, 0xff01f6fb, x1, 88, x8)

inst_33:// rs1_b1_val == -5, rs2_b0_val == -86
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdbffb01;  op2val:0xfefafeaa
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xfdbffb01, 0xfefafeaa, x1, 96, x8)

inst_34:// rs1_b1_val == 8, rs2_b0_val == -1, rs1_b3_val == -86, rs1_b0_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf80808;  op2val:0x8040feff
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xaaf80808, 0x8040feff, x1, 104, x8)

inst_35:// rs1_b1_val == 2, rs1_b3_val == -5
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfa02fa;  op2val:0xf6f807f7
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xfbfa02fa, 0xf6f807f7, x1, 112, x8)

inst_36:// rs1_b1_val == 1, rs2_b1_val == -5
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8ff0102;  op2val:0xfefafbef
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf8ff0102, 0xfefafbef, x1, 120, x8)

inst_37:// rs1_b1_val == 0, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x080008;  op2val:0x73f7fff
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x080008, 0x73f7fff, x1, 128, x8)

inst_38:// rs2_b1_val == -65, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ff706c0;  op2val:0x6fdbfbf
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x3ff706c0, 0x6fdbfbf, x1, 136, x8)

inst_39:// rs2_b1_val == -9, rs2_b2_val == -65, rs2_b3_val == 1
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x280fd05;  op2val:0x1bff7fb
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x280fd05, 0x1bff7fb, x1, 144, x8)

inst_40:// rs2_b1_val == -3, rs2_b2_val == -128
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf93fc009;  op2val:0x4080fdf8
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf93fc009, 0x4080fdf8, x1, 152, x8)

inst_41:// rs2_b1_val == 64, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0082055;  op2val:0x70540fe
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xc0082055, 0x70540fe, x1, 160, x8)

inst_42:// rs2_b1_val == -1, rs2_b2_val == 16, rs2_b0_val == -3
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5507f6f7;  op2val:0x110fffd
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x5507f6f7, 0x110fffd, x1, 168, x8)

inst_43:// rs2_b0_val == 127, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfdffaef;  op2val:0x320107f
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xbfdffaef, 0x320107f, x1, 176, x8)

inst_44:// rs2_b0_val == -128, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80bf07c0;  op2val:0xef051080
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x80bf07c0, 0xef051080, x1, 184, x8)

inst_45:// rs2_b0_val == 32, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6fa04c0;  op2val:0xfe40ef20
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf6fa04c0, 0xfe40ef20, x1, 192, x8)

inst_46:// rs2_b0_val == 4, rs1_b0_val == -86, rs2_b2_val == -2
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x555f8aa;  op2val:0xfcfefd04
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x555f8aa, 0xfcfefd04, x1, 200, x8)

inst_47:// rs2_b0_val == 1, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5200380;  op2val:0x77f0101
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x5200380, 0x77f0101, x1, 208, x8)

inst_48:// rs1_b0_val == 127, rs1_b3_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fbfe7f;  op2val:0xf701087f
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x8fbfe7f, 0xf701087f, x1, 216, x8)

inst_49:// rs1_b0_val == -33, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd01ffdf;  op2val:0x1001dffb
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xfd01ffdf, 0x1001dffb, x1, 224, x8)

inst_50:// rs2_b3_val == 0, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff0304;  op2val:0xf8f820
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x10ff0304, 0xf8f820, x1, 232, x8)

inst_51:// rs1_b3_val == 127, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff8f903;  op2val:0x55f95501
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x7ff8f903, 0x55f95501, x1, 240, x8)

inst_52:// rs1_b0_val == -5, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf755aafb;  op2val:0x7fd02ff
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf755aafb, 0x7fd02ff, x1, 248, x8)

inst_53:// rs1_b0_val == -2, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x50602fe;  op2val:0xf7fdf7f6
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x50602fe, 0xf7fdf7f6, x1, 256, x8)

inst_54:// rs1_b0_val == 32, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb055520;  op2val:0x8004c006
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xfb055520, 0x8004c006, x1, 264, x8)

inst_55:// rs1_b0_val == 16, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fb0910;  op2val:0x93ff7bf
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x8fb0910, 0x93ff7bf, x1, 272, x8)

inst_56:// rs2_b2_val == -9, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f6fb06;  op2val:0x4f7fc40
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x10f6fb06, 0x4f7fc40, x1, 280, x8)

inst_57:// rs1_b3_val == -1, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff20f9df;  op2val:0xf902fafe
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xff20f9df, 0xf902fafe, x1, 288, x8)

inst_58:// rs2_b2_val == -5, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x210fe3f;  op2val:0x3ffbfff6
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x210fe3f, 0x3ffbfff6, x1, 296, x8)

inst_59:// rs1_b0_val == 0, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3eff700;  op2val:0xf8bff8ef
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x3eff700, 0xf8bff8ef, x1, 304, x8)

inst_60:// rs2_b2_val == 0, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f84002;  op2val:0xaa00fbf7
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf8f84002, 0xaa00fbf7, x1, 312, x8)

inst_61:// rs1_b3_val == rs2_b3_val, rs2_b3_val == -2, rs1_b0_val == -65, rs2_b1_val == 2, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == -2, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b0_val == -5, rs1_b1_val == 16
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef610bf;  op2val:0xfe0702fb
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xfef610bf, 0xfe0702fb, x1, 320, x8)

inst_62:// rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == 4, rs1_b2_val == 32, rs1_b0_val == -9, rs1_b2_val > 0 and rs2_b2_val > 0
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf62009f7;  op2val:0x3f0604c0
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0xf62009f7, 0x3f0604c0, x1, 328, x8)

inst_63:// rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b0_val == -3, rs2_b1_val == 32, rs1_b2_val == 0, rs2_b2_val == 127, rs1_b1_val == 85
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x60055fd;  op2val:0xf87f2005
TEST_RR_OP(ksub8, x31, x30, x29, 0x00000000, 0x60055fd, 0xf87f2005, x1, 336, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 86*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
