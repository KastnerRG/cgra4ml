
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the radd8 instruction of the RISC-V RV32PZicsr extension for the radd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",radd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x27, rd==x7, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b1_val == 8, rs1_b1_val == 64, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b0_val == -65, rs2_b3_val == -65, rs1_b2_val == 127
// opcode: radd8 ; op1:x6; op2:x27; dest:x7; op1val:0xf97f4080;  op2val:0xbf0708bf
TEST_RR_OP(radd8, x7, x6, x27, 0x00000000, 0xf97f4080, 0xbf0708bf, x16, 0, x17)

inst_1:// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x8, rs1_b3_val == rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b3_val == 4, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b1_val == 4, rs1_b0_val == 64, rs2_b2_val == -5, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b3_val == 4, rs2_b0_val == -5
// opcode: radd8 ; op1:x25; op2:x25; dest:x8; op1val:0x406f640;  op2val:0x4fb04fb
TEST_RR_OP(radd8, x8, x25, x25, 0x00000000, 0x406f640, 0x4fb04fb, x16, 4, x17)

inst_2:// rs1 == rd != rs2, rs1==x13, rs2==x28, rd==x13, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == 127, rs2_b0_val == 2, rs2_b3_val == 1, rs1_b2_val == 8, rs1_b3_val == -9, rs1_b0_val < 0 and rs2_b0_val > 0
// opcode: radd8 ; op1:x13; op2:x28; dest:x13; op1val:0xf7084080;  op2val:0x1067f02
TEST_RR_OP(radd8, x13, x13, x28, 0x00000000, 0xf7084080, 0x1067f02, x16, 8, x17)

inst_3:// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b3_val == -5, rs1_b1_val == 4, rs1_b2_val == 4, rs1_b1_val == rs2_b1_val, rs1_b0_val == 8, rs2_b2_val == 1
// opcode: radd8 ; op1:x23; op2:x23; dest:x23; op1val:0x5040408;  op2val:0xfb0104bf
TEST_RR_OP(radd8, x23, x23, x23, 0x00000000, 0x5040408, 0xfb0104bf, x16, 12, x17)

inst_4:// rs2 == rd != rs1, rs1==x30, rs2==x5, rd==x5, rs1_b2_val == rs2_b2_val, rs1_b2_val == -9, rs2_b0_val == -1, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b1_val == -2, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b2_val == -9
// opcode: radd8 ; op1:x30; op2:x5; dest:x5; op1val:0xf6f706c0;  op2val:0xf8f7feff
TEST_RR_OP(radd8, x5, x30, x5, 0x00000000, 0xf6f706c0, 0xf8f7feff, x16, 16, x17)

inst_5:// rs1==x8, rs2==x26, rd==x3, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b2_val == -65, rs2_b3_val == -3, rs1_b1_val == -3, rs1_b0_val == -86, rs2_b1_val == -128, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val == rs2_b0_val, rs2_b0_val == -86, rs2_b2_val == 32
// opcode: radd8 ; op1:x8; op2:x26; dest:x3; op1val:0xc0bffdaa;  op2val:0xfd2080aa
TEST_RR_OP(radd8, x3, x8, x26, 0x00000000, 0xc0bffdaa, 0xfd2080aa, x16, 20, x17)

inst_6:// rs1==x31, rs2==x20, rd==x25, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 85, rs1_b0_val == 2, rs1_b3_val == -65, rs2_b2_val == 2
// opcode: radd8 ; op1:x31; op2:x20; dest:x25; op1val:0xbf035502;  op2val:0x3f020407
TEST_RR_OP(radd8, x25, x31, x20, 0x00000000, 0xbf035502, 0x3f020407, x16, 24, x17)

inst_7:// rs1==x22, rs2==x3, rd==x27, rs2_b3_val == -86, rs1_b0_val == -33, rs2_b0_val == -9, rs1_b1_val == -17
// opcode: radd8 ; op1:x22; op2:x3; dest:x27; op1val:0x908efdf;  op2val:0xaaf63ff7
TEST_RR_OP(radd8, x27, x22, x3, 0x00000000, 0x908efdf, 0xaaf63ff7, x16, 28, x17)

inst_8:// rs1==x10, rs2==x8, rd==x31, rs2_b3_val == 85, rs1_b3_val == 32, rs2_b0_val == 1, rs1_b1_val == 8
// opcode: radd8 ; op1:x10; op2:x8; dest:x31; op1val:0x200608df;  op2val:0x55c07f01
TEST_RR_OP(radd8, x31, x10, x8, 0x00000000, 0x200608df, 0x55c07f01, x16, 32, x17)

inst_9:// rs1==x5, rs2==x7, rd==x1, rs2_b3_val == 127, rs2_b0_val == 64, rs1_b2_val == -1, rs1_b0_val == -3
// opcode: radd8 ; op1:x5; op2:x7; dest:x1; op1val:0x6fff8fd;  op2val:0x7ffb0940
TEST_RR_OP(radd8, x1, x5, x7, 0x00000000, 0x6fff8fd, 0x7ffb0940, x16, 36, x17)

inst_10:// rs1==x9, rs2==x1, rd==x30, rs2_b3_val == -33, rs1_b1_val == 1
// opcode: radd8 ; op1:x9; op2:x1; dest:x30; op1val:0xf6bf0140;  op2val:0xdf3f7f03
TEST_RR_OP(radd8, x30, x9, x1, 0x00000000, 0xf6bf0140, 0xdf3f7f03, x16, 40, x17)

inst_11:// rs1==x27, rs2==x10, rd==x2, rs2_b3_val == -17, rs2_b0_val == 8, rs1_b2_val == 1, rs2_b2_val == 85, rs1_b3_val == -128, rs1_b0_val == -1, rs1_b1_val == -128
// opcode: radd8 ; op1:x27; op2:x10; dest:x2; op1val:0x800180ff;  op2val:0xef55fe08
TEST_RR_OP(radd8, x2, x27, x10, 0x00000000, 0x800180ff, 0xef55fe08, x16, 44, x17)

inst_12:// rs1==x4, rs2==x18, rd==x9, rs2_b3_val == -9, rs2_b2_val == 64, rs1_b3_val == 2, rs1_b2_val == -33, rs2_b1_val == -17
// opcode: radd8 ; op1:x4; op2:x18; dest:x9; op1val:0x2dff808;  op2val:0xf740effc
TEST_RR_OP(radd8, x9, x4, x18, 0x00000000, 0x2dff808, 0xf740effc, x16, 48, x17)

inst_13:// rs1==x20, rs2==x14, rd==x11, rs2_b3_val == -2, rs2_b2_val == 4
// opcode: radd8 ; op1:x20; op2:x14; dest:x11; op1val:0xf605f8f8;  op2val:0xfe0480c0
TEST_RR_OP(radd8, x11, x20, x14, 0x00000000, 0xf605f8f8, 0xfe0480c0, x16, 52, x17)

inst_14:// rs1==x28, rs2==x30, rd==x14, rs2_b3_val == -128, rs2_b1_val == 64, rs1_b3_val == 8
// opcode: radd8 ; op1:x28; op2:x30; dest:x14; op1val:0x807f9aa;  op2val:0x800140aa
TEST_RR_OP(radd8, x14, x28, x30, 0x00000000, 0x807f9aa, 0x800140aa, x16, 56, x17)

inst_15:// rs1==x1, rs2==x22, rd==x12, rs2_b3_val == 64, rs2_b1_val == -86, rs1_b1_val == -1
// opcode: radd8 ; op1:x1; op2:x22; dest:x12; op1val:0xbf05ff09;  op2val:0x40fbaa07
TEST_RR_OP(radd8, x12, x1, x22, 0x00000000, 0xbf05ff09, 0x40fbaa07, x16, 60, x17)

inst_16:// rs1==x15, rs2==x2, rd==x20, rs2_b3_val == 32, rs2_b0_val == -17, rs1_b2_val == 0
// opcode: radd8 ; op1:x15; op2:x2; dest:x20; op1val:0x20003ffd;  op2val:0x20033fef
TEST_RR_OP(radd8, x20, x15, x2, 0x00000000, 0x20003ffd, 0x20033fef, x16, 64, x17)

inst_17:// rs1==x0, rs2==x15, rd==x22, rs2_b3_val == 16, rs2_b2_val == -3
// opcode: radd8 ; op1:x0; op2:x15; dest:x22; op1val:0xf6c0c0c0;  op2val:0x10fdc0aa
TEST_RR_OP(radd8, x22, x0, x15, 0x00000000, 0xf6c0c0c0, 0x10fdc0aa, x16, 68, x17)

inst_18:// rs1==x21, rs2==x13, rd==x19, rs2_b3_val == 8, rs2_b2_val == -86
// opcode: radd8 ; op1:x21; op2:x13; dest:x19; op1val:0xbf00ef08;  op2val:0x8aa3f01
TEST_RR_OP(radd8, x19, x21, x13, 0x00000000, 0xbf00ef08, 0x8aa3f01, x16, 72, x17)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:// rs1==x24, rs2==x19, rd==x16, rs2_b3_val == 2, rs1_b3_val == -2, rs1_b2_val == -86
// opcode: radd8 ; op1:x24; op2:x19; dest:x16; op1val:0xfeaa40fd;  op2val:0x2fc03fc
TEST_RR_OP(radd8, x16, x24, x19, 0x00000000, 0xfeaa40fd, 0x2fc03fc, x1, 0, x8)

inst_20:// rs1==x12, rs2==x16, rd==x0, rs2_b3_val == 0, rs1_b1_val == 2, rs2_b0_val == 0, rs1_b0_val == 127, rs2_b1_val == -3, rs1_b3_val == 127, rs1_b2_val == 85
// opcode: radd8 ; op1:x12; op2:x16; dest:x0; op1val:0x7f55027f;  op2val:0x05fd00
TEST_RR_OP(radd8, x0, x12, x16, 0x00000000, 0x7f55027f, 0x05fd00, x1, 4, x8)

inst_21:// rs1==x7, rs2==x9, rd==x24, rs2_b3_val == -1, rs1_b2_val == 2
// opcode: radd8 ; op1:x7; op2:x9; dest:x24; op1val:0xfe0207f8;  op2val:0xfff70840
TEST_RR_OP(radd8, x24, x7, x9, 0x00000000, 0xfe0207f8, 0xfff70840, x1, 8, x8)

inst_22:// rs1==x29, rs2==x24, rd==x21, rs2_b2_val == 127, rs1_b1_val == 16
// opcode: radd8 ; op1:x29; op2:x24; dest:x21; op1val:0xc00010f8;  op2val:0x3f7f03fa
TEST_RR_OP(radd8, x21, x29, x24, 0x00000000, 0xc00010f8, 0x3f7f03fa, x1, 12, x8)

inst_23:// rs1==x2, rs2==x0, rd==x29, rs2_b2_val == -65, rs1_b3_val == 64
// opcode: radd8 ; op1:x2; op2:x0; dest:x29; op1val:0x40048040;  op2val:0x8bf3ffc
TEST_RR_OP(radd8, x29, x2, x0, 0x00000000, 0x40048040, 0x8bf3ffc, x1, 16, x8)

inst_24:// rs1==x11, rs2==x29, rd==x28, rs2_b2_val == -33, rs1_b0_val == 32, rs1_b3_val == 85
// opcode: radd8 ; op1:x11; op2:x29; dest:x28; op1val:0x55ff0620;  op2val:0xfedffc09
TEST_RR_OP(radd8, x28, x11, x29, 0x00000000, 0x55ff0620, 0xfedffc09, x1, 20, x8)

inst_25:// rs1==x17, rs2==x6, rd==x10, rs2_b2_val == -17, rs1_b2_val == 32
// opcode: radd8 ; op1:x17; op2:x6; dest:x10; op1val:0xfa2055fa;  op2val:0xefefeffa
TEST_RR_OP(radd8, x10, x17, x6, 0x00000000, 0xfa2055fa, 0xefefeffa, x1, 24, x8)

inst_26:// rs1==x18, rs2==x21, rd==x6, rs1_b2_val == -17, 
// opcode: radd8 ; op1:x18; op2:x21; dest:x6; op1val:0xbfef1002;  op2val:0xbf0708f8
TEST_RR_OP(radd8, x6, x18, x21, 0x00000000, 0xbfef1002, 0xbf0708f8, x1, 28, x8)

inst_27:// rs1==x19, rs2==x4, rd==x15, rs1_b2_val == -5, rs1_b3_val == -33, rs2_b1_val == 16
// opcode: radd8 ; op1:x19; op2:x4; dest:x15; op1val:0xdffb1005;  op2val:0xfdfd10bf
TEST_RR_OP(radd8, x15, x19, x4, 0x00000000, 0xdffb1005, 0xfdfd10bf, x1, 32, x8)

inst_28:// rs1==x16, rs2==x11, rd==x18, rs1_b2_val == -3, rs2_b1_val == -9
// opcode: radd8 ; op1:x16; op2:x11; dest:x18; op1val:0x3fd4007;  op2val:0xdf06f702
TEST_RR_OP(radd8, x18, x16, x11, 0x00000000, 0x3fd4007, 0xdf06f702, x1, 36, x8)

inst_29:// rs1==x3, rs2==x17, rd==x4, rs1_b2_val == -2, 
// opcode: radd8 ; op1:x3; op2:x17; dest:x4; op1val:0xf8fe0806;  op2val:0xfff780fa
TEST_RR_OP(radd8, x4, x3, x17, 0x00000000, 0xf8fe0806, 0xfff780fa, x1, 40, x8)

inst_30:// rs1==x14, rs2==x12, rd==x17, rs1_b2_val == -128, rs1_b1_val == 127, rs2_b2_val == -128
// opcode: radd8 ; op1:x14; op2:x12; dest:x17; op1val:0xf6807fff;  op2val:0x8080eff6
TEST_RR_OP(radd8, x17, x14, x12, 0x00000000, 0xf6807fff, 0x8080eff6, x1, 44, x8)

inst_31:// rs1==x26, rs1_b2_val == 64, rs1_b1_val == -65, rs2_b2_val == -2
// opcode: radd8 ; op1:x26; op2:x5; dest:x28; op1val:0x5540bffa;  op2val:0x9fe08f9
TEST_RR_OP(radd8, x28, x26, x5, 0x00000000, 0x5540bffa, 0x9fe08f9, x1, 48, x8)

inst_32:// rs2==x31, rs1_b2_val == 16, 
// opcode: radd8 ; op1:x4; op2:x31; dest:x20; op1val:0xf810fa7f;  op2val:0xfdf9f6f6
TEST_RR_OP(radd8, x20, x4, x31, 0x00000000, 0xf810fa7f, 0xfdf9f6f6, x1, 52, x8)

inst_33:// rd==x26, rs1_b1_val == -86, 
// opcode: radd8 ; op1:x5; op2:x12; dest:x26; op1val:0x3fbaafc;  op2val:0xaadf0506
TEST_RR_OP(radd8, x26, x5, x12, 0x00000000, 0x3fbaafc, 0xaadf0506, x1, 56, x8)

inst_34:// rs1_b1_val == -33, rs2_b0_val == 85
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f06df08;  op2val:0xfefcf655
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x3f06df08, 0xfefcf655, x1, 60, x8)

inst_35:// rs1_b1_val == -9, rs2_b2_val == 0
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x907f7fc;  op2val:0xfb00f93f
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x907f7fc, 0xfb00f93f, x1, 64, x8)

inst_36:// rs1_b1_val == -5, rs2_b0_val == 4, rs2_b1_val == -65, rs1_b0_val == 1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf04fb01;  op2val:0xdfc0bf04
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xbf04fb01, 0xdfc0bf04, x1, 68, x8)

inst_37:// rs1_b1_val == -2, rs2_b0_val == -2
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x910fef9;  op2val:0x20803ffe
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x910fef9, 0x20803ffe, x1, 72, x8)

inst_38:// rs1_b1_val == 32, rs2_b0_val == -33
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x88020c0;  op2val:0x4004f7df
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x88020c0, 0x4004f7df, x1, 76, x8)

inst_39:// rs1_b1_val == 0, rs1_b3_val == -86, rs2_b0_val == 16
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0900fc;  op2val:0xc0c04010
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xaa0900fc, 0xc0c04010, x1, 80, x8)

inst_40:// rs1_b0_val == 85, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x83f1055;  op2val:0x3203fbf
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x83f1055, 0x3203fbf, x1, 84, x8)

inst_41:// rs2_b2_val == -1, rs2_b0_val == 32
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf909fefc;  op2val:0xfdfffd20
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf909fefc, 0xfdfffd20, x1, 88, x8)

inst_42:// rs2_b1_val == 85, rs1_b3_val == -1, rs1_b0_val == -5
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff03f9fb;  op2val:0x10005507
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xff03f9fb, 0x10005507, x1, 92, x8)

inst_43:// rs2_b1_val == -33, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3063f07;  op2val:0xfcaadfbf
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x3063f07, 0xfcaadfbf, x1, 96, x8)

inst_44:// rs2_b1_val == -5, rs1_b0_val == 16
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf902df10;  op2val:0xf9f9fb06
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf902df10, 0xf9f9fb06, x1, 100, x8)

inst_45:// rs2_b1_val == 32, rs1_b3_val == -17
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffd0606;  op2val:0x6fb20fb
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xeffd0606, 0x6fb20fb, x1, 104, x8)

inst_46:// rs2_b1_val == 2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa04f610;  op2val:0x1200202
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xfa04f610, 0x1200202, x1, 108, x8)

inst_47:// rs2_b1_val == 1, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff9fcaa;  op2val:0x5df01f7
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xbff9fcaa, 0x5df01f7, x1, 112, x8)

inst_48:// rs2_b1_val == 0, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x301f8aa;  op2val:0xc0c000f7
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x301f8aa, 0xc0c000f7, x1, 116, x8)

inst_49:// rs2_b1_val == -1, rs1_b3_val == 0, rs1_b0_val == -9
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2010f7;  op2val:0xf8bfffdf
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x2010f7, 0xf8bfffdf, x1, 120, x8)

inst_50:// rs2_b0_val == 127, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fdfaaff;  op2val:0x303087f
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x3fdfaaff, 0x303087f, x1, 124, x8)

inst_51:// rs1_b3_val == 1, rs1_b0_val == -65
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fadfbf;  op2val:0xdf09ff10
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x1fadfbf, 0xdf09ff10, x1, 128, x8)

inst_52:// rs1_b0_val == -17, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa02f7ef;  op2val:0x8f60702
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xaa02f7ef, 0x8f60702, x1, 132, x8)

inst_53:// rs1_b0_val == -2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffdbffe;  op2val:0x720ef7f
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xbffdbffe, 0x720ef7f, x1, 136, x8)

inst_54:// rs1_b3_val == -5, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb083f09;  op2val:0x480df55
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xfb083f09, 0x480df55, x1, 140, x8)

inst_55:// rs1_b3_val == -3, rs2_b0_val == -128
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0805f7;  op2val:0x4060380
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xfd0805f7, 0x4060380, x1, 144, x8)

inst_56:// rs1_b0_val == 4, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8557f04;  op2val:0xfdc020ff
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf8557f04, 0xfdc020ff, x1, 148, x8)

inst_57:// rs1_b3_val == 16, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f8ff07;  op2val:0xf8fcfd00
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x10f8ff07, 0xf8fcfd00, x1, 152, x8)

inst_58:// rs2_b2_val == 16, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6fa8010;  op2val:0x5510ef04
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf6fa8010, 0x5510ef04, x1, 156, x8)

inst_59:// rs2_b2_val == 8, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9ef0702;  op2val:0xef0803fc
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf9ef0702, 0xef0803fc, x1, 160, x8)

inst_60:// rs2_b0_val == -3, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf71003;  op2val:0x1febffd
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0xf71003, 0x1febffd, x1, 164, x8)

inst_61:// rs1_b0_val == 0, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x6550600;  op2val:0x3f3f5509
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x6550600, 0x3f3f5509, x1, 168, x8)

inst_62:// rs1_b3_val == rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b3_val == 4, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b1_val == 4, rs1_b0_val == 64, rs2_b2_val == -5, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b3_val == 4, rs2_b0_val == -5
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x406f640;  op2val:0x4fb04fb
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x406f640, 0x4fb04fb, x1, 172, x8)

inst_63:// rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b3_val == -5, rs1_b1_val == 4, rs1_b2_val == 4, rs1_b1_val == rs2_b1_val, rs1_b0_val == 8, rs2_b2_val == 1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5040408;  op2val:0xfb0104bf
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x5040408, 0xfb0104bf, x1, 176, x8)

inst_64:// rs2_b3_val == 0, rs1_b1_val == 2, rs2_b0_val == 0, rs1_b0_val == 127, rs2_b1_val == -3, rs1_b3_val == 127, rs1_b2_val == 85
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f55027f;  op2val:0x05fd00
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x7f55027f, 0x05fd00, x1, 180, x8)

inst_65:// rs2_b2_val == -65, rs1_b3_val == 64
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40048040;  op2val:0x8bf3ffc
TEST_RR_OP(radd8, x31, x30, x29, 0x00000000, 0x40048040, 0x8bf3ffc, x1, 184, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 47*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
