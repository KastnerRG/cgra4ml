
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmada instruction of the RISC-V RV32PZicsr extension for the kmada covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmada)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x19, rd==x29, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == 2048, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 32
// opcode: kmada ; op1:x5; op2:x19; dest:x29; op1val:0x208000;  op2val:0xc0000800
TEST_PKRR_OP(kmada, x29, x5, x19, 0x00000000, 0x208000, 0xc0000800, x5, x21, 0, x4)

inst_1:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x22, rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -16385, rs1_h0_val == -8193, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kmada ; op1:x14; op2:x14; dest:x22; op1val:0x3fffdfff;  op2val:0x3fffbfff
TEST_PKRR_OP(kmada, x22, x14, x14, 0x00000000, 0x3fffdfff, 0x3fffbfff, x14, x21, 8, x4)

inst_2:
// rs1 == rd != rs2, rs1==x6, rs2==x24, rd==x6, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -5, rs2_h0_val == 21845, rs1_h1_val == -4097, rs2_h1_val == 1
// opcode: kmada ; op1:x6; op2:x24; dest:x6; op1val:0xeffffffb;  op2val:0x015555
TEST_PKRR_OP(kmada, x6, x6, x24, 0x00000000, 0xeffffffb, 0x015555, x6, x21, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -21846, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -1025
// opcode: kmada ; op1:x7; op2:x7; dest:x7; op1val:0xfff90001;  op2val:0xfbffaaaa
TEST_PKRR_OP(kmada, x7, x7, x7, 0x00000000, 0xfff90001, 0xfbffaaaa, x7, x21, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x12, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h0_val == 64, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 64
// opcode: kmada ; op1:x28; op2:x12; dest:x12; op1val:0xfff60040;  op2val:0xc0000040
TEST_PKRR_OP(kmada, x12, x28, x12, 0x00000000, 0xfff60040, 0xc0000040, x28, x21, 32, x4)

inst_5:
// rs1==x31, rs2==x13, rd==x8, rs2_h1_val == -21846, rs1_h0_val == 32767
// opcode: kmada ; op1:x31; op2:x13; dest:x8; op1val:0xfffa7fff;  op2val:0xaaaaaaaa
TEST_PKRR_OP(kmada, x8, x31, x13, 0x00000000, 0xfffa7fff, 0xaaaaaaaa, x31, x21, 40, x4)

inst_6:
// rs1==x11, rs2==x27, rd==x16, rs2_h1_val == 21845, rs1_h1_val == -17, rs1_h0_val == -257
// opcode: kmada ; op1:x11; op2:x27; dest:x16; op1val:0xffeffeff;  op2val:0x55550005
TEST_PKRR_OP(kmada, x16, x11, x27, 0x00000000, 0xffeffeff, 0x55550005, x11, x21, 48, x4)

inst_7:
// rs1==x0, rs2==x10, rd==x14, rs2_h1_val == 32767, rs1_h0_val == 1024
// opcode: kmada ; op1:x0; op2:x10; dest:x14; op1val:0x070400;  op2val:0x7fff0009
TEST_PKRR_OP(kmada, x14, x0, x10, 0x00000000, 0x070400, 0x7fff0009, x0, x21, 56, x4)

inst_8:
// rs1==x15, rs2==x17, rd==x2, rs2_h1_val == -16385, rs1_h0_val == 2, rs2_h0_val == 8192, rs1_h1_val == 0
// opcode: kmada ; op1:x15; op2:x17; dest:x2; op1val:0x000002;  op2val:0xbfff2000
TEST_PKRR_OP(kmada, x2, x15, x17, 0x00000000, 0x000002, 0xbfff2000, x15, x21, 64, x4)

inst_9:
// rs1==x23, rs2==x0, rd==x17, rs2_h1_val == -8193, rs1_h1_val == -16385, rs1_h0_val == -21846
// opcode: kmada ; op1:x23; op2:x0; dest:x17; op1val:0xbfffaaaa;  op2val:0xdfff0007
TEST_PKRR_OP(kmada, x17, x23, x0, 0x00000000, 0xbfffaaaa, 0xdfff0007, x23, x21, 72, x4)

inst_10:
// rs1==x3, rs2==x1, rd==x25, rs2_h1_val == -4097, rs1_h0_val == 512, rs1_h1_val == 1
// opcode: kmada ; op1:x3; op2:x1; dest:x25; op1val:0x010200;  op2val:0xefff0800
TEST_PKRR_OP(kmada, x25, x3, x1, 0x00000000, 0x010200, 0xefff0800, x3, x21, 80, x4)

inst_11:
// rs1==x20, rs2==x25, rd==x9, rs2_h1_val == -2049, rs2_h0_val == -32768
// opcode: kmada ; op1:x20; op2:x25; dest:x9; op1val:0xfff68000;  op2val:0xf7ff8000
TEST_PKRR_OP(kmada, x9, x20, x25, 0x00000000, 0xfff68000, 0xf7ff8000, x20, x21, 88, x4)

inst_12:
// rs1==x13, rs2==x9, rd==x27, rs2_h1_val == -513, rs1_h1_val == 16384, rs1_h0_val == -129
// opcode: kmada ; op1:x13; op2:x9; dest:x27; op1val:0x4000ff7f;  op2val:0xfdff0009
TEST_PKRR_OP(kmada, x27, x13, x9, 0x00000000, 0x4000ff7f, 0xfdff0009, x13, x21, 96, x12)

inst_13:
// rs1==x4, rs2==x18, rd==x23, rs2_h1_val == -257, 
// opcode: kmada ; op1:x4; op2:x18; dest:x23; op1val:0x03dfff;  op2val:0xfeffaaaa
TEST_PKRR_OP(kmada, x23, x4, x18, 0x00000000, 0x03dfff, 0xfeffaaaa, x4, x21, 104, x12)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_14:
// rs1==x22, rs2==x4, rd==x1, rs2_h1_val == -129, rs2_h0_val == 32
// opcode: kmada ; op1:x22; op2:x4; dest:x1; op1val:0xfff9fffc;  op2val:0xff7f0020
TEST_PKRR_OP(kmada, x1, x22, x4, 0x00000000, 0xfff9fffc, 0xff7f0020, x22, x7, 0, x12)

inst_15:
// rs1==x18, rs2==x15, rd==x13, rs2_h1_val == -65, rs1_h1_val == -9, rs2_h0_val == -1, rs1_h0_val == 8
// opcode: kmada ; op1:x18; op2:x15; dest:x13; op1val:0xfff70008;  op2val:0xffbfffff
TEST_PKRR_OP(kmada, x13, x18, x15, 0x00000000, 0xfff70008, 0xffbfffff, x18, x7, 8, x12)

inst_16:
// rs1==x30, rs2==x29, rd==x15, rs2_h1_val == -33, 
// opcode: kmada ; op1:x30; op2:x29; dest:x15; op1val:0xbfff0005;  op2val:0xffdfc000
TEST_PKRR_OP(kmada, x15, x30, x29, 0x00000000, 0xbfff0005, 0xffdfc000, x30, x7, 16, x12)

inst_17:
// rs1==x16, rs2==x6, rd==x18, rs2_h1_val == -17, rs2_h0_val == 32767, rs1_h1_val == -3
// opcode: kmada ; op1:x16; op2:x6; dest:x18; op1val:0xfffd0009;  op2val:0xffef7fff
TEST_PKRR_OP(kmada, x18, x16, x6, 0x00000000, 0xfffd0009, 0xffef7fff, x16, x7, 24, x12)

inst_18:
// rs1==x29, rs2==x28, rd==x20, rs2_h1_val == -9, 
// opcode: kmada ; op1:x29; op2:x28; dest:x20; op1val:0xefffc000;  op2val:0xfff7ffff
TEST_PKRR_OP(kmada, x20, x29, x28, 0x00000000, 0xefffc000, 0xfff7ffff, x29, x7, 32, x12)

inst_19:
// rs1==x2, rs2==x31, rd==x26, rs2_h1_val == -5, rs1_h1_val == 64, rs1_h0_val == 32, rs2_h0_val == 4096
// opcode: kmada ; op1:x2; op2:x31; dest:x26; op1val:0x400020;  op2val:0xfffb1000
TEST_PKRR_OP(kmada, x26, x2, x31, 0x00000000, 0x400020, 0xfffb1000, x2, x7, 40, x12)

inst_20:
// rs1==x8, rs2==x3, rd==x5, rs2_h1_val == -3, rs1_h1_val == -5
// opcode: kmada ; op1:x8; op2:x3; dest:x5; op1val:0xfffbc000;  op2val:0xfffd0040
TEST_PKRR_OP(kmada, x5, x8, x3, 0x00000000, 0xfffbc000, 0xfffd0040, x8, x7, 48, x12)

inst_21:
// rs1==x19, rs2==x8, rd==x10, rs2_h1_val == -2, rs1_h0_val == 4096, rs1_h1_val == -32768
// opcode: kmada ; op1:x19; op2:x8; dest:x10; op1val:0x80001000;  op2val:0xfffe0009
TEST_PKRR_OP(kmada, x10, x19, x8, 0x00000000, 0x80001000, 0xfffe0009, x19, x7, 56, x12)

inst_22:
// rs1==x27, rs2==x11, rd==x21, rs2_h1_val == -32768, rs1_h0_val == -2049
// opcode: kmada ; op1:x27; op2:x11; dest:x21; op1val:0xfff6f7ff;  op2val:0x8000fff8
TEST_PKRR_OP(kmada, x21, x27, x11, 0x00000000, 0xfff6f7ff, 0x8000fff8, x27, x7, 64, x12)

inst_23:
// rs1==x24, rs2==x30, rd==x0, rs2_h1_val == 16384, 
// opcode: kmada ; op1:x24; op2:x30; dest:x0; op1val:0xfff60003;  op2val:0x40000040
TEST_PKRR_OP(kmada, x0, x24, x30, 0x00000000, 0xfff60003, 0x40000040, x24, x7, 72, x12)

inst_24:
// rs1==x10, rs2==x22, rd==x30, rs2_h1_val == 8192, rs1_h0_val == 21845
// opcode: kmada ; op1:x10; op2:x22; dest:x30; op1val:0xefff5555;  op2val:0x2000ffff
TEST_PKRR_OP(kmada, x30, x10, x22, 0x00000000, 0xefff5555, 0x2000ffff, x10, x7, 80, x6)

inst_25:
// rs1==x25, rs2==x20, rd==x19, rs2_h1_val == 4096, rs1_h0_val == 256, rs2_h0_val == 256, rs1_h1_val == 16
// opcode: kmada ; op1:x25; op2:x20; dest:x19; op1val:0x100100;  op2val:0x10000100
TEST_PKRR_OP(kmada, x19, x25, x20, 0x00000000, 0x100100, 0x10000100, x25, x7, 88, x6)

inst_26:
// rs1==x9, rs2==x2, rd==x28, rs2_h1_val == 2048, 
// opcode: kmada ; op1:x9; op2:x2; dest:x28; op1val:0x00fff6;  op2val:0x800c000
TEST_PKRR_OP(kmada, x28, x9, x2, 0x00000000, 0x00fff6, 0x800c000, x9, x7, 96, x6)

inst_27:
// rs1==x26, rs2==x21, rd==x24, rs2_h1_val == 1024, 
// opcode: kmada ; op1:x26; op2:x21; dest:x24; op1val:0xfff70002;  op2val:0x4000007
TEST_PKRR_OP(kmada, x24, x26, x21, 0x00000000, 0xfff70002, 0x4000007, x26, x7, 104, x6)

inst_28:
// rs1==x1, rs2==x26, rd==x4, rs2_h1_val == 512, 
// opcode: kmada ; op1:x1; op2:x26; dest:x4; op1val:0x3fff5555;  op2val:0x200bfff
TEST_PKRR_OP(kmada, x4, x1, x26, 0x00000000, 0x3fff5555, 0x200bfff, x1, x7, 112, x6)

inst_29:
// rs1==x21, rs2==x5, rd==x11, rs2_h1_val == 256, rs1_h0_val == -16385, rs2_h0_val == -65
// opcode: kmada ; op1:x21; op2:x5; dest:x11; op1val:0xfff7bfff;  op2val:0x100ffbf
TEST_PKRR_OP(kmada, x11, x21, x5, 0x00000000, 0xfff7bfff, 0x100ffbf, x21, x7, 120, x6)

inst_30:
// rs1==x12, rs2==x16, rd==x3, rs2_h1_val == 128, rs1_h1_val == 4
// opcode: kmada ; op1:x12; op2:x16; dest:x3; op1val:0x040040;  op2val:0x800009
TEST_PKRR_OP(kmada, x3, x12, x16, 0x00000000, 0x040040, 0x800009, x12, x7, 128, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x17, rs2==x23, rd==x31, rs2_h1_val == 64, rs1_h1_val == 4096, rs1_h0_val == -2
// opcode: kmada ; op1:x17; op2:x23; dest:x31; op1val:0x1000fffe;  op2val:0x405555
TEST_PKRR_OP(kmada, x31, x17, x23, 0x00000000, 0x1000fffe, 0x405555, x17, x1, 0, x6)

inst_32:
// rs2_h1_val == 32, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff9feff;  op2val:0x200007
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfff9feff, 0x200007, x30, x1, 8, x6)

inst_33:
// rs2_h1_val == 16, rs1_h1_val == -8193, rs1_h0_val == -1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0x10c000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xdfffffff, 0x10c000, x30, x1, 16, x6)

inst_34:
// rs2_h1_val == 8, rs2_h0_val == -9
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x10000020;  op2val:0x08fff7
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x10000020, 0x08fff7, x30, x1, 24, x6)

inst_35:
// rs1_h0_val == -1025, rs2_h1_val == -1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x03fbff;  op2val:0xffffc000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x03fbff, 0xffffc000, x30, x1, 32, x6)

inst_36:
// rs1_h0_val == -513, rs1_h1_val == 512
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff;  op2val:0xfff8ffbf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x200fdff, 0xfff8ffbf, x30, x1, 40, x6)

inst_37:
// rs1_h0_val == -65, rs1_h1_val == 1024
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x400ffbf;  op2val:0xefff3fff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x400ffbf, 0xefff3fff, x30, x1, 48, x6)

inst_38:
// rs1_h0_val == -33, rs2_h0_val == -17
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xefffffdf;  op2val:0x03ffef
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xefffffdf, 0x03ffef, x30, x1, 56, x6)

inst_39:
// rs1_h0_val == -17, rs2_h0_val == 2
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x400ffef;  op2val:0xefff0002
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x400ffef, 0xefff0002, x30, x1, 64, x6)

inst_40:
// rs1_h0_val == -9, rs2_h0_val == 512
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x01fff7;  op2val:0x800200
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x01fff7, 0x800200, x30, x1, 72, x6)

inst_41:
// rs1_h0_val == -3, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffd;  op2val:0x55550006
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xc000fffd, 0x55550006, x30, x1, 80, x6)

inst_42:
// rs1_h0_val == 16384, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xefff4000;  op2val:0xff7f0009
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xefff4000, 0xff7f0009, x30, x1, 88, x6)

inst_43:
// rs1_h0_val == 8192, rs1_h1_val == -65
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffbf2000;  op2val:0x7fff0040
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xffbf2000, 0x7fff0040, x30, x1, 96, x6)

inst_44:
// rs1_h0_val == 2048, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x10000800;  op2val:0xfffe0200
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x10000800, 0xfffe0200, x30, x1, 104, x6)

inst_45:
// rs1_h0_val == 128, rs1_h1_val == -513
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080;  op2val:0xfffafff8
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfdff0080, 0xfffafff8, x30, x1, 112, x6)

inst_46:
// rs1_h0_val == 16, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x050010;  op2val:0x20bfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x050010, 0x20bfff, x30, x1, 120, x6)

inst_47:
// rs1_h0_val == 4, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004;  op2val:0x012000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfffb0004, 0x012000, x30, x1, 128, x6)

inst_48:
// rs1_h0_val == 0, rs2_h1_val == 4, rs1_h1_val == -1025
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000;  op2val:0x040002
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfbff0000, 0x040002, x30, x1, 136, x6)

inst_49:
// rs2_h1_val == 2, rs2_h0_val == -2049
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x030800;  op2val:0x02f7ff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x030800, 0x02f7ff, x30, x1, 144, x6)

inst_50:
// rs2_h1_val == 0, rs2_h0_val == -8193
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x10000006;  op2val:0x00dfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x10000006, 0x00dfff, x30, x1, 152, x6)

inst_51:
// rs2_h0_val == -4097, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff;  op2val:0xfdffefff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xdffffeff, 0xfdffefff, x30, x1, 160, x6)

inst_52:
// rs2_h0_val == -1025, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffd;  op2val:0x10fbff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfff8fffd, 0x10fbff, x30, x1, 168, x6)

inst_53:
// rs2_h0_val == -5, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0002;  op2val:0xfefffffb
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfffa0002, 0xfefffffb, x30, x1, 176, x6)

inst_54:
// rs2_h0_val == -3, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7ff;  op2val:0x03fffd
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfffdf7ff, 0x03fffd, x30, x1, 184, x6)

inst_55:
// rs2_h0_val == -2, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x07c000;  op2val:0xfff6fffe
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x07c000, 0xfff6fffe, x30, x1, 192, x6)

inst_56:
// rs2_h0_val == 16384, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ff;  op2val:0xc0004000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfffcf7ff, 0xc0004000, x30, x1, 200, x6)

inst_57:
// rs2_h0_val == 1024, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x00c000;  op2val:0xfff80400
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x00c000, 0xfff80400, x30, x1, 208, x6)

inst_58:
// rs2_h0_val == 128, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf;  op2val:0xffdf0080
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xdfffffbf, 0xffdf0080, x30, x1, 216, x6)

inst_59:
// rs2_h0_val == 16, rs1_h1_val == 32767
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100;  op2val:0x3fff0010
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x7fff0100, 0x3fff0010, x30, x1, 224, x6)

inst_60:
// rs2_h0_val == 8, rs1_h1_val == -129
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff6;  op2val:0xffbf0008
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xff7ffff6, 0xffbf0008, x30, x1, 232, x6)

inst_61:
// rs2_h0_val == 4, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf;  op2val:0x070004
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x06ffbf, 0x070004, x30, x1, 240, x6)

inst_62:
// rs2_h0_val == 1, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x095555;  op2val:0xbfff0001
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x095555, 0xbfff0001, x30, x1, 248, x6)

inst_63:
// rs2_h0_val == 0, rs1_h1_val == 2
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff;  op2val:0xfffd0000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x02fdff, 0xfffd0000, x30, x1, 256, x6)

inst_64:
// rs1_h1_val == -21846, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff8;  op2val:0xfff7ffbf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xaaaafff8, 0xfff7ffbf, x30, x1, 264, x6)

inst_65:
// rs1_h1_val == 21845, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff;  op2val:0x080080
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x5555ffff, 0x080080, x30, x1, 272, x6)

inst_66:
// rs1_h1_val == -33, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffdf8000;  op2val:0x040009
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xffdf8000, 0x040009, x30, x1, 280, x6)

inst_67:
// rs1_h1_val == -2, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0004;  op2val:0x090002
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfffe0004, 0x090002, x30, x1, 288, x6)

inst_68:
// rs1_h0_val == -4097, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x5555efff;  op2val:0x7fff4000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x5555efff, 0x7fff4000, x30, x1, 296, x6)

inst_69:
// rs1_h1_val == 8192, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdf;  op2val:0x55550800
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x2000ffdf, 0x55550800, x30, x1, 304, x6)

inst_70:
// rs2_h0_val == -129, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x400005;  op2val:0xfeffff7f
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x400005, 0xfeffff7f, x30, x1, 312, x6)

inst_71:
// rs1_h1_val == 2048, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x8002000;  op2val:0x058000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x8002000, 0x058000, x30, x1, 320, x6)

inst_72:
// rs1_h1_val == 256, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x1002000;  op2val:0xfffcfff9
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x1002000, 0xfffcfff9, x30, x1, 328, x6)

inst_73:
// rs1_h1_val == 128, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x800200;  op2val:0xfff7fff7
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x800200, 0xfff7fff7, x30, x1, 336, x6)

inst_74:
// rs1_h1_val == 8, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x080200;  op2val:0x800fffc
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x080200, 0x800fffc, x30, x1, 344, x6)

inst_75:
// rs1_h1_val == -1, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffff1000;  op2val:0x100800
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xffff1000, 0x100800, x30, x1, 352, x6)

inst_76:
// rs2_h0_val == -513, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x800002;  op2val:0x03fdff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x800002, 0x03fdff, x30, x1, 360, x6)

inst_77:
// rs2_h0_val == -257, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabfff;  op2val:0x40feff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xaaaabfff, 0x40feff, x30, x1, 368, x6)

inst_78:
// rs1_h1_val == -2049, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0006;  op2val:0xfff6bfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xf7ff0006, 0xfff6bfff, x30, x1, 376, x6)

inst_79:
// rs2_h0_val == -33, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7f;  op2val:0xdfffffdf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x40ff7f, 0xdfffffdf, x30, x1, 384, x6)

inst_80:
// rs1_h1_val == -257, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfeff2000;  op2val:0xfdffffbf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfeff2000, 0xfdffffbf, x30, x1, 392, x6)

inst_81:
// rs1_h1_val == rs2_h1_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -16385, rs1_h0_val == -8193, rs1_h1_val > 0 and rs2_h1_val > 0
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x3fffdfff;  op2val:0x3fffbfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x3fffdfff, 0x3fffbfff, x30, x1, 400, x6)

inst_82:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -21846, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -1025
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff90001;  op2val:0xfbffaaaa
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfff90001, 0xfbffaaaa, x30, x1, 408, x6)

inst_83:
// rs2_h1_val == 32767, rs1_h0_val == 1024
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x070400;  op2val:0x7fff0009
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0x070400, 0x7fff0009, x30, x1, 416, x6)

inst_84:
// rs2_h1_val == -8193, rs1_h1_val == -16385, rs1_h0_val == -21846
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaa;  op2val:0xdfff0007
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xbfffaaaa, 0xdfff0007, x30, x1, 424, x6)

inst_85:
// rs2_h1_val == 16384, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff60003;  op2val:0x40000040
TEST_PKRR_OP(kmada, x31, x30, x29, 0x00000000, 0xfff60003, 0x40000040, x30, x1, 432, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
