
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smax8 instruction of the RISC-V RV32PZicsr extension for the smax8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smax8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x31, rd==x27, rs1_b0_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val == -128, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b1_val == 32, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0
// opcode: smax8 ; op1:x30; op2:x31; dest:x27; op1val:0x9800580;  op2val:0xf6062006
TEST_RR_OP(smax8, x27, x30, x31, 0x00000000, 0x9800580, 0xf6062006, x4, 0, x5)

inst_1:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x17, rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b0_val == -65, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b1_val == 8
// opcode: smax8 ; op1:x28; op2:x28; dest:x17; op1val:0xf90708bf;  op2val:0xf9fafac0
TEST_RR_OP(smax8, x17, x28, x28, 0x00000000, 0xf90708bf, 0xf9fafac0, x4, 4, x5)

inst_2:
// rs1 == rd != rs2, rs1==x18, rs2==x13, rd==x18, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b1_val == -65, rs2_b0_val == 2, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val == rs2_b1_val, rs2_b2_val == 85, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b3_val == -17, rs1_b1_val == -65, rs1_b0_val > 0 and rs2_b0_val > 0
// opcode: smax8 ; op1:x18; op2:x13; dest:x18; op1val:0xef07bf3f;  op2val:0x555bf02
TEST_RR_OP(smax8, x18, x18, x13, 0x00000000, 0xef07bf3f, 0x555bf02, x4, 8, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -2, rs2_b1_val == -17, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b0_val == 16, rs2_b3_val == 127
// opcode: smax8 ; op1:x7; op2:x7; dest:x7; op1val:0x6fe0510;  op2val:0x7ff6ef05
TEST_RR_OP(smax8, x7, x7, x7, 0x00000000, 0x6fe0510, 0x7ff6ef05, x4, 12, x5)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x29, rd==x29, rs1_b2_val == rs2_b2_val, rs2_b0_val == 32, rs2_b3_val == 1, rs1_b3_val == -33, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val == 0, rs2_b2_val == -128
// opcode: smax8 ; op1:x13; op2:x29; dest:x29; op1val:0xdf80fc00;  op2val:0x1803f20
TEST_RR_OP(smax8, x29, x13, x29, 0x00000000, 0xdf80fc00, 0x1803f20, x4, 16, x5)

inst_5:
// rs1==x10, rs2==x0, rd==x11, rs1_b0_val == rs2_b0_val, rs1_b1_val == 64, rs2_b3_val == -65, rs2_b1_val == 16, rs2_b0_val == 0
// opcode: smax8 ; op1:x10; op2:x0; dest:x11; op1val:0xc0fa4000;  op2val:0xbf061000
TEST_RR_OP(smax8, x11, x10, x0, 0x00000000, 0xc0fa4000, 0xbf061000, x4, 20, x5)

inst_6:
// rs1==x24, rs2==x23, rd==x3, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b3_val == -3, rs1_b2_val == -33, rs1_b3_val == -9, rs2_b2_val == -17, rs1_b1_val == 127, rs2_b0_val == -2
// opcode: smax8 ; op1:x24; op2:x23; dest:x3; op1val:0xf7df7f3f;  op2val:0xfdef3ffe
TEST_RR_OP(smax8, x3, x24, x23, 0x00000000, 0xf7df7f3f, 0xfdef3ffe, x4, 24, x5)

inst_7:
// rs1==x16, rs2==x15, rd==x31, rs2_b3_val == -86, rs1_b3_val == 0, rs1_b0_val == -17, rs2_b1_val == -128
// opcode: smax8 ; op1:x16; op2:x15; dest:x31; op1val:0x8009ef;  op2val:0xaa558020
TEST_RR_OP(smax8, x31, x16, x15, 0x00000000, 0x8009ef, 0xaa558020, x4, 28, x5)

inst_8:
// rs1==x23, rs2==x27, rd==x24, rs2_b3_val == 85, rs1_b2_val == -5, rs1_b0_val == 2, rs1_b3_val == 64
// opcode: smax8 ; op1:x23; op2:x27; dest:x24; op1val:0x40fbfc02;  op2val:0x55090707
TEST_RR_OP(smax8, x24, x23, x27, 0x00000000, 0x40fbfc02, 0x55090707, x4, 32, x5)

inst_9:
// rs1==x9, rs2==x18, rd==x1, rs2_b3_val == -33, rs1_b1_val == -9, rs1_b0_val == 32, rs2_b1_val == 8
// opcode: smax8 ; op1:x9; op2:x18; dest:x1; op1val:0xf8dff720;  op2val:0xdf550805
TEST_RR_OP(smax8, x1, x9, x18, 0x00000000, 0xf8dff720, 0xdf550805, x4, 36, x5)

inst_10:
// rs1==x26, rs2==x25, rd==x19, rs2_b3_val == -17, rs1_b1_val == 1, rs2_b0_val == -3, rs2_b2_val == -86, rs1_b2_val == -3
// opcode: smax8 ; op1:x26; op2:x25; dest:x19; op1val:0xf6fd013f;  op2val:0xefaaf9fd
TEST_RR_OP(smax8, x19, x26, x25, 0x00000000, 0xf6fd013f, 0xefaaf9fd, x4, 40, x5)

inst_11:
// rs1==x21, rs2==x8, rd==x9, rs2_b3_val == -9, rs2_b1_val == 4, rs1_b3_val == -2, rs2_b0_val == -86, rs1_b1_val == 16
// opcode: smax8 ; op1:x21; op2:x8; dest:x9; op1val:0xfef610bf;  op2val:0xf70604aa
TEST_RR_OP(smax8, x9, x21, x8, 0x00000000, 0xfef610bf, 0xf70604aa, x4, 44, x5)

inst_12:
// rs1==x31, rs2==x3, rd==x13, rs2_b3_val == -5, rs2_b2_val == 64, rs1_b3_val == -3, rs2_b0_val == 8, rs1_b1_val == 4
// opcode: smax8 ; op1:x31; op2:x3; dest:x13; op1val:0xfdf804f9;  op2val:0xfb40f608
TEST_RR_OP(smax8, x13, x31, x3, 0x00000000, 0xfdf804f9, 0xfb40f608, x4, 48, x5)

inst_13:
// rs1==x29, rs2==x6, rd==x30, rs2_b3_val == -2, rs1_b2_val == -17, rs2_b1_val == 0, rs1_b3_val == 32, rs2_b2_val == 1
// opcode: smax8 ; op1:x29; op2:x6; dest:x30; op1val:0x20effa05;  op2val:0xfe010009
TEST_RR_OP(smax8, x30, x29, x6, 0x00000000, 0x20effa05, 0xfe010009, x4, 52, x5)

inst_14:
// rs1==x19, rs2==x9, rd==x16, rs2_b3_val == -128, rs2_b2_val == -5
// opcode: smax8 ; op1:x19; op2:x9; dest:x16; op1val:0xfa05fa00;  op2val:0x80fbc0fc
TEST_RR_OP(smax8, x16, x19, x9, 0x00000000, 0xfa05fa00, 0x80fbc0fc, x4, 56, x5)

inst_15:
// rs1==x14, rs2==x19, rd==x23, rs2_b3_val == 64, rs1_b0_val == -5, rs1_b2_val == -86
// opcode: smax8 ; op1:x14; op2:x19; dest:x23; op1val:0xefaa06fb;  op2val:0x40c00809
TEST_RR_OP(smax8, x23, x14, x19, 0x00000000, 0xefaa06fb, 0x40c00809, x4, 60, x5)

inst_16:
// rs1==x20, rs2==x26, rd==x2, rs2_b3_val == 32, rs2_b2_val == -33, rs1_b2_val == 32, rs2_b0_val == 4, rs1_b1_val == 85
// opcode: smax8 ; op1:x20; op2:x26; dest:x2; op1val:0xc02055c0;  op2val:0x20dfbf04
TEST_RR_OP(smax8, x2, x20, x26, 0x00000000, 0xc02055c0, 0x20dfbf04, x4, 64, x5)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x4, rs2==x20, rd==x25, rs2_b3_val == 16, rs1_b1_val == 2, rs2_b1_val == -2, rs1_b0_val == 4, rs2_b0_val == 1
// opcode: smax8 ; op1:x4; op2:x20; dest:x25; op1val:0x5060204;  op2val:0x1003fe01
TEST_RR_OP(smax8, x25, x4, x20, 0x00000000, 0x5060204, 0x1003fe01, x7, 0, x9)

inst_18:
// rs1==x27, rs2==x5, rd==x14, rs2_b3_val == 8, rs1_b0_val == -33
// opcode: smax8 ; op1:x27; op2:x5; dest:x14; op1val:0xf9fdfadf;  op2val:0x855fe06
TEST_RR_OP(smax8, x14, x27, x5, 0x00000000, 0xf9fdfadf, 0x855fe06, x7, 4, x9)

inst_19:
// rs1==x25, rs2==x1, rd==x6, rs2_b3_val == 4, rs2_b1_val == -86, rs1_b0_val == 127, rs2_b2_val == -9, rs1_b1_val == -2, rs2_b0_val == -5
// opcode: smax8 ; op1:x25; op2:x1; dest:x6; op1val:0x93ffe7f;  op2val:0x4f7aafb
TEST_RR_OP(smax8, x6, x25, x1, 0x00000000, 0x93ffe7f, 0x4f7aafb, x7, 8, x9)

inst_20:
// rs1==x5, rs2==x17, rd==x28, rs2_b3_val == 2, rs1_b1_val == -33, rs1_b0_val == -3
// opcode: smax8 ; op1:x5; op2:x17; dest:x28; op1val:0xfa03dffd;  op2val:0x2fc20f9
TEST_RR_OP(smax8, x28, x5, x17, 0x00000000, 0xfa03dffd, 0x2fc20f9, x7, 12, x9)

inst_21:
// rs1==x0, rs2==x16, rd==x22, rs2_b3_val == 0, rs1_b1_val == -1, rs2_b2_val == -2, rs1_b3_val == 8
// opcode: smax8 ; op1:x0; op2:x16; dest:x22; op1val:0x8faffef;  op2val:0xfec005
TEST_RR_OP(smax8, x22, x0, x16, 0x00000000, 0x8faffef, 0xfec005, x7, 16, x9)

inst_22:
// rs1==x1, rs2==x14, rd==x0, rs2_b3_val == -1, rs2_b2_val == -65
// opcode: smax8 ; op1:x1; op2:x14; dest:x0; op1val:0xf9fa0309;  op2val:0xffbf0803
TEST_RR_OP(smax8, x0, x1, x14, 0x00000000, 0xf9fa0309, 0xffbf0803, x7, 20, x9)

inst_23:
// rs1==x2, rs2==x24, rd==x5, rs2_b2_val == 127, rs1_b2_val == -1, rs1_b1_val == -5
// opcode: smax8 ; op1:x2; op2:x24; dest:x5; op1val:0xdffffb00;  op2val:0x47f0905
TEST_RR_OP(smax8, x5, x2, x24, 0x00000000, 0xdffffb00, 0x47f0905, x7, 24, x9)

inst_24:
// rs1==x6, rs2==x2, rd==x8, rs2_b2_val == -3, rs1_b3_val == 4, rs1_b2_val == -65, rs1_b0_val == -2
// opcode: smax8 ; op1:x6; op2:x2; dest:x8; op1val:0x4bf05fe;  op2val:0xf6fdf9fc
TEST_RR_OP(smax8, x8, x6, x2, 0x00000000, 0x4bf05fe, 0xf6fdf9fc, x7, 28, x9)

inst_25:
// rs1==x15, rs2==x22, rd==x21, rs1_b2_val == -9, rs2_b1_val == -3, rs1_b3_val == 85, rs2_b0_val == -9, rs2_b2_val == 4, rs1_b1_val == 32
// opcode: smax8 ; op1:x15; op2:x22; dest:x21; op1val:0x55f7207f;  op2val:0x204fdf7
TEST_RR_OP(smax8, x21, x15, x22, 0x00000000, 0x55f7207f, 0x204fdf7, x7, 32, x9)

inst_26:
// rs1==x22, rs2==x11, rd==x4, rs1_b2_val == 64, rs1_b3_val == -86
// opcode: smax8 ; op1:x22; op2:x11; dest:x4; op1val:0xaa407fef;  op2val:0x20bff901
TEST_RR_OP(smax8, x4, x22, x11, 0x00000000, 0xaa407fef, 0x20bff901, x7, 36, x9)

inst_27:
// rs1==x11, rs2==x21, rd==x10, rs1_b2_val == 16, rs2_b0_val == 16, rs1_b1_val == -128
// opcode: smax8 ; op1:x11; op2:x21; dest:x10; op1val:0xfd1080f9;  op2val:0x80041010
TEST_RR_OP(smax8, x10, x11, x21, 0x00000000, 0xfd1080f9, 0x80041010, x7, 40, x9)

inst_28:
// rs1==x8, rs2==x10, rd==x12, rs1_b2_val == 8, rs2_b1_val == 1, rs1_b3_val == 127
// opcode: smax8 ; op1:x8; op2:x10; dest:x12; op1val:0x7f081020;  op2val:0x40800109
TEST_RR_OP(smax8, x12, x8, x10, 0x00000000, 0x7f081020, 0x40800109, x7, 44, x9)

inst_29:
// rs1==x17, rs2==x4, rd==x26, rs1_b2_val == 4, 
// opcode: smax8 ; op1:x17; op2:x4; dest:x26; op1val:0xf90403f9;  op2val:0xc0550806
TEST_RR_OP(smax8, x26, x17, x4, 0x00000000, 0xf90403f9, 0xc0550806, x7, 48, x9)

inst_30:
// rs1==x12, rs2==x30, rd==x15, rs1_b2_val == 2, rs2_b2_val == 2
// opcode: smax8 ; op1:x12; op2:x30; dest:x15; op1val:0x200204fd;  op2val:0xff02f600
TEST_RR_OP(smax8, x15, x12, x30, 0x00000000, 0x200204fd, 0xff02f600, x7, 52, x9)

inst_31:
// rs1==x3, rs2==x12, rd==x20, rs1_b2_val == 1, rs2_b0_val == -17, rs1_b0_val == 1
// opcode: smax8 ; op1:x3; op2:x12; dest:x20; op1val:0xfc013f01;  op2val:0xeffe08ef
TEST_RR_OP(smax8, x20, x3, x12, 0x00000000, 0xfc013f01, 0xeffe08ef, x7, 56, x9)

inst_32:
// rs1_b2_val == 0, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0055fe;  op2val:0x7ffbfef9
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xdf0055fe, 0x7ffbfef9, x7, 60, x9)

inst_33:
// rs1_b1_val == -86, rs1_b0_val == -1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x93faaff;  op2val:0xc0aafa04
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x93faaff, 0xc0aafa04, x7, 64, x9)

inst_34:
// rs1_b1_val == -17, rs2_b0_val == -65
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfbfef04;  op2val:0xef0680bf
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xdfbfef04, 0xef0680bf, x7, 68, x9)

inst_35:
// rs1_b1_val == -3, rs2_b2_val == 16, rs2_b0_val == 127
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fdf9;  op2val:0xf710fe7f
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x20fdf9, 0xf710fe7f, x7, 72, x9)

inst_36:
// rs1_b1_val == 0, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfaa0000;  op2val:0x3c00901
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xdfaa0000, 0x3c00901, x7, 76, x9)

inst_37:
// rs2_b2_val == -1, rs2_b0_val == -128
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f680df;  op2val:0xff0380
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x40f680df, 0xff0380, x7, 80, x9)

inst_38:
// rs2_b1_val == 85, rs1_b3_val == -1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3f09fa;  op2val:0x9075510
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xff3f09fa, 0x9075510, x7, 84, x9)

inst_39:
// rs2_b1_val == 127, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc10fe07;  op2val:0x47f7f00
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xfc10fe07, 0x47f7f00, x7, 88, x9)

inst_40:
// rs2_b1_val == -33, rs1_b3_val == 16
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x10021003;  op2val:0x20fadfc0
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x10021003, 0x20fadfc0, x7, 92, x9)

inst_41:
// rs2_b1_val == -9, rs2_b0_val == -33
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc20df05;  op2val:0x553ff7df
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xfc20df05, 0x553ff7df, x7, 96, x9)

inst_42:
// rs2_b1_val == -5, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffb4009;  op2val:0x603fbc0
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x3ffb4009, 0x603fbc0, x7, 100, x9)

inst_43:
// rs2_b1_val == 64, rs1_b3_val == 2, rs1_b0_val == 85
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fff855;  op2val:0xaa8040f9
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x2fff855, 0xaa8040f9, x7, 104, x9)

inst_44:
// rs2_b1_val == 2, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9c006fd;  op2val:0xf7ef0220
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xf9c006fd, 0xf7ef0220, x7, 108, x9)

inst_45:
// rs2_b1_val == -1, rs1_b0_val == -86
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff04f9aa;  op2val:0xdffaff01
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xff04f9aa, 0xdffaff01, x7, 112, x9)

inst_46:
// rs2_b0_val == 85, rs2_b2_val == 0
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fd00fb;  op2val:0xf600bf55
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x20fd00fb, 0xf600bf55, x7, 116, x9)

inst_47:
// rs2_b0_val == 64, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3ff7c0;  op2val:0xbf7f0640
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xff3ff7c0, 0xbf7f0640, x7, 120, x9)

inst_48:
// rs2_b0_val == -1, rs1_b3_val == -65
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff7c020;  op2val:0x506c0ff
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xbff7c020, 0x506c0ff, x7, 124, x9)

inst_49:
// rs1_b0_val == -9, rs1_b3_val == -5
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb2006f7;  op2val:0x8dfef20
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xfb2006f7, 0x8dfef20, x7, 128, x9)

inst_50:
// rs1_b0_val == 64, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfaef40;  op2val:0xdff70810
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xfcfaef40, 0xdff70810, x7, 132, x9)

inst_51:
// rs1_b0_val == 8, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1010bf08;  op2val:0xf8bf1005
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x1010bf08, 0xf8bf1005, x7, 136, x9)

inst_52:
// rs1_b3_val == -128, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x80093f10;  op2val:0x55fdfff6
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x80093f10, 0x55fdfff6, x7, 140, x9)

inst_53:
// rs2_b2_val == 32, rs1_b3_val == 1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1aaaa10;  op2val:0x80200755
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x1aaaa10, 0x80200755, x7, 144, x9)

inst_54:
// rs2_b2_val == 8, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xef06fa02;  op2val:0xf608fd06
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xef06fa02, 0xf608fd06, x7, 148, x9)

inst_55:
// rs1_b2_val == 85, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8550800;  op2val:0xc0f60200
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xf8550800, 0xc0f60200, x7, 152, x9)

inst_56:
// rs1_b2_val == 127, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe7f0680;  op2val:0x308c0aa
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xfe7f0680, 0x308c0aa, x7, 156, x9)

inst_57:
// rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b0_val == -65, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b1_val == 8
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf90708bf;  op2val:0xf9fafac0
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0xf90708bf, 0xf9fafac0, x7, 160, x9)

inst_58:
// rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -2, rs2_b1_val == -17, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b0_val == 16, rs2_b3_val == 127
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fe0510;  op2val:0x7ff6ef05
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x6fe0510, 0x7ff6ef05, x7, 164, x9)

inst_59:
// rs2_b3_val == 0, rs1_b1_val == -1, rs2_b2_val == -2, rs1_b3_val == 8
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x8faffef;  op2val:0xfec005
TEST_RR_OP(smax8, x31, x30, x29, 0x00000000, 0x8faffef, 0xfec005, x7, 168, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 43*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
