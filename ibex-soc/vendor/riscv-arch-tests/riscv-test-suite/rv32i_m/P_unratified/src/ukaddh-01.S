
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukaddh instruction of the RISC-V RV32PZicsr extension for the ukaddh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukaddh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x19, rd==x0, rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 61439, rs2_h0_val == 32768, rs2_h1_val == 32767
// opcode: ukaddh ; op1:x27; op2:x19; dest:x0; op1val:0xefff0000;  op2val:0x7fff8000
TEST_PKRR_OP(ukaddh, x0, x27, x19, 0x00000000, 0xefff0000, 0x7fff8000, x27, x5, 0, x7)

inst_1:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x19, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65519, rs2_h0_val == 63487
// opcode: ukaddh ; op1:x10; op2:x10; dest:x19; op1val:0x0affef;  op2val:0x0af7ff
TEST_PKRR_OP(ukaddh, x19, x10, x10, 0x00000000, 0x0affef, 0x0af7ff, x10, x5, 8, x7)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x21, rd==x29, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65407, rs2_h0_val == 65407, rs2_h1_val == 128
// opcode: ukaddh ; op1:x29; op2:x21; dest:x29; op1val:0x0aff7f;  op2val:0x80ff7f
TEST_PKRR_OP(ukaddh, x29, x29, x21, 0x00000000, 0x0aff7f, 0x80ff7f, x29, x5, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_h1_val == 43690, 
// opcode: ukaddh ; op1:x28; op2:x28; dest:x28; op1val:0x03000b;  op2val:0xaaaa000c
TEST_PKRR_OP(ukaddh, x28, x28, x28, 0x00000000, 0x03000b, 0xaaaa000c, x28, x5, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x22, rd==x22, rs2_h1_val == 21845, rs2_h0_val == 64511, rs1_h1_val == 65534
// opcode: ukaddh ; op1:x2; op2:x22; dest:x22; op1val:0xfffe000b;  op2val:0x5555fbff
TEST_PKRR_OP(ukaddh, x22, x2, x22, 0x00000000, 0xfffe000b, 0x5555fbff, x2, x5, 32, x7)

inst_5:
// rs1==x12, rs2==x16, rd==x6, rs2_h1_val == 49151, rs1_h0_val == 64511, rs2_h0_val == 65534
// opcode: ukaddh ; op1:x12; op2:x16; dest:x6; op1val:0x03fbff;  op2val:0xbffffffe
TEST_PKRR_OP(ukaddh, x6, x12, x16, 0x00000000, 0x03fbff, 0xbffffffe, x12, x5, 40, x7)

inst_6:
// rs1==x8, rs2==x13, rd==x30, rs2_h1_val == 57343, rs1_h1_val == 65527, rs1_h0_val == 128, rs2_h0_val == 61439
// opcode: ukaddh ; op1:x8; op2:x13; dest:x30; op1val:0xfff70080;  op2val:0xdfffefff
TEST_PKRR_OP(ukaddh, x30, x8, x13, 0x00000000, 0xfff70080, 0xdfffefff, x8, x5, 48, x7)

inst_7:
// rs1==x26, rs2==x14, rd==x25, rs2_h1_val == 61439, rs1_h1_val == 49151, rs2_h0_val == 65503
// opcode: ukaddh ; op1:x26; op2:x14; dest:x25; op1val:0xbfff0009;  op2val:0xefffffdf
TEST_PKRR_OP(ukaddh, x25, x26, x14, 0x00000000, 0xbfff0009, 0xefffffdf, x26, x5, 56, x7)

inst_8:
// rs1==x21, rs2==x18, rd==x23, rs2_h1_val == 63487, rs1_h1_val == 4096, rs1_h0_val == 32767
// opcode: ukaddh ; op1:x21; op2:x18; dest:x23; op1val:0x10007fff;  op2val:0xf7ff000f
TEST_PKRR_OP(ukaddh, x23, x21, x18, 0x00000000, 0x10007fff, 0xf7ff000f, x21, x5, 64, x7)

inst_9:
// rs1==x4, rs2==x0, rd==x18, rs2_h1_val == 64511, rs1_h0_val == 21845, rs1_h1_val == 65279
// opcode: ukaddh ; op1:x4; op2:x0; dest:x18; op1val:0xfeff5555;  op2val:0xfbff000c
TEST_PKRR_OP(ukaddh, x18, x4, x0, 0x00000000, 0xfeff5555, 0xfbff000c, x4, x5, 72, x7)

inst_10:
// rs1==x1, rs2==x4, rd==x31, rs2_h1_val == 65023, rs1_h1_val == 32, rs1_h0_val == 8
// opcode: ukaddh ; op1:x1; op2:x4; dest:x31; op1val:0x200008;  op2val:0xfdffffdf
TEST_PKRR_OP(ukaddh, x31, x1, x4, 0x00000000, 0x200008, 0xfdffffdf, x1, x5, 80, x7)

inst_11:
// rs1==x3, rs2==x23, rd==x14, rs2_h1_val == 65279, rs1_h1_val == 8192
// opcode: ukaddh ; op1:x3; op2:x23; dest:x14; op1val:0x20000007;  op2val:0xfeff0009
TEST_PKRR_OP(ukaddh, x14, x3, x23, 0x00000000, 0x20000007, 0xfeff0009, x3, x5, 88, x7)

inst_12:
// rs1==x17, rs2==x1, rd==x8, rs2_h1_val == 65407, rs1_h1_val == 65471, rs2_h0_val == 65023
// opcode: ukaddh ; op1:x17; op2:x1; dest:x8; op1val:0xffbf000a;  op2val:0xff7ffdff
TEST_PKRR_OP(ukaddh, x8, x17, x1, 0x00000000, 0xffbf000a, 0xff7ffdff, x17, x5, 96, x7)

inst_13:
// rs1==x9, rs2==x31, rd==x20, rs2_h1_val == 65471, rs1_h1_val == 63487
// opcode: ukaddh ; op1:x9; op2:x31; dest:x20; op1val:0xf7ff0000;  op2val:0xffbf8000
TEST_PKRR_OP(ukaddh, x20, x9, x31, 0x00000000, 0xf7ff0000, 0xffbf8000, x9, x5, 104, x7)

inst_14:
// rs1==x19, rs2==x27, rd==x10, rs2_h1_val == 65503, rs2_h0_val == 32767, rs1_h1_val == 1024, rs1_h0_val == 4096
// opcode: ukaddh ; op1:x19; op2:x27; dest:x10; op1val:0x4001000;  op2val:0xffdf7fff
TEST_PKRR_OP(ukaddh, x10, x19, x27, 0x00000000, 0x4001000, 0xffdf7fff, x19, x5, 112, x6)

inst_15:
// rs1==x0, rs2==x7, rd==x24, rs2_h1_val == 65519, rs2_h0_val == 65471, rs1_h1_val == 32767
// opcode: ukaddh ; op1:x0; op2:x7; dest:x24; op1val:0x7fff0003;  op2val:0xffefffbf
TEST_PKRR_OP(ukaddh, x24, x0, x7, 0x00000000, 0x7fff0003, 0xffefffbf, x0, x5, 120, x6)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x22, rs2==x9, rd==x16, rs2_h1_val == 65527, 
// opcode: ukaddh ; op1:x22; op2:x9; dest:x16; op1val:0xffbf0008;  op2val:0xfff77fff
TEST_PKRR_OP(ukaddh, x16, x22, x9, 0x00000000, 0xffbf0008, 0xfff77fff, x22, x8, 0, x6)

inst_17:
// rs1==x14, rs2==x17, rd==x21, rs2_h1_val == 65531, rs1_h0_val == 32768, rs1_h1_val == 64511
// opcode: ukaddh ; op1:x14; op2:x17; dest:x21; op1val:0xfbff8000;  op2val:0xfffb000a
TEST_PKRR_OP(ukaddh, x21, x14, x17, 0x00000000, 0xfbff8000, 0xfffb000a, x14, x8, 8, x6)

inst_18:
// rs1==x15, rs2==x26, rd==x4, rs2_h1_val == 65533, rs1_h0_val == 256, rs1_h1_val == 512
// opcode: ukaddh ; op1:x15; op2:x26; dest:x4; op1val:0x2000100;  op2val:0xfffd0005
TEST_PKRR_OP(ukaddh, x4, x15, x26, 0x00000000, 0x2000100, 0xfffd0005, x15, x8, 16, x6)

inst_19:
// rs1==x13, rs2==x2, rd==x5, rs2_h1_val == 65534, rs1_h1_val == 4, rs2_h0_val == 4096
// opcode: ukaddh ; op1:x13; op2:x2; dest:x5; op1val:0x040008;  op2val:0xfffe1000
TEST_PKRR_OP(ukaddh, x5, x13, x2, 0x00000000, 0x040008, 0xfffe1000, x13, x8, 24, x6)

inst_20:
// rs1==x31, rs2==x30, rd==x17, rs2_h1_val == 32768, rs2_h0_val == 1024
// opcode: ukaddh ; op1:x31; op2:x30; dest:x17; op1val:0x0d0005;  op2val:0x80000400
TEST_PKRR_OP(ukaddh, x17, x31, x30, 0x00000000, 0x0d0005, 0x80000400, x31, x8, 32, x6)

inst_21:
// rs1==x23, rs2==x25, rd==x1, rs2_h1_val == 16384, rs1_h0_val == 65534, rs2_h0_val == 8
// opcode: ukaddh ; op1:x23; op2:x25; dest:x1; op1val:0x12fffe;  op2val:0x40000008
TEST_PKRR_OP(ukaddh, x1, x23, x25, 0x00000000, 0x12fffe, 0x40000008, x23, x8, 40, x6)

inst_22:
// rs1==x16, rs2==x3, rd==x7, rs2_h1_val == 8192, rs2_h0_val == 8192
// opcode: ukaddh ; op1:x16; op2:x3; dest:x7; op1val:0x7fff0007;  op2val:0x20002000
TEST_PKRR_OP(ukaddh, x7, x16, x3, 0x00000000, 0x7fff0007, 0x20002000, x16, x8, 48, x6)

inst_23:
// rs1==x18, rs2==x29, rd==x26, rs2_h1_val == 4096, rs1_h0_val == 65533, rs2_h0_val == 65535, rs1_h1_val == 65023
// opcode: ukaddh ; op1:x18; op2:x29; dest:x26; op1val:0xfdfffffd;  op2val:0x1000ffff
TEST_PKRR_OP(ukaddh, x26, x18, x29, 0x00000000, 0xfdfffffd, 0x1000ffff, x18, x8, 56, x6)

inst_24:
// rs1==x30, rs2==x24, rd==x9, rs2_h1_val == 2048, rs1_h0_val == 4
// opcode: ukaddh ; op1:x30; op2:x24; dest:x9; op1val:0x050004;  op2val:0x800ffbf
TEST_PKRR_OP(ukaddh, x9, x30, x24, 0x00000000, 0x050004, 0x800ffbf, x30, x8, 64, x6)

inst_25:
// rs1==x20, rs2==x5, rd==x2, rs2_h1_val == 1024, rs1_h1_val == 65503, rs1_h0_val == 2048
// opcode: ukaddh ; op1:x20; op2:x5; dest:x2; op1val:0xffdf0800;  op2val:0x4000003
TEST_PKRR_OP(ukaddh, x2, x20, x5, 0x00000000, 0xffdf0800, 0x4000003, x20, x8, 72, x6)

inst_26:
// rs1==x24, rs2==x15, rd==x13, rs2_h1_val == 512, rs2_h0_val == 65279, rs1_h0_val == 32
// opcode: ukaddh ; op1:x24; op2:x15; dest:x13; op1val:0x10000020;  op2val:0x200feff
TEST_PKRR_OP(ukaddh, x13, x24, x15, 0x00000000, 0x10000020, 0x200feff, x24, x8, 80, x2)

inst_27:
// rs1==x7, rs2==x6, rd==x3, rs2_h1_val == 256, rs2_h0_val == 512
// opcode: ukaddh ; op1:x7; op2:x6; dest:x3; op1val:0xfdfffbff;  op2val:0x1000200
TEST_PKRR_OP(ukaddh, x3, x7, x6, 0x00000000, 0xfdfffbff, 0x1000200, x7, x8, 88, x2)

inst_28:
// rs1==x5, rs2==x20, rd==x11, rs2_h1_val == 64, rs1_h0_val == 16
// opcode: ukaddh ; op1:x5; op2:x20; dest:x11; op1val:0xf7ff0010;  op2val:0x40ffdf
TEST_PKRR_OP(ukaddh, x11, x5, x20, 0x00000000, 0xf7ff0010, 0x40ffdf, x5, x8, 96, x2)

inst_29:
// rs1==x11, rs2==x12, rd==x15, rs2_h1_val == 32, 
// opcode: ukaddh ; op1:x11; op2:x12; dest:x15; op1val:0x130007;  op2val:0x20ffdf
TEST_PKRR_OP(ukaddh, x15, x11, x12, 0x00000000, 0x130007, 0x20ffdf, x11, x8, 104, x2)

inst_30:
// rs1==x6, rs2==x11, rd==x27, rs2_h1_val == 16, rs2_h0_val == 256
// opcode: ukaddh ; op1:x6; op2:x11; dest:x27; op1val:0xffbf0080;  op2val:0x100100
TEST_PKRR_OP(ukaddh, x27, x6, x11, 0x00000000, 0xffbf0080, 0x100100, x6, x8, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x25, rs2==x8, rd==x12, rs1_h0_val == 65531, 
// opcode: ukaddh ; op1:x25; op2:x8; dest:x12; op1val:0xfefffffb;  op2val:0x100fffe
TEST_PKRR_OP(ukaddh, x12, x25, x8, 0x00000000, 0xfefffffb, 0x100fffe, x25, x1, 0, x2)

inst_32:
// rs1_h0_val == 16384, rs1_h1_val == 2, rs2_h0_val == 32, rs2_h1_val == 1
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x024000;  op2val:0x010020
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x024000, 0x010020, x30, x1, 8, x2)

inst_33:
// rs1_h0_val == 8192, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x022000;  op2val:0xfffeefff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x022000, 0xfffeefff, x30, x1, 16, x2)

inst_34:
// rs1_h0_val == 1024, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x070400;  op2val:0x13000e
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x070400, 0x13000e, x30, x1, 24, x2)

inst_35:
// rs1_h0_val == 512, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x040200;  op2val:0x060012
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x040200, 0x060012, x30, x1, 32, x2)

inst_36:
// rs1_h0_val == 64, rs2_h0_val == 65531
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xefff0040;  op2val:0xfff7fffb
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xefff0040, 0xfff7fffb, x30, x1, 40, x2)

inst_37:
// rs1_h0_val == 2, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002;  op2val:0xeffffdff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfff70002, 0xeffffdff, x30, x1, 48, x2)

inst_38:
// rs1_h0_val == 1, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0c0001;  op2val:0x800000f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x0c0001, 0x800000f, x30, x1, 56, x2)

inst_39:
// rs1_h0_val == 65535, rs1_h1_val == 16
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10ffff;  op2val:0x050007
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x10ffff, 0x050007, x30, x1, 64, x2)

inst_40:
// rs2_h1_val == 8, rs1_h1_val == 1, rs1_h0_val == 63487
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff;  op2val:0x08f7ff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x01f7ff, 0x08f7ff, x30, x1, 72, x2)

inst_41:
// rs2_h1_val == 4, rs2_h0_val == 4, rs1_h1_val == 43690
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff;  op2val:0x040004
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xaaaafbff, 0x040004, x30, x1, 80, x2)

inst_42:
// rs2_h1_val == 2, rs2_h0_val == 43690, rs1_h0_val == 49151
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10bfff;  op2val:0x02aaaa
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x10bfff, 0x02aaaa, x30, x1, 88, x2)

inst_43:
// rs2_h1_val == 65535, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10000b;  op2val:0xffff0004
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x10000b, 0xffff0004, x30, x1, 96, x2)

inst_44:
// rs2_h1_val == 0, rs2_h0_val == 64, rs1_h0_val == 65527, rs1_h1_val == 65407
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff7;  op2val:0x000040
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xff7ffff7, 0x000040, x30, x1, 104, x2)

inst_45:
// rs2_h0_val == 21845, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x110009;  op2val:0x125555
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x110009, 0x125555, x30, x1, 112, x2)

inst_46:
// rs2_h0_val == 49151, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0d4000;  op2val:0xfffbbfff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x0d4000, 0xfffbbfff, x30, x1, 120, x2)

inst_47:
// rs2_h0_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffe5555;  op2val:0xfeffdfff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfffe5555, 0xfeffdfff, x30, x1, 128, x2)

inst_48:
// rs2_h0_val == 128, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x020001;  op2val:0x55550080
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x020001, 0x55550080, x30, x1, 136, x2)

inst_49:
// rs2_h0_val == 16, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000e;  op2val:0xfffe0010
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x2000000e, 0xfffe0010, x30, x1, 144, x2)

inst_50:
// rs2_h0_val == 2, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x050002;  op2val:0xfffd0002
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x050002, 0xfffd0002, x30, x1, 152, x2)

inst_51:
// rs2_h0_val == 1, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0000;  op2val:0x400001
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xff7f0000, 0x400001, x30, x1, 160, x2)

inst_52:
// rs2_h0_val == 0, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0a0004;  op2val:0x050000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x0a0004, 0x050000, x30, x1, 168, x2)

inst_53:
// rs1_h1_val == 21845, rs2_h0_val == 65533
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x55550400;  op2val:0xfffefffd
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x55550400, 0xfffefffd, x30, x1, 176, x2)

inst_54:
// rs1_h1_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffe;  op2val:0x8000fffd
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xdffffffe, 0x8000fffd, x30, x1, 184, x2)

inst_55:
// rs1_h1_val == 65519, rs1_h0_val == 65471
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf;  op2val:0x060013
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xffefffbf, 0x060013, x30, x1, 192, x2)

inst_56:
// rs1_h1_val == 65531, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000e;  op2val:0x0d0002
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfffb000e, 0x0d0002, x30, x1, 200, x2)

inst_57:
// rs1_h1_val == 65533, rs2_h0_val == 2048
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0011;  op2val:0xaaaa0800
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfffd0011, 0xaaaa0800, x30, x1, 208, x2)

inst_58:
// rs1_h1_val == 32768, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x80005555;  op2val:0x110006
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x80005555, 0x110006, x30, x1, 216, x2)

inst_59:
// rs1_h1_val == 16384, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffef;  op2val:0x8000009
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x4000ffef, 0x8000009, x30, x1, 224, x2)

inst_60:
// rs1_h1_val == 2048, rs1_h0_val == 65503
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdf;  op2val:0x2008000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x800ffdf, 0x2008000, x30, x1, 232, x2)

inst_61:
// rs1_h1_val == 256, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x1000004;  op2val:0xffff0011
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x1000004, 0xffff0011, x30, x1, 240, x2)

inst_62:
// rs1_h1_val == 128, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800007;  op2val:0x02fffb
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x800007, 0x02fffb, x30, x1, 248, x2)

inst_63:
// rs1_h1_val == 64, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x400011;  op2val:0x09feff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x400011, 0x09feff, x30, x1, 256, x2)

inst_64:
// rs1_h1_val == 8, rs1_h0_val == 65023
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff;  op2val:0x01aaaa
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x08fdff, 0x01aaaa, x30, x1, 264, x2)

inst_65:
// rs1_h1_val == 65535, rs1_h0_val == 65279
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x050012
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfffffeff, 0x050012, x30, x1, 272, x2)

inst_66:
// rs1_h1_val == 0, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x000011;  op2val:0xf7fffbff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x000011, 0xf7fffbff, x30, x1, 280, x2)

inst_67:
// rs1_h0_val == 43690, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa;  op2val:0x03000e
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xdfffaaaa, 0x03000e, x30, x1, 288, x2)

inst_68:
// rs1_h0_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff;  op2val:0xfffefffd
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x00dfff, 0xfffefffd, x30, x1, 296, x2)

inst_69:
// rs1_h0_val == 61439, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20efff;  op2val:0xfeff000f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x20efff, 0xfeff000f, x30, x1, 304, x2)

inst_70:
// rs2_h0_val == 16384, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff8000;  op2val:0xefff4000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x7fff8000, 0xefff4000, x30, x1, 312, x2)

inst_71:
// rs2_h0_val == 65519, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa;  op2val:0x0affef
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xdfffaaaa, 0x0affef, x30, x1, 320, x2)

inst_72:
// rs2_h0_val == 65527, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf;  op2val:0x80fff7
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x08ffdf, 0x80fff7, x30, x1, 328, x2)

inst_73:
// rs1_h0_val == 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 61439, rs2_h0_val == 32768, rs2_h1_val == 32767
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000;  op2val:0x7fff8000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xefff0000, 0x7fff8000, x30, x1, 336, x2)

inst_74:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65519, rs2_h0_val == 63487
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0affef;  op2val:0x0af7ff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x0affef, 0x0af7ff, x30, x1, 344, x2)

inst_75:
// rs2_h1_val == 64511, rs1_h0_val == 21845, rs1_h1_val == 65279
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfeff5555;  op2val:0xfbff000c
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0xfeff5555, 0xfbff000c, x30, x1, 352, x2)

inst_76:
// rs2_h1_val == 65519, rs2_h0_val == 65471, rs1_h1_val == 32767
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0003;  op2val:0xffefffbf
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x00000000, 0x7fff0003, 0xffefffbf, x30, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
