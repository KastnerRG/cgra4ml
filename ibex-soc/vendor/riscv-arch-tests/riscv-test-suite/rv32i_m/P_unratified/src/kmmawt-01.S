
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawt instruction of the RISC-V RV32PZicsr extension for the kmmawt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x10, rd==x25, rs1_w0_val == -2147483648, rs2_h1_val == -257, rs2_h0_val == 256
// opcode: kmmawt ; op1:x9; op2:x10; dest:x25; op1val:0x80000000;  op2val:0xfeff0100
TEST_PKRR_OP(kmmawt, x25, x9, x10, 0x00000000, 0x80000000, 0xfeff0100, x9, x5, 0, x12)

inst_1:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x20, rs2_h1_val == -21846, rs2_h0_val == -2049, rs1_w0_val == -8193
// opcode: kmmawt ; op1:x21; op2:x21; dest:x20; op1val:0xffffdfff;  op2val:0xaaaaf7ff
TEST_PKRR_OP(kmmawt, x20, x21, x21, 0x00000000, 0xffffdfff, 0xaaaaf7ff, x21, x5, 8, x12)

inst_2:
// rs1 == rd != rs2, rs1==x19, rs2==x9, rd==x19, rs2_h1_val == 21845, rs2_h0_val == 1024
// opcode: kmmawt ; op1:x19; op2:x9; dest:x19; op1val:0xfffffff8;  op2val:0x55550400
TEST_PKRR_OP(kmmawt, x19, x19, x9, 0x00000000, 0xfffffff8, 0x55550400, x19, x5, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs2_h1_val == 32767, rs1_w0_val == 512, rs2_h0_val == -3
// opcode: kmmawt ; op1:x27; op2:x27; dest:x27; op1val:0x000200;  op2val:0x7ffffffd
TEST_PKRR_OP(kmmawt, x27, x27, x27, 0x00000000, 0x000200, 0x7ffffffd, x27, x5, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x2, rd==x2, rs2_h1_val == -16385, rs1_w0_val == 131072, rs2_h0_val == 8192
// opcode: kmmawt ; op1:x25; op2:x2; dest:x2; op1val:0x020000;  op2val:0xbfff2000
TEST_PKRR_OP(kmmawt, x2, x25, x2, 0x00000000, 0x020000, 0xbfff2000, x25, x5, 32, x12)

inst_5:
// rs1==x10, rs2==x29, rd==x24, rs2_h1_val == -8193, rs2_h0_val == -65
// opcode: kmmawt ; op1:x10; op2:x29; dest:x24; op1val:0xc0000000;  op2val:0xdfffffbf
TEST_PKRR_OP(kmmawt, x24, x10, x29, 0x00000000, 0xc0000000, 0xdfffffbf, x10, x5, 40, x12)

inst_6:
// rs1==x6, rs2==x30, rd==x26, rs2_h1_val == -4097, rs1_w0_val == 0
// opcode: kmmawt ; op1:x6; op2:x30; dest:x26; op1val:0x000000;  op2val:0xefff0006
TEST_PKRR_OP(kmmawt, x26, x6, x30, 0x00000000, 0x000000, 0xefff0006, x6, x5, 48, x12)

inst_7:
// rs1==x17, rs2==x31, rd==x1, rs2_h1_val == -2049, rs1_w0_val == 65536, rs2_h0_val == 512
// opcode: kmmawt ; op1:x17; op2:x31; dest:x1; op1val:0x010000;  op2val:0xf7ff0200
TEST_PKRR_OP(kmmawt, x1, x17, x31, 0x00000000, 0x010000, 0xf7ff0200, x17, x5, 56, x12)

inst_8:
// rs1==x7, rs2==x3, rd==x8, rs2_h1_val == -1025, rs1_w0_val == -3
// opcode: kmmawt ; op1:x7; op2:x3; dest:x8; op1val:0xfffffffd;  op2val:0xfbffffbf
TEST_PKRR_OP(kmmawt, x8, x7, x3, 0x00000000, 0xfffffffd, 0xfbffffbf, x7, x5, 64, x12)

inst_9:
// rs1==x13, rs2==x0, rd==x28, rs2_h1_val == -513, rs2_h0_val == -21846
// opcode: kmmawt ; op1:x13; op2:x0; dest:x28; op1val:0x000000;  op2val:0xfdffaaaa
TEST_PKRR_OP(kmmawt, x28, x13, x0, 0x00000000, 0x000000, 0xfdffaaaa, x13, x5, 72, x12)

inst_10:
// rs1==x3, rs2==x24, rd==x4, rs2_h1_val == -129, rs2_h0_val == -33, rs1_w0_val == 262144
// opcode: kmmawt ; op1:x3; op2:x24; dest:x4; op1val:0x040000;  op2val:0xff7fffdf
TEST_PKRR_OP(kmmawt, x4, x3, x24, 0x00000000, 0x040000, 0xff7fffdf, x3, x5, 80, x12)

inst_11:
// rs1==x24, rs2==x26, rd==x6, rs2_h1_val == -65, rs2_h0_val == -1, rs1_w0_val == -4194305
// opcode: kmmawt ; op1:x24; op2:x26; dest:x6; op1val:0xffbfffff;  op2val:0xffbfffff
TEST_PKRR_OP(kmmawt, x6, x24, x26, 0x00000000, 0xffbfffff, 0xffbfffff, x24, x5, 88, x12)

inst_12:
// rs1==x23, rs2==x22, rd==x16, rs2_h1_val == -33, rs1_w0_val == -1025, rs2_h0_val == 16
// opcode: kmmawt ; op1:x23; op2:x22; dest:x16; op1val:0xfffffbff;  op2val:0xffdf0010
TEST_PKRR_OP(kmmawt, x16, x23, x22, 0x00000000, 0xfffffbff, 0xffdf0010, x23, x5, 96, x12)

inst_13:
// rs1==x15, rs2==x6, rd==x11, rs2_h1_val == -17, rs2_h0_val == -5, rs1_w0_val == -268435457
// opcode: kmmawt ; op1:x15; op2:x6; dest:x11; op1val:0xefffffff;  op2val:0xffeffffb
TEST_PKRR_OP(kmmawt, x11, x15, x6, 0x00000000, 0xefffffff, 0xffeffffb, x15, x5, 104, x12)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_14:
// rs1==x5, rs2==x18, rd==x23, rs2_h1_val == -9, 
// opcode: kmmawt ; op1:x5; op2:x18; dest:x23; op1val:0xfffffbff;  op2val:0xfff7ffff
TEST_PKRR_OP(kmmawt, x23, x5, x18, 0x00000000, 0xfffffbff, 0xfff7ffff, x5, x2, 0, x6)

inst_15:
// rs1==x18, rs2==x20, rd==x5, rs2_h1_val == -5, rs2_h0_val == 32, rs1_w0_val == 256
// opcode: kmmawt ; op1:x18; op2:x20; dest:x5; op1val:0x000100;  op2val:0xfffb0020
TEST_PKRR_OP(kmmawt, x5, x18, x20, 0x00000000, 0x000100, 0xfffb0020, x18, x2, 8, x6)

inst_16:
// rs1==x16, rs2==x11, rd==x12, rs2_h1_val == -3, rs2_h0_val == -16385, rs1_w0_val == -65537
// opcode: kmmawt ; op1:x16; op2:x11; dest:x12; op1val:0xfffeffff;  op2val:0xfffdbfff
TEST_PKRR_OP(kmmawt, x12, x16, x11, 0x00000000, 0xfffeffff, 0xfffdbfff, x16, x2, 16, x6)

inst_17:
// rs1==x0, rs2==x4, rd==x7, rs2_h1_val == -2, 
// opcode: kmmawt ; op1:x0; op2:x4; dest:x7; op1val:0xfffffffa;  op2val:0xfffe0010
TEST_PKRR_OP(kmmawt, x7, x0, x4, 0x00000000, 0xfffffffa, 0xfffe0010, x0, x2, 24, x6)

inst_18:
// rs1==x26, rs2==x8, rd==x21, rs2_h1_val == -32768, 
// opcode: kmmawt ; op1:x26; op2:x8; dest:x21; op1val:0xfffffff6;  op2val:0x8000ffbf
TEST_PKRR_OP(kmmawt, x21, x26, x8, 0x00000000, 0xfffffff6, 0x8000ffbf, x26, x2, 32, x6)

inst_19:
// rs1==x31, rs2==x12, rd==x13, rs2_h1_val == 16384, rs1_w0_val == 16384
// opcode: kmmawt ; op1:x31; op2:x12; dest:x13; op1val:0x004000;  op2val:0x40000100
TEST_PKRR_OP(kmmawt, x13, x31, x12, 0x00000000, 0x004000, 0x40000100, x31, x2, 40, x6)

inst_20:
// rs1==x1, rs2==x5, rd==x14, rs2_h1_val == 8192, rs1_w0_val == 4, rs2_h0_val == -32768
// opcode: kmmawt ; op1:x1; op2:x5; dest:x14; op1val:0x000004;  op2val:0x20008000
TEST_PKRR_OP(kmmawt, x14, x1, x5, 0x00000000, 0x000004, 0x20008000, x1, x2, 48, x6)

inst_21:
// rs1==x14, rs2==x13, rd==x22, rs2_h1_val == 4096, rs2_h0_val == -8193
// opcode: kmmawt ; op1:x14; op2:x13; dest:x22; op1val:0x000005;  op2val:0x1000dfff
TEST_PKRR_OP(kmmawt, x22, x14, x13, 0x00000000, 0x000005, 0x1000dfff, x14, x2, 56, x6)

inst_22:
// rs1==x28, rs2==x17, rd==x9, rs2_h1_val == 2048, rs1_w0_val == -131073, rs2_h0_val == -129
// opcode: kmmawt ; op1:x28; op2:x17; dest:x9; op1val:0xfffdffff;  op2val:0x800ff7f
TEST_PKRR_OP(kmmawt, x9, x28, x17, 0x00000000, 0xfffdffff, 0x800ff7f, x28, x2, 64, x6)

inst_23:
// rs1==x4, rs2==x25, rd==x30, rs2_h1_val == 1024, rs1_w0_val == -1048577
// opcode: kmmawt ; op1:x4; op2:x25; dest:x30; op1val:0xffefffff;  op2val:0x400fffd
TEST_PKRR_OP(kmmawt, x30, x4, x25, 0x00000000, 0xffefffff, 0x400fffd, x4, x2, 72, x6)

inst_24:
// rs1==x22, rs2==x15, rd==x10, rs2_h1_val == 512, rs2_h0_val == 4
// opcode: kmmawt ; op1:x22; op2:x15; dest:x10; op1val:0xfffffbff;  op2val:0x2000004
TEST_PKRR_OP(kmmawt, x10, x22, x15, 0x00000000, 0xfffffbff, 0x2000004, x22, x2, 80, x6)

inst_25:
// rs1==x30, rs2==x16, rd==x3, rs2_h1_val == 256, rs2_h0_val == -9, rs1_w0_val == 134217728
// opcode: kmmawt ; op1:x30; op2:x16; dest:x3; op1val:0x8000000;  op2val:0x100fff7
TEST_PKRR_OP(kmmawt, x3, x30, x16, 0x00000000, 0x8000000, 0x100fff7, x30, x2, 88, x6)

inst_26:
// rs1==x11, rs2==x7, rd==x0, rs2_h1_val == 128, rs2_h0_val == -17, rs1_w0_val == 67108864
// opcode: kmmawt ; op1:x11; op2:x7; dest:x0; op1val:0x4000000;  op2val:0x80ffef
TEST_PKRR_OP(kmmawt, x0, x11, x7, 0x00000000, 0x4000000, 0x80ffef, x11, x2, 96, x6)

inst_27:
// rs1==x12, rs2==x23, rd==x29, rs2_h1_val == 64, rs2_h0_val == 21845
// opcode: kmmawt ; op1:x12; op2:x23; dest:x29; op1val:0x000003;  op2val:0x405555
TEST_PKRR_OP(kmmawt, x29, x12, x23, 0x00000000, 0x000003, 0x405555, x12, x2, 104, x6)

inst_28:
// rs1==x20, rs2==x1, rd==x15, rs2_h1_val == 32, rs2_h0_val == 8, rs1_w0_val == 4096
// opcode: kmmawt ; op1:x20; op2:x1; dest:x15; op1val:0x001000;  op2val:0x200008
TEST_PKRR_OP(kmmawt, x15, x20, x1, 0x00000000, 0x001000, 0x200008, x20, x2, 112, x3)

inst_29:
// rs1==x29, rs2==x19, rd==x18, rs2_h1_val == 16, 
// opcode: kmmawt ; op1:x29; op2:x19; dest:x18; op1val:0xfffffffc;  op2val:0x10fff7
TEST_PKRR_OP(kmmawt, x18, x29, x19, 0x00000000, 0xfffffffc, 0x10fff7, x29, x2, 120, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x2, rs2==x28, rd==x17, rs2_h1_val == 8, rs2_h0_val == -2
// opcode: kmmawt ; op1:x2; op2:x28; dest:x17; op1val:0xfffffbff;  op2val:0x08fffe
TEST_PKRR_OP(kmmawt, x17, x2, x28, 0x00000000, 0xfffffbff, 0x08fffe, x2, x1, 0, x3)

inst_31:
// rs1==x8, rs2==x14, rd==x31, rs2_h1_val == 4, rs2_h0_val == -1025
// opcode: kmmawt ; op1:x8; op2:x14; dest:x31; op1val:0x000006;  op2val:0x04fbff
TEST_PKRR_OP(kmmawt, x31, x8, x14, 0x00000000, 0x000006, 0x04fbff, x8, x1, 8, x3)

inst_32:
// rs2_h1_val == 2, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000009;  op2val:0x02fffa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000009, 0x02fffa, x30, x1, 16, x3)

inst_33:
// rs1_w0_val == 128, rs2_h0_val == 0
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000080;  op2val:0xfbff0000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000080, 0xfbff0000, x30, x1, 24, x3)

inst_34:
// rs1_w0_val == 64, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000040;  op2val:0xfff80000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000040, 0xfff80000, x30, x1, 32, x3)

inst_35:
// rs1_w0_val == 32, rs2_h0_val == -4097
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000020;  op2val:0x80efff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000020, 0x80efff, x30, x1, 40, x3)

inst_36:
// rs1_w0_val == 16, rs2_h1_val == 0
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000010;  op2val:0x008000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000010, 0x008000, x30, x1, 48, x3)

inst_37:
// rs1_w0_val == 8, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000008;  op2val:0x1000efff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000008, 0x1000efff, x30, x1, 56, x3)

inst_38:
// rs1_w0_val == 2, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000002;  op2val:0xfff60003
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000002, 0xfff60003, x30, x1, 64, x3)

inst_39:
// rs1_w0_val == 1, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000001;  op2val:0xfff80008
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000001, 0xfff80008, x30, x1, 72, x3)

inst_40:
// rs1_w0_val == -1, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfff7aaaa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffffff, 0xfff7aaaa, x30, x1, 80, x3)

inst_41:
// rs2_h1_val == 1, rs1_w0_val == -67108865
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0x01bfff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfbffffff, 0x01bfff, x30, x1, 88, x3)

inst_42:
// rs2_h1_val == -1, rs1_w0_val == -33554433
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0xffffdfff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfdffffff, 0xffffdfff, x30, x1, 96, x3)

inst_43:
// rs2_h0_val == 32767, rs1_w0_val == -2097153
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xff7f7fff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffdfffff, 0xff7f7fff, x30, x1, 104, x3)

inst_44:
// rs2_h0_val == -513, rs1_w0_val == -134217729
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0x05fdff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xf7ffffff, 0x05fdff, x30, x1, 112, x3)

inst_45:
// rs2_h0_val == -257, rs1_w0_val == 1073741824
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x1000feff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x40000000, 0x1000feff, x30, x1, 120, x3)

inst_46:
// rs2_h0_val == 16384, rs1_w0_val == 8388608
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0x20004000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x800000, 0x20004000, x30, x1, 128, x3)

inst_47:
// rs2_h0_val == 4096, rs1_w0_val == -65
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xfbff1000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffffbf, 0xfbff1000, x30, x1, 136, x3)

inst_48:
// rs2_h0_val == 2048, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000005;  op2val:0x050800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000005, 0x050800, x30, x1, 144, x3)

inst_49:
// rs2_h0_val == 128, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0x200080
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffff6, 0x200080, x30, x1, 152, x3)

inst_50:
// rs2_h0_val == 64, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6;  op2val:0xfeff0040
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffff6, 0xfeff0040, x30, x1, 160, x3)

inst_51:
// rs2_h0_val == 2, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xfffd0002
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x4000000, 0xfffd0002, x30, x1, 168, x3)

inst_52:
// rs2_h0_val == 1, rs1_w0_val == -129
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0x100001
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffff7f, 0x100001, x30, x1, 176, x3)

inst_53:
// rs1_w0_val == -1431655766, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xfffe4000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xfffe4000, x30, x1, 184, x3)

inst_54:
// rs1_w0_val == 1431655765, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0xfff90010
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x55555555, 0xfff90010, x30, x1, 192, x3)

inst_55:
// rs1_w0_val == 2147483647, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xfff70040
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x7fffffff, 0xfff70040, x30, x1, 200, x3)

inst_56:
// rs1_w0_val == -1073741825, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0x1000006
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xbfffffff, 0x1000006, x30, x1, 208, x3)

inst_57:
// rs1_w0_val == -536870913, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0xfffc8000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xdfffffff, 0xfffc8000, x30, x1, 216, x3)

inst_58:
// rs1_w0_val == -16777217, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0x800002
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfeffffff, 0x800002, x30, x1, 224, x3)

inst_59:
// rs1_w0_val == -8388609, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0x5555ffef
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xff7fffff, 0x5555ffef, x30, x1, 232, x3)

inst_60:
// rs1_w0_val == -524289, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0xaaaa0004
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xaaaa0004, x30, x1, 240, x3)

inst_61:
// rs1_w0_val == -262145, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0xfefffeff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffbffff, 0xfefffeff, x30, x1, 248, x3)

inst_62:
// rs1_w0_val == -32769, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xffbfffbf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffff7fff, 0xffbfffbf, x30, x1, 256, x3)

inst_63:
// rs1_w0_val == -16385, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0xf7ff5555
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffbfff, 0xf7ff5555, x30, x1, 264, x3)

inst_64:
// rs1_w0_val == -4097, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0x8000004
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffefff, 0x8000004, x30, x1, 272, x3)

inst_65:
// rs1_w0_val == -2049, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:0x00ffef
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffff7ff, 0x00ffef, x30, x1, 280, x3)

inst_66:
// rs1_w0_val == -513, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0x800003
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffdff, 0x800003, x30, x1, 288, x3)

inst_67:
// rs1_w0_val == -257, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0x01fffb
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffeff, 0x01fffb, x30, x1, 296, x3)

inst_68:
// rs1_w0_val == -33, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xffdffffe
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffffdf, 0xffdffffe, x30, x1, 304, x3)

inst_69:
// rs1_w0_val == -17, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0x06efff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffffef, 0x06efff, x30, x1, 312, x3)

inst_70:
// rs1_w0_val == -9, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0x06feff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffff7, 0x06feff, x30, x1, 320, x3)

inst_71:
// rs1_w0_val == -5, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xfdffffef
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffffb, 0xfdffffef, x30, x1, 328, x3)

inst_72:
// rs1_w0_val == -2, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0xfffcfffc
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xfffffffe, 0xfffcfffc, x30, x1, 336, x3)

inst_73:
// rs1_w0_val == 536870912, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x200ffef
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x20000000, 0x200ffef, x30, x1, 344, x3)

inst_74:
// rs1_w0_val == 268435456, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0x4000800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x10000000, 0x4000800, x30, x1, 352, x3)

inst_75:
// rs1_w0_val == 33554432, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0xefff0001
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x2000000, 0xefff0001, x30, x1, 360, x3)

inst_76:
// rs1_w0_val == 16777216, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xffbf0001
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x1000000, 0xffbf0001, x30, x1, 368, x3)

inst_77:
// rs1_w0_val == 4194304, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xfff8ffdf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x400000, 0xfff8ffdf, x30, x1, 376, x3)

inst_78:
// rs1_w0_val == 2097152, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x10fffe
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x200000, 0x10fffe, x30, x1, 384, x3)

inst_79:
// rs1_w0_val == 1048576, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xfffb0004
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x100000, 0xfffb0004, x30, x1, 392, x3)

inst_80:
// rs1_w0_val == 524288, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x080000;  op2val:0xffff0007
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x080000, 0xffff0007, x30, x1, 400, x3)

inst_81:
// rs1_w0_val == 32768, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x008000;  op2val:0xfeff0400
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x008000, 0xfeff0400, x30, x1, 408, x3)

inst_82:
// rs1_w0_val == 8192, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x002000;  op2val:0x10004000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x002000, 0x10004000, x30, x1, 416, x3)

inst_83:
// rs1_w0_val == 2048, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000800;  op2val:0xfff60000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000800, 0xfff60000, x30, x1, 424, x3)

inst_84:
// rs1_w0_val == 1024, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000400;  op2val:0x4000800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000400, 0x4000800, x30, x1, 432, x3)

inst_85:
// rs2_h1_val == -21846, rs2_h0_val == -2049, rs1_w0_val == -8193
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xaaaaf7ff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0xffffdfff, 0xaaaaf7ff, x30, x1, 440, x3)

inst_86:
// rs2_h1_val == 32767, rs1_w0_val == 512, rs2_h0_val == -3
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000200;  op2val:0x7ffffffd
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x00000000, 0x000200, 0x7ffffffd, x30, x1, 448, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 114*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
