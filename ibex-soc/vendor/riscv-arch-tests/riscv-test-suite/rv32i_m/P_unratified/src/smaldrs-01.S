
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaldrs instruction of the RISC-V RV32PZicsr extension for the smaldrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaldrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x27, rd==x10, rs1_h0_val == -32768, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 128, rs1_h1_val == 4
// opcode: smaldrs ; op1:x3; op2:x27; dest:x10; op1val:0x00048000;  op2val:0xfffa0080
TEST_P64_PNN_OP(smaldrs, x10, x11, x3, x27, 0x00000000, 0, 0x00048000, 0xfffa0080, x8, 0, x13)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x14, rs1_h1_val == rs2_h1_val, rs2_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == 256, rs1_h0_val == 256, rs2_h0_val == -257
// opcode: smaldrs ; op1:x18; op2:x18; dest:x14; op1val:0x01000100;  op2val:0x0100feff
TEST_P64_PNN_OP(smaldrs, x14, x15, x18, x18, 0x00000000, 0, 0x01000100, 0x0100feff, x8, 8, x13)

inst_2:
// rs1 == rd != rs2, rs1==x16, rs2==x1, rd==x16, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -65, rs1_h1_val == -129
// opcode: smaldrs ; op1:x16; op2:x1; dest:x16; op1val:0xff7fffbf;  op2val:0x3fff0005
TEST_P64_PNN_OP(smaldrs, x16, x17, x16, x1, 0x00000000, 0, 0xff7fffbf, 0x3fff0005, x8, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs1_h1_val == -4097, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smaldrs ; op1:x30; op2:x30; dest:x30; op1val:0xefff2000;  op2val:0xfff83fff
TEST_P64_PNN_OP(smaldrs, x30, x31, x30, x30, 0x00000000, 0, 0xefff2000, 0xfff83fff, x8, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x4, rd==x4, rs1_h0_val == rs2_h0_val, rs1_h0_val == -513, rs1_h1_val == 16384, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == -2049, rs2_h0_val == -513
// opcode: smaldrs ; op1:x12; op2:x4; dest:x4; op1val:0x4000fdff;  op2val:0xf7fffdff
TEST_P64_PNN_OP(smaldrs, x4, x5, x12, x4, 0x00000000, 0, 0x4000fdff, 0xf7fffdff, x8, 32, x13)

inst_5:
// rs1==x5, rs2==x11, rd==x6, rs2_h1_val == -21846, rs1_h0_val == 21845, rs2_h0_val == -32768, rs1_h1_val == -2
// opcode: smaldrs ; op1:x5; op2:x11; dest:x6; op1val:0xfffe5555;  op2val:0xaaaa8000
TEST_P64_PNN_OP(smaldrs, x6, x7, x5, x11, 0x00000000, 0, 0xfffe5555, 0xaaaa8000, x8, 40, x13)

inst_6:
// rs1==x26, rs2==x25, rd==x20, rs2_h1_val == 21845, rs2_h0_val == 64
// opcode: smaldrs ; op1:x26; op2:x25; dest:x20; op1val:0xfff9fff8;  op2val:0x55550040
TEST_P64_PNN_OP(smaldrs, x20, x21, x26, x25, 0x00000000, 0, 0xfff9fff8, 0x55550040, x8, 48, x13)

inst_7:
// rs1==x1, rs2==x20, rd==x26, rs2_h1_val == 32767, rs1_h1_val == 1, rs1_h0_val == -129, rs2_h0_val == -17
// opcode: smaldrs ; op1:x1; op2:x20; dest:x26; op1val:0x0001ff7f;  op2val:0x7fffffef
TEST_P64_PNN_OP(smaldrs, x26, x27, x1, x20, 0x00000000, 0, 0x0001ff7f, 0x7fffffef, x8, 56, x13)

inst_8:
// rs1==x20, rs2==x31, rd==x2, rs2_h1_val == -16385, rs2_h0_val == -3, rs1_h1_val == -513
// opcode: smaldrs ; op1:x20; op2:x31; dest:x2; op1val:0xfdffc000;  op2val:0xbffffffd
TEST_P64_PNN_OP(smaldrs, x2, x3, x20, x31, 0x00000000, 0, 0xfdffc000, 0xbffffffd, x8, 64, x13)

inst_9:
// rs1==x9, rs2==x24, rd==x22, rs2_h1_val == -8193, rs1_h1_val == 8, rs2_h0_val == 16384, rs1_h0_val == -1
// opcode: smaldrs ; op1:x9; op2:x24; dest:x22; op1val:0x0008ffff;  op2val:0xdfff4000
TEST_P64_PNN_OP(smaldrs, x22, x23, x9, x24, 0x00000000, 0, 0x0008ffff, 0xdfff4000, x8, 72, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_10:
// rs1==x4, rs2==x16, rd==x18, rs2_h1_val == -4097, rs1_h0_val == -3, rs2_h0_val == -1, rs1_h1_val == 128
// opcode: smaldrs ; op1:x4; op2:x16; dest:x18; op1val:0x0080fffd;  op2val:0xefffffff
TEST_P64_PNN_OP(smaldrs, x18, x19, x4, x16, 0x00000000, 0, 0x0080fffd, 0xefffffff, x1, 0, x3)

inst_11:
// rs1==x31, rs2==x21, rd==x24, rs2_h1_val == -1025, rs1_h0_val == 32, rs2_h0_val == 32, rs1_h1_val == 32767
// opcode: smaldrs ; op1:x31; op2:x21; dest:x24; op1val:0x7fff0020;  op2val:0xfbff0020
TEST_P64_PNN_OP(smaldrs, x24, x25, x31, x21, 0x00000000, 0, 0x7fff0020, 0xfbff0020, x1, 8, x3)

inst_12:
// rs1==x11, rs2==x5, rd==x28, rs2_h1_val == -513, rs1_h1_val == 8192, rs2_h0_val == -16385, rs1_h0_val == -8193
// opcode: smaldrs ; op1:x11; op2:x5; dest:x28; op1val:0x2000dfff;  op2val:0xfdffbfff
TEST_P64_PNN_OP(smaldrs, x28, x29, x11, x5, 0x00000000, 0, 0x2000dfff, 0xfdffbfff, x1, 16, x3)

inst_13:
// rs1==x7, rs2==x26, rd==x8, rs2_h1_val == -257, rs1_h1_val == 16, rs2_h0_val == 4096, rs1_h0_val == 4
// opcode: smaldrs ; op1:x7; op2:x26; dest:x8; op1val:0x00100004;  op2val:0xfeff1000
TEST_P64_PNN_OP(smaldrs, x8, x9, x7, x26, 0x00000000, 0, 0x00100004, 0xfeff1000, x1, 24, x3)

inst_14:
// rs1==x27, rs2==x2, rd==x12, rs2_h1_val == -129, 
// opcode: smaldrs ; op1:x27; op2:x2; dest:x12; op1val:0xfffefff8;  op2val:0xff7f0005
TEST_P64_PNN_OP(smaldrs, x12, x13, x27, x2, 0x00000000, 0, 0xfffefff8, 0xff7f0005, x1, 32, x3)

inst_15:
// rs1==x15, rs2==x7, rs2_h1_val == -65, rs2_h0_val == 256, rs1_h0_val == -4097
// opcode: smaldrs ; op1:x15; op2:x7; dest:x14; op1val:0x0003efff;  op2val:0xffbf0100
TEST_P64_PNN_OP(smaldrs, x14, x15, x15, x7, 0x00000000, 0, 0x0003efff, 0xffbf0100, x1, 40, x3)

inst_16:
// rs1==x17, rs2==x28, rs2_h1_val == -33, 
// opcode: smaldrs ; op1:x17; op2:x28; dest:x22; op1val:0xfffcfffa;  op2val:0xffdffffa
TEST_P64_PNN_OP(smaldrs, x22, x23, x17, x28, 0x00000000, 0, 0xfffcfffa, 0xffdffffa, x1, 48, x3)

inst_17:
// rs1==x14, rs2==x0, rs2_h1_val == -17, rs2_h0_val == 512, rs1_h0_val == 128, rs1_h1_val == -3
// opcode: smaldrs ; op1:x14; op2:x0; dest:x20; op1val:0xfffd0080;  op2val:0xffef0200
TEST_P64_PNN_OP(smaldrs, x20, x21, x14, x0, 0x00000000, 0, 0xfffd0080, 0xffef0200, x1, 56, x7)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18:
// rs1==x8, rs2==x14, rs2_h1_val == -9, rs1_h0_val == 8
// opcode: smaldrs ; op1:x8; op2:x14; dest:x12; op1val:0xfff90008;  op2val:0xfff71000
TEST_P64_PNN_OP(smaldrs, x12, x13, x8, x14, 0x00000000, 0, 0xfff90008, 0xfff71000, x1, 0, x7)

inst_19:
// rs1==x0, rs2==x6, rs2_h1_val == -5, rs1_h1_val == -1025
// opcode: smaldrs ; op1:x0; op2:x6; dest:x14; op1val:0xfbffefff;  op2val:0xfffbfffc
TEST_P64_PNN_OP(smaldrs, x14, x15, x0, x6, 0x00000000, 0, 0xfbffefff, 0xfffbfffc, x1, 8, x7)

inst_20:
// rs1==x24, rs2==x12, rs2_h1_val == -3, rs1_h0_val == -17, rs1_h1_val == 2048, rs2_h0_val == 16
// opcode: smaldrs ; op1:x24; op2:x12; dest:x26; op1val:0x0800ffef;  op2val:0xfffd0010
TEST_P64_PNN_OP(smaldrs, x26, x27, x24, x12, 0x00000000, 0, 0x0800ffef, 0xfffd0010, x1, 16, x7)

inst_21:
// rs1==x29, rs2==x19, rs2_h1_val == -2, rs1_h1_val == 512
// opcode: smaldrs ; op1:x29; op2:x19; dest:x4; op1val:0x02000008;  op2val:0xfffe1000
TEST_P64_PNN_OP(smaldrs, x4, x5, x29, x19, 0x00000000, 0, 0x02000008, 0xfffe1000, x1, 24, x7)

inst_22:
// rs1==x6, rs2==x29, rs2_h1_val == -32768, rs1_h1_val == -65, rs1_h0_val == 0, rs2_h0_val == -2049
// opcode: smaldrs ; op1:x6; op2:x29; dest:x4; op1val:0xffbf0000;  op2val:0x8000f7ff
TEST_P64_PNN_OP(smaldrs, x4, x5, x6, x29, 0x00000000, 0, 0xffbf0000, 0x8000f7ff, x1, 32, x7)

inst_23:
// rs1==x2, rs2==x10, rs2_h1_val == 16384, rs2_h0_val == 2048
// opcode: smaldrs ; op1:x2; op2:x10; dest:x6; op1val:0x40000004;  op2val:0x40000800
TEST_P64_PNN_OP(smaldrs, x6, x7, x2, x10, 0x00000000, 0, 0x40000004, 0x40000800, x1, 40, x7)

inst_24:
// rs1==x25, rs2==x3, rs2_h1_val == 8192, rs1_h1_val == -9
// opcode: smaldrs ; op1:x25; op2:x3; dest:x6; op1val:0xfff70009;  op2val:0x2000fffa
TEST_P64_PNN_OP(smaldrs, x6, x7, x25, x3, 0x00000000, 0, 0xfff70009, 0x2000fffa, x1, 48, x7)

inst_25:
// rs1==x10, rs2==x22, rs2_h1_val == 4096, 
// opcode: smaldrs ; op1:x10; op2:x22; dest:x8; op1val:0xfff8ffff;  op2val:0x1000feff
TEST_P64_PNN_OP(smaldrs, x8, x9, x10, x22, 0x00000000, 0, 0xfff8ffff, 0x1000feff, x1, 56, x7)

inst_26:
// rs1==x23, rs2==x13, rs2_h1_val == 2048, rs2_h0_val == -1025
// opcode: smaldrs ; op1:x23; op2:x13; dest:x30; op1val:0xfdff0080;  op2val:0x0800fbff
TEST_P64_PNN_OP(smaldrs, x30, x31, x23, x13, 0x00000000, 0, 0xfdff0080, 0x0800fbff, x1, 64, x7)

inst_27:
// rs1==x21, rs2==x8, rs2_h1_val == 1024, rs1_h1_val == -257, rs2_h0_val == 8
// opcode: smaldrs ; op1:x21; op2:x8; dest:x30; op1val:0xfeff0007;  op2val:0x04000008
TEST_P64_PNN_OP(smaldrs, x30, x31, x21, x8, 0x00000000, 0, 0xfeff0007, 0x04000008, x1, 72, x7)

inst_28:
// rs1==x19, rs2==x17, rs2_h1_val == 512, rs2_h0_val == -5
// opcode: smaldrs ; op1:x19; op2:x17; dest:x24; op1val:0xfff8fdff;  op2val:0x0200fffb
TEST_P64_PNN_OP(smaldrs, x24, x25, x19, x17, 0x00000000, 0, 0xfff8fdff, 0x0200fffb, x1, 80, x7)

inst_29:
// rs1==x13, rs2==x15, rs1_h0_val == -1025, 
// opcode: smaldrs ; op1:x13; op2:x15; dest:x4; op1val:0x0100fbff;  op2val:0x04000007
TEST_P64_PNN_OP(smaldrs, x4, x5, x13, x15, 0x00000000, 0, 0x0100fbff, 0x04000007, x1, 88, x7)

inst_30:
// rs1==x22, rs2==x23, rs1_h0_val == -257, rs2_h0_val == -33
// opcode: smaldrs ; op1:x22; op2:x23; dest:x16; op1val:0xfdfffeff;  op2val:0x7fffffdf
TEST_P64_PNN_OP(smaldrs, x16, x17, x22, x23, 0x00000000, 0, 0xfdfffeff, 0x7fffffdf, x1, 96, x7)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_31:
// rs1==x28, rs2==x9, rs1_h0_val == -33, 
// opcode: smaldrs ; op1:x28; op2:x9; dest:x20; op1val:0x0007ffdf;  op2val:0xbffffeff
TEST_P64_PNN_OP(smaldrs, x20, x21, x28, x9, 0x00000000, 0, 0x0007ffdf, 0xbffffeff, x1, 0, x2)

inst_32:
// rs1_h0_val == -9, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x2000fff7;  op2val:0xfffbfffa
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x2000fff7, 0xfffbfffa, x1, 8, x2)

inst_33:
// rs1_h0_val == -5, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfff8fffb;  op2val:0xf7fffbff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfff8fffb, 0xf7fffbff, x1, 16, x2)

inst_34:
// rs1_h0_val == -2, rs1_h1_val == 4096
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x1000fffe;  op2val:0xfff6fff8
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x1000fffe, 0xfff6fff8, x1, 24, x2)

inst_35:
// rs1_h0_val == 16384, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x02004000;  op2val:0x0003fffa
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x02004000, 0x0003fffa, x1, 32, x2)

inst_36:
// rs1_h0_val == 4096, rs2_h0_val == -2
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xff7f1000;  op2val:0x2000fffe
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xff7f1000, 0x2000fffe, x1, 40, x2)

inst_37:
// rs1_h0_val == 2048, rs2_h1_val == 0
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x02000800;  op2val:0x00000200
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x02000800, 0x00000200, x1, 48, x2)

inst_38:
// rs1_h0_val == 1024, rs2_h1_val == 8
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xc0000400;  op2val:0x0008fff8
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xc0000400, 0x0008fff8, x1, 56, x2)

inst_39:
// rs1_h0_val == 512, rs1_h1_val == 2
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00020200;  op2val:0x7fff0100
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00020200, 0x7fff0100, x1, 64, x2)

inst_40:
// rs1_h0_val == 64, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x02000040;  op2val:0x0400fbff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x02000040, 0x0400fbff, x1, 72, x2)

inst_41:
// rs1_h0_val == 16, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xc0000010;  op2val:0xfbfff7ff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xc0000010, 0xfbfff7ff, x1, 80, x2)

inst_42:
// rs1_h0_val == 2, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00080002;  op2val:0x0006ffdf
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00080002, 0x0006ffdf, x1, 88, x2)

inst_43:
// rs1_h0_val == 1, rs2_h1_val == 2
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x02000001;  op2val:0x00020100
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x02000001, 0x00020100, x1, 96, x2)

inst_44:
// rs2_h1_val == 128, rs1_h0_val == 32767, rs2_h0_val == 8192
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00057fff;  op2val:0x00802000
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00057fff, 0x00802000, x1, 104, x2)

inst_45:
// rs2_h1_val == 64, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0008ffff;  op2val:0x0040fffb
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0008ffff, 0x0040fffb, x1, 112, x2)

inst_46:
// rs2_h1_val == 32, rs1_h1_val == -1, rs2_h0_val == 2
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xffff1000;  op2val:0x00200002
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xffff1000, 0x00200002, x1, 120, x2)

inst_47:
// rs2_h1_val == 16, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x7fff0009;  op2val:0x0010ffff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x7fff0009, 0x0010ffff, x1, 128, x2)

inst_48:
// rs2_h0_val == 1024, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfffc0005;  op2val:0x08000400
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfffc0005, 0x08000400, x1, 136, x2)

inst_49:
// rs2_h0_val == 4, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfdff0400;  op2val:0xffef0004
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfdff0400, 0xffef0004, x1, 144, x2)

inst_50:
// rs2_h0_val == 1, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfffd0004;  op2val:0xfdff0001
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfffd0004, 0xfdff0001, x1, 152, x2)

inst_51:
// rs2_h0_val == 0, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfffe2000;  op2val:0xf7ff0000
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfffe2000, 0xf7ff0000, x1, 160, x2)

inst_52:
// rs1_h1_val == -21846, rs2_h0_val == -9
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xaaaaffff;  op2val:0xfffdfff7
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xaaaaffff, 0xfffdfff7, x1, 168, x2)

inst_53:
// rs1_h1_val == 21845, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x55552000;  op2val:0xfff9fffc
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x55552000, 0xfff9fffc, x1, 176, x2)

inst_54:
// rs1_h1_val == -16385, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xbfff0006;  op2val:0x40008000
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xbfff0006, 0x40008000, x1, 184, x2)

inst_55:
// rs1_h1_val == -8193, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xdfff8000;  op2val:0x00090009
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xdfff8000, 0x00090009, x1, 192, x2)

inst_56:
// rs1_h1_val == -2049, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xf7ff0020;  op2val:0x0100ffdf
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xf7ff0020, 0x0100ffdf, x1, 200, x2)

inst_57:
// rs1_h1_val == -33, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xffdf0009;  op2val:0x02000002
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xffdf0009, 0x02000002, x1, 208, x2)

inst_58:
// rs1_h1_val == -17, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xffef0020;  op2val:0x3fff0004
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xffef0020, 0x3fff0004, x1, 216, x2)

inst_59:
// rs1_h1_val == -5, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfffb0005;  op2val:0x00030008
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfffb0005, 0x00030008, x1, 224, x2)

inst_60:
// rs1_h1_val == -32768, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x80000008;  op2val:0x0100fffb
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x80000008, 0x0100fffb, x1, 232, x2)

inst_61:
// rs2_h1_val == 4, rs1_h1_val == 0
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00000100;  op2val:0x00040000
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00000100, 0x00040000, x1, 240, x2)

inst_62:
// rs1_h1_val == 1024, rs2_h0_val == 32767
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x04000020;  op2val:0x02007fff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x04000020, 0x02007fff, x1, 248, x2)

inst_63:
// rs2_h1_val == 1, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfffac000;  op2val:0x00010007
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfffac000, 0x00010007, x1, 256, x2)

inst_64:
// rs2_h1_val == -1, rs2_h0_val == -8193
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xff7f0080;  op2val:0xffffdfff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xff7f0080, 0xffffdfff, x1, 264, x2)

inst_65:
// rs2_h0_val == -65, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfff8fff9;  op2val:0xffbfffbf
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfff8fff9, 0xffbfffbf, x1, 272, x2)

inst_66:
// rs1_h1_val == 64, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00402000;  op2val:0x00020010
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00402000, 0x00020010, x1, 280, x2)

inst_67:
// rs2_h0_val == -21846, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xffbf0010;  op2val:0x4000aaaa
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xffbf0010, 0x4000aaaa, x1, 288, x2)

inst_68:
// rs1_h1_val == 32, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x00200004;  op2val:0xfdffaaaa
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x00200004, 0xfdffaaaa, x1, 296, x2)

inst_69:
// rs2_h0_val == 21845, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xffff0001;  op2val:0xfffb5555
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xffff0001, 0xfffb5555, x1, 304, x2)

inst_70:
// rs2_h0_val == -4097, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0100fffe;  op2val:0x7fffefff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0100fffe, 0x7fffefff, x1, 312, x2)

inst_71:
// rs1_h0_val == -21846, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0003aaaa;  op2val:0x0002f7ff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0003aaaa, 0x0002f7ff, x1, 320, x2)

inst_72:
// rs2_h0_val == -129, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0005fff7;  op2val:0x0003ff7f
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0005fff7, 0x0003ff7f, x1, 328, x2)

inst_73:
// rs1_h0_val == -16385, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0007bfff;  op2val:0xffff0007
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0007bfff, 0xffff0007, x1, 336, x2)

inst_74:
// rs1_h0_val == -2049, 
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0x0002f7ff;  op2val:0x04000020
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0x0002f7ff, 0x04000020, x1, 344, x2)

inst_75:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8192, rs1_h1_val == -4097, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xefff2000;  op2val:0xfff83fff
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xefff2000, 0xfff83fff, x1, 352, x2)

inst_76:
// rs2_h1_val == -5, rs1_h1_val == -1025
// opcode: smaldrs ; op1:x31; op2:x29; dest:x30; op1val:0xfbffefff;  op2val:0xfffbfffc
TEST_P64_PNN_OP(smaldrs, x30, x31, x31, x29, 0x00000000, 0, 0xfbffefff, 0xfffbfffc, x1, 360, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
