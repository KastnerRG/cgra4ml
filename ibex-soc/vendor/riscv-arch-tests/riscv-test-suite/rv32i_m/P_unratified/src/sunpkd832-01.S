
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd832 instruction of the RISC-V RV32PZicsr extension for the sunpkd832 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd832)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x29, rd==x20, rs1_b0_val == -128, rs1_b2_val == 32, rs1_b1_val == -1, rs1_b3_val == 16
// opcode: sunpkd832 ; op1:x29; dest:x20; op1val:0x1020ff80;
TEST_RD_OP( sunpkd832, x20, x29, 0x00000000, 0x1020ff80, x3, 0, x13)

inst_1:
// rs1==x18, rd==x27, rs1_b3_val == -86, rs1_b0_val == 0, rs1_b1_val == 16, rs1_b2_val == 0
// opcode: sunpkd832 ; op1:x18; dest:x27; op1val:0xaa001000;
TEST_RD_OP( sunpkd832, x27, x18, 0x00000000, 0xaa001000, x3, 4, x13)

inst_2:
// rs1==x31, rd==x15, rs1_b3_val == 85, rs1_b1_val == 0, rs1_b0_val == -86
// opcode: sunpkd832 ; op1:x31; dest:x15; op1val:0x55f600aa;
TEST_RD_OP( sunpkd832, x15, x31, 0x00000000, 0x55f600aa, x3, 8, x13)

inst_3:
// rs1==x23, rd==x10, rs1_b3_val == 127, rs1_b0_val == -2
// opcode: sunpkd832 ; op1:x23; dest:x10; op1val:0x7f03fffe;
TEST_RD_OP( sunpkd832, x10, x23, 0x00000000, 0x7f03fffe, x3, 12, x13)

inst_4:
// rs1==x8, rd==x26, rs1_b3_val == -65, rs1_b0_val == -65
// opcode: sunpkd832 ; op1:x8; dest:x26; op1val:0xbf05c0bf;
TEST_RD_OP( sunpkd832, x26, x8, 0x00000000, 0xbf05c0bf, x3, 16, x13)

inst_5:
// rs1==x10, rd==x14, rs1_b3_val == -33, rs1_b2_val == 64, rs1_b0_val == -5
// opcode: sunpkd832 ; op1:x10; dest:x14; op1val:0xdf40f8fb;
TEST_RD_OP( sunpkd832, x14, x10, 0x00000000, 0xdf40f8fb, x3, 20, x13)

inst_6:
// rs1==x5, rd==x6, rs1_b3_val == -17, rs1_b2_val == -1, rs1_b1_val == -17
// opcode: sunpkd832 ; op1:x5; dest:x6; op1val:0xefffeff8;
TEST_RD_OP( sunpkd832, x6, x5, 0x00000000, 0xefffeff8, x3, 24, x13)

inst_7:
// rs1==x27, rd==x12, rs1_b3_val == -9, rs1_b0_val == -3, rs1_b1_val == 8
// opcode: sunpkd832 ; op1:x27; dest:x12; op1val:0xf73f08fd;
TEST_RD_OP( sunpkd832, x12, x27, 0x00000000, 0xf73f08fd, x3, 28, x13)

inst_8:
// rs1==x19, rd==x9, rs1_b3_val == -5, rs1_b1_val == -33, rs1_b2_val == 85
// opcode: sunpkd832 ; op1:x19; dest:x9; op1val:0xfb55df09;
TEST_RD_OP( sunpkd832, x9, x19, 0x00000000, 0xfb55df09, x3, 32, x13)

inst_9:
// rs1==x17, rd==x11, rs1_b3_val == -3, rs1_b1_val == 85
// opcode: sunpkd832 ; op1:x17; dest:x11; op1val:0xfdfa5500;
TEST_RD_OP( sunpkd832, x11, x17, 0x00000000, 0xfdfa5500, x3, 36, x13)

inst_10:
// rs1==x26, rd==x28, rs1_b3_val == -2, rs1_b0_val == 64
// opcode: sunpkd832 ; op1:x26; dest:x28; op1val:0xfec03f40;
TEST_RD_OP( sunpkd832, x28, x26, 0x00000000, 0xfec03f40, x3, 40, x13)

inst_11:
// rs1==x20, rd==x24, rs1_b3_val == -128, rs1_b2_val == 8
// opcode: sunpkd832 ; op1:x20; dest:x24; op1val:0x8008df03;
TEST_RD_OP( sunpkd832, x24, x20, 0x00000000, 0x8008df03, x3, 44, x13)

inst_12:
// rs1==x28, rd==x8, rs1_b3_val == 64, 
// opcode: sunpkd832 ; op1:x28; dest:x8; op1val:0x4020f9f8;
TEST_RD_OP( sunpkd832, x8, x28, 0x00000000, 0x4020f9f8, x3, 48, x13)

inst_13:
// rs1==x30, rd==x22, rs1_b3_val == 32, rs1_b2_val == -17, rs1_b0_val == -17
// opcode: sunpkd832 ; op1:x30; dest:x22; op1val:0x20ef09ef;
TEST_RD_OP( sunpkd832, x22, x30, 0x00000000, 0x20ef09ef, x3, 52, x13)

inst_14:
// rs1==x9, rd==x17, rs1_b3_val == 8, rs1_b0_val == 4, rs1_b2_val == -2
// opcode: sunpkd832 ; op1:x9; dest:x17; op1val:0x8fef604;
TEST_RD_OP( sunpkd832, x17, x9, 0x00000000, 0x8fef604, x3, 56, x13)

inst_15:
// rs1==x25, rd==x7, rs1_b3_val == 4, rs1_b2_val == -128
// opcode: sunpkd832 ; op1:x25; dest:x7; op1val:0x4800304;
TEST_RD_OP( sunpkd832, x7, x25, 0x00000000, 0x4800304, x3, 60, x13)

inst_16:
// rs1==x0, rd==x4, rs1_b3_val == 2, 
// opcode: sunpkd832 ; op1:x0; dest:x4; op1val:0x2fc3ffa;
TEST_RD_OP( sunpkd832, x4, x0, 0x00000000, 0x2fc3ffa, x3, 64, x13)

inst_17:
// rs1==x6, rd==x29, rs1_b3_val == 1, 
// opcode: sunpkd832 ; op1:x6; dest:x29; op1val:0x103003f;
TEST_RD_OP( sunpkd832, x29, x6, 0x00000000, 0x103003f, x3, 68, x13)

inst_18:
// rs1==x7, rd==x18, rs1_b3_val == 0, 
// opcode: sunpkd832 ; op1:x7; dest:x18; op1val:0xfa1080;
TEST_RD_OP( sunpkd832, x18, x7, 0x00000000, 0xfa1080, x3, 72, x13)

inst_19:
// rs1==x1, rd==x25, rs1_b3_val == -1, rs1_b1_val == -128, rs1_b2_val == -9
// opcode: sunpkd832 ; op1:x1; dest:x25; op1val:0xfff780fe;
TEST_RD_OP( sunpkd832, x25, x1, 0x00000000, 0xfff780fe, x3, 76, x13)

inst_20:
// rs1==x15, rd==x19, rs1_b2_val == -86, rs1_b1_val == 32
// opcode: sunpkd832 ; op1:x15; dest:x19; op1val:0x8aa20fc;
TEST_RD_OP( sunpkd832, x19, x15, 0x00000000, 0x8aa20fc, x3, 80, x13)

inst_21:
// rs1==x24, rd==x2, rs1_b0_val == -33, 
// opcode: sunpkd832 ; op1:x24; dest:x2; op1val:0xf740f6df;
TEST_RD_OP( sunpkd832, x2, x24, 0x00000000, 0xf740f6df, x3, 84, x13)

inst_22:
// rs1==x14, rd==x21, rs1_b0_val == -9, rs1_b1_val == -3
// opcode: sunpkd832 ; op1:x14; dest:x21; op1val:0x820fdf7;
TEST_RD_OP( sunpkd832, x21, x14, 0x00000000, 0x820fdf7, x3, 88, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_23:
// rs1==x21, rd==x3, rs1_b0_val == 32, rs1_b1_val == -86
// opcode: sunpkd832 ; op1:x21; dest:x3; op1val:0xf8f7aa20;
TEST_RD_OP( sunpkd832, x3, x21, 0x00000000, 0xf8f7aa20, x6, 0, x7)

inst_24:
// rs1==x13, rd==x16, rs1_b0_val == 16, 
// opcode: sunpkd832 ; op1:x13; dest:x16; op1val:0x905c010;
TEST_RD_OP( sunpkd832, x16, x13, 0x00000000, 0x905c010, x6, 4, x7)

inst_25:
// rs1==x16, rd==x13, rs1_b0_val == 8, 
// opcode: sunpkd832 ; op1:x16; dest:x13; op1val:0xdff9f808;
TEST_RD_OP( sunpkd832, x13, x16, 0x00000000, 0xdff9f808, x6, 8, x7)

inst_26:
// rs1==x3, rd==x5, rs1_b0_val == 2, 
// opcode: sunpkd832 ; op1:x3; dest:x5; op1val:0x5aadf02;
TEST_RD_OP( sunpkd832, x5, x3, 0x00000000, 0x5aadf02, x6, 12, x7)

inst_27:
// rs1==x2, rd==x0, rs1_b0_val == 1, rs1_b2_val == 127
// opcode: sunpkd832 ; op1:x2; dest:x0; op1val:0xfb7f8001;
TEST_RD_OP( sunpkd832, x0, x2, 0x00000000, 0xfb7f8001, x6, 16, x7)

inst_28:
// rs1==x12, rd==x30, rs1_b0_val == -1, rs1_b1_val == 127
// opcode: sunpkd832 ; op1:x12; dest:x30; op1val:0x1f87fff;
TEST_RD_OP( sunpkd832, x30, x12, 0x00000000, 0x1f87fff, x6, 20, x7)

inst_29:
// rs1==x22, rd==x31, rs1_b2_val == -65, 
// opcode: sunpkd832 ; op1:x22; dest:x31; op1val:0x40bf3fbf;
TEST_RD_OP( sunpkd832, x31, x22, 0x00000000, 0x40bf3fbf, x6, 24, x7)

inst_30:
// rs1==x4, rd==x23, rs1_b2_val == -33, 
// opcode: sunpkd832 ; op1:x4; dest:x23; op1val:0xdfdff603;
TEST_RD_OP( sunpkd832, x23, x4, 0x00000000, 0xdfdff603, x6, 28, x7)

inst_31:
// rs1==x11, rd==x1, rs1_b2_val == -5, 
// opcode: sunpkd832 ; op1:x11; dest:x1; op1val:0x5fbfd08;
TEST_RD_OP( sunpkd832, x1, x11, 0x00000000, 0x5fbfd08, x6, 32, x7)

inst_32:
// rs1_b2_val == 16, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xdf10f63f;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xdf10f63f, x6, 36, x7)

inst_33:
// rs1_b2_val == 4, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xaa04f820;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xaa04f820, x6, 40, x7)

inst_34:
// rs1_b2_val == 2, rs1_b1_val == 1
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf90201f6;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xf90201f6, x6, 44, x7)

inst_35:
// rs1_b2_val == 1, rs1_b1_val == 64, rs1_b0_val == 127
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xef01407f;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xef01407f, x6, 48, x7)

inst_36:
// rs1_b1_val == -65, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x7ffabff7;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0x7ffabff7, x6, 52, x7)

inst_37:
// rs1_b1_val == -5, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf7f9fbfd;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xf7f9fbfd, x6, 56, x7)

inst_38:
// rs1_b1_val == -2, rs1_b0_val == 85
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x10fafe55;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0x10fafe55, x6, 60, x7)

inst_39:
// rs1_b1_val == 4, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xfc050409;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xfc050409, x6, 64, x7)

inst_40:
// rs1_b1_val == 2, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xc0df02aa;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xc0df02aa, x6, 68, x7)

inst_41:
// rs1_b2_val == -3, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x8fdaa01;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0x8fdaa01, x6, 72, x7)

inst_42:
// rs1_b1_val == -9, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf6c0f708;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xf6c0f708, x6, 76, x7)

inst_43:
// rs1_b3_val == 2, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x2fc3ffa;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0x2fc3ffa, x6, 80, x7)

inst_44:
// rs1_b0_val == 1, rs1_b2_val == 127
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xfb7f8001;
TEST_RD_OP( sunpkd832, x31, x30, 0x00000000, 0xfb7f8001, x6, 84, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 22*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
