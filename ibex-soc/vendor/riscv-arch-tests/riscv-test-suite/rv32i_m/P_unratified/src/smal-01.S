
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smal instruction of the RISC-V RV32PZicsr extension for the smal covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smal)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x9, rd==x22, rs1_val == (-2**63), rs2_h1_val == 1
// opcode: smal ; op1:x6; op2:x9; dest:x22; op1val:0x8000000000000000; op2val:0x00010007;
TEST_P64_PPN_OP(smal, x22, x23, x6, x7, x9, 0x00000000, 0, 0x00000000, 0x80000000, 0x00010007, x1, 0, x3)

inst_1:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x28, rs2_h1_val == -21846, 
// opcode: smal ; op1:x18; op2:x18; dest:x28; op1val:0xfffffffbffffffff; op2val:0xaaaafffc;
TEST_P64_PPN_OP(smal, x28, x29, x18, x19, x18, 0x00000000, 0, 0xffffffff, 0xfffffffb, 0xaaaafffc, x1, 8, x3)

inst_2:
// rs1 == rd != rs2, rs1==x8, rs2==x29, rd==x8, rs2_h1_val == 21845, rs2_h0_val == -1025
// opcode: smal ; op1:x8; op2:x29; dest:x8; op1val:0x0000000000000003; op2val:0x5555fbff;
TEST_P64_PPN_OP(smal, x8, x9, x8, x9, x29, 0x00000000, 0, 0x00000003, 0x00000000, 0x5555fbff, x1, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs2_h1_val == 32767, rs2_h0_val == -33
// opcode: smal ; op1:x12; op2:x12; dest:x12; op1val:0xfffffffffffffff7; op2val:0x7fffffdf;
TEST_P64_PPN_OP(smal, x12, x13, x12, x13, x12, 0x00000000, 0, 0xfffffff7, 0xffffffff, 0x7fffffdf, x1, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x2, rd==x2, rs2_h1_val == -16385, 
// opcode: smal ; op1:x14; op2:x2; dest:x2; op1val:0xffffffbfffffffff; op2val:0xbffffffc;
TEST_P64_PPN_OP(smal, x2, x3, x14, x15, x2, 0x00000000, 0, 0xffffffff, 0xffffffbf, 0xbffffffc, x1, 32, x3)

inst_5:
// rs1==x20, rs2==x13, rd==x30, rs2_h1_val == -8193, 
// opcode: smal ; op1:x20; op2:x13; dest:x30; op1val:0xfffffffffffffffa; op2val:0xdfff0007;
TEST_P64_PPN_OP(smal, x30, x31, x20, x21, x13, 0x00000000, 0, 0xfffffffa, 0xffffffff, 0xdfff0007, x1, 40, x3)

inst_6:
// rs1==x30, rs2==x8, rd==x26, rs2_h1_val == -4097, rs2_h0_val == 16384
// opcode: smal ; op1:x30; op2:x8; dest:x26; op1val:0xfffffffffff7ffff; op2val:0xefff4000;
TEST_P64_PPN_OP(smal, x26, x27, x30, x31, x8, 0x00000000, 0, 0xfff7ffff, 0xffffffff, 0xefff4000, x1, 48, x3)

inst_7:
// rs1==x4, rs2==x20, rd==x24, rs2_h1_val == -2049, rs2_h0_val == 2
// opcode: smal ; op1:x4; op2:x20; dest:x24; op1val:0xfffbffffffffffff; op2val:0xf7ff0002;
TEST_P64_PPN_OP(smal, x24, x25, x4, x5, x20, 0x00000000, 0, 0xffffffff, 0xfffbffff, 0xf7ff0002, x1, 56, x3)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_8:
// rs1==x22, rs2==x15, rd==x18, rs2_h1_val == -1025, rs2_h0_val == 1
// opcode: smal ; op1:x22; op2:x15; dest:x18; op1val:0xffffffffffffffef; op2val:0xfbff0001;
TEST_P64_PPN_OP(smal, x18, x19, x22, x23, x15, 0x00000000, 0, 0xffffffef, 0xffffffff, 0xfbff0001, x1, 0, x8)

inst_9:
// rs1==x24, rs2==x10, rd==x14, rs2_h1_val == -513, 
// opcode: smal ; op1:x24; op2:x10; dest:x14; op1val:0xaaaaaaaaaaaaaaaa; op2val:0xfdfffffa;
TEST_P64_PPN_OP(smal, x14, x15, x24, x25, x10, 0x00000000, 0, 0xaaaaaaaa, 0xaaaaaaaa, 0xfdfffffa, x1, 8, x8)

inst_10:
// rs1==x2, rs2==x19, rd==x6, rs2_h1_val == -257, rs2_h0_val == 512
// opcode: smal ; op1:x2; op2:x19; dest:x6; op1val:0xfffffffffffeffff; op2val:0xfeff0200;
TEST_P64_PPN_OP(smal, x6, x7, x2, x3, x19, 0x00000000, 0, 0xfffeffff, 0xffffffff, 0xfeff0200, x1, 16, x8)

inst_11:
// rs1==x28, rs2==x6, rd==x20, rs2_h1_val == -129, 
// opcode: smal ; op1:x28; op2:x6; dest:x20; op1val:0x0000000000080000; op2val:0xff7f0007;
TEST_P64_PPN_OP(smal, x20, x21, x28, x29, x6, 0x00000000, 0, 0x00080000, 0x00000000, 0xff7f0007, x1, 24, x8)

inst_12:
// rs1==x10, rs2==x30, rd==x4, rs2_h1_val == -65, 
// opcode: smal ; op1:x10; op2:x30; dest:x4; op1val:0xfffffffbffffffff; op2val:0xffbf0001;
TEST_P64_PPN_OP(smal, x4, x5, x10, x11, x30, 0x00000000, 0, 0xffffffff, 0xfffffffb, 0xffbf0001, x1, 32, x8)

inst_13:
// rs1==x26, rs2==x24, rd==x10, rs2_h1_val == -33, rs2_h0_val == 32767
// opcode: smal ; op1:x26; op2:x24; dest:x10; op1val:0xfffffffffffffeff; op2val:0xffdf7fff;
TEST_P64_PPN_OP(smal, x10, x11, x26, x27, x24, 0x00000000, 0, 0xfffffeff, 0xffffffff, 0xffdf7fff, x1, 40, x8)

inst_14:
// rs1==x16, rs2_h1_val == -17, 
// opcode: smal ; op1:x16; op2:x11; dest:x24; op1val:0xffffffffbfffffff; op2val:0xffeffff6;
TEST_P64_PPN_OP(smal, x24, x25, x16, x17, x11, 0x00000000, 0, 0xbfffffff, 0xffffffff, 0xffeffff6, x1, 48, x8)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_15:
// rs2==x28, rs2_h1_val == -9, 
// opcode: smal ; op1:x10; op2:x28; dest:x6; op1val:0xfffffffffffffff9; op2val:0xfff70002;
TEST_P64_PPN_OP(smal, x6, x7, x10, x11, x28, 0x00000000, 0, 0xfffffff9, 0xffffffff, 0xfff70002, x1, 0, x5)

inst_16:
// rs2==x0, rs2_h1_val == -5, rs2_h0_val == -17
// opcode: smal ; op1:x22; op2:x0; dest:x16; op1val:0xfffffffffffffff9; op2val:0xfffbffef;
TEST_P64_PPN_OP(smal, x16, x17, x22, x23, x0, 0x00000000, 0, 0xfffffff9, 0xffffffff, 0xfffbffef, x1, 8, x5)

inst_17:
// rs2==x21, rs2_h1_val == -3, 
// opcode: smal ; op1:x8; op2:x21; dest:x10; op1val:0xfff7ffffffffffff; op2val:0xfffd0003;
TEST_P64_PPN_OP(smal, x10, x11, x8, x9, x21, 0x00000000, 0, 0xffffffff, 0xfff7ffff, 0xfffd0003, x1, 16, x5)

inst_18:
// rs2==x17, rs2_h1_val == -2, 
// opcode: smal ; op1:x12; op2:x17; dest:x16; op1val:0xffffffffff7fffff; op2val:0xfffe0002;
TEST_P64_PPN_OP(smal, x16, x17, x12, x13, x17, 0x00000000, 0, 0xff7fffff, 0xffffffff, 0xfffe0002, x1, 24, x5)

inst_19:
// rs2==x23, rs2_h1_val == -32768, rs2_h0_val == 21845
// opcode: smal ; op1:x20; op2:x23; dest:x2; op1val:0xffffffbfffffffff; op2val:0x80005555;
TEST_P64_PPN_OP(smal, x2, x3, x20, x21, x23, 0x00000000, 0, 0xffffffff, 0xffffffbf, 0x80005555, x1, 32, x5)

inst_20:
// rs2==x3, rs2_h1_val == 16384, 
// opcode: smal ; op1:x6; op2:x3; dest:x22; op1val:0xff7fffffffffffff; op2val:0x40000005;
TEST_P64_PPN_OP(smal, x22, x23, x6, x7, x3, 0x00000000, 0, 0xffffffff, 0xff7fffff, 0x40000005, x1, 40, x5)

inst_21:
// rs2==x16, rs2_h1_val == 8192, 
// opcode: smal ; op1:x20; op2:x16; dest:x18; op1val:0x0000400000000000; op2val:0x2000fff8;
TEST_P64_PPN_OP(smal, x18, x19, x20, x21, x16, 0x00000000, 0, 0x00000000, 0x00004000, 0x2000fff8, x1, 48, x5)

inst_22:
// rs2==x4, rs2_h1_val == 4096, 
// opcode: smal ; op1:x26; op2:x4; dest:x20; op1val:0x0000020000000000; op2val:0x10000007;
TEST_P64_PPN_OP(smal, x20, x21, x26, x27, x4, 0x00000000, 0, 0x00000000, 0x00000200, 0x10000007, x1, 56, x5)

inst_23:
// rs2==x7, rs2_h1_val == 2048, rs2_h0_val == -16385
// opcode: smal ; op1:x4; op2:x7; dest:x26; op1val:0xffffffffffffffdf; op2val:0x0800bfff;
TEST_P64_PPN_OP(smal, x26, x27, x4, x5, x7, 0x00000000, 0, 0xffffffdf, 0xffffffff, 0x0800bfff, x1, 64, x5)

inst_24:
// rs2==x31, rs2_h1_val == 1024, 
// opcode: smal ; op1:x26; op2:x31; dest:x30; op1val:0xffffffffff7fffff; op2val:0x0400ffdf;
TEST_P64_PPN_OP(smal, x30, x31, x26, x27, x31, 0x00000000, 0, 0xff7fffff, 0xffffffff, 0x0400ffdf, x1, 72, x5)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_25:
// rs2==x22, rs2_h1_val == 512, rs2_h0_val == -2
// opcode: smal ; op1:x10; op2:x22; dest:x26; op1val:0xffffffffffffbfff; op2val:0x0200fffe;
TEST_P64_PPN_OP(smal, x26, x27, x10, x11, x22, 0x00000000, 0, 0xffffbfff, 0xffffffff, 0x0200fffe, x12, 0, x13)

inst_26:
// rs2==x27, rs2_h1_val == 256, rs2_h0_val == 128
// opcode: smal ; op1:x30; op2:x27; dest:x26; op1val:0x0000000000000080; op2val:0x01000080;
TEST_P64_PPN_OP(smal, x26, x27, x30, x31, x27, 0x00000000, 0, 0x00000080, 0x00000000, 0x01000080, x12, 8, x13)

inst_27:
// rs2==x14, rs2_h1_val == 128, 
// opcode: smal ; op1:x2; op2:x14; dest:x22; op1val:0x0004000000000000; op2val:0x0080fff9;
TEST_P64_PPN_OP(smal, x22, x23, x2, x3, x14, 0x00000000, 0, 0x00000000, 0x00040000, 0x0080fff9, x12, 16, x13)

inst_28:
// rs2==x1, rs2_h1_val == 64, 
// opcode: smal ; op1:x4; op2:x1; dest:x6; op1val:0xdfffffffffffffff; op2val:0x0040fff9;
TEST_P64_PPN_OP(smal, x6, x7, x4, x5, x1, 0x00000000, 0, 0xffffffff, 0xdfffffff, 0x0040fff9, x12, 24, x13)

inst_29:
// rs2==x5, rs2_h1_val == 32, 
// opcode: smal ; op1:x10; op2:x5; dest:x8; op1val:0x0100000000000000; op2val:0x0020fbff;
TEST_P64_PPN_OP(smal, x8, x9, x10, x11, x5, 0x00000000, 0, 0x00000000, 0x01000000, 0x0020fbff, x12, 32, x13)

inst_30:
// rs2==x25, rs2_h1_val == 16, rs2_h0_val == 32
// opcode: smal ; op1:x8; op2:x25; dest:x2; op1val:0x0000000000000400; op2val:0x00100020;
TEST_P64_PPN_OP(smal, x2, x3, x8, x9, x25, 0x00000000, 0, 0x00000400, 0x00000000, 0x00100020, x12, 40, x13)

inst_31:
// rs2==x26, rs2_h1_val == 8, 
// opcode: smal ; op1:x20; op2:x26; dest:x10; op1val:0xfffffffff7ffffff; op2val:0x0008fbff;
TEST_P64_PPN_OP(smal, x10, x11, x20, x21, x26, 0x00000000, 0, 0xf7ffffff, 0xffffffff, 0x0008fbff, x12, 48, x13)

inst_32:
// rs2_h0_val == 64, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000200000000000; op2val:0xf7ff0040;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00002000, 0xf7ff0040, x12, 56, x13)

inst_33:
// rs2_h0_val == 16, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000000000004; op2val:0xfdff0010;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000004, 0x00000000, 0xfdff0010, x12, 64, x13)

inst_34:
// rs2_h0_val == 8, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xdfffffffffffffff; op2val:0xfdff0008;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xdfffffff, 0xfdff0008, x12, 72, x13)

inst_35:
// rs2_h0_val == 4, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xffdfffffffffffff; op2val:0x00060004;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xffdfffff, 0x00060004, x12, 80, x13)

inst_36:
// rs2_h0_val == 0, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xffffffffffffffff; op2val:0x00080000;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xffffffff, 0x00080000, x12, 88, x13)

inst_37:
// rs2_h0_val == -1, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffff7ffffffff; op2val:0xfff9ffff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xfffffff7, 0xfff9ffff, x12, 96, x13)

inst_38:
// rs1_val == (2**63-1), 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x7fffffffffffffff; op2val:0x10000006;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0x7fffffff, 0x10000006, x12, 104, x13)

inst_39:
// rs1_val == 0, rs2_h0_val == -2049
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000000000000; op2val:0x0008f7ff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00000000, 0x0008f7ff, x12, 112, x13)

inst_40:
// rs1_val == 1, rs2_h0_val == -65
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000000000001; op2val:0xff7fffbf;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000001, 0x00000000, 0xff7fffbf, x12, 120, x13)

inst_41:
// rs2_h1_val == 4, rs2_h0_val == -21846
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xff7fffffffffffff; op2val:0x0004aaaa;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xff7fffff, 0x0004aaaa, x12, 128, x13)

inst_42:
// rs2_h1_val == 2, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0020000000000000; op2val:0x00023fff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00200000, 0x00023fff, x12, 136, x13)

inst_43:
// rs2_h1_val == 0, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xffffbfffffffffff; op2val:0x0000fbff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xffffbfff, 0x0000fbff, x12, 144, x13)

inst_44:
// rs2_h1_val == -1, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0040000000000000; op2val:0xffffffef;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00400000, 0xffffffef, x12, 152, x13)

inst_45:
// rs2_h0_val == -8193, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffffdffffffff; op2val:0xff7fdfff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xfffffffd, 0xff7fdfff, x12, 160, x13)

inst_46:
// rs2_h0_val == -4097, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000200000000000; op2val:0x0010efff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00002000, 0x0010efff, x12, 168, x13)

inst_47:
// rs2_h0_val == -513, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000000002000; op2val:0xfffefdff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00002000, 0x00000000, 0xfffefdff, x12, 176, x13)

inst_48:
// rs2_h0_val == -257, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000100000000000; op2val:0x1000feff;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00001000, 0x1000feff, x12, 184, x13)

inst_49:
// rs2_h0_val == -129, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xaaaaaaaaaaaaaaaa; op2val:0xfffeff7f;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xaaaaaaaa, 0xaaaaaaaa, 0xfffeff7f, x12, 192, x13)

inst_50:
// rs2_h0_val == -9, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xffbfffffffffffff; op2val:0xfffffff7;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xffbfffff, 0xfffffff7, x12, 200, x13)

inst_51:
// rs2_h0_val == -5, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xffffffffff7fffff; op2val:0x3ffffffb;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xff7fffff, 0xffffffff, 0x3ffffffb, x12, 208, x13)

inst_52:
// rs2_h0_val == -3, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000000000009; op2val:0xfff8fffd;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000009, 0x00000000, 0xfff8fffd, x12, 216, x13)

inst_53:
// rs2_h0_val == -32768, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0200000000000000; op2val:0x02008000;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x02000000, 0x02008000, x12, 224, x13)

inst_54:
// rs2_h0_val == 8192, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffff7ffffffffff; op2val:0x00042000;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xfffff7ff, 0x00042000, x12, 232, x13)

inst_55:
// rs2_h0_val == 4096, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfbffffffffffffff; op2val:0x00051000;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xfbffffff, 0x00051000, x12, 240, x13)

inst_56:
// rs2_h0_val == 2048, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0080000000000000; op2val:0xffef0800;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00800000, 0xffef0800, x12, 248, x13)

inst_57:
// rs2_h0_val == 1024, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0x0000000200000000; op2val:0xfff90400;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0x00000000, 0x00000002, 0xfff90400, x12, 256, x13)

inst_58:
// rs2_h0_val == 256, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffffffffffff8; op2val:0xfdff0100;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xfffffff8, 0xffffffff, 0xfdff0100, x12, 264, x13)

inst_59:
// rs2_h1_val == -21846, 
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffffbffffffff; op2val:0xaaaafffc;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xffffffff, 0xfffffffb, 0xaaaafffc, x12, 272, x13)

inst_60:
// rs2_h1_val == 32767, rs2_h0_val == -33
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffffffffffff7; op2val:0x7fffffdf;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xfffffff7, 0xffffffff, 0x7fffffdf, x12, 280, x13)

inst_61:
// rs2_h1_val == -5, rs2_h0_val == -17
// opcode: smal ; op1:x28; op2:x31; dest:x30; op1val:0xfffffffffffffff9; op2val:0xfffbffef;
TEST_P64_PPN_OP(smal, x30, x31, x28, x29, x31, 0x00000000, 0, 0xfffffff9, 0xffffffff, 0xfffbffef, x12, 288, x13)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
