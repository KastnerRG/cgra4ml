
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:53:29 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd820 instruction of the RISC-V RV32PZicsr extension for the sunpkd820 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IPZicsr")

.section .text.init
.org 0x80
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd820)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1==x17, rd==x4, rs1_b0_val == -128, rs1_b2_val == -2, rs1_b1_val == -9
// opcode: sunpkd820 ; op1:x17; dest:x4; op1val:0x3fef780;
TEST_RD_OP( sunpkd820, x4, x17, 0x00000000, 0x3fef780, x12, 0, x14)

inst_1:
// rs1==x13, rd==x30, rs1_b3_val == -86, rs1_b2_val == -5
// opcode: sunpkd820 ; op1:x13; dest:x30; op1val:0xaafbfa03;
TEST_RD_OP( sunpkd820, x30, x13, 0x00000000, 0xaafbfa03, x12, 4, x14)

inst_2:
// rs1==x21, rd==x31, rs1_b3_val == 85, rs1_b1_val == -5, rs1_b0_val == 1
// opcode: sunpkd820 ; op1:x21; dest:x31; op1val:0x553ffb01;
TEST_RD_OP( sunpkd820, x31, x21, 0x00000000, 0x553ffb01, x12, 8, x14)

inst_3:
// rs1==x27, rd==x3, rs1_b3_val == 127, rs1_b2_val == -17, rs1_b1_val == -128
// opcode: sunpkd820 ; op1:x27; dest:x3; op1val:0x7fef8007;
TEST_RD_OP( sunpkd820, x3, x27, 0x00000000, 0x7fef8007, x12, 12, x14)

inst_4:
// rs1==x0, rd==x16, rs1_b3_val == -65, rs1_b2_val == 4, rs1_b1_val == 64, rs1_b0_val == -1
// opcode: sunpkd820 ; op1:x0; dest:x16; op1val:0xbf0440ff;
TEST_RD_OP( sunpkd820, x16, x0, 0x00000000, 0xbf0440ff, x12, 16, x14)

inst_5:
// rs1==x2, rd==x24, rs1_b3_val == -33, rs1_b2_val == 85
// opcode: sunpkd820 ; op1:x2; dest:x24; op1val:0xdf553f80;
TEST_RD_OP( sunpkd820, x24, x2, 0x00000000, 0xdf553f80, x12, 20, x14)

inst_6:
// rs1==x29, rd==x22, rs1_b3_val == -17, rs1_b2_val == 64, rs1_b1_val == 32
// opcode: sunpkd820 ; op1:x29; dest:x22; op1val:0xef4020c0;
TEST_RD_OP( sunpkd820, x22, x29, 0x00000000, 0xef4020c0, x12, 24, x14)

inst_7:
// rs1==x20, rd==x1, rs1_b3_val == -9, rs1_b0_val == -33, rs1_b1_val == -1
// opcode: sunpkd820 ; op1:x20; dest:x1; op1val:0xf73fffdf;
TEST_RD_OP( sunpkd820, x1, x20, 0x00000000, 0xf73fffdf, x12, 28, x14)

inst_8:
// rs1==x25, rd==x19, rs1_b3_val == -5, 
// opcode: sunpkd820 ; op1:x25; dest:x19; op1val:0xfb040905;
TEST_RD_OP( sunpkd820, x19, x25, 0x00000000, 0xfb040905, x12, 32, x14)

inst_9:
// rs1==x5, rd==x9, rs1_b3_val == -3, rs1_b1_val == 127
// opcode: sunpkd820 ; op1:x5; dest:x9; op1val:0xfdf97ffc;
TEST_RD_OP( sunpkd820, x9, x5, 0x00000000, 0xfdf97ffc, x12, 36, x14)

inst_10:
// rs1==x24, rd==x21, rs1_b3_val == -2, rs1_b0_val == 64
// opcode: sunpkd820 ; op1:x24; dest:x21; op1val:0xfe070340;
TEST_RD_OP( sunpkd820, x21, x24, 0x00000000, 0xfe070340, x12, 40, x14)

inst_11:
// rs1==x15, rd==x8, rs1_b3_val == -128, 
// opcode: sunpkd820 ; op1:x15; dest:x8; op1val:0x8006faf8;
TEST_RD_OP( sunpkd820, x8, x15, 0x00000000, 0x8006faf8, x12, 44, x14)

inst_12:
// rs1==x22, rd==x17, rs1_b3_val == 64, rs1_b0_val == 0
// opcode: sunpkd820 ; op1:x22; dest:x17; op1val:0x40f90300;
TEST_RD_OP( sunpkd820, x17, x22, 0x00000000, 0x40f90300, x12, 48, x14)

inst_13:
// rs1==x11, rd==x27, rs1_b3_val == 32, rs1_b1_val == -17
// opcode: sunpkd820 ; op1:x11; dest:x27; op1val:0x20efeffc;
TEST_RD_OP( sunpkd820, x27, x11, 0x00000000, 0x20efeffc, x12, 52, x14)

inst_14:
// rs1==x23, rd==x26, rs1_b3_val == 16, rs1_b1_val == 16
// opcode: sunpkd820 ; op1:x23; dest:x26; op1val:0x10051080;
TEST_RD_OP( sunpkd820, x26, x23, 0x00000000, 0x10051080, x12, 56, x14)

inst_15:
// rs1==x1, rd==x7, rs1_b3_val == 8, rs1_b2_val == -9, rs1_b0_val == -5
// opcode: sunpkd820 ; op1:x1; dest:x7; op1val:0x8f707fb;
TEST_RD_OP( sunpkd820, x7, x1, 0x00000000, 0x8f707fb, x12, 60, x14)

inst_16:
// rs1==x16, rd==x20, rs1_b3_val == 4, rs1_b0_val == -65, rs1_b2_val == -128
// opcode: sunpkd820 ; op1:x16; dest:x20; op1val:0x480efbf;
TEST_RD_OP( sunpkd820, x20, x16, 0x00000000, 0x480efbf, x12, 64, x14)

inst_17:
// rs1==x18, rd==x13, rs1_b3_val == 2, rs1_b1_val == -2, rs1_b2_val == 127
// opcode: sunpkd820 ; op1:x18; dest:x13; op1val:0x27ffef9;
TEST_RD_OP( sunpkd820, x13, x18, 0x00000000, 0x27ffef9, x12, 68, x14)

inst_18:
// rs1==x26, rd==x15, rs1_b3_val == 1, 
// opcode: sunpkd820 ; op1:x26; dest:x15; op1val:0x104f6f6;
TEST_RD_OP( sunpkd820, x15, x26, 0x00000000, 0x104f6f6, x12, 72, x14)

inst_19:
// rs1==x8, rd==x29, rs1_b3_val == 0, 
// opcode: sunpkd820 ; op1:x8; dest:x29; op1val:0xf8f6bf;
TEST_RD_OP( sunpkd820, x29, x8, 0x00000000, 0xf8f6bf, x12, 76, x14)

inst_20:
// rs1==x9, rd==x5, rs1_b3_val == -1, 
// opcode: sunpkd820 ; op1:x9; dest:x5; op1val:0xfff9ef09;
TEST_RD_OP( sunpkd820, x5, x9, 0x00000000, 0xfff9ef09, x12, 80, x14)

inst_21:
// rs1==x6, rd==x10, rs1_b2_val == -86, 
// opcode: sunpkd820 ; op1:x6; dest:x10; op1val:0xf9aafcfa;
TEST_RD_OP( sunpkd820, x10, x6, 0x00000000, 0xf9aafcfa, x12, 84, x14)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x30, rd==x25, rs1_b2_val == -65, 
// opcode: sunpkd820 ; op1:x30; dest:x25; op1val:0xbff7fc;
TEST_RD_OP( sunpkd820, x25, x30, 0x00000000, 0xbff7fc, x1, 0, x5)

inst_23:
// rs1==x7, rd==x11, rs1_b0_val == -17, rs1_b1_val == 0, rs1_b2_val == -3
// opcode: sunpkd820 ; op1:x7; dest:x11; op1val:0xfefd00ef;
TEST_RD_OP( sunpkd820, x11, x7, 0x00000000, 0xfefd00ef, x1, 4, x5)

inst_24:
// rs1==x28, rd==x6, rs1_b0_val == -9, 
// opcode: sunpkd820 ; op1:x28; dest:x6; op1val:0x60920f7;
TEST_RD_OP( sunpkd820, x6, x28, 0x00000000, 0x60920f7, x1, 8, x5)

inst_25:
// rs1==x14, rd==x2, rs1_b0_val == -3, rs1_b2_val == 8
// opcode: sunpkd820 ; op1:x14; dest:x2; op1val:0xfd0810fd;
TEST_RD_OP( sunpkd820, x2, x14, 0x00000000, 0xfd0810fd, x1, 12, x5)

inst_26:
// rs1==x19, rd==x14, rs1_b0_val == -2, 
// opcode: sunpkd820 ; op1:x19; dest:x14; op1val:0x55c0fcfe;
TEST_RD_OP( sunpkd820, x14, x19, 0x00000000, 0x55c0fcfe, x1, 16, x5)

inst_27:
// rs1==x12, rd==x23, rs1_b0_val == 32, 
// opcode: sunpkd820 ; op1:x12; dest:x23; op1val:0x5c0f720;
TEST_RD_OP( sunpkd820, x23, x12, 0x00000000, 0x5c0f720, x1, 20, x5)

inst_28:
// rs1==x31, rd==x18, rs1_b0_val == 16, 
// opcode: sunpkd820 ; op1:x31; dest:x18; op1val:0xeff91010;
TEST_RD_OP( sunpkd820, x18, x31, 0x00000000, 0xeff91010, x1, 24, x5)

inst_29:
// rs1==x4, rd==x0, rs1_b0_val == 8, rs1_b2_val == 16
// opcode: sunpkd820 ; op1:x4; dest:x0; op1val:0xfd100908;
TEST_RD_OP( sunpkd820, x0, x4, 0x00000000, 0xfd100908, x1, 28, x5)

inst_30:
// rs1==x10, rd==x12, rs1_b0_val == 4, rs1_b1_val == -33, rs1_b2_val == 2
// opcode: sunpkd820 ; op1:x10; dest:x12; op1val:0xbf02df04;
TEST_RD_OP( sunpkd820, x12, x10, 0x00000000, 0xbf02df04, x1, 32, x5)

inst_31:
// rs1==x3, rd==x28, rs1_b0_val == 2, rs1_b1_val == -65
// opcode: sunpkd820 ; op1:x3; dest:x28; op1val:0xf608bf02;
TEST_RD_OP( sunpkd820, x28, x3, 0x00000000, 0xf608bf02, x1, 36, x5)

inst_32:
// rs1_b2_val == -33, rs1_b1_val == -3
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xf9dffd03;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xf9dffd03, x1, 40, x5)

inst_33:
// rs1_b2_val == 32, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x820fd04;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x820fd04, x1, 44, x5)

inst_34:
// rs1_b2_val == 1, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xbf01fafd;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xbf01fafd, x1, 48, x5)

inst_35:
// rs1_b2_val == 0, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xfa00df3f;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xfa00df3f, x1, 52, x5)

inst_36:
// rs1_b2_val == -1, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xf6ff0020;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xf6ff0020, x1, 56, x5)

inst_37:
// rs1_b1_val == -86, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xc0fcaa10;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xc0fcaa10, x1, 60, x5)

inst_38:
// rs1_b1_val == 85, rs1_b0_val == 127
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x9fb557f;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x9fb557f, x1, 64, x5)

inst_39:
// rs1_b1_val == 8, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x7f1008df;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x7f1008df, x1, 68, x5)

inst_40:
// rs1_b1_val == 4, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x7f070409;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x7f070409, x1, 72, x5)

inst_41:
// rs1_b1_val == 2, rs1_b0_val == 85
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x6fe0255;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x6fe0255, x1, 76, x5)

inst_42:
// rs1_b1_val == 1, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x53f01fd;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x53f01fd, x1, 80, x5)

inst_43:
// rs1_b0_val == -86, 
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0x50355aa;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0x50355aa, x1, 84, x5)

inst_44:
// rs1_b3_val == -65, rs1_b2_val == 4, rs1_b1_val == 64, rs1_b0_val == -1
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xbf0440ff;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xbf0440ff, x1, 88, x5)

inst_45:
// rs1_b0_val == 8, rs1_b2_val == 16
// opcode: sunpkd820 ; op1:x30; dest:x31; op1val:0xfd100908;
TEST_RD_OP( sunpkd820, x31, x30, 0x00000000, 0xfd100908, x1, 92, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 24*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
